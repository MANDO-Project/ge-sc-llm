digraph  {
13 [label="2_ totalSupply\n13-function_definition-3-3", type_label=function_definition];
21 [label="3_ balanceOf\n21-function_definition-4-4", type_label=function_definition];
33 [label="4_ transfer\n33-function_definition-5-5", type_label=function_definition];
48 [label="5_ allowance\n48-function_definition-6-6", type_label=function_definition];
64 [label="6_ transferFrom\n64-function_definition-7-7", type_label=function_definition];
83 [label="7_ approve\n83-function_definition-8-8", type_label=function_definition];
129 [label="12_ address public owner;\n129-new_variable-13-13", type_label=new_variable];
134 [label="13_ address public mintOwner;\n134-new_variable-14-14", type_label=new_variable];
161 [label="17_ owner = msg.sender;\n161-expression_statement-18-18", type_label=expression_statement];
167 [label="18_ mintOwner = msg.sender;\n167-expression_statement-19-19", type_label=expression_statement];
173 [label="20_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n173-expression_statement-21-24", type_label=expression_statement];
176 [label="21_ require(msg.sender == owner);\n176-expression_statement-22-22", type_label=expression_statement];
185 [label="22_ _;\n185-expression_statement-23-23", type_label=expression_statement];
187 [label="24_ modifier onlyMintOwner() {\n    require(msg.sender == mintOwner);\n    _;\n  }\n187-expression_statement-25-28", type_label=expression_statement];
190 [label="25_ require(msg.sender == mintOwner);\n190-expression_statement-26-26", type_label=expression_statement];
199 [label="26_ _;\n199-expression_statement-27-27", type_label=expression_statement];
201 [label="28_ transferOwnership\n201-function_definition-29-33", type_label=function_definition];
208 [label="28_ onlyOwner\n208-expression_statement-29-29", type_label=expression_statement];
211 [label="29_ require(newOwner != address(0));\n211-expression_statement-30-30", type_label=expression_statement];
226 [label="31_ owner = newOwner;\n226-expression_statement-32-32", type_label=expression_statement];
230 [label="33_ transferMintOwnership\n230-function_definition-34-38", type_label=function_definition];
237 [label="33_ onlyOwner\n237-expression_statement-34-34", type_label=expression_statement];
240 [label="34_ require(newOwner != address(0));\n240-expression_statement-35-35", type_label=expression_statement];
255 [label="36_ mintOwner = newOwner;\n255-expression_statement-37-37", type_label=expression_statement];
262 [label="40_ mul\n262-function_definition-41-48", type_label=function_definition];
279 [label="41_ if_a == 0\n279-if-42-44", type_label=if];
1490 [label="41_ end_if", type_label=end_if];
284 [label="42_ return 0;\n284-return-43-43", type_label=return];
286 [label="44_ uint256 c = a * b;\n286-new_variable-45-45", type_label=new_variable];
294 [label="45_ assert(c / a == b);\n294-expression_statement-46-46", type_label=expression_statement];
303 [label="46_ return c;\n303-return-47-47", type_label=return];
305 [label="48_ div\n305-function_definition-49-52", type_label=function_definition];
322 [label="49_ uint256 c = a / b;\n322-new_variable-50-50", type_label=new_variable];
330 [label="50_ return c;\n330-return-51-51", type_label=return];
332 [label="52_ sub\n332-function_definition-53-56", type_label=function_definition];
349 [label="53_ assert(b <= a);\n349-expression_statement-54-54", type_label=expression_statement];
356 [label="54_ return a - b;\n356-return-55-55", type_label=return];
360 [label="56_ add\n360-function_definition-57-61", type_label=function_definition];
377 [label="57_ uint256 c = a + b;\n377-new_variable-58-58", type_label=new_variable];
385 [label="58_ assert(c >= a);\n385-expression_statement-59-59", type_label=expression_statement];
392 [label="59_ return c;\n392-return-60-60", type_label=return];
394 [label="61_ uint2str\n394-function_definition-62-77", type_label=function_definition];
407 [label="62_ if_i == 0\n407-if-63-63", type_label=if];
1618 [label="62_ end_if", type_label=end_if];
411 [label="62_ return \"0\";\n411-return-63-63", type_label=return];
414 [label="63_ uint j = i;\n414-new_variable-64-64", type_label=new_variable];
420 [label="64_ uint length;\n420-new_variable-65-65", type_label=new_variable];
425 [label="65_ while\n425-while-66-69", type_label=while];
1636 [label="65_ end_while", type_label=end_while];
430 [label="66_ length++;\n430-expression_statement-67-67", type_label=expression_statement];
431 [label="66_ length++\n431-expression_statement-67-67", type_label=expression_statement];
433 [label="67_ j /= 10;\n433-expression_statement-68-68", type_label=expression_statement];
437 [label="69_ bytes memory bstr = new bytes(length);\n437-new_variable-70-70", type_label=new_variable];
448 [label="70_ uint k = length - 1;\n448-new_variable-71-71", type_label=new_variable];
456 [label="71_ while\n456-while-72-75", type_label=while];
1667 [label="71_ end_while", type_label=end_while];
461 [label="72_ bstr[k--] = byte(48 + i % 10);\n461-expression_statement-73-73", type_label=expression_statement];
465 [label="72_ k--\n465-expression_statement-73-73", type_label=expression_statement];
474 [label="73_ i /= 10;\n474-expression_statement-74-74", type_label=expression_statement];
478 [label="75_ return string(bstr);\n478-return-76-76", type_label=return];
496 [label="80_ string public constant name = \"HSYToken\";\n496-new_variable-81-81", type_label=new_variable];
503 [label="81_ string public constant symbol = \"HSY\";\n503-new_variable-82-82", type_label=new_variable];
510 [label="82_ uint8 public constant decimals = 18;\n510-new_variable-83-83", type_label=new_variable];
516 [label="83_ uint256  hardCap_ = 244000000 * (10**uint256(18));\n516-new_variable-84-84", type_label=new_variable];
528 [label="84_ mapping(address => uint256) balances;\n528-new_variable-85-85", type_label=new_variable];
534 [label="85_ mapping(address => mapping (address => uint256)) internal allowed;\n534-new_variable-86-86", type_label=new_variable];
557 [label="89_ bool public pauseMinting = false;\n557-new_variable-90-90", type_label=new_variable];
564 [label="90_ uint256 totalSupply_ = 9999999999999999999999;\n564-new_variable-91-91", type_label=new_variable];
571 [label="93_ modifier onlyPayloadSize(uint size) {\n    assert(msg.data.length >= size + 4);\n    _;\n  }\n571-expression_statement-94-97", type_label=expression_statement];
578 [label="94_ assert(msg.data.length >= size + 4);\n578-expression_statement-95-95", type_label=expression_statement];
591 [label="95_ _;\n591-expression_statement-96-96", type_label=expression_statement];
593 [label="97_ totalSupply\n593-function_definition-98-100", type_label=function_definition];
602 [label="98_ return totalSupply_;\n602-return-99-99", type_label=return];
604 [label="100_ hardCap\n604-function_definition-101-103", type_label=function_definition];
613 [label="101_ return hardCap_;\n613-return-102-102", type_label=return];
615 [label="103_ transfer\n615-function_definition-104-106", type_label=function_definition];
626 [label="103_ onlyPayloadSize(2 * 32)\n626-expression_statement-104-104", type_label=expression_statement];
637 [label="104_ return _transfer(msg.sender, _to, _value);\n637-return-105-105", type_label=return];
648 [label="106_ _transfer\n648-function_definition-107-114", type_label=function_definition];
668 [label="107_ require(_to != address(0));\n668-expression_statement-108-108", type_label=expression_statement];
677 [label="108_ require(_value <= balances[msg.sender]);\n677-expression_statement-109-109", type_label=expression_statement];
688 [label="109_ balances[_from] = balances[_from].sub(_value);\n688-expression_statement-110-110", type_label=expression_statement];
701 [label="110_ balances[_to] = balances[_to].add(_value);\n701-expression_statement-111-111", type_label=expression_statement];
722 [label="112_ return true;\n722-return-113-113", type_label=return];
725 [label="114_ transferFrom\n725-function_definition-115-124", type_label=function_definition];
740 [label="114_ onlyPayloadSize(3 * 32)\n740-expression_statement-115-115", type_label=expression_statement];
751 [label="115_ require(_to != address(0));\n751-expression_statement-116-116", type_label=expression_statement];
760 [label="116_ require(_value <= balances[_from]);\n760-expression_statement-117-117", type_label=expression_statement];
769 [label="117_ require(_value <= allowed[_from][msg.sender]);\n769-expression_statement-118-118", type_label=expression_statement];
782 [label="118_ balances[_from] = balances[_from].sub(_value);\n782-expression_statement-119-119", type_label=expression_statement];
795 [label="119_ balances[_to] = balances[_to].add(_value);\n795-expression_statement-120-120", type_label=expression_statement];
808 [label="120_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n808-expression_statement-121-121", type_label=expression_statement];
837 [label="122_ return true;\n837-return-123-123", type_label=return];
840 [label="124_ balanceOf\n840-function_definition-125-127", type_label=function_definition];
854 [label="125_ return balances[_owner];\n854-return-126-126", type_label=return];
858 [label="127_ approve\n858-function_definition-128-132", type_label=function_definition];
874 [label="128_ allowed[msg.sender][_spender] = _value;\n874-expression_statement-129-129", type_label=expression_statement];
894 [label="130_ return true;\n894-return-131-131", type_label=return];
897 [label="132_ allowance\n897-function_definition-133-135", type_label=function_definition];
914 [label="133_ return allowed[_owner][_spender];\n914-return-134-134", type_label=return];
920 [label="135_ increaseApproval\n920-function_definition-136-140", type_label=function_definition];
936 [label="136_ allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n936-expression_statement-137-137", type_label=expression_statement];
973 [label="138_ return true;\n973-return-139-139", type_label=return];
976 [label="140_ decreaseApproval\n976-function_definition-141-150", type_label=function_definition];
992 [label="141_ uint oldValue = allowed[msg.sender][_spender];\n992-new_variable-142-142", type_label=new_variable];
1004 [label="142_ if__subtractedValue > oldValue\n1004-if-143-147", type_label=if];
2215 [label="142_ end_if", type_label=end_if];
1009 [label="143_ allowed[msg.sender][_spender] = 0;\n1009-expression_statement-144-144", type_label=expression_statement];
1020 [label="145_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n1020-expression_statement-146-146", type_label=expression_statement];
1051 [label="148_ return true;\n1051-return-149-149", type_label=return];
1054 [label="150_ modifier canMint() {\n    require(!pauseMinting);\n    _;\n  }\n1054-expression_statement-151-154", type_label=expression_statement];
1057 [label="151_ require(!pauseMinting);\n1057-expression_statement-152-152", type_label=expression_statement];
1063 [label="152_ _;\n1063-expression_statement-153-153", type_label=expression_statement];
1065 [label="154_ mint\n1065-function_definition-155-163", type_label=function_definition];
1075 [label="154_ onlyMintOwner\n1075-expression_statement-155-155", type_label=expression_statement];
1077 [label="154_ canMint\n1077-expression_statement-155-155", type_label=expression_statement];
1085 [label="155_ require(_to != address(0));\n1085-expression_statement-156-156", type_label=expression_statement];
1094 [label="156_ require(totalSupply_.add(_amount) <= hardCap_);\n1094-expression_statement-157-157", type_label=expression_statement];
1106 [label="157_ totalSupply_ = totalSupply_.add(_amount);\n1106-expression_statement-158-158", type_label=expression_statement];
1115 [label="158_ balances[_to] = balances[_to].add(_amount);\n1115-expression_statement-159-159", type_label=expression_statement];
1144 [label="161_ return true;\n1144-return-162-162", type_label=return];
1147 [label="163_ toggleMinting\n1147-function_definition-164-172", type_label=function_definition];
1149 [label="163_ onlyOwner\n1149-expression_statement-164-164", type_label=expression_statement];
1153 [label="164_ if\n1153-if-165-171", type_label=if];
2364 [label="164_ end_if", type_label=end_if];
1156 [label="165_ pauseMinting = false;\n1156-expression_statement-166-166", type_label=expression_statement];
1164 [label="168_ pauseMinting = true;\n1164-expression_statement-169-169", type_label=expression_statement];
1171 [label="172_ refundOtherTokens\n1171-function_definition-173-177", type_label=function_definition];
1182 [label="172_ onlyOwner\n1182-expression_statement-173-173", type_label=expression_statement];
1186 [label="173_ require(_token != this);\n1186-expression_statement-174-174", type_label=expression_statement];
1193 [label="174_ uint256 balance = _token.balanceOf(this);\n1193-new_variable-175-175", type_label=new_variable];
1204 [label="175_ require(_token.transfer(_recipient, balance));\n1204-expression_statement-176-176", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
1035;
1169;
129 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
176 -> 185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
190 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
201 -> 211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
279 -> 284  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
279 -> 1490  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1490 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
284 -> 1490  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
284 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
286 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
305 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
332 -> 349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
349 -> 356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
356 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
360 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
392 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
394 -> 407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 411  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
407 -> 1618  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1618 -> 414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 1618  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
411 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
414 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
425 -> 430  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
425 -> 1636  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1636 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 425  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
437 -> 448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
448 -> 456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
456 -> 461  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
456 -> 1667  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1667 -> 478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
474 -> 456  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
478 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
496 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
503 -> 510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
516 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
557 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
578 -> 591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
604 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
615 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
637 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
648 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
668 -> 677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
722 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
725 -> 751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
751 -> 760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
760 -> 769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
769 -> 782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
782 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
795 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
840 -> 854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
858 -> 874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
894 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
897 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
920 -> 936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
973 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
976 -> 992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 1004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 1009  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1004 -> 1020  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2215 -> 1035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1009 -> 2215  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1020 -> 2215  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1051 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1057 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1065 -> 1085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1075 -> 1077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1085 -> 1094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1094 -> 1106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 1115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1147 -> 1153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1153 -> 1156  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1153 -> 1164  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1171 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 1193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1193 -> 1204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1169 -> 2364  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
