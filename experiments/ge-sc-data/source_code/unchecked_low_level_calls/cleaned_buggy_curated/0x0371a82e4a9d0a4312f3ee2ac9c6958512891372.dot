digraph  {
9 [label="1_ uint256 public totalSupply;\n9-new_variable-2-2", type_label=new_variable];
14 [label="2_ balanceOf\n14-function_definition-3-3", type_label=function_definition];
20 [label="2_ constant\n20-expression_statement-3-3", type_label=expression_statement];
26 [label="3_ transfer\n26-function_definition-4-4", type_label=function_definition];
60 [label="7_ allowance\n60-function_definition-8-8", type_label=function_definition];
70 [label="7_ constant\n70-expression_statement-8-8", type_label=expression_statement];
76 [label="8_ transferFrom\n76-function_definition-9-9", type_label=function_definition];
94 [label="9_ approve\n94-function_definition-10-10", type_label=function_definition];
125 [label="13_ safeMul\n125-function_definition-14-18", type_label=function_definition];
141 [label="14_ uint c = a * b;\n141-new_variable-15-15", type_label=new_variable];
149 [label="15_ assert(a == 0 || c / a == b);\n149-expression_statement-16-16", type_label=expression_statement];
162 [label="16_ return c;\n162-return-17-17", type_label=return];
164 [label="18_ safeDiv\n164-function_definition-19-24", type_label=function_definition];
180 [label="19_ assert(b > 0);\n180-expression_statement-20-20", type_label=expression_statement];
187 [label="20_ uint c = a / b;\n187-new_variable-21-21", type_label=new_variable];
195 [label="21_ assert(a == b * c + a % b);\n195-expression_statement-22-22", type_label=expression_statement];
208 [label="22_ return c;\n208-return-23-23", type_label=return];
210 [label="24_ safeSub\n210-function_definition-25-28", type_label=function_definition];
226 [label="25_ assert(b <= a);\n226-expression_statement-26-26", type_label=expression_statement];
233 [label="26_ return a - b;\n233-return-27-27", type_label=return];
237 [label="28_ safeAdd\n237-function_definition-29-33", type_label=function_definition];
253 [label="29_ uint c = a + b;\n253-new_variable-30-30", type_label=new_variable];
261 [label="30_ assert(c>=a && c>=b);\n261-expression_statement-31-31", type_label=expression_statement];
272 [label="31_ return c;\n272-return-32-32", type_label=return];
274 [label="33_ max64\n274-function_definition-34-36", type_label=function_definition];
285 [label="33_ constant\n285-expression_statement-34-34", type_label=expression_statement];
292 [label="34_ return a >= b ? a : b;\n292-return-35-35", type_label=return];
299 [label="36_ min64\n299-function_definition-37-39", type_label=function_definition];
310 [label="36_ constant\n310-expression_statement-37-37", type_label=expression_statement];
317 [label="37_ return a < b ? a : b;\n317-return-38-38", type_label=return];
324 [label="39_ max256\n324-function_definition-40-42", type_label=function_definition];
335 [label="39_ constant\n335-expression_statement-40-40", type_label=expression_statement];
342 [label="40_ return a >= b ? a : b;\n342-return-41-41", type_label=return];
349 [label="42_ min256\n349-function_definition-43-45", type_label=function_definition];
360 [label="42_ constant\n360-expression_statement-43-43", type_label=expression_statement];
367 [label="43_ return a < b ? a : b;\n367-return-44-44", type_label=return];
393 [label="48_ mapping(address => uint) balances;\n393-new_variable-49-49", type_label=new_variable];
399 [label="49_ mapping (address => mapping (address => uint)) allowed;\n399-new_variable-50-50", type_label=new_variable];
407 [label="50_ isToken\n407-function_definition-51-53", type_label=function_definition];
410 [label="50_ constant\n410-expression_statement-51-51", type_label=expression_statement];
418 [label="51_ return true;\n418-return-52-52", type_label=return];
421 [label="53_ transfer\n421-function_definition-54-59", type_label=function_definition];
437 [label="54_ balances[msg.sender] = safeSub(balances[msg.sender], _value);\n437-expression_statement-55-55", type_label=expression_statement];
454 [label="55_ balances[_to] = safeAdd(balances[_to], _value);\n454-expression_statement-56-56", type_label=expression_statement];
467 [label="56_ Transfer(msg.sender, _to, _value);\n467-expression_statement-57-57", type_label=expression_statement];
478 [label="57_ return true;\n478-return-58-58", type_label=return];
481 [label="59_ transferFrom\n481-function_definition-60-67", type_label=function_definition];
501 [label="60_ uint _allowance = allowed[_from][msg.sender];\n501-new_variable-61-61", type_label=new_variable];
513 [label="61_ balances[_to] = safeAdd(balances[_to], _value);\n513-expression_statement-62-62", type_label=expression_statement];
526 [label="62_ balances[_from] = safeSub(balances[_from], _value);\n526-expression_statement-63-63", type_label=expression_statement];
539 [label="63_ allowed[_from][msg.sender] = safeSub(_allowance, _value);\n539-expression_statement-64-64", type_label=expression_statement];
554 [label="64_ Transfer(_from, _to, _value);\n554-expression_statement-65-65", type_label=expression_statement];
563 [label="65_ return true;\n563-return-66-66", type_label=return];
566 [label="67_ balanceOf\n566-function_definition-68-70", type_label=function_definition];
572 [label="67_ constant\n572-expression_statement-68-68", type_label=expression_statement];
580 [label="68_ return balances[_owner];\n580-return-69-69", type_label=return];
584 [label="70_ approve\n584-function_definition-71-76", type_label=function_definition];
600 [label="71_ if_(_value != 0) && (allowed[msg.sender][_spender] != 0)\n600-if-72-72", type_label=if];
2379 [label="71_ end_if", type_label=end_if];
616 [label="71_ throw;\n616-expression_statement-72-72", type_label=expression_statement];
618 [label="72_ allowed[msg.sender][_spender] = _value;\n618-expression_statement-73-73", type_label=expression_statement];
628 [label="73_ Approval(msg.sender, _spender, _value);\n628-expression_statement-74-74", type_label=expression_statement];
639 [label="74_ return true;\n639-return-75-75", type_label=return];
642 [label="76_ allowance\n642-function_definition-77-79", type_label=function_definition];
652 [label="76_ constant\n652-expression_statement-77-77", type_label=expression_statement];
660 [label="77_ return allowed[_owner][_spender];\n660-return-78-78", type_label=return];
672 [label="81_ address public constant BURN_ADDRESS = 0;\n672-new_variable-82-82", type_label=new_variable];
688 [label="83_ burn\n688-function_definition-84-89", type_label=function_definition];
695 [label="84_ address burner = msg.sender;\n695-new_variable-85-85", type_label=new_variable];
703 [label="85_ balances[burner] = safeSub(balances[burner], burnAmount);\n703-expression_statement-86-86", type_label=expression_statement];
716 [label="86_ totalSupply = safeSub(totalSupply, burnAmount);\n716-expression_statement-87-87", type_label=expression_statement];
725 [label="87_ Burned(burner, burnAmount);\n725-expression_statement-88-88", type_label=expression_statement];
735 [label="91_ uint public originalSupply;\n735-new_variable-92-92", type_label=new_variable];
740 [label="92_ isUpgradeAgent\n740-function_definition-93-95", type_label=function_definition];
743 [label="92_ constant\n743-expression_statement-93-93", type_label=expression_statement];
750 [label="93_ return true;\n750-return-94-94", type_label=return];
753 [label="95_ upgradeFrom\n753-function_definition-96-96", type_label=function_definition];
770 [label="98_ address public upgradeMaster;\n770-new_variable-99-99", type_label=new_variable];
775 [label="99_ UpgradeAgent public upgradeAgent;\n775-new_variable-100-100", type_label=new_variable];
781 [label="100_ uint256 public totalUpgraded;\n781-new_variable-101-101", type_label=new_variable];
813 [label="104_ UpgradeableToken\n813-function_definition-105-107", type_label=function_definition];
820 [label="105_ upgradeMaster = _upgradeMaster;\n820-expression_statement-106-106", type_label=expression_statement];
824 [label="107_ upgrade\n824-function_definition-108-119", type_label=function_definition];
832 [label="108_ UpgradeState state = getUpgradeState();\n832-new_variable-109-109", type_label=new_variable];
840 [label="109_ if\n840-if-110-112", type_label=if];
2619 [label="109_ end_if", type_label=end_if];
855 [label="110_ throw;\n855-expression_statement-111-111", type_label=expression_statement];
857 [label="112_ if_value == 0\n857-if-113-113", type_label=if];
2636 [label="112_ end_if", type_label=end_if];
861 [label="112_ throw;\n861-expression_statement-113-113", type_label=expression_statement];
863 [label="113_ balances[msg.sender] = safeSub(balances[msg.sender], value);\n863-expression_statement-114-114", type_label=expression_statement];
880 [label="114_ totalSupply = safeSub(totalSupply, value);\n880-expression_statement-115-115", type_label=expression_statement];
889 [label="115_ totalUpgraded = safeAdd(totalUpgraded, value);\n889-expression_statement-116-116", type_label=expression_statement];
898 [label="116_ upgradeAgent.upgradeFrom(msg.sender, value);\n898-expression_statement-117-117", type_label=expression_statement];
909 [label="117_ Upgrade(msg.sender, upgradeAgent, value);\n909-expression_statement-118-118", type_label=expression_statement];
920 [label="119_ setUpgradeAgent\n920-function_definition-120-131", type_label=function_definition];
928 [label="120_ if\n928-if-121-123", type_label=if];
2707 [label="120_ end_if", type_label=end_if];
933 [label="121_ throw;\n933-expression_statement-122-122", type_label=expression_statement];
935 [label="123_ if_agent == 0x0\n935-if-124-124", type_label=if];
2714 [label="123_ end_if", type_label=end_if];
939 [label="123_ throw;\n939-expression_statement-124-124", type_label=expression_statement];
941 [label="124_ if_msg.sender != upgradeMaster\n941-if-125-125", type_label=if];
2720 [label="124_ end_if", type_label=end_if];
947 [label="124_ throw;\n947-expression_statement-125-125", type_label=expression_statement];
949 [label="125_ if_getUpgradeState() == UpgradeState.Upgrading\n949-if-126-126", type_label=if];
2728 [label="125_ end_if", type_label=end_if];
956 [label="125_ throw;\n956-expression_statement-126-126", type_label=expression_statement];
958 [label="126_ upgradeAgent = UpgradeAgent(agent);\n958-expression_statement-127-127", type_label=expression_statement];
965 [label="127_ if\n965-if-128-128", type_label=if];
2744 [label="127_ end_if", type_label=end_if];
971 [label="127_ throw;\n971-expression_statement-128-128", type_label=expression_statement];
973 [label="128_ if_upgradeAgent.originalSupply() != totalSupply\n973-if-129-129", type_label=if];
2752 [label="128_ end_if", type_label=end_if];
980 [label="128_ throw;\n980-expression_statement-129-129", type_label=expression_statement];
982 [label="129_ UpgradeAgentSet(upgradeAgent);\n982-expression_statement-130-130", type_label=expression_statement];
987 [label="131_ getUpgradeState\n987-function_definition-132-137", type_label=function_definition];
990 [label="131_ constant\n990-expression_statement-132-132", type_label=expression_statement];
998 [label="132_ if\n998-if-133-136", type_label=if];
2777 [label="132_ end_if", type_label=end_if];
1002 [label="132_ return UpgradeState.NotAllowed;\n1002-return-133-133", type_label=return];
1006 [label="133_ if_address(upgradeAgent) == 0x00\n1006-if-134-136", type_label=if];
1012 [label="133_ return UpgradeState.WaitingForAgent;\n1012-return-134-134", type_label=return];
1016 [label="134_ if_totalUpgraded == 0\n1016-if-135-136", type_label=if];
1020 [label="134_ return UpgradeState.ReadyToUpgrade;\n1020-return-135-135", type_label=return];
1024 [label="135_ return UpgradeState.Upgrading;\n1024-return-136-136", type_label=return];
1028 [label="137_ setUpgradeMaster\n1028-function_definition-138-142", type_label=function_definition];
1036 [label="138_ if_master == 0x0\n1036-if-139-139", type_label=if];
2815 [label="138_ end_if", type_label=end_if];
1040 [label="138_ throw;\n1040-expression_statement-139-139", type_label=expression_statement];
1042 [label="139_ if_msg.sender != upgradeMaster\n1042-if-140-140", type_label=if];
2821 [label="139_ end_if", type_label=end_if];
1048 [label="139_ throw;\n1048-expression_statement-140-140", type_label=expression_statement];
1050 [label="140_ upgradeMaster = master;\n1050-expression_statement-141-141", type_label=expression_statement];
1054 [label="142_ canUpgrade\n1054-function_definition-143-145", type_label=function_definition];
1057 [label="142_ constant\n1057-expression_statement-143-143", type_label=expression_statement];
1064 [label="143_ return true;\n1064-return-144-144", type_label=return];
1070 [label="147_ address public owner;\n1070-new_variable-148-148", type_label=new_variable];
1075 [label="148_ Ownable\n1075-function_definition-149-151", type_label=function_definition];
1078 [label="149_ owner = msg.sender;\n1078-expression_statement-150-150", type_label=expression_statement];
1084 [label="151_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n1084-expression_statement-152-155", type_label=expression_statement];
1087 [label="152_ require(msg.sender == owner);\n1087-expression_statement-153-153", type_label=expression_statement];
1096 [label="153_ _;\n1096-expression_statement-154-154", type_label=expression_statement];
1098 [label="155_ transferOwnership\n1098-function_definition-156-159", type_label=function_definition];
1104 [label="155_ onlyOwner\n1104-expression_statement-156-156", type_label=expression_statement];
1107 [label="156_ require(newOwner != address(0));\n1107-expression_statement-157-157", type_label=expression_statement];
1116 [label="157_ owner = newOwner;\n1116-expression_statement-158-158", type_label=expression_statement];
1129 [label="161_ address public releaseAgent;\n1129-new_variable-162-162", type_label=new_variable];
1134 [label="162_ bool public released = false;\n1134-new_variable-163-163", type_label=new_variable];
1141 [label="163_ mapping (address => bool) public transferAgents;\n1141-new_variable-164-164", type_label=new_variable];
1148 [label="164_ modifier canTransfer(address _sender) {\n    if(!released) {\n        if(!transferAgents[_sender]) {\n            throw;\n        }\n    }\n    _;\n  }\n1148-expression_statement-165-172", type_label=expression_statement];
1155 [label="165_ if\n1155-if-166-170", type_label=if];
2934 [label="165_ end_if", type_label=end_if];
1159 [label="166_ if\n1159-if-167-169", type_label=if];
2938 [label="166_ end_if", type_label=end_if];
1165 [label="167_ throw;\n1165-expression_statement-168-168", type_label=expression_statement];
1167 [label="170_ _;\n1167-expression_statement-171-171", type_label=expression_statement];
1169 [label="172_ setReleaseAgent\n1169-function_definition-173-175", type_label=function_definition];
1175 [label="172_ onlyOwner\n1175-expression_statement-173-173", type_label=expression_statement];
1177 [label="172_ inReleaseState(false)\n1177-expression_statement-173-173", type_label=expression_statement];
1184 [label="173_ releaseAgent = addr;\n1184-expression_statement-174-174", type_label=expression_statement];
1188 [label="175_ setTransferAgent\n1188-function_definition-176-178", type_label=function_definition];
1198 [label="175_ onlyOwner\n1198-expression_statement-176-176", type_label=expression_statement];
1200 [label="175_ inReleaseState(false)\n1200-expression_statement-176-176", type_label=expression_statement];
1207 [label="176_ transferAgents[addr] = state;\n1207-expression_statement-177-177", type_label=expression_statement];
1213 [label="178_ releaseTokenTransfer\n1213-function_definition-179-181", type_label=function_definition];
1216 [label="178_ onlyReleaseAgent\n1216-expression_statement-179-179", type_label=expression_statement];
1219 [label="179_ released = true;\n1219-expression_statement-180-180", type_label=expression_statement];
1224 [label="181_ modifier inReleaseState(bool releaseState) {\n    if(releaseState != released) {\n        throw;\n    }\n    _;\n  }\n1224-expression_statement-182-187", type_label=expression_statement];
1231 [label="182_ if_releaseState != released\n1231-if-183-185", type_label=if];
3010 [label="182_ end_if", type_label=end_if];
1236 [label="183_ throw;\n1236-expression_statement-184-184", type_label=expression_statement];
1238 [label="185_ _;\n1238-expression_statement-186-186", type_label=expression_statement];
1240 [label="187_ modifier onlyReleaseAgent() {\n    if(msg.sender != releaseAgent) {\n        throw;\n    }\n    _;\n  }\n1240-expression_statement-188-193", type_label=expression_statement];
1243 [label="188_ if_msg.sender != releaseAgent\n1243-if-189-191", type_label=if];
3022 [label="188_ end_if", type_label=end_if];
1250 [label="189_ throw;\n1250-expression_statement-190-190", type_label=expression_statement];
1252 [label="191_ _;\n1252-expression_statement-192-192", type_label=expression_statement];
1254 [label="193_ transfer\n1254-function_definition-194-196", type_label=function_definition];
1264 [label="193_ canTransfer(msg.sender)\n1264-expression_statement-194-194", type_label=expression_statement];
1276 [label="194_ return super.transfer(_to, _value);\n1276-return-195-195", type_label=return];
1285 [label="196_ transferFrom\n1285-function_definition-197-199", type_label=function_definition];
1299 [label="196_ canTransfer(_from)\n1299-expression_statement-197-197", type_label=expression_statement];
1309 [label="197_ return super.transferFrom(_from, _to, _value);\n1309-return-198-198", type_label=return];
1323 [label="201_ times\n1323-function_definition-202-206", type_label=function_definition];
1338 [label="202_ uint c = a * b;\n1338-new_variable-203-203", type_label=new_variable];
1346 [label="203_ assert(a == 0 || c / a == b);\n1346-expression_statement-204-204", type_label=expression_statement];
1359 [label="204_ return c;\n1359-return-205-205", type_label=return];
1361 [label="206_ minus\n1361-function_definition-207-210", type_label=function_definition];
1376 [label="207_ assert(b <= a);\n1376-expression_statement-208-208", type_label=expression_statement];
1383 [label="208_ return a - b;\n1383-return-209-209", type_label=return];
1387 [label="210_ plus\n1387-function_definition-211-215", type_label=function_definition];
1402 [label="211_ uint c = a + b;\n1402-new_variable-212-212", type_label=new_variable];
1410 [label="212_ assert(c>=a);\n1410-expression_statement-213-213", type_label=expression_statement];
1417 [label="213_ return c;\n1417-return-214-214", type_label=return];
1433 [label="218_ bool public mintingFinished = false;\n1433-new_variable-219-219", type_label=new_variable];
1440 [label="219_ mapping (address => bool) public mintAgents;\n1440-new_variable-220-220", type_label=new_variable];
1457 [label="221_ mint\n1457-function_definition-222-226", type_label=function_definition];
1467 [label="221_ onlyMintAgent\n1467-expression_statement-222-222", type_label=expression_statement];
1469 [label="221_ canMint\n1469-expression_statement-222-222", type_label=expression_statement];
1473 [label="222_ totalSupply = totalSupply.plus(amount);\n1473-expression_statement-223-223", type_label=expression_statement];
1482 [label="223_ balances[receiver] = balances[receiver].plus(amount);\n1482-expression_statement-224-224", type_label=expression_statement];
1495 [label="224_ Transfer(0, receiver, amount);\n1495-expression_statement-225-225", type_label=expression_statement];
1504 [label="226_ setMintAgent\n1504-function_definition-227-230", type_label=function_definition];
1514 [label="226_ onlyOwner\n1514-expression_statement-227-227", type_label=expression_statement];
1516 [label="226_ canMint\n1516-expression_statement-227-227", type_label=expression_statement];
1520 [label="227_ mintAgents[addr] = state;\n1520-expression_statement-228-228", type_label=expression_statement];
1526 [label="228_ MintingAgentChanged(addr, state);\n1526-expression_statement-229-229", type_label=expression_statement];
1533 [label="230_ modifier onlyMintAgent() {\n    if(!mintAgents[msg.sender]) {\n        throw;\n    }\n    _;\n  }\n1533-expression_statement-231-236", type_label=expression_statement];
1536 [label="231_ if\n1536-if-232-234", type_label=if];
3315 [label="231_ end_if", type_label=end_if];
1544 [label="232_ throw;\n1544-expression_statement-233-233", type_label=expression_statement];
1546 [label="234_ _;\n1546-expression_statement-235-235", type_label=expression_statement];
1548 [label="236_ modifier canMint() {\n    if(mintingFinished) throw;\n    _;\n  }\n1548-expression_statement-237-240", type_label=expression_statement];
1551 [label="237_ if\n1551-if-238-238", type_label=if];
3330 [label="237_ end_if", type_label=end_if];
1553 [label="237_ throw;\n1553-expression_statement-238-238", type_label=expression_statement];
1555 [label="238_ _;\n1555-expression_statement-239-239", type_label=expression_statement];
1579 [label="243_ string public name;\n1579-new_variable-244-244", type_label=new_variable];
1584 [label="244_ string public symbol;\n1584-new_variable-245-245", type_label=new_variable];
1589 [label="245_ uint public decimals;\n1589-new_variable-246-246", type_label=new_variable];
1594 [label="246_ CrowdsaleToken\n1594-function_definition-247-264", type_label=function_definition];
1616 [label="247_ UpgradeableToken(msg.sender)\n1616-expression_statement-248-248", type_label=expression_statement];
1623 [label="248_ owner = msg.sender;\n1623-expression_statement-249-249", type_label=expression_statement];
1629 [label="249_ name = _name;\n1629-expression_statement-250-250", type_label=expression_statement];
1633 [label="250_ symbol = _symbol;\n1633-expression_statement-251-251", type_label=expression_statement];
1637 [label="251_ totalSupply = _initialSupply;\n1637-expression_statement-252-252", type_label=expression_statement];
1641 [label="252_ decimals = _decimals;\n1641-expression_statement-253-253", type_label=expression_statement];
1645 [label="253_ balances[owner] = totalSupply;\n1645-expression_statement-254-254", type_label=expression_statement];
1651 [label="254_ if_totalSupply > 0\n1651-if-255-257", type_label=if];
3430 [label="254_ end_if", type_label=end_if];
1656 [label="255_ Minted(owner, totalSupply);\n1656-expression_statement-256-256", type_label=expression_statement];
1663 [label="257_ if\n1663-if-258-263", type_label=if];
3442 [label="257_ end_if", type_label=end_if];
1667 [label="258_ mintingFinished = true;\n1667-expression_statement-259-259", type_label=expression_statement];
1672 [label="259_ if_totalSupply == 0\n1672-if-260-262", type_label=if];
3451 [label="259_ end_if", type_label=end_if];
1677 [label="260_ throw;\n1677-expression_statement-261-261", type_label=expression_statement];
1679 [label="264_ releaseTokenTransfer\n1679-function_definition-265-268", type_label=function_definition];
1682 [label="264_ onlyReleaseAgent\n1682-expression_statement-265-265", type_label=expression_statement];
1685 [label="265_ mintingFinished = true;\n1685-expression_statement-266-266", type_label=expression_statement];
1690 [label="266_ super.releaseTokenTransfer();\n1690-expression_statement-267-267", type_label=expression_statement];
1695 [label="268_ canUpgrade\n1695-function_definition-269-271", type_label=function_definition];
1698 [label="268_ constant\n1698-expression_statement-269-269", type_label=expression_statement];
1705 [label="269_ return released && super.canUpgrade();\n1705-return-270-270", type_label=return];
1712 [label="271_ setTokenInformation\n1712-function_definition-272-276", type_label=function_definition];
1722 [label="271_ onlyOwner\n1722-expression_statement-272-272", type_label=expression_statement];
1725 [label="272_ name = _name;\n1725-expression_statement-273-273", type_label=expression_statement];
1729 [label="273_ symbol = _symbol;\n1729-expression_statement-274-274", type_label=expression_statement];
1733 [label="274_ UpdatedTokenInformation(name, symbol);\n1733-expression_statement-275-275", type_label=expression_statement];
1749 [label="278_ BurnableCrowdsaleToken\n1749-function_definition-279-281", type_label=function_definition];
1771 [label="279_ CrowdsaleToken(_name, _symbol, _initialSupply, _decimals, _mintable)\n1771-expression_statement-280-280", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
1025;
125 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
162 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
164 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
195 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
210 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
226 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
237 -> 253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
253 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
272 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
274 -> 292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
292 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
299 -> 317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
317 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
324 -> 342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
342 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
349 -> 367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
367 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
393 -> 399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
421 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
454 -> 467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
478 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
481 -> 501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
526 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
554 -> 563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
566 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
584 -> 600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
600 -> 616  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
600 -> 2379  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2379 -> 618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
616 -> 2379  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
618 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
628 -> 639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
642 -> 660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
660 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
688 -> 695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
695 -> 703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
716 -> 725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
740 -> 750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
750 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
770 -> 775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
775 -> 781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
813 -> 820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
824 -> 832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
832 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 855  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
840 -> 2619  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2619 -> 857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 2619  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
857 -> 861  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
857 -> 2636  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2636 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 2636  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
863 -> 880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
880 -> 889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
889 -> 898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
898 -> 909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
920 -> 928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
928 -> 933  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
928 -> 2707  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2707 -> 935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
933 -> 2707  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
935 -> 939  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
935 -> 2714  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2714 -> 941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
939 -> 2714  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
941 -> 947  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
941 -> 2720  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2720 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
947 -> 2720  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
949 -> 956  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
949 -> 2728  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2728 -> 958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
956 -> 2728  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
958 -> 965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
965 -> 971  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
965 -> 2744  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2744 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
971 -> 2744  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
973 -> 980  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
973 -> 2752  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2752 -> 982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
980 -> 2752  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
987 -> 998  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
998 -> 1002  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
998 -> 1006  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2777 -> 1028  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1002 -> 2777  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1002 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1006 -> 1012  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1006 -> 1016  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1012 -> 2777  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1012 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1016 -> 1020  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1016 -> 1024  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1020 -> 2777  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1020 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1024 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1028 -> 1036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1036 -> 1040  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1036 -> 2815  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2815 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1040 -> 2815  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1042 -> 1048  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1042 -> 2821  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2821 -> 1050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1048 -> 2821  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1054 -> 1064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1064 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1075 -> 1078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1087 -> 1096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1098 -> 1107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1107 -> 1116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 1134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1134 -> 1141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1141 -> 1148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1155 -> 1159  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1155 -> 2934  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1159 -> 1165  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1159 -> 2938  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2938 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 2938  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1169 -> 1184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1175 -> 1177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1188 -> 1207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1198 -> 1200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1213 -> 1219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1224 -> 1240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1231 -> 1236  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1231 -> 3010  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3010 -> 1238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1236 -> 3010  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1243 -> 1250  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1243 -> 3022  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3022 -> 1252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1250 -> 3022  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1254 -> 1276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1276 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1285 -> 1309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1309 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1323 -> 1338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1338 -> 1346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1346 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1359 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1361 -> 1376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1376 -> 1383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1383 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1387 -> 1402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1402 -> 1410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1410 -> 1417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1417 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1433 -> 1440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1457 -> 1473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1467 -> 1469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1473 -> 1482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1482 -> 1495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1504 -> 1520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1514 -> 1516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1520 -> 1526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1533 -> 1548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1536 -> 1544  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1536 -> 3315  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3315 -> 1546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1544 -> 3315  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1551 -> 1553  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1551 -> 3330  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3330 -> 1555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1553 -> 3330  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1579 -> 1584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1584 -> 1589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1594 -> 1623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1623 -> 1629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1629 -> 1633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1633 -> 1637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1637 -> 1641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1641 -> 1645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1645 -> 1651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1651 -> 1656  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1651 -> 3430  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3430 -> 1663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1656 -> 3430  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1663 -> 1667  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1663 -> 3442  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1667 -> 1672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1672 -> 1677  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1672 -> 3451  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3451 -> 1679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1677 -> 3451  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1679 -> 1685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1685 -> 1690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1695 -> 1705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1705 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1712 -> 1725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1725 -> 1729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1729 -> 1733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1025 -> 2777  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
