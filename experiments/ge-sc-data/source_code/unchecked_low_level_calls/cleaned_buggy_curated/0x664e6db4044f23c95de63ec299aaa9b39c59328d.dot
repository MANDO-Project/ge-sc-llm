digraph  {
12 [label="2_ mul\n12-function_definition-3-10", type_label=function_definition];
29 [label="3_ if_a == 0\n29-if-4-6", type_label=if];
1252 [label="3_ end_if", type_label=end_if];
34 [label="4_ return 0;\n34-return-5-5", type_label=return];
36 [label="6_ uint256 c = a * b;\n36-new_variable-7-7", type_label=new_variable];
44 [label="7_ require(c / a == b);\n44-expression_statement-8-8", type_label=expression_statement];
53 [label="8_ return c;\n53-return-9-9", type_label=return];
55 [label="10_ div\n55-function_definition-11-15", type_label=function_definition];
72 [label="11_ require(b > 0);\n72-expression_statement-12-12", type_label=expression_statement];
79 [label="12_ uint256 c = a / b;\n79-new_variable-13-13", type_label=new_variable];
87 [label="13_ return c;\n87-return-14-14", type_label=return];
89 [label="15_ sub\n89-function_definition-16-19", type_label=function_definition];
106 [label="16_ require(b <= a);\n106-expression_statement-17-17", type_label=expression_statement];
113 [label="17_ return a - b;\n113-return-18-18", type_label=return];
117 [label="19_ add\n117-function_definition-20-24", type_label=function_definition];
134 [label="20_ uint256 c = a + b;\n134-new_variable-21-21", type_label=new_variable];
142 [label="21_ require(c >= a);\n142-expression_statement-22-22", type_label=expression_statement];
149 [label="22_ return c;\n149-return-23-23", type_label=return];
154 [label="26_ address public owner;\n154-new_variable-27-27", type_label=new_variable];
169 [label="28_ Ownable\n169-function_definition-29-31", type_label=function_definition];
173 [label="29_ owner = msg.sender;\n173-expression_statement-30-30", type_label=expression_statement];
179 [label="31_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n179-expression_statement-32-35", type_label=expression_statement];
182 [label="32_ require(msg.sender == owner);\n182-expression_statement-33-33", type_label=expression_statement];
191 [label="33_ _;\n191-expression_statement-34-34", type_label=expression_statement];
193 [label="35_ transferOwnership\n193-function_definition-36-40", type_label=function_definition];
200 [label="35_ onlyOwner\n200-expression_statement-36-36", type_label=expression_statement];
203 [label="36_ require(_newOwner != address(0));\n203-expression_statement-37-37", type_label=expression_statement];
212 [label="37_ owner = _newOwner;\n212-expression_statement-38-38", type_label=expression_statement];
225 [label="42_ balanceOf\n225-function_definition-43-43", type_label=function_definition];
237 [label="43_ transfer\n237-function_definition-44-44", type_label=function_definition];
252 [label="44_ allowance\n252-function_definition-45-45", type_label=function_definition];
271 [label="47_ receiveApproval\n271-function_definition-48-48", type_label=function_definition];
399 [label="60_ string public constant name = \"Digitize Coin\";\n399-new_variable-61-61", type_label=new_variable];
406 [label="61_ string public constant symbol = \"DTZ\";\n406-new_variable-62-62", type_label=new_variable];
413 [label="62_ uint256 public constant decimals = 18;\n413-new_variable-63-63", type_label=new_variable];
419 [label="63_ uint256 public constant initialSupply = 200000000 * (10 ** decimals);\n419-new_variable-64-64", type_label=new_variable];
430 [label="64_ uint256 public totalSupply;\n430-new_variable-65-65", type_label=new_variable];
435 [label="65_ mapping(address => uint256) public balances;\n435-new_variable-66-66", type_label=new_variable];
442 [label="66_ mapping(address => mapping (address => uint256)) internal allowed;\n442-new_variable-67-67", type_label=new_variable];
451 [label="67_ mapping(address => bool) public transferGrants;\n451-new_variable-68-68", type_label=new_variable];
458 [label="68_ bool public transferable;\n458-new_variable-69-69", type_label=new_variable];
463 [label="69_ modifier canTransfer() {\n    require(transferable || transferGrants[msg.sender]);\n    _;\n  }\n463-expression_statement-70-73", type_label=expression_statement];
466 [label="70_ require(transferable || transferGrants[msg.sender]);\n466-expression_statement-71-71", type_label=expression_statement];
477 [label="71_ _;\n477-expression_statement-72-72", type_label=expression_statement];
479 [label="73_ DigitizeCoin\n479-function_definition-74-79", type_label=function_definition];
483 [label="74_ owner = msg.sender;\n483-expression_statement-75-75", type_label=expression_statement];
489 [label="75_ totalSupply = initialSupply;\n489-expression_statement-76-76", type_label=expression_statement];
493 [label="76_ balances[owner] = totalSupply;\n493-expression_statement-77-77", type_label=expression_statement];
499 [label="77_ transferGrants[owner] = true;\n499-expression_statement-78-78", type_label=expression_statement];
512 [label="82_ balanceOf\n512-function_definition-83-85", type_label=function_definition];
525 [label="83_ return balances[_owner];\n525-return-84-84", type_label=return];
529 [label="85_ transfer\n529-function_definition-86-93", type_label=function_definition];
539 [label="85_ canTransfer\n539-expression_statement-86-86", type_label=expression_statement];
547 [label="86_ require(_to != address(0));\n547-expression_statement-87-87", type_label=expression_statement];
556 [label="87_ require(_value <= balances[msg.sender]);\n556-expression_statement-88-88", type_label=expression_statement];
567 [label="88_ balances[msg.sender] = balances[msg.sender].sub(_value);\n567-expression_statement-89-89", type_label=expression_statement];
584 [label="89_ balances[_to] = balances[_to].add(_value);\n584-expression_statement-90-90", type_label=expression_statement];
607 [label="91_ return true;\n607-return-92-92", type_label=return];
610 [label="93_ transferFrom\n610-function_definition-94-103", type_label=function_definition];
624 [label="93_ canTransfer\n624-expression_statement-94-94", type_label=expression_statement];
632 [label="94_ require(_to != address(0));\n632-expression_statement-95-95", type_label=expression_statement];
641 [label="95_ require(_value <= balances[_from]);\n641-expression_statement-96-96", type_label=expression_statement];
650 [label="96_ require(_value <= allowed[_from][msg.sender]);\n650-expression_statement-97-97", type_label=expression_statement];
663 [label="97_ balances[_from] = balances[_from].sub(_value);\n663-expression_statement-98-98", type_label=expression_statement];
676 [label="98_ balances[_to] = balances[_to].add(_value);\n676-expression_statement-99-99", type_label=expression_statement];
689 [label="99_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n689-expression_statement-100-100", type_label=expression_statement];
718 [label="101_ return true;\n718-return-102-102", type_label=return];
721 [label="103_ approve\n721-function_definition-104-108", type_label=function_definition];
731 [label="103_ canTransfer\n731-expression_statement-104-104", type_label=expression_statement];
739 [label="104_ allowed[msg.sender][_spender] = _value;\n739-expression_statement-105-105", type_label=expression_statement];
759 [label="106_ return true;\n759-return-107-107", type_label=return];
762 [label="108_ allowance\n762-function_definition-109-111", type_label=function_definition];
779 [label="109_ return allowed[_owner][_spender];\n779-return-110-110", type_label=return];
785 [label="111_ increaseApproval\n785-function_definition-112-116", type_label=function_definition];
795 [label="111_ canTransfer\n795-expression_statement-112-112", type_label=expression_statement];
803 [label="112_ allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n803-expression_statement-113-113", type_label=expression_statement];
840 [label="114_ return true;\n840-return-115-115", type_label=return];
843 [label="116_ decreaseApproval\n843-function_definition-117-126", type_label=function_definition];
853 [label="116_ canTransfer\n853-expression_statement-117-117", type_label=expression_statement];
861 [label="117_ uint oldValue = allowed[msg.sender][_spender];\n861-new_variable-118-118", type_label=new_variable];
873 [label="118_ if__subtractedValue > oldValue\n873-if-119-123", type_label=if];
2096 [label="118_ end_if", type_label=end_if];
878 [label="119_ allowed[msg.sender][_spender] = 0;\n878-expression_statement-120-120", type_label=expression_statement];
889 [label="121_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n889-expression_statement-122-122", type_label=expression_statement];
920 [label="124_ return true;\n920-return-125-125", type_label=return];
923 [label="126_ approveAndCall\n923-function_definition-127-132", type_label=function_definition];
937 [label="126_ canTransfer\n937-expression_statement-127-127", type_label=expression_statement];
945 [label="127_ allowed[msg.sender][_recipient] = _value;\n945-expression_statement-128-128", type_label=expression_statement];
967 [label="129_ ApproveAndCallFallback(_recipient).receiveApproval(msg.sender, _value, address(this), _data);\n967-expression_statement-130-130", type_label=expression_statement];
987 [label="130_ return true;\n987-return-131-131", type_label=return];
990 [label="132_ burn\n990-function_definition-133-139", type_label=function_definition];
998 [label="133_ require(_value <= balances[msg.sender]);\n998-expression_statement-134-134", type_label=expression_statement];
1009 [label="134_ address burner = msg.sender;\n1009-new_variable-135-135", type_label=new_variable];
1017 [label="135_ balances[burner] = balances[burner].sub(_value);\n1017-expression_statement-136-136", type_label=expression_statement];
1030 [label="136_ totalSupply = totalSupply.sub(_value);\n1030-expression_statement-137-137", type_label=expression_statement];
1045 [label="139_ enableTransfers\n1045-function_definition-140-144", type_label=function_definition];
1047 [label="139_ onlyOwner\n1047-expression_statement-140-140", type_label=expression_statement];
1051 [label="140_ require(!transferable);\n1051-expression_statement-141-141", type_label=expression_statement];
1057 [label="141_ transferable = true;\n1057-expression_statement-142-142", type_label=expression_statement];
1064 [label="144_ grantTransferRight\n1064-function_definition-145-151", type_label=function_definition];
1070 [label="144_ onlyOwner\n1070-expression_statement-145-145", type_label=expression_statement];
1074 [label="145_ require(!transferable);\n1074-expression_statement-146-146", type_label=expression_statement];
1080 [label="146_ require(!transferGrants[_to]);\n1080-expression_statement-147-147", type_label=expression_statement];
1088 [label="147_ require(_to != address(0));\n1088-expression_statement-148-148", type_label=expression_statement];
1097 [label="148_ transferGrants[_to] = true;\n1097-expression_statement-149-149", type_label=expression_statement];
1108 [label="151_ cancelTransferRight\n1108-function_definition-152-157", type_label=function_definition];
1114 [label="151_ onlyOwner\n1114-expression_statement-152-152", type_label=expression_statement];
1118 [label="152_ require(!transferable);\n1118-expression_statement-153-153", type_label=expression_statement];
1124 [label="153_ require(transferGrants[_from]);\n1124-expression_statement-154-154", type_label=expression_statement];
1131 [label="154_ transferGrants[_from] = false;\n1131-expression_statement-155-155", type_label=expression_statement];
1142 [label="157_ withdrawERC20Tokens\n1142-function_definition-158-163", type_label=function_definition];
1149 [label="157_ onlyOwner\n1149-expression_statement-158-158", type_label=expression_statement];
1153 [label="158_ uint256 totalBalance = _token.balanceOf(address(this));\n1153-new_variable-159-159", type_label=new_variable];
1166 [label="159_ require(totalBalance > 0);\n1166-expression_statement-160-160", type_label=expression_statement];
1173 [label="160_ _token.transfer(owner, totalBalance);\n1173-expression_statement-161-161", type_label=expression_statement];
1192 [label="163_ withdrawEther\n1192-function_definition-164-169", type_label=function_definition];
1194 [label="163_ onlyOwner\n1194-expression_statement-164-164", type_label=expression_statement];
1198 [label="164_ uint256 totalBalance = address(this).balance;\n1198-new_variable-165-165", type_label=new_variable];
1208 [label="165_ require(totalBalance > 0);\n1208-expression_statement-166-166", type_label=expression_statement];
1215 [label="166_ owner.transfer(totalBalance);\n1215-expression_statement-167-167", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
904;
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
29 -> 1252  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1252 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 1252  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
34 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
36 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
55 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 79  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
79 -> 87  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
89 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
117 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
142 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
169 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
203 -> 212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
399 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
413 -> 419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
442 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
529 -> 547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
547 -> 556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
556 -> 567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
610 -> 632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
641 -> 650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
650 -> 663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
676 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
718 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
721 -> 739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
759 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
762 -> 779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
779 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
785 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
843 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
873 -> 878  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
873 -> 889  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2096 -> 904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
878 -> 2096  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
889 -> 2096  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
920 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
923 -> 945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
967 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
990 -> 998  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
998 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1009 -> 1017  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 1030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1045 -> 1051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1051 -> 1057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1064 -> 1074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1074 -> 1080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1080 -> 1088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1088 -> 1097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1108 -> 1118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1118 -> 1124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1124 -> 1131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1142 -> 1153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1153 -> 1166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1166 -> 1173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1192 -> 1198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1198 -> 1208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1208 -> 1215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
