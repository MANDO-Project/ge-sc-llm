digraph  {
12 [label="2_ mul\n12-function_definition-3-7", type_label=function_definition];
29 [label="3_ uint c = a * b;\n29-new_variable-4-4", type_label=new_variable];
37 [label="4_ assert(a == 0 || c / a == b);\n37-expression_statement-5-5", type_label=expression_statement];
50 [label="5_ return c;\n50-return-6-6", type_label=return];
52 [label="7_ div\n52-function_definition-8-11", type_label=function_definition];
69 [label="8_ uint c = a / b;\n69-new_variable-9-9", type_label=new_variable];
77 [label="9_ return c;\n77-return-10-10", type_label=return];
79 [label="11_ sub\n79-function_definition-12-15", type_label=function_definition];
96 [label="12_ assert(b <= a);\n96-expression_statement-13-13", type_label=expression_statement];
103 [label="13_ return a - b;\n103-return-14-14", type_label=return];
107 [label="15_ add\n107-function_definition-16-20", type_label=function_definition];
124 [label="16_ uint c = a + b;\n124-new_variable-17-17", type_label=new_variable];
132 [label="17_ assert(c >= a);\n132-expression_statement-18-18", type_label=expression_statement];
139 [label="18_ return c;\n139-return-19-19", type_label=return];
144 [label="22_ address public owner;\n144-new_variable-23-23", type_label=new_variable];
161 [label="25_ owner = msg.sender;\n161-expression_statement-26-26", type_label=expression_statement];
167 [label="27_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n167-expression_statement-28-31", type_label=expression_statement];
170 [label="28_ require(msg.sender == owner);\n170-expression_statement-29-29", type_label=expression_statement];
179 [label="29_ _;\n179-expression_statement-30-30", type_label=expression_statement];
181 [label="31_ transferOwnership\n181-function_definition-32-36", type_label=function_definition];
187 [label="31_ onlyOwner\n187-expression_statement-32-32", type_label=expression_statement];
191 [label="32_ require(newOwner != address(0));\n191-expression_statement-33-33", type_label=expression_statement];
206 [label="34_ owner = newOwner;\n206-expression_statement-35-35", type_label=expression_statement];
213 [label="38_ totalSupply\n213-function_definition-39-39", type_label=function_definition];
216 [label="38_ constant\n216-expression_statement-39-39", type_label=expression_statement];
222 [label="39_ balanceOf\n222-function_definition-40-40", type_label=function_definition];
229 [label="39_ constant\n229-expression_statement-40-40", type_label=expression_statement];
236 [label="40_ allowance\n236-function_definition-41-41", type_label=function_definition];
247 [label="40_ constant\n247-expression_statement-41-41", type_label=expression_statement];
254 [label="41_ transfer\n254-function_definition-42-42", type_label=function_definition];
270 [label="42_ approve\n270-function_definition-43-43", type_label=function_definition];
286 [label="43_ transferFrom\n286-function_definition-44-44", type_label=function_definition];
306 [label="44_ mint\n306-function_definition-45-45", type_label=function_definition];
363 [label="50_ string public name;\n363-new_variable-51-51", type_label=new_variable];
368 [label="51_ string public symbol;\n368-new_variable-52-52", type_label=new_variable];
373 [label="52_ uint256 public decimals;\n373-new_variable-53-53", type_label=new_variable];
378 [label="53_ uint256 public _totalSupply;\n378-new_variable-54-54", type_label=new_variable];
383 [label="54_ mapping(address => uint256) tokenBalances;\n383-new_variable-55-55", type_label=new_variable];
389 [label="55_ address musicContract;\n389-new_variable-56-56", type_label=new_variable];
393 [label="56_ address advertisementContract;\n393-new_variable-57-57", type_label=new_variable];
397 [label="57_ address sale;\n397-new_variable-58-58", type_label=new_variable];
401 [label="58_ address wallet;\n401-new_variable-59-59", type_label=new_variable];
405 [label="59_ mapping (address => mapping (address => uint256)) allowed;\n405-new_variable-60-60", type_label=new_variable];
413 [label="60_ mapping(address=>bool) whiteListedAddresses;\n413-new_variable-61-61", type_label=new_variable];
425 [label="62_ owner = msg.sender;\n425-expression_statement-63-63", type_label=expression_statement];
431 [label="63_ wallet = _wallet;\n431-expression_statement-64-64", type_label=expression_statement];
435 [label="64_ name  = \"RADION\";\n435-expression_statement-65-65", type_label=expression_statement];
440 [label="65_ symbol = \"RADIO\";\n440-expression_statement-66-66", type_label=expression_statement];
445 [label="66_ decimals = 18;\n445-expression_statement-67-67", type_label=expression_statement];
449 [label="67_ _totalSupply = 55000000 * 10 ** uint(decimals);\n449-expression_statement-68-68", type_label=expression_statement];
459 [label="68_ tokenBalances[wallet] = _totalSupply;\n459-expression_statement-69-69", type_label=expression_statement];
465 [label="70_ balanceOf\n465-function_definition-71-73", type_label=function_definition];
472 [label="70_ constant\n472-expression_statement-71-71", type_label=expression_statement];
480 [label="71_ return tokenBalances[tokenOwner];\n480-return-72-72", type_label=return];
484 [label="73_ transfer\n484-function_definition-74-81", type_label=function_definition];
501 [label="74_ require(to != address(0));\n501-expression_statement-75-75", type_label=expression_statement];
510 [label="75_ require(tokens <= tokenBalances[msg.sender]);\n510-expression_statement-76-76", type_label=expression_statement];
521 [label="76_ tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(tokens);\n521-expression_statement-77-77", type_label=expression_statement];
538 [label="77_ tokenBalances[to] = tokenBalances[to].add(tokens);\n538-expression_statement-78-78", type_label=expression_statement];
561 [label="79_ return true;\n561-return-80-80", type_label=return];
564 [label="81_ transferFrom\n564-function_definition-82-91", type_label=function_definition];
584 [label="82_ require(_to != address(0));\n584-expression_statement-83-83", type_label=expression_statement];
593 [label="83_ require(_value <= tokenBalances[_from]);\n593-expression_statement-84-84", type_label=expression_statement];
602 [label="84_ require(_value <= allowed[_from][msg.sender]);\n602-expression_statement-85-85", type_label=expression_statement];
615 [label="85_ tokenBalances[_from] = tokenBalances[_from].sub(_value);\n615-expression_statement-86-86", type_label=expression_statement];
628 [label="86_ tokenBalances[_to] = tokenBalances[_to].add(_value);\n628-expression_statement-87-87", type_label=expression_statement];
641 [label="87_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n641-expression_statement-88-88", type_label=expression_statement];
670 [label="89_ return true;\n670-return-90-90", type_label=return];
673 [label="91_ approve\n673-function_definition-92-96", type_label=function_definition];
689 [label="92_ allowed[msg.sender][_spender] = _value;\n689-expression_statement-93-93", type_label=expression_statement];
709 [label="94_ return true;\n709-return-95-95", type_label=return];
712 [label="96_ totalSupply\n712-function_definition-97-99", type_label=function_definition];
715 [label="96_ constant\n715-expression_statement-97-97", type_label=expression_statement];
722 [label="97_ return _totalSupply  - tokenBalances[address(0)];\n722-return-98-98", type_label=return];
730 [label="99_ allowance\n730-function_definition-100-102", type_label=function_definition];
741 [label="99_ constant\n741-expression_statement-100-100", type_label=expression_statement];
749 [label="100_ return allowed[tokenOwner][spender];\n749-return-101-101", type_label=return];
755 [label="102_ increaseApproval\n755-function_definition-103-107", type_label=function_definition];
771 [label="103_ allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n771-expression_statement-104-104", type_label=expression_statement];
808 [label="105_ return true;\n808-return-106-106", type_label=return];
811 [label="107_ decreaseApproval\n811-function_definition-108-117", type_label=function_definition];
827 [label="108_ uint oldValue = allowed[msg.sender][_spender];\n827-new_variable-109-109", type_label=new_variable];
839 [label="109_ if__subtractedValue > oldValue\n839-if-110-114", type_label=if];
2009 [label="109_ end_if", type_label=end_if];
844 [label="110_ allowed[msg.sender][_spender] = 0;\n844-expression_statement-111-111", type_label=expression_statement];
855 [label="112_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n855-expression_statement-113-113", type_label=expression_statement];
886 [label="115_ return true;\n886-return-116-116", type_label=return];
889 [label="117_ mint\n889-function_definition-118-124", type_label=function_definition];
905 [label="118_ require(msg.sender == musicContract || msg.sender == advertisementContract);\n905-expression_statement-119-119", type_label=expression_statement];
920 [label="119_ require(tokenBalances[sender] >= tokenAmount);\n920-expression_statement-120-120", type_label=expression_statement];
929 [label="120_ tokenBalances[receiver] = tokenBalances[receiver].add(tokenAmount);\n929-expression_statement-121-121", type_label=expression_statement];
942 [label="121_ tokenBalances[sender] = tokenBalances[sender].sub(tokenAmount);\n942-expression_statement-122-122", type_label=expression_statement];
963 [label="124_ setAddresses\n963-function_definition-125-130", type_label=function_definition];
978 [label="124_ onlyOwner\n978-expression_statement-125-125", type_label=expression_statement];
981 [label="126_ musicContract = music;\n981-expression_statement-127-127", type_label=expression_statement];
985 [label="127_ advertisementContract = advertisement;\n985-expression_statement-128-128", type_label=expression_statement];
989 [label="128_ sale = _sale;\n989-expression_statement-129-129", type_label=expression_statement];
999 [label="133_ buy\n999-function_definition-134-144", type_label=function_definition];
1014 [label="133_ onlyOwner\n1014-expression_statement-134-134", type_label=expression_statement];
1017 [label="135_ require(beneficiary != 0x0 && whiteListedAddresses[beneficiary] == true);\n1017-expression_statement-136-136", type_label=expression_statement];
1031 [label="136_ require(ethAmountSent>0);\n1031-expression_statement-137-137", type_label=expression_statement];
1038 [label="137_ uint weiAmount = ethAmountSent;\n1038-new_variable-138-138", type_label=new_variable];
1044 [label="138_ uint tokens = weiAmount.mul(rate);\n1044-new_variable-139-139", type_label=new_variable];
1055 [label="139_ require(tokenBalances[wallet] >= tokens);\n1055-expression_statement-140-140", type_label=expression_statement];
1064 [label="140_ tokenBalances[beneficiary] = tokenBalances[beneficiary].add(tokens);\n1064-expression_statement-141-141", type_label=expression_statement];
1077 [label="141_ tokenBalances[wallet] = tokenBalances[wallet].sub(tokens);\n1077-expression_statement-142-142", type_label=expression_statement];
1098 [label="144_ transferAnyERC20Token\n1098-function_definition-145-147", type_label=function_definition];
1109 [label="144_ onlyOwner\n1109-expression_statement-145-145", type_label=expression_statement];
1117 [label="145_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n1117-return-146-146", type_label=return];
1129 [label="147_ addAddressToWhiteList\n1129-function_definition-148-151", type_label=function_definition];
1136 [label="147_ onlyOwner\n1136-expression_statement-148-148", type_label=expression_statement];
1139 [label="149_ whiteListedAddresses[whitelistaddress] = true;\n1139-expression_statement-150-150", type_label=expression_statement];
1146 [label="151_ checkIfAddressIsWhitelisted\n1146-function_definition-152-157", type_label=function_definition];
1153 [label="151_ onlyOwner\n1153-expression_statement-152-152", type_label=expression_statement];
1155 [label="151_ constant\n1155-expression_statement-152-152", type_label=expression_statement];
1162 [label="153_ if_whiteListedAddresses[whitelistaddress] == true\n1162-if-154-155", type_label=if];
2332 [label="153_ end_if", type_label=end_if];
1169 [label="154_ return true;\n1169-return-155-155", type_label=return];
1172 [label="155_ return false;\n1172-return-156-156", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
870;
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
37 -> 50  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
50 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
52 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
69 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
79 -> 96  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
96 -> 103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
103 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
107 -> 124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
124 -> 132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
132 -> 139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
368 -> 373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
373 -> 378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
383 -> 389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
389 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
405 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
425 -> 431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
431 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
440 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
465 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
484 -> 501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
564 -> 584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
584 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
615 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
628 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
673 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
709 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
712 -> 722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
722 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
730 -> 749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
749 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
755 -> 771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
811 -> 827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
827 -> 839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
839 -> 844  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
839 -> 855  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2009 -> 870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
844 -> 2009  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
855 -> 2009  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
886 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
889 -> 905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
905 -> 920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
920 -> 929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
963 -> 981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
981 -> 985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 1017  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 1031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1031 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1044 -> 1055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1055 -> 1064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1064 -> 1077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1098 -> 1117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1117 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1129 -> 1139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1146 -> 1162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1153 -> 1155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1162 -> 1169  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1162 -> 2332  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2332 -> 1172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1169 -> 2332  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1169 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1172 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
