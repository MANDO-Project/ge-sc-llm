digraph  {
13 [label="2_ function AirDropContract() public {\n    }\n13-function_definition-3-4", method="AirDropContract()", type_label=function_definition];
17 [label="4_ modifier validAddress( address addr ) {\n        require(addr != address(0x0));\n        require(addr != address(this));\n        _;\n    }\n17-expression_statement-5-9", method="", type_label=expression_statement];
24 [label="5_ require(addr != address(0x0));\n24-expression_statement-6-6", method="", type_label=expression_statement];
33 [label="6_ require(addr != address(this));\n33-expression_statement-7-7", method="", type_label=expression_statement];
42 [label="7_ _;\n42-expression_statement-8-8", method="", type_label=expression_statement];
44 [label="9_ function transfer(address contract_address,address[] tos,uint[] vs)\n        public \n        validAddress(contract_address)\n        returns (bool){\n        require(tos.length > 0);\n        require(vs.length > 0);\n        require(tos.length == vs.length);\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for(uint i = 0 ; i < tos.length; i++){\n            contract_address.call(id, msg.sender, tos[i], vs[i]);\n        }\n        return true;\n    }\n44-function_definition-10-22", method="transfer(address contract_address,address[] tos,uint[] vs)", type_label=function_definition];
61 [label="11_ validAddress(contract_address)\n61-expression_statement-12-12", method="transfer(address contract_address,address[] tos,uint[] vs)", type_label=expression_statement];
70 [label="13_ require(tos.length > 0);\n70-expression_statement-14-14", method="transfer(address contract_address,address[] tos,uint[] vs)", type_label=expression_statement];
79 [label="14_ require(vs.length > 0);\n79-expression_statement-15-15", method="transfer(address contract_address,address[] tos,uint[] vs)", type_label=expression_statement];
88 [label="15_ require(tos.length == vs.length);\n88-expression_statement-16-16", method="transfer(address contract_address,address[] tos,uint[] vs)", type_label=expression_statement];
99 [label="16_ bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n99-new_variable-17-17", method="transfer(address contract_address,address[] tos,uint[] vs)", type_label=new_variable];
111 [label="17_ for(i < tos.length;;i++)\n111-for-18-20", method="transfer(address contract_address,address[] tos,uint[] vs)", type_label=for];
255 [label="17_ end_loop", method="transfer(address contract_address,address[] tos,uint[] vs)", type_label=end_loop];
124 [label="17_ i++\n124-expression_statement-18-18", method="transfer(address contract_address,address[] tos,uint[] vs)", type_label=expression_statement];
127 [label="18_ contract_address.call(id, msg.sender, tos[i], vs[i]);\n127-expression_statement-19-19", method="transfer(address contract_address,address[] tos,uint[] vs)", type_label=expression_statement];
146 [label="20_ return true;\n146-return-21-21", method="transfer(address contract_address,address[] tos,uint[] vs)", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
24 -> 33  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
33 -> 42  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 70  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
70 -> 79  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
79 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
111 -> 127  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
111 -> 255  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
255 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
124 -> 111  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
127 -> 124  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
146 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
