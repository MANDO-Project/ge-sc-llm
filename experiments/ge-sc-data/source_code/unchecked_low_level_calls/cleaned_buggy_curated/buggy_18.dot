digraph  {
13 [label="2_ function add(uint a, uint b) internal pure returns(uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n13-function_definition-3-6", method="add(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a + b;\n31-expression_statement-4-4", method="add(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(c >= a);\n37-expression_statement-5-5", method="add(uint a,uint b)", type_label=expression_statement];
44 [label="6_ function sub(uint a, uint b) internal pure returns(uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n44-function_definition-7-10", method="sub(uint a,uint b)", type_label=function_definition];
62 [label="7_ require(b <= a);\n62-expression_statement-8-8", method="sub(uint a,uint b)", type_label=expression_statement];
69 [label="8_ c = a - b;\n69-expression_statement-9-9", method="sub(uint a,uint b)", type_label=expression_statement];
75 [label="10_ function mul(uint a, uint b) internal pure returns(uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n75-function_definition-11-14", method="mul(uint a,uint b)", type_label=function_definition];
93 [label="11_ c = a * b;\n93-expression_statement-12-12", method="mul(uint a,uint b)", type_label=expression_statement];
99 [label="12_ require(a == 0 || c / a == b);\n99-expression_statement-13-13", method="mul(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function div(uint a, uint b) internal pure returns(uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n112-function_definition-15-18", method="div(uint a,uint b)", type_label=function_definition];
130 [label="15_ require(b > 0);\n130-expression_statement-16-16", method="div(uint a,uint b)", type_label=expression_statement];
137 [label="16_ c = a / b;\n137-expression_statement-17-17", method="div(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function limitLessThan(uint a, uint b) internal pure returns(uint c) {\n        if (a > b) return b;\n        return a;\n    }\n146-function_definition-21-24", method="limitLessThan(uint a,uint b)", type_label=function_definition];
164 [label="21_ if_a > b\n164-if-22-22", method="limitLessThan(uint a,uint b)", type_label=if];
2262 [label="21_ end_if", method="limitLessThan(uint a,uint b)", type_label=end_if];
168 [label="21_ return b;\n168-return-22-22", method="limitLessThan(uint a,uint b)", type_label=return];
170 [label="22_ return a;\n170-return-23-23", method="limitLessThan(uint a,uint b)", type_label=return];
175 [label="26_ function totalSupply() public view returns(uint);\n175-function_definition-27-27", method="totalSupply()", type_label=function_definition];
183 [label="27_ function balanceOf(address tokenOwner) public view returns(uint balance);\n183-function_definition-28-28", method="balanceOf(address tokenOwner)", type_label=function_definition];
196 [label="28_ function bug_unchk_send18() payable public{\n      msg.sender.transfer(1 ether);}\n196-function_definition-29-30", method="bug_unchk_send18()", type_label=function_definition];
201 [label="29_ msg.sender.transfer(1 ether);\n201-expression_statement-30-30", method="bug_unchk_send18()", type_label=expression_statement];
211 [label="30_ function allowance(address tokenOwner, address spender) public view returns(uint remaining);\n211-function_definition-31-31", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
228 [label="31_ function bug_unchk_send29() payable public{\n      msg.sender.transfer(1 ether);}\n228-function_definition-32-33", method="bug_unchk_send29()", type_label=function_definition];
233 [label="32_ msg.sender.transfer(1 ether);\n233-expression_statement-33-33", method="bug_unchk_send29()", type_label=expression_statement];
243 [label="33_ function transfer(address to, uint tokens) public returns(bool success);\n243-function_definition-34-34", method="transfer(address to,uint tokens)", type_label=function_definition];
259 [label="34_ function bug_unchk_send6() payable public{\n      msg.sender.transfer(1 ether);}\n259-function_definition-35-36", method="bug_unchk_send6()", type_label=function_definition];
264 [label="35_ msg.sender.transfer(1 ether);\n264-expression_statement-36-36", method="bug_unchk_send6()", type_label=expression_statement];
274 [label="36_ function approve(address spender, uint tokens) public returns(bool success);\n274-function_definition-37-37", method="approve(address spender,uint tokens)", type_label=function_definition];
290 [label="37_ function bug_unchk_send16() payable public{\n      msg.sender.transfer(1 ether);}\n290-function_definition-38-39", method="bug_unchk_send16()", type_label=function_definition];
295 [label="38_ msg.sender.transfer(1 ether);\n295-expression_statement-39-39", method="bug_unchk_send16()", type_label=expression_statement];
305 [label="39_ function transferFrom(address from, address to, uint tokens) public returns(bool success);\n305-function_definition-40-40", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
325 [label="40_ function bug_unchk_send24() payable public{\n      msg.sender.transfer(1 ether);}\n325-function_definition-41-42", method="bug_unchk_send24()", type_label=function_definition];
330 [label="41_ msg.sender.transfer(1 ether);\n330-expression_statement-42-42", method="bug_unchk_send24()", type_label=expression_statement];
340 [label="42_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n340-function_definition-43-44", method="bug_unchk_send8()", type_label=function_definition];
345 [label="43_ msg.sender.transfer(1 ether);\n345-expression_statement-44-44", method="bug_unchk_send8()", type_label=expression_statement];
369 [label="45_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n369-function_definition-46-47", method="bug_unchk_send27()", type_label=function_definition];
374 [label="46_ msg.sender.transfer(1 ether);\n374-expression_statement-47-47", method="bug_unchk_send27()", type_label=expression_statement];
401 [label="50_ function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n401-function_definition-51-51", method="receiveApproval(address from,uint256 tokens,address token,bytes memory data)", type_label=function_definition];
420 [label="51_ function bug_unchk_send5() payable public{\n      msg.sender.transfer(1 ether);}\n420-function_definition-52-53", method="bug_unchk_send5()", type_label=function_definition];
425 [label="52_ msg.sender.transfer(1 ether);\n425-expression_statement-53-53", method="bug_unchk_send5()", type_label=expression_statement];
438 [label="55_ address public owner;\n438-new_variable-56-56", method="", type_label=new_variable];
443 [label="56_ address public newOwner;\n443-new_variable-57-57", method="", type_label=new_variable];
448 [label="57_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n448-function_definition-58-59", method="bug_unchk_send31()", type_label=function_definition];
453 [label="58_ msg.sender.transfer(1 ether);\n453-expression_statement-59-59", method="bug_unchk_send31()", type_label=expression_statement];
475 [label="61_ owner = msg.sender;\n475-expression_statement-62-62", method="", type_label=expression_statement];
481 [label="63_ function bug_unchk_send15() payable public{\n      msg.sender.transfer(1 ether);}\n481-function_definition-64-65", method="bug_unchk_send15()", type_label=function_definition];
486 [label="64_ msg.sender.transfer(1 ether);\n486-expression_statement-65-65", method="bug_unchk_send15()", type_label=expression_statement];
496 [label="65_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n496-expression_statement-66-69", method="", type_label=expression_statement];
499 [label="66_ require(msg.sender == owner);\n499-expression_statement-67-67", method="", type_label=expression_statement];
508 [label="67_ _;\n508-expression_statement-68-68", method="", type_label=expression_statement];
510 [label="69_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n510-function_definition-70-72", method="transferOwnership(address _newOwner)", type_label=function_definition];
517 [label="69_ onlyOwner\n517-expression_statement-70-70", method="transferOwnership(address _newOwner)", type_label=expression_statement];
520 [label="70_ newOwner = _newOwner;\n520-expression_statement-71-71", method="transferOwnership(address _newOwner)", type_label=expression_statement];
524 [label="72_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n524-function_definition-73-74", method="bug_unchk_send28()", type_label=function_definition];
529 [label="73_ msg.sender.transfer(1 ether);\n529-expression_statement-74-74", method="bug_unchk_send28()", type_label=expression_statement];
539 [label="74_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n539-function_definition-75-80", method="acceptOwnership()", type_label=function_definition];
543 [label="75_ require(msg.sender == newOwner);\n543-expression_statement-76-76", method="acceptOwnership()", type_label=expression_statement];
558 [label="77_ owner = newOwner;\n558-expression_statement-78-78", method="acceptOwnership()", type_label=expression_statement];
562 [label="78_ newOwner = address(0);\n562-expression_statement-79-79", method="acceptOwnership()", type_label=expression_statement];
568 [label="80_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n568-function_definition-81-82", method="bug_unchk_send21()", type_label=function_definition];
573 [label="81_ msg.sender.transfer(1 ether);\n573-expression_statement-82-82", method="bug_unchk_send21()", type_label=expression_statement];
602 [label="86_ string public symbol;\n602-new_variable-87-87", method="", type_label=new_variable];
607 [label="87_ string public name;\n607-new_variable-88-88", method="", type_label=new_variable];
612 [label="88_ uint8 public decimals;\n612-new_variable-89-89", method="", type_label=new_variable];
617 [label="89_ uint public _totalSupply;\n617-new_variable-90-90", method="", type_label=new_variable];
622 [label="90_ uint public latestDifficultyPeriodStarted;\n622-new_variable-91-91", method="", type_label=new_variable];
627 [label="91_ uint public epochCount;\n627-new_variable-92-92", method="", type_label=new_variable];
632 [label="92_ uint public _BLOCKS_PER_READJUSTMENT = 1024;\n632-new_variable-93-93", method="", type_label=new_variable];
638 [label="93_ uint public _MINIMUM_TARGET = 2 ** 16;\n638-new_variable-94-94", method="", type_label=new_variable];
646 [label="94_ uint public _MAXIMUM_TARGET = 2 ** 234;\n646-new_variable-95-95", method="", type_label=new_variable];
654 [label="95_ uint public miningTarget;\n654-new_variable-96-96", method="", type_label=new_variable];
659 [label="96_ bytes32 public challengeNumber;\n659-new_variable-97-97", method="", type_label=new_variable];
664 [label="97_ uint public rewardEra;\n664-new_variable-98-98", method="", type_label=new_variable];
669 [label="98_ uint public maxSupplyForEra;\n669-new_variable-99-99", method="", type_label=new_variable];
674 [label="99_ address public lastRewardTo;\n674-new_variable-100-100", method="", type_label=new_variable];
679 [label="100_ uint public lastRewardAmount;\n679-new_variable-101-101", method="", type_label=new_variable];
684 [label="101_ uint public lastRewardEthBlockNumber;\n684-new_variable-102-102", method="", type_label=new_variable];
689 [label="102_ bool locked = false;\n689-new_variable-103-103", method="", type_label=new_variable];
695 [label="103_ mapping(bytes32 => bytes32) solutionForChallenge;\n695-new_variable-104-104", method="", type_label=new_variable];
701 [label="104_ uint public tokensMinted;\n701-new_variable-105-105", method="", type_label=new_variable];
706 [label="105_ mapping(address => uint) balances;\n706-new_variable-106-106", method="", type_label=new_variable];
712 [label="106_ mapping(address => mapping(address => uint)) allowed;\n712-new_variable-107-107", method="", type_label=new_variable];
720 [label="107_ uint public burnPercent;\n720-new_variable-108-108", method="", type_label=new_variable];
725 [label="108_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n725-function_definition-109-110", method="bug_unchk_send13()", type_label=function_definition];
730 [label="109_ msg.sender.transfer(1 ether);\n730-expression_statement-110-110", method="bug_unchk_send13()", type_label=expression_statement];
759 [label="111_ onlyOwner\n759-expression_statement-112-112", method="", type_label=expression_statement];
762 [label="112_ symbol = \"YESBUZ\";\n762-expression_statement-113-113", method="", type_label=expression_statement];
767 [label="113_ name = \"Yesbuzz\";\n767-expression_statement-114-114", method="", type_label=expression_statement];
772 [label="114_ decimals = 8;\n772-expression_statement-115-115", method="", type_label=expression_statement];
776 [label="115_ _totalSupply = 21000000 * 10 ** uint(decimals);\n776-expression_statement-116-116", method="", type_label=expression_statement];
786 [label="116_ if\n786-if-117-117", method="", type_label=if];
2884 [label="116_ end_if", method="", type_label=end_if];
790 [label="117_ locked = true;\n790-expression_statement-118-118", method="", type_label=expression_statement];
795 [label="118_ tokensMinted = 0;\n795-expression_statement-119-119", method="", type_label=expression_statement];
799 [label="119_ rewardEra = 0;\n799-expression_statement-120-120", method="", type_label=expression_statement];
803 [label="120_ maxSupplyForEra = _totalSupply.div(2);\n803-expression_statement-121-121", method="", type_label=expression_statement];
812 [label="121_ miningTarget = _MAXIMUM_TARGET;\n812-expression_statement-122-122", method="", type_label=expression_statement];
816 [label="122_ latestDifficultyPeriodStarted = block.number;\n816-expression_statement-123-123", method="", type_label=expression_statement];
822 [label="123_ burnPercent = 10;\n822-expression_statement-124-124", method="", type_label=expression_statement];
826 [label="124_ _startNewMiningEpoch();\n826-expression_statement-125-125", method="", type_label=expression_statement];
829 [label="126_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n829-function_definition-127-128", method="bug_unchk_send10()", type_label=function_definition];
834 [label="127_ msg.sender.transfer(1 ether);\n834-expression_statement-128-128", method="bug_unchk_send10()", type_label=expression_statement];
844 [label="128_ function mint(uint256 nonce, bytes32 challenge_digest) public returns(bool success) {\n        bytes32 digest = keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce));\n        if (digest != challenge_digest) revert();\n        if (uint256(digest) > miningTarget) revert();\n        bytes32 solution = solutionForChallenge[challengeNumber];\n        solutionForChallenge[challengeNumber] = digest;\n        if (solution != 0x0) revert();  \n        uint reward_amount = getMiningReward();\n        balances[msg.sender] = balances[msg.sender].add(reward_amount);\n        tokensMinted = tokensMinted.add(reward_amount);\n        assert(tokensMinted <= maxSupplyForEra);\n        lastRewardTo = msg.sender;\n        lastRewardAmount = reward_amount;\n        lastRewardEthBlockNumber = block.number;\n        _startNewMiningEpoch();\n        emit Mint(msg.sender, reward_amount, epochCount, challengeNumber);\n        return true;\n    }\n844-function_definition-129-146", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=function_definition];
861 [label="129_ bytes32 digest = keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce));\n861-new_variable-130-130", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=new_variable];
881 [label="130_ if_digest != challenge_digest\n881-if-131-131", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=if];
2979 [label="130_ end_if", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=end_if];
887 [label="131_ if_uint256(digest) > miningTarget\n887-if-132-132", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=if];
2985 [label="131_ end_if", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=end_if];
895 [label="132_ bytes32 solution = solutionForChallenge[challengeNumber];\n895-new_variable-133-133", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=new_variable];
903 [label="133_ solutionForChallenge[challengeNumber] = digest;\n903-expression_statement-134-134", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
909 [label="134_ if_solution != 0x0\n909-if-135-135", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=if];
3007 [label="134_ end_if", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=end_if];
915 [label="135_ uint reward_amount = getMiningReward();\n915-new_variable-136-136", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=new_variable];
922 [label="136_ balances[msg.sender] = balances[msg.sender].add(reward_amount);\n922-expression_statement-137-137", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
939 [label="137_ tokensMinted = tokensMinted.add(reward_amount);\n939-expression_statement-138-138", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
948 [label="138_ assert(tokensMinted <= maxSupplyForEra);\n948-expression_statement-139-139", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
955 [label="139_ lastRewardTo = msg.sender;\n955-expression_statement-140-140", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
961 [label="140_ lastRewardAmount = reward_amount;\n961-expression_statement-141-141", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
965 [label="141_ lastRewardEthBlockNumber = block.number;\n965-expression_statement-142-142", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
971 [label="142_ _startNewMiningEpoch();\n971-expression_statement-143-143", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
986 [label="144_ return true;\n986-return-145-145", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=return];
989 [label="146_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n989-function_definition-147-148", method="bug_unchk_send22()", type_label=function_definition];
994 [label="147_ msg.sender.transfer(1 ether);\n994-expression_statement-148-148", method="bug_unchk_send22()", type_label=expression_statement];
1004 [label="148_ function _startNewMiningEpoch() internal {\n        if (tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39) {\n            rewardEra = rewardEra + 1;\n        }\n        maxSupplyForEra = _totalSupply - _totalSupply.div(2 ** (rewardEra + 1));\n        epochCount = epochCount.add(1);\n        if (epochCount % _BLOCKS_PER_READJUSTMENT == 0) {\n            _reAdjustDifficulty();\n        }\n        challengeNumber = blockhash(block.number - 1);\n    }\n1004-function_definition-149-159", method="_startNewMiningEpoch()", type_label=function_definition];
1008 [label="149_ if_tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39\n1008-if-150-152", method="_startNewMiningEpoch()", type_label=if];
3106 [label="149_ end_if", method="_startNewMiningEpoch()", type_label=end_if];
1023 [label="150_ rewardEra = rewardEra + 1;\n1023-expression_statement-151-151", method="_startNewMiningEpoch()", type_label=expression_statement];
1029 [label="152_ maxSupplyForEra = _totalSupply - _totalSupply.div(2 ** (rewardEra + 1));\n1029-expression_statement-153-153", method="_startNewMiningEpoch()", type_label=expression_statement];
1045 [label="153_ epochCount = epochCount.add(1);\n1045-expression_statement-154-154", method="_startNewMiningEpoch()", type_label=expression_statement];
1054 [label="154_ if_epochCount % _BLOCKS_PER_READJUSTMENT == 0\n1054-if-155-157", method="_startNewMiningEpoch()", type_label=if];
3152 [label="154_ end_if", method="_startNewMiningEpoch()", type_label=end_if];
1061 [label="155_ _reAdjustDifficulty();\n1061-expression_statement-156-156", method="_startNewMiningEpoch()", type_label=expression_statement];
1064 [label="157_ challengeNumber = blockhash(block.number - 1);\n1064-expression_statement-158-158", method="_startNewMiningEpoch()", type_label=expression_statement];
1075 [label="159_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n1075-function_definition-160-161", method="bug_unchk_send12()", type_label=function_definition];
1080 [label="160_ msg.sender.transfer(1 ether);\n1080-expression_statement-161-161", method="bug_unchk_send12()", type_label=expression_statement];
1090 [label="161_ function _reAdjustDifficulty() internal {\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n        uint epochsMined = _BLOCKS_PER_READJUSTMENT;  \n        uint targetEthBlocksPerDiffPeriod = epochsMined * 60;  \n        if (ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod) {\n            uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod);\n            uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n            miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));  \n        } else {\n            uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod);\n            uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);  \n            miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));  \n        }\n        latestDifficultyPeriodStarted = block.number;\n        if (miningTarget < _MINIMUM_TARGET)  \n        {\n            miningTarget = _MINIMUM_TARGET;\n        }\n        if (miningTarget > _MAXIMUM_TARGET)  \n        {\n            miningTarget = _MAXIMUM_TARGET;\n        }\n    }\n1090-function_definition-162-184", method="_reAdjustDifficulty()", type_label=function_definition];
1094 [label="162_ uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n1094-new_variable-163-163", method="_reAdjustDifficulty()", type_label=new_variable];
1104 [label="163_ uint epochsMined = _BLOCKS_PER_READJUSTMENT;\n1104-new_variable-164-164", method="_reAdjustDifficulty()", type_label=new_variable];
1110 [label="164_ uint targetEthBlocksPerDiffPeriod = epochsMined * 60;\n1110-new_variable-165-165", method="_reAdjustDifficulty()", type_label=new_variable];
1118 [label="165_ if_ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod\n1118-if-166-174", method="_reAdjustDifficulty()", type_label=if];
3216 [label="165_ end_if", method="_reAdjustDifficulty()", type_label=end_if];
1123 [label="166_ uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod);\n1123-new_variable-167-167", method="_reAdjustDifficulty()", type_label=new_variable];
1140 [label="167_ uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n1140-new_variable-168-168", method="_reAdjustDifficulty()", type_label=new_variable];
1156 [label="168_ miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));\n1156-expression_statement-169-169", method="_reAdjustDifficulty()", type_label=expression_statement];
1176 [label="170_ uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod);\n1176-new_variable-171-171", method="_reAdjustDifficulty()", type_label=new_variable];
1193 [label="171_ uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);\n1193-new_variable-172-172", method="_reAdjustDifficulty()", type_label=new_variable];
1209 [label="172_ miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));\n1209-expression_statement-173-173", method="_reAdjustDifficulty()", type_label=expression_statement];
1228 [label="174_ latestDifficultyPeriodStarted = block.number;\n1228-expression_statement-175-175", method="_reAdjustDifficulty()", type_label=expression_statement];
1234 [label="175_ if_miningTarget < _MINIMUM_TARGET\n1234-if-176-179", method="_reAdjustDifficulty()", type_label=if];
3332 [label="175_ end_if", method="_reAdjustDifficulty()", type_label=end_if];
1239 [label="177_ miningTarget = _MINIMUM_TARGET;\n1239-expression_statement-178-178", method="_reAdjustDifficulty()", type_label=expression_statement];
1243 [label="179_ if_miningTarget > _MAXIMUM_TARGET\n1243-if-180-183", method="_reAdjustDifficulty()", type_label=if];
3341 [label="179_ end_if", method="_reAdjustDifficulty()", type_label=end_if];
1248 [label="181_ miningTarget = _MAXIMUM_TARGET;\n1248-expression_statement-182-182", method="_reAdjustDifficulty()", type_label=expression_statement];
1252 [label="184_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n1252-function_definition-185-186", method="bug_unchk_send11()", type_label=function_definition];
1257 [label="185_ msg.sender.transfer(1 ether);\n1257-expression_statement-186-186", method="bug_unchk_send11()", type_label=expression_statement];
1267 [label="186_ function getChallengeNumber() public view returns(bytes32) {\n        return challengeNumber;\n    }\n1267-function_definition-187-189", method="getChallengeNumber()", type_label=function_definition];
1276 [label="187_ return challengeNumber;\n1276-return-188-188", method="getChallengeNumber()", type_label=return];
1278 [label="189_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n1278-function_definition-190-191", method="bug_unchk_send1()", type_label=function_definition];
1283 [label="190_ msg.sender.transfer(1 ether);\n1283-expression_statement-191-191", method="bug_unchk_send1()", type_label=expression_statement];
1293 [label="191_ function getMiningDifficulty() public view returns(uint) {\n        return _MAXIMUM_TARGET.div(miningTarget);\n    }\n1293-function_definition-192-194", method="getMiningDifficulty()", type_label=function_definition];
1302 [label="192_ return _MAXIMUM_TARGET.div(miningTarget);\n1302-return-193-193", method="getMiningDifficulty()", type_label=return];
1309 [label="194_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n1309-function_definition-195-196", method="bug_unchk_send2()", type_label=function_definition];
1314 [label="195_ msg.sender.transfer(1 ether);\n1314-expression_statement-196-196", method="bug_unchk_send2()", type_label=expression_statement];
1324 [label="196_ function getMiningTarget() public view returns(uint) {\n        return miningTarget;\n    }\n1324-function_definition-197-199", method="getMiningTarget()", type_label=function_definition];
1333 [label="197_ return miningTarget;\n1333-return-198-198", method="getMiningTarget()", type_label=return];
1335 [label="199_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n1335-function_definition-200-201", method="bug_unchk_send17()", type_label=function_definition];
1340 [label="200_ msg.sender.transfer(1 ether);\n1340-expression_statement-201-201", method="bug_unchk_send17()", type_label=expression_statement];
1350 [label="201_ function getMiningReward() public view returns(uint) {\n        return (50 * 10 ** uint(decimals)).div(2 ** rewardEra);\n    }\n1350-function_definition-202-204", method="getMiningReward()", type_label=function_definition];
1359 [label="202_ return (50 * 10 ** uint(decimals)).div(2 ** rewardEra);\n1359-return-203-203", method="getMiningReward()", type_label=return];
1375 [label="204_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n1375-function_definition-205-206", method="bug_unchk_send3()", type_label=function_definition];
1380 [label="205_ msg.sender.transfer(1 ether);\n1380-expression_statement-206-206", method="bug_unchk_send3()", type_label=expression_statement];
1390 [label="206_ function getMintDigest(uint256 nonce, bytes32 challenge_number) public view returns(bytes32 digesttest) {\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n        return digest;\n    }\n1390-function_definition-207-210", method="getMintDigest(uint256 nonce,bytes32 challenge_number)", type_label=function_definition];
1408 [label="207_ bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n1408-new_variable-208-208", method="getMintDigest(uint256 nonce,bytes32 challenge_number)", type_label=new_variable];
1428 [label="208_ return digest;\n1428-return-209-209", method="getMintDigest(uint256 nonce,bytes32 challenge_number)", type_label=return];
1430 [label="210_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n1430-function_definition-211-212", method="bug_unchk_send9()", type_label=function_definition];
1435 [label="211_ msg.sender.transfer(1 ether);\n1435-expression_statement-212-212", method="bug_unchk_send9()", type_label=expression_statement];
1445 [label="212_ function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns(bool success) {\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n        if (uint256(digest) > testTarget) revert();\n        return (digest == challenge_digest);\n    }\n1445-function_definition-213-217", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=function_definition];
1471 [label="213_ bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n1471-new_variable-214-214", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=new_variable];
1491 [label="214_ if_uint256(digest) > testTarget\n1491-if-215-215", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=if];
3589 [label="214_ end_if", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=end_if];
1499 [label="215_ return (digest == challenge_digest);\n1499-return-216-216", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=return];
1504 [label="217_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n1504-function_definition-218-219", method="bug_unchk_send25()", type_label=function_definition];
1509 [label="218_ msg.sender.transfer(1 ether);\n1509-expression_statement-219-219", method="bug_unchk_send25()", type_label=expression_statement];
1519 [label="219_ function totalSupply() public view returns(uint) {\n        return _totalSupply - balances[address(0)];\n    }\n1519-function_definition-220-222", method="totalSupply()", type_label=function_definition];
1528 [label="220_ return _totalSupply - balances[address(0)];\n1528-return-221-221", method="totalSupply()", type_label=return];
1536 [label="222_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n1536-function_definition-223-224", method="bug_unchk_send19()", type_label=function_definition];
1541 [label="223_ msg.sender.transfer(1 ether);\n1541-expression_statement-224-224", method="bug_unchk_send19()", type_label=expression_statement];
1551 [label="224_ function balanceOf(address tokenOwner) public view returns(uint balance) {\n        return balances[tokenOwner];\n    }\n1551-function_definition-225-227", method="balanceOf(address tokenOwner)", type_label=function_definition];
1565 [label="225_ return balances[tokenOwner];\n1565-return-226-226", method="balanceOf(address tokenOwner)", type_label=return];
1569 [label="227_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n1569-function_definition-228-229", method="bug_unchk_send26()", type_label=function_definition];
1574 [label="228_ msg.sender.transfer(1 ether);\n1574-expression_statement-229-229", method="bug_unchk_send26()", type_label=expression_statement];
1584 [label="229_ function transfer(address to, uint tokens) public returns(bool success) {\n        uint toBurn = tokens.mul(burnPercent).div(1000);\n        uint toSend = tokens.sub(toBurn);\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(toSend);\n        emit Transfer(msg.sender, to, toSend);\n        balances[address(0)] = balances[address(0)].add(toBurn);\n        emit Transfer(msg.sender, address(0), toBurn);\n        return true;\n    }\n1584-function_definition-230-239", method="transfer(address to,uint tokens)", type_label=function_definition];
1601 [label="230_ uint toBurn = tokens.mul(burnPercent).div(1000);\n1601-new_variable-231-231", method="transfer(address to,uint tokens)", type_label=new_variable];
1617 [label="231_ uint toSend = tokens.sub(toBurn);\n1617-new_variable-232-232", method="transfer(address to,uint tokens)", type_label=new_variable];
1628 [label="232_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n1628-expression_statement-233-233", method="transfer(address to,uint tokens)", type_label=expression_statement];
1645 [label="233_ balances[to] = balances[to].add(toSend);\n1645-expression_statement-234-234", method="transfer(address to,uint tokens)", type_label=expression_statement];
1668 [label="235_ balances[address(0)] = balances[address(0)].add(toBurn);\n1668-expression_statement-236-236", method="transfer(address to,uint tokens)", type_label=expression_statement];
1697 [label="237_ return true;\n1697-return-238-238", method="transfer(address to,uint tokens)", type_label=return];
1700 [label="239_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n1700-function_definition-240-241", method="bug_unchk_send20()", type_label=function_definition];
1705 [label="240_ msg.sender.transfer(1 ether);\n1705-expression_statement-241-241", method="bug_unchk_send20()", type_label=expression_statement];
1715 [label="241_ function approve(address spender, uint tokens) public returns(bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n1715-function_definition-242-246", method="approve(address spender,uint tokens)", type_label=function_definition];
1732 [label="242_ allowed[msg.sender][spender] = tokens;\n1732-expression_statement-243-243", method="approve(address spender,uint tokens)", type_label=expression_statement];
1752 [label="244_ return true;\n1752-return-245-245", method="approve(address spender,uint tokens)", type_label=return];
1755 [label="246_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n1755-function_definition-247-248", method="bug_unchk_send32()", type_label=function_definition];
1760 [label="247_ msg.sender.transfer(1 ether);\n1760-expression_statement-248-248", method="bug_unchk_send32()", type_label=expression_statement];
1770 [label="248_ function transferFrom(address from, address to, uint tokens) public returns(bool success) {\n        uint toBurn = tokens.mul(burnPercent).div(1000);\n        uint toSend = tokens.sub(toBurn);\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(toSend);\n        emit Transfer(from, to, toSend);\n        balances[address(0)] = balances[address(0)].add(toBurn);\n        emit Transfer(from, address(0), toBurn);\n        return true;\n    }\n1770-function_definition-249-259", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
1791 [label="249_ uint toBurn = tokens.mul(burnPercent).div(1000);\n1791-new_variable-250-250", method="transferFrom(address from,address to,uint tokens)", type_label=new_variable];
1807 [label="250_ uint toSend = tokens.sub(toBurn);\n1807-new_variable-251-251", method="transferFrom(address from,address to,uint tokens)", type_label=new_variable];
1818 [label="251_ balances[from] = balances[from].sub(tokens);\n1818-expression_statement-252-252", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1831 [label="252_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n1831-expression_statement-253-253", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1852 [label="253_ balances[to] = balances[to].add(toSend);\n1852-expression_statement-254-254", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1873 [label="255_ balances[address(0)] = balances[address(0)].add(toBurn);\n1873-expression_statement-256-256", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1900 [label="257_ return true;\n1900-return-258-258", method="transferFrom(address from,address to,uint tokens)", type_label=return];
1903 [label="259_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n1903-function_definition-260-261", method="bug_unchk_send4()", type_label=function_definition];
1908 [label="260_ msg.sender.transfer(1 ether);\n1908-expression_statement-261-261", method="bug_unchk_send4()", type_label=expression_statement];
1918 [label="261_ function allowance(address tokenOwner, address spender) public view returns(uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n1918-function_definition-262-264", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
1936 [label="262_ return allowed[tokenOwner][spender];\n1936-return-263-263", method="allowance(address tokenOwner,address spender)", type_label=return];
1942 [label="264_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n1942-function_definition-265-266", method="bug_unchk_send7()", type_label=function_definition];
1947 [label="265_ msg.sender.transfer(1 ether);\n1947-expression_statement-266-266", method="bug_unchk_send7()", type_label=expression_statement];
1957 [label="266_ function approveAndCall(address spender, uint tokens, bytes memory data) public returns(bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n1957-function_definition-267-272", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=function_definition];
1978 [label="267_ allowed[msg.sender][spender] = tokens;\n1978-expression_statement-268-268", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
1998 [label="269_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n1998-expression_statement-270-270", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
2018 [label="270_ return true;\n2018-return-271-271", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=return];
2021 [label="272_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n2021-function_definition-273-274", method="bug_unchk_send23()", type_label=function_definition];
2026 [label="273_ msg.sender.transfer(1 ether);\n2026-expression_statement-274-274", method="bug_unchk_send23()", type_label=expression_statement];
2042 [label="277_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n2042-function_definition-278-279", method="bug_unchk_send14()", type_label=function_definition];
2047 [label="278_ msg.sender.transfer(1 ether);\n2047-expression_statement-279-279", method="bug_unchk_send14()", type_label=expression_statement];
2057 [label="279_ function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns(bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n2057-function_definition-280-282", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=function_definition];
2068 [label="279_ onlyOwner\n2068-expression_statement-280-280", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=expression_statement];
2076 [label="280_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n2076-return-281-281", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=return];
2088 [label="282_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n2088-function_definition-283-284", method="bug_unchk_send30()", type_label=function_definition];
2093 [label="283_ msg.sender.transfer(1 ether);\n2093-expression_statement-284-284", method="bug_unchk_send30()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 168  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
164 -> 2262  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2262 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 2262  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
196 -> 201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
228 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
290 -> 295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
325 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
340 -> 345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
369 -> 374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
438 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
448 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
481 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
499 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
558 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
612 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
622 -> 627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
627 -> 632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
646 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
654 -> 659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
659 -> 664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
669 -> 674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
674 -> 679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
684 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
689 -> 695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
695 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
706 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
762 -> 767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
767 -> 772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
772 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
776 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 2884  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
790 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
795 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
812 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
822 -> 826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
829 -> 834  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
844 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
881 -> 2979  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
887 -> 2985  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
895 -> 903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
903 -> 909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
909 -> 3007  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
915 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
939 -> 948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
955 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
961 -> 965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
965 -> 971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
986 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
989 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1008 -> 1023  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1008 -> 3106  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3106 -> 1029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1023 -> 3106  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1029 -> 1045  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1045 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1061  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1054 -> 3152  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3152 -> 1064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1061 -> 3152  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1075 -> 1080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1090 -> 1094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1094 -> 1104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1104 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1110 -> 1118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1118 -> 1123  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1118 -> 1176  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3216 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1123 -> 1140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1140 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1156 -> 3216  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1176 -> 1193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1193 -> 1209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1209 -> 3216  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1228 -> 1234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1234 -> 1239  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1234 -> 3332  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3332 -> 1243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1239 -> 3332  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1243 -> 1248  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1243 -> 3341  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3341 -> 1252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1248 -> 3341  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1252 -> 1257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1267 -> 1276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1276 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1278 -> 1283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1293 -> 1302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1302 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1309 -> 1314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1324 -> 1333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1333 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1335 -> 1340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1350 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1359 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1375 -> 1380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1390 -> 1408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1408 -> 1428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1428 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1430 -> 1435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1445 -> 1471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1471 -> 1491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1491 -> 3589  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1499 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1504 -> 1509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1519 -> 1528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1528 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1536 -> 1541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1551 -> 1565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1565 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1569 -> 1574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1584 -> 1601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1601 -> 1617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1617 -> 1628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1628 -> 1645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1697 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1700 -> 1705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1715 -> 1732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1752 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1755 -> 1760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1770 -> 1791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1791 -> 1807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1807 -> 1818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1818 -> 1831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1831 -> 1852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1900 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1903 -> 1908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1918 -> 1936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1936 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1942 -> 1947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1957 -> 1978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1998 -> 2018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2018 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2021 -> 2026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2042 -> 2047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2057 -> 2076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2076 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2088 -> 2093  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
