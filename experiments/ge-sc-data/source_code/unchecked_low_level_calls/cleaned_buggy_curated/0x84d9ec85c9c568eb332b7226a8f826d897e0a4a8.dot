digraph  {
13 [label="2_ modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n13-expression_statement-3-6", method="", type_label=expression_statement];
16 [label="3_ require(msg.sender == owner);\n16-expression_statement-4-4", method="", type_label=expression_statement];
25 [label="4_ _;\n25-expression_statement-5-5", method="", type_label=expression_statement];
27 [label="6_ address public owner;\n27-new_variable-7-7", method="", type_label=new_variable];
32 [label="7_ function Owned() {\n        owner = msg.sender;\n    }\n32-function_definition-8-10", method="Owned()", type_label=function_definition];
35 [label="8_ owner = msg.sender;\n35-expression_statement-9-9", method="Owned()", type_label=expression_statement];
41 [label="10_ address public newOwner;\n41-new_variable-11-11", method="", type_label=new_variable];
46 [label="11_ function changeOwner(address _newOwner) onlyOwner {\n        newOwner = _newOwner;\n    }\n46-function_definition-12-14", method="changeOwner(address _newOwner)", type_label=function_definition];
52 [label="11_ onlyOwner\n52-expression_statement-12-12", method="changeOwner(address _newOwner)", type_label=expression_statement];
55 [label="12_ newOwner = _newOwner;\n55-expression_statement-13-13", method="changeOwner(address _newOwner)", type_label=expression_statement];
59 [label="14_ function acceptOwnership() {\n        if (msg.sender == newOwner) {\n            owner = newOwner;\n        }\n    }\n59-function_definition-15-19", method="acceptOwnership()", type_label=function_definition];
62 [label="15_ if_msg.sender == newOwner\n62-if-16-18", method="acceptOwnership()", type_label=if];
309 [label="15_ end_if", method="acceptOwnership()", type_label=end_if];
69 [label="16_ owner = newOwner;\n69-expression_statement-17-17", method="acceptOwnership()", type_label=expression_statement];
73 [label="19_ function execute(address _dst, uint _value, bytes _data) onlyOwner {\n        _dst.call.value(_value)(_data);\n    }\n73-function_definition-20-22", method="execute(address _dst,uint _value,bytes _data)", type_label=function_definition];
87 [label="19_ onlyOwner\n87-expression_statement-20-20", method="execute(address _dst,uint _value,bytes _data)", type_label=expression_statement];
90 [label="20_ _dst.call.value(_value)(_data);\n90-expression_statement-21-21", method="execute(address _dst,uint _value,bytes _data)", type_label=expression_statement];
108 [label="24_ string public wedaddress;\n108-new_variable-25-25", method="", type_label=new_variable];
113 [label="25_ string public partnernames;\n113-new_variable-26-26", method="", type_label=new_variable];
118 [label="26_ uint public indexdate;\n118-new_variable-27-27", method="", type_label=new_variable];
123 [label="27_ uint public weddingdate;\n123-new_variable-28-28", method="", type_label=new_variable];
128 [label="28_ uint public displaymultisig;\n128-new_variable-29-29", method="", type_label=new_variable];
133 [label="29_ IndexArray[] public indexarray;\n133-new_variable-30-30", method="", type_label=new_variable];
140 [label="30_ struct IndexArray {\n        uint indexdate;\n        string wedaddress;\n        string partnernames;\n        uint weddingdate;\n        uint displaymultisig;\n    }\n140-expression_statement-31-37", method="IndexArray()", type_label=expression_statement];
162 [label="37_ function numberOfIndex() constant public returns (uint) {\n        return indexarray.length;\n    }\n162-function_definition-38-40", method="numberOfIndex()", type_label=function_definition];
164 [label="37_ constant\n164-expression_statement-38-38", method="numberOfIndex()", type_label=expression_statement];
172 [label="38_ return indexarray.length;\n172-return-39-39", method="numberOfIndex()", type_label=return];
176 [label="40_ function writeIndex(uint indexdate, string wedaddress, string partnernames, uint weddingdate, uint displaymultisig) {\n        indexarray.push(IndexArray(now, wedaddress, partnernames, weddingdate, displaymultisig));\n        IndexWritten(now, wedaddress, partnernames, weddingdate, displaymultisig);\n    }\n176-function_definition-41-44", method="writeIndex(uint indexdate,string wedaddress,string partnernames,uint weddingdate,uint displaymultisig)", type_label=function_definition];
199 [label="41_ indexarray.push(IndexArray(now, wedaddress, partnernames, weddingdate, displaymultisig));\n199-expression_statement-42-42", method="writeIndex(uint indexdate,string wedaddress,string partnernames,uint weddingdate,uint displaymultisig)", type_label=expression_statement];
217 [label="42_ IndexWritten(now, wedaddress, partnernames, weddingdate, displaymultisig);\n217-expression_statement-43-43", method="writeIndex(uint indexdate,string wedaddress,string partnernames,uint weddingdate,uint displaymultisig)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 27  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
16 -> 25  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
32 -> 35  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
46 -> 55  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
59 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
62 -> 309  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
309 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
69 -> 309  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
73 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
108 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
118 -> 123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
123 -> 128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
133 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
162 -> 172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
172 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
176 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
