digraph  {
13 [label="2_ address public owner;\n13-new_variable-3-3", type_label=new_variable];
20 [label="4_ owner = msg.sender;\n20-expression_statement-5-5", type_label=expression_statement];
26 [label="6_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n26-expression_statement-7-10", type_label=expression_statement];
29 [label="7_ require(msg.sender == owner);\n29-expression_statement-8-8", type_label=expression_statement];
38 [label="8_ _;\n38-expression_statement-9-9", type_label=expression_statement];
40 [label="10_ transferOwnership\n40-function_definition-11-13", type_label=function_definition];
46 [label="10_ onlyOwner\n46-expression_statement-11-11", type_label=expression_statement];
50 [label="11_ owner = newOwner;\n50-expression_statement-12-12", type_label=expression_statement];
57 [label="15_ string public name;\n57-new_variable-16-16", type_label=new_variable];
62 [label="16_ string public symbol;\n62-new_variable-17-17", type_label=new_variable];
67 [label="17_ uint8 public decimals = 18;\n67-new_variable-18-18", type_label=new_variable];
73 [label="18_ uint256 public totalSupply;\n73-new_variable-19-19", type_label=new_variable];
78 [label="19_ mapping (address => uint256) public balanceOf;\n78-new_variable-20-20", type_label=new_variable];
85 [label="20_ mapping (address => mapping (address => uint256)) public allowance;\n85-new_variable-21-21", type_label=new_variable];
136 [label="28_ totalSupply = initialSupply * 10 ** uint256(decimals);\n136-expression_statement-29-29", type_label=expression_statement];
146 [label="29_ balanceOf[msg.sender] = totalSupply;\n146-expression_statement-30-30", type_label=expression_statement];
154 [label="30_ name = tokenName;\n154-expression_statement-31-31", type_label=expression_statement];
158 [label="31_ symbol = tokenSymbol;\n158-expression_statement-32-32", type_label=expression_statement];
162 [label="33_ _transfer\n162-function_definition-34-43", type_label=function_definition];
178 [label="34_ require(_to != address(0x0));\n178-expression_statement-35-35", type_label=expression_statement];
187 [label="35_ require(balanceOf[_from] >= _value);\n187-expression_statement-36-36", type_label=expression_statement];
196 [label="36_ require(balanceOf[_to] + _value > balanceOf[_to]);\n196-expression_statement-37-37", type_label=expression_statement];
209 [label="37_ uint previousBalances = balanceOf[_from] + balanceOf[_to];\n209-new_variable-38-38", type_label=new_variable];
221 [label="38_ balanceOf[_from] -= _value;\n221-expression_statement-39-39", type_label=expression_statement];
227 [label="39_ balanceOf[_to] += _value;\n227-expression_statement-40-40", type_label=expression_statement];
241 [label="41_ assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n241-expression_statement-42-42", type_label=expression_statement];
254 [label="43_ transfer\n254-function_definition-44-47", type_label=function_definition];
271 [label="44_ _transfer(msg.sender, _to, _value);\n271-expression_statement-45-45", type_label=expression_statement];
282 [label="45_ return true;\n282-return-46-46", type_label=return];
285 [label="47_ transferFrom\n285-function_definition-48-53", type_label=function_definition];
306 [label="48_ require(_value <= allowance[_from][msg.sender]);\n306-expression_statement-49-49", type_label=expression_statement];
319 [label="49_ allowance[_from][msg.sender] -= _value;\n319-expression_statement-50-50", type_label=expression_statement];
329 [label="50_ _transfer(_from, _to, _value);\n329-expression_statement-51-51", type_label=expression_statement];
338 [label="51_ return true;\n338-return-52-52", type_label=return];
341 [label="53_ approve\n341-function_definition-54-59", type_label=function_definition];
358 [label="55_ allowance[msg.sender][_spender] = _value;\n358-expression_statement-56-56", type_label=expression_statement];
378 [label="57_ return true;\n378-return-58-58", type_label=return];
390 [label="61_ mapping (address => bool) public frozenAccount;\n390-new_variable-62-62", type_label=new_variable];
420 [label="67_ TokenERC20(initialSupply, tokenName, tokenSymbol)\n420-expression_statement-68-68", type_label=expression_statement];
429 [label="68_ _transfer\n429-function_definition-69-78", type_label=function_definition];
445 [label="69_ require(_to != address(0x0));\n445-expression_statement-70-70", type_label=expression_statement];
454 [label="70_ require(balanceOf[_from] >= _value);\n454-expression_statement-71-71", type_label=expression_statement];
463 [label="71_ require(balanceOf[_to] + _value >= balanceOf[_to]);\n463-expression_statement-72-72", type_label=expression_statement];
476 [label="72_ require(!frozenAccount[_from]);\n476-expression_statement-73-73", type_label=expression_statement];
484 [label="73_ require(!frozenAccount[_to]);\n484-expression_statement-74-74", type_label=expression_statement];
492 [label="74_ balanceOf[_from] -= _value;\n492-expression_statement-75-75", type_label=expression_statement];
498 [label="75_ balanceOf[_to] += _value;\n498-expression_statement-76-76", type_label=expression_statement];
512 [label="78_ mintToken\n512-function_definition-79-84", type_label=function_definition];
522 [label="78_ onlyOwner\n522-expression_statement-79-79", type_label=expression_statement];
526 [label="79_ balanceOf[target] += mintedAmount;\n526-expression_statement-80-80", type_label=expression_statement];
532 [label="80_ totalSupply += mintedAmount;\n532-expression_statement-81-81", type_label=expression_statement];
554 [label="84_ freezeAccount\n554-function_definition-85-88", type_label=function_definition];
564 [label="84_ onlyOwner\n564-expression_statement-85-85", type_label=expression_statement];
568 [label="85_ frozenAccount[target] = freeze;\n568-expression_statement-86-86", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
29 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
40 -> 50  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
57 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 78  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
78 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
136 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
154 -> 158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
162 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
196 -> 209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
209 -> 221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
221 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
254 -> 271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
271 -> 282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
282 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
285 -> 306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
306 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
319 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
338 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
341 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
429 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
454 -> 463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
463 -> 476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
484 -> 492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
492 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
526 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
554 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
