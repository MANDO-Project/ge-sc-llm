digraph  {
12 [label="2_ mul\n12-function_definition-3-10", type_label=function_definition];
29 [label="3_ if_a == 0\n29-if-4-6", type_label=if];
1645 [label="3_ end_if", type_label=end_if];
34 [label="4_ return 0;\n34-return-5-5", type_label=return];
36 [label="6_ uint256 c = a * b;\n36-new_variable-7-7", type_label=new_variable];
44 [label="7_ assert(c / a == b);\n44-expression_statement-8-8", type_label=expression_statement];
53 [label="8_ return c;\n53-return-9-9", type_label=return];
55 [label="10_ div\n55-function_definition-11-14", type_label=function_definition];
72 [label="11_ uint256 c = a / b;\n72-new_variable-12-12", type_label=new_variable];
80 [label="12_ return c;\n80-return-13-13", type_label=return];
82 [label="14_ sub\n82-function_definition-15-18", type_label=function_definition];
99 [label="15_ assert(b <= a);\n99-expression_statement-16-16", type_label=expression_statement];
106 [label="16_ return a - b;\n106-return-17-17", type_label=return];
110 [label="18_ add\n110-function_definition-19-23", type_label=function_definition];
127 [label="19_ uint256 c = a + b;\n127-new_variable-20-20", type_label=new_variable];
135 [label="20_ assert(c >= a);\n135-expression_statement-21-21", type_label=expression_statement];
142 [label="21_ return c;\n142-return-22-22", type_label=return];
147 [label="25_ totalSupply\n147-function_definition-26-26", type_label=function_definition];
156 [label="26_ balanceOf\n156-function_definition-27-27", type_label=function_definition];
168 [label="27_ allowance\n168-function_definition-28-28", type_label=function_definition];
184 [label="28_ transferFrom\n184-function_definition-29-29", type_label=function_definition];
204 [label="29_ approve\n204-function_definition-30-30", type_label=function_definition];
220 [label="30_ transfer\n220-function_definition-31-31", type_label=function_definition];
267 [label="35_ address public oldAddress;\n267-new_variable-36-36", type_label=new_variable];
272 [label="36_ isUpgradeAgent\n272-function_definition-37-39", type_label=function_definition];
281 [label="37_ return true;\n281-return-38-38", type_label=return];
284 [label="39_ upgradeFrom\n284-function_definition-40-40", type_label=function_definition];
306 [label="43_ string public constant name = \"Concordia Ventures Stablecoin\";\n306-new_variable-44-44", type_label=new_variable];
313 [label="44_ string public constant symbol = \"CVEN\";\n313-new_variable-45-45", type_label=new_variable];
320 [label="45_ uint8 public constant decimals = 18;\n320-new_variable-46-46", type_label=new_variable];
326 [label="46_ uint256 public _totalsupply;\n326-new_variable-47-47", type_label=new_variable];
331 [label="47_ uint256 public mintedTokens;\n331-new_variable-48-48", type_label=new_variable];
336 [label="48_ uint256 public totalUpgraded;\n336-new_variable-49-49", type_label=new_variable];
341 [label="49_ address public owner;\n341-new_variable-50-50", type_label=new_variable];
346 [label="50_ address public ethFundMain;\n346-new_variable-51-51", type_label=new_variable];
351 [label="51_ UpgradeAgent public upgradeAgent;\n351-new_variable-52-52", type_label=new_variable];
357 [label="52_ bool public lockstatus = false;\n357-new_variable-53-53", type_label=new_variable];
364 [label="53_ bool public stopped = false;\n364-new_variable-54-54", type_label=new_variable];
371 [label="54_ mapping(address => uint256) public balances;\n371-new_variable-55-55", type_label=new_variable];
378 [label="55_ mapping(address => mapping(address => uint256)) public allowed;\n378-new_variable-56-56", type_label=new_variable];
387 [label="56_ mapping(address => bool) public locked;\n387-new_variable-57-57", type_label=new_variable];
438 [label="61_ modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner is allowed\");\n        _;\n    }\n438-expression_statement-62-65", type_label=expression_statement];
441 [label="62_ require(msg.sender == owner, \"Only owner is allowed\");\n441-expression_statement-63-63", type_label=expression_statement];
453 [label="63_ _;\n453-expression_statement-64-64", type_label=expression_statement];
457 [label="67_ owner = msg.sender;\n457-expression_statement-68-68", type_label=expression_statement];
463 [label="68_ ethFundMain = 0x657Eb3CE439CA61e58FF6Cb106df2e962C5e7890;\n463-expression_statement-69-69", type_label=expression_statement];
467 [label="70_ totalSupply\n467-function_definition-71-73", type_label=function_definition];
477 [label="71_ total_Supply = _totalsupply;\n477-expression_statement-72-72", type_label=expression_statement];
481 [label="73_ balanceOf\n481-function_definition-74-76", type_label=function_definition];
495 [label="74_ return balances[_owner];\n495-return-75-75", type_label=return];
499 [label="76_ transfer\n499-function_definition-77-86", type_label=function_definition];
516 [label="77_ require(!lockstatus, \"Token is locked now\");\n516-expression_statement-78-78", type_label=expression_statement];
525 [label="78_ require( _to != 0x0, \"Receiver can not be 0x0\");\n525-expression_statement-79-79", type_label=expression_statement];
535 [label="79_ require(balances[msg.sender] >= _amount, \"Balance does not have enough tokens\");\n535-expression_statement-80-80", type_label=expression_statement];
549 [label="80_ require(!locked[msg.sender], \"Sender address is locked\");\n549-expression_statement-81-81", type_label=expression_statement];
562 [label="81_ balances[msg.sender] = (balances[msg.sender]).sub(_amount);\n562-expression_statement-82-82", type_label=expression_statement];
580 [label="82_ balances[_to] = (balances[_to]).add(_amount);\n580-expression_statement-83-83", type_label=expression_statement];
604 [label="84_ return true;\n604-return-85-85", type_label=return];
607 [label="86_ transferFrom\n607-function_definition-87-98", type_label=function_definition];
628 [label="87_ require( _to != 0x0, \"Receiver can not be 0x0\");\n628-expression_statement-88-88", type_label=expression_statement];
638 [label="88_ require(!lockstatus, \"Token is locked now\");\n638-expression_statement-89-89", type_label=expression_statement];
647 [label="89_ require(balances[_from] >= _amount, \"Source balance is not enough\");\n647-expression_statement-90-90", type_label=expression_statement];
659 [label="90_ require(allowed[_from][msg.sender] >= _amount, \"Allowance is not enough\");\n659-expression_statement-91-91", type_label=expression_statement];
675 [label="91_ require(!locked[_from], \"From address is locked\");\n675-expression_statement-92-92", type_label=expression_statement];
686 [label="92_ balances[_from] = (balances[_from]).sub(_amount);\n686-expression_statement-93-93", type_label=expression_statement];
700 [label="93_ allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\n700-expression_statement-94-94", type_label=expression_statement];
722 [label="94_ balances[_to] = (balances[_to]).add(_amount);\n722-expression_statement-95-95", type_label=expression_statement];
744 [label="96_ return true;\n744-return-97-97", type_label=return];
747 [label="98_ approve\n747-function_definition-99-107", type_label=function_definition];
764 [label="99_ require(!lockstatus, \"Token is locked now\");\n764-expression_statement-100-100", type_label=expression_statement];
773 [label="100_ require( _spender != 0x0, \"Address can not be 0x0\");\n773-expression_statement-101-101", type_label=expression_statement];
783 [label="101_ require(balances[msg.sender] >= _amount, \"Balance does not have enough tokens\");\n783-expression_statement-102-102", type_label=expression_statement];
797 [label="102_ require(!locked[msg.sender], \"Sender address is locked\");\n797-expression_statement-103-103", type_label=expression_statement];
810 [label="103_ allowed[msg.sender][_spender] = _amount;\n810-expression_statement-104-104", type_label=expression_statement];
830 [label="105_ return true;\n830-return-106-106", type_label=return];
833 [label="107_ allowance\n833-function_definition-108-110", type_label=function_definition];
851 [label="108_ return allowed[_owner][_spender];\n851-return-109-109", type_label=return];
857 [label="110_ burn\n857-function_definition-111-118", type_label=function_definition];
870 [label="111_ require(balances[msg.sender] >= _value, \"Balance does not have enough tokens\");\n870-expression_statement-112-112", type_label=expression_statement];
884 [label="112_ require(!locked[msg.sender], \"Sender address is locked\");\n884-expression_statement-113-113", type_label=expression_statement];
897 [label="113_ balances[msg.sender] = (balances[msg.sender]).sub(_value);\n897-expression_statement-114-114", type_label=expression_statement];
915 [label="114_ _totalsupply = _totalsupply.sub(_value);\n915-expression_statement-115-115", type_label=expression_statement];
932 [label="116_ return true;\n932-return-117-117", type_label=return];
935 [label="118_ burnFrom\n935-function_definition-119-128", type_label=function_definition];
952 [label="119_ require(balances[from] >= _value, \"Source balance does not have enough tokens\");\n952-expression_statement-120-120", type_label=expression_statement];
964 [label="120_ require(allowed[from][msg.sender] >= _value, \"Source balance does not have enough tokens\");\n964-expression_statement-121-121", type_label=expression_statement];
980 [label="121_ require(!locked[from], \"Source address is locked\");\n980-expression_statement-122-122", type_label=expression_statement];
991 [label="122_ balances[from] = (balances[from]).sub(_value);\n991-expression_statement-123-123", type_label=expression_statement];
1005 [label="123_ allowed[from][msg.sender] = (allowed[from][msg.sender]).sub(_value);\n1005-expression_statement-124-124", type_label=expression_statement];
1027 [label="124_ _totalsupply = _totalsupply.sub(_value);\n1027-expression_statement-125-125", type_label=expression_statement];
1042 [label="126_ return true;\n1042-return-127-127", type_label=return];
1045 [label="128_ stopTransferToken\n1045-function_definition-129-132", type_label=function_definition];
1048 [label="128_ onlyOwner\n1048-expression_statement-129-129", type_label=expression_statement];
1051 [label="129_ require(!lockstatus, \"Token is locked\");\n1051-expression_statement-130-130", type_label=expression_statement];
1060 [label="130_ lockstatus = true;\n1060-expression_statement-131-131", type_label=expression_statement];
1065 [label="132_ startTransferToken\n1065-function_definition-133-136", type_label=function_definition];
1068 [label="132_ onlyOwner\n1068-expression_statement-133-133", type_label=expression_statement];
1071 [label="133_ require(lockstatus, \"Token is transferable\");\n1071-expression_statement-134-134", type_label=expression_statement];
1079 [label="134_ lockstatus = false;\n1079-expression_statement-135-135", type_label=expression_statement];
1088 [label="137_ require(!stopped, \"CrowdSale is stopping\");\n1088-expression_statement-138-138", type_label=expression_statement];
1097 [label="138_ mint(this, msg.sender, msg.value);\n1097-expression_statement-139-139", type_label=expression_statement];
1110 [label="140_ manualMint\n1110-function_definition-141-144", type_label=function_definition];
1121 [label="140_ onlyOwner\n1121-expression_statement-141-141", type_label=expression_statement];
1124 [label="141_ require(!stopped, \"CrowdSale is stopping\");\n1124-expression_statement-142-142", type_label=expression_statement];
1133 [label="142_ mint(owner, receiver, _value);\n1133-expression_statement-143-143", type_label=expression_statement];
1142 [label="144_ mint\n1142-function_definition-145-153", type_label=function_definition];
1158 [label="145_ require(receiver != 0x0, \"Address can not be 0x0\");\n1158-expression_statement-146-146", type_label=expression_statement];
1168 [label="146_ require(value > 0, \"Value should larger than 0\");\n1168-expression_statement-147-147", type_label=expression_statement];
1178 [label="147_ balances[receiver] = balances[receiver].add(value);\n1178-expression_statement-148-148", type_label=expression_statement];
1191 [label="148_ _totalsupply = _totalsupply.add(value);\n1191-expression_statement-149-149", type_label=expression_statement];
1200 [label="149_ mintedTokens = mintedTokens.add(value);\n1200-expression_statement-150-150", type_label=expression_statement];
1225 [label="153_ haltMintToken\n1225-function_definition-154-157", type_label=function_definition];
1228 [label="153_ onlyOwner\n1228-expression_statement-154-154", type_label=expression_statement];
1231 [label="154_ require(!stopped, \"Minting is stopping\");\n1231-expression_statement-155-155", type_label=expression_statement];
1240 [label="155_ stopped = true;\n1240-expression_statement-156-156", type_label=expression_statement];
1245 [label="157_ resumeMintToken\n1245-function_definition-158-161", type_label=function_definition];
1248 [label="157_ onlyOwner\n1248-expression_statement-158-158", type_label=expression_statement];
1251 [label="158_ require(stopped, \"Minting is running\");\n1251-expression_statement-159-159", type_label=expression_statement];
1259 [label="159_ stopped = false;\n1259-expression_statement-160-160", type_label=expression_statement];
1264 [label="161_ changeReceiveWallet\n1264-function_definition-162-165", type_label=function_definition];
1271 [label="161_ onlyOwner\n1271-expression_statement-162-162", type_label=expression_statement];
1274 [label="162_ require(newAddress != 0x0, \"Address can not be 0x0\");\n1274-expression_statement-163-163", type_label=expression_statement];
1284 [label="163_ ethFundMain = newAddress;\n1284-expression_statement-164-164", type_label=expression_statement];
1288 [label="165_ assignOwnership\n1288-function_definition-166-172", type_label=function_definition];
1295 [label="165_ onlyOwner\n1295-expression_statement-166-166", type_label=expression_statement];
1298 [label="166_ require(newOwner != 0x0, \"Address can not be 0x0\");\n1298-expression_statement-167-167", type_label=expression_statement];
1308 [label="167_ balances[newOwner] = (balances[newOwner]).add(balances[owner]);\n1308-expression_statement-168-168", type_label=expression_statement];
1324 [label="168_ balances[owner] = 0;\n1324-expression_statement-169-169", type_label=expression_statement];
1330 [label="169_ owner = newOwner;\n1330-expression_statement-170-170", type_label=expression_statement];
1346 [label="172_ forwardFunds\n1346-function_definition-173-176", type_label=function_definition];
1349 [label="172_ onlyOwner\n1349-expression_statement-173-173", type_label=expression_statement];
1352 [label="173_ address myAddress = this;\n1352-new_variable-174-174", type_label=new_variable];
1358 [label="174_ ethFundMain.transfer(myAddress.balance);\n1358-expression_statement-175-175", type_label=expression_statement];
1367 [label="176_ withdrawTokens\n1367-function_definition-177-182", type_label=function_definition];
1370 [label="176_ onlyOwner\n1370-expression_statement-177-177", type_label=expression_statement];
1373 [label="177_ uint256 value = balances[this];\n1373-new_variable-178-178", type_label=new_variable];
1381 [label="178_ balances[owner] = (balances[owner]).add(value);\n1381-expression_statement-179-179", type_label=expression_statement];
1395 [label="179_ balances[this] = 0;\n1395-expression_statement-180-180", type_label=expression_statement];
1409 [label="182_ haltTokenTransferFromAddress\n1409-function_definition-183-185", type_label=function_definition];
1416 [label="182_ onlyOwner\n1416-expression_statement-183-183", type_label=expression_statement];
1419 [label="183_ locked[investor] = true;\n1419-expression_statement-184-184", type_label=expression_statement];
1426 [label="185_ resumeTokenTransferFromAddress\n1426-function_definition-186-188", type_label=function_definition];
1433 [label="185_ onlyOwner\n1433-expression_statement-186-186", type_label=expression_statement];
1436 [label="186_ locked[investor] = false;\n1436-expression_statement-187-187", type_label=expression_statement];
1443 [label="188_ setUpgradeAgent\n1443-function_definition-189-196", type_label=function_definition];
1450 [label="188_ onlyOwner\n1450-expression_statement-189-189", type_label=expression_statement];
1453 [label="189_ require(agent != 0x0, \"Upgrade agent can not be zero\");\n1453-expression_statement-190-190", type_label=expression_statement];
1463 [label="190_ require(totalUpgraded == 0, \"Token are upgrading\");\n1463-expression_statement-191-191", type_label=expression_statement];
1473 [label="191_ upgradeAgent = UpgradeAgent(agent);\n1473-expression_statement-192-192", type_label=expression_statement];
1480 [label="192_ require(upgradeAgent.isUpgradeAgent(), \"The address is not upgrade agent\");\n1480-expression_statement-193-193", type_label=expression_statement];
1491 [label="193_ require(upgradeAgent.oldAddress() == address(this), \"This is not right agent\");\n1491-expression_statement-194-194", type_label=expression_statement];
1510 [label="196_ upgrade\n1510-function_definition-197-207", type_label=function_definition];
1518 [label="197_ require (value != 0, \"Value can not be zero\");\n1518-expression_statement-198-198", type_label=expression_statement];
1528 [label="198_ require(balances[msg.sender] >= value, \"Balance is not enough\");\n1528-expression_statement-199-199", type_label=expression_statement];
1542 [label="199_ require(address(upgradeAgent) != 0x0, \"Upgrade agent is not set\");\n1542-expression_statement-200-200", type_label=expression_statement];
1554 [label="200_ balances[msg.sender] = (balances[msg.sender]).sub(value);\n1554-expression_statement-201-201", type_label=expression_statement];
1572 [label="201_ _totalsupply = _totalsupply.sub(value);\n1572-expression_statement-202-202", type_label=expression_statement];
1581 [label="202_ totalUpgraded = totalUpgraded.add(value);\n1581-expression_statement-203-203", type_label=expression_statement];
1590 [label="203_ upgradeAgent.upgradeFrom(msg.sender, value);\n1590-expression_statement-204-204", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
29 -> 1645  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1645 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 1645  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
34 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
36 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
55 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
82 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
110 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
135 -> 142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
142 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
272 -> 281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
281 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
306 -> 313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
313 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
326 -> 331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
336 -> 341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
341 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
346 -> 351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
351 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
441 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
481 -> 495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
499 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
516 -> 525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
535 -> 549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
562 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
607 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
628 -> 638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
647 -> 659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
659 -> 675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
675 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
686 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
700 -> 722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
744 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
747 -> 764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
764 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
783 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
797 -> 810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
830 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
833 -> 851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
851 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
857 -> 870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
870 -> 884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
884 -> 897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
897 -> 915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
935 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
952 -> 964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
964 -> 980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
980 -> 991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
991 -> 1005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1045 -> 1051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1051 -> 1060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1065 -> 1071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1071 -> 1079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1088 -> 1097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1110 -> 1124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1124 -> 1133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1142 -> 1158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1158 -> 1168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1168 -> 1178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1178 -> 1191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1191 -> 1200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1225 -> 1231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1231 -> 1240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1245 -> 1251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1251 -> 1259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1264 -> 1274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1274 -> 1284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1288 -> 1298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1298 -> 1308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1308 -> 1324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1324 -> 1330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1346 -> 1352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1352 -> 1358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1367 -> 1373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1373 -> 1381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1381 -> 1395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1409 -> 1419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1426 -> 1436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1443 -> 1453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1453 -> 1463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1463 -> 1473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1473 -> 1480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1480 -> 1491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1510 -> 1518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1518 -> 1528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1528 -> 1542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1542 -> 1554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1554 -> 1572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1572 -> 1581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1581 -> 1590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
