digraph  {
13 [label="2_ function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n13-function_definition-3-6", method="mul(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a * b;\n31-expression_statement-4-4", method="mul(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(a == 0 || c / a == b);\n37-expression_statement-5-5", method="mul(uint a,uint b)", type_label=expression_statement];
50 [label="6_ function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n50-function_definition-7-10", method="div(uint a,uint b)", type_label=function_definition];
68 [label="7_ require(b > 0);\n68-expression_statement-8-8", method="div(uint a,uint b)", type_label=expression_statement];
75 [label="8_ c = a / b;\n75-expression_statement-9-9", method="div(uint a,uint b)", type_label=expression_statement];
81 [label="10_ function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n81-function_definition-11-14", method="sub(uint a,uint b)", type_label=function_definition];
99 [label="11_ require(b <= a);\n99-expression_statement-12-12", method="sub(uint a,uint b)", type_label=expression_statement];
106 [label="12_ c = a - b;\n106-expression_statement-13-13", method="sub(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n112-function_definition-15-18", method="add(uint a,uint b)", type_label=function_definition];
130 [label="15_ c = a + b;\n130-expression_statement-16-16", method="add(uint a,uint b)", type_label=expression_statement];
136 [label="16_ require(c >= a);\n136-expression_statement-17-17", method="add(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function totalSupply() public view returns (uint256);\n146-function_definition-21-21", method="totalSupply()", type_label=function_definition];
154 [label="21_ function balanceOf(address tokenOwner) public view returns (uint256 balance);\n154-function_definition-22-22", method="balanceOf(address tokenOwner)", type_label=function_definition];
167 [label="22_ function bug_unchk_send18() payable public{\n      msg.sender.transfer(1 ether);}\n167-function_definition-23-24", method="bug_unchk_send18()", type_label=function_definition];
172 [label="23_ msg.sender.transfer(1 ether);\n172-expression_statement-24-24", method="bug_unchk_send18()", type_label=expression_statement];
182 [label="24_ function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\n182-function_definition-25-25", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
199 [label="25_ function bug_unchk_send29() payable public{\n      msg.sender.transfer(1 ether);}\n199-function_definition-26-27", method="bug_unchk_send29()", type_label=function_definition];
204 [label="26_ msg.sender.transfer(1 ether);\n204-expression_statement-27-27", method="bug_unchk_send29()", type_label=expression_statement];
214 [label="27_ function transfer(address to, uint256 tokens) public returns (bool success);\n214-function_definition-28-28", method="transfer(address to,uint256 tokens)", type_label=function_definition];
230 [label="28_ function bug_unchk_send6() payable public{\n      msg.sender.transfer(1 ether);}\n230-function_definition-29-30", method="bug_unchk_send6()", type_label=function_definition];
235 [label="29_ msg.sender.transfer(1 ether);\n235-expression_statement-30-30", method="bug_unchk_send6()", type_label=expression_statement];
245 [label="30_ function approve(address spender, uint256 tokens) public returns (bool success);\n245-function_definition-31-31", method="approve(address spender,uint256 tokens)", type_label=function_definition];
261 [label="31_ function bug_unchk_send16() payable public{\n      msg.sender.transfer(1 ether);}\n261-function_definition-32-33", method="bug_unchk_send16()", type_label=function_definition];
266 [label="32_ msg.sender.transfer(1 ether);\n266-expression_statement-33-33", method="bug_unchk_send16()", type_label=expression_statement];
276 [label="33_ function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n276-function_definition-34-34", method="transferFrom(address from,address to,uint256 tokens)", type_label=function_definition];
296 [label="34_ function bug_unchk_send24() payable public{\n      msg.sender.transfer(1 ether);}\n296-function_definition-35-36", method="bug_unchk_send24()", type_label=function_definition];
301 [label="35_ msg.sender.transfer(1 ether);\n301-expression_statement-36-36", method="bug_unchk_send24()", type_label=expression_statement];
311 [label="36_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n311-function_definition-37-38", method="bug_unchk_send14()", type_label=function_definition];
316 [label="37_ msg.sender.transfer(1 ether);\n316-expression_statement-38-38", method="bug_unchk_send14()", type_label=expression_statement];
340 [label="39_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n340-function_definition-40-41", method="bug_unchk_send30()", type_label=function_definition];
345 [label="40_ msg.sender.transfer(1 ether);\n345-expression_statement-41-41", method="bug_unchk_send30()", type_label=expression_statement];
372 [label="44_ address payable public owner;\n372-new_variable-45-45", method="", type_label=new_variable];
377 [label="45_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n377-function_definition-46-47", method="bug_unchk_send8()", type_label=function_definition];
382 [label="46_ msg.sender.transfer(1 ether);\n382-expression_statement-47-47", method="bug_unchk_send8()", type_label=expression_statement];
404 [label="49_ owner = msg.sender;\n404-expression_statement-50-50", method="", type_label=expression_statement];
410 [label="51_ function bug_unchk_send5() payable public{\n      msg.sender.transfer(1 ether);}\n410-function_definition-52-53", method="bug_unchk_send5()", type_label=function_definition];
415 [label="52_ msg.sender.transfer(1 ether);\n415-expression_statement-53-53", method="bug_unchk_send5()", type_label=expression_statement];
425 [label="53_ modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n425-expression_statement-54-57", method="", type_label=expression_statement];
428 [label="54_ require(msg.sender == owner);\n428-expression_statement-55-55", method="", type_label=expression_statement];
437 [label="55_ _;\n437-expression_statement-56-56", method="", type_label=expression_statement];
439 [label="57_ function transferOwnership(address payable newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n439-function_definition-58-62", method="transferOwnership(address payable newOwner)", type_label=function_definition];
446 [label="57_ onlyOwner\n446-expression_statement-58-58", method="transferOwnership(address payable newOwner)", type_label=expression_statement];
449 [label="58_ require(newOwner != address(0));\n449-expression_statement-59-59", method="transferOwnership(address payable newOwner)", type_label=expression_statement];
464 [label="60_ owner = newOwner;\n464-expression_statement-61-61", method="transferOwnership(address payable newOwner)", type_label=expression_statement];
468 [label="62_ function bug_unchk_send15() payable public{\n      msg.sender.transfer(1 ether);}\n468-function_definition-63-64", method="bug_unchk_send15()", type_label=function_definition];
473 [label="63_ msg.sender.transfer(1 ether);\n473-expression_statement-64-64", method="bug_unchk_send15()", type_label=expression_statement];
497 [label="67_ mapping (address => uint256) balances;\n497-new_variable-68-68", method="", type_label=new_variable];
503 [label="68_ mapping (address => mapping (address => uint256)) allowed;\n503-new_variable-69-69", method="", type_label=new_variable];
511 [label="69_ string public name = \"Exclusive Platform\";\n511-new_variable-70-70", method="", type_label=new_variable];
518 [label="70_ string public symbol = \"XPL\";\n518-new_variable-71-71", method="", type_label=new_variable];
525 [label="71_ uint256 public decimals = 8;\n525-new_variable-72-72", method="", type_label=new_variable];
531 [label="72_ uint256 public _totalSupply;\n531-new_variable-73-73", method="", type_label=new_variable];
536 [label="73_ uint256 public XPLPerEther = 8000000e8;\n536-new_variable-74-74", method="", type_label=new_variable];
542 [label="74_ uint256 public minimumBuy = 1 ether / 100;\n542-new_variable-75-75", method="", type_label=new_variable];
551 [label="75_ bool public crowdsaleIsOn = true;\n551-new_variable-76-76", method="", type_label=new_variable];
558 [label="76_ modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n558-expression_statement-77-80", method="", type_label=expression_statement];
565 [label="77_ assert(msg.data.length >= size + 4);\n565-expression_statement-78-78", method="", type_label=expression_statement];
578 [label="78_ _;\n578-expression_statement-79-79", method="", type_label=expression_statement];
582 [label="81_ _totalSupply = 10000000000e8;\n582-expression_statement-82-82", method="", type_label=expression_statement];
586 [label="82_ balances[owner] = _totalSupply;\n586-expression_statement-83-83", method="", type_label=expression_statement];
602 [label="85_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n602-function_definition-86-87", method="bug_unchk_send28()", type_label=function_definition];
607 [label="86_ msg.sender.transfer(1 ether);\n607-expression_statement-87-87", method="bug_unchk_send28()", type_label=expression_statement];
617 [label="87_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n617-function_definition-88-90", method="totalSupply()", type_label=function_definition];
626 [label="88_ return _totalSupply;\n626-return-89-89", method="totalSupply()", type_label=return];
628 [label="90_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n628-function_definition-91-92", method="bug_unchk_send21()", type_label=function_definition];
633 [label="91_ msg.sender.transfer(1 ether);\n633-expression_statement-92-92", method="bug_unchk_send21()", type_label=expression_statement];
643 [label="92_ function updateXPLPerEther(uint _XPLPerEther) public onlyOwner {        \n        emit NewPrice(owner, XPLPerEther, _XPLPerEther);\n        XPLPerEther = _XPLPerEther;\n    }\n643-function_definition-93-96", method="updateXPLPerEther(uint _XPLPerEther)", type_label=function_definition];
650 [label="92_ onlyOwner\n650-expression_statement-93-93", method="updateXPLPerEther(uint _XPLPerEther)", type_label=expression_statement];
661 [label="94_ XPLPerEther = _XPLPerEther;\n661-expression_statement-95-95", method="updateXPLPerEther(uint _XPLPerEther)", type_label=expression_statement];
665 [label="96_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n665-function_definition-97-98", method="bug_unchk_send10()", type_label=function_definition];
670 [label="97_ msg.sender.transfer(1 ether);\n670-expression_statement-98-98", method="bug_unchk_send10()", type_label=expression_statement];
680 [label="98_ function switchCrowdsale() public onlyOwner {\n        crowdsaleIsOn = !(crowdsaleIsOn);\n    }\n680-function_definition-99-101", method="switchCrowdsale()", type_label=function_definition];
683 [label="98_ onlyOwner\n683-expression_statement-99-99", method="switchCrowdsale()", type_label=expression_statement];
686 [label="99_ crowdsaleIsOn = !(crowdsaleIsOn);\n686-expression_statement-100-100", method="switchCrowdsale()", type_label=expression_statement];
692 [label="101_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n692-function_definition-102-103", method="bug_unchk_send22()", type_label=function_definition];
697 [label="102_ msg.sender.transfer(1 ether);\n697-expression_statement-103-103", method="bug_unchk_send22()", type_label=expression_statement];
707 [label="103_ function getBonus(uint256 _amount) internal view returns (uint256) {\n        if (_amount >= XPLPerEther.mul(5)) {\n            return ((20 * _amount).div(100)).add(_amount);  \n        } else if (_amount >= XPLPerEther) {\n            return ((5 * _amount).div(100)).add(_amount);  \n        }\n        return _amount;\n    }\n707-function_definition-104-111", method="getBonus(uint256 _amount)", type_label=function_definition];
720 [label="104_ if\n720-if-105-109", method="getBonus(uint256 _amount)", type_label=if];
2421 [label="104_ end_if", method="getBonus(uint256 _amount)", type_label=end_if];
730 [label="105_ return ((20 * _amount).div(100)).add(_amount);\n730-return-106-106", method="getBonus(uint256 _amount)", type_label=return];
746 [label="106_ if__amount >= XPLPerEther\n746-if-107-109", method="getBonus(uint256 _amount)", type_label=if];
751 [label="107_ return ((5 * _amount).div(100)).add(_amount);\n751-return-108-108", method="getBonus(uint256 _amount)", type_label=return];
767 [label="109_ return _amount;\n767-return-110-110", method="getBonus(uint256 _amount)", type_label=return];
769 [label="111_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n769-function_definition-112-113", method="bug_unchk_send12()", type_label=function_definition];
774 [label="112_ msg.sender.transfer(1 ether);\n774-expression_statement-113-113", method="bug_unchk_send12()", type_label=expression_statement];
788 [label="114_ require(crowdsaleIsOn && msg.value >= minimumBuy);\n788-expression_statement-115-115", method="", type_label=expression_statement];
799 [label="115_ uint256 totalBuy =  (XPLPerEther.mul(msg.value)).div(1 ether);\n799-new_variable-116-116", method="", type_label=new_variable];
819 [label="116_ totalBuy = getBonus(totalBuy);\n819-expression_statement-117-117", method="", type_label=expression_statement];
826 [label="117_ doTransfer(owner, msg.sender, totalBuy);\n826-expression_statement-118-118", method="", type_label=expression_statement];
837 [label="119_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n837-function_definition-120-121", method="bug_unchk_send11()", type_label=function_definition];
842 [label="120_ msg.sender.transfer(1 ether);\n842-expression_statement-121-121", method="bug_unchk_send11()", type_label=expression_statement];
852 [label="121_ function distribute(address[] calldata _addresses, uint256 _amount) external {        \n        for (uint i = 0; i < _addresses.length; i++) {transfer(_addresses[i], _amount);}\n    }\n852-function_definition-122-124", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=function_definition];
865 [label="122_ for(i < _addresses.length;;i++)\n865-for-123-123", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=for];
2566 [label="122_ end_loop", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=end_loop];
878 [label="122_ i++\n878-expression_statement-123-123", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=expression_statement];
881 [label="122_ transfer(_addresses[i], _amount);\n881-expression_statement-123-123", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=expression_statement];
890 [label="124_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n890-function_definition-125-126", method="bug_unchk_send1()", type_label=function_definition];
895 [label="125_ msg.sender.transfer(1 ether);\n895-expression_statement-126-126", method="bug_unchk_send1()", type_label=expression_statement];
905 [label="126_ function distributeWithAmount(address[] calldata _addresses, uint256[] calldata _amounts) external {\n        require(_addresses.length == _amounts.length);\n        for (uint i = 0; i < _addresses.length; i++) {transfer(_addresses[i], _amounts[i]);}\n    }\n905-function_definition-127-130", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=function_definition];
919 [label="127_ require(_addresses.length == _amounts.length);\n919-expression_statement-128-128", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=expression_statement];
930 [label="128_ for(i < _addresses.length;;i++)\n930-for-129-129", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=for];
2631 [label="128_ end_loop", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=end_loop];
943 [label="128_ i++\n943-expression_statement-129-129", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=expression_statement];
946 [label="128_ transfer(_addresses[i], _amounts[i]);\n946-expression_statement-129-129", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=expression_statement];
957 [label="130_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n957-function_definition-131-132", method="bug_unchk_send2()", type_label=function_definition];
962 [label="131_ msg.sender.transfer(1 ether);\n962-expression_statement-132-132", method="bug_unchk_send2()", type_label=expression_statement];
972 [label="132_ function doTransfer(address _from, address _to, uint _amount) internal {\n        require((_to != address(0)));\n        require(_amount <= balances[_from]);\n        balances[_from] = balances[_from].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n    }\n972-function_definition-133-139", method="doTransfer(address _from,address _to,uint _amount)", type_label=function_definition];
988 [label="133_ require((_to != address(0)));\n988-expression_statement-134-134", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
998 [label="134_ require(_amount <= balances[_from]);\n998-expression_statement-135-135", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
1007 [label="135_ balances[_from] = balances[_from].sub(_amount);\n1007-expression_statement-136-136", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
1020 [label="136_ balances[_to] = balances[_to].add(_amount);\n1020-expression_statement-137-137", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
1041 [label="139_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n1041-function_definition-140-141", method="bug_unchk_send17()", type_label=function_definition];
1046 [label="140_ msg.sender.transfer(1 ether);\n1046-expression_statement-141-141", method="bug_unchk_send17()", type_label=expression_statement];
1056 [label="141_ function balanceOf(address _owner) view public returns (uint256) {\n        return balances[_owner];\n    }\n1056-function_definition-142-144", method="balanceOf(address _owner)", type_label=function_definition];
1069 [label="142_ return balances[_owner];\n1069-return-143-143", method="balanceOf(address _owner)", type_label=return];
1073 [label="144_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n1073-function_definition-145-146", method="bug_unchk_send3()", type_label=function_definition];
1078 [label="145_ msg.sender.transfer(1 ether);\n1078-expression_statement-146-146", method="bug_unchk_send3()", type_label=expression_statement];
1088 [label="146_ function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n        doTransfer(msg.sender, _to, _amount);\n        return true;\n    }\n1088-function_definition-147-150", method="transfer(address _to,uint256 _amount)", type_label=function_definition];
1098 [label="146_ onlyPayloadSize(2 * 32)\n1098-expression_statement-147-147", method="transfer(address _to,uint256 _amount)", type_label=expression_statement];
1111 [label="147_ doTransfer(msg.sender, _to, _amount);\n1111-expression_statement-148-148", method="transfer(address _to,uint256 _amount)", type_label=expression_statement];
1122 [label="148_ return true;\n1122-return-149-149", method="transfer(address _to,uint256 _amount)", type_label=return];
1125 [label="150_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n1125-function_definition-151-152", method="bug_unchk_send9()", type_label=function_definition];
1130 [label="151_ msg.sender.transfer(1 ether);\n1130-expression_statement-152-152", method="bug_unchk_send9()", type_label=expression_statement];
1140 [label="152_ function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n        require(allowed[_from][msg.sender] >= _amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        doTransfer(_from, _to, _amount);\n        return true;\n    }\n1140-function_definition-153-158", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=function_definition];
1154 [label="152_ onlyPayloadSize(3 * 32)\n1154-expression_statement-153-153", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
1167 [label="153_ require(allowed[_from][msg.sender] >= _amount);\n1167-expression_statement-154-154", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
1180 [label="154_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n1180-expression_statement-155-155", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
1201 [label="155_ doTransfer(_from, _to, _amount);\n1201-expression_statement-156-156", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
1210 [label="156_ return true;\n1210-return-157-157", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=return];
1213 [label="158_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n1213-function_definition-159-160", method="bug_unchk_send25()", type_label=function_definition];
1218 [label="159_ msg.sender.transfer(1 ether);\n1218-expression_statement-160-160", method="bug_unchk_send25()", type_label=expression_statement];
1228 [label="160_ function approve(address _spender, uint256 _amount) public returns (bool success) {\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n1228-function_definition-161-166", method="approve(address _spender,uint256 _amount)", type_label=function_definition];
1245 [label="161_ require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n1245-expression_statement-162-162", method="approve(address _spender,uint256 _amount)", type_label=expression_statement];
1264 [label="162_ allowed[msg.sender][_spender] = _amount;\n1264-expression_statement-163-163", method="approve(address _spender,uint256 _amount)", type_label=expression_statement];
1284 [label="164_ return true;\n1284-return-165-165", method="approve(address _spender,uint256 _amount)", type_label=return];
1287 [label="166_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n1287-function_definition-167-168", method="bug_unchk_send19()", type_label=function_definition];
1292 [label="167_ msg.sender.transfer(1 ether);\n1292-expression_statement-168-168", method="bug_unchk_send19()", type_label=expression_statement];
1302 [label="168_ function allowance(address _owner, address _spender) view public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n1302-function_definition-169-171", method="allowance(address _owner,address _spender)", type_label=function_definition];
1319 [label="169_ return allowed[_owner][_spender];\n1319-return-170-170", method="allowance(address _owner,address _spender)", type_label=return];
1325 [label="171_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n1325-function_definition-172-173", method="bug_unchk_send26()", type_label=function_definition];
1330 [label="172_ msg.sender.transfer(1 ether);\n1330-expression_statement-173-173", method="bug_unchk_send26()", type_label=expression_statement];
1340 [label="173_ function transferEther(address payable _receiver, uint256 _amount) public onlyOwner {\n        require(_amount <= address(this).balance);\n        emit TransferEther(address(this), _receiver, _amount);\n        _receiver.transfer(_amount);\n    }\n1340-function_definition-174-178", method="transferEther(address payable _receiver,uint256 _amount)", type_label=function_definition];
1351 [label="173_ onlyOwner\n1351-expression_statement-174-174", method="transferEther(address payable _receiver,uint256 _amount)", type_label=expression_statement];
1354 [label="174_ require(_amount <= address(this).balance);\n1354-expression_statement-175-175", method="transferEther(address payable _receiver,uint256 _amount)", type_label=expression_statement];
1375 [label="176_ _receiver.transfer(_amount);\n1375-expression_statement-177-177", method="transferEther(address payable _receiver,uint256 _amount)", type_label=expression_statement];
1382 [label="178_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n1382-function_definition-179-180", method="bug_unchk_send20()", type_label=function_definition];
1387 [label="179_ msg.sender.transfer(1 ether);\n1387-expression_statement-180-180", method="bug_unchk_send20()", type_label=expression_statement];
1397 [label="180_ function withdrawFund() onlyOwner public {\n        uint256 balance = address(this).balance;\n        owner.transfer(balance);\n    }\n1397-function_definition-181-184", method="withdrawFund()", type_label=function_definition];
1399 [label="180_ onlyOwner\n1399-expression_statement-181-181", method="withdrawFund()", type_label=expression_statement];
1403 [label="181_ uint256 balance = address(this).balance;\n1403-new_variable-182-182", method="withdrawFund()", type_label=new_variable];
1413 [label="182_ owner.transfer(balance);\n1413-expression_statement-183-183", method="withdrawFund()", type_label=expression_statement];
1420 [label="184_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n1420-function_definition-185-186", method="bug_unchk_send32()", type_label=function_definition];
1425 [label="185_ msg.sender.transfer(1 ether);\n1425-expression_statement-186-186", method="bug_unchk_send32()", type_label=expression_statement];
1435 [label="186_ function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        _totalSupply = _totalSupply.sub(_value);\n        emit Burn(burner, _value);\n    }\n1435-function_definition-187-193", method="burn(uint256 _value)", type_label=function_definition];
1441 [label="186_ onlyOwner\n1441-expression_statement-187-187", method="burn(uint256 _value)", type_label=expression_statement];
1445 [label="187_ require(_value <= balances[msg.sender]);\n1445-expression_statement-188-188", method="burn(uint256 _value)", type_label=expression_statement];
1456 [label="188_ address burner = msg.sender;\n1456-new_variable-189-189", method="burn(uint256 _value)", type_label=new_variable];
1464 [label="189_ balances[burner] = balances[burner].sub(_value);\n1464-expression_statement-190-190", method="burn(uint256 _value)", type_label=expression_statement];
1477 [label="190_ _totalSupply = _totalSupply.sub(_value);\n1477-expression_statement-191-191", method="burn(uint256 _value)", type_label=expression_statement];
1492 [label="193_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n1492-function_definition-194-195", method="bug_unchk_send4()", type_label=function_definition];
1497 [label="194_ msg.sender.transfer(1 ether);\n1497-expression_statement-195-195", method="bug_unchk_send4()", type_label=expression_statement];
1507 [label="195_ function getForeignTokenBalance(address tokenAddress, address who) view public returns (uint){\n        ERC20Interface token = ERC20Interface(tokenAddress);\n        uint bal = token.balanceOf(who);\n        return bal;\n    }\n1507-function_definition-196-200", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=function_definition];
1524 [label="196_ ERC20Interface token = ERC20Interface(tokenAddress);\n1524-new_variable-197-197", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=new_variable];
1534 [label="197_ uint bal = token.balanceOf(who);\n1534-new_variable-198-198", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=new_variable];
1545 [label="198_ return bal;\n1545-return-199-199", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=return];
1547 [label="200_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n1547-function_definition-201-202", method="bug_unchk_send7()", type_label=function_definition];
1552 [label="201_ msg.sender.transfer(1 ether);\n1552-expression_statement-202-202", method="bug_unchk_send7()", type_label=expression_statement];
1562 [label="202_ function withdrawForeignTokens(address tokenAddress) onlyOwner public returns (bool) {\n        ERC20Interface token = ERC20Interface(tokenAddress);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n1562-function_definition-203-207", method="withdrawForeignTokens(address tokenAddress)", type_label=function_definition];
1568 [label="202_ onlyOwner\n1568-expression_statement-203-203", method="withdrawForeignTokens(address tokenAddress)", type_label=expression_statement];
1576 [label="203_ ERC20Interface token = ERC20Interface(tokenAddress);\n1576-new_variable-204-204", method="withdrawForeignTokens(address tokenAddress)", type_label=new_variable];
1586 [label="204_ uint256 amount = token.balanceOf(address(this));\n1586-new_variable-205-205", method="withdrawForeignTokens(address tokenAddress)", type_label=new_variable];
1599 [label="205_ return token.transfer(owner, amount);\n1599-return-206-206", method="withdrawForeignTokens(address tokenAddress)", type_label=return];
1608 [label="207_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n1608-function_definition-208-209", method="bug_unchk_send23()", type_label=function_definition];
1613 [label="208_ msg.sender.transfer(1 ether);\n1613-expression_statement-209-209", method="bug_unchk_send23()", type_label=expression_statement];
1623 [label="209_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n1623-function_definition-210-211", method="bug_unchk_send27()", type_label=function_definition];
1628 [label="210_ msg.sender.transfer(1 ether);\n1628-expression_statement-211-211", method="bug_unchk_send27()", type_label=expression_statement];
1652 [label="212_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n1652-function_definition-213-214", method="bug_unchk_send31()", type_label=function_definition];
1657 [label="213_ msg.sender.transfer(1 ether);\n1657-expression_statement-214-214", method="bug_unchk_send31()", type_label=expression_statement];
1681 [label="215_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n1681-function_definition-216-217", method="bug_unchk_send13()", type_label=function_definition];
1686 [label="216_ msg.sender.transfer(1 ether);\n1686-expression_statement-217-217", method="bug_unchk_send13()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
50 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
167 -> 172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
296 -> 301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
311 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
340 -> 345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
503 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
511 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
536 -> 542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
542 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
565 -> 578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
626 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
628 -> 633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
692 -> 697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
720 -> 730  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
720 -> 746  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2421 -> 767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
730 -> 2421  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
730 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
746 -> 751  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
746 -> 2421  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
751 -> 2421  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
751 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
767 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
769 -> 774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
819 -> 826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
852 -> 865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
865 -> 881  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
865 -> 2566  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2566 -> 890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
878 -> 865  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
881 -> 878  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
890 -> 895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
905 -> 919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 930  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
930 -> 946  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
930 -> 2631  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2631 -> 957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 930  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
946 -> 943  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
957 -> 962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
972 -> 988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
988 -> 998  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
998 -> 1007  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1007 -> 1020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1041 -> 1046  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1056 -> 1069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1069 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1073 -> 1078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1088 -> 1111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1111 -> 1122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1122 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1125 -> 1130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1140 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1167 -> 1180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1180 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1201 -> 1210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1210 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1213 -> 1218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 1245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1245 -> 1264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1284 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1287 -> 1292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1302 -> 1319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1319 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1325 -> 1330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1340 -> 1354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1382 -> 1387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1397 -> 1403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1403 -> 1413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1420 -> 1425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1435 -> 1445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1445 -> 1456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1456 -> 1464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1464 -> 1477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1492 -> 1497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1507 -> 1524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1524 -> 1534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1534 -> 1545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1545 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1547 -> 1552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1562 -> 1576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1576 -> 1586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1586 -> 1599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1599 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1608 -> 1613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1623 -> 1628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1652 -> 1657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1681 -> 1686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
