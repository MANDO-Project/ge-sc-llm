digraph  {
12 [label="2_ mul\n12-function_definition-3-10", type_label=function_definition];
29 [label="3_ if_a == 0\n29-if-4-6", type_label=if];
657 [label="3_ end_if", type_label=end_if];
34 [label="4_ return 0;\n34-return-5-5", type_label=return];
36 [label="6_ uint256 c = a * b;\n36-new_variable-7-7", type_label=new_variable];
44 [label="7_ assert(c / a == b);\n44-expression_statement-8-8", type_label=expression_statement];
53 [label="8_ return c;\n53-return-9-9", type_label=return];
55 [label="10_ div\n55-function_definition-11-14", type_label=function_definition];
72 [label="11_ uint256 c = a / b;\n72-new_variable-12-12", type_label=new_variable];
80 [label="12_ return c;\n80-return-13-13", type_label=return];
82 [label="14_ sub\n82-function_definition-15-18", type_label=function_definition];
99 [label="15_ assert(b <= a);\n99-expression_statement-16-16", type_label=expression_statement];
106 [label="16_ return a - b;\n106-return-17-17", type_label=return];
110 [label="18_ add\n110-function_definition-19-23", type_label=function_definition];
127 [label="19_ uint256 c = a + b;\n127-new_variable-20-20", type_label=new_variable];
135 [label="20_ assert(c >= a);\n135-expression_statement-21-21", type_label=expression_statement];
142 [label="21_ return c;\n142-return-22-22", type_label=return];
147 [label="25_ balanceOf\n147-function_definition-26-26", type_label=function_definition];
159 [label="26_ transfer\n159-function_definition-27-27", type_label=function_definition];
174 [label="27_ transferFrom\n174-function_definition-28-28", type_label=function_definition];
193 [label="28_ approve\n193-function_definition-29-29", type_label=function_definition];
208 [label="29_ allowance\n208-function_definition-30-30", type_label=function_definition];
263 [label="35_ uint256 constant private MAX_UINT256 = 2**256 - 1;\n263-new_variable-36-36", type_label=new_variable];
273 [label="36_ mapping(address => uint256) balances;\n273-new_variable-37-37", type_label=new_variable];
279 [label="37_ mapping (address => mapping (address => uint256)) internal allowed;\n279-new_variable-38-38", type_label=new_variable];
288 [label="38_ transfer\n288-function_definition-39-47", type_label=function_definition];
304 [label="39_ require(_to != address(0));\n304-expression_statement-40-40", type_label=expression_statement];
313 [label="40_ require(_value >= 0);\n313-expression_statement-41-41", type_label=expression_statement];
320 [label="41_ require(_value <= balances[msg.sender]);\n320-expression_statement-42-42", type_label=expression_statement];
331 [label="42_ balances[msg.sender] = balances[msg.sender].sub(_value);\n331-expression_statement-43-43", type_label=expression_statement];
348 [label="43_ balances[_to] = balances[_to].add(_value);\n348-expression_statement-44-44", type_label=expression_statement];
371 [label="45_ return true;\n371-return-46-46", type_label=return];
374 [label="47_ balanceOf\n374-function_definition-48-50", type_label=function_definition];
387 [label="48_ return balances[_owner];\n387-return-49-49", type_label=return];
391 [label="50_ transferFrom\n391-function_definition-51-62", type_label=function_definition];
411 [label="51_ require(_to != address(0));\n411-expression_statement-52-52", type_label=expression_statement];
420 [label="52_ require(_value <= balances[_from]);\n420-expression_statement-53-53", type_label=expression_statement];
429 [label="53_ require(_value <= allowed[_from][msg.sender]);\n429-expression_statement-54-54", type_label=expression_statement];
442 [label="54_ balances[_from] = balances[_from].sub(_value);\n442-expression_statement-55-55", type_label=expression_statement];
455 [label="55_ balances[_to] = balances[_to].add(_value);\n455-expression_statement-56-56", type_label=expression_statement];
468 [label="56_ if_allowed[_from][msg.sender] < MAX_UINT256\n468-if-57-59", type_label=if];
1096 [label="56_ end_if", type_label=end_if];
479 [label="57_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n479-expression_statement-58-58", type_label=expression_statement];
508 [label="60_ return true;\n508-return-61-61", type_label=return];
511 [label="62_ approve\n511-function_definition-63-67", type_label=function_definition];
527 [label="63_ allowed[msg.sender][_spender] = _value;\n527-expression_statement-64-64", type_label=expression_statement];
547 [label="65_ return true;\n547-return-66-66", type_label=return];
550 [label="67_ allowance\n550-function_definition-68-70", type_label=function_definition];
567 [label="68_ return allowed[_owner][_spender];\n567-return-69-69", type_label=return];
579 [label="72_ string public constant name = \"AICoinToken\";\n579-new_variable-73-73", type_label=new_variable];
586 [label="73_ string public constant symbol = \"AI\";\n586-new_variable-74-74", type_label=new_variable];
593 [label="74_ uint8 public constant decimals = 18;\n593-new_variable-75-75", type_label=new_variable];
599 [label="75_ uint256 public totalSupply = 100*10**26;\n599-new_variable-76-76", type_label=new_variable];
609 [label="76_ AICoinToken\n609-function_definition-77-80", type_label=function_definition];
613 [label="77_ balances[msg.sender] = totalSupply;\n613-expression_statement-78-78", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
500;
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
29 -> 657  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
657 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 657  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
34 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
36 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
55 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
82 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
110 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
135 -> 142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
142 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
263 -> 273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
273 -> 279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
288 -> 304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
313 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
374 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
391 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
429 -> 442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
442 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
455 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 479  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
468 -> 1096  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1096 -> 500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 1096  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
508 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
511 -> 527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
547 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
550 -> 567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
579 -> 586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
586 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
609 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
