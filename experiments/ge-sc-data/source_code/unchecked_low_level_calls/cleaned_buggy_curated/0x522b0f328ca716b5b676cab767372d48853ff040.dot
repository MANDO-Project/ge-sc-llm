digraph  {
12 [label="2_ totalSupply\n12-function_definition-3-3", type_label=function_definition];
20 [label="3_ balanceOf\n20-function_definition-4-4", type_label=function_definition];
32 [label="4_ transfer\n32-function_definition-5-5", type_label=function_definition];
64 [label="8_ mul\n64-function_definition-9-16", type_label=function_definition];
82 [label="9_ if_a == 0\n82-if-10-12", type_label=if];
929 [label="9_ end_if", type_label=end_if];
87 [label="10_ return 0;\n87-return-11-11", type_label=return];
89 [label="12_ c = a * b;\n89-expression_statement-13-13", type_label=expression_statement];
95 [label="13_ assert(c / a == b);\n95-expression_statement-14-14", type_label=expression_statement];
104 [label="14_ return c;\n104-return-15-15", type_label=return];
106 [label="16_ div\n106-function_definition-17-19", type_label=function_definition];
123 [label="17_ return a / b;\n123-return-18-18", type_label=return];
127 [label="19_ sub\n127-function_definition-20-23", type_label=function_definition];
144 [label="20_ assert(b <= a);\n144-expression_statement-21-21", type_label=expression_statement];
151 [label="21_ return a - b;\n151-return-22-22", type_label=return];
155 [label="23_ add\n155-function_definition-24-28", type_label=function_definition];
173 [label="24_ c = a + b;\n173-expression_statement-25-25", type_label=expression_statement];
179 [label="25_ assert(c >= a);\n179-expression_statement-26-26", type_label=expression_statement];
186 [label="26_ return c;\n186-return-27-27", type_label=return];
191 [label="30_ transfer\n191-function_definition-31-31", type_label=function_definition];
211 [label="31_ transfer\n211-function_definition-32-32", type_label=function_definition];
256 [label="35_ tokenFallback\n256-function_definition-36-36", type_label=function_definition];
284 [label="39_ string public name;\n284-new_variable-40-40", type_label=new_variable];
289 [label="40_ string public symbol;\n289-new_variable-41-41", type_label=new_variable];
294 [label="41_ uint8 public decimals;\n294-new_variable-42-42", type_label=new_variable];
299 [label="42_ uint256 public totalSupply;\n299-new_variable-43-43", type_label=new_variable];
304 [label="43_ mapping(address => uint256) public balances;\n304-new_variable-44-44", type_label=new_variable];
311 [label="44_ name\n311-function_definition-45-47", type_label=function_definition];
321 [label="45_ return name;\n321-return-46-46", type_label=return];
323 [label="47_ symbol\n323-function_definition-48-50", type_label=function_definition];
333 [label="48_ return symbol;\n333-return-49-49", type_label=return];
335 [label="50_ decimals\n335-function_definition-51-53", type_label=function_definition];
345 [label="51_ return decimals;\n345-return-52-52", type_label=return];
347 [label="53_ totalSupply\n347-function_definition-54-56", type_label=function_definition];
357 [label="54_ return totalSupply;\n357-return-55-55", type_label=return];
359 [label="56_ balanceOf\n359-function_definition-57-59", type_label=function_definition];
373 [label="57_ return balances[_owner];\n373-return-58-58", type_label=return];
377 [label="59_ PGGamePlatform\n377-function_definition-60-66", type_label=function_definition];
381 [label="60_ name = \"PG Game Platform\";\n381-expression_statement-61-61", type_label=expression_statement];
386 [label="61_ symbol = \"PGG\";\n386-expression_statement-62-62", type_label=expression_statement];
391 [label="62_ decimals = 4;\n391-expression_statement-63-63", type_label=expression_statement];
395 [label="63_ totalSupply = 10000000000 * 10 ** uint(decimals);\n395-expression_statement-64-64", type_label=expression_statement];
405 [label="64_ balances[msg.sender] = totalSupply;\n405-expression_statement-65-65", type_label=expression_statement];
413 [label="66_ transfer\n413-function_definition-67-79", type_label=function_definition];
438 [label="67_ if\n438-if-68-78", type_label=if];
1285 [label="67_ end_if", type_label=end_if];
444 [label="68_ if_balanceOf(msg.sender) < _value\n444-if-69-70", type_label=if];
1291 [label="68_ end_if", type_label=end_if];
455 [label="70_ balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n455-expression_statement-71-71", type_label=expression_statement];
473 [label="71_ balances[_to] = balanceOf(_to).add(_value);\n473-expression_statement-72-72", type_label=expression_statement];
487 [label="72_ assert(_to.call.value(0)(bytes4(keccak256(_fallback)), msg.sender, _value, _data));\n487-expression_statement-73-73", type_label=expression_statement];
515 [label="73_ Transfer(msg.sender, _to, _value, _data);\n515-expression_statement-74-74", type_label=expression_statement];
528 [label="74_ return true;\n528-return-75-75", type_label=return];
532 [label="76_ return transferToAddress(_to, _value, _data);\n532-return-77-77", type_label=return];
541 [label="79_ transfer\n541-function_definition-80-86", type_label=function_definition];
562 [label="80_ if\n562-if-81-85", type_label=if];
1409 [label="80_ end_if", type_label=end_if];
568 [label="81_ return transferToContract(_to, _value, _data);\n568-return-82-82", type_label=return];
578 [label="83_ return transferToAddress(_to, _value, _data);\n578-return-84-84", type_label=return];
587 [label="86_ transfer\n587-function_definition-87-94", type_label=function_definition];
604 [label="87_ bytes memory empty;\n604-new_variable-88-88", type_label=new_variable];
609 [label="88_ if\n609-if-89-93", type_label=if];
1456 [label="88_ end_if", type_label=end_if];
615 [label="89_ return transferToContract(_to, _value, empty);\n615-return-90-90", type_label=return];
625 [label="91_ return transferToAddress(_to, _value, empty);\n625-return-92-92", type_label=return];
634 [label="94_ isContract\n634-function_definition-95-101", type_label=function_definition];
648 [label="95_ uint length;\n648-new_variable-96-96", type_label=new_variable];
663 [label="99_ return (length > 0);\n663-return-100-100", type_label=return];
668 [label="101_ transferToAddress\n668-function_definition-102-109", type_label=function_definition];
689 [label="102_ if_balanceOf(msg.sender) < _value\n689-if-103-104", type_label=if];
1536 [label="102_ end_if", type_label=end_if];
700 [label="104_ balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n700-expression_statement-105-105", type_label=expression_statement];
718 [label="105_ balances[_to] = balanceOf(_to).add(_value);\n718-expression_statement-106-106", type_label=expression_statement];
732 [label="106_ Transfer(msg.sender, _to, _value, _data);\n732-expression_statement-107-107", type_label=expression_statement];
745 [label="107_ return true;\n745-return-108-108", type_label=return];
748 [label="109_ transferToContract\n748-function_definition-110-120", type_label=function_definition];
769 [label="110_ if_balanceOf(msg.sender) < _value\n769-if-111-113", type_label=if];
1616 [label="110_ end_if", type_label=end_if];
781 [label="113_ balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n781-expression_statement-114-114", type_label=expression_statement];
799 [label="114_ balances[_to] = balanceOf(_to).add(_value);\n799-expression_statement-115-115", type_label=expression_statement];
813 [label="115_ ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n813-new_variable-116-116", type_label=new_variable];
823 [label="116_ receiver.tokenFallback(msg.sender, _value, _data);\n823-expression_statement-117-117", type_label=expression_statement];
836 [label="117_ Transfer(msg.sender, _to, _value, _data);\n836-expression_statement-118-118", type_label=expression_statement];
849 [label="118_ return true;\n849-return-119-119", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
64 -> 82  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
82 -> 87  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
82 -> 929  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
929 -> 89  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 929  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
87 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
89 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
106 -> 123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
123 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
127 -> 144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
144 -> 151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
155 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
186 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
284 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
299 -> 304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
311 -> 321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
323 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
335 -> 345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
347 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
359 -> 373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
373 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
377 -> 381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
381 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
413 -> 438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
438 -> 444  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
438 -> 532  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1285 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 1291  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
455 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 1285  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
528 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
532 -> 1285  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
532 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
541 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
562 -> 568  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
562 -> 578  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1409 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 1409  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
568 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
578 -> 1409  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
578 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
587 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
609 -> 615  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
609 -> 625  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1456 -> 634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
615 -> 1456  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
615 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
625 -> 1456  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
625 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
634 -> 648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
668 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
689 -> 1536  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
700 -> 718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
718 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
732 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
745 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
748 -> 769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
769 -> 1616  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
781 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
813 -> 823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
823 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
