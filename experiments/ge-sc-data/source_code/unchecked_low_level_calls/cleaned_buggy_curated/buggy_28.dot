digraph  {
13 [label="2_ function totalSupply() external view returns (uint256);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ function balanceOf(address who) external view returns (uint256);\n21-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
33 [label="4_ function allowance(address owner, address spender) external view returns (uint256);\n33-function_definition-5-5", method="allowance(address owner,address spender)", type_label=function_definition];
49 [label="5_ function transfer(address to, uint256 value) external returns (bool);\n49-function_definition-6-6", method="transfer(address to,uint256 value)", type_label=function_definition];
64 [label="6_ function approve(address spender, uint256 value) external returns (bool);\n64-function_definition-7-7", method="approve(address spender,uint256 value)", type_label=function_definition];
79 [label="7_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n79-function_definition-8-8", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
129 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n129-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
146 [label="13_ if_a == 0\n146-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
1796 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
151 [label="14_ return 0;\n151-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
153 [label="16_ uint256 c = a * b;\n153-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
161 [label="17_ assert(c / a == b);\n161-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
170 [label="18_ return c;\n170-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
172 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n172-function_definition-21-24", method="div(uint256 a,uint256 b)", type_label=function_definition];
189 [label="21_ uint256 c = a / b;\n189-new_variable-22-22", method="div(uint256 a,uint256 b)", type_label=new_variable];
197 [label="22_ return c;\n197-return-23-23", method="div(uint256 a,uint256 b)", type_label=return];
199 [label="24_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n199-function_definition-25-28", method="sub(uint256 a,uint256 b)", type_label=function_definition];
216 [label="25_ assert(b <= a);\n216-expression_statement-26-26", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
223 [label="26_ return a - b;\n223-return-27-27", method="sub(uint256 a,uint256 b)", type_label=return];
227 [label="28_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n227-function_definition-29-33", method="add(uint256 a,uint256 b)", type_label=function_definition];
244 [label="29_ uint256 c = a + b;\n244-new_variable-30-30", method="add(uint256 a,uint256 b)", type_label=new_variable];
252 [label="30_ assert(c >= a);\n252-expression_statement-31-31", method="add(uint256 a,uint256 b)", type_label=expression_statement];
259 [label="31_ return c;\n259-return-32-32", method="add(uint256 a,uint256 b)", type_label=return];
261 [label="33_ function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n261-function_definition-34-38", method="ceil(uint256 a,uint256 m)", type_label=function_definition];
278 [label="34_ uint256 c = add(a,m);\n278-new_variable-35-35", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
289 [label="35_ uint256 d = sub(c,1);\n289-new_variable-36-36", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
300 [label="36_ return mul(div(d,m),m);\n300-return-37-37", method="ceil(uint256 a,uint256 m)", type_label=return];
318 [label="40_ function bug_unchk_send16() payable public{\n      msg.sender.transfer(1 ether);}\n318-function_definition-41-42", method="bug_unchk_send16()", type_label=function_definition];
323 [label="41_ msg.sender.transfer(1 ether);\n323-expression_statement-42-42", method="bug_unchk_send16()", type_label=expression_statement];
333 [label="42_ string private _name;\n333-new_variable-43-43", method="", type_label=new_variable];
338 [label="43_ function bug_unchk_send24() payable public{\n      msg.sender.transfer(1 ether);}\n338-function_definition-44-45", method="bug_unchk_send24()", type_label=function_definition];
343 [label="44_ msg.sender.transfer(1 ether);\n343-expression_statement-45-45", method="bug_unchk_send24()", type_label=expression_statement];
353 [label="45_ string private _symbol;\n353-new_variable-46-46", method="", type_label=new_variable];
358 [label="46_ function bug_unchk_send5() payable public{\n      msg.sender.transfer(1 ether);}\n358-function_definition-47-48", method="bug_unchk_send5()", type_label=function_definition];
363 [label="47_ msg.sender.transfer(1 ether);\n363-expression_statement-48-48", method="bug_unchk_send5()", type_label=expression_statement];
373 [label="48_ uint8 private _decimals;\n373-new_variable-49-49", method="", type_label=new_variable];
392 [label="50_ _name = name;\n392-expression_statement-51-51", method="", type_label=expression_statement];
396 [label="51_ _symbol = symbol;\n396-expression_statement-52-52", method="", type_label=expression_statement];
400 [label="52_ _decimals = decimals;\n400-expression_statement-53-53", method="", type_label=expression_statement];
404 [label="54_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n404-function_definition-55-56", method="bug_unchk_send1()", type_label=function_definition];
409 [label="55_ msg.sender.transfer(1 ether);\n409-expression_statement-56-56", method="bug_unchk_send1()", type_label=expression_statement];
419 [label="56_ function name() public view returns(string memory) {\n    return _name;\n  }\n419-function_definition-57-59", method="name()", type_label=function_definition];
428 [label="57_ return _name;\n428-return-58-58", method="name()", type_label=return];
430 [label="59_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n430-function_definition-60-61", method="bug_unchk_send2()", type_label=function_definition];
435 [label="60_ msg.sender.transfer(1 ether);\n435-expression_statement-61-61", method="bug_unchk_send2()", type_label=expression_statement];
445 [label="61_ function symbol() public view returns(string memory) {\n    return _symbol;\n  }\n445-function_definition-62-64", method="symbol()", type_label=function_definition];
454 [label="62_ return _symbol;\n454-return-63-63", method="symbol()", type_label=return];
456 [label="64_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n456-function_definition-65-66", method="bug_unchk_send17()", type_label=function_definition];
461 [label="65_ msg.sender.transfer(1 ether);\n461-expression_statement-66-66", method="bug_unchk_send17()", type_label=expression_statement];
471 [label="66_ function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n471-function_definition-67-69", method="decimals()", type_label=function_definition];
480 [label="67_ return _decimals;\n480-return-68-68", method="decimals()", type_label=return];
482 [label="69_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n482-function_definition-70-71", method="bug_unchk_send3()", type_label=function_definition];
487 [label="70_ msg.sender.transfer(1 ether);\n487-expression_statement-71-71", method="bug_unchk_send3()", type_label=expression_statement];
508 [label="74_ function bug_unchk_send15() payable public{\n      msg.sender.transfer(1 ether);}\n508-function_definition-75-76", method="bug_unchk_send15()", type_label=function_definition];
513 [label="75_ msg.sender.transfer(1 ether);\n513-expression_statement-76-76", method="bug_unchk_send15()", type_label=expression_statement];
523 [label="76_ mapping (address => uint256) private _balances;\n523-new_variable-77-77", method="", type_label=new_variable];
530 [label="77_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n530-function_definition-78-79", method="bug_unchk_send28()", type_label=function_definition];
535 [label="78_ msg.sender.transfer(1 ether);\n535-expression_statement-79-79", method="bug_unchk_send28()", type_label=expression_statement];
545 [label="79_ mapping (address => mapping (address => uint256)) private _allowed;\n545-new_variable-80-80", method="", type_label=new_variable];
554 [label="80_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n554-function_definition-81-82", method="bug_unchk_send21()", type_label=function_definition];
559 [label="81_ msg.sender.transfer(1 ether);\n559-expression_statement-82-82", method="bug_unchk_send21()", type_label=expression_statement];
569 [label="82_ string constant tokenName = \"HYDROGEN\";\n569-new_variable-83-83", method="", type_label=new_variable];
575 [label="83_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n575-function_definition-84-85", method="bug_unchk_send10()", type_label=function_definition];
580 [label="84_ msg.sender.transfer(1 ether);\n580-expression_statement-85-85", method="bug_unchk_send10()", type_label=expression_statement];
590 [label="85_ string constant tokenSymbol = \"HGN\";\n590-new_variable-86-86", method="", type_label=new_variable];
596 [label="86_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n596-function_definition-87-88", method="bug_unchk_send22()", type_label=function_definition];
601 [label="87_ msg.sender.transfer(1 ether);\n601-expression_statement-88-88", method="bug_unchk_send22()", type_label=expression_statement];
611 [label="88_ uint8  constant tokenDecimals = 4;\n611-new_variable-89-89", method="", type_label=new_variable];
616 [label="89_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n616-function_definition-90-91", method="bug_unchk_send12()", type_label=function_definition];
621 [label="90_ msg.sender.transfer(1 ether);\n621-expression_statement-91-91", method="bug_unchk_send12()", type_label=expression_statement];
631 [label="91_ uint256 _totalSupply =8000000000;\n631-new_variable-92-92", method="", type_label=new_variable];
636 [label="92_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n636-function_definition-93-94", method="bug_unchk_send11()", type_label=function_definition];
641 [label="93_ msg.sender.transfer(1 ether);\n641-expression_statement-94-94", method="bug_unchk_send11()", type_label=expression_statement];
651 [label="94_ uint256 public basePercent = 100;\n651-new_variable-95-95", method="", type_label=new_variable];
658 [label="95_ ERC20Detailed(tokenName, tokenSymbol, tokenDecimals)\n658-expression_statement-96-96", method="", type_label=expression_statement];
667 [label="96_ _mint(msg.sender, _totalSupply);\n667-expression_statement-97-97", method="", type_label=expression_statement];
676 [label="98_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n676-function_definition-99-100", method="bug_unchk_send9()", type_label=function_definition];
681 [label="99_ msg.sender.transfer(1 ether);\n681-expression_statement-100-100", method="bug_unchk_send9()", type_label=expression_statement];
691 [label="100_ function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n691-function_definition-101-103", method="totalSupply()", type_label=function_definition];
700 [label="101_ return _totalSupply;\n700-return-102-102", method="totalSupply()", type_label=return];
702 [label="103_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n702-function_definition-104-105", method="bug_unchk_send25()", type_label=function_definition];
707 [label="104_ msg.sender.transfer(1 ether);\n707-expression_statement-105-105", method="bug_unchk_send25()", type_label=expression_statement];
717 [label="105_ function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n717-function_definition-106-108", method="balanceOf(address owner)", type_label=function_definition];
730 [label="106_ return _balances[owner];\n730-return-107-107", method="balanceOf(address owner)", type_label=return];
734 [label="108_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n734-function_definition-109-110", method="bug_unchk_send19()", type_label=function_definition];
739 [label="109_ msg.sender.transfer(1 ether);\n739-expression_statement-110-110", method="bug_unchk_send19()", type_label=expression_statement];
749 [label="110_ function allowance(address owner, address spender) public view returns (uint256) {\n    return _allowed[owner][spender];\n  }\n749-function_definition-111-113", method="allowance(address owner,address spender)", type_label=function_definition];
766 [label="111_ return _allowed[owner][spender];\n766-return-112-112", method="allowance(address owner,address spender)", type_label=return];
772 [label="113_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n772-function_definition-114-115", method="bug_unchk_send26()", type_label=function_definition];
777 [label="114_ msg.sender.transfer(1 ether);\n777-expression_statement-115-115", method="bug_unchk_send26()", type_label=expression_statement];
787 [label="115_ function findtwoPercent(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 twoPercent = roundValue.mul(basePercent).div(5000);\n    return twoPercent;\n  }\n787-function_definition-116-120", method="findtwoPercent(uint256 value)", type_label=function_definition];
800 [label="116_ uint256 roundValue = value.ceil(basePercent);\n800-new_variable-117-117", method="findtwoPercent(uint256 value)", type_label=new_variable];
811 [label="117_ uint256 twoPercent = roundValue.mul(basePercent).div(5000);\n811-new_variable-118-118", method="findtwoPercent(uint256 value)", type_label=new_variable];
827 [label="118_ return twoPercent;\n827-return-119-119", method="findtwoPercent(uint256 value)", type_label=return];
829 [label="120_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n829-function_definition-121-122", method="bug_unchk_send20()", type_label=function_definition];
834 [label="121_ msg.sender.transfer(1 ether);\n834-expression_statement-122-122", method="bug_unchk_send20()", type_label=expression_statement];
844 [label="122_ function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n    uint256 tokensToBurn = findtwoPercent(value);\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\n    _balances[to] = _balances[to].add(tokensToTransfer);\n    _totalSupply = _totalSupply.sub(tokensToBurn);\n    emit Transfer(msg.sender, to, tokensToTransfer);\n    emit Transfer(msg.sender, address(0), tokensToBurn);\n    return true;\n  }\n844-function_definition-123-134", method="transfer(address to,uint256 value)", type_label=function_definition];
860 [label="123_ require(value <= _balances[msg.sender]);\n860-expression_statement-124-124", method="transfer(address to,uint256 value)", type_label=expression_statement];
871 [label="124_ require(to != address(0));\n871-expression_statement-125-125", method="transfer(address to,uint256 value)", type_label=expression_statement];
880 [label="125_ uint256 tokensToBurn = findtwoPercent(value);\n880-new_variable-126-126", method="transfer(address to,uint256 value)", type_label=new_variable];
889 [label="126_ uint256 tokensToTransfer = value.sub(tokensToBurn);\n889-new_variable-127-127", method="transfer(address to,uint256 value)", type_label=new_variable];
900 [label="127_ _balances[msg.sender] = _balances[msg.sender].sub(value);\n900-expression_statement-128-128", method="transfer(address to,uint256 value)", type_label=expression_statement];
917 [label="128_ _balances[to] = _balances[to].add(tokensToTransfer);\n917-expression_statement-129-129", method="transfer(address to,uint256 value)", type_label=expression_statement];
930 [label="129_ _totalSupply = _totalSupply.sub(tokensToBurn);\n930-expression_statement-130-130", method="transfer(address to,uint256 value)", type_label=expression_statement];
961 [label="132_ return true;\n961-return-133-133", method="transfer(address to,uint256 value)", type_label=return];
964 [label="134_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n964-function_definition-135-136", method="bug_unchk_send32()", type_label=function_definition];
969 [label="135_ msg.sender.transfer(1 ether);\n969-expression_statement-136-136", method="bug_unchk_send32()", type_label=expression_statement];
979 [label="136_ function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n    for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }\n  }\n979-function_definition-137-141", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=function_definition];
993 [label="137_ for(i < receivers.length;;i++)\n993-for-138-140", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=for];
2643 [label="137_ end_loop", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=end_loop];
1006 [label="137_ i++\n1006-expression_statement-138-138", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1009 [label="138_ transfer(receivers[i], amounts[i]);\n1009-expression_statement-139-139", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1020 [label="141_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n1020-function_definition-142-143", method="bug_unchk_send4()", type_label=function_definition];
1025 [label="142_ msg.sender.transfer(1 ether);\n1025-expression_statement-143-143", method="bug_unchk_send4()", type_label=expression_statement];
1035 [label="143_ function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n1035-function_definition-144-149", method="approve(address spender,uint256 value)", type_label=function_definition];
1051 [label="144_ require(spender != address(0));\n1051-expression_statement-145-145", method="approve(address spender,uint256 value)", type_label=expression_statement];
1060 [label="145_ _allowed[msg.sender][spender] = value;\n1060-expression_statement-146-146", method="approve(address spender,uint256 value)", type_label=expression_statement];
1080 [label="147_ return true;\n1080-return-148-148", method="approve(address spender,uint256 value)", type_label=return];
1083 [label="149_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n1083-function_definition-150-151", method="bug_unchk_send7()", type_label=function_definition];
1088 [label="150_ msg.sender.transfer(1 ether);\n1088-expression_statement-151-151", method="bug_unchk_send7()", type_label=expression_statement];
1098 [label="151_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n    _balances[from] = _balances[from].sub(value);\n    uint256 tokensToBurn = findtwoPercent(value);\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\n    _balances[to] = _balances[to].add(tokensToTransfer);\n    _totalSupply = _totalSupply.sub(tokensToBurn);\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    emit Transfer(from, to, tokensToTransfer);\n    emit Transfer(from, address(0), tokensToBurn);\n    return true;\n  }\n1098-function_definition-152-165", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
1118 [label="152_ require(value <= _balances[from]);\n1118-expression_statement-153-153", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1127 [label="153_ require(value <= _allowed[from][msg.sender]);\n1127-expression_statement-154-154", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1140 [label="154_ require(to != address(0));\n1140-expression_statement-155-155", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1149 [label="155_ _balances[from] = _balances[from].sub(value);\n1149-expression_statement-156-156", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1162 [label="156_ uint256 tokensToBurn = findtwoPercent(value);\n1162-new_variable-157-157", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
1171 [label="157_ uint256 tokensToTransfer = value.sub(tokensToBurn);\n1171-new_variable-158-158", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
1182 [label="158_ _balances[to] = _balances[to].add(tokensToTransfer);\n1182-expression_statement-159-159", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1195 [label="159_ _totalSupply = _totalSupply.sub(tokensToBurn);\n1195-expression_statement-160-160", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1204 [label="160_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n1204-expression_statement-161-161", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1243 [label="163_ return true;\n1243-return-164-164", method="transferFrom(address from,address to,uint256 value)", type_label=return];
1246 [label="165_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n1246-function_definition-166-167", method="bug_unchk_send23()", type_label=function_definition];
1251 [label="166_ msg.sender.transfer(1 ether);\n1251-expression_statement-167-167", method="bug_unchk_send23()", type_label=expression_statement];
1261 [label="167_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n1261-function_definition-168-173", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
1277 [label="168_ require(spender != address(0));\n1277-expression_statement-169-169", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
1286 [label="169_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n1286-expression_statement-170-170", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
1324 [label="171_ return true;\n1324-return-172-172", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
1327 [label="173_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n1327-function_definition-174-175", method="bug_unchk_send14()", type_label=function_definition];
1332 [label="174_ msg.sender.transfer(1 ether);\n1332-expression_statement-175-175", method="bug_unchk_send14()", type_label=expression_statement];
1342 [label="175_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n1342-function_definition-176-181", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
1358 [label="176_ require(spender != address(0));\n1358-expression_statement-177-177", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
1367 [label="177_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n1367-expression_statement-178-178", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
1405 [label="179_ return true;\n1405-return-180-180", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
1408 [label="181_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n1408-function_definition-182-183", method="bug_unchk_send30()", type_label=function_definition];
1413 [label="182_ msg.sender.transfer(1 ether);\n1413-expression_statement-183-183", method="bug_unchk_send30()", type_label=expression_statement];
1423 [label="183_ function _mint(address account, uint256 amount) internal {\n    require(amount != 0);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n1423-function_definition-184-188", method="_mint(address account,uint256 amount)", type_label=function_definition];
1435 [label="184_ require(amount != 0);\n1435-expression_statement-185-185", method="_mint(address account,uint256 amount)", type_label=expression_statement];
1442 [label="185_ _balances[account] = _balances[account].add(amount);\n1442-expression_statement-186-186", method="_mint(address account,uint256 amount)", type_label=expression_statement];
1465 [label="188_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n1465-function_definition-189-190", method="bug_unchk_send8()", type_label=function_definition];
1470 [label="189_ msg.sender.transfer(1 ether);\n1470-expression_statement-190-190", method="bug_unchk_send8()", type_label=expression_statement];
1480 [label="190_ function burn(uint256 amount) external {\n    _burn(msg.sender, amount);\n  }\n1480-function_definition-191-193", method="burn(uint256 amount)", type_label=function_definition];
1488 [label="191_ _burn(msg.sender, amount);\n1488-expression_statement-192-192", method="burn(uint256 amount)", type_label=expression_statement];
1497 [label="193_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n1497-function_definition-194-195", method="bug_unchk_send27()", type_label=function_definition];
1502 [label="194_ msg.sender.transfer(1 ether);\n1502-expression_statement-195-195", method="bug_unchk_send27()", type_label=expression_statement];
1512 [label="195_ function _burn(address account, uint256 amount) internal {\n    require(amount != 0);\n    require(amount <= _balances[account]);\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n1512-function_definition-196-202", method="_burn(address account,uint256 amount)", type_label=function_definition];
1524 [label="196_ require(amount != 0);\n1524-expression_statement-197-197", method="_burn(address account,uint256 amount)", type_label=expression_statement];
1531 [label="197_ require(amount <= _balances[account]);\n1531-expression_statement-198-198", method="_burn(address account,uint256 amount)", type_label=expression_statement];
1540 [label="198_ _totalSupply = _totalSupply.sub(amount);\n1540-expression_statement-199-199", method="_burn(address account,uint256 amount)", type_label=expression_statement];
1549 [label="199_ _balances[account] = _balances[account].sub(amount);\n1549-expression_statement-200-200", method="_burn(address account,uint256 amount)", type_label=expression_statement];
1572 [label="202_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n1572-function_definition-203-204", method="bug_unchk_send31()", type_label=function_definition];
1577 [label="203_ msg.sender.transfer(1 ether);\n1577-expression_statement-204-204", method="bug_unchk_send31()", type_label=expression_statement];
1587 [label="204_ function burnFrom(address account, uint256 amount) external {\n    require(amount <= _allowed[account][msg.sender]);\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n    _burn(account, amount);\n  }\n1587-function_definition-205-209", method="burnFrom(address account,uint256 amount)", type_label=function_definition];
1599 [label="205_ require(amount <= _allowed[account][msg.sender]);\n1599-expression_statement-206-206", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
1612 [label="206_ _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n1612-expression_statement-207-207", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
1633 [label="207_ _burn(account, amount);\n1633-expression_statement-208-208", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
1640 [label="209_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n1640-function_definition-210-211", method="bug_unchk_send13()", type_label=function_definition];
1645 [label="210_ msg.sender.transfer(1 ether);\n1645-expression_statement-211-211", method="bug_unchk_send13()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
129 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
146 -> 1796  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1796 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 1796  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
153 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
172 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
199 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
227 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
261 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
318 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
338 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
358 -> 363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
392 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
404 -> 409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
430 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
454 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
456 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
482 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
508 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
530 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
554 -> 559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
575 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
616 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
636 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
676 -> 681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
691 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
700 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
702 -> 707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
717 -> 730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
730 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
734 -> 739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
749 -> 766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
766 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
772 -> 777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 800  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
800 -> 811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
811 -> 827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
827 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
829 -> 834  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
844 -> 860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
860 -> 871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
880 -> 889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
889 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
917 -> 930  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
961 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
964 -> 969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
979 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 1009  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
993 -> 2643  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2643 -> 1020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1006 -> 993  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1009 -> 1006  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1020 -> 1025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1035 -> 1051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1051 -> 1060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1080 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1083 -> 1088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1098 -> 1118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1118 -> 1127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1127 -> 1140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1140 -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1149 -> 1162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1162 -> 1171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1171 -> 1182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1182 -> 1195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1195 -> 1204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1243 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1246 -> 1251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1261 -> 1277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1277 -> 1286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1324 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1327 -> 1332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1342 -> 1358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1358 -> 1367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1405 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1408 -> 1413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1423 -> 1435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1435 -> 1442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1465 -> 1470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1480 -> 1488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1497 -> 1502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1512 -> 1524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1524 -> 1531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1531 -> 1540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1540 -> 1549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1572 -> 1577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1587 -> 1599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1599 -> 1612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1612 -> 1633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1640 -> 1645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
