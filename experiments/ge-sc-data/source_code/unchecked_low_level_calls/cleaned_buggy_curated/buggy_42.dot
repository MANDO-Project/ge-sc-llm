digraph  {
13 [label="2_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n13-function_definition-3-4", method="bug_unchk_send28()", type_label=function_definition];
18 [label="3_ msg.sender.transfer(1 ether);\n18-expression_statement-4-4", method="bug_unchk_send28()", type_label=expression_statement];
28 [label="4_ address public owner;\n28-new_variable-5-5", method="", type_label=new_variable];
33 [label="5_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n33-function_definition-6-7", method="bug_unchk_send21()", type_label=function_definition];
38 [label="6_ msg.sender.transfer(1 ether);\n38-expression_statement-7-7", method="bug_unchk_send21()", type_label=expression_statement];
48 [label="7_ address public newOwner;\n48-new_variable-8-8", method="", type_label=new_variable];
53 [label="8_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n53-function_definition-9-10", method="bug_unchk_send27()", type_label=function_definition];
58 [label="9_ msg.sender.transfer(1 ether);\n58-expression_statement-10-10", method="bug_unchk_send27()", type_label=expression_statement];
80 [label="12_ owner = msg.sender;\n80-expression_statement-13-13", method="", type_label=expression_statement];
86 [label="14_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n86-function_definition-15-16", method="bug_unchk_send3()", type_label=function_definition];
91 [label="15_ msg.sender.transfer(1 ether);\n91-expression_statement-16-16", method="bug_unchk_send3()", type_label=expression_statement];
101 [label="16_ modifier onlyOwner {\n        require(msg.sender == owner || msg.sender == address(this));\n        _;\n    }\n101-expression_statement-17-20", method="", type_label=expression_statement];
104 [label="17_ require(msg.sender == owner || msg.sender == address(this));\n104-expression_statement-18-18", method="", type_label=expression_statement];
121 [label="18_ _;\n121-expression_statement-19-19", method="", type_label=expression_statement];
123 [label="20_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n123-function_definition-21-23", method="transferOwnership(address _newOwner)", type_label=function_definition];
130 [label="20_ onlyOwner\n130-expression_statement-21-21", method="transferOwnership(address _newOwner)", type_label=expression_statement];
133 [label="21_ newOwner = _newOwner;\n133-expression_statement-22-22", method="transferOwnership(address _newOwner)", type_label=expression_statement];
137 [label="23_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n137-function_definition-24-25", method="bug_unchk_send9()", type_label=function_definition];
142 [label="24_ msg.sender.transfer(1 ether);\n142-expression_statement-25-25", method="bug_unchk_send9()", type_label=expression_statement];
155 [label="27_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n155-function_definition-28-35", method="mul(uint256 a,uint256 b)", type_label=function_definition];
172 [label="28_ if_a == 0\n172-if-29-31", method="mul(uint256 a,uint256 b)", type_label=if];
1307 [label="28_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
177 [label="29_ return 0;\n177-return-30-30", method="mul(uint256 a,uint256 b)", type_label=return];
179 [label="31_ uint256 c = a * b;\n179-new_variable-32-32", method="mul(uint256 a,uint256 b)", type_label=new_variable];
187 [label="32_ assert(c / a == b);\n187-expression_statement-33-33", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
196 [label="33_ return c;\n196-return-34-34", method="mul(uint256 a,uint256 b)", type_label=return];
198 [label="35_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n198-function_definition-36-39", method="div(uint256 a,uint256 b)", type_label=function_definition];
215 [label="36_ uint256 c = a / b;\n215-new_variable-37-37", method="div(uint256 a,uint256 b)", type_label=new_variable];
223 [label="37_ return c;\n223-return-38-38", method="div(uint256 a,uint256 b)", type_label=return];
225 [label="39_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n225-function_definition-40-43", method="sub(uint256 a,uint256 b)", type_label=function_definition];
242 [label="40_ assert(b <= a);\n242-expression_statement-41-41", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
249 [label="41_ return a - b;\n249-return-42-42", method="sub(uint256 a,uint256 b)", type_label=return];
253 [label="43_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n253-function_definition-44-48", method="add(uint256 a,uint256 b)", type_label=function_definition];
270 [label="44_ uint256 c = a + b;\n270-new_variable-45-45", method="add(uint256 a,uint256 b)", type_label=new_variable];
278 [label="45_ assert(c >= a);\n278-expression_statement-46-46", method="add(uint256 a,uint256 b)", type_label=expression_statement];
285 [label="46_ return c;\n285-return-47-47", method="add(uint256 a,uint256 b)", type_label=return];
287 [label="48_ function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n287-function_definition-49-53", method="ceil(uint256 a,uint256 m)", type_label=function_definition];
304 [label="49_ uint256 c = add(a,m);\n304-new_variable-50-50", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
315 [label="50_ uint256 d = sub(c,1);\n315-new_variable-51-51", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
326 [label="51_ return mul(div(d,m),m);\n326-return-52-52", method="ceil(uint256 a,uint256 m)", type_label=return];
341 [label="55_ function balanceOf(address who) external view returns (uint256);\n341-function_definition-56-56", method="balanceOf(address who)", type_label=function_definition];
353 [label="56_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n353-function_definition-57-58", method="bug_unchk_send25()", type_label=function_definition];
358 [label="57_ msg.sender.transfer(1 ether);\n358-expression_statement-58-58", method="bug_unchk_send25()", type_label=expression_statement];
368 [label="58_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n368-function_definition-59-59", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
387 [label="59_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n387-function_definition-60-61", method="bug_unchk_send19()", type_label=function_definition];
392 [label="60_ msg.sender.transfer(1 ether);\n392-expression_statement-61-61", method="bug_unchk_send19()", type_label=expression_statement];
402 [label="61_ function transfer(address to, uint256 value) external returns (bool);\n402-function_definition-62-62", method="transfer(address to,uint256 value)", type_label=function_definition];
417 [label="62_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n417-function_definition-63-64", method="bug_unchk_send26()", type_label=function_definition];
422 [label="63_ msg.sender.transfer(1 ether);\n422-expression_statement-64-64", method="bug_unchk_send26()", type_label=expression_statement];
438 [label="66_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n438-function_definition-67-68", method="bug_unchk_send10()", type_label=function_definition];
443 [label="67_ msg.sender.transfer(1 ether);\n443-expression_statement-68-68", method="bug_unchk_send10()", type_label=expression_statement];
453 [label="68_ Token public token;\n453-new_variable-69-69", method="", type_label=new_variable];
459 [label="69_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n459-function_definition-70-71", method="bug_unchk_send22()", type_label=function_definition];
464 [label="70_ msg.sender.transfer(1 ether);\n464-expression_statement-71-71", method="bug_unchk_send22()", type_label=expression_statement];
474 [label="71_ bool lock;\n474-new_variable-72-72", method="", type_label=new_variable];
478 [label="72_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n478-function_definition-73-74", method="bug_unchk_send12()", type_label=function_definition];
483 [label="73_ msg.sender.transfer(1 ether);\n483-expression_statement-74-74", method="bug_unchk_send12()", type_label=expression_statement];
493 [label="74_ uint256 public stakeTokens;\n493-new_variable-75-75", method="", type_label=new_variable];
498 [label="75_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n498-function_definition-76-77", method="bug_unchk_send11()", type_label=function_definition];
503 [label="76_ msg.sender.transfer(1 ether);\n503-expression_statement-77-77", method="bug_unchk_send11()", type_label=expression_statement];
513 [label="77_ uint256 private basePercent = 200;\n513-new_variable-78-78", method="", type_label=new_variable];
524 [label="79_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n524-function_definition-80-81", method="bug_unchk_send1()", type_label=function_definition];
529 [label="80_ msg.sender.transfer(1 ether);\n529-expression_statement-81-81", method="bug_unchk_send1()", type_label=expression_statement];
539 [label="81_ uint256 public stakeTime = 1814400;\n539-new_variable-82-82", method="", type_label=new_variable];
545 [label="82_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n545-function_definition-83-84", method="bug_unchk_send2()", type_label=function_definition];
550 [label="83_ msg.sender.transfer(1 ether);\n550-expression_statement-84-84", method="bug_unchk_send2()", type_label=expression_statement];
560 [label="84_ uint public stakePercentage = 30;\n560-new_variable-85-85", method="", type_label=new_variable];
566 [label="85_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n566-function_definition-86-87", method="bug_unchk_send31()", type_label=function_definition];
571 [label="86_ msg.sender.transfer(1 ether);\n571-expression_statement-87-87", method="bug_unchk_send31()", type_label=expression_statement];
595 [label="88_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n595-function_definition-89-90", method="bug_unchk_send13()", type_label=function_definition];
600 [label="89_ msg.sender.transfer(1 ether);\n600-expression_statement-90-90", method="bug_unchk_send13()", type_label=expression_statement];
624 [label="91_ struct stake{\n        uint256 time;\n        bool redeem;\n        uint256 tokens;\n    }\n624-expression_statement-92-96", method="stake()", type_label=expression_statement];
638 [label="96_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n638-function_definition-97-98", method="bug_unchk_send17()", type_label=function_definition];
643 [label="97_ msg.sender.transfer(1 ether);\n643-expression_statement-98-98", method="bug_unchk_send17()", type_label=expression_statement];
653 [label="98_ mapping(address => stake) staker;\n653-new_variable-99-99", method="", type_label=new_variable];
666 [label="100_ token = Token(tokenContractAddress);\n666-expression_statement-101-101", method="", type_label=expression_statement];
673 [label="101_ owner = msg.sender;\n673-expression_statement-102-102", method="", type_label=expression_statement];
679 [label="102_ stakeTokens = 500 * 10 ** uint(10);\n679-expression_statement-103-103", method="", type_label=expression_statement];
689 [label="104_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n689-function_definition-105-106", method="bug_unchk_send20()", type_label=function_definition];
694 [label="105_ msg.sender.transfer(1 ether);\n694-expression_statement-106-106", method="bug_unchk_send20()", type_label=expression_statement];
704 [label="106_ function startStaking() public{\n        require(token.balanceOf(msg.sender) >= stakeTokens + findOnePercent(stakeTokens));\n        require(token.transferFrom(msg.sender, address(this), stakeTokens  + findOnePercent(stakeTokens)));\n        staker[msg.sender].time = now;\n        staker[msg.sender].tokens =  staker[msg.sender].tokens + stakeTokens;\n        emit stakingstarted(msg.sender, staker[msg.sender].tokens, staker[msg.sender].time);\n    }\n704-function_definition-107-113", method="startStaking()", type_label=function_definition];
708 [label="107_ require(token.balanceOf(msg.sender) >= stakeTokens + findOnePercent(stakeTokens));\n708-expression_statement-108-108", method="startStaking()", type_label=expression_statement];
727 [label="108_ require(token.transferFrom(msg.sender, address(this), stakeTokens  + findOnePercent(stakeTokens)));\n727-expression_statement-109-109", method="startStaking()", type_label=expression_statement];
750 [label="109_ staker[msg.sender].time = now;\n750-expression_statement-110-110", method="startStaking()", type_label=expression_statement];
760 [label="110_ staker[msg.sender].tokens =  staker[msg.sender].tokens + stakeTokens;\n760-expression_statement-111-111", method="startStaking()", type_label=expression_statement];
800 [label="113_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n800-function_definition-114-115", method="bug_unchk_send32()", type_label=function_definition];
805 [label="114_ msg.sender.transfer(1 ether);\n805-expression_statement-115-115", method="bug_unchk_send32()", type_label=expression_statement];
815 [label="115_ function redeem() public{\n        require(!lock);\n        require(!staker[msg.sender].redeem);\n        require(staker[msg.sender].time + stakeTime <= now);\n        require(token.transfer(msg.sender,staker[msg.sender].tokens));\n        require(token.transferFrom(owner, msg.sender ,staker[msg.sender].tokens * stakePercentage * 100 / 10000));\n        emit tokensRedeemed(msg.sender, staker[msg.sender].tokens, staker[msg.sender].tokens * stakePercentage * 100 / 10000);\n        staker[msg.sender].redeem = true;\n        staker[msg.sender].tokens = 0;\n    }\n815-function_definition-116-125", method="redeem()", type_label=function_definition];
819 [label="116_ require(!lock);\n819-expression_statement-117-117", method="redeem()", type_label=expression_statement];
825 [label="117_ require(!staker[msg.sender].redeem);\n825-expression_statement-118-118", method="redeem()", type_label=expression_statement];
837 [label="118_ require(staker[msg.sender].time + stakeTime <= now);\n837-expression_statement-119-119", method="redeem()", type_label=expression_statement];
852 [label="119_ require(token.transfer(msg.sender,staker[msg.sender].tokens));\n852-expression_statement-120-120", method="redeem()", type_label=expression_statement];
872 [label="120_ require(token.transferFrom(owner, msg.sender ,staker[msg.sender].tokens * stakePercentage * 100 / 10000));\n872-expression_statement-121-121", method="redeem()", type_label=expression_statement];
928 [label="122_ staker[msg.sender].redeem = true;\n928-expression_statement-123-123", method="redeem()", type_label=expression_statement];
939 [label="123_ staker[msg.sender].tokens = 0;\n939-expression_statement-124-124", method="redeem()", type_label=expression_statement];
949 [label="125_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n949-function_definition-126-127", method="bug_unchk_send4()", type_label=function_definition];
954 [label="126_ msg.sender.transfer(1 ether);\n954-expression_statement-127-127", method="bug_unchk_send4()", type_label=expression_statement];
964 [label="127_ function changeStakeTokens(uint256 _NewTokensThreshold) public onlyOwner{\n        stakeTokens = _NewTokensThreshold * 10 ** uint(10);\n    }\n964-function_definition-128-130", method="changeStakeTokens(uint256 _NewTokensThreshold)", type_label=function_definition];
971 [label="127_ onlyOwner\n971-expression_statement-128-128", method="changeStakeTokens(uint256 _NewTokensThreshold)", type_label=expression_statement];
974 [label="128_ stakeTokens = _NewTokensThreshold * 10 ** uint(10);\n974-expression_statement-129-129", method="changeStakeTokens(uint256 _NewTokensThreshold)", type_label=expression_statement];
984 [label="130_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n984-function_definition-131-132", method="bug_unchk_send7()", type_label=function_definition];
989 [label="131_ msg.sender.transfer(1 ether);\n989-expression_statement-132-132", method="bug_unchk_send7()", type_label=expression_statement];
999 [label="132_ function changeStakeTime(uint256 _newStakeTime) public onlyOwner{\n        stakeTime = _newStakeTime;\n    }\n999-function_definition-133-135", method="changeStakeTime(uint256 _newStakeTime)", type_label=function_definition];
1006 [label="132_ onlyOwner\n1006-expression_statement-133-133", method="changeStakeTime(uint256 _newStakeTime)", type_label=expression_statement];
1009 [label="133_ stakeTime = _newStakeTime;\n1009-expression_statement-134-134", method="changeStakeTime(uint256 _newStakeTime)", type_label=expression_statement];
1013 [label="135_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n1013-function_definition-136-137", method="bug_unchk_send23()", type_label=function_definition];
1018 [label="136_ msg.sender.transfer(1 ether);\n1018-expression_statement-137-137", method="bug_unchk_send23()", type_label=expression_statement];
1028 [label="137_ function changeStakingPercentage(uint _newStakePercentage) public onlyOwner{\n        stakePercentage = _newStakePercentage;\n    }\n1028-function_definition-138-140", method="changeStakingPercentage(uint _newStakePercentage)", type_label=function_definition];
1035 [label="137_ onlyOwner\n1035-expression_statement-138-138", method="changeStakingPercentage(uint _newStakePercentage)", type_label=expression_statement];
1038 [label="138_ stakePercentage = _newStakePercentage;\n1038-expression_statement-139-139", method="changeStakingPercentage(uint _newStakePercentage)", type_label=expression_statement];
1042 [label="140_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n1042-function_definition-141-142", method="bug_unchk_send14()", type_label=function_definition];
1047 [label="141_ msg.sender.transfer(1 ether);\n1047-expression_statement-142-142", method="bug_unchk_send14()", type_label=expression_statement];
1057 [label="142_ function lockWithdrawals() public onlyOwner{\n        lock = true;\n    }\n1057-function_definition-143-145", method="lockWithdrawals()", type_label=function_definition];
1060 [label="142_ onlyOwner\n1060-expression_statement-143-143", method="lockWithdrawals()", type_label=expression_statement];
1063 [label="143_ lock = true;\n1063-expression_statement-144-144", method="lockWithdrawals()", type_label=expression_statement];
1068 [label="145_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n1068-function_definition-146-147", method="bug_unchk_send30()", type_label=function_definition];
1073 [label="146_ msg.sender.transfer(1 ether);\n1073-expression_statement-147-147", method="bug_unchk_send30()", type_label=expression_statement];
1083 [label="147_ function findOnePercent(uint256 value) private view returns (uint256)  {\n        uint256 roundValue = value.ceil(basePercent);\n        uint256 onePercent = roundValue.mul(basePercent).div(10000);\n        return onePercent;\n    }\n1083-function_definition-148-152", method="findOnePercent(uint256 value)", type_label=function_definition];
1096 [label="148_ uint256 roundValue = value.ceil(basePercent);\n1096-new_variable-149-149", method="findOnePercent(uint256 value)", type_label=new_variable];
1107 [label="149_ uint256 onePercent = roundValue.mul(basePercent).div(10000);\n1107-new_variable-150-150", method="findOnePercent(uint256 value)", type_label=new_variable];
1123 [label="150_ return onePercent;\n1123-return-151-151", method="findOnePercent(uint256 value)", type_label=return];
1125 [label="152_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n1125-function_definition-153-154", method="bug_unchk_send8()", type_label=function_definition];
1130 [label="153_ msg.sender.transfer(1 ether);\n1130-expression_statement-154-154", method="bug_unchk_send8()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 18  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
33 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 58  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
86 -> 91  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
123 -> 133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
137 -> 142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
172 -> 177  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
172 -> 1307  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1307 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
177 -> 1307  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
177 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
179 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
196 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
198 -> 215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
215 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
225 -> 242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
253 -> 270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
270 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
285 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
287 -> 304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
315 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
326 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
353 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
438 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
459 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
478 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
566 -> 571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
595 -> 600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
673 -> 679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
689 -> 694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
704 -> 708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
708 -> 727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
750 -> 760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
800 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
819 -> 825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
825 -> 837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
852 -> 872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
928 -> 939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
964 -> 974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
984 -> 989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1013 -> 1018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1028 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 1047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1057 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1083 -> 1096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1096 -> 1107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1107 -> 1123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1123 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1125 -> 1130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
