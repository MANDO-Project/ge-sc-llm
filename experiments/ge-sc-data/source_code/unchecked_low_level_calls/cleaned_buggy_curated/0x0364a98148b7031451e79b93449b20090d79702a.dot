digraph  {
13 [label="2_ totalSupply\n13-function_definition-3-3", type_label=function_definition];
16 [label="2_ constant\n16-expression_statement-3-3", type_label=expression_statement];
22 [label="3_ balanceOf\n22-function_definition-4-4", type_label=function_definition];
29 [label="3_ constant\n29-expression_statement-4-4", type_label=expression_statement];
36 [label="4_ allowance\n36-function_definition-5-5", type_label=function_definition];
47 [label="4_ constant\n47-expression_statement-5-5", type_label=expression_statement];
54 [label="5_ transfer\n54-function_definition-6-6", type_label=function_definition];
70 [label="6_ approve\n70-function_definition-7-7", type_label=function_definition];
86 [label="7_ transferFrom\n86-function_definition-8-8", type_label=function_definition];
137 [label="12_ address public owner;\n137-new_variable-13-13", type_label=new_variable];
142 [label="13_ address public newOwner;\n142-new_variable-14-14", type_label=new_variable];
157 [label="15_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n157-expression_statement-16-19", type_label=expression_statement];
160 [label="16_ require(msg.sender == owner);\n160-expression_statement-17-17", type_label=expression_statement];
169 [label="17_ _;\n169-expression_statement-18-18", type_label=expression_statement];
171 [label="19_ Owned\n171-function_definition-20-22", type_label=function_definition];
175 [label="20_ owner = msg.sender;\n175-expression_statement-21-21", type_label=expression_statement];
181 [label="22_ transferOwnership\n181-function_definition-23-25", type_label=function_definition];
188 [label="22_ onlyOwner\n188-expression_statement-23-23", type_label=expression_statement];
191 [label="23_ newOwner = _newOwner;\n191-expression_statement-24-24", type_label=expression_statement];
195 [label="25_ acceptOwnership\n195-function_definition-26-31", type_label=function_definition];
199 [label="26_ require(msg.sender == newOwner);\n199-expression_statement-27-27", type_label=expression_statement];
208 [label="27_ OwnershipTransferred(owner, newOwner);\n208-expression_statement-28-28", type_label=expression_statement];
215 [label="28_ owner = newOwner;\n215-expression_statement-29-29", type_label=expression_statement];
219 [label="29_ newOwner = 0x0;\n219-expression_statement-30-30", type_label=expression_statement];
229 [label="33_ mapping (address => bool) public admins;\n229-new_variable-34-34", type_label=new_variable];
248 [label="36_ modifier onlyAdmin() {\n        require(isAdmin(msg.sender));\n        _;\n    }\n248-expression_statement-37-40", type_label=expression_statement];
251 [label="37_ require(isAdmin(msg.sender));\n251-expression_statement-38-38", type_label=expression_statement];
261 [label="38_ _;\n261-expression_statement-39-39", type_label=expression_statement];
263 [label="40_ isAdmin\n263-function_definition-41-43", type_label=function_definition];
270 [label="40_ constant\n270-expression_statement-41-41", type_label=expression_statement];
277 [label="41_ return (admins[addr] || owner == addr);\n277-return-42-42", type_label=return];
286 [label="43_ addAdmin\n286-function_definition-44-48", type_label=function_definition];
293 [label="43_ onlyOwner\n293-expression_statement-44-44", type_label=expression_statement];
296 [label="44_ require(!admins[addr] && addr != owner);\n296-expression_statement-45-45", type_label=expression_statement];
308 [label="45_ admins[addr] = true;\n308-expression_statement-46-46", type_label=expression_statement];
315 [label="46_ AdminAdded(addr);\n315-expression_statement-47-47", type_label=expression_statement];
320 [label="48_ removeAdmin\n320-function_definition-49-53", type_label=function_definition];
327 [label="48_ onlyOwner\n327-expression_statement-49-49", type_label=expression_statement];
330 [label="49_ require(admins[addr]);\n330-expression_statement-50-50", type_label=expression_statement];
337 [label="50_ delete admins[addr];\n337-expression_statement-51-51", type_label=expression_statement];
342 [label="51_ AdminRemoved(addr);\n342-expression_statement-52-52", type_label=expression_statement];
353 [label="55_ struct App {\n        address appAccount;\n        string appName;\n        address feeAccount;\n        uint fee;\n        bool active;\n    }\n353-expression_statement-56-62", type_label=expression_statement];
375 [label="62_ struct Brand {\n        address brandAccount;\n        address appAccount;\n        string brandName;\n        bool active;\n    }\n375-expression_statement-63-68", type_label=expression_statement];
393 [label="68_ struct Product {\n        address productAccount;\n        address brandAccount;\n        string description;\n        string details;\n        uint year;\n        string origin;\n        bool active;\n    }\n393-expression_statement-69-77", type_label=expression_statement];
423 [label="77_ ERC20Interface public token;\n423-new_variable-78-78", type_label=new_variable];
429 [label="78_ address public feeAccount;\n429-new_variable-79-79", type_label=new_variable];
434 [label="79_ uint public fee;\n434-new_variable-80-80", type_label=new_variable];
439 [label="80_ mapping(address => App) public apps;\n439-new_variable-81-81", type_label=new_variable];
447 [label="81_ mapping(address => Brand) public brands;\n447-new_variable-82-82", type_label=new_variable];
455 [label="82_ mapping(address => Product) public products;\n455-new_variable-83-83", type_label=new_variable];
463 [label="83_ mapping(address => mapping(address => bool)) permissions;\n463-new_variable-84-84", type_label=new_variable];
471 [label="84_ mapping(bytes32 => address) markings;\n471-new_variable-85-85", type_label=new_variable];
477 [label="85_ address[] public appAccounts;\n477-new_variable-86-86", type_label=new_variable];
483 [label="86_ address[] public brandAccounts;\n483-new_variable-87-87", type_label=new_variable];
489 [label="87_ address[] public productAccounts;\n489-new_variable-88-88", type_label=new_variable];
691 [label="98_ setToken\n691-function_definition-99-102", type_label=function_definition];
698 [label="98_ onlyAdmin\n698-expression_statement-99-99", type_label=expression_statement];
701 [label="99_ TokenUpdated(address(token), _token);\n701-expression_statement-100-100", type_label=expression_statement];
710 [label="100_ token = ERC20Interface(_token);\n710-expression_statement-101-101", type_label=expression_statement];
717 [label="102_ setFee\n717-function_definition-103-107", type_label=function_definition];
728 [label="102_ onlyAdmin\n728-expression_statement-103-103", type_label=expression_statement];
731 [label="103_ FeeUpdated(feeAccount, _feeAccount, fee, _fee);\n731-expression_statement-104-104", type_label=expression_statement];
742 [label="104_ feeAccount = _feeAccount;\n742-expression_statement-105-105", type_label=expression_statement];
746 [label="105_ fee = _fee;\n746-expression_statement-106-106", type_label=expression_statement];
750 [label="107_ addApp\n750-function_definition-108-120", type_label=function_definition];
766 [label="108_ App storage e = apps[msg.sender];\n766-new_variable-109-109", type_label=new_variable];
777 [label="109_ require(e.appAccount == address(0));\n777-expression_statement-110-110", type_label=expression_statement];
788 [label="110_ apps[msg.sender] = App({\n            appAccount: msg.sender,\n            appName: appName,\n            feeAccount: _feeAccount,\n            fee: _fee,\n            active: true\n        });\n788-expression_statement-111-117", type_label=expression_statement];
816 [label="117_ appAccounts.push(msg.sender);\n816-expression_statement-118-118", type_label=expression_statement];
825 [label="118_ AppAdded(msg.sender, appName, _feeAccount, _fee, true);\n825-expression_statement-119-119", type_label=expression_statement];
841 [label="120_ updateApp\n841-function_definition-121-129", type_label=function_definition];
861 [label="121_ App storage e = apps[msg.sender];\n861-new_variable-122-122", type_label=new_variable];
872 [label="122_ require(msg.sender == e.appAccount);\n872-expression_statement-123-123", type_label=expression_statement];
883 [label="123_ e.appName = appName;\n883-expression_statement-124-124", type_label=expression_statement];
889 [label="124_ e.feeAccount = _feeAccount;\n889-expression_statement-125-125", type_label=expression_statement];
895 [label="125_ e.fee = _fee;\n895-expression_statement-126-126", type_label=expression_statement];
901 [label="126_ e.active = active;\n901-expression_statement-127-127", type_label=expression_statement];
907 [label="127_ AppUpdated(msg.sender, appName, _feeAccount, _fee, active);\n907-expression_statement-128-128", type_label=expression_statement];
922 [label="129_ getApp\n922-function_definition-130-132", type_label=function_definition];
929 [label="129_ constant\n929-expression_statement-130-130", type_label=expression_statement];
938 [label="130_ app = apps[appAccount];\n938-expression_statement-131-131", type_label=expression_statement];
944 [label="132_ getAppData\n944-function_definition-133-138", type_label=function_definition];
951 [label="132_ constant\n951-expression_statement-133-133", type_label=expression_statement];
967 [label="133_ App storage e = apps[appAccount];\n967-new_variable-134-134", type_label=new_variable];
976 [label="134_ _feeAccount = e.feeAccount;\n976-expression_statement-135-135", type_label=expression_statement];
982 [label="135_ _fee = e.fee;\n982-expression_statement-136-136", type_label=expression_statement];
988 [label="136_ active = e.active;\n988-expression_statement-137-137", type_label=expression_statement];
994 [label="138_ appAccountsLength\n994-function_definition-139-141", type_label=function_definition];
997 [label="138_ constant\n997-expression_statement-139-139", type_label=expression_statement];
1004 [label="139_ return appAccounts.length;\n1004-return-140-140", type_label=return];
1008 [label="141_ addBrand\n1008-function_definition-142-155", type_label=function_definition];
1020 [label="142_ App storage app = apps[msg.sender];\n1020-new_variable-143-143", type_label=new_variable];
1031 [label="143_ require(app.appAccount != address(0));\n1031-expression_statement-144-144", type_label=expression_statement];
1042 [label="144_ Brand storage brand = brands[brandAccount];\n1042-new_variable-145-145", type_label=new_variable];
1051 [label="145_ require(brand.brandAccount == address(0));\n1051-expression_statement-146-146", type_label=expression_statement];
1062 [label="146_ brands[brandAccount] = Brand({\n            brandAccount: brandAccount,\n            appAccount: msg.sender,\n            brandName: brandName,\n            active: true\n        });\n1062-expression_statement-147-152", type_label=expression_statement];
1085 [label="152_ brandAccounts.push(brandAccount);\n1085-expression_statement-153-153", type_label=expression_statement];
1092 [label="153_ BrandAdded(brandAccount, msg.sender, brandName, true);\n1092-expression_statement-154-154", type_label=expression_statement];
1106 [label="155_ updateBrand\n1106-function_definition-156-162", type_label=function_definition];
1122 [label="156_ Brand storage brand = brands[brandAccount];\n1122-new_variable-157-157", type_label=new_variable];
1131 [label="157_ require(brand.appAccount == msg.sender);\n1131-expression_statement-158-158", type_label=expression_statement];
1142 [label="158_ brand.brandName = brandName;\n1142-expression_statement-159-159", type_label=expression_statement];
1148 [label="159_ brand.active = active;\n1148-expression_statement-160-160", type_label=expression_statement];
1154 [label="160_ BrandUpdated(brandAccount, msg.sender, brandName, active);\n1154-expression_statement-161-161", type_label=expression_statement];
1167 [label="162_ getBrand\n1167-function_definition-163-165", type_label=function_definition];
1174 [label="162_ constant\n1174-expression_statement-163-163", type_label=expression_statement];
1183 [label="163_ brand = brands[brandAccount];\n1183-expression_statement-164-164", type_label=expression_statement];
1189 [label="165_ getBrandData\n1189-function_definition-166-174", type_label=function_definition];
1196 [label="165_ constant\n1196-expression_statement-166-166", type_label=expression_statement];
1212 [label="166_ Brand storage brand = brands[brandAccount];\n1212-new_variable-167-167", type_label=new_variable];
1221 [label="167_ require(brand.appAccount != address(0));\n1221-expression_statement-168-168", type_label=expression_statement];
1232 [label="168_ App storage app = apps[brand.appAccount];\n1232-new_variable-169-169", type_label=new_variable];
1243 [label="169_ require(app.appAccount != address(0));\n1243-expression_statement-170-170", type_label=expression_statement];
1254 [label="170_ appAccount = app.appAccount;\n1254-expression_statement-171-171", type_label=expression_statement];
1260 [label="171_ appFeeAccount = app.feeAccount;\n1260-expression_statement-172-172", type_label=expression_statement];
1266 [label="172_ active = app.active && brand.active;\n1266-expression_statement-173-173", type_label=expression_statement];
1276 [label="174_ brandAccountsLength\n1276-function_definition-175-177", type_label=function_definition];
1279 [label="174_ constant\n1279-expression_statement-175-175", type_label=expression_statement];
1286 [label="175_ return brandAccounts.length;\n1286-return-176-176", type_label=return];
1290 [label="177_ addProduct\n1290-function_definition-178-196", type_label=function_definition];
1314 [label="178_ Brand storage brand = brands[msg.sender];\n1314-new_variable-179-179", type_label=new_variable];
1325 [label="179_ require(brand.brandAccount != address(0));\n1325-expression_statement-180-180", type_label=expression_statement];
1336 [label="180_ App storage app = apps[brand.appAccount];\n1336-new_variable-181-181", type_label=new_variable];
1347 [label="181_ require(app.appAccount != address(0));\n1347-expression_statement-182-182", type_label=expression_statement];
1358 [label="182_ Product storage product = products[productAccount];\n1358-new_variable-183-183", type_label=new_variable];
1367 [label="183_ require(product.productAccount == address(0));\n1367-expression_statement-184-184", type_label=expression_statement];
1378 [label="184_ products[productAccount] = Product({\n            productAccount: productAccount,\n            brandAccount: msg.sender,\n            description: description,\n            details: details,\n            year: year,\n            origin: origin,\n            active: true\n        });\n1378-expression_statement-185-193", type_label=expression_statement];
1410 [label="193_ productAccounts.push(productAccount);\n1410-expression_statement-194-194", type_label=expression_statement];
1417 [label="194_ ProductAdded(productAccount, msg.sender, app.appAccount, description, true);\n1417-expression_statement-195-195", type_label=expression_statement];
1435 [label="196_ updateProduct\n1435-function_definition-197-209", type_label=function_definition];
1463 [label="197_ Product storage product = products[productAccount];\n1463-new_variable-198-198", type_label=new_variable];
1472 [label="198_ require(product.brandAccount == msg.sender);\n1472-expression_statement-199-199", type_label=expression_statement];
1483 [label="199_ Brand storage brand = brands[msg.sender];\n1483-new_variable-200-200", type_label=new_variable];
1494 [label="200_ require(brand.brandAccount == msg.sender);\n1494-expression_statement-201-201", type_label=expression_statement];
1505 [label="201_ App storage app = apps[brand.appAccount];\n1505-new_variable-202-202", type_label=new_variable];
1516 [label="202_ product.description = description;\n1516-expression_statement-203-203", type_label=expression_statement];
1522 [label="203_ product.details = details;\n1522-expression_statement-204-204", type_label=expression_statement];
1528 [label="204_ product.year = year;\n1528-expression_statement-205-205", type_label=expression_statement];
1534 [label="205_ product.origin = origin;\n1534-expression_statement-206-206", type_label=expression_statement];
1540 [label="206_ product.active = active;\n1540-expression_statement-207-207", type_label=expression_statement];
1546 [label="207_ ProductUpdated(productAccount, product.brandAccount, app.appAccount, description, active);\n1546-expression_statement-208-208", type_label=expression_statement];
1563 [label="209_ getProduct\n1563-function_definition-210-212", type_label=function_definition];
1570 [label="209_ constant\n1570-expression_statement-210-210", type_label=expression_statement];
1579 [label="210_ product = products[productAccount];\n1579-expression_statement-211-211", type_label=expression_statement];
1585 [label="212_ getProductData\n1585-function_definition-213-224", type_label=function_definition];
1592 [label="212_ constant\n1592-expression_statement-213-213", type_label=expression_statement];
1612 [label="213_ Product storage product = products[productAccount];\n1612-new_variable-214-214", type_label=new_variable];
1621 [label="214_ require(product.brandAccount != address(0));\n1621-expression_statement-215-215", type_label=expression_statement];
1632 [label="215_ Brand storage brand = brands[brandAccount];\n1632-new_variable-216-216", type_label=new_variable];
1641 [label="216_ require(brand.appAccount != address(0));\n1641-expression_statement-217-217", type_label=expression_statement];
1652 [label="217_ App storage app = apps[brand.appAccount];\n1652-new_variable-218-218", type_label=new_variable];
1663 [label="218_ require(app.appAccount != address(0));\n1663-expression_statement-219-219", type_label=expression_statement];
1674 [label="219_ brandAccount = product.brandAccount;\n1674-expression_statement-220-220", type_label=expression_statement];
1680 [label="220_ appAccount = app.appAccount;\n1680-expression_statement-221-221", type_label=expression_statement];
1686 [label="221_ appFeeAccount = app.feeAccount;\n1686-expression_statement-222-222", type_label=expression_statement];
1692 [label="222_ active = app.active && brand.active && brand.active;\n1692-expression_statement-223-223", type_label=expression_statement];
1706 [label="224_ productAccountsLength\n1706-function_definition-225-227", type_label=function_definition];
1709 [label="224_ constant\n1709-expression_statement-225-225", type_label=expression_statement];
1716 [label="225_ return productAccounts.length;\n1716-return-226-226", type_label=return];
1720 [label="227_ permissionMarker\n1720-function_definition-228-233", type_label=function_definition];
1732 [label="228_ Brand storage brand = brands[msg.sender];\n1732-new_variable-229-229", type_label=new_variable];
1743 [label="229_ require(brand.brandAccount != address(0));\n1743-expression_statement-230-230", type_label=expression_statement];
1754 [label="230_ permissions[marker][msg.sender] = permission;\n1754-expression_statement-231-231", type_label=expression_statement];
1764 [label="231_ Permissioned(marker, msg.sender, permission);\n1764-expression_statement-232-232", type_label=expression_statement];
1775 [label="233_ addressHash\n1775-function_definition-234-236", type_label=function_definition];
1789 [label="234_ hash = keccak256(item);\n1789-expression_statement-235-235", type_label=expression_statement];
1796 [label="236_ mark\n1796-function_definition-237-254", type_label=function_definition];
1808 [label="237_ Product storage product = products[productAccount];\n1808-new_variable-238-238", type_label=new_variable];
1817 [label="238_ require(product.brandAccount != address(0) && product.active);\n1817-expression_statement-239-239", type_label=expression_statement];
1832 [label="239_ Brand storage brand = brands[product.brandAccount];\n1832-new_variable-240-240", type_label=new_variable];
1843 [label="240_ require(brand.brandAccount != address(0) && brand.active);\n1843-expression_statement-241-241", type_label=expression_statement];
1858 [label="241_ App storage app = apps[brand.appAccount];\n1858-new_variable-242-242", type_label=new_variable];
1869 [label="242_ require(app.appAccount != address(0) && app.active);\n1869-expression_statement-243-243", type_label=expression_statement];
1884 [label="243_ bool permissioned = permissions[msg.sender][brand.brandAccount];\n1884-new_variable-244-244", type_label=new_variable];
1898 [label="244_ require(permissioned);\n1898-expression_statement-245-245", type_label=expression_statement];
1903 [label="245_ markings[itemHash] = productAccount;\n1903-expression_statement-246-246", type_label=expression_statement];
1909 [label="246_ Marked(msg.sender, productAccount, app.feeAccount, feeAccount, app.fee, fee, itemHash);\n1909-expression_statement-247-247", type_label=expression_statement];
1932 [label="247_ if_app.fee > 0\n1932-if-248-250", type_label=if];
3971 [label="247_ end_if", type_label=end_if];
1939 [label="248_ token.transferFrom(brand.brandAccount, app.feeAccount, app.fee);\n1939-expression_statement-249-249", type_label=expression_statement];
1956 [label="250_ if_fee > 0\n1956-if-251-253", type_label=if];
3995 [label="250_ end_if", type_label=end_if];
1961 [label="251_ token.transferFrom(brand.brandAccount, feeAccount, fee);\n1961-expression_statement-252-252", type_label=expression_statement];
1974 [label="254_ check\n1974-function_definition-255-262", type_label=function_definition];
1981 [label="254_ constant\n1981-expression_statement-255-255", type_label=expression_statement];
1997 [label="255_ bytes32 hash = keccak256(item);\n1997-new_variable-256-256", type_label=new_variable];
2006 [label="256_ productAccount = markings[hash];\n2006-expression_statement-257-257", type_label=expression_statement];
2012 [label="257_ Product storage product = products[productAccount];\n2012-new_variable-258-258", type_label=new_variable];
2021 [label="258_ Brand storage brand = brands[product.brandAccount];\n2021-new_variable-259-259", type_label=new_variable];
2032 [label="259_ brandAccount = product.brandAccount;\n2032-expression_statement-260-260", type_label=expression_statement];
2038 [label="260_ appAccount = brand.appAccount;\n2038-expression_statement-261-261", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
137 -> 142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
171 -> 175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
195 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
215 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
263 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
286 -> 296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
296 -> 308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
308 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
337 -> 342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
375 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
423 -> 429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
429 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
455 -> 463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
463 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
691 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
717 -> 731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
750 -> 766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
766 -> 777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
777 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
841 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
872 -> 883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
889 -> 895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
895 -> 901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
901 -> 907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
944 -> 967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
967 -> 976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
976 -> 982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
982 -> 988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 1004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1008 -> 1020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1020 -> 1031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1031 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 1051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1051 -> 1062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1062 -> 1085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1085 -> 1092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 1122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1122 -> 1131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1131 -> 1142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1142 -> 1148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1148 -> 1154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1167 -> 1183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1189 -> 1212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1212 -> 1221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1221 -> 1232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1232 -> 1243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1243 -> 1254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1254 -> 1260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1260 -> 1266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1276 -> 1286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1286 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1290 -> 1314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1314 -> 1325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1325 -> 1336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1336 -> 1347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1347 -> 1358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1358 -> 1367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1367 -> 1378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1378 -> 1410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1410 -> 1417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1435 -> 1463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1463 -> 1472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1472 -> 1483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1483 -> 1494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1494 -> 1505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1505 -> 1516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1516 -> 1522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1522 -> 1528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1528 -> 1534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1534 -> 1540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1540 -> 1546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1563 -> 1579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1585 -> 1612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1612 -> 1621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1621 -> 1632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1632 -> 1641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1641 -> 1652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1652 -> 1663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1663 -> 1674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1674 -> 1680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1680 -> 1686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1686 -> 1692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1706 -> 1716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1716 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1720 -> 1732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1732 -> 1743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1743 -> 1754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1754 -> 1764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1775 -> 1789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1796 -> 1808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1808 -> 1817  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1817 -> 1832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1832 -> 1843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1843 -> 1858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1858 -> 1869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1869 -> 1884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1884 -> 1898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1898 -> 1903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1903 -> 1909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1909 -> 1932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1932 -> 1939  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1932 -> 3971  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3971 -> 1956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1939 -> 3971  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1956 -> 1961  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1956 -> 3995  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3995 -> 1974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1961 -> 3995  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1974 -> 1997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1997 -> 2006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2006 -> 2012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2012 -> 2021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2021 -> 2032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2032 -> 2038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
