digraph  {
12 [label="2_ add\n12-function_definition-3-6", type_label=function_definition];
30 [label="3_ c = a + b;\n30-expression_statement-4-4", type_label=expression_statement];
36 [label="4_ require(c >= a);\n36-expression_statement-5-5", type_label=expression_statement];
43 [label="6_ sub\n43-function_definition-7-10", type_label=function_definition];
61 [label="7_ require(b <= a);\n61-expression_statement-8-8", type_label=expression_statement];
68 [label="8_ c = a - b;\n68-expression_statement-9-9", type_label=expression_statement];
74 [label="10_ mul\n74-function_definition-11-14", type_label=function_definition];
92 [label="11_ c = a * b;\n92-expression_statement-12-12", type_label=expression_statement];
98 [label="12_ require(a == 0 || c / a == b);\n98-expression_statement-13-13", type_label=expression_statement];
111 [label="14_ div\n111-function_definition-15-18", type_label=function_definition];
129 [label="15_ require(b > 0);\n129-expression_statement-16-16", type_label=expression_statement];
136 [label="16_ c = a / b;\n136-expression_statement-17-17", type_label=expression_statement];
145 [label="20_ totalSupply\n145-function_definition-21-21", type_label=function_definition];
148 [label="20_ constant\n148-expression_statement-21-21", type_label=expression_statement];
154 [label="21_ balanceOf\n154-function_definition-22-22", type_label=function_definition];
161 [label="21_ constant\n161-expression_statement-22-22", type_label=expression_statement];
168 [label="22_ allowance\n168-function_definition-23-23", type_label=function_definition];
179 [label="22_ constant\n179-expression_statement-23-23", type_label=expression_statement];
186 [label="23_ transfer\n186-function_definition-24-24", type_label=function_definition];
202 [label="24_ approve\n202-function_definition-25-25", type_label=function_definition];
218 [label="25_ transferFrom\n218-function_definition-26-26", type_label=function_definition];
269 [label="30_ receiveApproval\n269-function_definition-31-31", type_label=function_definition];
291 [label="33_ address public owner;\n291-new_variable-34-34", type_label=new_variable];
296 [label="34_ address public newOwner;\n296-new_variable-35-35", type_label=new_variable];
313 [label="37_ owner = msg.sender;\n313-expression_statement-38-38", type_label=expression_statement];
319 [label="39_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n319-expression_statement-40-43", type_label=expression_statement];
322 [label="40_ require(msg.sender == owner);\n322-expression_statement-41-41", type_label=expression_statement];
331 [label="41_ _;\n331-expression_statement-42-42", type_label=expression_statement];
333 [label="43_ transferOwnership\n333-function_definition-44-46", type_label=function_definition];
340 [label="43_ onlyOwner\n340-expression_statement-44-44", type_label=expression_statement];
343 [label="44_ newOwner = _newOwner;\n343-expression_statement-45-45", type_label=expression_statement];
347 [label="46_ acceptOwnership\n347-function_definition-47-52", type_label=function_definition];
351 [label="47_ require(msg.sender == newOwner);\n351-expression_statement-48-48", type_label=expression_statement];
366 [label="49_ owner = newOwner;\n366-expression_statement-50-50", type_label=expression_statement];
370 [label="50_ newOwner = address(0);\n370-expression_statement-51-51", type_label=expression_statement];
390 [label="55_ string public constant name = \"Metha\";\n390-new_variable-56-56", type_label=new_variable];
397 [label="56_ string public constant symbol = \"METH\";\n397-new_variable-57-57", type_label=new_variable];
404 [label="57_ uint8 public constant decimals = 18;\n404-new_variable-58-58", type_label=new_variable];
410 [label="58_ uint public _totalSupply = 0;\n410-new_variable-59-59", type_label=new_variable];
416 [label="59_ uint public constant eth_meth = 100;\n416-new_variable-60-60", type_label=new_variable];
422 [label="60_ mapping(address => uint) balances;\n422-new_variable-61-61", type_label=new_variable];
428 [label="61_ mapping(address => mapping(address => uint)) allowed;\n428-new_variable-62-62", type_label=new_variable];
438 [label="64_ totalSupply\n438-function_definition-65-67", type_label=function_definition];
441 [label="64_ constant\n441-expression_statement-65-65", type_label=expression_statement];
448 [label="65_ return _totalSupply;\n448-return-66-66", type_label=return];
450 [label="67_ convertToMeth\n450-function_definition-68-72", type_label=function_definition];
455 [label="68_ uint tokens = msg.value * eth_meth;\n455-new_variable-69-69", type_label=new_variable];
465 [label="69_ balances[msg.sender] = balances[msg.sender].add(tokens);\n465-expression_statement-70-70", type_label=expression_statement];
482 [label="70_ _totalSupply = _totalSupply.add(tokens);\n482-expression_statement-71-71", type_label=expression_statement];
495 [label="73_ convertToMeth();\n495-expression_statement-74-74", type_label=expression_statement];
498 [label="75_ convertToEth\n498-function_definition-76-83", type_label=function_definition];
505 [label="76_ onlyPayloadSize(1 * 32)\n505-expression_statement-77-77", type_label=expression_statement];
517 [label="78_ balances[msg.sender] = balances[msg.sender].sub(amount);\n517-expression_statement-79-79", type_label=expression_statement];
534 [label="79_ _totalSupply = _totalSupply.sub(amount);\n534-expression_statement-80-80", type_label=expression_statement];
543 [label="80_ msg.sender.transfer(amount / eth_meth);\n543-expression_statement-81-81", type_label=expression_statement];
554 [label="81_ return true;\n554-return-82-82", type_label=return];
557 [label="83_ balanceOf\n557-function_definition-84-86", type_label=function_definition];
564 [label="83_ constant\n564-expression_statement-84-84", type_label=expression_statement];
572 [label="84_ return balances[tokenOwner];\n572-return-85-85", type_label=return];
576 [label="86_ modifier onlyPayloadSize(uint size) {\n         assert(msg.data.length >= size + 4);\n         _;\n     }\n576-expression_statement-87-90", type_label=expression_statement];
583 [label="87_ assert(msg.data.length >= size + 4);\n583-expression_statement-88-88", type_label=expression_statement];
596 [label="88_ _;\n596-expression_statement-89-89", type_label=expression_statement];
598 [label="90_ transfer\n598-function_definition-91-98", type_label=function_definition];
609 [label="91_ onlyPayloadSize(2 * 32)\n609-expression_statement-92-92", type_label=expression_statement];
621 [label="93_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n621-expression_statement-94-94", type_label=expression_statement];
638 [label="94_ balances[to] = balances[to].add(tokens);\n638-expression_statement-95-95", type_label=expression_statement];
661 [label="96_ return true;\n661-return-97-97", type_label=return];
664 [label="98_ approve\n664-function_definition-99-105", type_label=function_definition];
675 [label="99_ onlyPayloadSize(2 * 32)\n675-expression_statement-100-100", type_label=expression_statement];
687 [label="101_ allowed[msg.sender][spender] = tokens;\n687-expression_statement-102-102", type_label=expression_statement];
707 [label="103_ return true;\n707-return-104-104", type_label=return];
710 [label="105_ transferFrom\n710-function_definition-106-114", type_label=function_definition];
725 [label="106_ onlyPayloadSize(3 * 32)\n725-expression_statement-107-107", type_label=expression_statement];
737 [label="108_ balances[from] = balances[from].sub(tokens);\n737-expression_statement-109-109", type_label=expression_statement];
750 [label="109_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n750-expression_statement-110-110", type_label=expression_statement];
771 [label="110_ balances[to] = balances[to].add(tokens);\n771-expression_statement-111-111", type_label=expression_statement];
792 [label="112_ return true;\n792-return-113-113", type_label=return];
795 [label="114_ allowance\n795-function_definition-115-118", type_label=function_definition];
806 [label="114_ constant\n806-expression_statement-115-115", type_label=expression_statement];
814 [label="116_ return allowed[tokenOwner][spender];\n814-return-117-117", type_label=return];
820 [label="118_ approveAndCall\n820-function_definition-119-126", type_label=function_definition];
835 [label="119_ onlyPayloadSize(3 * 32)\n835-expression_statement-120-120", type_label=expression_statement];
847 [label="121_ allowed[msg.sender][spender] = tokens;\n847-expression_statement-122-122", type_label=expression_statement];
867 [label="123_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n867-expression_statement-124-124", type_label=expression_statement];
885 [label="124_ return true;\n885-return-125-125", type_label=return];
888 [label="126_ transferAnyERC20Token\n888-function_definition-127-129", type_label=function_definition];
899 [label="126_ onlyOwner\n899-expression_statement-127-127", type_label=expression_statement];
907 [label="127_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n907-return-128-128", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
12 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
43 -> 61  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
61 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
74 -> 92  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
92 -> 98  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
111 -> 129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
291 -> 296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
347 -> 351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
390 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
404 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
416 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
422 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
438 -> 448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
448 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
450 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
455 -> 465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
465 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
517 -> 534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
534 -> 543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
543 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
554 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
557 -> 572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
572 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
583 -> 596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
598 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
661 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
664 -> 687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
710 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
750 -> 771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
792 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
795 -> 814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
814 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
820 -> 847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
867 -> 885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
888 -> 907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
907 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
