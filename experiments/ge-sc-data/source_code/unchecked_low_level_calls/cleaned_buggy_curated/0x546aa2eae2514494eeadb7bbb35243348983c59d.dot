digraph  {
12 [label="2_ owner\n12-function_definition-3-3", type_label=function_definition];
19 [label="2_ constant\n19-expression_statement-3-3", type_label=expression_statement];
25 [label="3_ resolver\n25-function_definition-4-4", type_label=function_definition];
32 [label="3_ constant\n32-expression_statement-4-4", type_label=expression_statement];
38 [label="4_ ttl\n38-function_definition-5-5", type_label=function_definition];
45 [label="4_ constant\n45-expression_statement-5-5", type_label=expression_statement];
51 [label="5_ setOwner\n51-function_definition-6-6", type_label=function_definition];
62 [label="6_ setSubnodeOwner\n62-function_definition-7-7", type_label=function_definition];
77 [label="7_ setResolver\n77-function_definition-8-8", type_label=function_definition];
88 [label="8_ setTTL\n88-function_definition-9-9", type_label=function_definition];
146 [label="15_ supportsInterface\n146-function_definition-16-16", type_label=function_definition];
152 [label="15_ constant\n152-expression_statement-16-16", type_label=expression_statement];
158 [label="16_ addr\n158-function_definition-17-17", type_label=function_definition];
164 [label="16_ constant\n164-expression_statement-17-17", type_label=expression_statement];
171 [label="17_ setAddr\n171-function_definition-18-18", type_label=function_definition];
181 [label="18_ hash\n181-function_definition-19-19", type_label=function_definition];
187 [label="18_ constant\n187-expression_statement-19-19", type_label=expression_statement];
194 [label="19_ setHash\n194-function_definition-20-20", type_label=function_definition];
207 [label="22_ register\n207-function_definition-23-23", type_label=function_definition];
218 [label="23_ registerWithResolver\n218-function_definition-24-24", type_label=function_definition];
240 [label="26_ bytes32 public rootNode;\n240-new_variable-27-27", type_label=new_variable];
245 [label="27_ AbstractENS internal ens;\n245-new_variable-28-28", type_label=new_variable];
251 [label="28_ IPublicResolver internal defaultResolver;\n251-new_variable-29-29", type_label=new_variable];
257 [label="29_ bytes4 private constant ADDR_INTERFACE_ID = 0x3b3b57de;\n257-new_variable-30-30", type_label=new_variable];
293 [label="34_ ens = _ensAddr;\n293-expression_statement-35-35", type_label=expression_statement];
297 [label="35_ defaultResolver = _defaultResolver;\n297-expression_statement-36-36", type_label=expression_statement];
301 [label="36_ rootNode = _node;\n301-expression_statement-37-37", type_label=expression_statement];
305 [label="38_ register\n305-function_definition-39-41", type_label=function_definition];
317 [label="39_ registerWithResolver(_subnode, _owner, defaultResolver);\n317-expression_statement-40-40", type_label=expression_statement];
326 [label="41_ registerWithResolver\n326-function_definition-42-53", type_label=function_definition];
343 [label="42_ bytes32 node = keccak256(rootNode, _subnode);\n343-new_variable-43-43", type_label=new_variable];
354 [label="43_ address currentOwner = ens.owner(node);\n354-new_variable-44-44", type_label=new_variable];
365 [label="44_ require(currentOwner == address(0));\n365-expression_statement-45-45", type_label=expression_statement];
374 [label="45_ ens.setSubnodeOwner(rootNode, _subnode, address(this));\n374-expression_statement-46-46", type_label=expression_statement];
387 [label="46_ ens.setResolver(node, _resolver);\n387-expression_statement-47-47", type_label=expression_statement];
396 [label="47_ if\n396-if-48-50", type_label=if];
823 [label="47_ end_if", type_label=end_if];
404 [label="48_ _resolver.setAddr(node, _owner);\n404-expression_statement-49-49", type_label=expression_statement];
413 [label="50_ ens.setOwner(node, _owner);\n413-expression_statement-51-51", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
240 -> 245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
245 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
293 -> 297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
297 -> 301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
305 -> 317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
326 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
354 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
374 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 404  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
396 -> 823  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
823 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
404 -> 823  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
