digraph  {
13 [label="2_ mul\n13-function_definition-3-10", type_label=function_definition];
31 [label="3_ if__a == 0\n31-if-4-6", type_label=if];
36 [label="4_ return 0;\n36-return-5-5", type_label=return];
38 [label="6_ c = _a * _b;\n38-expression_statement-7-7", type_label=expression_statement];
44 [label="7_ assert(c / _a == _b);\n44-expression_statement-8-8", type_label=expression_statement];
53 [label="8_ return c;\n53-return-9-9", type_label=return];
55 [label="10_ div\n55-function_definition-11-13", type_label=function_definition];
72 [label="11_ return _a / _b;\n72-return-12-12", type_label=return];
76 [label="13_ sub\n76-function_definition-14-17", type_label=function_definition];
93 [label="14_ assert(_b <= _a);\n93-expression_statement-15-15", type_label=expression_statement];
100 [label="15_ return _a - _b;\n100-return-16-16", type_label=return];
104 [label="17_ add\n104-function_definition-18-22", type_label=function_definition];
122 [label="18_ c = _a + _b;\n122-expression_statement-19-19", type_label=expression_statement];
128 [label="19_ assert(c >= _a);\n128-expression_statement-20-20", type_label=expression_statement];
135 [label="20_ return c;\n135-return-21-21", type_label=return];
140 [label="24_ totalSupply\n140-function_definition-25-25", type_label=function_definition];
148 [label="25_ balanceOf\n148-function_definition-26-26", type_label=function_definition];
160 [label="26_ transfer\n160-function_definition-27-27", type_label=function_definition];
195 [label="30_ allowance\n195-function_definition-31-32", type_label=function_definition];
211 [label="32_ transferFrom\n211-function_definition-33-34", type_label=function_definition];
230 [label="34_ approve\n230-function_definition-35-35", type_label=function_definition];
270 [label="43_ mapping(address => uint256) internal balances;\n270-new_variable-44-44", type_label=new_variable];
277 [label="44_ uint256 internal totalSupply_;\n277-new_variable-45-45", type_label=new_variable];
282 [label="45_ totalSupply\n282-function_definition-46-48", type_label=function_definition];
291 [label="46_ return totalSupply_;\n291-return-47-47", type_label=return];
293 [label="48_ transfer\n293-function_definition-49-56", type_label=function_definition];
309 [label="49_ require(_value <= balances[msg.sender]);\n309-expression_statement-50-50", type_label=expression_statement];
320 [label="50_ require(_to != address(0));\n320-expression_statement-51-51", type_label=expression_statement];
329 [label="51_ balances[msg.sender] = balances[msg.sender].sub(_value);\n329-expression_statement-52-52", type_label=expression_statement];
346 [label="52_ balances[_to] = balances[_to].add(_value);\n346-expression_statement-53-53", type_label=expression_statement];
369 [label="54_ return true;\n369-return-55-55", type_label=return];
372 [label="56_ balanceOf\n372-function_definition-57-59", type_label=function_definition];
385 [label="57_ return balances[_owner];\n385-return-58-58", type_label=return];
398 [label="61_ mapping (address => mapping (address => uint256)) internal allowed;\n398-new_variable-62-62", type_label=new_variable];
407 [label="62_ transferFrom\n407-function_definition-63-79", type_label=function_definition];
427 [label="70_ require(_value <= balances[_from]);\n427-expression_statement-71-71", type_label=expression_statement];
436 [label="71_ require(_value <= allowed[_from][msg.sender]);\n436-expression_statement-72-72", type_label=expression_statement];
449 [label="72_ require(_to != address(0));\n449-expression_statement-73-73", type_label=expression_statement];
458 [label="73_ balances[_from] = balances[_from].sub(_value);\n458-expression_statement-74-74", type_label=expression_statement];
471 [label="74_ balances[_to] = balances[_to].add(_value);\n471-expression_statement-75-75", type_label=expression_statement];
484 [label="75_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n484-expression_statement-76-76", type_label=expression_statement];
513 [label="77_ return true;\n513-return-78-78", type_label=return];
516 [label="79_ approve\n516-function_definition-80-84", type_label=function_definition];
532 [label="80_ allowed[msg.sender][_spender] = _value;\n532-expression_statement-81-81", type_label=expression_statement];
552 [label="82_ return true;\n552-return-83-83", type_label=return];
555 [label="84_ allowance\n555-function_definition-85-94", type_label=function_definition];
572 [label="92_ return allowed[_owner][_spender];\n572-return-93-93", type_label=return];
578 [label="94_ increaseApproval\n578-function_definition-95-106", type_label=function_definition];
594 [label="101_ allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n594-expression_statement-102-103", type_label=expression_statement];
632 [label="104_ return true;\n632-return-105-105", type_label=return];
635 [label="106_ decreaseApproval\n635-function_definition-107-122", type_label=function_definition];
651 [label="113_ uint256 oldValue = allowed[msg.sender][_spender];\n651-new_variable-114-114", type_label=new_variable];
652 [label="113_ uint256 oldValue\n652-new_variable-114-114", type_label=new_variable];
663 [label="114_ if__subtractedValue >= oldValue\n663-if-115-119", type_label=if];
668 [label="115_ allowed[msg.sender][_spender] = 0;\n668-expression_statement-116-116", type_label=expression_statement];
679 [label="117_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n679-expression_statement-118-118", type_label=expression_statement];
710 [label="120_ return true;\n710-return-121-121", type_label=return];
716 [label="124_ address public owner;\n716-new_variable-125-125", type_label=new_variable];
739 [label="131_ owner = msg.sender;\n739-expression_statement-132-132", type_label=expression_statement];
745 [label="133_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n745-expression_statement-134-137", type_label=expression_statement];
748 [label="134_ require(msg.sender == owner);\n748-expression_statement-135-135", type_label=expression_statement];
757 [label="135_ _;\n757-expression_statement-136-136", type_label=expression_statement];
759 [label="137_ renounceOwnership\n759-function_definition-138-141", type_label=function_definition];
762 [label="137_ onlyOwner\n762-expression_statement-138-138", type_label=expression_statement];
769 [label="139_ owner = address(0);\n769-expression_statement-140-140", type_label=expression_statement];
775 [label="141_ transferOwnership\n775-function_definition-142-144", type_label=function_definition];
782 [label="141_ onlyOwner\n782-expression_statement-142-142", type_label=expression_statement];
785 [label="142_ _transferOwnership(_newOwner);\n785-expression_statement-143-143", type_label=expression_statement];
790 [label="144_ _transferOwnership\n790-function_definition-145-149", type_label=function_definition];
798 [label="145_ require(_newOwner != address(0));\n798-expression_statement-146-146", type_label=expression_statement];
813 [label="147_ owner = _newOwner;\n813-expression_statement-148-148", type_label=expression_statement];
826 [label="151_ string public name;\n826-new_variable-152-152", type_label=new_variable];
831 [label="152_ uint8 public decimals;\n831-new_variable-153-153", type_label=new_variable];
836 [label="153_ string public symbol;\n836-new_variable-154-154", type_label=new_variable];
841 [label="154_ string public version = 'H1.0';\n841-new_variable-155-155", type_label=new_variable];
848 [label="155_ struct UserHistory{\n    address rUser;   \n    string word1;    \n    string word2;    \n  }\n848-expression_statement-156-160", type_label=expression_statement];
862 [label="160_ mapping (uint256 => UserHistory) private hisList;\n862-new_variable-161-161", type_label=new_variable];
870 [label="161_ uint256 private hisCount;\n870-new_variable-162-162", type_label=new_variable];
877 [label="163_ totalSupply_ = 3850000000 * 1 ether;\n877-expression_statement-164-164", type_label=expression_statement];
884 [label="164_ balances[msg.sender] = totalSupply_;\n884-expression_statement-165-165", type_label=expression_statement];
892 [label="165_ name = \"Gentrion\";\n892-expression_statement-166-166", type_label=expression_statement];
897 [label="166_ decimals = 18;\n897-expression_statement-167-167", type_label=expression_statement];
901 [label="167_ symbol = \"GENT\";\n901-expression_statement-168-168", type_label=expression_statement];
906 [label="169_ addTokenInfo\n906-function_definition-170-175", type_label=function_definition];
924 [label="169_ onlyOwner\n924-expression_statement-170-170", type_label=expression_statement];
928 [label="170_ if\n928-if-171-174", type_label=if];
936 [label="171_ hisList[hisCount] = UserHistory(_toAddress, _word1, _word2);\n936-expression_statement-172-172", type_label=expression_statement];
949 [label="172_ hisCount++;\n949-expression_statement-173-173", type_label=expression_statement];
950 [label="172_ hisCount++\n950-expression_statement-173-173", type_label=expression_statement];
952 [label="175_ getTokenInfo\n952-function_definition-176-178", type_label=function_definition];
958 [label="175_ onlyOwner\n958-expression_statement-176-176", type_label=expression_statement];
973 [label="176_ return (hisList[_id].rUser, hisList[_id].word1,hisList[_id].word2);\n973-return-177-177", type_label=return];
990 [label="178_ getTokenInfoCount\n990-function_definition-179-181", type_label=function_definition];
992 [label="178_ onlyOwner\n992-expression_statement-179-179", type_label=expression_statement];
1001 [label="179_ return hisCount;\n1001-return-180-180", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
694;
13 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 36  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
31 -> 38  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
36 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
38 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
55 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
76 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
104 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
135 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
270 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
282 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
291 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
293 -> 309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
309 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
369 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
372 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
407 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
516 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
552 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
555 -> 572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
572 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
578 -> 594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
635 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
651 -> 663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 668  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
663 -> 679  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
668 -> 694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
710 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
748 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
759 -> 769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
775 -> 785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
790 -> 798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
826 -> 831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
831 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
841 -> 848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
848 -> 862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
862 -> 870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
884 -> 892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
892 -> 897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
897 -> 901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
928 -> 936  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
928 -> 952  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
936 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
952 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
973 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
990 -> 1001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1001 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
