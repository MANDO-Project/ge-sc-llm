digraph  {
13 [label="2_ receiveApproval\n13-function_definition-3-3", type_label=function_definition];
35 [label="5_ bug_txorigin20\n35-function_definition-6-8", type_label=function_definition];
43 [label="6_ require(tx.origin == owner_txorigin20);\n43-expression_statement-7-7", type_label=expression_statement];
52 [label="8_ string public name;\n52-new_variable-9-9", type_label=new_variable];
57 [label="9_ bug_txorigin32\n57-function_definition-10-12", type_label=function_definition];
65 [label="10_ require(tx.origin == owner_txorigin32);\n65-expression_statement-11-11", type_label=expression_statement];
74 [label="12_ string public symbol;\n74-new_variable-13-13", type_label=new_variable];
79 [label="13_ withdrawAll_txorigin38\n79-function_definition-14-17", type_label=function_definition];
91 [label="14_ require(tx.origin == owner_txorigin38);\n91-expression_statement-15-15", type_label=expression_statement];
100 [label="15_ _recipient.transfer(address(this).balance);\n100-expression_statement-16-16", type_label=expression_statement];
111 [label="17_ uint8 public decimals = 18;\n111-new_variable-18-18", type_label=new_variable];
117 [label="18_ bug_txorigin4\n117-function_definition-19-21", type_label=function_definition];
125 [label="19_ require(tx.origin == owner_txorigin4);\n125-expression_statement-20-20", type_label=expression_statement];
134 [label="21_ uint256 public totalSupply;\n134-new_variable-22-22", type_label=new_variable];
139 [label="22_ transferTo_txorigin7\n139-function_definition-23-26", type_label=function_definition];
155 [label="23_ require(tx.origin == owner_txorigin7);\n155-expression_statement-24-24", type_label=expression_statement];
164 [label="24_ to.call.value(amount);\n164-expression_statement-25-25", type_label=expression_statement];
173 [label="26_ mapping (address => uint256) public balanceOf;\n173-new_variable-27-27", type_label=new_variable];
180 [label="27_ transferTo_txorigin23\n180-function_definition-28-31", type_label=function_definition];
196 [label="28_ require(tx.origin == owner_txorigin23);\n196-expression_statement-29-29", type_label=expression_statement];
205 [label="29_ to.call.value(amount);\n205-expression_statement-30-30", type_label=expression_statement];
214 [label="31_ mapping (address => mapping (address => uint256)) public allowance;\n214-new_variable-32-32", type_label=new_variable];
223 [label="32_ transferTo_txorigin27\n223-function_definition-33-36", type_label=function_definition];
239 [label="33_ require(tx.origin == owner_txorigin27);\n239-expression_statement-34-34", type_label=expression_statement];
248 [label="34_ to.call.value(amount);\n248-expression_statement-35-35", type_label=expression_statement];
271 [label="37_ transferTo_txorigin31\n271-function_definition-38-41", type_label=function_definition];
287 [label="38_ require(tx.origin == owner_txorigin31);\n287-expression_statement-39-39", type_label=expression_statement];
296 [label="39_ to.call.value(amount);\n296-expression_statement-40-40", type_label=expression_statement];
319 [label="42_ sendto_txorigin13\n319-function_definition-43-46", type_label=function_definition];
335 [label="43_ require (tx.origin == owner_txorigin13);\n335-expression_statement-44-44", type_label=expression_statement];
344 [label="44_ receiver.transfer(amount);\n344-expression_statement-45-45", type_label=expression_statement];
375 [label="52_ totalSupply = initialSupply * 10 ** uint256(decimals);\n375-expression_statement-53-53", type_label=expression_statement];
385 [label="53_ balanceOf[msg.sender] = totalSupply;\n385-expression_statement-54-54", type_label=expression_statement];
393 [label="54_ name = tokenName;\n393-expression_statement-55-55", type_label=expression_statement];
397 [label="55_ symbol = tokenSymbol;\n397-expression_statement-56-56", type_label=expression_statement];
401 [label="57_ withdrawAll_txorigin14\n401-function_definition-58-61", type_label=function_definition];
413 [label="58_ require(tx.origin == owner_txorigin14);\n413-expression_statement-59-59", type_label=expression_statement];
422 [label="59_ _recipient.transfer(address(this).balance);\n422-expression_statement-60-60", type_label=expression_statement];
433 [label="61_ _transfer\n433-function_definition-62-71", type_label=function_definition];
449 [label="62_ require(_to != address(0x0));\n449-expression_statement-63-63", type_label=expression_statement];
458 [label="63_ require(balanceOf[_from] >= _value);\n458-expression_statement-64-64", type_label=expression_statement];
467 [label="64_ require(balanceOf[_to] + _value >= balanceOf[_to]);\n467-expression_statement-65-65", type_label=expression_statement];
480 [label="65_ uint previousBalances = balanceOf[_from] + balanceOf[_to];\n480-new_variable-66-66", type_label=new_variable];
481 [label="65_ uint previousBalances\n481-new_variable-66-66", type_label=new_variable];
492 [label="66_ balanceOf[_from] -= _value;\n492-expression_statement-67-67", type_label=expression_statement];
493 [label="66_ balanceOf[_from] -= _value\n493-expression_statement-67-67", type_label=expression_statement];
498 [label="67_ balanceOf[_to] += _value;\n498-expression_statement-68-68", type_label=expression_statement];
499 [label="67_ balanceOf[_to] += _value\n499-expression_statement-68-68", type_label=expression_statement];
512 [label="69_ assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n512-expression_statement-70-70", type_label=expression_statement];
525 [label="71_ withdrawAll_txorigin30\n525-function_definition-72-75", type_label=function_definition];
537 [label="72_ require(tx.origin == owner_txorigin30);\n537-expression_statement-73-73", type_label=expression_statement];
546 [label="73_ _recipient.transfer(address(this).balance);\n546-expression_statement-74-74", type_label=expression_statement];
557 [label="75_ transfer\n557-function_definition-76-79", type_label=function_definition];
574 [label="76_ _transfer(msg.sender, _to, _value);\n574-expression_statement-77-77", type_label=expression_statement];
585 [label="77_ return true;\n585-return-78-78", type_label=return];
588 [label="79_ bug_txorigin8\n588-function_definition-80-82", type_label=function_definition];
596 [label="80_ require(tx.origin == owner_txorigin8);\n596-expression_statement-81-81", type_label=expression_statement];
605 [label="82_ transferFrom\n605-function_definition-83-88", type_label=function_definition];
626 [label="83_ require(_value <= allowance[_from][msg.sender]);\n626-expression_statement-84-84", type_label=expression_statement];
639 [label="84_ allowance[_from][msg.sender] -= _value;\n639-expression_statement-85-85", type_label=expression_statement];
640 [label="84_ allowance[_from][msg.sender] -= _value\n640-expression_statement-85-85", type_label=expression_statement];
649 [label="85_ _transfer(_from, _to, _value);\n649-expression_statement-86-86", type_label=expression_statement];
658 [label="86_ return true;\n658-return-87-87", type_label=return];
661 [label="88_ transferTo_txorigin39\n661-function_definition-89-92", type_label=function_definition];
677 [label="89_ require(tx.origin == owner_txorigin39);\n677-expression_statement-90-90", type_label=expression_statement];
686 [label="90_ to.call.value(amount);\n686-expression_statement-91-91", type_label=expression_statement];
695 [label="92_ approve\n695-function_definition-93-98", type_label=function_definition];
712 [label="94_ allowance[msg.sender][_spender] = _value;\n712-expression_statement-95-95", type_label=expression_statement];
732 [label="96_ return true;\n732-return-97-97", type_label=return];
735 [label="98_ bug_txorigin36\n735-function_definition-99-101", type_label=function_definition];
743 [label="99_ require(tx.origin == owner_txorigin36);\n743-expression_statement-100-100", type_label=expression_statement];
752 [label="101_ approveAndCall\n752-function_definition-102-110", type_label=function_definition];
773 [label="104_ tokenRecipient spender = tokenRecipient(_spender);\n773-new_variable-105-105", type_label=new_variable];
774 [label="104_ tokenRecipient spender\n774-new_variable-105-105", type_label=new_variable];
783 [label="105_ if\n783-if-106-109", type_label=if];
1787 [label="105_ end_if", type_label=end_if];
791 [label="106_ spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n791-expression_statement-107-107", type_label=expression_statement];
808 [label="107_ return true;\n808-return-108-108", type_label=return];
811 [label="110_ transferTo_txorigin35\n811-function_definition-111-114", type_label=function_definition];
827 [label="111_ require(tx.origin == owner_txorigin35);\n827-expression_statement-112-112", type_label=expression_statement];
836 [label="112_ to.call.value(amount);\n836-expression_statement-113-113", type_label=expression_statement];
845 [label="114_ burn\n845-function_definition-115-121", type_label=function_definition];
858 [label="115_ require(balanceOf[msg.sender] >= _value);\n858-expression_statement-116-116", type_label=expression_statement];
869 [label="116_ balanceOf[msg.sender] -= _value;\n869-expression_statement-117-117", type_label=expression_statement];
870 [label="116_ balanceOf[msg.sender] -= _value\n870-expression_statement-117-117", type_label=expression_statement];
877 [label="117_ totalSupply -= _value;\n877-expression_statement-118-118", type_label=expression_statement];
878 [label="117_ totalSupply -= _value\n878-expression_statement-118-118", type_label=expression_statement];
889 [label="119_ return true;\n889-return-120-120", type_label=return];
892 [label="121_ bug_txorigin40\n892-function_definition-122-124", type_label=function_definition];
900 [label="122_ require(tx.origin == owner_txorigin40);\n900-expression_statement-123-123", type_label=expression_statement];
909 [label="124_ burnFrom\n909-function_definition-125-133", type_label=function_definition];
926 [label="125_ require(balanceOf[_from] >= _value);\n926-expression_statement-126-126", type_label=expression_statement];
935 [label="126_ require(_value <= allowance[_from][msg.sender]);\n935-expression_statement-127-127", type_label=expression_statement];
948 [label="127_ balanceOf[_from] -= _value;\n948-expression_statement-128-128", type_label=expression_statement];
949 [label="127_ balanceOf[_from] -= _value\n949-expression_statement-128-128", type_label=expression_statement];
954 [label="128_ allowance[_from][msg.sender] -= _value;\n954-expression_statement-129-129", type_label=expression_statement];
955 [label="128_ allowance[_from][msg.sender] -= _value\n955-expression_statement-129-129", type_label=expression_statement];
964 [label="129_ totalSupply -= _value;\n964-expression_statement-130-130", type_label=expression_statement];
965 [label="129_ totalSupply -= _value\n965-expression_statement-130-130", type_label=expression_statement];
974 [label="131_ return true;\n974-return-132-132", type_label=return];
977 [label="133_ sendto_txorigin33\n977-function_definition-134-137", type_label=function_definition];
993 [label="134_ require (tx.origin == owner_txorigin33);\n993-expression_statement-135-135", type_label=expression_statement];
1002 [label="135_ receiver.transfer(amount);\n1002-expression_statement-136-136", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
"(1787, (105, 8), (108, 9))";
35 -> 43  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
57 -> 65  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
79 -> 91  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
91 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
117 -> 125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
196 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
239 -> 248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
271 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
319 -> 335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
335 -> 344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
375 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
413 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
492 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
557 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
574 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
588 -> 596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
605 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
626 -> 639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
649 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
661 -> 677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
695 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
732 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
735 -> 743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
783 -> 791  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
783 -> "(1787, (105, 8), (108, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
791 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> "(1787, (105, 8), (108, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
808 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
811 -> 827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
827 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
858 -> 869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
869 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
889 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
892 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
909 -> 926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
926 -> 935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
954 -> 964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
974 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
977 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 1002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(1787, (105, 8), (108, 9))" -> 811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(1787, (105, 8), (108, 9))" -> 811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
}
