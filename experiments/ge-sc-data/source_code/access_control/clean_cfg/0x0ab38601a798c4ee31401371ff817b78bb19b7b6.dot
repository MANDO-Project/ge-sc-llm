digraph  {
13 [label="2_ balanceOf\n13-function_definition-3-3", type_label=function_definition];
25 [label="3_ transferFrom\n25-function_definition-4-4", type_label=function_definition];
44 [label="4_ allowance\n44-function_definition-5-5", type_label=function_definition];
60 [label="5_ burn\n60-function_definition-6-6", type_label=function_definition];
84 [label="9_ ERC20Interface public manaToken;\n84-new_variable-10-10", type_label=new_variable];
90 [label="10_ uint256 public price = 100000000000000000000;\n90-new_variable-11-11", type_label=new_variable];
96 [label="11_ mapping (bytes32 => address) nameToAddress;\n96-new_variable-12-12", type_label=new_variable];
102 [label="12_ mapping (bytes32 => address) userIdToAddress;\n102-new_variable-13-13", type_label=new_variable];
108 [label="13_ mapping (address => bytes32) public name;\n108-new_variable-14-14", type_label=new_variable];
115 [label="14_ address public owner;\n115-new_variable-15-15", type_label=new_variable];
127 [label="16_ manaToken = _mana;\n127-expression_statement-17-17", type_label=expression_statement];
131 [label="17_ owner = msg.sender;\n131-expression_statement-18-18", type_label=expression_statement];
137 [label="19_ modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n}\n137-expression_statement-20-23", type_label=expression_statement];
140 [label="20_ require(msg.sender == owner);\n140-expression_statement-21-21", type_label=expression_statement];
149 [label="21_ _;\n149-expression_statement-22-22", type_label=expression_statement];
151 [label="23_ registerUsername\n151-function_definition-24-34", type_label=function_definition];
165 [label="23_ onlyOwner\n165-expression_statement-24-24", type_label=expression_statement];
169 [label="24_ _requireBalance();\n169-expression_statement-25-25", type_label=expression_statement];
172 [label="25_ require(isNameAvailable(_name), \"The name was already taken\");\n172-expression_statement-26-26", type_label=expression_statement];
183 [label="26_ require(isUserIdAvailable(_userId), \"The userId already has a name\");\n183-expression_statement-27-27", type_label=expression_statement];
194 [label="27_ manaToken.transferFrom(_targetAddress, address(this), price);\n194-expression_statement-28-28", type_label=expression_statement];
207 [label="28_ manaToken.burn(price);\n207-expression_statement-29-29", type_label=expression_statement];
214 [label="29_ nameToAddress[_name] = _targetAddress;\n214-expression_statement-30-30", type_label=expression_statement];
220 [label="30_ userIdToAddress[_userId] = _targetAddress;\n220-expression_statement-31-31", type_label=expression_statement];
226 [label="31_ name[_targetAddress] = _name;\n226-expression_statement-32-32", type_label=expression_statement];
240 [label="34_ isNameAvailable\n240-function_definition-35-37", type_label=function_definition];
253 [label="35_ return nameToAddress[_name] == address(0);\n253-return-36-36", type_label=return];
261 [label="37_ isUserIdAvailable\n261-function_definition-38-40", type_label=function_definition];
274 [label="38_ return userIdToAddress[_name] == address(0);\n274-return-39-39", type_label=return];
282 [label="40_ setPrice\n282-function_definition-41-43", type_label=function_definition];
288 [label="40_ onlyOwner\n288-expression_statement-41-41", type_label=expression_statement];
292 [label="41_ price = _price;\n292-expression_statement-42-42", type_label=expression_statement];
296 [label="43_ _requireBalance\n296-function_definition-44-53", type_label=function_definition];
301 [label="44_ require(\n        manaToken.balanceOf(msg.sender) >= price,\n        \"Insufficient funds\"\n    );\n301-expression_statement-45-48", type_label=expression_statement];
318 [label="48_ require(\n        manaToken.allowance(msg.sender, address(this)) >= price,\n        \"The contract is not authorized to use MANA on sender behalf\"\n    );\n318-expression_statement-49-52", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
84 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
90 -> 96  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
96 -> 102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
102 -> 108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
108 -> 115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
169 -> 172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
172 -> 183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
183 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
194 -> 207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
240 -> 253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
253 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
261 -> 274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
274 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
282 -> 292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
296 -> 301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
301 -> 318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
