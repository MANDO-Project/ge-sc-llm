digraph  {
13 [label="2_ totalSupply\n13-function_definition-3-3", type_label=function_definition];
21 [label="3_ balanceOf\n21-function_definition-4-4", type_label=function_definition];
33 [label="4_ allowance\n33-function_definition-5-5", type_label=function_definition];
49 [label="5_ transfer\n49-function_definition-6-6", type_label=function_definition];
64 [label="6_ approve\n64-function_definition-7-7", type_label=function_definition];
79 [label="7_ transferFrom\n79-function_definition-8-8", type_label=function_definition];
129 [label="12_ mul\n129-function_definition-13-20", type_label=function_definition];
146 [label="13_ if_a == 0\n146-if-14-16", type_label=if];
3008 [label="13_ end_if", type_label=end_if];
151 [label="14_ return 0;\n151-return-15-15", type_label=return];
153 [label="16_ uint256 c = a * b;\n153-new_variable-17-17", type_label=new_variable];
154 [label="16_ uint256 c\n154-new_variable-17-17", type_label=new_variable];
161 [label="17_ assert(c / a == b);\n161-expression_statement-18-18", type_label=expression_statement];
170 [label="18_ return c;\n170-return-19-19", type_label=return];
172 [label="20_ div\n172-function_definition-21-24", type_label=function_definition];
189 [label="21_ uint256 c = a / b;\n189-new_variable-22-22", type_label=new_variable];
190 [label="21_ uint256 c\n190-new_variable-22-22", type_label=new_variable];
197 [label="22_ return c;\n197-return-23-23", type_label=return];
199 [label="24_ sub\n199-function_definition-25-28", type_label=function_definition];
216 [label="25_ assert(b <= a);\n216-expression_statement-26-26", type_label=expression_statement];
223 [label="26_ return a - b;\n223-return-27-27", type_label=return];
227 [label="28_ add\n227-function_definition-29-33", type_label=function_definition];
244 [label="29_ uint256 c = a + b;\n244-new_variable-30-30", type_label=new_variable];
245 [label="29_ uint256 c\n245-new_variable-30-30", type_label=new_variable];
252 [label="30_ assert(c >= a);\n252-expression_statement-31-31", type_label=expression_statement];
259 [label="31_ return c;\n259-return-32-32", type_label=return];
261 [label="33_ ceil\n261-function_definition-34-38", type_label=function_definition];
278 [label="34_ uint256 c = add(a,m);\n278-new_variable-35-35", type_label=new_variable];
279 [label="34_ uint256 c\n279-new_variable-35-35", type_label=new_variable];
289 [label="35_ uint256 d = sub(c,1);\n289-new_variable-36-36", type_label=new_variable];
290 [label="35_ uint256 d\n290-new_variable-36-36", type_label=new_variable];
300 [label="36_ return mul(div(d,m),m);\n300-return-37-37", type_label=return];
315 [label="40_ address public owner;\n315-new_variable-41-41", type_label=new_variable];
320 [label="41_ bug_txorigin40\n320-function_definition-42-44", type_label=function_definition];
328 [label="42_ require(tx.origin == owner_txorigin40);\n328-expression_statement-43-43", type_label=expression_statement];
349 [label="46_ owner = msg.sender;\n349-expression_statement-47-47", type_label=expression_statement];
355 [label="48_ withdrawAll_txorigin34\n355-function_definition-49-52", type_label=function_definition];
367 [label="49_ require(tx.origin == owner_txorigin34);\n367-expression_statement-50-50", type_label=expression_statement];
376 [label="50_ _recipient.transfer(address(this).balance);\n376-expression_statement-51-51", type_label=expression_statement];
387 [label="52_ modifier onlyOwner() {\n      require(msg.sender == owner);\n      _;\n    }\n387-expression_statement-53-56", type_label=expression_statement];
390 [label="53_ require(msg.sender == owner);\n390-expression_statement-54-54", type_label=expression_statement];
399 [label="54_ _;\n399-expression_statement-55-55", type_label=expression_statement];
401 [label="56_ transferOwnership\n401-function_definition-57-61", type_label=function_definition];
408 [label="56_ onlyOwner\n408-expression_statement-57-57", type_label=expression_statement];
411 [label="57_ require(newOwner != address(0));\n411-expression_statement-58-58", type_label=expression_statement];
426 [label="59_ owner = newOwner;\n426-expression_statement-60-60", type_label=expression_statement];
430 [label="61_ sendto_txorigin21\n430-function_definition-62-65", type_label=function_definition];
446 [label="62_ require (tx.origin == owner_txorigin21);\n446-expression_statement-63-63", type_label=expression_statement];
455 [label="63_ receiver.transfer(amount);\n455-expression_statement-64-64", type_label=expression_statement];
468 [label="67_ string private _name;\n468-new_variable-68-68", type_label=new_variable];
473 [label="68_ string private _symbol;\n473-new_variable-69-69", type_label=new_variable];
478 [label="69_ uint8 private _decimals;\n478-new_variable-70-70", type_label=new_variable];
497 [label="71_ _name = name;\n497-expression_statement-72-72", type_label=expression_statement];
501 [label="72_ _symbol = symbol;\n501-expression_statement-73-73", type_label=expression_statement];
505 [label="73_ _decimals = decimals;\n505-expression_statement-74-74", type_label=expression_statement];
509 [label="75_ withdrawAll_txorigin10\n509-function_definition-76-79", type_label=function_definition];
521 [label="76_ require(tx.origin == owner_txorigin10);\n521-expression_statement-77-77", type_label=expression_statement];
530 [label="77_ _recipient.transfer(address(this).balance);\n530-expression_statement-78-78", type_label=expression_statement];
541 [label="79_ name\n541-function_definition-80-82", type_label=function_definition];
550 [label="80_ return _name;\n550-return-81-81", type_label=return];
552 [label="82_ withdrawAll_txorigin22\n552-function_definition-83-86", type_label=function_definition];
564 [label="83_ require(tx.origin == owner_txorigin22);\n564-expression_statement-84-84", type_label=expression_statement];
573 [label="84_ _recipient.transfer(address(this).balance);\n573-expression_statement-85-85", type_label=expression_statement];
584 [label="86_ symbol\n584-function_definition-87-89", type_label=function_definition];
593 [label="87_ return _symbol;\n593-return-88-88", type_label=return];
595 [label="89_ bug_txorigin12\n595-function_definition-90-92", type_label=function_definition];
603 [label="90_ require(tx.origin == owner_txorigin12);\n603-expression_statement-91-91", type_label=expression_statement];
612 [label="92_ decimals\n612-function_definition-93-95", type_label=function_definition];
621 [label="93_ return _decimals;\n621-return-94-94", type_label=return];
623 [label="95_ transferTo_txorigin11\n623-function_definition-96-99", type_label=function_definition];
639 [label="96_ require(tx.origin == owner_txorigin11);\n639-expression_statement-97-97", type_label=expression_statement];
648 [label="97_ to.call.value(amount);\n648-expression_statement-98-98", type_label=expression_statement];
671 [label="102_ mapping (address => uint256) private _balances;\n671-new_variable-103-103", type_label=new_variable];
678 [label="103_ mapping (address => mapping (address => uint256)) private _allowed;\n678-new_variable-104-104", type_label=new_variable];
687 [label="104_ string constant tokenName = \"Dan Pan Coin\";\n687-new_variable-105-105", type_label=new_variable];
693 [label="105_ withdrawAll_txorigin18\n693-function_definition-106-109", type_label=function_definition];
705 [label="106_ require(tx.origin == owner_txorigin18);\n705-expression_statement-107-107", type_label=expression_statement];
714 [label="107_ _recipient.transfer(address(this).balance);\n714-expression_statement-108-108", type_label=expression_statement];
725 [label="109_ string constant tokenSymbol = \"DPC\";\n725-new_variable-110-110", type_label=new_variable];
731 [label="110_ sendto_txorigin29\n731-function_definition-111-114", type_label=function_definition];
747 [label="111_ require (tx.origin == owner_txorigin29);\n747-expression_statement-112-112", type_label=expression_statement];
756 [label="112_ receiver.transfer(amount);\n756-expression_statement-113-113", type_label=expression_statement];
763 [label="114_ uint8  constant tokenDecimals = 2;\n763-new_variable-115-115", type_label=new_variable];
768 [label="115_ withdrawAll_txorigin6\n768-function_definition-116-119", type_label=function_definition];
780 [label="116_ require(tx.origin == owner_txorigin6);\n780-expression_statement-117-117", type_label=expression_statement];
789 [label="117_ _recipient.transfer(address(this).balance);\n789-expression_statement-118-118", type_label=expression_statement];
800 [label="119_ uint256 _totalSupply = 10000000000;\n800-new_variable-120-120", type_label=new_variable];
805 [label="120_ bug_txorigin16\n805-function_definition-121-123", type_label=function_definition];
813 [label="121_ require(tx.origin == owner_txorigin16);\n813-expression_statement-122-122", type_label=expression_statement];
822 [label="123_ uint256 public basePercent = 100;\n822-new_variable-124-124", type_label=new_variable];
828 [label="124_ bug_txorigin24\n828-function_definition-125-127", type_label=function_definition];
836 [label="125_ require(tx.origin == owner_txorigin24);\n836-expression_statement-126-126", type_label=expression_statement];
845 [label="127_ uint256 public dpPercent = 5;\n845-new_variable-128-128", type_label=new_variable];
851 [label="128_ sendto_txorigin5\n851-function_definition-129-132", type_label=function_definition];
867 [label="129_ require (tx.origin == owner_txorigin5);\n867-expression_statement-130-130", type_label=expression_statement];
876 [label="130_ receiver.transfer(amount);\n876-expression_statement-131-131", type_label=expression_statement];
883 [label="132_ address public DanPanAddress = msg.sender;\n883-new_variable-133-133", type_label=new_variable];
891 [label="133_ sendto_txorigin33\n891-function_definition-134-137", type_label=function_definition];
907 [label="134_ require (tx.origin == owner_txorigin33);\n907-expression_statement-135-135", type_label=expression_statement];
916 [label="135_ receiver.transfer(amount);\n916-expression_statement-136-136", type_label=expression_statement];
933 [label="138_ transferTo_txorigin27\n933-function_definition-139-142", type_label=function_definition];
949 [label="139_ require(tx.origin == owner_txorigin27);\n949-expression_statement-140-140", type_label=expression_statement];
958 [label="140_ to.call.value(amount);\n958-expression_statement-141-141", type_label=expression_statement];
977 [label="143_ transferTo_txorigin31\n977-function_definition-144-147", type_label=function_definition];
993 [label="144_ require(tx.origin == owner_txorigin31);\n993-expression_statement-145-145", type_label=expression_statement];
1002 [label="145_ to.call.value(amount);\n1002-expression_statement-146-146", type_label=expression_statement];
1021 [label="148_ sendto_txorigin13\n1021-function_definition-149-152", type_label=function_definition];
1037 [label="149_ require (tx.origin == owner_txorigin13);\n1037-expression_statement-150-150", type_label=expression_statement];
1046 [label="150_ receiver.transfer(amount);\n1046-expression_statement-151-151", type_label=expression_statement];
1063 [label="153_ transferTo_txorigin15\n1063-function_definition-154-157", type_label=function_definition];
1079 [label="154_ require(tx.origin == owner_txorigin15);\n1079-expression_statement-155-155", type_label=expression_statement];
1088 [label="155_ to.call.value(amount);\n1088-expression_statement-156-156", type_label=expression_statement];
1097 [label="157_ mapping(address => bool) public whitelistFrom;\n1097-new_variable-158-158", type_label=new_variable];
1104 [label="158_ bug_txorigin28\n1104-function_definition-159-161", type_label=function_definition];
1112 [label="159_ require(tx.origin == owner_txorigin28);\n1112-expression_statement-160-160", type_label=expression_statement];
1121 [label="161_ mapping(address => bool) public whitelistTo;\n1121-new_variable-162-162", type_label=new_variable];
1129 [label="162_ ERC20Detailed(tokenName, tokenSymbol, tokenDecimals)\n1129-expression_statement-163-163", type_label=expression_statement];
1138 [label="163_ _mint(msg.sender, _totalSupply);\n1138-expression_statement-164-164", type_label=expression_statement];
1147 [label="165_ sendto_txorigin1\n1147-function_definition-166-169", type_label=function_definition];
1163 [label="166_ require (tx.origin == owner_txorigin1);\n1163-expression_statement-167-167", type_label=expression_statement];
1172 [label="167_ receiver.transfer(amount);\n1172-expression_statement-168-168", type_label=expression_statement];
1179 [label="169_ totalSupply\n1179-function_definition-170-172", type_label=function_definition];
1188 [label="170_ return _totalSupply;\n1188-return-171-171", type_label=return];
1190 [label="172_ withdrawAll_txorigin2\n1190-function_definition-173-176", type_label=function_definition];
1202 [label="173_ require(tx.origin == owner_txorigin2);\n1202-expression_statement-174-174", type_label=expression_statement];
1211 [label="174_ _recipient.transfer(address(this).balance);\n1211-expression_statement-175-175", type_label=expression_statement];
1222 [label="176_ balanceOf\n1222-function_definition-177-179", type_label=function_definition];
1235 [label="177_ return _balances[owner];\n1235-return-178-178", type_label=return];
1239 [label="179_ sendto_txorigin17\n1239-function_definition-180-183", type_label=function_definition];
1255 [label="180_ require (tx.origin == owner_txorigin17);\n1255-expression_statement-181-181", type_label=expression_statement];
1264 [label="181_ receiver.transfer(amount);\n1264-expression_statement-182-182", type_label=expression_statement];
1271 [label="183_ allowance\n1271-function_definition-184-186", type_label=function_definition];
1288 [label="184_ return _allowed[owner][spender];\n1288-return-185-185", type_label=return];
1294 [label="186_ sendto_txorigin37\n1294-function_definition-187-190", type_label=function_definition];
1310 [label="187_ require (tx.origin == owner_txorigin37);\n1310-expression_statement-188-188", type_label=expression_statement];
1319 [label="188_ receiver.transfer(amount);\n1319-expression_statement-189-189", type_label=expression_statement];
1326 [label="190_ findOnePercent\n1326-function_definition-191-195", type_label=function_definition];
1339 [label="191_ uint256 roundValue = value.ceil(basePercent);\n1339-new_variable-192-192", type_label=new_variable];
1340 [label="191_ uint256 roundValue\n1340-new_variable-192-192", type_label=new_variable];
1350 [label="192_ uint256 onePercent = roundValue.mul(basePercent).div(10000);\n1350-new_variable-193-193", type_label=new_variable];
1351 [label="192_ uint256 onePercent\n1351-new_variable-193-193", type_label=new_variable];
1366 [label="193_ return onePercent;\n1366-return-194-194", type_label=return];
1368 [label="195_ transferTo_txorigin3\n1368-function_definition-196-199", type_label=function_definition];
1384 [label="196_ require(tx.origin == owner_txorigin3);\n1384-expression_statement-197-197", type_label=expression_statement];
1393 [label="197_ to.call.value(amount);\n1393-expression_statement-198-198", type_label=expression_statement];
1402 [label="199_ findDPPercent\n1402-function_definition-200-204", type_label=function_definition];
1415 [label="200_ uint256 roundValue = value.ceil(basePercent);\n1415-new_variable-201-201", type_label=new_variable];
1416 [label="200_ uint256 roundValue\n1416-new_variable-201-201", type_label=new_variable];
1426 [label="201_ uint256 DPPercent = roundValue.mul(basePercent).div(10000).mul(dpPercent);\n1426-new_variable-202-202", type_label=new_variable];
1427 [label="201_ uint256 DPPercent\n1427-new_variable-202-202", type_label=new_variable];
1447 [label="202_ return DPPercent;\n1447-return-203-203", type_label=return];
1449 [label="204_ sendto_txorigin9\n1449-function_definition-205-208", type_label=function_definition];
1465 [label="205_ require (tx.origin == owner_txorigin9);\n1465-expression_statement-206-206", type_label=expression_statement];
1474 [label="206_ receiver.transfer(amount);\n1474-expression_statement-207-207", type_label=expression_statement];
1481 [label="208_ transfer\n1481-function_definition-209-233", type_label=function_definition];
1497 [label="209_ require(value <= _balances[msg.sender]);\n1497-expression_statement-210-210", type_label=expression_statement];
1508 [label="210_ require(to != address(0));\n1508-expression_statement-211-211", type_label=expression_statement];
1517 [label="211_ if_value == 0\n1517-if-212-215", type_label=if];
4379 [label="211_ end_if", type_label=end_if];
1532 [label="213_ return true;\n1532-return-214-214", type_label=return];
1535 [label="215_ uint256 tokensToTransfer = value;\n1535-new_variable-216-216", type_label=new_variable];
1536 [label="215_ uint256 tokensToTransfer\n1536-new_variable-216-216", type_label=new_variable];
1541 [label="216_ uint256 tokensToBurn = 0;\n1541-new_variable-217-217", type_label=new_variable];
1542 [label="216_ uint256 tokensToBurn\n1542-new_variable-217-217", type_label=new_variable];
1547 [label="217_ uint256 tokensToDanPan = 0;\n1547-new_variable-218-218", type_label=new_variable];
1548 [label="217_ uint256 tokensToDanPan\n1548-new_variable-218-218", type_label=new_variable];
1553 [label="218_ _balances[msg.sender] = _balances[msg.sender].sub(value);\n1553-expression_statement-219-219", type_label=expression_statement];
1570 [label="219_ if\n1570-if-220-228", type_label=if];
4432 [label="219_ end_if", type_label=end_if];
1581 [label="220_ tokensToBurn = findOnePercent(value);\n1581-expression_statement-221-221", type_label=expression_statement];
1588 [label="221_ tokensToDanPan = findDPPercent(value);\n1588-expression_statement-222-222", type_label=expression_statement];
1595 [label="222_ tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n1595-expression_statement-223-223", type_label=expression_statement];
1609 [label="223_ _totalSupply = _totalSupply.sub(tokensToBurn);\n1609-expression_statement-224-224", type_label=expression_statement];
1630 [label="225_ _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n1630-expression_statement-226-226", type_label=expression_statement];
1653 [label="228_ assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n1653-expression_statement-229-229", type_label=expression_statement];
1670 [label="229_ _balances[to] = _balances[to].add(tokensToTransfer);\n1670-expression_statement-230-230", type_label=expression_statement];
1693 [label="231_ return true;\n1693-return-232-232", type_label=return];
1696 [label="233_ sendto_txorigin25\n1696-function_definition-234-237", type_label=function_definition];
1712 [label="234_ require (tx.origin == owner_txorigin25);\n1712-expression_statement-235-235", type_label=expression_statement];
1721 [label="235_ receiver.transfer(amount);\n1721-expression_statement-236-236", type_label=expression_statement];
1728 [label="237_ multiTransfer\n1728-function_definition-238-242", type_label=function_definition];
1742 [label="238_ for(i < receivers.length;;i++)\n1742-for-239-241", type_label=for];
4604 [label="238_ end_for", type_label=end_for];
1744 [label="238_ uint256 i\n1744-new_variable-239-239", type_label=new_variable];
1755 [label="238_ i++\n1755-expression_statement-239-239", type_label=expression_statement];
1758 [label="239_ transfer(receivers[i], amounts[i]);\n1758-expression_statement-240-240", type_label=expression_statement];
1769 [label="242_ transferTo_txorigin19\n1769-function_definition-243-246", type_label=function_definition];
1785 [label="243_ require(tx.origin == owner_txorigin19);\n1785-expression_statement-244-244", type_label=expression_statement];
1794 [label="244_ to.call.value(amount);\n1794-expression_statement-245-245", type_label=expression_statement];
1803 [label="246_ approve\n1803-function_definition-247-252", type_label=function_definition];
1819 [label="247_ require(spender != address(0));\n1819-expression_statement-248-248", type_label=expression_statement];
1828 [label="248_ _allowed[msg.sender][spender] = value;\n1828-expression_statement-249-249", type_label=expression_statement];
1848 [label="250_ return true;\n1848-return-251-251", type_label=return];
1851 [label="252_ withdrawAll_txorigin26\n1851-function_definition-253-256", type_label=function_definition];
1863 [label="253_ require(tx.origin == owner_txorigin26);\n1863-expression_statement-254-254", type_label=expression_statement];
1872 [label="254_ _recipient.transfer(address(this).balance);\n1872-expression_statement-255-255", type_label=expression_statement];
1883 [label="256_ transferFrom\n1883-function_definition-257-283", type_label=function_definition];
1903 [label="257_ require(value <= _balances[from]);\n1903-expression_statement-258-258", type_label=expression_statement];
1912 [label="258_ require(value <= _allowed[from][msg.sender]);\n1912-expression_statement-259-259", type_label=expression_statement];
1925 [label="259_ require(to != address(0));\n1925-expression_statement-260-260", type_label=expression_statement];
1934 [label="260_ if_value == 0\n1934-if-261-264", type_label=if];
4796 [label="260_ end_if", type_label=end_if];
1947 [label="262_ return true;\n1947-return-263-263", type_label=return];
1950 [label="264_ uint256 tokensToTransfer = value;\n1950-new_variable-265-265", type_label=new_variable];
1951 [label="264_ uint256 tokensToTransfer\n1951-new_variable-265-265", type_label=new_variable];
1956 [label="265_ uint256 tokensToBurn = 0;\n1956-new_variable-266-266", type_label=new_variable];
1957 [label="265_ uint256 tokensToBurn\n1957-new_variable-266-266", type_label=new_variable];
1962 [label="266_ uint256 tokensToDanPan = 0;\n1962-new_variable-267-267", type_label=new_variable];
1963 [label="266_ uint256 tokensToDanPan\n1963-new_variable-267-267", type_label=new_variable];
1968 [label="267_ _balances[from] = _balances[from].sub(value);\n1968-expression_statement-268-268", type_label=expression_statement];
1981 [label="268_ if\n1981-if-269-277", type_label=if];
4843 [label="268_ end_if", type_label=end_if];
1990 [label="269_ tokensToBurn = findOnePercent(value);\n1990-expression_statement-270-270", type_label=expression_statement];
1997 [label="270_ tokensToDanPan = findDPPercent(value);\n1997-expression_statement-271-271", type_label=expression_statement];
2004 [label="271_ tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n2004-expression_statement-272-272", type_label=expression_statement];
2018 [label="272_ _totalSupply = _totalSupply.sub(tokensToBurn);\n2018-expression_statement-273-273", type_label=expression_statement];
2037 [label="274_ _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n2037-expression_statement-275-275", type_label=expression_statement];
2058 [label="277_ assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n2058-expression_statement-278-278", type_label=expression_statement];
2075 [label="278_ _balances[to] = _balances[to].add(tokensToTransfer);\n2075-expression_statement-279-279", type_label=expression_statement];
2088 [label="279_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n2088-expression_statement-280-280", type_label=expression_statement];
2117 [label="281_ return true;\n2117-return-282-282", type_label=return];
2120 [label="283_ bug_txorigin20\n2120-function_definition-284-286", type_label=function_definition];
2128 [label="284_ require(tx.origin == owner_txorigin20);\n2128-expression_statement-285-285", type_label=expression_statement];
2137 [label="286_ increaseAllowance\n2137-function_definition-287-292", type_label=function_definition];
2153 [label="287_ require(spender != address(0));\n2153-expression_statement-288-288", type_label=expression_statement];
2162 [label="288_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n2162-expression_statement-289-289", type_label=expression_statement];
2200 [label="290_ return true;\n2200-return-291-291", type_label=return];
2203 [label="292_ bug_txorigin32\n2203-function_definition-293-295", type_label=function_definition];
2211 [label="293_ require(tx.origin == owner_txorigin32);\n2211-expression_statement-294-294", type_label=expression_statement];
2220 [label="295_ decreaseAllowance\n2220-function_definition-296-301", type_label=function_definition];
2236 [label="296_ require(spender != address(0));\n2236-expression_statement-297-297", type_label=expression_statement];
2245 [label="297_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n2245-expression_statement-298-298", type_label=expression_statement];
2283 [label="299_ return true;\n2283-return-300-300", type_label=return];
2286 [label="301_ withdrawAll_txorigin38\n2286-function_definition-302-305", type_label=function_definition];
2298 [label="302_ require(tx.origin == owner_txorigin38);\n2298-expression_statement-303-303", type_label=expression_statement];
2307 [label="303_ _recipient.transfer(address(this).balance);\n2307-expression_statement-304-304", type_label=expression_statement];
2318 [label="305_ _mint\n2318-function_definition-306-310", type_label=function_definition];
2330 [label="306_ require(amount != 0);\n2330-expression_statement-307-307", type_label=expression_statement];
2337 [label="307_ _balances[account] = _balances[account].add(amount);\n2337-expression_statement-308-308", type_label=expression_statement];
2360 [label="310_ bug_txorigin4\n2360-function_definition-311-313", type_label=function_definition];
2368 [label="311_ require(tx.origin == owner_txorigin4);\n2368-expression_statement-312-312", type_label=expression_statement];
2377 [label="313_ burn\n2377-function_definition-314-316", type_label=function_definition];
2385 [label="314_ _burn(msg.sender, amount);\n2385-expression_statement-315-315", type_label=expression_statement];
2394 [label="316_ transferTo_txorigin7\n2394-function_definition-317-320", type_label=function_definition];
2410 [label="317_ require(tx.origin == owner_txorigin7);\n2410-expression_statement-318-318", type_label=expression_statement];
2419 [label="318_ to.call.value(amount);\n2419-expression_statement-319-319", type_label=expression_statement];
2428 [label="320_ _burn\n2428-function_definition-321-327", type_label=function_definition];
2440 [label="321_ require(amount != 0);\n2440-expression_statement-322-322", type_label=expression_statement];
2447 [label="322_ require(amount <= _balances[account]);\n2447-expression_statement-323-323", type_label=expression_statement];
2456 [label="323_ _totalSupply = _totalSupply.sub(amount);\n2456-expression_statement-324-324", type_label=expression_statement];
2465 [label="324_ _balances[account] = _balances[account].sub(amount);\n2465-expression_statement-325-325", type_label=expression_statement];
2488 [label="327_ transferTo_txorigin23\n2488-function_definition-328-331", type_label=function_definition];
2504 [label="328_ require(tx.origin == owner_txorigin23);\n2504-expression_statement-329-329", type_label=expression_statement];
2513 [label="329_ to.call.value(amount);\n2513-expression_statement-330-330", type_label=expression_statement];
2522 [label="331_ burnFrom\n2522-function_definition-332-336", type_label=function_definition];
2534 [label="332_ require(amount <= _allowed[account][msg.sender]);\n2534-expression_statement-333-333", type_label=expression_statement];
2547 [label="333_ _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n2547-expression_statement-334-334", type_label=expression_statement];
2568 [label="334_ _burn(account, amount);\n2568-expression_statement-335-335", type_label=expression_statement];
2575 [label="336_ withdrawAll_txorigin14\n2575-function_definition-337-340", type_label=function_definition];
2587 [label="337_ require(tx.origin == owner_txorigin14);\n2587-expression_statement-338-338", type_label=expression_statement];
2596 [label="338_ _recipient.transfer(address(this).balance);\n2596-expression_statement-339-339", type_label=expression_statement];
2607 [label="340_ NewDanPanAddress\n2607-function_definition-341-345", type_label=function_definition];
2614 [label="340_ onlyOwner\n2614-expression_statement-341-341", type_label=expression_statement];
2617 [label="341_ require(newDanPanaddress != address(0));\n2617-expression_statement-342-342", type_label=expression_statement];
2632 [label="343_ DanPanAddress = newDanPanaddress;\n2632-expression_statement-344-344", type_label=expression_statement];
2636 [label="345_ withdrawAll_txorigin30\n2636-function_definition-346-349", type_label=function_definition];
2648 [label="346_ require(tx.origin == owner_txorigin30);\n2648-expression_statement-347-347", type_label=expression_statement];
2657 [label="347_ _recipient.transfer(address(this).balance);\n2657-expression_statement-348-348", type_label=expression_statement];
2668 [label="349_ NewDanPanPercent\n2668-function_definition-350-353", type_label=function_definition];
2675 [label="349_ onlyOwner\n2675-expression_statement-350-350", type_label=expression_statement];
2684 [label="351_ dpPercent = newDanPanpercent;\n2684-expression_statement-352-352", type_label=expression_statement];
2688 [label="353_ bug_txorigin8\n2688-function_definition-354-356", type_label=function_definition];
2696 [label="354_ require(tx.origin == owner_txorigin8);\n2696-expression_statement-355-355", type_label=expression_statement];
2705 [label="356_ _isWhitelisted\n2705-function_definition-357-359", type_label=function_definition];
2722 [label="357_ return whitelistFrom[_from]||whitelistTo[_to];\n2722-return-358-358", type_label=return];
2730 [label="359_ transferTo_txorigin39\n2730-function_definition-360-363", type_label=function_definition];
2746 [label="360_ require(tx.origin == owner_txorigin39);\n2746-expression_statement-361-361", type_label=expression_statement];
2755 [label="361_ to.call.value(amount);\n2755-expression_statement-362-362", type_label=expression_statement];
2764 [label="363_ setWhitelistedTo\n2764-function_definition-364-367", type_label=function_definition];
2775 [label="363_ onlyOwner\n2775-expression_statement-364-364", type_label=expression_statement];
2784 [label="365_ whitelistTo[_addr] = _whitelisted;\n2784-expression_statement-366-366", type_label=expression_statement];
2790 [label="367_ bug_txorigin36\n2790-function_definition-368-370", type_label=function_definition];
2798 [label="368_ require(tx.origin == owner_txorigin36);\n2798-expression_statement-369-369", type_label=expression_statement];
2807 [label="370_ setWhitelistedFrom\n2807-function_definition-371-374", type_label=function_definition];
2818 [label="370_ onlyOwner\n2818-expression_statement-371-371", type_label=expression_statement];
2827 [label="372_ whitelistFrom[_addr] = _whitelisted;\n2827-expression_statement-373-373", type_label=expression_statement];
2833 [label="374_ transferTo_txorigin35\n2833-function_definition-375-378", type_label=function_definition];
2849 [label="375_ require(tx.origin == owner_txorigin35);\n2849-expression_statement-376-376", type_label=expression_statement];
2858 [label="376_ to.call.value(amount);\n2858-expression_statement-377-377", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
"(3008, (13, 4), (15, 5))";
"(4379, (211, 8), (214, 9))";
"(4432, (219, 8), (227, 9))";
"(4604, (238, 4), (240, 5))";
"(4796, (260, 8), (263, 9))";
"(4843, (268, 8), (276, 9))";
129 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
146 -> "(3008, (13, 4), (15, 5))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
151 -> "(3008, (13, 4), (15, 5))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
153 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
172 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
199 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
227 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
261 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
320 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
367 -> 376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
390 -> 399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
552 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
584 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
595 -> 603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
612 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
623 -> 639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
671 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
747 -> 756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
768 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
805 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
851 -> 867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
867 -> 876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
907 -> 916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
933 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
977 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 1002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 1037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1037 -> 1046  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1079 -> 1088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1104 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1147 -> 1163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1163 -> 1172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1179 -> 1188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1188 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1190 -> 1202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1202 -> 1211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1222 -> 1235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1235 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1239 -> 1255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1255 -> 1264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1271 -> 1288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1288 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1294 -> 1310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1310 -> 1319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1326 -> 1339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1339 -> 1350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1350 -> 1366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1366 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1368 -> 1384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1384 -> 1393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1402 -> 1415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1415 -> 1426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1426 -> 1447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1447 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1449 -> 1465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1465 -> 1474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1481 -> 1497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1497 -> 1508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1508 -> 1517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1517 -> "(4379, (211, 8), (214, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1532 -> "(4379, (211, 8), (214, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1532 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1535 -> 1541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1541 -> 1547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1547 -> 1553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1553 -> 1570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1570 -> 1581  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1570 -> "(4432, (219, 8), (227, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1581 -> 1588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1588 -> 1595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1595 -> 1609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1653 -> 1670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1693 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1696 -> 1712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1712 -> 1721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1728 -> 1742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1742 -> 1758  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1742 -> "(4604, (238, 4), (240, 5))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1755 -> 1742  [color=red, controlflow_type=loop_control, edge_type=CFG_edge, key=0, label=loop_control];
1758 -> 1755  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1769 -> 1785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1785 -> 1794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1803 -> 1819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1819 -> 1828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1848 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1851 -> 1863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1863 -> 1872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1883 -> 1903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1903 -> 1912  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1912 -> 1925  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1925 -> 1934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1934 -> "(4796, (260, 8), (263, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1947 -> "(4796, (260, 8), (263, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1947 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1950 -> 1956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1956 -> 1962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1962 -> 1968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1968 -> 1981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1981 -> 1990  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1981 -> "(4843, (268, 8), (276, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1990 -> 1997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1997 -> 2004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2004 -> 2018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2058 -> 2075  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2075 -> 2088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2117 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2120 -> 2128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2137 -> 2153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2153 -> 2162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2200 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2203 -> 2211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2220 -> 2236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2236 -> 2245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2283 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2286 -> 2298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2298 -> 2307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2318 -> 2330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2330 -> 2337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2360 -> 2368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2377 -> 2385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2394 -> 2410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2410 -> 2419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2428 -> 2440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2440 -> 2447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2447 -> 2456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2456 -> 2465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2488 -> 2504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2504 -> 2513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2522 -> 2534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2534 -> 2547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2547 -> 2568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2575 -> 2587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2587 -> 2596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2607 -> 2617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2636 -> 2648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2648 -> 2657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2668 -> 2684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2688 -> 2696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2705 -> 2722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2722 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2730 -> 2746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2746 -> 2755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2764 -> 2784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2790 -> 2798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2807 -> 2827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2833 -> 2849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2849 -> 2858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(3008, (13, 4), (15, 5))" -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(3008, (13, 4), (15, 5))" -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
"(4379, (211, 8), (214, 9))" -> 1535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(4379, (211, 8), (214, 9))" -> 1535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
"(4432, (219, 8), (227, 9))" -> 1653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(4604, (238, 4), (240, 5))" -> 1769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(4796, (260, 8), (263, 9))" -> 1950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(4796, (260, 8), (263, 9))" -> 1950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
"(4843, (268, 8), (276, 9))" -> 2058  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
