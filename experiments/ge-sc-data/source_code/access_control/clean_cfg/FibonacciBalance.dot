digraph  {
13 [label="2_ address public fibonacciLibrary;\n13-new_variable-3-3", type_label=new_variable];
18 [label="3_ uint public calculatedFibNumber;\n18-new_variable-4-4", type_label=new_variable];
23 [label="4_ uint public start = 3;\n23-new_variable-5-5", type_label=new_variable];
29 [label="5_ uint public withdrawalCounter;\n29-new_variable-6-6", type_label=new_variable];
34 [label="6_ bytes4 constant fibSig = bytes4(sha3(\"setFibonacci(uint256)\"));\n34-new_variable-7-7", type_label=new_variable];
51 [label="8_ fibonacciLibrary = _fibonacciLibrary;\n51-expression_statement-9-9", type_label=expression_statement];
55 [label="10_ withdraw\n55-function_definition-11-15", type_label=function_definition];
58 [label="11_ withdrawalCounter += 1;\n58-expression_statement-12-12", type_label=expression_statement];
59 [label="11_ withdrawalCounter += 1\n59-expression_statement-12-12", type_label=expression_statement];
62 [label="12_ require(fibonacciLibrary.delegatecall(fibSig, withdrawalCounter));\n62-expression_statement-13-13", type_label=expression_statement];
74 [label="13_ msg.sender.transfer(calculatedFibNumber * 1 ether);\n74-expression_statement-14-14", type_label=expression_statement];
89 [label="16_ require(fibonacciLibrary.delegatecall(msg.data));\n89-expression_statement-17-17", type_label=expression_statement];
104 [label="20_ uint public start;\n104-new_variable-21-21", type_label=new_variable];
109 [label="21_ uint public calculatedFibNumber;\n109-new_variable-22-22", type_label=new_variable];
114 [label="22_ setStart\n114-function_definition-23-25", type_label=function_definition];
122 [label="23_ start = _start;\n122-expression_statement-24-24", type_label=expression_statement];
126 [label="25_ setFibonacci\n126-function_definition-26-28", type_label=function_definition];
134 [label="26_ calculatedFibNumber = fibonacci(n);\n134-expression_statement-27-27", type_label=expression_statement];
141 [label="28_ fibonacci\n141-function_definition-29-33", type_label=function_definition];
153 [label="29_ if_n == 0\n153-if-30-32", type_label=if];
329 [label="29_ end_if", type_label=end_if];
157 [label="29_ return start;\n157-return-30-30", type_label=return];
159 [label="30_ if_n == 1\n159-if-31-32", type_label=if];
163 [label="30_ return start + 1;\n163-return-31-31", type_label=return];
167 [label="31_ return fibonacci(n - 1) + fibonacci(n - 2);\n167-return-32-32", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
"(329, (29, 8), (31, 56))";
168;
13 -> 18  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
18 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
23 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
55 -> 58  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
58 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 74  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
126 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
153 -> 157  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
153 -> 159  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
157 -> "(329, (29, 8), (31, 56))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
157 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
159 -> 163  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
159 -> 167  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
163 -> "(329, (29, 8), (31, 56))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
163 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
167 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
"(329, (29, 8), (31, 56))" -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> "(329, (29, 8), (31, 56))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
