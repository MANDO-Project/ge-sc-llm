digraph  {
13 [label="2_ transfer\n13-function_definition-3-3", type_label=function_definition];
28 [label="3_ approve\n28-function_definition-4-4", type_label=function_definition];
43 [label="4_ transferFrom\n43-function_definition-5-5", type_label=function_definition];
62 [label="5_ totalSupply\n62-function_definition-6-6", type_label=function_definition];
70 [label="6_ balanceOf\n70-function_definition-7-7", type_label=function_definition];
82 [label="7_ allowance\n82-function_definition-8-8", type_label=function_definition];
129 [label="12_ address private _owner;\n129-new_variable-13-13", type_label=new_variable];
146 [label="15_ _owner = msg.sender;\n146-expression_statement-16-16", type_label=expression_statement];
160 [label="18_ owner\n160-function_definition-19-21", type_label=function_definition];
169 [label="19_ return _owner;\n169-return-20-20", type_label=return];
171 [label="21_ modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n171-expression_statement-22-25", type_label=expression_statement];
174 [label="22_ require(isOwner());\n174-expression_statement-23-23", type_label=expression_statement];
180 [label="23_ _;\n180-expression_statement-24-24", type_label=expression_statement];
182 [label="25_ isOwner\n182-function_definition-26-28", type_label=function_definition];
191 [label="26_ return msg.sender == _owner;\n191-return-27-27", type_label=return];
197 [label="28_ renounceOwnership\n197-function_definition-29-32", type_label=function_definition];
200 [label="28_ onlyOwner\n200-expression_statement-29-29", type_label=expression_statement];
211 [label="30_ _owner = address(0);\n211-expression_statement-31-31", type_label=expression_statement];
217 [label="32_ transferOwnership\n217-function_definition-33-35", type_label=function_definition];
224 [label="32_ onlyOwner\n224-expression_statement-33-33", type_label=expression_statement];
227 [label="33_ _transferOwnership(newOwner);\n227-expression_statement-34-34", type_label=expression_statement];
232 [label="35_ _transferOwnership\n232-function_definition-36-40", type_label=function_definition];
240 [label="36_ require(newOwner != address(0));\n240-expression_statement-37-37", type_label=expression_statement];
255 [label="38_ _owner = newOwner;\n255-expression_statement-39-39", type_label=expression_statement];
277 [label="44_ bool private _paused;\n277-new_variable-45-45", type_label=new_variable];
284 [label="46_ _paused = false;\n284-expression_statement-47-47", type_label=expression_statement];
289 [label="48_ paused\n289-function_definition-49-51", type_label=function_definition];
298 [label="49_ return _paused;\n298-return-50-50", type_label=return];
300 [label="51_ modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n300-expression_statement-52-55", type_label=expression_statement];
303 [label="52_ require(!_paused);\n303-expression_statement-53-53", type_label=expression_statement];
309 [label="53_ _;\n309-expression_statement-54-54", type_label=expression_statement];
311 [label="55_ modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n311-expression_statement-56-59", type_label=expression_statement];
314 [label="56_ require(_paused);\n314-expression_statement-57-57", type_label=expression_statement];
319 [label="57_ _;\n319-expression_statement-58-58", type_label=expression_statement];
321 [label="59_ pause\n321-function_definition-60-63", type_label=function_definition];
324 [label="59_ onlyOwner\n324-expression_statement-60-60", type_label=expression_statement];
326 [label="59_ whenNotPaused\n326-expression_statement-60-60", type_label=expression_statement];
329 [label="60_ _paused = true;\n329-expression_statement-61-61", type_label=expression_statement];
340 [label="63_ unpause\n340-function_definition-64-67", type_label=function_definition];
343 [label="63_ onlyOwner\n343-expression_statement-64-64", type_label=expression_statement];
345 [label="63_ whenPaused\n345-expression_statement-64-64", type_label=expression_statement];
348 [label="64_ _paused = false;\n348-expression_statement-65-65", type_label=expression_statement];
362 [label="69_ mul\n362-function_definition-70-77", type_label=function_definition];
379 [label="70_ if_a == 0\n379-if-71-73", type_label=if];
384 [label="71_ return 0;\n384-return-72-72", type_label=return];
386 [label="73_ uint256 c = a * b;\n386-new_variable-74-74", type_label=new_variable];
387 [label="73_ uint256 c\n387-new_variable-74-74", type_label=new_variable];
394 [label="74_ require(c / a == b);\n394-expression_statement-75-75", type_label=expression_statement];
403 [label="75_ return c;\n403-return-76-76", type_label=return];
405 [label="77_ div\n405-function_definition-78-82", type_label=function_definition];
422 [label="78_ require(b > 0);\n422-expression_statement-79-79", type_label=expression_statement];
429 [label="79_ uint256 c = a / b;\n429-new_variable-80-80", type_label=new_variable];
430 [label="79_ uint256 c\n430-new_variable-80-80", type_label=new_variable];
437 [label="80_ return c;\n437-return-81-81", type_label=return];
439 [label="82_ sub\n439-function_definition-83-87", type_label=function_definition];
456 [label="83_ require(b <= a);\n456-expression_statement-84-84", type_label=expression_statement];
463 [label="84_ uint256 c = a - b;\n463-new_variable-85-85", type_label=new_variable];
464 [label="84_ uint256 c\n464-new_variable-85-85", type_label=new_variable];
471 [label="85_ return c;\n471-return-86-86", type_label=return];
473 [label="87_ add\n473-function_definition-88-92", type_label=function_definition];
490 [label="88_ uint256 c = a + b;\n490-new_variable-89-89", type_label=new_variable];
491 [label="88_ uint256 c\n491-new_variable-89-89", type_label=new_variable];
498 [label="89_ require(c >= a);\n498-expression_statement-90-90", type_label=expression_statement];
505 [label="90_ return c;\n505-return-91-91", type_label=return];
507 [label="92_ mod\n507-function_definition-93-96", type_label=function_definition];
524 [label="93_ require(b != 0);\n524-expression_statement-94-94", type_label=expression_statement];
531 [label="94_ return a % b;\n531-return-95-95", type_label=return];
552 [label="99_ mapping (address => uint256) private _balances;\n552-new_variable-100-100", type_label=new_variable];
559 [label="100_ mapping (address => mapping (address => uint256)) private _allowed;\n559-new_variable-101-101", type_label=new_variable];
568 [label="101_ string private _name = \"MetexGold\";\n568-new_variable-102-102", type_label=new_variable];
575 [label="102_ string private _symbol = \"MAU\";\n575-new_variable-103-103", type_label=new_variable];
582 [label="103_ uint256 private _decimals = 18;\n582-new_variable-104-104", type_label=new_variable];
588 [label="104_ uint256 private _totalSupply;\n588-new_variable-105-105", type_label=new_variable];
593 [label="105_ string public certificate;\n593-new_variable-106-106", type_label=new_variable];
598 [label="106_ uint256 private initialAmount = 0;\n598-new_variable-107-107", type_label=new_variable];
610 [label="108_ certificate = certHash;\n610-expression_statement-109-109", type_label=expression_statement];
614 [label="109_ mint(msg.sender, initialAmount);\n614-expression_statement-110-110", type_label=expression_statement];
623 [label="111_ name\n623-function_definition-112-114", type_label=function_definition];
632 [label="112_ return _name;\n632-return-113-113", type_label=return];
634 [label="114_ symbol\n634-function_definition-115-117", type_label=function_definition];
643 [label="115_ return _symbol;\n643-return-116-116", type_label=return];
645 [label="117_ decimals\n645-function_definition-118-120", type_label=function_definition];
654 [label="118_ return _decimals;\n654-return-119-119", type_label=return];
656 [label="120_ totalSupply\n656-function_definition-121-123", type_label=function_definition];
665 [label="121_ return _totalSupply;\n665-return-122-122", type_label=return];
667 [label="123_ balanceOf\n667-function_definition-124-126", type_label=function_definition];
680 [label="124_ return _balances[owner];\n680-return-125-125", type_label=return];
684 [label="126_ allowance\n684-function_definition-127-129", type_label=function_definition];
701 [label="127_ return _allowed[owner][spender];\n701-return-128-128", type_label=return];
707 [label="129_ transfer\n707-function_definition-130-133", type_label=function_definition];
718 [label="129_ whenNotPaused\n718-expression_statement-130-130", type_label=expression_statement];
725 [label="130_ _transfer(msg.sender, to, value);\n725-expression_statement-131-131", type_label=expression_statement];
736 [label="131_ return true;\n736-return-132-132", type_label=return];
739 [label="133_ approve\n739-function_definition-134-139", type_label=function_definition];
750 [label="133_ whenNotPaused\n750-expression_statement-134-134", type_label=expression_statement];
757 [label="134_ require(spender != address(0));\n757-expression_statement-135-135", type_label=expression_statement];
766 [label="135_ _allowed[msg.sender][spender] = value;\n766-expression_statement-136-136", type_label=expression_statement];
786 [label="137_ return true;\n786-return-138-138", type_label=return];
789 [label="139_ transferFrom\n789-function_definition-140-145", type_label=function_definition];
804 [label="139_ whenNotPaused\n804-expression_statement-140-140", type_label=expression_statement];
811 [label="140_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n811-expression_statement-141-141", type_label=expression_statement];
832 [label="141_ _transfer(from, to, value);\n832-expression_statement-142-142", type_label=expression_statement];
857 [label="143_ return true;\n857-return-144-144", type_label=return];
860 [label="145_ increaseAllowance\n860-function_definition-146-151", type_label=function_definition];
871 [label="145_ whenNotPaused\n871-expression_statement-146-146", type_label=expression_statement];
878 [label="146_ require(spender != address(0));\n878-expression_statement-147-147", type_label=expression_statement];
887 [label="147_ _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n887-expression_statement-148-148", type_label=expression_statement];
924 [label="149_ return true;\n924-return-150-150", type_label=return];
927 [label="151_ decreaseAllowance\n927-function_definition-152-157", type_label=function_definition];
938 [label="151_ whenNotPaused\n938-expression_statement-152-152", type_label=expression_statement];
945 [label="152_ require(spender != address(0));\n945-expression_statement-153-153", type_label=expression_statement];
954 [label="153_ _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n954-expression_statement-154-154", type_label=expression_statement];
991 [label="155_ return true;\n991-return-156-156", type_label=return];
994 [label="157_ _transfer\n994-function_definition-158-163", type_label=function_definition];
1010 [label="158_ require(to != address(0));\n1010-expression_statement-159-159", type_label=expression_statement];
1019 [label="159_ _balances[from] = _balances[from].sub(value);\n1019-expression_statement-160-160", type_label=expression_statement];
1032 [label="160_ _balances[to] = _balances[to].add(value);\n1032-expression_statement-161-161", type_label=expression_statement];
1053 [label="163_ mint\n1053-function_definition-164-170", type_label=function_definition];
1064 [label="163_ onlyOwner\n1064-expression_statement-164-164", type_label=expression_statement];
1071 [label="164_ require(to != address(0));\n1071-expression_statement-165-165", type_label=expression_statement];
1080 [label="165_ _totalSupply = _totalSupply.add(value);\n1080-expression_statement-166-166", type_label=expression_statement];
1089 [label="166_ _balances[to] = _balances[to].add(value);\n1089-expression_statement-167-167", type_label=expression_statement];
1112 [label="168_ return true;\n1112-return-169-169", type_label=return];
1115 [label="170_ burn\n1115-function_definition-171-176", type_label=function_definition];
1121 [label="170_ onlyOwner\n1121-expression_statement-171-171", type_label=expression_statement];
1125 [label="171_ require(msg.sender != address(0));\n1125-expression_statement-172-172", type_label=expression_statement];
1136 [label="172_ _totalSupply = _totalSupply.sub(value);\n1136-expression_statement-173-173", type_label=expression_statement];
1145 [label="173_ _balances[msg.sender] = _balances[msg.sender].sub(value);\n1145-expression_statement-174-174", type_label=expression_statement];
1174 [label="176_ setCertificate\n1174-function_definition-177-179", type_label=function_definition];
1181 [label="176_ onlyOwner\n1181-expression_statement-177-177", type_label=expression_statement];
1184 [label="177_ certificate = hash;\n1184-expression_statement-178-178", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
160 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
169 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
174 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
191 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
197 -> 211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
217 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
232 -> 240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
300 -> 311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
324 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
340 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
362 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 384  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
379 -> 386  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
384 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
386 -> 394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
394 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
405 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
422 -> 429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
429 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
439 -> 456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
456 -> 463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
463 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
473 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
507 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
552 -> 559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
575 -> 582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
610 -> 614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
623 -> 632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
634 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
645 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
654 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
656 -> 665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
667 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
684 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
707 -> 725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
739 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
789 -> 811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
811 -> 832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
857 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
860 -> 878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
878 -> 887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
924 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
927 -> 945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
945 -> 954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
991 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
994 -> 1010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1010 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 1032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1053 -> 1071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1071 -> 1080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1080 -> 1089  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1115 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1125 -> 1136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1136 -> 1145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1174 -> 1184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
