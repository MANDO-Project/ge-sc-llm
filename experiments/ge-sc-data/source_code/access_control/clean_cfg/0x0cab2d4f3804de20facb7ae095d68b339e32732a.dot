digraph  {
13 [label="2_ add\n13-function_definition-3-6", type_label=function_definition];
31 [label="3_ c = a + b;\n31-expression_statement-4-4", type_label=expression_statement];
37 [label="4_ require(c >= a);\n37-expression_statement-5-5", type_label=expression_statement];
44 [label="6_ sub\n44-function_definition-7-10", type_label=function_definition];
62 [label="7_ require(b <= a);\n62-expression_statement-8-8", type_label=expression_statement];
69 [label="8_ c = a - b;\n69-expression_statement-9-9", type_label=expression_statement];
75 [label="10_ mul\n75-function_definition-11-14", type_label=function_definition];
93 [label="11_ c = a * b;\n93-expression_statement-12-12", type_label=expression_statement];
99 [label="12_ require(a == 0 || c / a == b);\n99-expression_statement-13-13", type_label=expression_statement];
112 [label="14_ div\n112-function_definition-15-18", type_label=function_definition];
130 [label="15_ require(b > 0);\n130-expression_statement-16-16", type_label=expression_statement];
137 [label="16_ c = a / b;\n137-expression_statement-17-17", type_label=expression_statement];
146 [label="20_ totalSupply\n146-function_definition-21-21", type_label=function_definition];
154 [label="21_ balanceOf\n154-function_definition-22-22", type_label=function_definition];
167 [label="22_ allowance\n167-function_definition-23-23", type_label=function_definition];
184 [label="23_ transfer\n184-function_definition-24-24", type_label=function_definition];
200 [label="24_ approve\n200-function_definition-25-25", type_label=function_definition];
216 [label="25_ transferFrom\n216-function_definition-26-26", type_label=function_definition];
267 [label="30_ receiveApproval\n267-function_definition-31-31", type_label=function_definition];
289 [label="33_ address public owner;\n289-new_variable-34-34", type_label=new_variable];
294 [label="34_ address public newOwner;\n294-new_variable-35-35", type_label=new_variable];
311 [label="37_ owner = msg.sender;\n311-expression_statement-38-38", type_label=expression_statement];
317 [label="39_ modifier onlyOwner {\n        require(msg.sender == owner);\n    _;\n    }\n317-expression_statement-40-43", type_label=expression_statement];
320 [label="40_ require(msg.sender == owner);\n320-expression_statement-41-41", type_label=expression_statement];
329 [label="41_ _;\n329-expression_statement-42-42", type_label=expression_statement];
331 [label="43_ transferOwnership\n331-function_definition-44-46", type_label=function_definition];
338 [label="43_ onlyOwner\n338-expression_statement-44-44", type_label=expression_statement];
341 [label="44_ newOwner = _newOwner;\n341-expression_statement-45-45", type_label=expression_statement];
345 [label="46_ acceptOwnership\n345-function_definition-47-52", type_label=function_definition];
349 [label="47_ require(msg.sender == newOwner);\n349-expression_statement-48-48", type_label=expression_statement];
364 [label="49_ owner = newOwner;\n364-expression_statement-50-50", type_label=expression_statement];
368 [label="50_ newOwner = address(0);\n368-expression_statement-51-51", type_label=expression_statement];
388 [label="55_ string public symbol;\n388-new_variable-56-56", type_label=new_variable];
393 [label="56_ string public  name;\n393-new_variable-57-57", type_label=new_variable];
398 [label="57_ uint8 public decimals;\n398-new_variable-58-58", type_label=new_variable];
403 [label="58_ uint public _totalSupply;\n403-new_variable-59-59", type_label=new_variable];
408 [label="59_ mapping(address => uint) balances;\n408-new_variable-60-60", type_label=new_variable];
414 [label="60_ mapping(address => mapping(address => uint)) allowed;\n414-new_variable-61-61", type_label=new_variable];
424 [label="62_ symbol = \"IGR\";\n424-expression_statement-63-63", type_label=expression_statement];
429 [label="63_ name = \"InGRedientToken\";\n429-expression_statement-64-64", type_label=expression_statement];
434 [label="64_ decimals = 3;\n434-expression_statement-65-65", type_label=expression_statement];
438 [label="65_ _totalSupply = 1000000000000000000000 * 10**uint(decimals);\n438-expression_statement-66-66", type_label=expression_statement];
448 [label="66_ balances[owner] = _totalSupply;\n448-expression_statement-67-67", type_label=expression_statement];
464 [label="69_ totalSupply\n464-function_definition-70-72", type_label=function_definition];
473 [label="70_ return _totalSupply.sub(balances[address(0)]);\n473-return-71-71", type_label=return];
484 [label="72_ balanceOf\n484-function_definition-73-75", type_label=function_definition];
498 [label="73_ return balances[tokenOwner];\n498-return-74-74", type_label=return];
502 [label="75_ transfer\n502-function_definition-76-81", type_label=function_definition];
519 [label="76_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n519-expression_statement-77-77", type_label=expression_statement];
536 [label="77_ balances[to] = balances[to].add(tokens);\n536-expression_statement-78-78", type_label=expression_statement];
559 [label="79_ return true;\n559-return-80-80", type_label=return];
562 [label="81_ approve\n562-function_definition-82-86", type_label=function_definition];
579 [label="82_ allowed[msg.sender][spender] = tokens;\n579-expression_statement-83-83", type_label=expression_statement];
599 [label="84_ return true;\n599-return-85-85", type_label=return];
602 [label="86_ transferFrom\n602-function_definition-87-93", type_label=function_definition];
623 [label="87_ balances[from] = balances[from].sub(tokens);\n623-expression_statement-88-88", type_label=expression_statement];
636 [label="88_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n636-expression_statement-89-89", type_label=expression_statement];
657 [label="89_ balances[to] = balances[to].add(tokens);\n657-expression_statement-90-90", type_label=expression_statement];
678 [label="91_ return true;\n678-return-92-92", type_label=return];
681 [label="93_ allowance\n681-function_definition-94-96", type_label=function_definition];
699 [label="94_ return allowed[tokenOwner][spender];\n699-return-95-95", type_label=return];
705 [label="96_ approveAndCall\n705-function_definition-97-102", type_label=function_definition];
726 [label="97_ allowed[msg.sender][spender] = tokens;\n726-expression_statement-98-98", type_label=expression_statement];
746 [label="99_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n746-expression_statement-100-100", type_label=expression_statement];
766 [label="100_ return true;\n766-return-101-101", type_label=return];
775 [label="105_ transferAnyERC20Token\n775-function_definition-106-108", type_label=function_definition];
786 [label="105_ onlyOwner\n786-expression_statement-106-106", type_label=expression_statement];
794 [label="106_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n794-return-107-107", type_label=return];
820 [label="109_ farmerRequestCertificate\n820-function_definition-110-115", type_label=function_definition];
853 [label="110_ allowed[owner][_certAuth] = _tokens;\n853-expression_statement-111-111", type_label=expression_statement];
877 [label="113_ return true;\n877-return-114-114", type_label=return];
880 [label="115_ certAuthIssuesCerticate\n880-function_definition-116-122", type_label=function_definition];
921 [label="116_ balances[owner] = balances[owner].sub(tokens);\n921-expression_statement-117-117", type_label=expression_statement];
934 [label="117_ allowed[owner][msg.sender] = 0;\n934-expression_statement-118-118", type_label=expression_statement];
944 [label="118_ balances[farmer] = balances[farmer].add(tokens);\n944-expression_statement-119-119", type_label=expression_statement];
965 [label="120_ return true;\n965-return-121-121", type_label=return];
968 [label="122_ sellsIngrWithoutDepletion\n968-function_definition-123-129", type_label=function_definition];
989 [label="123_ string memory url=_url;\n989-new_variable-124-124", type_label=new_variable];
990 [label="123_ string memory url\n990-new_variable-124-124", type_label=new_variable];
995 [label="124_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n995-expression_statement-125-125", type_label=expression_statement];
1012 [label="125_ balances[to] = balances[to].add(tokens);\n1012-expression_statement-126-126", type_label=expression_statement];
1035 [label="127_ return true;\n1035-return-128-128", type_label=return];
1038 [label="129_ sellsIntermediateGoodWithDepletion\n1038-function_definition-130-136", type_label=function_definition];
1063 [label="130_ string memory url=_url;\n1063-new_variable-131-131", type_label=new_variable];
1064 [label="130_ string memory url\n1064-new_variable-131-131", type_label=new_variable];
1069 [label="131_ require (out2inIngredientPercentage <= 100);\n1069-expression_statement-132-132", type_label=expression_statement];
1076 [label="132_ balances[msg.sender] = balances[msg.sender].sub((tokens*(100-out2inIngredientPercentage))/100);\n1076-expression_statement-133-133", type_label=expression_statement];
1101 [label="133_ transfer(to, tokens*out2inIngredientPercentage/100);\n1101-expression_statement-134-134", type_label=expression_statement];
1112 [label="134_ return true;\n1112-return-135-135", type_label=return];
1115 [label="136_ genAddressFromGTIN13date\n1115-function_definition-137-144", type_label=function_definition];
1133 [label="137_ bytes32 a = keccak256(abi.encodePacked(_GTIN13,_YYMMDD));\n1133-new_variable-138-138", type_label=new_variable];
1134 [label="137_ bytes32 a\n1134-new_variable-138-138", type_label=new_variable];
1163 [label="142_ return b;\n1163-return-143-143", type_label=return];
1165 [label="144_ transferAndWriteUrl\n1165-function_definition-145-150", type_label=function_definition];
1186 [label="145_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n1186-expression_statement-146-146", type_label=expression_statement];
1203 [label="146_ balances[to] = balances[to].add(tokens);\n1203-expression_statement-147-147", type_label=expression_statement];
1226 [label="148_ return true;\n1226-return-149-149", type_label=return];
1229 [label="150_ comminglerSellsProductSKUWithProRataIngred\n1229-function_definition-151-158", type_label=function_definition];
1262 [label="151_ string memory url=_url;\n1262-new_variable-152-152", type_label=new_variable];
1263 [label="151_ string memory url\n1263-new_variable-152-152", type_label=new_variable];
1268 [label="152_ address c= genAddressFromGTIN13date( _GTIN13, _YYMMDD);\n1268-new_variable-153-153", type_label=new_variable];
1269 [label="152_ address c\n1269-new_variable-153-153", type_label=new_variable];
1279 [label="153_ require (_qttyIGRinLLSKU >0);\n1279-expression_statement-154-154", type_label=expression_statement];
1286 [label="154_ transferAndWriteUrl(c, _qttyIGRinLLSKU, _url);\n1286-expression_statement-155-155", type_label=expression_statement];
1295 [label="155_ transferAndWriteUrl(_to, (_numSKUsSold-1)*_qttyIGRinLLSKU,_url);\n1295-expression_statement-156-156", type_label=expression_statement];
1309 [label="156_ return true;\n1309-return-157-157", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
388 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
429 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
438 -> 448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
484 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
502 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
562 -> 579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
599 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
602 -> 623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
623 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
636 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
681 -> 699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
699 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
705 -> 726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
766 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
775 -> 794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
794 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
820 -> 853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
880 -> 921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
921 -> 934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
934 -> 944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
965 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
968 -> 989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
989 -> 995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
995 -> 1012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1035 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1038 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1069 -> 1076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 1101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1101 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1115 -> 1133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1163 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1165 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 1203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1226 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1229 -> 1262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1262 -> 1268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1268 -> 1279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1279 -> 1286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1286 -> 1295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1295 -> 1309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1309 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
