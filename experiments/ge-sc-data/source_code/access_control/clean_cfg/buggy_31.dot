digraph  {
13 [label="2_ transferFrom\n13-function_definition-3-3", type_label=function_definition];
35 [label="5_ signer\n35-function_definition-6-6", type_label=function_definition];
47 [label="8_ recover\n47-function_definition-9-28", type_label=function_definition];
64 [label="9_ if_signature.length != 65\n64-if-10-12", type_label=if];
1011 [label="9_ end_if", type_label=end_if];
71 [label="10_ return (address(0));\n71-return-11-11", type_label=return];
76 [label="12_ bytes32 r;\n76-new_variable-13-13", type_label=new_variable];
77 [label="12_ bytes32 r\n77-new_variable-13-13", type_label=new_variable];
81 [label="13_ bytes32 s;\n81-new_variable-14-14", type_label=new_variable];
82 [label="13_ bytes32 s\n82-new_variable-14-14", type_label=new_variable];
86 [label="14_ uint8 v;\n86-new_variable-15-15", type_label=new_variable];
87 [label="14_ uint8 v\n87-new_variable-15-15", type_label=new_variable];
131 [label="20_ if_uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\n131-if-21-23", type_label=if];
1078 [label="20_ end_if", type_label=end_if];
138 [label="21_ return address(0);\n138-return-22-22", type_label=return];
142 [label="23_ if_v != 27 && v != 28\n142-if-24-26", type_label=if];
1089 [label="23_ end_if", type_label=end_if];
151 [label="24_ return address(0);\n151-return-25-25", type_label=return];
155 [label="26_ return ecrecover(hash, v, r, s);\n155-return-27-27", type_label=return];
169 [label="30_ withdrawAll_txorigin38\n169-function_definition-31-34", type_label=function_definition];
181 [label="31_ require(tx.origin == owner_txorigin38);\n181-expression_statement-32-32", type_label=expression_statement];
190 [label="32_ _recipient.transfer(address(this).balance);\n190-expression_statement-33-33", type_label=expression_statement];
201 [label="34_ address private _owner;\n201-new_variable-35-35", type_label=new_variable];
206 [label="35_ transferTo_txorigin31\n206-function_definition-36-39", type_label=function_definition];
222 [label="36_ require(tx.origin == owner_txorigin31);\n222-expression_statement-37-37", type_label=expression_statement];
231 [label="37_ to.call.value(amount);\n231-expression_statement-38-38", type_label=expression_statement];
252 [label="41_ _owner = msg.sender;\n252-expression_statement-42-42", type_label=expression_statement];
266 [label="44_ withdrawAll_txorigin14\n266-function_definition-45-48", type_label=function_definition];
278 [label="45_ require(tx.origin == owner_txorigin14);\n278-expression_statement-46-46", type_label=expression_statement];
287 [label="46_ _recipient.transfer(address(this).balance);\n287-expression_statement-47-47", type_label=expression_statement];
298 [label="48_ owner\n298-function_definition-49-51", type_label=function_definition];
307 [label="49_ return _owner;\n307-return-50-50", type_label=return];
309 [label="51_ withdrawAll_txorigin30\n309-function_definition-52-55", type_label=function_definition];
321 [label="52_ require(tx.origin == owner_txorigin30);\n321-expression_statement-53-53", type_label=expression_statement];
330 [label="53_ _recipient.transfer(address(this).balance);\n330-expression_statement-54-54", type_label=expression_statement];
341 [label="55_ modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n341-expression_statement-56-59", type_label=expression_statement];
344 [label="56_ require(isOwner(), \"Ownable: caller is not the owner\");\n344-expression_statement-57-57", type_label=expression_statement];
353 [label="57_ _;\n353-expression_statement-58-58", type_label=expression_statement];
355 [label="59_ isOwner\n355-function_definition-60-62", type_label=function_definition];
364 [label="60_ return msg.sender == _owner;\n364-return-61-61", type_label=return];
370 [label="62_ bug_txorigin8\n370-function_definition-63-65", type_label=function_definition];
378 [label="63_ require(tx.origin == owner_txorigin8);\n378-expression_statement-64-64", type_label=expression_statement];
387 [label="65_ transferOwnership\n387-function_definition-66-68", type_label=function_definition];
394 [label="65_ onlyOwner\n394-expression_statement-66-66", type_label=expression_statement];
397 [label="66_ _transferOwnership(newOwner);\n397-expression_statement-67-67", type_label=expression_statement];
402 [label="68_ transferTo_txorigin39\n402-function_definition-69-72", type_label=function_definition];
418 [label="69_ require(tx.origin == owner_txorigin39);\n418-expression_statement-70-70", type_label=expression_statement];
427 [label="70_ to.call.value(amount);\n427-expression_statement-71-71", type_label=expression_statement];
436 [label="72_ _transferOwnership\n436-function_definition-73-77", type_label=function_definition];
444 [label="73_ require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n444-expression_statement-74-74", type_label=expression_statement];
462 [label="75_ _owner = newOwner;\n462-expression_statement-76-76", type_label=expression_statement];
466 [label="77_ bug_txorigin36\n466-function_definition-78-80", type_label=function_definition];
474 [label="78_ require(tx.origin == owner_txorigin36);\n474-expression_statement-79-79", type_label=expression_statement];
486 [label="82_ bug_txorigin4\n486-function_definition-83-85", type_label=function_definition];
494 [label="83_ require(tx.origin == owner_txorigin4);\n494-expression_statement-84-84", type_label=expression_statement];
503 [label="85_ uint256 private _guardCounter;\n503-new_variable-86-86", type_label=new_variable];
510 [label="87_ _guardCounter = 1;\n510-expression_statement-88-88", type_label=expression_statement];
514 [label="89_ transferTo_txorigin35\n514-function_definition-90-93", type_label=function_definition];
530 [label="90_ require(tx.origin == owner_txorigin35);\n530-expression_statement-91-91", type_label=expression_statement];
539 [label="91_ to.call.value(amount);\n539-expression_statement-92-92", type_label=expression_statement];
548 [label="93_ modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n    }\n548-expression_statement-94-99", type_label=expression_statement];
551 [label="94_ _guardCounter += 1;\n551-expression_statement-95-95", type_label=expression_statement];
552 [label="94_ _guardCounter += 1\n552-expression_statement-95-95", type_label=expression_statement];
555 [label="95_ uint256 localCounter = _guardCounter;\n555-new_variable-96-96", type_label=new_variable];
556 [label="95_ uint256 localCounter\n556-new_variable-96-96", type_label=new_variable];
561 [label="96_ _;\n561-expression_statement-97-97", type_label=expression_statement];
563 [label="97_ require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n563-expression_statement-98-98", type_label=expression_statement];
582 [label="101_ transferTo_txorigin7\n582-function_definition-102-105", type_label=function_definition];
598 [label="102_ require(tx.origin == owner_txorigin7);\n598-expression_statement-103-103", type_label=expression_statement];
607 [label="103_ to.call.value(amount);\n607-expression_statement-104-104", type_label=expression_statement];
616 [label="105_ IERC20 public token;\n616-new_variable-106-106", type_label=new_variable];
622 [label="106_ transferTo_txorigin23\n622-function_definition-107-110", type_label=function_definition];
638 [label="107_ require(tx.origin == owner_txorigin23);\n638-expression_statement-108-108", type_label=expression_statement];
647 [label="108_ to.call.value(amount);\n647-expression_statement-109-109", type_label=expression_statement];
656 [label="110_ address public relayer;\n656-new_variable-111-111", type_label=new_variable];
661 [label="111_ sendto_txorigin13\n661-function_definition-112-115", type_label=function_definition];
677 [label="112_ require (tx.origin == owner_txorigin13);\n677-expression_statement-113-113", type_label=expression_statement];
686 [label="113_ receiver.transfer(amount);\n686-expression_statement-114-114", type_label=expression_statement];
713 [label="117_ relayer = _relayer;\n713-expression_statement-118-118", type_label=expression_statement];
717 [label="118_ token = IERC20(_tokenAddress);\n717-expression_statement-119-119", type_label=expression_statement];
724 [label="120_ bug_txorigin40\n724-function_definition-121-123", type_label=function_definition];
732 [label="121_ require(tx.origin == owner_txorigin40);\n732-expression_statement-122-122", type_label=expression_statement];
741 [label="123_ execute\n741-function_definition-124-142", type_label=function_definition];
759 [label="128_ nonReentrant\n759-expression_statement-129-129", type_label=expression_statement];
763 [label="129_ require(tx.origin == relayer, \"Invalid transaction origin\");\n763-expression_statement-130-130", type_label=expression_statement];
775 [label="130_ Marmo marmo = Marmo(msg.sender);\n775-new_variable-131-131", type_label=new_variable];
776 [label="130_ Marmo marmo\n776-new_variable-131-131", type_label=new_variable];
787 [label="131_ bytes32 hash = keccak256(\n            abi.encodePacked(\n                _to,\n                _value,\n                _fee\n            )\n        );\n787-new_variable-132-138", type_label=new_variable];
788 [label="131_ bytes32 hash\n788-new_variable-132-132", type_label=new_variable];
805 [label="138_ require(marmo.signer() == ECDSA.recover(hash, _signature), \"Invalid signature\");\n805-expression_statement-139-139", type_label=expression_statement];
825 [label="139_ require(token.transferFrom(msg.sender, _to, _value));\n825-expression_statement-140-140", type_label=expression_statement];
841 [label="140_ require(token.transferFrom(msg.sender, relayer, _fee));\n841-expression_statement-141-141", type_label=expression_statement];
857 [label="142_ sendto_txorigin33\n857-function_definition-143-146", type_label=function_definition];
873 [label="143_ require (tx.origin == owner_txorigin33);\n873-expression_statement-144-144", type_label=expression_statement];
882 [label="144_ receiver.transfer(amount);\n882-expression_statement-145-145", type_label=expression_statement];
889 [label="146_ setRelayer\n889-function_definition-147-151", type_label=function_definition];
895 [label="146_ onlyOwner\n895-expression_statement-147-147", type_label=expression_statement];
899 [label="147_ require(_newRelayer != address(0));\n899-expression_statement-148-148", type_label=expression_statement];
914 [label="149_ relayer = _newRelayer;\n914-expression_statement-150-150", type_label=expression_statement];
918 [label="151_ transferTo_txorigin27\n918-function_definition-152-155", type_label=function_definition];
934 [label="152_ require(tx.origin == owner_txorigin27);\n934-expression_statement-153-153", type_label=expression_statement];
943 [label="153_ to.call.value(amount);\n943-expression_statement-154-154", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
"(1011, (9, 8), (11, 9))";
"(1078, (20, 8), (22, 9))";
"(1089, (23, 8), (25, 9))";
47 -> 64  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
64 -> 71  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
64 -> "(1011, (9, 8), (11, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
71 -> "(1011, (9, 8), (11, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
71 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
76 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 86  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 138  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
131 -> "(1078, (20, 8), (22, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
138 -> "(1078, (20, 8), (22, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
138 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
142 -> 151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
142 -> "(1089, (23, 8), (25, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
151 -> "(1089, (23, 8), (25, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
155 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
169 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
222 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
266 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
307 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
309 -> 321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
344 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
370 -> 378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
402 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
514 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
530 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
555 -> 561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
598 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
622 -> 638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
661 -> 677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
713 -> 717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
724 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
741 -> 763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
775 -> 787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
805 -> 825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
825 -> 841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
857 -> 873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
873 -> 882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
889 -> 899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
934 -> 943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(1011, (9, 8), (11, 9))" -> 76  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(1011, (9, 8), (11, 9))" -> 76  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
"(1078, (20, 8), (22, 9))" -> 142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(1078, (20, 8), (22, 9))" -> 142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
"(1089, (23, 8), (25, 9))" -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(1089, (23, 8), (25, 9))" -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
}
