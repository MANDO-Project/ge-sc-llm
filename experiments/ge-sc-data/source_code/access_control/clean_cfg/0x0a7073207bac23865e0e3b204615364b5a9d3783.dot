digraph  {
13 [label="2_ mapping (address => uint256) public investedETH;\n13-new_variable-3-3", type_label=new_variable];
20 [label="3_ mapping (address => uint256) public lastInvest;\n20-new_variable-4-4", type_label=new_variable];
27 [label="4_ mapping (address => uint256) public affiliateCommision;\n27-new_variable-5-5", type_label=new_variable];
34 [label="5_ address dev = 0xaf9c025ce6322a23ac00301c714f4f42895c9818;\n34-new_variable-6-6", type_label=new_variable];
39 [label="6_ address promoter = 0x6842a9ad0BC604c1D9330190B9035051a7525569;\n39-new_variable-7-7", type_label=new_variable];
44 [label="7_ investETH\n44-function_definition-8-24", type_label=function_definition];
53 [label="8_ require(msg.value >= 0.5 ether);\n53-expression_statement-9-9", type_label=expression_statement];
63 [label="9_ if_getProfit(msg.sender) > 0\n63-if-10-14", type_label=if];
73 [label="10_ uint256 profit = getProfit(msg.sender);\n73-new_variable-11-11", type_label=new_variable];
74 [label="10_ uint256 profit\n74-new_variable-11-11", type_label=new_variable];
84 [label="11_ lastInvest[msg.sender] = now;\n84-expression_statement-12-12", type_label=expression_statement];
92 [label="12_ msg.sender.transfer(profit);\n92-expression_statement-13-13", type_label=expression_statement];
101 [label="14_ uint256 amount = msg.value;\n101-new_variable-15-15", type_label=new_variable];
102 [label="14_ uint256 amount\n102-new_variable-15-15", type_label=new_variable];
109 [label="15_ uint256 commision = SafeMath.div(amount, 20);\n109-new_variable-16-16", type_label=new_variable];
110 [label="15_ uint256 commision\n110-new_variable-16-16", type_label=new_variable];
122 [label="16_ if_referral != msg.sender && referral != 0x1 && referral != dev && referral != promoter\n122-if-17-19", type_label=if];
141 [label="17_ affiliateCommision[referral] = SafeMath.add(affiliateCommision[referral], commision);\n141-expression_statement-18-18", type_label=expression_statement];
156 [label="19_ affiliateCommision[dev] = SafeMath.add(affiliateCommision[dev], commision);\n156-expression_statement-20-20", type_label=expression_statement];
171 [label="20_ affiliateCommision[promoter] = SafeMath.add(affiliateCommision[promoter], commision);\n171-expression_statement-21-21", type_label=expression_statement];
186 [label="21_ investedETH[msg.sender] = SafeMath.add(investedETH[msg.sender], amount);\n186-expression_statement-22-22", type_label=expression_statement];
205 [label="22_ lastInvest[msg.sender] = now;\n205-expression_statement-23-23", type_label=expression_statement];
213 [label="24_ withdraw\n213-function_definition-25-30", type_label=function_definition];
217 [label="25_ uint256 profit = getProfit(msg.sender);\n217-new_variable-26-26", type_label=new_variable];
218 [label="25_ uint256 profit\n218-new_variable-26-26", type_label=new_variable];
228 [label="26_ require(profit > 0);\n228-expression_statement-27-27", type_label=expression_statement];
235 [label="27_ lastInvest[msg.sender] = now;\n235-expression_statement-28-28", type_label=expression_statement];
243 [label="28_ msg.sender.transfer(profit);\n243-expression_statement-29-29", type_label=expression_statement];
252 [label="30_ getProfitFromSender\n252-function_definition-31-33", type_label=function_definition];
261 [label="31_ return getProfit(msg.sender);\n261-return-32-32", type_label=return];
268 [label="33_ getProfit\n268-function_definition-34-37", type_label=function_definition];
281 [label="34_ uint256 secondsPassed = SafeMath.sub(now, lastInvest[customer]);\n281-new_variable-35-35", type_label=new_variable];
282 [label="34_ uint256 secondsPassed\n282-new_variable-35-35", type_label=new_variable];
296 [label="35_ return SafeMath.div(SafeMath.mul(secondsPassed, investedETH[customer]), 345600);\n296-return-36-36", type_label=return];
314 [label="37_ reinvestProfit\n314-function_definition-38-43", type_label=function_definition];
318 [label="38_ uint256 profit = getProfit(msg.sender);\n318-new_variable-39-39", type_label=new_variable];
319 [label="38_ uint256 profit\n319-new_variable-39-39", type_label=new_variable];
329 [label="39_ require(profit > 0);\n329-expression_statement-40-40", type_label=expression_statement];
336 [label="40_ lastInvest[msg.sender] = now;\n336-expression_statement-41-41", type_label=expression_statement];
344 [label="41_ investedETH[msg.sender] = SafeMath.add(investedETH[msg.sender], profit);\n344-expression_statement-42-42", type_label=expression_statement];
363 [label="43_ getAffiliateCommision\n363-function_definition-44-46", type_label=function_definition];
372 [label="44_ return affiliateCommision[msg.sender];\n372-return-45-45", type_label=return];
378 [label="46_ withdrawAffiliateCommision\n378-function_definition-47-52", type_label=function_definition];
382 [label="47_ require(affiliateCommision[msg.sender] > 0);\n382-expression_statement-48-48", type_label=expression_statement];
393 [label="48_ uint256 commision = affiliateCommision[msg.sender];\n393-new_variable-49-49", type_label=new_variable];
394 [label="48_ uint256 commision\n394-new_variable-49-49", type_label=new_variable];
403 [label="49_ affiliateCommision[msg.sender] = 0;\n403-expression_statement-50-50", type_label=expression_statement];
411 [label="50_ msg.sender.transfer(commision);\n411-expression_statement-51-51", type_label=expression_statement];
420 [label="52_ getInvested\n420-function_definition-53-55", type_label=function_definition];
429 [label="53_ return investedETH[msg.sender];\n429-return-54-54", type_label=return];
435 [label="55_ getBalance\n435-function_definition-56-58", type_label=function_definition];
444 [label="56_ return this.balance;\n444-return-57-57", type_label=return];
448 [label="58_ min\n448-function_definition-59-61", type_label=function_definition];
465 [label="59_ return a < b ? a : b;\n465-return-60-60", type_label=return];
472 [label="61_ max\n472-function_definition-62-64", type_label=function_definition];
489 [label="62_ return a > b ? a : b;\n489-return-63-63", type_label=return];
499 [label="66_ mul\n499-function_definition-67-74", type_label=function_definition];
516 [label="67_ if_a == 0\n516-if-68-70", type_label=if];
521 [label="68_ return 0;\n521-return-69-69", type_label=return];
523 [label="70_ uint256 c = a * b;\n523-new_variable-71-71", type_label=new_variable];
524 [label="70_ uint256 c\n524-new_variable-71-71", type_label=new_variable];
531 [label="71_ assert(c / a == b);\n531-expression_statement-72-72", type_label=expression_statement];
540 [label="72_ return c;\n540-return-73-73", type_label=return];
542 [label="74_ div\n542-function_definition-75-78", type_label=function_definition];
559 [label="75_ uint256 c = a / b;\n559-new_variable-76-76", type_label=new_variable];
560 [label="75_ uint256 c\n560-new_variable-76-76", type_label=new_variable];
567 [label="76_ return c;\n567-return-77-77", type_label=return];
569 [label="78_ sub\n569-function_definition-79-82", type_label=function_definition];
586 [label="79_ assert(b <= a);\n586-expression_statement-80-80", type_label=expression_statement];
593 [label="80_ return a - b;\n593-return-81-81", type_label=return];
597 [label="82_ add\n597-function_definition-83-87", type_label=function_definition];
614 [label="83_ uint256 c = a + b;\n614-new_variable-84-84", type_label=new_variable];
615 [label="83_ uint256 c\n615-new_variable-84-84", type_label=new_variable];
622 [label="84_ assert(c >= a);\n622-expression_statement-85-85", type_label=expression_statement];
629 [label="85_ return c;\n629-return-86-86", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
13 -> 20  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
20 -> 27  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
27 -> 34  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 39  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 63  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
63 -> 73  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
63 -> 101  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
73 -> 84  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
84 -> 92  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
92 -> 101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
101 -> 109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 141  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
122 -> 156  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
141 -> 156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
156 -> 171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
171 -> 186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
186 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
213 -> 217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
217 -> 228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
228 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
235 -> 243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
268 -> 281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
281 -> 296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
296 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
314 -> 318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
336 -> 344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
372 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
378 -> 382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
382 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
429 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
435 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
448 -> 465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
465 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
472 -> 489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
499 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
516 -> 521  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
516 -> 523  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
521 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
523 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
542 -> 559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
569 -> 586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
586 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
597 -> 614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
614 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
622 -> 629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
629 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
