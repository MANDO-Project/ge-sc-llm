digraph  {
13 [label="2_ transfer\n13-function_definition-3-3", type_label=function_definition];
28 [label="3_ approve\n28-function_definition-4-4", type_label=function_definition];
43 [label="4_ transferFrom\n43-function_definition-5-5", type_label=function_definition];
62 [label="5_ totalSupply\n62-function_definition-6-6", type_label=function_definition];
70 [label="6_ balanceOf\n70-function_definition-7-7", type_label=function_definition];
82 [label="7_ allowance\n82-function_definition-8-8", type_label=function_definition];
136 [label="13_ string private _name;\n136-new_variable-14-14", type_label=new_variable];
141 [label="14_ string private _symbol;\n141-new_variable-15-15", type_label=new_variable];
146 [label="15_ uint8 private _decimals;\n146-new_variable-16-16", type_label=new_variable];
165 [label="17_ _name = name;\n165-expression_statement-18-18", type_label=expression_statement];
169 [label="18_ _symbol = symbol;\n169-expression_statement-19-19", type_label=expression_statement];
173 [label="19_ _decimals = decimals;\n173-expression_statement-20-20", type_label=expression_statement];
177 [label="21_ name\n177-function_definition-22-24", type_label=function_definition];
186 [label="22_ return _name;\n186-return-23-23", type_label=return];
188 [label="24_ symbol\n188-function_definition-25-27", type_label=function_definition];
197 [label="25_ return _symbol;\n197-return-26-26", type_label=return];
199 [label="27_ decimals\n199-function_definition-28-30", type_label=function_definition];
208 [label="28_ return _decimals;\n208-return-29-29", type_label=return];
217 [label="33_ mul\n217-function_definition-34-41", type_label=function_definition];
234 [label="34_ if_a == 0\n234-if-35-37", type_label=if];
239 [label="35_ return 0;\n239-return-36-36", type_label=return];
241 [label="37_ uint256 c = a * b;\n241-new_variable-38-38", type_label=new_variable];
242 [label="37_ uint256 c\n242-new_variable-38-38", type_label=new_variable];
249 [label="38_ require(c / a == b);\n249-expression_statement-39-39", type_label=expression_statement];
258 [label="39_ return c;\n258-return-40-40", type_label=return];
260 [label="41_ div\n260-function_definition-42-46", type_label=function_definition];
277 [label="42_ require(b > 0);\n277-expression_statement-43-43", type_label=expression_statement];
284 [label="43_ uint256 c = a / b;\n284-new_variable-44-44", type_label=new_variable];
285 [label="43_ uint256 c\n285-new_variable-44-44", type_label=new_variable];
292 [label="44_ return c;\n292-return-45-45", type_label=return];
294 [label="46_ sub\n294-function_definition-47-51", type_label=function_definition];
311 [label="47_ require(b <= a);\n311-expression_statement-48-48", type_label=expression_statement];
318 [label="48_ uint256 c = a - b;\n318-new_variable-49-49", type_label=new_variable];
319 [label="48_ uint256 c\n319-new_variable-49-49", type_label=new_variable];
326 [label="49_ return c;\n326-return-50-50", type_label=return];
328 [label="51_ add\n328-function_definition-52-56", type_label=function_definition];
345 [label="52_ uint256 c = a + b;\n345-new_variable-53-53", type_label=new_variable];
346 [label="52_ uint256 c\n346-new_variable-53-53", type_label=new_variable];
353 [label="53_ require(c >= a);\n353-expression_statement-54-54", type_label=expression_statement];
360 [label="54_ return c;\n360-return-55-55", type_label=return];
362 [label="56_ mod\n362-function_definition-57-60", type_label=function_definition];
379 [label="57_ require(b != 0);\n379-expression_statement-58-58", type_label=expression_statement];
386 [label="58_ return a % b;\n386-return-59-59", type_label=return];
405 [label="64_ mapping (address => uint256) private _balances;\n405-new_variable-65-65", type_label=new_variable];
412 [label="65_ mapping (address => mapping (address => uint256)) private _allowed;\n412-new_variable-66-66", type_label=new_variable];
421 [label="66_ uint256 private _totalSupply;\n421-new_variable-67-67", type_label=new_variable];
426 [label="67_ totalSupply\n426-function_definition-68-70", type_label=function_definition];
435 [label="68_ return _totalSupply;\n435-return-69-69", type_label=return];
437 [label="70_ balanceOf\n437-function_definition-71-73", type_label=function_definition];
450 [label="71_ return _balances[owner];\n450-return-72-72", type_label=return];
454 [label="73_ allowance\n454-function_definition-74-76", type_label=function_definition];
471 [label="74_ return _allowed[owner][spender];\n471-return-75-75", type_label=return];
477 [label="76_ transfer\n477-function_definition-77-80", type_label=function_definition];
493 [label="77_ _transfer(msg.sender, to, value);\n493-expression_statement-78-78", type_label=expression_statement];
504 [label="78_ return true;\n504-return-79-79", type_label=return];
507 [label="80_ approve\n507-function_definition-81-86", type_label=function_definition];
523 [label="81_ require(spender != address(0));\n523-expression_statement-82-82", type_label=expression_statement];
532 [label="82_ _allowed[msg.sender][spender] = value;\n532-expression_statement-83-83", type_label=expression_statement];
552 [label="84_ return true;\n552-return-85-85", type_label=return];
555 [label="86_ transferFrom\n555-function_definition-87-92", type_label=function_definition];
575 [label="87_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n575-expression_statement-88-88", type_label=expression_statement];
596 [label="88_ _transfer(from, to, value);\n596-expression_statement-89-89", type_label=expression_statement];
621 [label="90_ return true;\n621-return-91-91", type_label=return];
624 [label="92_ increaseAllowance\n624-function_definition-93-98", type_label=function_definition];
640 [label="93_ require(spender != address(0));\n640-expression_statement-94-94", type_label=expression_statement];
649 [label="94_ _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n649-expression_statement-95-95", type_label=expression_statement];
686 [label="96_ return true;\n686-return-97-97", type_label=return];
689 [label="98_ decreaseAllowance\n689-function_definition-99-104", type_label=function_definition];
705 [label="99_ require(spender != address(0));\n705-expression_statement-100-100", type_label=expression_statement];
714 [label="100_ _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n714-expression_statement-101-101", type_label=expression_statement];
751 [label="102_ return true;\n751-return-103-103", type_label=return];
754 [label="104_ _transfer\n754-function_definition-105-110", type_label=function_definition];
770 [label="105_ require(to != address(0));\n770-expression_statement-106-106", type_label=expression_statement];
779 [label="106_ _balances[from] = _balances[from].sub(value);\n779-expression_statement-107-107", type_label=expression_statement];
792 [label="107_ _balances[to] = _balances[to].add(value);\n792-expression_statement-108-108", type_label=expression_statement];
813 [label="110_ _mint\n813-function_definition-111-116", type_label=function_definition];
825 [label="111_ require(account != address(0));\n825-expression_statement-112-112", type_label=expression_statement];
834 [label="112_ _totalSupply = _totalSupply.add(value);\n834-expression_statement-113-113", type_label=expression_statement];
843 [label="113_ _balances[account] = _balances[account].add(value);\n843-expression_statement-114-114", type_label=expression_statement];
866 [label="116_ _burn\n866-function_definition-117-122", type_label=function_definition];
878 [label="117_ require(account != address(0));\n878-expression_statement-118-118", type_label=expression_statement];
887 [label="118_ _totalSupply = _totalSupply.sub(value);\n887-expression_statement-119-119", type_label=expression_statement];
896 [label="119_ _balances[account] = _balances[account].sub(value);\n896-expression_statement-120-120", type_label=expression_statement];
919 [label="122_ _burnFrom\n919-function_definition-123-127", type_label=function_definition];
931 [label="123_ _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n931-expression_statement-124-124", type_label=expression_statement];
952 [label="124_ _burn(account, value);\n952-expression_statement-125-125", type_label=expression_statement];
985 [label="130_ burn\n985-function_definition-131-133", type_label=function_definition];
993 [label="131_ _burn(msg.sender, value);\n993-expression_statement-132-132", type_label=expression_statement];
1002 [label="133_ burnFrom\n1002-function_definition-134-136", type_label=function_definition];
1014 [label="134_ _burnFrom(from, value);\n1014-expression_statement-135-135", type_label=expression_statement];
1028 [label="139_ address private _owner;\n1028-new_variable-140-140", type_label=new_variable];
1045 [label="142_ _owner = msg.sender;\n1045-expression_statement-143-143", type_label=expression_statement];
1059 [label="145_ owner\n1059-function_definition-146-148", type_label=function_definition];
1068 [label="146_ return _owner;\n1068-return-147-147", type_label=return];
1070 [label="148_ modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n1070-expression_statement-149-152", type_label=expression_statement];
1073 [label="149_ require(isOwner());\n1073-expression_statement-150-150", type_label=expression_statement];
1079 [label="150_ _;\n1079-expression_statement-151-151", type_label=expression_statement];
1081 [label="152_ isOwner\n1081-function_definition-153-155", type_label=function_definition];
1090 [label="153_ return msg.sender == _owner;\n1090-return-154-154", type_label=return];
1096 [label="155_ renounceOwnership\n1096-function_definition-156-159", type_label=function_definition];
1099 [label="155_ onlyOwner\n1099-expression_statement-156-156", type_label=expression_statement];
1110 [label="157_ _owner = address(0);\n1110-expression_statement-158-158", type_label=expression_statement];
1116 [label="159_ transferOwnership\n1116-function_definition-160-162", type_label=function_definition];
1123 [label="159_ onlyOwner\n1123-expression_statement-160-160", type_label=expression_statement];
1126 [label="160_ _transferOwnership(newOwner);\n1126-expression_statement-161-161", type_label=expression_statement];
1131 [label="162_ _transferOwnership\n1131-function_definition-163-167", type_label=function_definition];
1139 [label="163_ require(newOwner != address(0));\n1139-expression_statement-164-164", type_label=expression_statement];
1154 [label="165_ _owner = newOwner;\n1154-expression_statement-166-166", type_label=expression_statement];
1165 [label="170_ struct Role {\n        mapping (address => bool) bearer;\n    }\n1165-expression_statement-171-173", type_label=expression_statement];
1173 [label="173_ add\n1173-function_definition-174-178", type_label=function_definition];
1186 [label="174_ require(account != address(0));\n1186-expression_statement-175-175", type_label=expression_statement];
1195 [label="175_ require(!has(role, account));\n1195-expression_statement-176-176", type_label=expression_statement];
1206 [label="176_ role.bearer[account] = true;\n1206-expression_statement-177-177", type_label=expression_statement];
1215 [label="178_ remove\n1215-function_definition-179-183", type_label=function_definition];
1228 [label="179_ require(account != address(0));\n1228-expression_statement-180-180", type_label=expression_statement];
1237 [label="180_ require(has(role, account));\n1237-expression_statement-181-181", type_label=expression_statement];
1247 [label="181_ role.bearer[account] = false;\n1247-expression_statement-182-182", type_label=expression_statement];
1256 [label="183_ has\n1256-function_definition-184-187", type_label=function_definition];
1274 [label="184_ require(account != address(0));\n1274-expression_statement-185-185", type_label=expression_statement];
1283 [label="185_ return role.bearer[account];\n1283-return-186-186", type_label=return];
1315 [label="193_ Roles.Role private _pausers;\n1315-new_variable-194-194", type_label=new_variable];
1324 [label="195_ _addPauser(msg.sender);\n1324-expression_statement-196-196", type_label=expression_statement];
1331 [label="197_ modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n1331-expression_statement-198-201", type_label=expression_statement];
1334 [label="198_ require(isPauser(msg.sender));\n1334-expression_statement-199-199", type_label=expression_statement];
1344 [label="199_ _;\n1344-expression_statement-200-200", type_label=expression_statement];
1346 [label="201_ isPauser\n1346-function_definition-202-204", type_label=function_definition];
1359 [label="202_ return _pausers.has(account);\n1359-return-203-203", type_label=return];
1366 [label="204_ addPauser\n1366-function_definition-205-207", type_label=function_definition];
1373 [label="204_ onlyPauser\n1373-expression_statement-205-205", type_label=expression_statement];
1376 [label="205_ _addPauser(account);\n1376-expression_statement-206-206", type_label=expression_statement];
1381 [label="207_ renouncePauser\n1381-function_definition-208-210", type_label=function_definition];
1385 [label="208_ _removePauser(msg.sender);\n1385-expression_statement-209-209", type_label=expression_statement];
1392 [label="210_ _addPauser\n1392-function_definition-211-214", type_label=function_definition];
1400 [label="211_ _pausers.add(account);\n1400-expression_statement-212-212", type_label=expression_statement];
1411 [label="214_ _removePauser\n1411-function_definition-215-218", type_label=function_definition];
1419 [label="215_ _pausers.remove(account);\n1419-expression_statement-216-216", type_label=expression_statement];
1452 [label="223_ bool private _paused;\n1452-new_variable-224-224", type_label=new_variable];
1459 [label="225_ _paused = false;\n1459-expression_statement-226-226", type_label=expression_statement];
1464 [label="227_ paused\n1464-function_definition-228-230", type_label=function_definition];
1473 [label="228_ return _paused;\n1473-return-229-229", type_label=return];
1475 [label="230_ modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n1475-expression_statement-231-234", type_label=expression_statement];
1478 [label="231_ require(!_paused);\n1478-expression_statement-232-232", type_label=expression_statement];
1484 [label="232_ _;\n1484-expression_statement-233-233", type_label=expression_statement];
1486 [label="234_ modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n1486-expression_statement-235-238", type_label=expression_statement];
1489 [label="235_ require(_paused);\n1489-expression_statement-236-236", type_label=expression_statement];
1494 [label="236_ _;\n1494-expression_statement-237-237", type_label=expression_statement];
1496 [label="238_ pause\n1496-function_definition-239-242", type_label=function_definition];
1499 [label="238_ onlyPauser\n1499-expression_statement-239-239", type_label=expression_statement];
1501 [label="238_ whenNotPaused\n1501-expression_statement-239-239", type_label=expression_statement];
1504 [label="239_ _paused = true;\n1504-expression_statement-240-240", type_label=expression_statement];
1515 [label="242_ unpause\n1515-function_definition-243-246", type_label=function_definition];
1518 [label="242_ onlyPauser\n1518-expression_statement-243-243", type_label=expression_statement];
1520 [label="242_ whenPaused\n1520-expression_statement-243-243", type_label=expression_statement];
1523 [label="243_ _paused = false;\n1523-expression_statement-244-244", type_label=expression_statement];
1560 [label="252_ Roles.Role private _minters;\n1560-new_variable-253-253", type_label=new_variable];
1569 [label="254_ _addMinter(msg.sender);\n1569-expression_statement-255-255", type_label=expression_statement];
1576 [label="256_ modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n1576-expression_statement-257-260", type_label=expression_statement];
1579 [label="257_ require(isMinter(msg.sender));\n1579-expression_statement-258-258", type_label=expression_statement];
1589 [label="258_ _;\n1589-expression_statement-259-259", type_label=expression_statement];
1591 [label="260_ isMinter\n1591-function_definition-261-263", type_label=function_definition];
1604 [label="261_ return _minters.has(account);\n1604-return-262-262", type_label=return];
1611 [label="263_ addMinter\n1611-function_definition-264-266", type_label=function_definition];
1618 [label="263_ onlyMinter\n1618-expression_statement-264-264", type_label=expression_statement];
1621 [label="264_ _addMinter(account);\n1621-expression_statement-265-265", type_label=expression_statement];
1626 [label="266_ renounceMinter\n1626-function_definition-267-269", type_label=function_definition];
1630 [label="267_ _removeMinter(msg.sender);\n1630-expression_statement-268-268", type_label=expression_statement];
1637 [label="269_ _addMinter\n1637-function_definition-270-273", type_label=function_definition];
1645 [label="270_ _minters.add(account);\n1645-expression_statement-271-271", type_label=expression_statement];
1656 [label="273_ _removeMinter\n1656-function_definition-274-277", type_label=function_definition];
1664 [label="274_ _minters.remove(account);\n1664-expression_statement-275-275", type_label=expression_statement];
1701 [label="283_ Roles.Role private _whitelistAdmins;\n1701-new_variable-284-284", type_label=new_variable];
1710 [label="285_ _addWhitelistAdmin(msg.sender);\n1710-expression_statement-286-286", type_label=expression_statement];
1717 [label="287_ modifier onlyWhitelistAdmin() {\n        require(isWhitelistAdmin(msg.sender));\n        _;\n    }\n1717-expression_statement-288-291", type_label=expression_statement];
1720 [label="288_ require(isWhitelistAdmin(msg.sender));\n1720-expression_statement-289-289", type_label=expression_statement];
1730 [label="289_ _;\n1730-expression_statement-290-290", type_label=expression_statement];
1732 [label="291_ isWhitelistAdmin\n1732-function_definition-292-294", type_label=function_definition];
1745 [label="292_ return _whitelistAdmins.has(account);\n1745-return-293-293", type_label=return];
1752 [label="294_ addWhitelistAdmin\n1752-function_definition-295-297", type_label=function_definition];
1759 [label="294_ onlyWhitelistAdmin\n1759-expression_statement-295-295", type_label=expression_statement];
1762 [label="295_ _addWhitelistAdmin(account);\n1762-expression_statement-296-296", type_label=expression_statement];
1767 [label="297_ renounceWhitelistAdmin\n1767-function_definition-298-300", type_label=function_definition];
1771 [label="298_ _removeWhitelistAdmin(msg.sender);\n1771-expression_statement-299-299", type_label=expression_statement];
1778 [label="300_ _addWhitelistAdmin\n1778-function_definition-301-304", type_label=function_definition];
1786 [label="301_ _whitelistAdmins.add(account);\n1786-expression_statement-302-302", type_label=expression_statement];
1797 [label="304_ _removeWhitelistAdmin\n1797-function_definition-305-308", type_label=function_definition];
1805 [label="305_ _whitelistAdmins.remove(account);\n1805-expression_statement-306-306", type_label=expression_statement];
1845 [label="314_ Roles.Role private _whitelisteds;\n1845-new_variable-315-315", type_label=new_variable];
1852 [label="315_ modifier onlyWhitelisted() {\n        require(isWhitelisted(msg.sender));\n        _;\n    }\n1852-expression_statement-316-319", type_label=expression_statement];
1855 [label="316_ require(isWhitelisted(msg.sender));\n1855-expression_statement-317-317", type_label=expression_statement];
1865 [label="317_ _;\n1865-expression_statement-318-318", type_label=expression_statement];
1867 [label="319_ isWhitelisted\n1867-function_definition-320-322", type_label=function_definition];
1880 [label="320_ return _whitelisteds.has(account);\n1880-return-321-321", type_label=return];
1887 [label="322_ addWhitelisted\n1887-function_definition-323-325", type_label=function_definition];
1894 [label="322_ onlyWhitelistAdmin\n1894-expression_statement-323-323", type_label=expression_statement];
1897 [label="323_ _addWhitelisted(account);\n1897-expression_statement-324-324", type_label=expression_statement];
1902 [label="325_ removeWhitelisted\n1902-function_definition-326-328", type_label=function_definition];
1909 [label="325_ onlyWhitelistAdmin\n1909-expression_statement-326-326", type_label=expression_statement];
1912 [label="326_ _removeWhitelisted(account);\n1912-expression_statement-327-327", type_label=expression_statement];
1917 [label="328_ renounceWhitelisted\n1917-function_definition-329-331", type_label=function_definition];
1921 [label="329_ _removeWhitelisted(msg.sender);\n1921-expression_statement-330-330", type_label=expression_statement];
1928 [label="331_ _addWhitelisted\n1928-function_definition-332-335", type_label=function_definition];
1936 [label="332_ _whitelisteds.add(account);\n1936-expression_statement-333-333", type_label=expression_statement];
1947 [label="335_ _removeWhitelisted\n1947-function_definition-336-339", type_label=function_definition];
1955 [label="336_ _whitelisteds.remove(account);\n1955-expression_statement-337-337", type_label=expression_statement];
1980 [label="343_ WhitelistedRole()\n1980-expression_statement-344-344", type_label=expression_statement];
1983 [label="345_ verifyParticipant\n1983-function_definition-346-350", type_label=function_definition];
1990 [label="345_ onlyWhitelistAdmin\n1990-expression_statement-346-346", type_label=expression_statement];
1993 [label="346_ if\n1993-if-347-349", type_label=if];
2000 [label="347_ addWhitelisted(participant);\n2000-expression_statement-348-348", type_label=expression_statement];
2005 [label="350_ removeWhitelistAdmin\n2005-function_definition-351-354", type_label=function_definition];
2012 [label="350_ onlyOwner\n2012-expression_statement-351-351", type_label=expression_statement];
2015 [label="351_ require(account != msg.sender, \"Use renounceWhitelistAdmin\");\n2015-expression_statement-352-352", type_label=expression_statement];
2027 [label="352_ _removeWhitelistAdmin(account);\n2027-expression_statement-353-353", type_label=expression_statement];
2054 [label="357_ mapping(address => uint256) public pendingBuys;\n2054-new_variable-358-358", type_label=new_variable];
2061 [label="358_ address[] public participantAddresses;\n2061-new_variable-359-359", type_label=new_variable];
2067 [label="359_ mapping (address => uint256) public pendingWithdrawals;\n2067-new_variable-360-360", type_label=new_variable];
2074 [label="360_ address payable[] public withdrawals;\n2074-new_variable-361-361", type_label=new_variable];
2080 [label="361_ uint256 public minimumWei = 50 finney;\n2080-new_variable-362-362", type_label=new_variable];
2087 [label="362_ uint256 public entryFee = 50;\n2087-new_variable-363-363", type_label=new_variable];
2093 [label="363_ uint256 public exitFee = 50;\n2093-new_variable-364-364", type_label=new_variable];
2099 [label="364_ uint256 public minTokenRedemption = 1 ether;\n2099-new_variable-365-365", type_label=new_variable];
2106 [label="365_ uint256 public maxAllocationsPerTx = 50;\n2106-new_variable-366-366", type_label=new_variable];
2112 [label="366_ uint256 public maxWithdrawalsPerTx = 50;\n2112-new_variable-367-367", type_label=new_variable];
2118 [label="367_ Price public price;\n2118-new_variable-368-368", type_label=new_variable];
2124 [label="368_ address public whitelistContract;\n2124-new_variable-369-369", type_label=new_variable];
2129 [label="369_ struct Price {\n        uint256 numerator;\n        uint256 denominator;\n    }\n2129-expression_statement-370-373", type_label=expression_statement];
2248 [label="384_ ERC20Detailed(\"CRYPTO10 Hedged\", \"C10\", 18)\n2248-expression_statement-385-385", type_label=expression_statement];
2258 [label="385_ ERC20Burnable()\n2258-expression_statement-386-386", type_label=expression_statement];
2260 [label="386_ Pausable()\n2260-expression_statement-387-387", type_label=expression_statement];
2263 [label="387_ price = Price(priceNumeratorInput, 1000);\n2263-expression_statement-388-388", type_label=expression_statement];
2272 [label="388_ require(priceNumeratorInput > 0, \"Invalid price numerator\");\n2272-expression_statement-389-389", type_label=expression_statement];
2282 [label="389_ require(whitelistContractInput != address(0), \"Invalid whitelist address\");\n2282-expression_statement-390-390", type_label=expression_statement];
2294 [label="390_ whitelistContract = whitelistContractInput;\n2294-expression_statement-391-391", type_label=expression_statement];
2302 [label="393_ buyTokens(msg.sender);\n2302-expression_statement-394-394", type_label=expression_statement];
2309 [label="395_ buy\n2309-function_definition-396-398", type_label=function_definition];
2314 [label="396_ buyTokens(msg.sender);\n2314-expression_statement-397-397", type_label=expression_statement];
2321 [label="398_ setMaxAllocationsPerTx\n2321-function_definition-399-402", type_label=function_definition];
2328 [label="398_ onlyOwner\n2328-expression_statement-399-399", type_label=expression_statement];
2331 [label="399_ require(newMaxAllocationsPerTx > 0, \"Must be greater than 0\");\n2331-expression_statement-400-400", type_label=expression_statement];
2341 [label="400_ maxAllocationsPerTx = newMaxAllocationsPerTx;\n2341-expression_statement-401-401", type_label=expression_statement];
2345 [label="402_ setMaxWithdrawalsPerTx\n2345-function_definition-403-406", type_label=function_definition];
2352 [label="402_ onlyOwner\n2352-expression_statement-403-403", type_label=expression_statement];
2355 [label="403_ require(newMaxWithdrawalsPerTx > 0, \"Must be greater than 0\");\n2355-expression_statement-404-404", type_label=expression_statement];
2365 [label="404_ maxWithdrawalsPerTx = newMaxWithdrawalsPerTx;\n2365-expression_statement-405-405", type_label=expression_statement];
2369 [label="406_ setEntryFee\n2369-function_definition-407-410", type_label=function_definition];
2376 [label="406_ onlyOwner\n2376-expression_statement-407-407", type_label=expression_statement];
2379 [label="407_ require(newFee < 10000, \"Must be less than 100 percent\");\n2379-expression_statement-408-408", type_label=expression_statement];
2389 [label="408_ entryFee = newFee;\n2389-expression_statement-409-409", type_label=expression_statement];
2393 [label="410_ setExitFee\n2393-function_definition-411-414", type_label=function_definition];
2400 [label="410_ onlyOwner\n2400-expression_statement-411-411", type_label=expression_statement];
2403 [label="411_ require(newFee < 10000, \"Must be less than 100 percent\");\n2403-expression_statement-412-412", type_label=expression_statement];
2413 [label="412_ exitFee = newFee;\n2413-expression_statement-413-413", type_label=expression_statement];
2417 [label="414_ setMinimumBuyValue\n2417-function_definition-415-418", type_label=function_definition];
2424 [label="414_ onlyOwner\n2424-expression_statement-415-415", type_label=expression_statement];
2427 [label="415_ require(newMinimumWei > 0, \"Minimum must be greater than 0\");\n2427-expression_statement-416-416", type_label=expression_statement];
2437 [label="416_ minimumWei = newMinimumWei;\n2437-expression_statement-417-417", type_label=expression_statement];
2441 [label="418_ setMinimumTokenRedemption\n2441-function_definition-419-422", type_label=function_definition];
2448 [label="418_ onlyOwner\n2448-expression_statement-419-419", type_label=expression_statement];
2451 [label="419_ require(newMinTokenRedemption > 0, \"Minimum must be greater than 0\");\n2451-expression_statement-420-420", type_label=expression_statement];
2461 [label="420_ minTokenRedemption = newMinTokenRedemption;\n2461-expression_statement-421-421", type_label=expression_statement];
2465 [label="422_ updatePrice\n2465-function_definition-423-429", type_label=function_definition];
2472 [label="422_ onlyMinter\n2472-expression_statement-423-423", type_label=expression_statement];
2475 [label="423_ require(newNumerator > 0, \"Must be positive value\");\n2475-expression_statement-424-424", type_label=expression_statement];
2485 [label="424_ price.numerator = newNumerator;\n2485-expression_statement-425-425", type_label=expression_statement];
2491 [label="425_ allocateTokens();\n2491-expression_statement-426-426", type_label=expression_statement];
2494 [label="426_ processWithdrawals();\n2494-expression_statement-427-427", type_label=expression_statement];
2507 [label="429_ updatePriceDenominator\n2507-function_definition-430-433", type_label=function_definition];
2514 [label="429_ onlyMinter\n2514-expression_statement-430-430", type_label=expression_statement];
2517 [label="430_ require(newDenominator > 0, \"Must be positive value\");\n2517-expression_statement-431-431", type_label=expression_statement];
2527 [label="431_ price.denominator = newDenominator;\n2527-expression_statement-432-432", type_label=expression_statement];
2533 [label="433_ requestWithdrawal\n2533-function_definition-434-447", type_label=function_definition];
2540 [label="433_ whenNotPaused\n2540-expression_statement-434-434", type_label=expression_statement];
2542 [label="434_ onlyWhitelisted\n2542-expression_statement-435-435", type_label=expression_statement];
2545 [label="435_ address payable participant = msg.sender;\n2545-new_variable-436-436", type_label=new_variable];
2546 [label="435_ address payable participant\n2546-new_variable-436-436", type_label=new_variable];
2553 [label="436_ require(balanceOf(participant) >= amountTokensToWithdraw, \n            \"Cannot withdraw more than balance held\");\n2553-expression_statement-437-438", type_label=expression_statement];
2566 [label="438_ require(amountTokensToWithdraw >= minTokenRedemption, \"Too few tokens\");\n2566-expression_statement-439-439", type_label=expression_statement];
2576 [label="439_ burn(amountTokensToWithdraw);\n2576-expression_statement-440-440", type_label=expression_statement];
2581 [label="440_ uint256 pendingAmount = pendingWithdrawals[participant];\n2581-new_variable-441-441", type_label=new_variable];
2582 [label="440_ uint256 pendingAmount\n2582-new_variable-441-441", type_label=new_variable];
2589 [label="441_ if_pendingAmount == 0\n2589-if-442-444", type_label=if];
2594 [label="442_ withdrawals.push(participant);\n2594-expression_statement-443-443", type_label=expression_statement];
2601 [label="444_ pendingWithdrawals[participant] = pendingAmount.add(amountTokensToWithdraw);\n2601-expression_statement-445-445", type_label=expression_statement];
2618 [label="447_ claimTokens\n2618-function_definition-448-453", type_label=function_definition];
2626 [label="447_ onlyOwner\n2626-expression_statement-448-448", type_label=expression_statement];
2629 [label="448_ require(address(token) != address(0), \"Invalid address\");\n2629-expression_statement-449-449", type_label=expression_statement];
2643 [label="449_ uint256 balance = token.balanceOf(address(this));\n2643-new_variable-450-450", type_label=new_variable];
2644 [label="449_ uint256 balance\n2644-new_variable-450-450", type_label=new_variable];
2656 [label="450_ token.transfer(owner(), token.balanceOf(address(this)));\n2656-expression_statement-451-451", type_label=expression_statement];
2681 [label="453_ burnForParticipant\n2681-function_definition-454-456", type_label=function_definition];
2692 [label="453_ onlyOwner\n2692-expression_statement-454-454", type_label=expression_statement];
2695 [label="454_ _burn(account, value);\n2695-expression_statement-455-455", type_label=expression_statement];
2702 [label="456_ addLiquidity\n2702-function_definition-457-460", type_label=function_definition];
2707 [label="457_ require(msg.value > 0, \"Must be positive value\");\n2707-expression_statement-458-458", type_label=expression_statement];
2725 [label="460_ removeLiquidity\n2725-function_definition-461-465", type_label=function_definition];
2732 [label="460_ onlyOwner\n2732-expression_statement-461-461", type_label=expression_statement];
2735 [label="461_ require(amount <= address(this).balance, \"Insufficient balance\");\n2735-expression_statement-462-462", type_label=expression_statement];
2749 [label="462_ msg.sender.transfer(amount);\n2749-expression_statement-463-463", type_label=expression_statement];
2762 [label="465_ removeMinter\n2762-function_definition-466-469", type_label=function_definition];
2769 [label="465_ onlyOwner\n2769-expression_statement-466-466", type_label=expression_statement];
2772 [label="466_ require(account != msg.sender, \"Use renounceMinter\");\n2772-expression_statement-467-467", type_label=expression_statement];
2784 [label="467_ _removeMinter(account);\n2784-expression_statement-468-468", type_label=expression_statement];
2789 [label="469_ removePauser\n2789-function_definition-470-473", type_label=function_definition];
2796 [label="469_ onlyOwner\n2796-expression_statement-470-470", type_label=expression_statement];
2799 [label="470_ require(account != msg.sender, \"Use renouncePauser\");\n2799-expression_statement-471-471", type_label=expression_statement];
2811 [label="471_ _removePauser(account);\n2811-expression_statement-472-472", type_label=expression_statement];
2816 [label="473_ numberWithdrawalsPending\n2816-function_definition-474-476", type_label=function_definition];
2825 [label="474_ return withdrawals.length;\n2825-return-475-475", type_label=return];
2829 [label="476_ numberBuysPending\n2829-function_definition-477-479", type_label=function_definition];
2838 [label="477_ return participantAddresses.length;\n2838-return-478-478", type_label=return];
2842 [label="479_ mint\n2842-function_definition-480-483", type_label=function_definition];
2853 [label="479_ onlyMinter\n2853-expression_statement-480-480", type_label=expression_statement];
2855 [label="479_ whenNotPaused\n2855-expression_statement-480-480", type_label=expression_statement];
2862 [label="480_ _mint(to, value);\n2862-expression_statement-481-481", type_label=expression_statement];
2869 [label="481_ return true;\n2869-return-482-482", type_label=return];
2872 [label="483_ buyTokens\n2872-function_definition-484-493", type_label=function_definition];
2879 [label="483_ whenNotPaused\n2879-expression_statement-484-484", type_label=expression_statement];
2881 [label="483_ onlyWhitelisted\n2881-expression_statement-484-484", type_label=expression_statement];
2884 [label="484_ assert(participant != address(0));\n2884-expression_statement-485-485", type_label=expression_statement];
2893 [label="485_ require(msg.value >= minimumWei, \"Minimum wei not met\");\n2893-expression_statement-486-486", type_label=expression_statement];
2905 [label="486_ uint256 pendingAmount = pendingBuys[participant];\n2905-new_variable-487-487", type_label=new_variable];
2906 [label="486_ uint256 pendingAmount\n2906-new_variable-487-487", type_label=new_variable];
2913 [label="487_ if_pendingAmount == 0\n2913-if-488-490", type_label=if];
2918 [label="488_ participantAddresses.push(participant);\n2918-expression_statement-489-489", type_label=expression_statement];
2925 [label="490_ pendingBuys[participant] = pendingAmount.add(msg.value);\n2925-expression_statement-491-491", type_label=expression_statement];
2946 [label="493_ allocateTokens\n2946-function_definition-494-501", type_label=function_definition];
2950 [label="494_ uint256 numberOfAllocations = min(participantAddresses.length, maxAllocationsPerTx);\n2950-new_variable-495-495", type_label=new_variable];
2951 [label="494_ uint256 numberOfAllocations\n2951-new_variable-495-495", type_label=new_variable];
2963 [label="495_ uint256 startingIndex = participantAddresses.length;\n2963-new_variable-496-496", type_label=new_variable];
2964 [label="495_ uint256 startingIndex\n2964-new_variable-496-496", type_label=new_variable];
2971 [label="496_ uint256 endingIndex = participantAddresses.length.sub(numberOfAllocations);\n2971-new_variable-497-497", type_label=new_variable];
2972 [label="496_ uint256 endingIndex\n2972-new_variable-497-497", type_label=new_variable];
2984 [label="497_ for(i > endingIndex;;i--)\n2984-for-498-500", type_label=for];
2986 [label="497_ uint256 i\n2986-new_variable-498-498", type_label=new_variable];
2995 [label="497_ i--\n2995-expression_statement-498-498", type_label=expression_statement];
2998 [label="498_ handleAllocation(i - 1);\n2998-expression_statement-499-499", type_label=expression_statement];
3005 [label="501_ handleAllocation\n3005-function_definition-502-515", type_label=function_definition];
3013 [label="502_ address participant = participantAddresses[index];\n3013-new_variable-503-503", type_label=new_variable];
3014 [label="502_ address participant\n3014-new_variable-503-503", type_label=new_variable];
3021 [label="503_ uint256 deposit = pendingBuys[participant];\n3021-new_variable-504-504", type_label=new_variable];
3022 [label="503_ uint256 deposit\n3022-new_variable-504-504", type_label=new_variable];
3029 [label="504_ uint256 feeAmount = deposit.mul(entryFee) / 10000;\n3029-new_variable-505-505", type_label=new_variable];
3030 [label="504_ uint256 feeAmount\n3030-new_variable-505-505", type_label=new_variable];
3042 [label="505_ uint256 balance = deposit.sub(feeAmount);\n3042-new_variable-506-506", type_label=new_variable];
3043 [label="505_ uint256 balance\n3043-new_variable-506-506", type_label=new_variable];
3053 [label="506_ uint256 newTokens = balance.mul(price.numerator) / price.denominator;\n3053-new_variable-507-507", type_label=new_variable];
3054 [label="506_ uint256 newTokens\n3054-new_variable-507-507", type_label=new_variable];
3070 [label="507_ pendingBuys[participant] = 0;\n3070-expression_statement-508-508", type_label=expression_statement];
3076 [label="508_ participantAddresses.pop();\n3076-expression_statement-509-509", type_label=expression_statement];
3081 [label="509_ if_feeAmount > 0\n3081-if-510-512", type_label=if];
3086 [label="510_ address(uint160(owner())).transfer(feeAmount);\n3086-expression_statement-511-511", type_label=expression_statement];
3098 [label="512_ mint(participant, newTokens);\n3098-expression_statement-513-513", type_label=expression_statement];
3113 [label="515_ processWithdrawals\n3113-function_definition-516-523", type_label=function_definition];
3117 [label="516_ uint256 numberOfWithdrawals = min(withdrawals.length, maxWithdrawalsPerTx);\n3117-new_variable-517-517", type_label=new_variable];
3118 [label="516_ uint256 numberOfWithdrawals\n3118-new_variable-517-517", type_label=new_variable];
3130 [label="517_ uint256 startingIndex = withdrawals.length;\n3130-new_variable-518-518", type_label=new_variable];
3131 [label="517_ uint256 startingIndex\n3131-new_variable-518-518", type_label=new_variable];
3138 [label="518_ uint256 endingIndex = withdrawals.length.sub(numberOfWithdrawals);\n3138-new_variable-519-519", type_label=new_variable];
3139 [label="518_ uint256 endingIndex\n3139-new_variable-519-519", type_label=new_variable];
3151 [label="519_ for(i > endingIndex;;i--)\n3151-for-520-522", type_label=for];
3153 [label="519_ uint256 i\n3153-new_variable-520-520", type_label=new_variable];
3162 [label="519_ i--\n3162-expression_statement-520-520", type_label=expression_statement];
3165 [label="520_ handleWithdrawal(i - 1);\n3165-expression_statement-521-521", type_label=expression_statement];
3172 [label="523_ handleWithdrawal\n3172-function_definition-524-546", type_label=function_definition];
3180 [label="524_ address payable participant = withdrawals[index];\n3180-new_variable-525-525", type_label=new_variable];
3181 [label="524_ address payable participant\n3181-new_variable-525-525", type_label=new_variable];
3188 [label="525_ uint256 tokens = pendingWithdrawals[participant];\n3188-new_variable-526-526", type_label=new_variable];
3189 [label="525_ uint256 tokens\n3189-new_variable-526-526", type_label=new_variable];
3196 [label="526_ uint256 withdrawValue = tokens.mul(price.denominator) / price.numerator;\n3196-new_variable-527-527", type_label=new_variable];
3197 [label="526_ uint256 withdrawValue\n3197-new_variable-527-527", type_label=new_variable];
3213 [label="527_ pendingWithdrawals[participant] = 0;\n3213-expression_statement-528-528", type_label=expression_statement];
3219 [label="528_ withdrawals.pop();\n3219-expression_statement-529-529", type_label=expression_statement];
3224 [label="529_ if_address(this).balance < withdrawValue\n3224-if-530-534", type_label=if];
3233 [label="530_ mint(participant, tokens);\n3233-expression_statement-531-531", type_label=expression_statement];
3246 [label="532_ return;\n3246-return-533-533", type_label=return];
3247 [label="534_ uint256 feeAmount = withdrawValue.mul(exitFee) / 10000;\n3247-new_variable-535-535", type_label=new_variable];
3248 [label="534_ uint256 feeAmount\n3248-new_variable-535-535", type_label=new_variable];
3260 [label="535_ uint256 balance = withdrawValue.sub(feeAmount);\n3260-new_variable-536-536", type_label=new_variable];
3261 [label="535_ uint256 balance\n3261-new_variable-536-536", type_label=new_variable];
3271 [label="536_ if\n3271-if-537-545", type_label=if];
3279 [label="537_ if_feeAmount > 0\n3279-if-538-540", type_label=if];
3284 [label="538_ address(uint160(owner())).transfer(feeAmount);\n3284-expression_statement-539-539", type_label=expression_statement];
3305 [label="542_ mint(participant, tokens);\n3305-expression_statement-543-543", type_label=expression_statement];
3318 [label="546_ min\n3318-function_definition-547-549", type_label=function_definition];
3335 [label="547_ return a < b ? a : b;\n3335-return-548-548", type_label=return];
3342 [label="549_ modifier onlyWhitelisted() {\n        require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), \"Must be whitelisted\");\n        _;\n    }\n3342-expression_statement-550-553", type_label=expression_statement];
3345 [label="550_ require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), \"Must be whitelisted\");\n3345-expression_statement-551-551", type_label=expression_statement];
3363 [label="551_ _;\n3363-expression_statement-552-552", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
3296;
136 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
169 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
177 -> 186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
186 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
188 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
199 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
217 -> 241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
234 -> 239  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
234 -> 241  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
239 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
241 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
258 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
260 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
284 -> 292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
292 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
294 -> 311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
311 -> 318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
326 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
328 -> 345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
360 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
362 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
405 -> 412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
412 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
426 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
437 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
454 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
477 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
504 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
507 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
552 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
555 -> 575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
575 -> 596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
624 -> 640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
686 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
689 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
751 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
754 -> 770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
770 -> 779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
779 -> 792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
813 -> 825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
825 -> 834  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
834 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
866 -> 878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
878 -> 887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
887 -> 896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
931 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1002 -> 1014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1059 -> 1068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1073 -> 1079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1081 -> 1090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1090 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1096 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1116 -> 1126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1131 -> 1139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1173 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 1195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1195 -> 1206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1215 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 1237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 1247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 1274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1274 -> 1283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1334 -> 1344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1346 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1359 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1366 -> 1376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1381 -> 1385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1392 -> 1400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1411 -> 1419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1464 -> 1473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1473 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1475 -> 1486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1478 -> 1484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1489 -> 1494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1496 -> 1504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1499 -> 1501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1515 -> 1523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1518 -> 1520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1579 -> 1589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1591 -> 1604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1604 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1611 -> 1621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1626 -> 1630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1637 -> 1645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1656 -> 1664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1720 -> 1730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1732 -> 1745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1745 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1752 -> 1762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1767 -> 1771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1778 -> 1786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1797 -> 1805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1845 -> 1852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1855 -> 1865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1867 -> 1880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1880 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1887 -> 1897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1902 -> 1912  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1917 -> 1921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1928 -> 1936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1947 -> 1955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1993 -> 2000  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1993 -> 2005  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2000 -> 2005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2005 -> 2015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2015 -> 2027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2054 -> 2061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2061 -> 2067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2067 -> 2074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2074 -> 2080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2080 -> 2087  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2087 -> 2093  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2093 -> 2099  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2099 -> 2106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2106 -> 2112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2112 -> 2118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2118 -> 2124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2124 -> 2129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2248 -> 2258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2258 -> 2260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2263 -> 2272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2272 -> 2282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2282 -> 2294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2309 -> 2314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2321 -> 2331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2331 -> 2341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2345 -> 2355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2355 -> 2365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2369 -> 2379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2379 -> 2389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2393 -> 2403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2403 -> 2413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2417 -> 2427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2427 -> 2437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2441 -> 2451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2451 -> 2461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2465 -> 2475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2475 -> 2485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2485 -> 2491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2491 -> 2494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2507 -> 2517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2517 -> 2527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2533 -> 2545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2540 -> 2542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2545 -> 2553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2553 -> 2566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2566 -> 2576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2576 -> 2581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2581 -> 2589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2589 -> 2594  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2589 -> 2601  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2594 -> 2601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2618 -> 2629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2629 -> 2643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2643 -> 2656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2681 -> 2695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2702 -> 2707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2725 -> 2735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2735 -> 2749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2762 -> 2772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2772 -> 2784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2789 -> 2799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2799 -> 2811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2816 -> 2825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2825 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2829 -> 2838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2838 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2842 -> 2862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2853 -> 2855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2862 -> 2869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2869 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2872 -> 2884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2879 -> 2881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2884 -> 2893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2893 -> 2905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2905 -> 2913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2913 -> 2918  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2913 -> 2925  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2918 -> 2925  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2946 -> 2950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2950 -> 2963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2963 -> 2971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2971 -> 2984  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2984 -> 2998  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2984 -> 3005  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2995 -> 2984  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2998 -> 2995  [color=red, controlflow_type=loop_control, edge_type=CFG_edge, key=0, label=loop_control];
3005 -> 3013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3013 -> 3021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3021 -> 3029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3029 -> 3042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3042 -> 3053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3053 -> 3070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3070 -> 3076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3076 -> 3081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3081 -> 3086  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3081 -> 3098  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3086 -> 3098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3113 -> 3117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3117 -> 3130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3130 -> 3138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3138 -> 3151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3151 -> 3165  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3151 -> 3172  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3162 -> 3151  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3165 -> 3162  [color=red, controlflow_type=loop_control, edge_type=CFG_edge, key=0, label=loop_control];
3172 -> 3180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3180 -> 3188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3188 -> 3196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3196 -> 3213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3213 -> 3219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3219 -> 3224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3224 -> 3233  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3224 -> 3247  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3246 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3247 -> 3260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3260 -> 3271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3271 -> 3279  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3271 -> 3305  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3279 -> 3284  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3279 -> 3296  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3284 -> 3296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3318 -> 3335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3335 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3345 -> 3363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
