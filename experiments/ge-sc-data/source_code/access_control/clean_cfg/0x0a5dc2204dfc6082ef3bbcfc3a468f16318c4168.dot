digraph  {
13 [label="2_ mul\n13-function_definition-3-10", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", type_label=if];
35 [label="4_ return 0;\n35-return-5-5", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", type_label=new_variable];
38 [label="6_ uint256 c\n38-new_variable-7-7", type_label=new_variable];
45 [label="7_ assert(c / a == b);\n45-expression_statement-8-8", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", type_label=return];
56 [label="10_ div\n56-function_definition-11-14", type_label=function_definition];
73 [label="11_ uint256 c = a / b;\n73-new_variable-12-12", type_label=new_variable];
74 [label="11_ uint256 c\n74-new_variable-12-12", type_label=new_variable];
81 [label="12_ return c;\n81-return-13-13", type_label=return];
83 [label="14_ sub\n83-function_definition-15-18", type_label=function_definition];
100 [label="15_ assert(b <= a);\n100-expression_statement-16-16", type_label=expression_statement];
107 [label="16_ return a - b;\n107-return-17-17", type_label=return];
111 [label="18_ add\n111-function_definition-19-23", type_label=function_definition];
128 [label="19_ uint256 c = a + b;\n128-new_variable-20-20", type_label=new_variable];
129 [label="19_ uint256 c\n129-new_variable-20-20", type_label=new_variable];
136 [label="20_ assert(c >= a);\n136-expression_statement-21-21", type_label=expression_statement];
143 [label="21_ return c;\n143-return-22-22", type_label=return];
148 [label="25_ totalSupply\n148-function_definition-26-26", type_label=function_definition];
156 [label="26_ balanceOf\n156-function_definition-27-27", type_label=function_definition];
168 [label="27_ transfer\n168-function_definition-28-28", type_label=function_definition];
183 [label="28_ transferFrom\n183-function_definition-29-29", type_label=function_definition];
202 [label="29_ approve\n202-function_definition-30-30", type_label=function_definition];
217 [label="30_ allowance\n217-function_definition-31-31", type_label=function_definition];
264 [label="35_ address public owner;\n264-new_variable-36-36", type_label=new_variable];
271 [label="37_ owner = msg.sender;\n271-expression_statement-38-38", type_label=expression_statement];
277 [label="39_ modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n277-expression_statement-40-43", type_label=expression_statement];
280 [label="40_ require(msg.sender == owner);\n280-expression_statement-41-41", type_label=expression_statement];
289 [label="41_ _;\n289-expression_statement-42-42", type_label=expression_statement];
302 [label="46_ mapping(address => uint256) balances;\n302-new_variable-47-47", type_label=new_variable];
308 [label="47_ mapping (address => mapping (address => uint256)) allowed;\n308-new_variable-48-48", type_label=new_variable];
316 [label="48_ uint256 public totalToken;\n316-new_variable-49-49", type_label=new_variable];
321 [label="49_ transfer\n321-function_definition-50-56", type_label=function_definition];
337 [label="50_ require(balances[msg.sender] >= _value);\n337-expression_statement-51-51", type_label=expression_statement];
348 [label="51_ balances[msg.sender] = balances[msg.sender].sub(_value);\n348-expression_statement-52-52", type_label=expression_statement];
365 [label="52_ balances[_to] = balances[_to].add(_value);\n365-expression_statement-53-53", type_label=expression_statement];
388 [label="54_ return true;\n388-return-55-55", type_label=return];
391 [label="56_ transferFrom\n391-function_definition-57-65", type_label=function_definition];
411 [label="57_ require(balances[_from] >= _value);\n411-expression_statement-58-58", type_label=expression_statement];
420 [label="58_ require(allowed[_from][msg.sender] >= _value);\n420-expression_statement-59-59", type_label=expression_statement];
433 [label="59_ balances[_from] = balances[_from].sub(_value);\n433-expression_statement-60-60", type_label=expression_statement];
446 [label="60_ balances[_to] = balances[_to].add(_value);\n446-expression_statement-61-61", type_label=expression_statement];
459 [label="61_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n459-expression_statement-62-62", type_label=expression_statement];
488 [label="63_ return true;\n488-return-64-64", type_label=return];
491 [label="65_ totalSupply\n491-function_definition-66-68", type_label=function_definition];
500 [label="66_ return totalToken;\n500-return-67-67", type_label=return];
502 [label="68_ balanceOf\n502-function_definition-69-71", type_label=function_definition];
515 [label="69_ return balances[_owner];\n515-return-70-70", type_label=return];
519 [label="71_ approve\n519-function_definition-72-76", type_label=function_definition];
535 [label="72_ allowed[msg.sender][_spender] = _value;\n535-expression_statement-73-73", type_label=expression_statement];
555 [label="74_ return true;\n555-return-75-75", type_label=return];
558 [label="76_ allowance\n558-function_definition-77-79", type_label=function_definition];
575 [label="77_ return allowed[_owner][_spender];\n575-return-78-78", type_label=return];
590 [label="81_ string  public constant name     = \"PandaGold Token\";\n590-new_variable-82-82", type_label=new_variable];
597 [label="82_ string  public constant symbol   = \"PANDA\";\n597-new_variable-83-83", type_label=new_variable];
604 [label="83_ uint256 public constant decimals = 18;\n604-new_variable-84-84", type_label=new_variable];
610 [label="84_ uint256 public constant initialToken     = 2000000000 * (10 ** decimals);\n610-new_variable-85-85", type_label=new_variable];
621 [label="85_ uint256 public constant publicToken      = initialToken * 55 / 100;\n621-new_variable-86-86", type_label=new_variable];
631 [label="86_ uint256 public constant founderToken     = initialToken * 10 / 100;\n631-new_variable-87-87", type_label=new_variable];
641 [label="87_ uint256 public constant developmentToken = initialToken * 10 / 100;\n641-new_variable-88-88", type_label=new_variable];
651 [label="88_ uint256 public constant bountyToken      = initialToken *  5 / 100;\n651-new_variable-89-89", type_label=new_variable];
661 [label="89_ uint256 public constant privateSaleToken = initialToken * 10 / 100;\n661-new_variable-90-90", type_label=new_variable];
671 [label="90_ uint256 public constant preSaleToken     = initialToken * 10 / 100;\n671-new_variable-91-91", type_label=new_variable];
681 [label="91_ address public constant founderAddress     = 0x003d9d0ebfbDa7AEc39EEAEcc4D47Dd18eA3c495;\n681-new_variable-92-92", type_label=new_variable];
687 [label="92_ address public constant developmentAddress = 0x00aCede2bdf8aecCedb0B669DbA662edC93D6178;\n687-new_variable-93-93", type_label=new_variable];
693 [label="93_ address public constant bountyAddress      = 0x00D42B2864C6E383b1FD9E56540c43d3815D486e;\n693-new_variable-94-94", type_label=new_variable];
699 [label="94_ address public constant privateSaleAddress = 0x00507Bf4d07A693fB7C4F9d846d58951042260aa;\n699-new_variable-95-95", type_label=new_variable];
705 [label="95_ address public constant preSaleAddress     = 0x00241bD9aa09b440DE23835BB2EE0a45926Bb61A;\n705-new_variable-96-96", type_label=new_variable];
711 [label="96_ address public constant rescueAddress      = 0x005F25Bc2386BfE9E5612f2C437c5e5E45720874;\n711-new_variable-97-97", type_label=new_variable];
717 [label="97_ uint256 public constant founderLockEndTime     = 1577836800;\n717-new_variable-98-98", type_label=new_variable];
723 [label="98_ uint256 public constant developmentLockEndTime = 1559347200;\n723-new_variable-99-99", type_label=new_variable];
729 [label="99_ uint256 public constant bountyLockEndTime      = 1543363200;\n729-new_variable-100-100", type_label=new_variable];
735 [label="100_ uint256 public constant privateSaleLockEndTime = 1546300800;\n735-new_variable-101-101", type_label=new_variable];
741 [label="101_ uint256 public constant preSaleLockEndTime     = 1543363200;\n741-new_variable-102-102", type_label=new_variable];
747 [label="102_ uint256 public constant maxDestroyThreshold = initialToken / 2;\n747-new_variable-103-103", type_label=new_variable];
755 [label="103_ uint256 public constant maxBurnThreshold    = maxDestroyThreshold / 50;\n755-new_variable-104-104", type_label=new_variable];
763 [label="104_ mapping(address => bool) lockAddresses;\n763-new_variable-105-105", type_label=new_variable];
769 [label="105_ uint256 public destroyedToken;\n769-new_variable-106-106", type_label=new_variable];
786 [label="108_ totalToken     = initialToken;\n786-expression_statement-109-109", type_label=expression_statement];
790 [label="109_ balances[msg.sender]         = publicToken;\n790-expression_statement-110-110", type_label=expression_statement];
798 [label="110_ balances[founderAddress]     = founderToken;\n798-expression_statement-111-111", type_label=expression_statement];
804 [label="111_ balances[developmentAddress] = developmentToken;\n804-expression_statement-112-112", type_label=expression_statement];
810 [label="112_ balances[bountyAddress]      = bountyToken;\n810-expression_statement-113-113", type_label=expression_statement];
816 [label="113_ balances[privateSaleAddress] = privateSaleToken;\n816-expression_statement-114-114", type_label=expression_statement];
822 [label="114_ balances[preSaleAddress]     = preSaleToken;\n822-expression_statement-115-115", type_label=expression_statement];
878 [label="121_ lockAddresses[founderAddress]     = true;\n878-expression_statement-122-122", type_label=expression_statement];
885 [label="122_ lockAddresses[developmentAddress] = true;\n885-expression_statement-123-123", type_label=expression_statement];
892 [label="123_ lockAddresses[bountyAddress]      = true;\n892-expression_statement-124-124", type_label=expression_statement];
899 [label="124_ lockAddresses[privateSaleAddress] = true;\n899-expression_statement-125-125", type_label=expression_statement];
906 [label="125_ lockAddresses[preSaleAddress]     = true;\n906-expression_statement-126-126", type_label=expression_statement];
913 [label="126_ destroyedToken = 0;\n913-expression_statement-127-127", type_label=expression_statement];
917 [label="128_ modifier transferable(address _addr) {\n    require(!lockAddresses[_addr]);\n    _;\n  }\n917-expression_statement-129-132", type_label=expression_statement];
924 [label="129_ require(!lockAddresses[_addr]);\n924-expression_statement-130-130", type_label=expression_statement];
932 [label="130_ _;\n932-expression_statement-131-131", type_label=expression_statement];
934 [label="132_ unlock\n934-function_definition-133-144", type_label=function_definition];
937 [label="132_ onlyOwner\n937-expression_statement-133-133", type_label=expression_statement];
940 [label="133_ if_lockAddresses[founderAddress] && now >= founderLockEndTime\n940-if-134-135", type_label=if];
948 [label="134_ lockAddresses[founderAddress] = false;\n948-expression_statement-135-135", type_label=expression_statement];
955 [label="135_ if_lockAddresses[developmentAddress] && now >= developmentLockEndTime\n955-if-136-137", type_label=if];
963 [label="136_ lockAddresses[developmentAddress] = false;\n963-expression_statement-137-137", type_label=expression_statement];
970 [label="137_ if_lockAddresses[bountyAddress] && now >= bountyLockEndTime\n970-if-138-139", type_label=if];
978 [label="138_ lockAddresses[bountyAddress] = false;\n978-expression_statement-139-139", type_label=expression_statement];
985 [label="139_ if_lockAddresses[privateSaleAddress] && now >= privateSaleLockEndTime\n985-if-140-141", type_label=if];
993 [label="140_ lockAddresses[privateSaleAddress] = false;\n993-expression_statement-141-141", type_label=expression_statement];
1000 [label="141_ if_lockAddresses[preSaleAddress] && now >= preSaleLockEndTime\n1000-if-142-143", type_label=if];
1008 [label="142_ lockAddresses[preSaleAddress] = false;\n1008-expression_statement-143-143", type_label=expression_statement];
1015 [label="144_ transfer\n1015-function_definition-145-147", type_label=function_definition];
1026 [label="144_ transferable(msg.sender)\n1026-expression_statement-145-145", type_label=expression_statement];
1037 [label="145_ return super.transfer(_to, _value);\n1037-return-146-146", type_label=return];
1046 [label="147_ approve\n1046-function_definition-148-150", type_label=function_definition];
1057 [label="147_ transferable(msg.sender)\n1057-expression_statement-148-148", type_label=expression_statement];
1068 [label="148_ return super.approve(_spender, _value);\n1068-return-149-149", type_label=return];
1077 [label="150_ transferFrom\n1077-function_definition-151-153", type_label=function_definition];
1092 [label="150_ transferable(_from)\n1092-expression_statement-151-151", type_label=expression_statement];
1101 [label="151_ return super.transferFrom(_from, _to, _value);\n1101-return-152-152", type_label=return];
1112 [label="153_ burn\n1112-function_definition-154-164", type_label=function_definition];
1119 [label="153_ onlyOwner\n1119-expression_statement-154-154", type_label=expression_statement];
1126 [label="154_ require(balances[msg.sender] >= _value);\n1126-expression_statement-155-155", type_label=expression_statement];
1137 [label="155_ require(maxBurnThreshold >= _value);\n1137-expression_statement-156-156", type_label=expression_statement];
1144 [label="156_ require(maxDestroyThreshold >= destroyedToken.add(_value));\n1144-expression_statement-157-157", type_label=expression_statement];
1156 [label="157_ balances[msg.sender] = balances[msg.sender].sub(_value);\n1156-expression_statement-158-158", type_label=expression_statement];
1173 [label="158_ totalToken = totalToken.sub(_value);\n1173-expression_statement-159-159", type_label=expression_statement];
1182 [label="159_ destroyedToken = destroyedToken.add(_value);\n1182-expression_statement-160-160", type_label=expression_statement];
1209 [label="162_ return true;\n1209-return-163-163", type_label=return];
1212 [label="164_ transferAnyERC20Token\n1212-function_definition-165-167", type_label=function_definition];
1223 [label="164_ onlyOwner\n1223-expression_statement-165-165", type_label=expression_statement];
1230 [label="165_ return ERC20(_tokenAddress).transfer(rescueAddress, _value);\n1230-return-166-166", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
13 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 37  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
83 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
136 -> 143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
143 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
280 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
302 -> 308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
308 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
337 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
348 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
388 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
391 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
488 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
491 -> 500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
500 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
502 -> 515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
519 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
555 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
558 -> 575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
575 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
590 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
610 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
631 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
641 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
651 -> 661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
661 -> 671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
671 -> 681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
681 -> 687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
687 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
699 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
711 -> 717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
717 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
723 -> 729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
735 -> 741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
741 -> 747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
747 -> 755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
755 -> 763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
790 -> 798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
798 -> 804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
804 -> 810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
810 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
878 -> 885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
892 -> 899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
899 -> 906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
906 -> 913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
924 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 948  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
940 -> 955  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
948 -> 955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
955 -> 963  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
955 -> 970  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
963 -> 970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
970 -> 978  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
970 -> 985  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
978 -> 985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 993  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
985 -> 1000  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
993 -> 1000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 1008  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1000 -> 1015  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1008 -> 1015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1015 -> 1037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1037 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1046 -> 1068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1077 -> 1101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1101 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1112 -> 1126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1126 -> 1137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1137 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1156 -> 1173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1173 -> 1182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1209 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1212 -> 1230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1230 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
