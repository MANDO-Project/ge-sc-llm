digraph  {
13 [label="2_ mul\n13-function_definition-3-10", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", type_label=if];
1981 [label="3_ end_if", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", type_label=new_variable];
38 [label="6_ uint256 c\n38-new_variable-7-7", type_label=new_variable];
45 [label="7_ require(c / a == b);\n45-expression_statement-8-8", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", type_label=return];
56 [label="10_ div\n56-function_definition-11-15", type_label=function_definition];
73 [label="11_ require(b > 0);\n73-expression_statement-12-12", type_label=expression_statement];
80 [label="12_ uint256 c = a / b;\n80-new_variable-13-13", type_label=new_variable];
81 [label="12_ uint256 c\n81-new_variable-13-13", type_label=new_variable];
88 [label="13_ return c;\n88-return-14-14", type_label=return];
90 [label="15_ sub\n90-function_definition-16-20", type_label=function_definition];
107 [label="16_ require(b <= a);\n107-expression_statement-17-17", type_label=expression_statement];
114 [label="17_ uint256 c = a - b;\n114-new_variable-18-18", type_label=new_variable];
115 [label="17_ uint256 c\n115-new_variable-18-18", type_label=new_variable];
122 [label="18_ return c;\n122-return-19-19", type_label=return];
124 [label="20_ add\n124-function_definition-21-25", type_label=function_definition];
141 [label="21_ uint256 c = a + b;\n141-new_variable-22-22", type_label=new_variable];
142 [label="21_ uint256 c\n142-new_variable-22-22", type_label=new_variable];
149 [label="22_ require(c >= a && c >= b);\n149-expression_statement-23-23", type_label=expression_statement];
160 [label="23_ return c;\n160-return-24-24", type_label=return];
162 [label="25_ mod\n162-function_definition-26-29", type_label=function_definition];
179 [label="26_ require(b != 0);\n179-expression_statement-27-27", type_label=expression_statement];
186 [label="27_ return a % b;\n186-return-28-28", type_label=return];
190 [label="29_ max256\n190-function_definition-30-32", type_label=function_definition];
207 [label="30_ return a >= b ? a : b;\n207-return-31-31", type_label=return];
214 [label="32_ min256\n214-function_definition-33-35", type_label=function_definition];
231 [label="33_ return a < b ? a : b;\n231-return-34-34", type_label=return];
241 [label="37_ withdrawAll_txorigin10\n241-function_definition-38-41", type_label=function_definition];
253 [label="38_ require(tx.origin == owner_txorigin10);\n253-expression_statement-39-39", type_label=expression_statement];
262 [label="39_ _recipient.transfer(address(this).balance);\n262-expression_statement-40-40", type_label=expression_statement];
273 [label="41_ address public owner;\n273-new_variable-42-42", type_label=new_variable];
280 [label="43_ owner = msg.sender;\n280-expression_statement-44-44", type_label=expression_statement];
286 [label="45_ bug_txorigin20\n286-function_definition-46-48", type_label=function_definition];
294 [label="46_ require(tx.origin == owner_txorigin20);\n294-expression_statement-47-47", type_label=expression_statement];
303 [label="48_ modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n303-expression_statement-49-52", type_label=expression_statement];
306 [label="49_ require(msg.sender == owner);\n306-expression_statement-50-50", type_label=expression_statement];
315 [label="50_ _;\n315-expression_statement-51-51", type_label=expression_statement];
317 [label="52_ transferOwnership\n317-function_definition-53-55", type_label=function_definition];
323 [label="52_ onlyOwner\n323-expression_statement-53-53", type_label=expression_statement];
327 [label="53_ owner = newOwner;\n327-expression_statement-54-54", type_label=expression_statement];
331 [label="55_ bug_txorigin32\n331-function_definition-56-58", type_label=function_definition];
339 [label="56_ require(tx.origin == owner_txorigin32);\n339-expression_statement-57-57", type_label=expression_statement];
351 [label="60_ receiveApproval\n351-function_definition-61-61", type_label=function_definition];
378 [label="64_ withdrawAll_txorigin22\n378-function_definition-65-68", type_label=function_definition];
390 [label="65_ require(tx.origin == owner_txorigin22);\n390-expression_statement-66-66", type_label=expression_statement];
399 [label="66_ _recipient.transfer(address(this).balance);\n399-expression_statement-67-67", type_label=expression_statement];
410 [label="68_ string public name;\n410-new_variable-69-69", type_label=new_variable];
415 [label="69_ bug_txorigin12\n415-function_definition-70-72", type_label=function_definition];
423 [label="70_ require(tx.origin == owner_txorigin12);\n423-expression_statement-71-71", type_label=expression_statement];
432 [label="72_ string public symbol;\n432-new_variable-73-73", type_label=new_variable];
437 [label="73_ transferTo_txorigin11\n437-function_definition-74-77", type_label=function_definition];
453 [label="74_ require(tx.origin == owner_txorigin11);\n453-expression_statement-75-75", type_label=expression_statement];
462 [label="75_ to.call.value(amount);\n462-expression_statement-76-76", type_label=expression_statement];
471 [label="77_ uint8 public decimals;\n471-new_variable-78-78", type_label=new_variable];
476 [label="78_ sendto_txorigin1\n476-function_definition-79-82", type_label=function_definition];
492 [label="79_ require (tx.origin == owner_txorigin1);\n492-expression_statement-80-80", type_label=expression_statement];
501 [label="80_ receiver.transfer(amount);\n501-expression_statement-81-81", type_label=expression_statement];
508 [label="82_ uint256 public totalSupply;\n508-new_variable-83-83", type_label=new_variable];
513 [label="83_ withdrawAll_txorigin2\n513-function_definition-84-87", type_label=function_definition];
525 [label="84_ require(tx.origin == owner_txorigin2);\n525-expression_statement-85-85", type_label=expression_statement];
534 [label="85_ _recipient.transfer(address(this).balance);\n534-expression_statement-86-86", type_label=expression_statement];
545 [label="87_ mapping (address => uint256) public balanceOf;\n545-new_variable-88-88", type_label=new_variable];
552 [label="88_ sendto_txorigin17\n552-function_definition-89-92", type_label=function_definition];
568 [label="89_ require (tx.origin == owner_txorigin17);\n568-expression_statement-90-90", type_label=expression_statement];
577 [label="90_ receiver.transfer(amount);\n577-expression_statement-91-91", type_label=expression_statement];
584 [label="92_ mapping (address => mapping (address => uint256)) public allowance;\n584-new_variable-93-93", type_label=new_variable];
593 [label="93_ transferTo_txorigin27\n593-function_definition-94-97", type_label=function_definition];
609 [label="94_ require(tx.origin == owner_txorigin27);\n609-expression_statement-95-95", type_label=expression_statement];
618 [label="95_ to.call.value(amount);\n618-expression_statement-96-96", type_label=expression_statement];
641 [label="98_ transferTo_txorigin31\n641-function_definition-99-102", type_label=function_definition];
657 [label="99_ require(tx.origin == owner_txorigin31);\n657-expression_statement-100-100", type_label=expression_statement];
666 [label="100_ to.call.value(amount);\n666-expression_statement-101-101", type_label=expression_statement];
689 [label="103_ sendto_txorigin13\n689-function_definition-104-107", type_label=function_definition];
705 [label="104_ require (tx.origin == owner_txorigin13);\n705-expression_statement-105-105", type_label=expression_statement];
714 [label="105_ receiver.transfer(amount);\n714-expression_statement-106-106", type_label=expression_statement];
745 [label="109_ decimals = dec;\n745-expression_statement-110-110", type_label=expression_statement];
749 [label="110_ name = tokenName;\n749-expression_statement-111-111", type_label=expression_statement];
753 [label="111_ symbol = tokenSymbol;\n753-expression_statement-112-112", type_label=expression_statement];
757 [label="113_ withdrawAll_txorigin38\n757-function_definition-114-117", type_label=function_definition];
769 [label="114_ require(tx.origin == owner_txorigin38);\n769-expression_statement-115-115", type_label=expression_statement];
778 [label="115_ _recipient.transfer(address(this).balance);\n778-expression_statement-116-116", type_label=expression_statement];
789 [label="117_ _transfer\n789-function_definition-118-123", type_label=function_definition];
805 [label="118_ require(_to != address(0x0));\n805-expression_statement-119-119", type_label=expression_statement];
814 [label="119_ balanceOf[_from] = balanceOf[_from].sub(_value);\n814-expression_statement-120-120", type_label=expression_statement];
827 [label="120_ balanceOf[_to] = balanceOf[_to].add(_value);\n827-expression_statement-121-121", type_label=expression_statement];
848 [label="123_ bug_txorigin4\n848-function_definition-124-126", type_label=function_definition];
856 [label="124_ require(tx.origin == owner_txorigin4);\n856-expression_statement-125-125", type_label=expression_statement];
865 [label="126_ transfer\n865-function_definition-127-130", type_label=function_definition];
882 [label="127_ _transfer(msg.sender, _to, _value);\n882-expression_statement-128-128", type_label=expression_statement];
893 [label="128_ return true;\n893-return-129-129", type_label=return];
896 [label="130_ transferTo_txorigin7\n896-function_definition-131-134", type_label=function_definition];
912 [label="131_ require(tx.origin == owner_txorigin7);\n912-expression_statement-132-132", type_label=expression_statement];
921 [label="132_ to.call.value(amount);\n921-expression_statement-133-133", type_label=expression_statement];
930 [label="134_ transferFrom\n930-function_definition-135-139", type_label=function_definition];
951 [label="135_ allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n951-expression_statement-136-136", type_label=expression_statement];
972 [label="136_ _transfer(_from, _to, _value);\n972-expression_statement-137-137", type_label=expression_statement];
981 [label="137_ return true;\n981-return-138-138", type_label=return];
984 [label="139_ transferTo_txorigin23\n984-function_definition-140-143", type_label=function_definition];
1000 [label="140_ require(tx.origin == owner_txorigin23);\n1000-expression_statement-141-141", type_label=expression_statement];
1009 [label="141_ to.call.value(amount);\n1009-expression_statement-142-142", type_label=expression_statement];
1018 [label="143_ approve\n1018-function_definition-144-148", type_label=function_definition];
1035 [label="144_ allowance[msg.sender][_spender] = _value;\n1035-expression_statement-145-145", type_label=expression_statement];
1055 [label="146_ return true;\n1055-return-147-147", type_label=return];
1058 [label="148_ withdrawAll_txorigin14\n1058-function_definition-149-152", type_label=function_definition];
1070 [label="149_ require(tx.origin == owner_txorigin14);\n1070-expression_statement-150-150", type_label=expression_statement];
1079 [label="150_ _recipient.transfer(address(this).balance);\n1079-expression_statement-151-151", type_label=expression_statement];
1090 [label="152_ approveAndCall\n1090-function_definition-153-159", type_label=function_definition];
1111 [label="153_ tokenRecipient spender = tokenRecipient(_spender);\n1111-new_variable-154-154", type_label=new_variable];
1112 [label="153_ tokenRecipient spender\n1112-new_variable-154-154", type_label=new_variable];
1121 [label="154_ if\n1121-if-155-158", type_label=if];
3072 [label="154_ end_if", type_label=end_if];
1129 [label="155_ spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n1129-expression_statement-156-156", type_label=expression_statement];
1146 [label="156_ return true;\n1146-return-157-157", type_label=return];
1149 [label="159_ withdrawAll_txorigin30\n1149-function_definition-160-163", type_label=function_definition];
1161 [label="160_ require(tx.origin == owner_txorigin30);\n1161-expression_statement-161-161", type_label=expression_statement];
1170 [label="161_ _recipient.transfer(address(this).balance);\n1170-expression_statement-162-162", type_label=expression_statement];
1190 [label="165_ sendto_txorigin37\n1190-function_definition-166-169", type_label=function_definition];
1206 [label="166_ require (tx.origin == owner_txorigin37);\n1206-expression_statement-167-167", type_label=expression_statement];
1215 [label="167_ receiver.transfer(amount);\n1215-expression_statement-168-168", type_label=expression_statement];
1222 [label="169_ string _tokenName = \"AZ FundChain\";\n1222-new_variable-170-170", type_label=new_variable];
1228 [label="169_ transferTo_txorigin3\n1228-function_definition-170-173", type_label=function_definition];
1244 [label="170_ require(tx.origin == owner_txorigin3);\n1244-expression_statement-171-171", type_label=expression_statement];
1253 [label="171_ to.call.value(amount);\n1253-expression_statement-172-172", type_label=expression_statement];
1262 [label="173_ string _tokenSymbol = \"AZT\";\n1262-new_variable-174-174", type_label=new_variable];
1268 [label="174_ sendto_txorigin9\n1268-function_definition-175-178", type_label=function_definition];
1284 [label="175_ require (tx.origin == owner_txorigin9);\n1284-expression_statement-176-176", type_label=expression_statement];
1293 [label="176_ receiver.transfer(amount);\n1293-expression_statement-177-177", type_label=expression_statement];
1300 [label="178_ uint8 _decimals = 18;\n1300-new_variable-179-179", type_label=new_variable];
1305 [label="179_ sendto_txorigin25\n1305-function_definition-180-183", type_label=function_definition];
1321 [label="180_ require (tx.origin == owner_txorigin25);\n1321-expression_statement-181-181", type_label=expression_statement];
1330 [label="181_ receiver.transfer(amount);\n1330-expression_statement-182-182", type_label=expression_statement];
1337 [label="183_ address[] public frozenAddresses;\n1337-new_variable-184-184", type_label=new_variable];
1343 [label="184_ transferTo_txorigin19\n1343-function_definition-185-188", type_label=function_definition];
1359 [label="185_ require(tx.origin == owner_txorigin19);\n1359-expression_statement-186-186", type_label=expression_statement];
1368 [label="186_ to.call.value(amount);\n1368-expression_statement-187-187", type_label=expression_statement];
1377 [label="188_ bool public tokenFrozen;\n1377-new_variable-189-189", type_label=new_variable];
1382 [label="189_ struct frozenWallet {\n    bool isFrozen;  \n    uint256 rewardedAmount;  \n    uint256 frozenAmount;  \n    uint256 frozenTime;  \n  }\n1382-expression_statement-190-195", type_label=expression_statement];
1400 [label="195_ withdrawAll_txorigin26\n1400-function_definition-196-199", type_label=function_definition];
1412 [label="196_ require(tx.origin == owner_txorigin26);\n1412-expression_statement-197-197", type_label=expression_statement];
1421 [label="197_ _recipient.transfer(address(this).balance);\n1421-expression_statement-198-198", type_label=expression_statement];
1432 [label="199_ mapping (address => frozenWallet) public frozenWallets;\n1432-new_variable-200-200", type_label=new_variable];
1441 [label="200_ TokenERC20(_tokenName, _tokenSymbol, _decimals)\n1441-expression_statement-201-201", type_label=expression_statement];
1450 [label="201_ frozenAddresses.push(address(0x9fd50776F133751E8Ae6abE1Be124638Bb917E05));\n1450-expression_statement-202-202", type_label=expression_statement];
1459 [label="202_ frozenWallets[frozenAddresses[0]] = frozenWallet({\n      isFrozen: true,\n      rewardedAmount: 30000000 * 10 ** uint256(decimals),\n      frozenAmount: 0 * 10 ** uint256(decimals),\n      frozenTime: now + 1 * 1 hours  \n    });\n1459-expression_statement-203-208", type_label=expression_statement];
1499 [label="208_ for(i < frozenAddresses.length;;i++)\n1499-for-209-212", type_label=for];
3450 [label="208_ end_for", type_label=end_for];
1501 [label="208_ uint256 i\n1501-new_variable-209-209", type_label=new_variable];
1512 [label="208_ i++\n1512-expression_statement-209-209", type_label=expression_statement];
1515 [label="209_ balanceOf[frozenAddresses[i]] = frozenWallets[frozenAddresses[i]].rewardedAmount;\n1515-expression_statement-210-210", type_label=expression_statement];
1529 [label="210_ totalSupply = totalSupply.add(frozenWallets[frozenAddresses[i]].rewardedAmount);\n1529-expression_statement-211-211", type_label=expression_statement];
1544 [label="213_ bug_txorigin8\n1544-function_definition-214-216", type_label=function_definition];
1552 [label="214_ require(tx.origin == owner_txorigin8);\n1552-expression_statement-215-215", type_label=expression_statement];
1561 [label="216_ _transfer\n1561-function_definition-217-223", type_label=function_definition];
1577 [label="217_ require(_to != address(0x0));\n1577-expression_statement-218-218", type_label=expression_statement];
1586 [label="218_ require(checkFrozenWallet(_from, _value));\n1586-expression_statement-219-219", type_label=expression_statement];
1596 [label="219_ balanceOf[_from] = balanceOf[_from].sub(_value);\n1596-expression_statement-220-220", type_label=expression_statement];
1609 [label="220_ balanceOf[_to] = balanceOf[_to].add(_value);\n1609-expression_statement-221-221", type_label=expression_statement];
1630 [label="223_ transferTo_txorigin39\n1630-function_definition-224-227", type_label=function_definition];
1646 [label="224_ require(tx.origin == owner_txorigin39);\n1646-expression_statement-225-225", type_label=expression_statement];
1655 [label="225_ to.call.value(amount);\n1655-expression_statement-226-226", type_label=expression_statement];
1664 [label="227_ checkFrozenWallet\n1664-function_definition-228-236", type_label=function_definition];
1681 [label="228_ return(\n      _from==owner || \n      (!tokenFrozen && \n      (!frozenWallets[_from].isFrozen || \n       now>=frozenWallets[_from].frozenTime || \n       balanceOf[_from].sub(_value)>=frozenWallets[_from].frozenAmount))\n    );\n1681-return-229-235", type_label=return];
1721 [label="236_ bug_txorigin36\n1721-function_definition-237-239", type_label=function_definition];
1729 [label="237_ require(tx.origin == owner_txorigin36);\n1729-expression_statement-238-238", type_label=expression_statement];
1738 [label="239_ burn\n1738-function_definition-240-245", type_label=function_definition];
1744 [label="239_ onlyOwner\n1744-expression_statement-240-240", type_label=expression_statement];
1753 [label="240_ balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n1753-expression_statement-241-241", type_label=expression_statement];
1770 [label="241_ totalSupply = totalSupply.sub(_value);\n1770-expression_statement-242-242", type_label=expression_statement];
1787 [label="243_ return true;\n1787-return-244-244", type_label=return];
1790 [label="245_ transferTo_txorigin35\n1790-function_definition-246-249", type_label=function_definition];
1806 [label="246_ require(tx.origin == owner_txorigin35);\n1806-expression_statement-247-247", type_label=expression_statement];
1815 [label="247_ to.call.value(amount);\n1815-expression_statement-248-248", type_label=expression_statement];
1824 [label="249_ burnFrom\n1824-function_definition-250-256", type_label=function_definition];
1841 [label="250_ balanceOf[_from] = balanceOf[_from].sub(_value);\n1841-expression_statement-251-251", type_label=expression_statement];
1854 [label="251_ allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n1854-expression_statement-252-252", type_label=expression_statement];
1875 [label="252_ totalSupply = totalSupply.sub(_value);\n1875-expression_statement-253-253", type_label=expression_statement];
1890 [label="254_ return true;\n1890-return-255-255", type_label=return];
1893 [label="256_ bug_txorigin40\n1893-function_definition-257-259", type_label=function_definition];
1901 [label="257_ require(tx.origin == owner_txorigin40);\n1901-expression_statement-258-258", type_label=expression_statement];
1910 [label="259_ freezeToken\n1910-function_definition-260-262", type_label=function_definition];
1916 [label="259_ onlyOwner\n1916-expression_statement-260-260", type_label=expression_statement];
1920 [label="260_ tokenFrozen = freeze;\n1920-expression_statement-261-261", type_label=expression_statement];
1924 [label="262_ sendto_txorigin33\n1924-function_definition-263-266", type_label=function_definition];
1940 [label="263_ require (tx.origin == owner_txorigin33);\n1940-expression_statement-264-264", type_label=expression_statement];
1949 [label="264_ receiver.transfer(amount);\n1949-expression_statement-265-265", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
"(1981, (3, 4), (5, 5))";
"(3072, (154, 4), (157, 5))";
"(3450, (208, 4), (211, 5))";
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> "(1981, (3, 4), (5, 5))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
35 -> "(1981, (3, 4), (5, 5))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
90 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
124 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
162 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
186 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
190 -> 207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
214 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
241 -> 253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
253 -> 262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
306 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
317 -> 327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
390 -> 399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
492 -> 501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
552 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
609 -> 618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
641 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
689 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
745 -> 749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
749 -> 753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
769 -> 778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
789 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
805 -> 814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
814 -> 827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
848 -> 856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
865 -> 882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
882 -> 893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
893 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
896 -> 912  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
912 -> 921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
930 -> 951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
951 -> 972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
972 -> 981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
981 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
984 -> 1000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1018 -> 1035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1055 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1058 -> 1070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1070 -> 1079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1090 -> 1111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1111 -> 1121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1121 -> 1129  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1121 -> "(3072, (154, 4), (157, 5))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1129 -> 1146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1146 -> "(3072, (154, 4), (157, 5))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1146 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1149 -> 1161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1161 -> 1170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1190 -> 1206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1206 -> 1215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 1244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1244 -> 1253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1268 -> 1284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1284 -> 1293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1305 -> 1321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1321 -> 1330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1343 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1359 -> 1368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1377 -> 1382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1400 -> 1412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1412 -> 1421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1450 -> 1459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1459 -> 1499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1499 -> 1515  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1499 -> "(3450, (208, 4), (211, 5))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1512 -> 1499  [color=red, controlflow_type=loop_control, edge_type=CFG_edge, key=0, label=loop_control];
1515 -> 1529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1529 -> 1512  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1544 -> 1552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1561 -> 1577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1577 -> 1586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1586 -> 1596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1596 -> 1609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1630 -> 1646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1646 -> 1655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1664 -> 1681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1681 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1721 -> 1729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1738 -> 1753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1753 -> 1770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1787 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1790 -> 1806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1806 -> 1815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1824 -> 1841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1841 -> 1854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1854 -> 1875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1890 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1893 -> 1901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1910 -> 1920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1924 -> 1940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1940 -> 1949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(1981, (3, 4), (5, 5))" -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(1981, (3, 4), (5, 5))" -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
"(3072, (154, 4), (157, 5))" -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(3072, (154, 4), (157, 5))" -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
"(3450, (208, 4), (211, 5))" -> 1544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
