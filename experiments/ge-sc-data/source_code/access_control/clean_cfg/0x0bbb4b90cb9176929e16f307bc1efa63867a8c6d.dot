digraph  {
12 [label="2_ mul\n12-function_definition-3-10", type_label=function_definition];
29 [label="3_ if_a == 0\n29-if-4-6", type_label=if];
34 [label="4_ return 0;\n34-return-5-5", type_label=return];
36 [label="6_ uint256 c = a * b;\n36-new_variable-7-7", type_label=new_variable];
37 [label="6_ uint256 c\n37-new_variable-7-7", type_label=new_variable];
44 [label="7_ assert(c / a == b);\n44-expression_statement-8-8", type_label=expression_statement];
53 [label="8_ return c;\n53-return-9-9", type_label=return];
55 [label="10_ div\n55-function_definition-11-14", type_label=function_definition];
72 [label="11_ uint256 c = a / b;\n72-new_variable-12-12", type_label=new_variable];
73 [label="11_ uint256 c\n73-new_variable-12-12", type_label=new_variable];
80 [label="12_ return c;\n80-return-13-13", type_label=return];
82 [label="14_ sub\n82-function_definition-15-18", type_label=function_definition];
99 [label="15_ assert(b <= a);\n99-expression_statement-16-16", type_label=expression_statement];
106 [label="16_ return a - b;\n106-return-17-17", type_label=return];
110 [label="18_ add\n110-function_definition-19-23", type_label=function_definition];
127 [label="19_ uint256 c = a + b;\n127-new_variable-20-20", type_label=new_variable];
128 [label="19_ uint256 c\n128-new_variable-20-20", type_label=new_variable];
135 [label="20_ assert(c >= a);\n135-expression_statement-21-21", type_label=expression_statement];
142 [label="21_ return c;\n142-return-22-22", type_label=return];
147 [label="25_ totalSupply\n147-function_definition-26-26", type_label=function_definition];
155 [label="26_ balanceOf\n155-function_definition-27-27", type_label=function_definition];
167 [label="27_ transfer\n167-function_definition-28-28", type_label=function_definition];
207 [label="32_ mapping(address => uint256) balances;\n207-new_variable-33-33", type_label=new_variable];
213 [label="33_ uint256 totalSupply_;\n213-new_variable-34-34", type_label=new_variable];
217 [label="34_ totalSupply\n217-function_definition-35-37", type_label=function_definition];
226 [label="35_ return totalSupply_;\n226-return-36-36", type_label=return];
228 [label="37_ transfer\n228-function_definition-38-45", type_label=function_definition];
244 [label="38_ require(_to != address(0));\n244-expression_statement-39-39", type_label=expression_statement];
253 [label="39_ require(_value <= balances[msg.sender]);\n253-expression_statement-40-40", type_label=expression_statement];
264 [label="40_ balances[msg.sender] = balances[msg.sender].sub(_value);\n264-expression_statement-41-41", type_label=expression_statement];
281 [label="41_ balances[_to] = balances[_to].add(_value);\n281-expression_statement-42-42", type_label=expression_statement];
304 [label="43_ return true;\n304-return-44-44", type_label=return];
307 [label="45_ balanceOf\n307-function_definition-46-48", type_label=function_definition];
321 [label="46_ return balances[_owner];\n321-return-47-47", type_label=return];
331 [label="50_ allowance\n331-function_definition-51-51", type_label=function_definition];
347 [label="51_ transferFrom\n347-function_definition-52-52", type_label=function_definition];
366 [label="52_ approve\n366-function_definition-53-53", type_label=function_definition];
404 [label="56_ mapping (address => mapping (address => uint256)) internal allowed;\n404-new_variable-57-57", type_label=new_variable];
413 [label="57_ transferFrom\n413-function_definition-58-67", type_label=function_definition];
433 [label="58_ require(_to != address(0));\n433-expression_statement-59-59", type_label=expression_statement];
442 [label="59_ require(_value <= balances[_from]);\n442-expression_statement-60-60", type_label=expression_statement];
451 [label="60_ require(_value <= allowed[_from][msg.sender]);\n451-expression_statement-61-61", type_label=expression_statement];
464 [label="61_ balances[_from] = balances[_from].sub(_value);\n464-expression_statement-62-62", type_label=expression_statement];
477 [label="62_ balances[_to] = balances[_to].add(_value);\n477-expression_statement-63-63", type_label=expression_statement];
490 [label="63_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n490-expression_statement-64-64", type_label=expression_statement];
519 [label="65_ return true;\n519-return-66-66", type_label=return];
522 [label="67_ approve\n522-function_definition-68-72", type_label=function_definition];
538 [label="68_ allowed[msg.sender][_spender] = _value;\n538-expression_statement-69-69", type_label=expression_statement];
558 [label="70_ return true;\n558-return-71-71", type_label=return];
561 [label="72_ allowance\n561-function_definition-73-75", type_label=function_definition];
572 [label="72_ constant\n572-expression_statement-73-73", type_label=expression_statement];
580 [label="73_ return allowed[_owner][_spender];\n580-return-74-74", type_label=return];
586 [label="75_ increaseApproval\n586-function_definition-76-80", type_label=function_definition];
603 [label="76_ allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n603-expression_statement-77-77", type_label=expression_statement];
640 [label="78_ return true;\n640-return-79-79", type_label=return];
643 [label="80_ decreaseApproval\n643-function_definition-81-90", type_label=function_definition];
660 [label="81_ uint oldValue = allowed[msg.sender][_spender];\n660-new_variable-82-82", type_label=new_variable];
661 [label="81_ uint oldValue\n661-new_variable-82-82", type_label=new_variable];
672 [label="82_ if__subtractedValue > oldValue\n672-if-83-87", type_label=if];
677 [label="83_ allowed[msg.sender][_spender] = 0;\n677-expression_statement-84-84", type_label=expression_statement];
688 [label="85_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n688-expression_statement-86-86", type_label=expression_statement];
719 [label="88_ return true;\n719-return-89-89", type_label=return];
725 [label="92_ safeTransfer\n725-function_definition-93-95", type_label=function_definition];
742 [label="93_ assert(token.transfer(to, value));\n742-expression_statement-94-94", type_label=expression_statement];
754 [label="95_ safeTransferFrom\n754-function_definition-96-98", type_label=function_definition];
775 [label="96_ assert(token.transferFrom(from, to, value));\n775-expression_statement-97-97", type_label=expression_statement];
789 [label="98_ safeApprove\n789-function_definition-99-101", type_label=function_definition];
806 [label="99_ assert(token.approve(spender, value));\n806-expression_statement-100-100", type_label=expression_statement];
821 [label="103_ address public owner;\n821-new_variable-104-104", type_label=new_variable];
828 [label="105_ owner = msg.sender;\n828-expression_statement-106-106", type_label=expression_statement];
834 [label="107_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n834-expression_statement-108-111", type_label=expression_statement];
837 [label="108_ require(msg.sender == owner);\n837-expression_statement-109-109", type_label=expression_statement];
846 [label="109_ _;\n846-expression_statement-110-110", type_label=expression_statement];
873 [label="117_ address public beneficiary;\n873-new_variable-118-118", type_label=new_variable];
878 [label="118_ uint256 public cliff;\n878-new_variable-119-119", type_label=new_variable];
883 [label="119_ uint256 public start;\n883-new_variable-120-120", type_label=new_variable];
888 [label="120_ uint256 public duration;\n888-new_variable-121-121", type_label=new_variable];
893 [label="121_ bool public revocable;\n893-new_variable-122-122", type_label=new_variable];
898 [label="122_ mapping (address => uint256) public released;\n898-new_variable-123-123", type_label=new_variable];
905 [label="123_ mapping (address => bool) public revoked;\n905-new_variable-124-124", type_label=new_variable];
912 [label="124_ address internal ownerShip;\n912-new_variable-125-125", type_label=new_variable];
943 [label="135_ require(_beneficiary != address(0));\n943-expression_statement-136-136", type_label=expression_statement];
952 [label="136_ require(_cliff <= _duration);\n952-expression_statement-137-137", type_label=expression_statement];
959 [label="137_ beneficiary = _beneficiary;\n959-expression_statement-138-138", type_label=expression_statement];
963 [label="138_ revocable = _revocable;\n963-expression_statement-139-139", type_label=expression_statement];
967 [label="139_ duration = _duration;\n967-expression_statement-140-140", type_label=expression_statement];
971 [label="140_ cliff = _start.add(_cliff);\n971-expression_statement-141-141", type_label=expression_statement];
980 [label="141_ start = _start;\n980-expression_statement-142-142", type_label=expression_statement];
984 [label="142_ ownerShip = _realOwner;\n984-expression_statement-143-143", type_label=expression_statement];
988 [label="144_ release\n988-function_definition-145-151", type_label=function_definition];
997 [label="145_ uint256 unreleased = releasableAmount(token);\n997-new_variable-146-146", type_label=new_variable];
998 [label="145_ uint256 unreleased\n998-new_variable-146-146", type_label=new_variable];
1006 [label="146_ require(unreleased > 0);\n1006-expression_statement-147-147", type_label=expression_statement];
1013 [label="147_ released[token] = released[token].add(unreleased);\n1013-expression_statement-148-148", type_label=expression_statement];
1026 [label="148_ token.safeTransfer(beneficiary, unreleased);\n1026-expression_statement-149-149", type_label=expression_statement];
1039 [label="151_ revoke\n1039-function_definition-152-161", type_label=function_definition];
1047 [label="151_ onlyOwner\n1047-expression_statement-152-152", type_label=expression_statement];
1050 [label="152_ require(revocable);\n1050-expression_statement-153-153", type_label=expression_statement];
1055 [label="153_ require(!revoked[token]);\n1055-expression_statement-154-154", type_label=expression_statement];
1063 [label="154_ uint256 balance = token.balanceOf(this);\n1063-new_variable-155-155", type_label=new_variable];
1064 [label="154_ uint256 balance\n1064-new_variable-155-155", type_label=new_variable];
1074 [label="155_ uint256 unreleased = releasableAmount(token);\n1074-new_variable-156-156", type_label=new_variable];
1075 [label="155_ uint256 unreleased\n1075-new_variable-156-156", type_label=new_variable];
1083 [label="156_ uint256 refund = balance.sub(unreleased);\n1083-new_variable-157-157", type_label=new_variable];
1084 [label="156_ uint256 refund\n1084-new_variable-157-157", type_label=new_variable];
1094 [label="157_ revoked[token] = true;\n1094-expression_statement-158-158", type_label=expression_statement];
1101 [label="158_ token.safeTransfer(ownerShip, refund);\n1101-expression_statement-159-159", type_label=expression_statement];
1112 [label="161_ releasableAmount\n1112-function_definition-162-164", type_label=function_definition];
1126 [label="162_ return vestedAmount(token).sub(released[token]);\n1126-return-163-163", type_label=return];
1138 [label="164_ vestedAmount\n1138-function_definition-165-175", type_label=function_definition];
1152 [label="165_ uint256 currentBalance = token.balanceOf(this);\n1152-new_variable-166-166", type_label=new_variable];
1153 [label="165_ uint256 currentBalance\n1153-new_variable-166-166", type_label=new_variable];
1163 [label="166_ uint256 totalBalance = currentBalance.add(released[token]);\n1163-new_variable-167-167", type_label=new_variable];
1164 [label="166_ uint256 totalBalance\n1164-new_variable-167-167", type_label=new_variable];
1176 [label="167_ if_block.timestamp < cliff\n1176-if-168-174", type_label=if];
1183 [label="168_ return 0;\n1183-return-169-169", type_label=return];
1185 [label="169_ if\n1185-if-170-174", type_label=if];
1201 [label="170_ return totalBalance;\n1201-return-171-171", type_label=return];
1204 [label="172_ return totalBalance.mul(block.timestamp.sub(start)).div(duration);\n1204-return-173-173", type_label=return];
1232 [label="178_ ERC20 public token;\n1232-new_variable-179-179", type_label=new_variable];
1245 [label="180_ token = _token;\n1245-expression_statement-181-181", type_label=expression_statement];
1249 [label="182_ fillUpAllowance\n1249-function_definition-183-187", type_label=function_definition];
1253 [label="183_ uint256 amount = token.balanceOf(this);\n1253-new_variable-184-184", type_label=new_variable];
1254 [label="183_ uint256 amount\n1254-new_variable-184-184", type_label=new_variable];
1264 [label="184_ require(amount > 0);\n1264-expression_statement-185-185", type_label=expression_statement];
1271 [label="185_ token.approve(token, amount);\n1271-expression_statement-186-186", type_label=expression_statement];
1296 [label="190_ burn\n1296-function_definition-191-198", type_label=function_definition];
1304 [label="191_ require(_value > 0);\n1304-expression_statement-192-192", type_label=expression_statement];
1311 [label="192_ require(_value <= balances[msg.sender]);\n1311-expression_statement-193-193", type_label=expression_statement];
1322 [label="193_ address burner = msg.sender;\n1322-new_variable-194-194", type_label=new_variable];
1323 [label="193_ address burner\n1323-new_variable-194-194", type_label=new_variable];
1330 [label="194_ balances[burner] = balances[burner].sub(_value);\n1330-expression_statement-195-195", type_label=expression_statement];
1343 [label="195_ totalSupply_ = totalSupply_.sub(_value);\n1343-expression_statement-196-196", type_label=expression_statement];
1367 [label="200_ string public constant name = \"ZETCAB\";\n1367-new_variable-201-201", type_label=new_variable];
1374 [label="201_ string public constant symbol = \"ZTC\";\n1374-new_variable-202-202", type_label=new_variable];
1381 [label="202_ uint8 public constant decimals = 18;\n1381-new_variable-203-203", type_label=new_variable];
1387 [label="203_ uint256 public constant HARD_CAP = 2500000000 * 10**uint256(decimals);\n1387-new_variable-204-204", type_label=new_variable];
1399 [label="204_ address public saleTokensAddress;\n1399-new_variable-205-205", type_label=new_variable];
1404 [label="205_ TokenVault public reserveTokensVault;\n1404-new_variable-206-206", type_label=new_variable];
1410 [label="206_ uint64 internal daySecond     = 86400;\n1410-new_variable-207-207", type_label=new_variable];
1416 [label="207_ uint64 internal lock90Days    = 90;\n1416-new_variable-208-208", type_label=new_variable];
1422 [label="208_ uint64 internal unlock100Days = 100;\n1422-new_variable-209-209", type_label=new_variable];
1428 [label="209_ uint64 internal lock365Days   = 365;\n1428-new_variable-210-210", type_label=new_variable];
1434 [label="210_ mapping(address => address) public vestingOf;\n1434-new_variable-211-211", type_label=new_variable];
1447 [label="212_ require(_saleTokensAddress != address(0));\n1447-expression_statement-213-213", type_label=expression_statement];
1456 [label="213_ saleTokensAddress = _saleTokensAddress;\n1456-expression_statement-214-214", type_label=expression_statement];
1460 [label="214_ uint256 saleTokens = 1750000000;\n1460-new_variable-215-215", type_label=new_variable];
1461 [label="214_ uint256 saleTokens\n1461-new_variable-215-215", type_label=new_variable];
1466 [label="215_ createTokensInt(saleTokens, saleTokensAddress);\n1466-expression_statement-216-216", type_label=expression_statement];
1473 [label="216_ require(totalSupply_ <= HARD_CAP);\n1473-expression_statement-217-217", type_label=expression_statement];
1480 [label="218_ createReserveTokensVault\n1480-function_definition-219-224", type_label=function_definition];
1483 [label="218_ onlyOwner\n1483-expression_statement-219-219", type_label=expression_statement];
1486 [label="219_ require(reserveTokensVault == address(0));\n1486-expression_statement-220-220", type_label=expression_statement];
1495 [label="220_ uint256 reserveTokens = 750000000;\n1495-new_variable-221-221", type_label=new_variable];
1496 [label="220_ uint256 reserveTokens\n1496-new_variable-221-221", type_label=new_variable];
1501 [label="221_ reserveTokensVault = createTokenVaultInt(reserveTokens);\n1501-expression_statement-222-222", type_label=expression_statement];
1508 [label="222_ require(totalSupply_ <= HARD_CAP);\n1508-expression_statement-223-223", type_label=expression_statement];
1515 [label="224_ createTokenVaultInt\n1515-function_definition-225-230", type_label=function_definition];
1522 [label="224_ onlyOwner\n1522-expression_statement-225-225", type_label=expression_statement];
1530 [label="225_ TokenVault tokenVault = new TokenVault(ERC20(this));\n1530-new_variable-226-226", type_label=new_variable];
1531 [label="225_ TokenVault tokenVault\n1531-new_variable-226-226", type_label=new_variable];
1546 [label="226_ createTokensInt(tokens, tokenVault);\n1546-expression_statement-227-227", type_label=expression_statement];
1553 [label="227_ tokenVault.fillUpAllowance();\n1553-expression_statement-228-228", type_label=expression_statement];
1558 [label="228_ return tokenVault;\n1558-return-229-229", type_label=return];
1560 [label="230_ createTokensInt\n1560-function_definition-231-237", type_label=function_definition];
1571 [label="230_ onlyOwner\n1571-expression_statement-231-231", type_label=expression_statement];
1574 [label="231_ uint256 tokens = _tokens * 10**uint256(decimals);\n1574-new_variable-232-232", type_label=new_variable];
1575 [label="231_ uint256 tokens\n1575-new_variable-232-232", type_label=new_variable];
1586 [label="232_ totalSupply_ = totalSupply_.add(tokens);\n1586-expression_statement-233-233", type_label=expression_statement];
1595 [label="233_ balances[_destination] = balances[_destination].add(tokens);\n1595-expression_statement-234-234", type_label=expression_statement];
1616 [label="235_ require(totalSupply_ <= HARD_CAP);\n1616-expression_statement-236-236", type_label=expression_statement];
1623 [label="237_ vestTokensDetailInt\n1623-function_definition-238-252", type_label=function_definition];
1650 [label="243_ onlyOwner\n1650-expression_statement-244-244", type_label=expression_statement];
1653 [label="244_ require(_beneficiary != address(0));\n1653-expression_statement-245-245", type_label=expression_statement];
1662 [label="245_ uint256 tokensAmount = _tokensAmountInt * 10**uint256(decimals);\n1662-new_variable-246-246", type_label=new_variable];
1663 [label="245_ uint256 tokensAmount\n1663-new_variable-246-246", type_label=new_variable];
1674 [label="246_ if_vestingOf[_beneficiary] == 0x0\n1674-if-247-250", type_label=if];
1681 [label="247_ TokenVesting vesting = new TokenVesting(_beneficiary, _startS, _cliffS, _durationS, _revocable, owner);\n1681-new_variable-248-248", type_label=new_variable];
1682 [label="247_ TokenVesting vesting\n1682-new_variable-248-248", type_label=new_variable];
1704 [label="248_ vestingOf[_beneficiary] = address(vesting);\n1704-expression_statement-249-249", type_label=expression_statement];
1712 [label="250_ require(this.transferFrom(reserveTokensVault, vestingOf[_beneficiary], tokensAmount));\n1712-expression_statement-251-251", type_label=expression_statement];
1728 [label="252_ vestTokensStartAtInt\n1728-function_definition-253-270", type_label=function_definition];
1755 [label="258_ onlyOwner\n1755-expression_statement-259-259", type_label=expression_statement];
1758 [label="259_ require(_beneficiary != address(0));\n1758-expression_statement-260-260", type_label=expression_statement];
1767 [label="260_ uint256 tokensAmount = _tokensAmountInt * 10**uint256(decimals);\n1767-new_variable-261-261", type_label=new_variable];
1768 [label="260_ uint256 tokensAmount\n1768-new_variable-261-261", type_label=new_variable];
1779 [label="261_ uint256 afterSec = _afterDay * daySecond;\n1779-new_variable-262-262", type_label=new_variable];
1780 [label="261_ uint256 afterSec\n1780-new_variable-262-262", type_label=new_variable];
1787 [label="262_ uint256 cliffSec = _cliffDay * daySecond;\n1787-new_variable-263-263", type_label=new_variable];
1788 [label="262_ uint256 cliffSec\n1788-new_variable-263-263", type_label=new_variable];
1795 [label="263_ uint256 durationSec = _durationDay * daySecond;\n1795-new_variable-264-264", type_label=new_variable];
1796 [label="263_ uint256 durationSec\n1796-new_variable-264-264", type_label=new_variable];
1803 [label="264_ if_vestingOf[_beneficiary] == 0x0\n1803-if-265-268", type_label=if];
1810 [label="265_ TokenVesting vesting = new TokenVesting(_beneficiary, _startS + afterSec, cliffSec, durationSec, true, owner);\n1810-new_variable-266-266", type_label=new_variable];
1811 [label="265_ TokenVesting vesting\n1811-new_variable-266-266", type_label=new_variable];
1836 [label="266_ vestingOf[_beneficiary] = address(vesting);\n1836-expression_statement-267-267", type_label=expression_statement];
1844 [label="268_ require(this.transferFrom(reserveTokensVault, vestingOf[_beneficiary], tokensAmount));\n1844-expression_statement-269-269", type_label=expression_statement];
1860 [label="270_ vestTokensFromNowInt\n1860-function_definition-271-273", type_label=function_definition];
1883 [label="270_ onlyOwner\n1883-expression_statement-271-271", type_label=expression_statement];
1886 [label="271_ vestTokensStartAtInt(_beneficiary, _tokensAmountInt, now, _afterDay, _cliffDay, _durationDay);\n1886-expression_statement-272-272", type_label=expression_statement];
1901 [label="273_ vestCmdNow1PercentInt\n1901-function_definition-274-276", type_label=function_definition];
1912 [label="273_ onlyOwner\n1912-expression_statement-274-274", type_label=expression_statement];
1915 [label="274_ vestTokensFromNowInt(_beneficiary, _tokensAmountInt, 0, 0, unlock100Days);\n1915-expression_statement-275-275", type_label=expression_statement];
1928 [label="276_ vestCmd3Month1PercentInt\n1928-function_definition-277-279", type_label=function_definition];
1939 [label="276_ onlyOwner\n1939-expression_statement-277-277", type_label=expression_statement];
1942 [label="277_ vestTokensFromNowInt(_beneficiary, _tokensAmountInt, lock90Days, 0, unlock100Days);\n1942-expression_statement-278-278", type_label=expression_statement];
1955 [label="279_ vestCmd1YearInstantInt\n1955-function_definition-280-282", type_label=function_definition];
1966 [label="279_ onlyOwner\n1966-expression_statement-280-280", type_label=expression_statement];
1969 [label="280_ vestTokensFromNowInt(_beneficiary, _tokensAmountInt, 0, lock365Days, lock365Days);\n1969-expression_statement-281-281", type_label=expression_statement];
1982 [label="282_ releaseVestedTokens\n1982-function_definition-283-285", type_label=function_definition];
1986 [label="283_ releaseVestedTokensFor(msg.sender);\n1986-expression_statement-284-284", type_label=expression_statement];
1993 [label="285_ releaseVestedTokensFor\n1993-function_definition-286-288", type_label=function_definition];
2001 [label="286_ TokenVesting(vestingOf[_owner]).release(this);\n2001-expression_statement-287-287", type_label=expression_statement];
2013 [label="288_ lockedBalanceOf\n2013-function_definition-289-291", type_label=function_definition];
2026 [label="289_ return balances[vestingOf[_owner]];\n2026-return-290-290", type_label=return];
2032 [label="291_ releaseableBalanceOf\n2032-function_definition-292-298", type_label=function_definition];
2045 [label="292_ if_vestingOf[_owner] == address(0)\n2045-if-293-297", type_label=if];
2054 [label="293_ return 0;\n2054-return-294-294", type_label=return];
2057 [label="295_ return TokenVesting(vestingOf[_owner]).releasableAmount(this);\n2057-return-296-296", type_label=return];
2069 [label="298_ revokeVestedTokensFor\n2069-function_definition-299-301", type_label=function_definition];
2076 [label="298_ onlyOwner\n2076-expression_statement-299-299", type_label=expression_statement];
2079 [label="299_ TokenVesting(vestingOf[_owner]).revoke(this);\n2079-expression_statement-300-300", type_label=expression_statement];
2091 [label="301_ makeReserveToVault\n2091-function_definition-302-305", type_label=function_definition];
2094 [label="301_ onlyOwner\n2094-expression_statement-302-302", type_label=expression_statement];
2097 [label="302_ require(reserveTokensVault != address(0));\n2097-expression_statement-303-303", type_label=expression_statement];
2106 [label="303_ reserveTokensVault.fillUpAllowance();\n2106-expression_statement-304-304", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
703;
12 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
29 -> 36  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
34 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
36 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
55 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
82 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
110 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
135 -> 142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
142 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
207 -> 213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
217 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
226 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
228 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
253 -> 264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
264 -> 281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
307 -> 321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
413 -> 433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
442 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
522 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
558 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
561 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
586 -> 603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
643 -> 660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
660 -> 672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
672 -> 677  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
672 -> 688  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
677 -> 703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
719 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
725 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
754 -> 775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
789 -> 806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
873 -> 878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
878 -> 883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
888 -> 893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
893 -> 898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
898 -> 905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
905 -> 912  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
952 -> 959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
959 -> 963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
963 -> 967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
967 -> 971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
971 -> 980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
980 -> 984  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
988 -> 997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
997 -> 1006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1006 -> 1013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1013 -> 1026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1039 -> 1050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1050 -> 1055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1055 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1074 -> 1083  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1083 -> 1094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1094 -> 1101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 1126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1126 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1138 -> 1152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1152 -> 1163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1163 -> 1176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1176 -> 1183  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1176 -> 1185  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1183 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1185 -> 1201  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1185 -> 1204  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1201 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1204 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1249 -> 1253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1253 -> 1264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1264 -> 1271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1296 -> 1304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1304 -> 1311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1311 -> 1322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1322 -> 1330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1330 -> 1343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1367 -> 1374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1374 -> 1381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1381 -> 1387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1387 -> 1399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1399 -> 1404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1404 -> 1410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1410 -> 1416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1416 -> 1422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1422 -> 1428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1428 -> 1434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1447 -> 1456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1456 -> 1460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1460 -> 1466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1466 -> 1473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1480 -> 1486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1486 -> 1495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1495 -> 1501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1501 -> 1508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1515 -> 1530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1530 -> 1546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1546 -> 1553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1553 -> 1558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1558 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1560 -> 1574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1574 -> 1586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1586 -> 1595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1623 -> 1653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1653 -> 1662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1662 -> 1674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1674 -> 1681  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1674 -> 1712  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1681 -> 1704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1704 -> 1712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1728 -> 1758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1758 -> 1767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1767 -> 1779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1779 -> 1787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1787 -> 1795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1795 -> 1803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1803 -> 1810  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1803 -> 1844  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1810 -> 1836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1836 -> 1844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1860 -> 1886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1901 -> 1915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1928 -> 1942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1955 -> 1969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1982 -> 1986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1993 -> 2001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2013 -> 2026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2026 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2045 -> 2054  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2045 -> 2057  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2054 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2057 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2069 -> 2079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2091 -> 2097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2097 -> 2106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
