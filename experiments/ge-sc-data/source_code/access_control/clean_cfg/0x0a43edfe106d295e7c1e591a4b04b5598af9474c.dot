digraph  {
9 [label="1_ struct Token {\n        string identity;\n        address owner;\n    }\n9-expression_statement-2-5", type_label=expression_statement];
19 [label="5_ id\n19-function_definition-6-8", type_label=function_definition];
31 [label="6_ return sha3(self.identity);\n31-return-7-7", type_label=return];
38 [label="8_ generateId\n38-function_definition-9-11", type_label=function_definition];
49 [label="9_ return sha3(identity);\n49-return-10-10", type_label=return];
82 [label="13_ logApproval\n82-function_definition-14-16", type_label=function_definition];
97 [label="14_ Approval(_owner, _spender, _value);\n97-expression_statement-15-15", type_label=expression_statement];
106 [label="16_ logTransfer\n106-function_definition-17-19", type_label=function_definition];
121 [label="17_ Transfer(_from, _to, _value);\n121-expression_statement-18-18", type_label=expression_statement];
189 [label="27_ mint\n189-function_definition-28-28", type_label=function_definition];
204 [label="28_ destroy\n204-function_definition-29-29", type_label=function_definition];
215 [label="29_ addMinter\n215-function_definition-30-30", type_label=function_definition];
225 [label="30_ removeMinter\n225-function_definition-31-31", type_label=function_definition];
235 [label="31_ totalSupply\n235-function_definition-32-32", type_label=function_definition];
242 [label="32_ transfer\n242-function_definition-33-33", type_label=function_definition];
257 [label="33_ transfer\n257-function_definition-34-34", type_label=function_definition];
272 [label="34_ transferFrom\n272-function_definition-35-35", type_label=function_definition];
291 [label="35_ transferFrom\n291-function_definition-36-36", type_label=function_definition];
310 [label="36_ approve\n310-function_definition-37-37", type_label=function_definition];
325 [label="37_ approve\n325-function_definition-38-38", type_label=function_definition];
340 [label="38_ balanceOf\n340-function_definition-39-39", type_label=function_definition];
346 [label="38_ constant\n346-expression_statement-39-39", type_label=expression_statement];
353 [label="39_ allowance\n353-function_definition-40-40", type_label=function_definition];
363 [label="39_ constant\n363-expression_statement-40-40", type_label=expression_statement];
370 [label="40_ isTokenOwner\n370-function_definition-41-41", type_label=function_definition];
376 [label="40_ constant\n376-expression_statement-41-41", type_label=expression_statement];
382 [label="41_ identityOf\n382-function_definition-42-42", type_label=function_definition];
388 [label="41_ constant\n388-expression_statement-42-42", type_label=expression_statement];
395 [label="42_ ownerOf\n395-function_definition-43-43", type_label=function_definition];
401 [label="42_ constant\n401-expression_statement-43-43", type_label=expression_statement];
421 [label="46_ mapping (address => bool) public minters;\n421-new_variable-47-47", type_label=new_variable];
428 [label="47_ uint constant _END_MINTING = 1474502400;\n428-new_variable-48-48", type_label=new_variable];
433 [label="48_ END_MINTING\n433-function_definition-49-51", type_label=function_definition];
435 [label="48_ constant\n435-expression_statement-49-49", type_label=expression_statement];
442 [label="49_ return _END_MINTING;\n442-return-50-50", type_label=return];
444 [label="51_ Devcon2Token\n444-function_definition-52-55", type_label=function_definition];
447 [label="52_ minters[msg.sender] = true;\n447-expression_statement-53-53", type_label=expression_statement];
456 [label="53_ MinterAdded(msg.sender);\n456-expression_statement-54-54", type_label=expression_statement];
463 [label="55_ uint numTokens;\n463-new_variable-56-56", type_label=new_variable];
467 [label="56_ mapping (bytes32 => TokenLib.Token) tokens;\n467-new_variable-57-57", type_label=new_variable];
475 [label="57_ mapping (address => bytes32) public ownedToken;\n475-new_variable-58-58", type_label=new_variable];
482 [label="58_ mapping (address => mapping (address => bytes32)) approvals;\n482-new_variable-59-59", type_label=new_variable];
490 [label="59_ mint\n490-function_definition-60-73", type_label=function_definition];
506 [label="60_ if_now >= _END_MINTING\n506-if-61-61", type_label=if];
510 [label="60_ throw;\n510-expression_statement-61-61", type_label=expression_statement];
512 [label="61_ if\n512-if-62-62", type_label=if];
519 [label="61_ return false;\n519-return-62-62", type_label=return];
522 [label="62_ if_ownedToken[_to] != 0x0\n522-if-63-63", type_label=if];
528 [label="62_ return false;\n528-return-63-63", type_label=return];
531 [label="63_ bytes32 id = TokenLib.generateId(_identity);\n531-new_variable-64-64", type_label=new_variable];
532 [label="63_ bytes32 id\n532-new_variable-64-64", type_label=new_variable];
542 [label="64_ var token = tokens[id];\n542-new_variable-65-65", type_label=new_variable];
543 [label="64_ var token\n543-new_variable-65-65", type_label=new_variable];
550 [label="65_ if\n550-if-66-66", type_label=if];
557 [label="65_ return false;\n557-return-66-66", type_label=return];
560 [label="66_ token.owner = _to;\n560-expression_statement-67-67", type_label=expression_statement];
566 [label="67_ token.identity = _identity;\n566-expression_statement-68-68", type_label=expression_statement];
572 [label="68_ ownedToken[_to] = id;\n572-expression_statement-69-69", type_label=expression_statement];
578 [label="69_ Mint(_to, id);\n578-expression_statement-70-70", type_label=expression_statement];
585 [label="70_ numTokens += 1;\n585-expression_statement-71-71", type_label=expression_statement];
586 [label="70_ numTokens += 1\n586-expression_statement-71-71", type_label=expression_statement];
589 [label="71_ return true;\n589-return-72-72", type_label=return];
592 [label="73_ destroy\n592-function_definition-74-84", type_label=function_definition];
604 [label="74_ if_now >= _END_MINTING\n604-if-75-75", type_label=if];
608 [label="74_ throw;\n608-expression_statement-75-75", type_label=expression_statement];
610 [label="75_ if\n610-if-76-76", type_label=if];
617 [label="75_ return false;\n617-return-76-76", type_label=return];
620 [label="76_ var tokenToDestroy = tokens[_id];\n620-new_variable-77-77", type_label=new_variable];
621 [label="76_ var tokenToDestroy\n621-new_variable-77-77", type_label=new_variable];
628 [label="77_ ownedToken[tokenToDestroy.owner] = 0x0;\n628-expression_statement-78-78", type_label=expression_statement];
636 [label="78_ tokenToDestroy.identity = '';\n636-expression_statement-79-79", type_label=expression_statement];
643 [label="79_ tokenToDestroy.owner = 0x0;\n643-expression_statement-80-80", type_label=expression_statement];
649 [label="80_ Destroy(_id);\n649-expression_statement-81-81", type_label=expression_statement];
654 [label="81_ numTokens -= 1;\n654-expression_statement-82-82", type_label=expression_statement];
655 [label="81_ numTokens -= 1\n655-expression_statement-82-82", type_label=expression_statement];
658 [label="82_ return true;\n658-return-83-83", type_label=return];
661 [label="84_ addMinter\n661-function_definition-85-91", type_label=function_definition];
672 [label="85_ if_now >= _END_MINTING\n672-if-86-86", type_label=if];
676 [label="85_ throw;\n676-expression_statement-86-86", type_label=expression_statement];
678 [label="86_ if\n678-if-87-87", type_label=if];
685 [label="86_ return false;\n685-return-87-87", type_label=return];
688 [label="87_ minters[who] = true;\n688-expression_statement-88-88", type_label=expression_statement];
695 [label="88_ MinterAdded(who);\n695-expression_statement-89-89", type_label=expression_statement];
700 [label="89_ return true;\n700-return-90-90", type_label=return];
703 [label="91_ removeMinter\n703-function_definition-92-97", type_label=function_definition];
714 [label="92_ if\n714-if-93-93", type_label=if];
721 [label="92_ return false;\n721-return-93-93", type_label=return];
724 [label="93_ minters[who] = false;\n724-expression_statement-94-94", type_label=expression_statement];
731 [label="94_ MinterRemoved(who);\n731-expression_statement-95-95", type_label=expression_statement];
736 [label="95_ return true;\n736-return-96-96", type_label=return];
739 [label="97_ transfer\n739-function_definition-98-100", type_label=function_definition];
755 [label="98_ return transfer(_to, bytes32(_value));\n755-return-99-99", type_label=return];
764 [label="100_ transfer\n764-function_definition-101-112", type_label=function_definition];
780 [label="101_ if__value == 0x0\n780-if-102-102", type_label=if];
784 [label="101_ return false;\n784-return-102-102", type_label=return];
787 [label="102_ if_tokens[_value].id() != _value\n787-if-103-103", type_label=if];
796 [label="102_ return false;\n796-return-103-103", type_label=return];
799 [label="103_ if_ownedToken[_to] != 0x0\n799-if-104-104", type_label=if];
805 [label="103_ return false;\n805-return-104-104", type_label=return];
808 [label="104_ var tokenToTransfer = tokens[_value];\n808-new_variable-105-105", type_label=new_variable];
809 [label="104_ var tokenToTransfer\n809-new_variable-105-105", type_label=new_variable];
816 [label="105_ if_tokenToTransfer.owner != msg.sender\n816-if-106-106", type_label=if];
824 [label="105_ return false;\n824-return-106-106", type_label=return];
827 [label="106_ tokenToTransfer.owner = _to;\n827-expression_statement-107-107", type_label=expression_statement];
833 [label="107_ ownedToken[msg.sender] = 0x0;\n833-expression_statement-108-108", type_label=expression_statement];
841 [label="108_ ownedToken[_to] = _value;\n841-expression_statement-109-109", type_label=expression_statement];
847 [label="109_ TokenLib.logTransfer(msg.sender, _to, _value);\n847-expression_statement-110-110", type_label=expression_statement];
860 [label="110_ return true;\n860-return-111-111", type_label=return];
863 [label="112_ transferFrom\n863-function_definition-113-115", type_label=function_definition];
883 [label="113_ return transferFrom(_from, _to, bytes32(_value));\n883-return-114-114", type_label=return];
894 [label="115_ transferFrom\n894-function_definition-116-131", type_label=function_definition];
914 [label="116_ if__value == 0x0\n914-if-117-117", type_label=if];
918 [label="116_ return false;\n918-return-117-117", type_label=return];
921 [label="117_ if_tokens[_value].id() != _value\n921-if-118-118", type_label=if];
930 [label="117_ return false;\n930-return-118-118", type_label=return];
933 [label="118_ if_ownedToken[_to] != 0x0\n933-if-119-119", type_label=if];
939 [label="118_ return false;\n939-return-119-119", type_label=return];
942 [label="119_ var tokenToTransfer = tokens[_value];\n942-new_variable-120-120", type_label=new_variable];
943 [label="119_ var tokenToTransfer\n943-new_variable-120-120", type_label=new_variable];
950 [label="120_ if_tokenToTransfer.owner != _from\n950-if-121-121", type_label=if];
956 [label="120_ return false;\n956-return-121-121", type_label=return];
959 [label="121_ if_ownedToken[_from] != _value\n959-if-122-122", type_label=if];
965 [label="121_ return false;\n965-return-122-122", type_label=return];
968 [label="122_ if_approvals[_from][msg.sender] != _value\n968-if-123-123", type_label=if];
978 [label="122_ return false;\n978-return-123-123", type_label=return];
981 [label="123_ tokenToTransfer.owner = _to;\n981-expression_statement-124-124", type_label=expression_statement];
987 [label="124_ ownedToken[_from] = 0x0;\n987-expression_statement-125-125", type_label=expression_statement];
993 [label="125_ ownedToken[_to] = _value;\n993-expression_statement-126-126", type_label=expression_statement];
999 [label="126_ approvals[_from][msg.sender] = 0x0;\n999-expression_statement-127-127", type_label=expression_statement];
1009 [label="127_ Transfer(_from, _to, uint(_value));\n1009-expression_statement-128-128", type_label=expression_statement];
1020 [label="128_ TokenLib.logTransfer(_from, _to, _value);\n1020-expression_statement-129-129", type_label=expression_statement];
1031 [label="129_ return true;\n1031-return-130-130", type_label=return];
1034 [label="131_ approve\n1034-function_definition-132-134", type_label=function_definition];
1050 [label="132_ return approve(_spender, bytes32(_value));\n1050-return-133-133", type_label=return];
1059 [label="134_ approve\n1059-function_definition-135-145", type_label=function_definition];
1075 [label="135_ if__value == 0x0\n1075-if-136-136", type_label=if];
1079 [label="135_ return false;\n1079-return-136-136", type_label=return];
1082 [label="136_ if_tokens[_value].id() != _value\n1082-if-137-137", type_label=if];
1091 [label="136_ return false;\n1091-return-137-137", type_label=return];
1094 [label="137_ var tokenToApprove = tokens[_value];\n1094-new_variable-138-138", type_label=new_variable];
1095 [label="137_ var tokenToApprove\n1095-new_variable-138-138", type_label=new_variable];
1102 [label="138_ if_tokenToApprove.owner != msg.sender\n1102-if-139-139", type_label=if];
1110 [label="138_ return false;\n1110-return-139-139", type_label=return];
1113 [label="139_ if_ownedToken[msg.sender] != _value\n1113-if-140-140", type_label=if];
1121 [label="139_ return false;\n1121-return-140-140", type_label=return];
1124 [label="140_ approvals[msg.sender][_spender] = _value;\n1124-expression_statement-141-141", type_label=expression_statement];
1134 [label="141_ Approval(msg.sender, _spender, uint(_value));\n1134-expression_statement-142-142", type_label=expression_statement];
1147 [label="142_ TokenLib.logApproval(msg.sender, _spender, _value);\n1147-expression_statement-143-143", type_label=expression_statement];
1160 [label="143_ return true;\n1160-return-144-144", type_label=return];
1163 [label="145_ totalSupply\n1163-function_definition-146-148", type_label=function_definition];
1171 [label="146_ return numTokens;\n1171-return-147-147", type_label=return];
1173 [label="148_ balanceOf\n1173-function_definition-149-151", type_label=function_definition];
1179 [label="148_ constant\n1179-expression_statement-149-149", type_label=expression_statement];
1187 [label="149_ return uint(ownedToken[_owner]);\n1187-return-150-150", type_label=return];
1193 [label="151_ allowance\n1193-function_definition-152-154", type_label=function_definition];
1203 [label="151_ constant\n1203-expression_statement-152-152", type_label=expression_statement];
1211 [label="152_ return uint(approvals[_owner][_spender]);\n1211-return-153-153", type_label=return];
1219 [label="154_ isTokenOwner\n1219-function_definition-155-157", type_label=function_definition];
1225 [label="154_ constant\n1225-expression_statement-155-155", type_label=expression_statement];
1232 [label="155_ return (ownedToken[_owner] != 0x0 && tokens[ownedToken[_owner]].owner == _owner);\n1232-return-156-156", type_label=return];
1249 [label="157_ identityOf\n1249-function_definition-158-160", type_label=function_definition];
1255 [label="157_ constant\n1255-expression_statement-158-158", type_label=expression_statement];
1263 [label="158_ return tokens[_id].identity;\n1263-return-159-159", type_label=return];
1269 [label="160_ ownerOf\n1269-function_definition-161-163", type_label=function_definition];
1275 [label="160_ constant\n1275-expression_statement-161-161", type_label=expression_statement];
1283 [label="161_ return tokens[_id].owner;\n1283-return-162-162", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
19 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
38 -> 49  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
49 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
82 -> 97  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
442 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
444 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
463 -> 467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
475 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
506 -> 510  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
506 -> 512  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
510 -> 512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 519  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
512 -> 522  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
519 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
522 -> 528  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
522 -> 531  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
528 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
531 -> 542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
542 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 557  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
550 -> 560  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
557 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
560 -> 566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
566 -> 572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
572 -> 578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
578 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
589 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
592 -> 620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 608  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
604 -> 610  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
608 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
610 -> 617  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
610 -> 620  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
617 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
620 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
628 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
636 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
649 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
654 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
661 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
672 -> 676  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
672 -> 678  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
676 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 685  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
678 -> 688  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
685 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
688 -> 695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
695 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
700 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
703 -> 724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
714 -> 721  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
714 -> 724  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
721 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
724 -> 731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
739 -> 755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
755 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
764 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 784  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
780 -> 787  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
784 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
787 -> 796  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
787 -> 799  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
796 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
799 -> 805  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
799 -> 808  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
805 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
808 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 824  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
816 -> 827  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
824 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
827 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
841 -> 847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
847 -> 860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
860 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
863 -> 883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
894 -> 942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 918  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
914 -> 921  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
918 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
921 -> 930  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
921 -> 933  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
930 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
933 -> 939  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
933 -> 942  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
939 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
942 -> 950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
950 -> 956  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
950 -> 959  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
956 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
959 -> 965  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
959 -> 968  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
965 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
968 -> 978  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
968 -> 981  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
978 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
981 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1009 -> 1020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1020 -> 1031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1031 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1034 -> 1050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1050 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1059 -> 1094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1075 -> 1079  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1075 -> 1082  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1079 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1082 -> 1091  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1082 -> 1094  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1091 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1094 -> 1102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1102 -> 1110  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1102 -> 1113  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1110 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1113 -> 1121  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1113 -> 1124  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1121 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1124 -> 1134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1134 -> 1147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1147 -> 1160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1160 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1163 -> 1171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1171 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1173 -> 1187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1187 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1193 -> 1211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1211 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1219 -> 1232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1232 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1249 -> 1263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1263 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1269 -> 1283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
