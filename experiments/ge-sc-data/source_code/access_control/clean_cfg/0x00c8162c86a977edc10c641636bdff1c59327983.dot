digraph  {
16 [label="3_ transfer\n16-function_definition-4-4", type_label=function_definition];
31 [label="4_ transferFrom\n31-function_definition-5-5", type_label=function_definition];
50 [label="5_ approve\n50-function_definition-6-6", type_label=function_definition];
66 [label="6_ totalSupply\n66-function_definition-7-7", type_label=function_definition];
74 [label="7_ balanceOf\n74-function_definition-8-8", type_label=function_definition];
86 [label="8_ allowance\n86-function_definition-9-9", type_label=function_definition];
102 [label="9_ mint\n102-function_definition-10-10", type_label=function_definition];
117 [label="10_ stakeContractAddress\n117-function_definition-11-11", type_label=function_definition];
125 [label="11_ mergedMinerValidatorAddress\n125-function_definition-12-12", type_label=function_definition];
133 [label="12_ freezeTransfers\n133-function_definition-13-13", type_label=function_definition];
140 [label="13_ thawTransfers\n140-function_definition-14-14", type_label=function_definition];
150 [label="16_ mul\n150-function_definition-17-21", type_label=function_definition];
167 [label="17_ uint256 c = a * b;\n167-new_variable-18-18", type_label=new_variable];
168 [label="17_ uint256 c\n168-new_variable-18-18", type_label=new_variable];
175 [label="18_ require(a == 0 || c / a == b);\n175-expression_statement-19-19", type_label=expression_statement];
188 [label="19_ return c;\n188-return-20-20", type_label=return];
190 [label="21_ div\n190-function_definition-22-25", type_label=function_definition];
207 [label="22_ uint256 c = a / b;\n207-new_variable-23-23", type_label=new_variable];
208 [label="22_ uint256 c\n208-new_variable-23-23", type_label=new_variable];
215 [label="23_ return c;\n215-return-24-24", type_label=return];
217 [label="25_ sub\n217-function_definition-26-29", type_label=function_definition];
234 [label="26_ require(b <= a);\n234-expression_statement-27-27", type_label=expression_statement];
241 [label="27_ return a - b;\n241-return-28-28", type_label=return];
245 [label="29_ add\n245-function_definition-30-34", type_label=function_definition];
262 [label="30_ uint256 c = a + b;\n262-new_variable-31-31", type_label=new_variable];
263 [label="30_ uint256 c\n263-new_variable-31-31", type_label=new_variable];
270 [label="31_ require(c >= a);\n270-expression_statement-32-32", type_label=expression_statement];
277 [label="32_ return c;\n277-return-33-33", type_label=return];
287 [label="37_ bytes constant private PREFIX = \"\x19Ethereum Signed Message:\n32\";\n287-new_variable-38-38", type_label=new_variable];
294 [label="38_ address constant private SIGNER = 0xa80cD01dD37c29116549AA879c44C824b703828A;\n294-new_variable-39-39", type_label=new_variable];
300 [label="39_ address constant private TOKENADDRESS = 0xecc043b92834c1ebDE65F2181B59597a6588D616;\n300-new_variable-40-40", type_label=new_variable];
306 [label="40_ address constant private HOTWALLET = 0x3eC6481365c2c2b37d7b939B5854BFB7e5e83C10;\n306-new_variable-41-41", type_label=new_variable];
312 [label="41_ RTCoinInterface constant private RTI = RTCoinInterface(TOKENADDRESS);\n312-new_variable-42-42", type_label=new_variable];
322 [label="42_ string constant public VERSION = \"production\";\n322-new_variable-43-43", type_label=new_variable];
329 [label="43_ address public admin;\n329-new_variable-44-44", type_label=new_variable];
342 [label="46_ struct PaymentStruct {\n        uint256 paymentNumber;\n        uint256 chargeAmountInWei;\n        PaymentMethod method;\n        PaymentState state;\n    }\n342-expression_statement-47-52", type_label=expression_statement];
362 [label="52_ mapping (address => uint256) public numPayments;\n362-new_variable-53-53", type_label=new_variable];
369 [label="53_ mapping (address => mapping(uint256 => PaymentStruct)) public payments;\n369-new_variable-54-54", type_label=new_variable];
397 [label="55_ modifier validPayment(uint256 _paymentNumber) {\n        require(payments[msg.sender][_paymentNumber].state == PaymentState.nil, \"payment already made\");\n        _;\n    }\n397-expression_statement-56-59", type_label=expression_statement];
404 [label="56_ require(payments[msg.sender][_paymentNumber].state == PaymentState.nil, \"payment already made\");\n404-expression_statement-57-57", type_label=expression_statement];
424 [label="57_ _;\n424-expression_statement-58-58", type_label=expression_statement];
426 [label="59_ modifier onlyAdmin() {\n        require(msg.sender == admin, \"sender must be admin\");\n        _;\n    }\n426-expression_statement-60-63", type_label=expression_statement];
429 [label="60_ require(msg.sender == admin, \"sender must be admin\");\n429-expression_statement-61-61", type_label=expression_statement];
441 [label="61_ _;\n441-expression_statement-62-62", type_label=expression_statement];
445 [label="64_ admin = msg.sender;\n445-expression_statement-65-65", type_label=expression_statement];
451 [label="66_ makePayment\n451-function_definition-67-109", type_label=function_definition];
487 [label="77_ validPayment(_paymentNumber)\n487-expression_statement-78-78", type_label=expression_statement];
496 [label="80_ require(_paymentMethod == 0 || _paymentMethod == 1, \"invalid payment method\");\n496-expression_statement-81-81", type_label=expression_statement];
510 [label="81_ bytes32 image;\n510-new_variable-82-82", type_label=new_variable];
511 [label="81_ bytes32 image\n511-new_variable-82-82", type_label=new_variable];
515 [label="82_ if\n515-if-83-88", type_label=if];
518 [label="83_ bytes32 preimage = generatePreimage(_paymentNumber, _chargeAmountInWei, _paymentMethod);\n518-new_variable-84-84", type_label=new_variable];
519 [label="83_ bytes32 preimage\n519-new_variable-84-84", type_label=new_variable];
531 [label="84_ image = generatePrefixedPreimage(preimage);\n531-expression_statement-85-85", type_label=expression_statement];
539 [label="86_ image = generatePreimage(_paymentNumber, _chargeAmountInWei, _paymentMethod);\n539-expression_statement-87-87", type_label=expression_statement];
550 [label="88_ require(image == _h, \"reconstructed preimage does not match\");\n550-expression_statement-89-89", type_label=expression_statement];
560 [label="89_ address signer = ecrecover(_h, _v, _r, _s);\n560-new_variable-90-90", type_label=new_variable];
561 [label="89_ address signer\n561-new_variable-90-90", type_label=new_variable];
575 [label="90_ require(signer == SIGNER, \"recovered signer does not match\");\n575-expression_statement-91-91", type_label=expression_statement];
585 [label="91_ PaymentStruct memory ps = PaymentStruct({\n            paymentNumber: _paymentNumber,\n            chargeAmountInWei: _chargeAmountInWei,\n            method: PaymentMethod(_paymentMethod),\n            state: PaymentState.paid\n        });\n585-new_variable-92-97", type_label=new_variable];
586 [label="91_ PaymentStruct memory ps\n586-new_variable-92-92", type_label=new_variable];
611 [label="97_ payments[msg.sender][_paymentNumber] = ps;\n611-expression_statement-98-98", type_label=expression_statement];
621 [label="98_ numPayments[msg.sender] = numPayments[msg.sender].add(1);\n621-expression_statement-99-99", type_label=expression_statement];
638 [label="99_ if_PaymentMethod(_paymentMethod) == PaymentMethod.ETH\n638-if-100-105", type_label=if];
648 [label="100_ require(msg.value == _chargeAmountInWei, \"msg.value does not equal charge amount\");\n648-expression_statement-101-101", type_label=expression_statement];
672 [label="102_ HOTWALLET.transfer(msg.value);\n672-expression_statement-103-103", type_label=expression_statement];
681 [label="103_ return true;\n681-return-104-104", type_label=return];
696 [label="106_ require(RTI.transferFrom(msg.sender, HOTWALLET, _chargeAmountInWei), \"trasferFrom failed, most likely needs approval\");\n696-expression_statement-107-107", type_label=expression_statement];
715 [label="107_ return true;\n715-return-108-108", type_label=return];
718 [label="109_ verifyImages\n718-function_definition-110-129", type_label=function_definition];
747 [label="119_ require(_paymentMethod == 0 || _paymentMethod == 1, \"invalid payment method\");\n747-expression_statement-120-120", type_label=expression_statement];
761 [label="120_ bytes32 image;\n761-new_variable-121-121", type_label=new_variable];
762 [label="120_ bytes32 image\n762-new_variable-121-121", type_label=new_variable];
766 [label="121_ if\n766-if-122-127", type_label=if];
769 [label="122_ bytes32 preimage = generatePreimage(_paymentNumber, _chargeAmountInWei, _paymentMethod);\n769-new_variable-123-123", type_label=new_variable];
770 [label="122_ bytes32 preimage\n770-new_variable-123-123", type_label=new_variable];
782 [label="123_ image = generatePrefixedPreimage(preimage);\n782-expression_statement-124-124", type_label=expression_statement];
790 [label="125_ image = generatePreimage(_paymentNumber, _chargeAmountInWei, _paymentMethod);\n790-expression_statement-126-126", type_label=expression_statement];
801 [label="127_ return image == _h;\n801-return-128-128", type_label=return];
805 [label="129_ verifySigner\n805-function_definition-130-153", type_label=function_definition];
846 [label="142_ require(_paymentMethod == 0 || _paymentMethod == 1, \"invalid payment method\");\n846-expression_statement-143-143", type_label=expression_statement];
860 [label="143_ bytes32 image;\n860-new_variable-144-144", type_label=new_variable];
861 [label="143_ bytes32 image\n861-new_variable-144-144", type_label=new_variable];
865 [label="144_ if\n865-if-145-150", type_label=if];
868 [label="145_ bytes32 preimage = generatePreimage(_paymentNumber, _chargeAmountInWei, _paymentMethod);\n868-new_variable-146-146", type_label=new_variable];
869 [label="145_ bytes32 preimage\n869-new_variable-146-146", type_label=new_variable];
881 [label="146_ image = generatePrefixedPreimage(preimage);\n881-expression_statement-147-147", type_label=expression_statement];
889 [label="148_ image = generatePreimage(_paymentNumber, _chargeAmountInWei, _paymentMethod);\n889-expression_statement-149-149", type_label=expression_statement];
900 [label="150_ require(image == _h, \"failed to reconstruct preimages\");\n900-expression_statement-151-151", type_label=expression_statement];
910 [label="151_ return ecrecover(_h, _v, _r, _s) == SIGNER;\n910-return-152-152", type_label=return];
923 [label="153_ generatePreimage\n923-function_definition-154-163", type_label=function_definition];
944 [label="161_ return keccak256(abi.encodePacked(msg.sender, _paymentNumber, _paymentMethod, _chargeAmountInWei));\n944-return-162-162", type_label=return];
962 [label="163_ generatePrefixedPreimage\n962-function_definition-164-166", type_label=function_definition];
975 [label="164_ return keccak256(abi.encodePacked(PREFIX, _preimage));\n975-return-165-165", type_label=return];
987 [label="166_ goodNightSweetPrince\n987-function_definition-167-170", type_label=function_definition];
990 [label="166_ onlyAdmin\n990-expression_statement-167-167", type_label=expression_statement];
997 [label="167_ selfdestruct(msg.sender);\n997-expression_statement-168-168", type_label=expression_statement];
1004 [label="168_ return true;\n1004-return-169-169", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
684;
150 -> 167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
167 -> 175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
175 -> 188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
190 -> 207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
215 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
217 -> 234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
234 -> 241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
241 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
245 -> 262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
270 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
287 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
306 -> 312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
312 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
342 -> 362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
362 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
404 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
429 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
496 -> 510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 518  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
515 -> 539  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
518 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
560 -> 575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
575 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 648  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
638 -> 684  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
672 -> 681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
681 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
696 -> 715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
715 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
718 -> 747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
747 -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
761 -> 766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
766 -> 769  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
766 -> 790  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
769 -> 782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
782 -> 801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
801 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
805 -> 846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
846 -> 860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
860 -> 865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
865 -> 868  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
865 -> 889  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
868 -> 881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
881 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
923 -> 944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
944 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
962 -> 975  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
975 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
987 -> 997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
997 -> 1004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
