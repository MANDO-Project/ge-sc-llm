digraph  {
12 [label="2_ struct Role {\n        mapping (address => bool) bearer;\n    }\n12-expression_statement-3-5", type_label=expression_statement];
20 [label="5_ add\n20-function_definition-6-10", type_label=function_definition];
33 [label="6_ require(account != address(0));\n33-expression_statement-7-7", type_label=expression_statement];
42 [label="7_ require(!has(role, account));\n42-expression_statement-8-8", type_label=expression_statement];
53 [label="8_ role.bearer[account] = true;\n53-expression_statement-9-9", type_label=expression_statement];
62 [label="10_ remove\n62-function_definition-11-15", type_label=function_definition];
75 [label="11_ require(account != address(0));\n75-expression_statement-12-12", type_label=expression_statement];
84 [label="12_ require(has(role, account));\n84-expression_statement-13-13", type_label=expression_statement];
94 [label="13_ role.bearer[account] = false;\n94-expression_statement-14-14", type_label=expression_statement];
103 [label="15_ has\n103-function_definition-16-23", type_label=function_definition];
121 [label="20_ require(account != address(0));\n121-expression_statement-21-21", type_label=expression_statement];
130 [label="21_ return role.bearer[account];\n130-return-22-22", type_label=return];
158 [label="28_ Roles.Role private minters;\n158-new_variable-29-29", type_label=new_variable];
167 [label="30_ _addMinter(msg.sender);\n167-expression_statement-31-31", type_label=expression_statement];
174 [label="32_ modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n174-expression_statement-33-36", type_label=expression_statement];
177 [label="33_ require(isMinter(msg.sender));\n177-expression_statement-34-34", type_label=expression_statement];
187 [label="34_ _;\n187-expression_statement-35-35", type_label=expression_statement];
189 [label="36_ isMinter\n189-function_definition-37-39", type_label=function_definition];
202 [label="37_ return minters.has(account);\n202-return-38-38", type_label=return];
209 [label="39_ addMinter\n209-function_definition-40-42", type_label=function_definition];
216 [label="39_ onlyMinter\n216-expression_statement-40-40", type_label=expression_statement];
219 [label="40_ _addMinter(account);\n219-expression_statement-41-41", type_label=expression_statement];
224 [label="42_ renounceMinter\n224-function_definition-43-45", type_label=function_definition];
228 [label="43_ _removeMinter(msg.sender);\n228-expression_statement-44-44", type_label=expression_statement];
235 [label="45_ _addMinter\n235-function_definition-46-49", type_label=function_definition];
243 [label="46_ minters.add(account);\n243-expression_statement-47-47", type_label=expression_statement];
254 [label="49_ _removeMinter\n254-function_definition-50-53", type_label=function_definition];
262 [label="50_ minters.remove(account);\n262-expression_statement-51-51", type_label=expression_statement];
276 [label="55_ mul\n276-function_definition-56-63", type_label=function_definition];
293 [label="56_ if_a == 0\n293-if-57-59", type_label=if];
298 [label="57_ return 0;\n298-return-58-58", type_label=return];
300 [label="59_ uint256 c = a * b;\n300-new_variable-60-60", type_label=new_variable];
301 [label="59_ uint256 c\n301-new_variable-60-60", type_label=new_variable];
308 [label="60_ require(c / a == b);\n308-expression_statement-61-61", type_label=expression_statement];
317 [label="61_ return c;\n317-return-62-62", type_label=return];
319 [label="63_ div\n319-function_definition-64-68", type_label=function_definition];
336 [label="64_ require(b > 0);\n336-expression_statement-65-65", type_label=expression_statement];
343 [label="65_ uint256 c = a / b;\n343-new_variable-66-66", type_label=new_variable];
344 [label="65_ uint256 c\n344-new_variable-66-66", type_label=new_variable];
351 [label="66_ return c;\n351-return-67-67", type_label=return];
353 [label="68_ sub\n353-function_definition-69-73", type_label=function_definition];
370 [label="69_ require(b <= a);\n370-expression_statement-70-70", type_label=expression_statement];
377 [label="70_ uint256 c = a - b;\n377-new_variable-71-71", type_label=new_variable];
378 [label="70_ uint256 c\n378-new_variable-71-71", type_label=new_variable];
385 [label="71_ return c;\n385-return-72-72", type_label=return];
387 [label="73_ add\n387-function_definition-74-78", type_label=function_definition];
404 [label="74_ uint256 c = a + b;\n404-new_variable-75-75", type_label=new_variable];
405 [label="74_ uint256 c\n405-new_variable-75-75", type_label=new_variable];
412 [label="75_ require(c >= a);\n412-expression_statement-76-76", type_label=expression_statement];
419 [label="76_ return c;\n419-return-77-77", type_label=return];
421 [label="78_ mod\n421-function_definition-79-82", type_label=function_definition];
438 [label="79_ require(b != 0);\n438-expression_statement-80-80", type_label=expression_statement];
445 [label="80_ return a % b;\n445-return-81-81", type_label=return];
452 [label="84_ totalSupply\n452-function_definition-85-85", type_label=function_definition];
460 [label="85_ balanceOf\n460-function_definition-86-86", type_label=function_definition];
472 [label="86_ allowance\n472-function_definition-87-88", type_label=function_definition];
488 [label="88_ transfer\n488-function_definition-89-89", type_label=function_definition];
503 [label="89_ approve\n503-function_definition-90-91", type_label=function_definition];
518 [label="91_ transferFrom\n518-function_definition-92-93", type_label=function_definition];
576 [label="106_ mapping (address => uint256) private _balances;\n576-new_variable-107-107", type_label=new_variable];
583 [label="107_ mapping (address => mapping (address => uint256)) private _allowed;\n583-new_variable-108-108", type_label=new_variable];
592 [label="108_ uint256 private _totalSupply;\n592-new_variable-109-109", type_label=new_variable];
597 [label="109_ totalSupply\n597-function_definition-110-112", type_label=function_definition];
606 [label="110_ return _totalSupply;\n606-return-111-111", type_label=return];
608 [label="112_ balanceOf\n608-function_definition-113-115", type_label=function_definition];
621 [label="113_ return _balances[owner];\n621-return-114-114", type_label=return];
625 [label="115_ allowance\n625-function_definition-116-125", type_label=function_definition];
642 [label="123_ return _allowed[owner][spender];\n642-return-124-124", type_label=return];
648 [label="125_ transfer\n648-function_definition-126-129", type_label=function_definition];
664 [label="126_ _transfer(msg.sender, to, value);\n664-expression_statement-127-127", type_label=expression_statement];
675 [label="127_ return true;\n675-return-128-128", type_label=return];
678 [label="129_ approve\n678-function_definition-130-135", type_label=function_definition];
694 [label="130_ require(spender != address(0));\n694-expression_statement-131-131", type_label=expression_statement];
703 [label="131_ _allowed[msg.sender][spender] = value;\n703-expression_statement-132-132", type_label=expression_statement];
723 [label="133_ return true;\n723-return-134-134", type_label=return];
726 [label="135_ transferFrom\n726-function_definition-136-148", type_label=function_definition];
746 [label="143_ require(value <= _allowed[from][msg.sender]);\n746-expression_statement-144-144", type_label=expression_statement];
759 [label="144_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n759-expression_statement-145-145", type_label=expression_statement];
780 [label="145_ _transfer(from, to, value);\n780-expression_statement-146-146", type_label=expression_statement];
789 [label="146_ return true;\n789-return-147-147", type_label=return];
792 [label="148_ increaseAllowance\n792-function_definition-149-161", type_label=function_definition];
808 [label="155_ require(spender != address(0));\n808-expression_statement-156-156", type_label=expression_statement];
817 [label="156_ _allowed[msg.sender][spender] = (\n        _allowed[msg.sender][spender].add(addedValue));\n817-expression_statement-157-158", type_label=expression_statement];
855 [label="159_ return true;\n855-return-160-160", type_label=return];
858 [label="161_ decreaseAllowance\n858-function_definition-162-174", type_label=function_definition];
874 [label="168_ require(spender != address(0));\n874-expression_statement-169-169", type_label=expression_statement];
883 [label="169_ _allowed[msg.sender][spender] = (\n        _allowed[msg.sender][spender].sub(subtractedValue));\n883-expression_statement-170-171", type_label=expression_statement];
921 [label="172_ return true;\n921-return-173-173", type_label=return];
924 [label="174_ _transfer\n924-function_definition-175-181", type_label=function_definition];
940 [label="175_ require(value <= _balances[from]);\n940-expression_statement-176-176", type_label=expression_statement];
949 [label="176_ require(to != address(0));\n949-expression_statement-177-177", type_label=expression_statement];
958 [label="177_ _balances[from] = _balances[from].sub(value);\n958-expression_statement-178-178", type_label=expression_statement];
971 [label="178_ _balances[to] = _balances[to].add(value);\n971-expression_statement-179-179", type_label=expression_statement];
992 [label="181_ _mint\n992-function_definition-182-187", type_label=function_definition];
1004 [label="182_ require(account != 0);\n1004-expression_statement-183-183", type_label=expression_statement];
1011 [label="183_ _totalSupply = _totalSupply.add(value);\n1011-expression_statement-184-184", type_label=expression_statement];
1020 [label="184_ _balances[account] = _balances[account].add(value);\n1020-expression_statement-185-185", type_label=expression_statement];
1043 [label="187_ _burn\n1043-function_definition-188-194", type_label=function_definition];
1055 [label="188_ require(account != 0);\n1055-expression_statement-189-189", type_label=expression_statement];
1062 [label="189_ require(value <= _balances[account]);\n1062-expression_statement-190-190", type_label=expression_statement];
1071 [label="190_ _totalSupply = _totalSupply.sub(value);\n1071-expression_statement-191-191", type_label=expression_statement];
1080 [label="191_ _balances[account] = _balances[account].sub(value);\n1080-expression_statement-192-192", type_label=expression_statement];
1103 [label="194_ _burnFrom\n1103-function_definition-195-200", type_label=function_definition];
1115 [label="195_ require(value <= _allowed[account][msg.sender]);\n1115-expression_statement-196-196", type_label=expression_statement];
1128 [label="196_ _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n            value);\n1128-expression_statement-197-198", type_label=expression_statement];
1149 [label="198_ _burn(account, value);\n1149-expression_statement-199-199", type_label=expression_statement];
1162 [label="202_ burn\n1162-function_definition-203-205", type_label=function_definition];
1170 [label="203_ _burn(msg.sender, value);\n1170-expression_statement-204-204", type_label=expression_statement];
1179 [label="205_ burnFrom\n1179-function_definition-206-208", type_label=function_definition];
1191 [label="206_ _burnFrom(from, value);\n1191-expression_statement-207-207", type_label=expression_statement];
1207 [label="210_ mint\n1207-function_definition-211-221", type_label=function_definition];
1218 [label="215_ onlyMinter\n1218-expression_statement-216-216", type_label=expression_statement];
1225 [label="218_ _mint(to, value);\n1225-expression_statement-219-219", type_label=expression_statement];
1232 [label="219_ return true;\n1232-return-220-220", type_label=return];
1241 [label="223_ string public constant name = \"Azul\";\n1241-new_variable-224-224", type_label=new_variable];
1248 [label="224_ string public constant symbol = \"AZU\";\n1248-new_variable-225-225", type_label=new_variable];
1255 [label="225_ uint8 public constant decimals = 18;\n1255-new_variable-226-226", type_label=new_variable];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
20 -> 33  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
33 -> 42  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
42 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 84  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
84 -> 94  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
103 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
177 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
202 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
209 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
224 -> 228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
235 -> 243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
254 -> 262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
276 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
293 -> 298  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
293 -> 300  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
298 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
300 -> 308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
308 -> 317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
317 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
319 -> 336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
336 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
351 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
353 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
370 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
387 -> 404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
404 -> 412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
412 -> 419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
421 -> 438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
438 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
576 -> 583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
583 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
608 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
625 -> 642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
642 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
648 -> 664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
675 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
678 -> 694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
694 -> 703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
723 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
726 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
759 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
789 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
792 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 817  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
858 -> 874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
874 -> 883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
921 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
924 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
958 -> 971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 1004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 1011  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1011 -> 1020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1043 -> 1055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1055 -> 1062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1062 -> 1071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1071 -> 1080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1103 -> 1115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1115 -> 1128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1128 -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1162 -> 1170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1179 -> 1191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1207 -> 1225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1225 -> 1232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1232 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1241 -> 1248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1248 -> 1255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
