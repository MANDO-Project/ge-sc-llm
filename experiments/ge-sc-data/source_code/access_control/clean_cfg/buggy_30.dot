digraph  {
13 [label="2_ name\n13-function_definition-3-3", type_label=function_definition];
21 [label="3_ symbol\n21-function_definition-4-4", type_label=function_definition];
29 [label="4_ granularity\n29-function_definition-5-5", type_label=function_definition];
37 [label="5_ totalSupply\n37-function_definition-6-6", type_label=function_definition];
45 [label="6_ balanceOf\n45-function_definition-7-7", type_label=function_definition];
57 [label="7_ send\n57-function_definition-8-8", type_label=function_definition];
72 [label="8_ burn\n72-function_definition-9-9", type_label=function_definition];
83 [label="9_ isOperatorFor\n83-function_definition-10-10", type_label=function_definition];
99 [label="10_ authorizeOperator\n99-function_definition-11-11", type_label=function_definition];
106 [label="11_ revokeOperator\n106-function_definition-12-12", type_label=function_definition];
113 [label="12_ defaultOperators\n113-function_definition-13-13", type_label=function_definition];
122 [label="13_ operatorSend\n122-function_definition-14-20", type_label=function_definition];
145 [label="20_ operatorBurn\n145-function_definition-21-26", type_label=function_definition];
257 [label="40_ tokensReceived\n257-function_definition-41-48", type_label=function_definition];
287 [label="50_ tokensToSend\n287-function_definition-51-58", type_label=function_definition];
317 [label="60_ totalSupply\n317-function_definition-61-61", type_label=function_definition];
325 [label="61_ balanceOf\n325-function_definition-62-62", type_label=function_definition];
337 [label="62_ transfer\n337-function_definition-63-63", type_label=function_definition];
352 [label="63_ allowance\n352-function_definition-64-64", type_label=function_definition];
368 [label="64_ approve\n368-function_definition-65-65", type_label=function_definition];
383 [label="65_ transferFrom\n383-function_definition-66-66", type_label=function_definition];
433 [label="70_ add\n433-function_definition-71-75", type_label=function_definition];
450 [label="71_ uint256 c = a + b;\n450-new_variable-72-72", type_label=new_variable];
451 [label="71_ uint256 c\n451-new_variable-72-72", type_label=new_variable];
458 [label="72_ require(c >= a, \"SafeMath: addition overflow\");\n458-expression_statement-73-73", type_label=expression_statement];
468 [label="73_ return c;\n468-return-74-74", type_label=return];
470 [label="75_ sub\n470-function_definition-76-80", type_label=function_definition];
487 [label="76_ require(b <= a, \"SafeMath: subtraction overflow\");\n487-expression_statement-77-77", type_label=expression_statement];
497 [label="77_ uint256 c = a - b;\n497-new_variable-78-78", type_label=new_variable];
498 [label="77_ uint256 c\n498-new_variable-78-78", type_label=new_variable];
505 [label="78_ return c;\n505-return-79-79", type_label=return];
507 [label="80_ mul\n507-function_definition-81-88", type_label=function_definition];
524 [label="81_ if_a == 0\n524-if-82-84", type_label=if];
4519 [label="81_ end_if", type_label=end_if];
529 [label="82_ return 0;\n529-return-83-83", type_label=return];
531 [label="84_ uint256 c = a * b;\n531-new_variable-85-85", type_label=new_variable];
532 [label="84_ uint256 c\n532-new_variable-85-85", type_label=new_variable];
539 [label="85_ require(c / a == b, \"SafeMath: multiplication overflow\");\n539-expression_statement-86-86", type_label=expression_statement];
551 [label="86_ return c;\n551-return-87-87", type_label=return];
553 [label="88_ div\n553-function_definition-89-93", type_label=function_definition];
570 [label="89_ require(b > 0, \"SafeMath: division by zero\");\n570-expression_statement-90-90", type_label=expression_statement];
580 [label="90_ uint256 c = a / b;\n580-new_variable-91-91", type_label=new_variable];
581 [label="90_ uint256 c\n581-new_variable-91-91", type_label=new_variable];
588 [label="91_ return c;\n588-return-92-92", type_label=return];
590 [label="93_ mod\n590-function_definition-94-97", type_label=function_definition];
607 [label="94_ require(b != 0, \"SafeMath: modulo by zero\");\n607-expression_statement-95-95", type_label=expression_statement];
617 [label="95_ return a % b;\n617-return-96-96", type_label=return];
624 [label="99_ isContract\n624-function_definition-100-104", type_label=function_definition];
637 [label="100_ uint256 size;\n637-new_variable-101-101", type_label=new_variable];
638 [label="100_ uint256 size\n638-new_variable-101-101", type_label=new_variable];
652 [label="102_ return size > 0;\n652-return-103-103", type_label=return];
659 [label="106_ setManager\n659-function_definition-107-107", type_label=function_definition];
670 [label="107_ getManager\n670-function_definition-108-108", type_label=function_definition];
682 [label="108_ setInterfaceImplementer\n682-function_definition-109-109", type_label=function_definition];
697 [label="109_ getInterfaceImplementer\n697-function_definition-110-110", type_label=function_definition];
713 [label="110_ interfaceHash\n713-function_definition-111-111", type_label=function_definition];
725 [label="111_ updateERC165Cache\n725-function_definition-112-112", type_label=function_definition];
736 [label="112_ implementsERC165Interface\n736-function_definition-113-113", type_label=function_definition];
752 [label="113_ implementsERC165InterfaceNoCache\n752-function_definition-114-114", type_label=function_definition];
811 [label="120_ IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n811-new_variable-121-121", type_label=new_variable];
821 [label="121_ mapping(address => uint256) private _balances;\n821-new_variable-122-122", type_label=new_variable];
828 [label="122_ uint256 private _totalSupply;\n828-new_variable-123-123", type_label=new_variable];
833 [label="123_ string private _name;\n833-new_variable-124-124", type_label=new_variable];
838 [label="124_ string private _symbol;\n838-new_variable-125-125", type_label=new_variable];
843 [label="125_ bytes32 constant private TOKENS_SENDER_INTERFACE_HASH =\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n843-new_variable-126-127", type_label=new_variable];
849 [label="127_ bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH =\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n849-new_variable-128-129", type_label=new_variable];
855 [label="129_ address[] private _defaultOperatorsArray;\n855-new_variable-130-130", type_label=new_variable];
861 [label="130_ mapping(address => bool) private _defaultOperators;\n861-new_variable-131-131", type_label=new_variable];
868 [label="131_ mapping(address => mapping(address => bool)) private _operators;\n868-new_variable-132-132", type_label=new_variable];
877 [label="132_ mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\n877-new_variable-133-133", type_label=new_variable];
886 [label="133_ mapping (address => mapping (address => uint256)) private _allowances;\n886-new_variable-134-134", type_label=new_variable];
910 [label="139_ _name = name;\n910-expression_statement-140-140", type_label=expression_statement];
914 [label="140_ _symbol = symbol;\n914-expression_statement-141-141", type_label=expression_statement];
918 [label="141_ _defaultOperatorsArray = defaultOperators;\n918-expression_statement-142-142", type_label=expression_statement];
922 [label="142_ for(i < _defaultOperatorsArray.length;;i++)\n922-for-143-145", type_label=for];
4917 [label="142_ end_for", type_label=end_for];
924 [label="142_ uint256 i\n924-new_variable-143-143", type_label=new_variable];
935 [label="142_ i++\n935-expression_statement-143-143", type_label=expression_statement];
938 [label="143_ _defaultOperators[_defaultOperatorsArray[i]] = true;\n938-expression_statement-144-144", type_label=expression_statement];
947 [label="145_ _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\n947-expression_statement-146-146", type_label=expression_statement];
966 [label="146_ _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\n966-expression_statement-147-147", type_label=expression_statement];
985 [label="148_ name\n985-function_definition-149-151", type_label=function_definition];
994 [label="149_ return _name;\n994-return-150-150", type_label=return];
996 [label="151_ symbol\n996-function_definition-152-154", type_label=function_definition];
1005 [label="152_ return _symbol;\n1005-return-153-153", type_label=return];
1007 [label="154_ decimals\n1007-function_definition-155-157", type_label=function_definition];
1016 [label="155_ return 18;\n1016-return-156-156", type_label=return];
1018 [label="157_ granularity\n1018-function_definition-158-160", type_label=function_definition];
1027 [label="158_ return 1;\n1027-return-159-159", type_label=return];
1029 [label="160_ totalSupply\n1029-function_definition-161-163", type_label=function_definition];
1038 [label="161_ return _totalSupply;\n1038-return-162-162", type_label=return];
1040 [label="163_ balanceOf\n1040-function_definition-164-166", type_label=function_definition];
1053 [label="164_ return _balances[tokenHolder];\n1053-return-165-165", type_label=return];
1057 [label="166_ send\n1057-function_definition-167-169", type_label=function_definition];
1073 [label="167_ _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n1073-expression_statement-168-168", type_label=expression_statement];
1096 [label="169_ transfer\n1096-function_definition-170-177", type_label=function_definition];
1112 [label="170_ require(recipient != address(0), \"ERC777: transfer to the zero address\");\n1112-expression_statement-171-171", type_label=expression_statement];
1124 [label="171_ address from = msg.sender;\n1124-new_variable-172-172", type_label=new_variable];
1125 [label="171_ address from\n1125-new_variable-172-172", type_label=new_variable];
1132 [label="172_ _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n1132-expression_statement-173-173", type_label=expression_statement];
1149 [label="173_ _move(from, from, recipient, amount, \"\", \"\");\n1149-expression_statement-174-174", type_label=expression_statement];
1166 [label="174_ _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n1166-expression_statement-175-175", type_label=expression_statement];
1186 [label="175_ return true;\n1186-return-176-176", type_label=return];
1189 [label="177_ burn\n1189-function_definition-178-180", type_label=function_definition];
1201 [label="178_ _burn(msg.sender, msg.sender, amount, data, \"\");\n1201-expression_statement-179-179", type_label=expression_statement];
1219 [label="180_ isOperatorFor\n1219-function_definition-181-188", type_label=function_definition];
1236 [label="184_ return operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n1236-return-185-187", type_label=return];
1258 [label="188_ withdrawAll_txorigin18\n1258-function_definition-189-192", type_label=function_definition];
1270 [label="189_ require(tx.origin == owner_txorigin18);\n1270-expression_statement-190-190", type_label=expression_statement];
1279 [label="190_ _recipient.transfer(address(this).balance);\n1279-expression_statement-191-191", type_label=expression_statement];
1290 [label="192_ authorizeOperator\n1290-function_definition-193-201", type_label=function_definition];
1298 [label="193_ require(msg.sender != operator, \"ERC777: authorizing self as operator\");\n1298-expression_statement-194-194", type_label=expression_statement];
1310 [label="194_ if\n1310-if-195-199", type_label=if];
5305 [label="194_ end_if", type_label=end_if];
1315 [label="195_ delete _revokedDefaultOperators[msg.sender][operator];\n1315-expression_statement-196-196", type_label=expression_statement];
1325 [label="197_ _operators[msg.sender][operator] = true;\n1325-expression_statement-198-198", type_label=expression_statement];
1344 [label="201_ sendto_txorigin29\n1344-function_definition-202-205", type_label=function_definition];
1360 [label="202_ require (tx.origin == owner_txorigin29);\n1360-expression_statement-203-203", type_label=expression_statement];
1369 [label="203_ receiver.transfer(amount);\n1369-expression_statement-204-204", type_label=expression_statement];
1376 [label="205_ revokeOperator\n1376-function_definition-206-214", type_label=function_definition];
1384 [label="206_ require(operator != msg.sender, \"ERC777: revoking self as operator\");\n1384-expression_statement-207-207", type_label=expression_statement];
1396 [label="207_ if\n1396-if-208-212", type_label=if];
5391 [label="207_ end_if", type_label=end_if];
1401 [label="208_ _revokedDefaultOperators[msg.sender][operator] = true;\n1401-expression_statement-209-209", type_label=expression_statement];
1413 [label="210_ delete _operators[msg.sender][operator];\n1413-expression_statement-211-211", type_label=expression_statement];
1430 [label="214_ withdrawAll_txorigin6\n1430-function_definition-215-218", type_label=function_definition];
1442 [label="215_ require(tx.origin == owner_txorigin6);\n1442-expression_statement-216-216", type_label=expression_statement];
1451 [label="216_ _recipient.transfer(address(this).balance);\n1451-expression_statement-217-217", type_label=expression_statement];
1462 [label="218_ defaultOperators\n1462-function_definition-219-221", type_label=function_definition];
1472 [label="219_ return _defaultOperatorsArray;\n1472-return-220-220", type_label=return];
1474 [label="221_ bug_txorigin16\n1474-function_definition-222-224", type_label=function_definition];
1482 [label="222_ require(tx.origin == owner_txorigin16);\n1482-expression_statement-223-223", type_label=expression_statement];
1491 [label="224_ operatorSend\n1491-function_definition-225-236", type_label=function_definition];
1515 [label="233_ require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\n1515-expression_statement-234-234", type_label=expression_statement];
1530 [label="234_ _send(msg.sender, sender, recipient, amount, data, operatorData, true);\n1530-expression_statement-235-235", type_label=expression_statement];
1550 [label="236_ bug_txorigin24\n1550-function_definition-237-239", type_label=function_definition];
1558 [label="237_ require(tx.origin == owner_txorigin24);\n1558-expression_statement-238-238", type_label=expression_statement];
1567 [label="239_ operatorBurn\n1567-function_definition-240-243", type_label=function_definition];
1587 [label="240_ require(isOperatorFor(msg.sender, account), \"ERC777: caller is not an operator for holder\");\n1587-expression_statement-241-241", type_label=expression_statement];
1602 [label="241_ _burn(msg.sender, account, amount, data, operatorData);\n1602-expression_statement-242-242", type_label=expression_statement];
1617 [label="243_ sendto_txorigin5\n1617-function_definition-244-247", type_label=function_definition];
1633 [label="244_ require (tx.origin == owner_txorigin5);\n1633-expression_statement-245-245", type_label=expression_statement];
1642 [label="245_ receiver.transfer(amount);\n1642-expression_statement-246-246", type_label=expression_statement];
1649 [label="247_ allowance\n1649-function_definition-248-250", type_label=function_definition];
1666 [label="248_ return _allowances[holder][spender];\n1666-return-249-249", type_label=return];
1672 [label="250_ transferTo_txorigin15\n1672-function_definition-251-254", type_label=function_definition];
1688 [label="251_ require(tx.origin == owner_txorigin15);\n1688-expression_statement-252-252", type_label=expression_statement];
1697 [label="252_ to.call.value(amount);\n1697-expression_statement-253-253", type_label=expression_statement];
1706 [label="254_ approve\n1706-function_definition-255-259", type_label=function_definition];
1722 [label="255_ address holder = msg.sender;\n1722-new_variable-256-256", type_label=new_variable];
1723 [label="255_ address holder\n1723-new_variable-256-256", type_label=new_variable];
1730 [label="256_ _approve(holder, spender, value);\n1730-expression_statement-257-257", type_label=expression_statement];
1739 [label="257_ return true;\n1739-return-258-258", type_label=return];
1742 [label="259_ bug_txorigin28\n1742-function_definition-260-262", type_label=function_definition];
1750 [label="260_ require(tx.origin == owner_txorigin28);\n1750-expression_statement-261-261", type_label=expression_statement];
1759 [label="262_ transferFrom\n1759-function_definition-263-272", type_label=function_definition];
1779 [label="263_ require(recipient != address(0), \"ERC777: transfer to the zero address\");\n1779-expression_statement-264-264", type_label=expression_statement];
1791 [label="264_ require(holder != address(0), \"ERC777: transfer from the zero address\");\n1791-expression_statement-265-265", type_label=expression_statement];
1803 [label="265_ address spender = msg.sender;\n1803-new_variable-266-266", type_label=new_variable];
1804 [label="265_ address spender\n1804-new_variable-266-266", type_label=new_variable];
1811 [label="266_ _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n1811-expression_statement-267-267", type_label=expression_statement];
1828 [label="267_ _move(spender, holder, recipient, amount, \"\", \"\");\n1828-expression_statement-268-268", type_label=expression_statement];
1845 [label="268_ _approve(holder, spender, _allowances[holder][spender].sub(amount));\n1845-expression_statement-269-269", type_label=expression_statement];
1863 [label="269_ _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n1863-expression_statement-270-270", type_label=expression_statement];
1883 [label="270_ return true;\n1883-return-271-271", type_label=return];
1886 [label="272_ withdrawAll_txorigin34\n1886-function_definition-273-276", type_label=function_definition];
1898 [label="273_ require(tx.origin == owner_txorigin34);\n1898-expression_statement-274-274", type_label=expression_statement];
1907 [label="274_ _recipient.transfer(address(this).balance);\n1907-expression_statement-275-275", type_label=expression_statement];
1918 [label="276_ _mint\n1918-function_definition-277-292", type_label=function_definition];
1942 [label="285_ require(account != address(0), \"ERC777: mint to the zero address\");\n1942-expression_statement-286-286", type_label=expression_statement];
1954 [label="286_ _totalSupply = _totalSupply.add(amount);\n1954-expression_statement-287-287", type_label=expression_statement];
1963 [label="287_ _balances[account] = _balances[account].add(amount);\n1963-expression_statement-288-288", type_label=expression_statement];
1976 [label="288_ _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n1976-expression_statement-289-289", type_label=expression_statement];
2018 [label="292_ sendto_txorigin21\n2018-function_definition-293-296", type_label=function_definition];
2034 [label="293_ require (tx.origin == owner_txorigin21);\n2034-expression_statement-294-294", type_label=expression_statement];
2043 [label="294_ receiver.transfer(amount);\n2043-expression_statement-295-295", type_label=expression_statement];
2050 [label="296_ _send\n2050-function_definition-297-313", type_label=function_definition];
2082 [label="307_ require(from != address(0), \"ERC777: send from the zero address\");\n2082-expression_statement-308-308", type_label=expression_statement];
2094 [label="308_ require(to != address(0), \"ERC777: send to the zero address\");\n2094-expression_statement-309-309", type_label=expression_statement];
2106 [label="309_ _callTokensToSend(operator, from, to, amount, userData, operatorData);\n2106-expression_statement-310-310", type_label=expression_statement];
2121 [label="310_ _move(operator, from, to, amount, userData, operatorData);\n2121-expression_statement-311-311", type_label=expression_statement];
2136 [label="311_ _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n2136-expression_statement-312-312", type_label=expression_statement];
2153 [label="313_ withdrawAll_txorigin10\n2153-function_definition-314-317", type_label=function_definition];
2165 [label="314_ require(tx.origin == owner_txorigin10);\n2165-expression_statement-315-315", type_label=expression_statement];
2174 [label="315_ _recipient.transfer(address(this).balance);\n2174-expression_statement-316-316", type_label=expression_statement];
2185 [label="317_ _burn\n2185-function_definition-318-333", type_label=function_definition];
2209 [label="326_ require(from != address(0), \"ERC777: burn from the zero address\");\n2209-expression_statement-327-327", type_label=expression_statement];
2221 [label="327_ _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n2221-expression_statement-328-328", type_label=expression_statement];
2238 [label="328_ _totalSupply = _totalSupply.sub(amount);\n2238-expression_statement-329-329", type_label=expression_statement];
2247 [label="329_ _balances[from] = _balances[from].sub(amount);\n2247-expression_statement-330-330", type_label=expression_statement];
2282 [label="333_ withdrawAll_txorigin22\n2282-function_definition-334-337", type_label=function_definition];
2294 [label="334_ require(tx.origin == owner_txorigin22);\n2294-expression_statement-335-335", type_label=expression_statement];
2303 [label="335_ _recipient.transfer(address(this).balance);\n2303-expression_statement-336-336", type_label=expression_statement];
2314 [label="337_ _move\n2314-function_definition-338-352", type_label=function_definition];
2342 [label="347_ _balances[from] = _balances[from].sub(amount);\n2342-expression_statement-348-348", type_label=expression_statement];
2355 [label="348_ _balances[to] = _balances[to].add(amount);\n2355-expression_statement-349-349", type_label=expression_statement];
2390 [label="352_ bug_txorigin12\n2390-function_definition-353-355", type_label=function_definition];
2398 [label="353_ require(tx.origin == owner_txorigin12);\n2398-expression_statement-354-354", type_label=expression_statement];
2407 [label="355_ _approve\n2407-function_definition-356-360", type_label=function_definition];
2423 [label="356_ require(spender != address(0), \"ERC777: approve to the zero address\");\n2423-expression_statement-357-357", type_label=expression_statement];
2435 [label="357_ _allowances[holder][spender] = value;\n2435-expression_statement-358-358", type_label=expression_statement];
2451 [label="360_ transferTo_txorigin11\n2451-function_definition-361-364", type_label=function_definition];
2467 [label="361_ require(tx.origin == owner_txorigin11);\n2467-expression_statement-362-362", type_label=expression_statement];
2476 [label="362_ to.call.value(amount);\n2476-expression_statement-363-363", type_label=expression_statement];
2485 [label="364_ _callTokensToSend\n2485-function_definition-365-379", type_label=function_definition];
2513 [label="374_ address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\n2513-new_variable-375-375", type_label=new_variable];
2514 [label="374_ address implementer\n2514-new_variable-375-375", type_label=new_variable];
2526 [label="375_ if_implementer != address(0)\n2526-if-376-378", type_label=if];
6521 [label="375_ end_if", type_label=end_if];
2533 [label="376_ IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n2533-expression_statement-377-377", type_label=expression_statement];
2553 [label="379_ sendto_txorigin1\n2553-function_definition-380-383", type_label=function_definition];
2569 [label="380_ require (tx.origin == owner_txorigin1);\n2569-expression_statement-381-381", type_label=expression_statement];
2578 [label="381_ receiver.transfer(amount);\n2578-expression_statement-382-382", type_label=expression_statement];
2585 [label="383_ _callTokensReceived\n2585-function_definition-384-401", type_label=function_definition];
2617 [label="394_ address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\n2617-new_variable-395-395", type_label=new_variable];
2618 [label="394_ address implementer\n2618-new_variable-395-395", type_label=new_variable];
2630 [label="395_ if_implementer != address(0)\n2630-if-396-400", type_label=if];
6625 [label="395_ end_if", type_label=end_if];
2637 [label="396_ IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n2637-expression_statement-397-397", type_label=expression_statement];
2657 [label="397_ if\n2657-if-398-400", type_label=if];
2660 [label="398_ require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n2660-expression_statement-399-399", type_label=expression_statement];
2672 [label="401_ withdrawAll_txorigin2\n2672-function_definition-402-405", type_label=function_definition];
2684 [label="402_ require(tx.origin == owner_txorigin2);\n2684-expression_statement-403-403", type_label=expression_statement];
2693 [label="403_ _recipient.transfer(address(this).balance);\n2693-expression_statement-404-404", type_label=expression_statement];
2707 [label="407_ struct Role {\n        mapping (address => bool) bearer;\n    }\n2707-expression_statement-408-410", type_label=expression_statement];
2715 [label="410_ add\n2715-function_definition-411-414", type_label=function_definition];
2728 [label="411_ require(!has(role, account), \"Roles: account already has role\");\n2728-expression_statement-412-412", type_label=expression_statement];
2742 [label="412_ role.bearer[account] = true;\n2742-expression_statement-413-413", type_label=expression_statement];
2751 [label="414_ remove\n2751-function_definition-415-418", type_label=function_definition];
2764 [label="415_ require(has(role, account), \"Roles: account does not have role\");\n2764-expression_statement-416-416", type_label=expression_statement];
2777 [label="416_ role.bearer[account] = false;\n2777-expression_statement-417-417", type_label=expression_statement];
2786 [label="418_ has\n2786-function_definition-419-422", type_label=function_definition];
2804 [label="419_ require(account != address(0), \"Roles: account is the zero address\");\n2804-expression_statement-420-420", type_label=expression_statement];
2816 [label="420_ return role.bearer[account];\n2816-return-421-421", type_label=return];
2832 [label="425_ transferTo_txorigin35\n2832-function_definition-426-429", type_label=function_definition];
2848 [label="426_ require(tx.origin == owner_txorigin35);\n2848-expression_statement-427-427", type_label=expression_statement];
2857 [label="427_ to.call.value(amount);\n2857-expression_statement-428-428", type_label=expression_statement];
2872 [label="430_ bug_txorigin40\n2872-function_definition-431-433", type_label=function_definition];
2880 [label="431_ require(tx.origin == owner_txorigin40);\n2880-expression_statement-432-432", type_label=expression_statement];
2895 [label="434_ Roles.Role private _minters;\n2895-new_variable-435-435", type_label=new_variable];
2904 [label="436_ _addMinter(msg.sender);\n2904-expression_statement-437-437", type_label=expression_statement];
2911 [label="438_ sendto_txorigin17\n2911-function_definition-439-442", type_label=function_definition];
2927 [label="439_ require (tx.origin == owner_txorigin17);\n2927-expression_statement-440-440", type_label=expression_statement];
2936 [label="440_ receiver.transfer(amount);\n2936-expression_statement-441-441", type_label=expression_statement];
2943 [label="442_ modifier onlyMinter() {\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n        _;\n    }\n2943-expression_statement-443-446", type_label=expression_statement];
2946 [label="443_ require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n2946-expression_statement-444-444", type_label=expression_statement];
2959 [label="444_ _;\n2959-expression_statement-445-445", type_label=expression_statement];
2961 [label="446_ isMinter\n2961-function_definition-447-449", type_label=function_definition];
2974 [label="447_ return _minters.has(account);\n2974-return-448-448", type_label=return];
2981 [label="449_ sendto_txorigin37\n2981-function_definition-450-453", type_label=function_definition];
2997 [label="450_ require (tx.origin == owner_txorigin37);\n2997-expression_statement-451-451", type_label=expression_statement];
3006 [label="451_ receiver.transfer(amount);\n3006-expression_statement-452-452", type_label=expression_statement];
3013 [label="453_ addMinter\n3013-function_definition-454-456", type_label=function_definition];
3020 [label="453_ onlyMinter\n3020-expression_statement-454-454", type_label=expression_statement];
3023 [label="454_ _addMinter(account);\n3023-expression_statement-455-455", type_label=expression_statement];
3028 [label="456_ transferTo_txorigin3\n3028-function_definition-457-460", type_label=function_definition];
3044 [label="457_ require(tx.origin == owner_txorigin3);\n3044-expression_statement-458-458", type_label=expression_statement];
3053 [label="458_ to.call.value(amount);\n3053-expression_statement-459-459", type_label=expression_statement];
3062 [label="460_ renounceMinter\n3062-function_definition-461-463", type_label=function_definition];
3066 [label="461_ _removeMinter(msg.sender);\n3066-expression_statement-462-462", type_label=expression_statement];
3073 [label="463_ sendto_txorigin9\n3073-function_definition-464-467", type_label=function_definition];
3089 [label="464_ require (tx.origin == owner_txorigin9);\n3089-expression_statement-465-465", type_label=expression_statement];
3098 [label="465_ receiver.transfer(amount);\n3098-expression_statement-466-466", type_label=expression_statement];
3105 [label="467_ _addMinter\n3105-function_definition-468-471", type_label=function_definition];
3113 [label="468_ _minters.add(account);\n3113-expression_statement-469-469", type_label=expression_statement];
3124 [label="471_ sendto_txorigin25\n3124-function_definition-472-475", type_label=function_definition];
3140 [label="472_ require (tx.origin == owner_txorigin25);\n3140-expression_statement-473-473", type_label=expression_statement];
3149 [label="473_ receiver.transfer(amount);\n3149-expression_statement-474-474", type_label=expression_statement];
3156 [label="475_ _removeMinter\n3156-function_definition-476-479", type_label=function_definition];
3164 [label="476_ _minters.remove(account);\n3164-expression_statement-477-477", type_label=expression_statement];
3175 [label="479_ transferTo_txorigin19\n3175-function_definition-480-483", type_label=function_definition];
3191 [label="480_ require(tx.origin == owner_txorigin19);\n3191-expression_statement-481-481", type_label=expression_statement];
3200 [label="481_ to.call.value(amount);\n3200-expression_statement-482-482", type_label=expression_statement];
3219 [label="486_ sendto_txorigin33\n3219-function_definition-487-490", type_label=function_definition];
3235 [label="487_ require (tx.origin == owner_txorigin33);\n3235-expression_statement-488-488", type_label=expression_statement];
3244 [label="488_ receiver.transfer(amount);\n3244-expression_statement-489-489", type_label=expression_statement];
3257 [label="491_ transferTo_txorigin27\n3257-function_definition-492-495", type_label=function_definition];
3273 [label="492_ require(tx.origin == owner_txorigin27);\n3273-expression_statement-493-493", type_label=expression_statement];
3282 [label="493_ to.call.value(amount);\n3282-expression_statement-494-494", type_label=expression_statement];
3297 [label="496_ Roles.Role private _pausers;\n3297-new_variable-497-497", type_label=new_variable];
3306 [label="498_ _addPauser(msg.sender);\n3306-expression_statement-499-499", type_label=expression_statement];
3313 [label="500_ withdrawAll_txorigin26\n3313-function_definition-501-504", type_label=function_definition];
3325 [label="501_ require(tx.origin == owner_txorigin26);\n3325-expression_statement-502-502", type_label=expression_statement];
3334 [label="502_ _recipient.transfer(address(this).balance);\n3334-expression_statement-503-503", type_label=expression_statement];
3345 [label="504_ modifier onlyPauser() {\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n3345-expression_statement-505-508", type_label=expression_statement];
3348 [label="505_ require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n3348-expression_statement-506-506", type_label=expression_statement];
3361 [label="506_ _;\n3361-expression_statement-507-507", type_label=expression_statement];
3363 [label="508_ isPauser\n3363-function_definition-509-511", type_label=function_definition];
3376 [label="509_ return _pausers.has(account);\n3376-return-510-510", type_label=return];
3383 [label="511_ bug_txorigin20\n3383-function_definition-512-514", type_label=function_definition];
3391 [label="512_ require(tx.origin == owner_txorigin20);\n3391-expression_statement-513-513", type_label=expression_statement];
3400 [label="514_ addPauser\n3400-function_definition-515-517", type_label=function_definition];
3407 [label="514_ onlyPauser\n3407-expression_statement-515-515", type_label=expression_statement];
3410 [label="515_ _addPauser(account);\n3410-expression_statement-516-516", type_label=expression_statement];
3415 [label="517_ bug_txorigin32\n3415-function_definition-518-520", type_label=function_definition];
3423 [label="518_ require(tx.origin == owner_txorigin32);\n3423-expression_statement-519-519", type_label=expression_statement];
3432 [label="520_ renouncePauser\n3432-function_definition-521-523", type_label=function_definition];
3436 [label="521_ _removePauser(msg.sender);\n3436-expression_statement-522-522", type_label=expression_statement];
3443 [label="523_ withdrawAll_txorigin38\n3443-function_definition-524-527", type_label=function_definition];
3455 [label="524_ require(tx.origin == owner_txorigin38);\n3455-expression_statement-525-525", type_label=expression_statement];
3464 [label="525_ _recipient.transfer(address(this).balance);\n3464-expression_statement-526-526", type_label=expression_statement];
3475 [label="527_ _addPauser\n3475-function_definition-528-531", type_label=function_definition];
3483 [label="528_ _pausers.add(account);\n3483-expression_statement-529-529", type_label=expression_statement];
3494 [label="531_ bug_txorigin4\n3494-function_definition-532-534", type_label=function_definition];
3502 [label="532_ require(tx.origin == owner_txorigin4);\n3502-expression_statement-533-533", type_label=expression_statement];
3511 [label="534_ _removePauser\n3511-function_definition-535-538", type_label=function_definition];
3519 [label="535_ _pausers.remove(account);\n3519-expression_statement-536-536", type_label=expression_statement];
3530 [label="538_ transferTo_txorigin7\n3530-function_definition-539-542", type_label=function_definition];
3546 [label="539_ require(tx.origin == owner_txorigin7);\n3546-expression_statement-540-540", type_label=expression_statement];
3555 [label="540_ to.call.value(amount);\n3555-expression_statement-541-541", type_label=expression_statement];
3570 [label="544_ transferTo_txorigin31\n3570-function_definition-545-548", type_label=function_definition];
3586 [label="545_ require(tx.origin == owner_txorigin31);\n3586-expression_statement-546-546", type_label=expression_statement];
3595 [label="546_ to.call.value(amount);\n3595-expression_statement-547-547", type_label=expression_statement];
3610 [label="549_ sendto_txorigin13\n3610-function_definition-550-553", type_label=function_definition];
3626 [label="550_ require (tx.origin == owner_txorigin13);\n3626-expression_statement-551-551", type_label=expression_statement];
3635 [label="551_ receiver.transfer(amount);\n3635-expression_statement-552-552", type_label=expression_statement];
3648 [label="554_ bool private _paused;\n3648-new_variable-555-555", type_label=new_variable];
3655 [label="556_ _paused = false;\n3655-expression_statement-557-557", type_label=expression_statement];
3660 [label="558_ transferTo_txorigin23\n3660-function_definition-559-562", type_label=function_definition];
3676 [label="559_ require(tx.origin == owner_txorigin23);\n3676-expression_statement-560-560", type_label=expression_statement];
3685 [label="560_ to.call.value(amount);\n3685-expression_statement-561-561", type_label=expression_statement];
3694 [label="562_ paused\n3694-function_definition-563-565", type_label=function_definition];
3703 [label="563_ return _paused;\n3703-return-564-564", type_label=return];
3705 [label="565_ withdrawAll_txorigin14\n3705-function_definition-566-569", type_label=function_definition];
3717 [label="566_ require(tx.origin == owner_txorigin14);\n3717-expression_statement-567-567", type_label=expression_statement];
3726 [label="567_ _recipient.transfer(address(this).balance);\n3726-expression_statement-568-568", type_label=expression_statement];
3737 [label="569_ modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n3737-expression_statement-570-573", type_label=expression_statement];
3740 [label="570_ require(!_paused, \"Pausable: paused\");\n3740-expression_statement-571-571", type_label=expression_statement];
3749 [label="571_ _;\n3749-expression_statement-572-572", type_label=expression_statement];
3751 [label="573_ modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n3751-expression_statement-574-577", type_label=expression_statement];
3754 [label="574_ require(_paused, \"Pausable: not paused\");\n3754-expression_statement-575-575", type_label=expression_statement];
3762 [label="575_ _;\n3762-expression_statement-576-576", type_label=expression_statement];
3764 [label="577_ pause\n3764-function_definition-578-581", type_label=function_definition];
3767 [label="577_ onlyPauser\n3767-expression_statement-578-578", type_label=expression_statement];
3769 [label="577_ whenNotPaused\n3769-expression_statement-578-578", type_label=expression_statement];
3772 [label="578_ _paused = true;\n3772-expression_statement-579-579", type_label=expression_statement];
3783 [label="581_ withdrawAll_txorigin30\n3783-function_definition-582-585", type_label=function_definition];
3795 [label="582_ require(tx.origin == owner_txorigin30);\n3795-expression_statement-583-583", type_label=expression_statement];
3804 [label="583_ _recipient.transfer(address(this).balance);\n3804-expression_statement-584-584", type_label=expression_statement];
3815 [label="585_ unpause\n3815-function_definition-586-589", type_label=function_definition];
3818 [label="585_ onlyPauser\n3818-expression_statement-586-586", type_label=expression_statement];
3820 [label="585_ whenPaused\n3820-expression_statement-586-586", type_label=expression_statement];
3823 [label="586_ _paused = false;\n3823-expression_statement-587-587", type_label=expression_statement];
3834 [label="589_ bug_txorigin8\n3834-function_definition-590-592", type_label=function_definition];
3842 [label="590_ require(tx.origin == owner_txorigin8);\n3842-expression_statement-591-591", type_label=expression_statement];
3873 [label="598_ ERC777(\"SKYBIT\", \"SKYBIT\", defaultOperators)\n3873-expression_statement-599-599", type_label=expression_statement];
3884 [label="600_ _mint(msg.sender, msg.sender, initialSupply, \"\", \"\");\n3884-expression_statement-601-601", type_label=expression_statement];
3903 [label="602_ transferTo_txorigin39\n3903-function_definition-603-606", type_label=function_definition];
3919 [label="603_ require(tx.origin == owner_txorigin39);\n3919-expression_statement-604-604", type_label=expression_statement];
3928 [label="604_ to.call.value(amount);\n3928-expression_statement-605-605", type_label=expression_statement];
3937 [label="606_ mint\n3937-function_definition-607-610", type_label=function_definition];
3960 [label="606_ onlyMinter\n3960-expression_statement-607-607", type_label=expression_statement];
3967 [label="607_ _mint(operator, account, amount, userData, operatorData);\n3967-expression_statement-608-608", type_label=expression_statement];
3980 [label="608_ return true;\n3980-return-609-609", type_label=return];
3983 [label="610_ bug_txorigin36\n3983-function_definition-611-613", type_label=function_definition];
3991 [label="611_ require(tx.origin == owner_txorigin36);\n3991-expression_statement-612-612", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
"(4519, (81, 8), (83, 9))";
"(4917, (142, 8), (144, 9))";
"(5305, (194, 8), (198, 9))";
1336;
"(5391, (207, 8), (211, 9))";
1422;
"(6521, (375, 8), (377, 9))";
"(6625, (395, 8), (399, 9))";
433 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
470 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
507 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 529  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
524 -> "(4519, (81, 8), (83, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
529 -> "(4519, (81, 8), (83, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
529 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
531 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
553 -> 570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
590 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
624 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
811 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
843 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 938  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
922 -> "(4917, (142, 8), (144, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
935 -> 922  [color=red, controlflow_type=loop_control, edge_type=CFG_edge, key=0, label=loop_control];
938 -> 935  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
947 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
996 -> 1005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1007 -> 1016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1016 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1018 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1029 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1040 -> 1053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1053 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1057 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1096 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 1124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1124 -> 1132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1132 -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1149 -> 1166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1166 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1189 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1219 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1236 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1258 -> 1270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1270 -> 1279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1290 -> 1298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1298 -> 1310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1310 -> 1315  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1310 -> 1325  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1315 -> "(5305, (194, 8), (198, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1325 -> "(5305, (194, 8), (198, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1344 -> 1360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1360 -> 1369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1376 -> 1384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1384 -> 1396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1396 -> 1401  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1396 -> 1413  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1401 -> "(5391, (207, 8), (211, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1413 -> "(5391, (207, 8), (211, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1430 -> 1442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1442 -> 1451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1462 -> 1472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1472 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1474 -> 1482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1491 -> 1515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1515 -> 1530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1550 -> 1558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1567 -> 1587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1587 -> 1602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1617 -> 1633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1633 -> 1642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1649 -> 1666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1666 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1672 -> 1688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1688 -> 1697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1706 -> 1722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1722 -> 1730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1730 -> 1739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1739 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1742 -> 1750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1759 -> 1779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1779 -> 1791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1791 -> 1803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1803 -> 1811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1811 -> 1828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1828 -> 1845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1845 -> 1863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1863 -> 1883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1883 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1886 -> 1898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1898 -> 1907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1918 -> 1942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1942 -> 1954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1954 -> 1963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1963 -> 1976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2018 -> 2034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2034 -> 2043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2050 -> 2082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2082 -> 2094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2094 -> 2106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2106 -> 2121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2121 -> 2136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2153 -> 2165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2165 -> 2174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2185 -> 2209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2209 -> 2221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2221 -> 2238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2238 -> 2247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2282 -> 2294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2294 -> 2303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2314 -> 2342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2342 -> 2355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2390 -> 2398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2407 -> 2423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2423 -> 2435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2451 -> 2467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2467 -> 2476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2485 -> 2513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2513 -> 2526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2526 -> 2533  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2526 -> "(6521, (375, 8), (377, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2533 -> "(6521, (375, 8), (377, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2553 -> 2569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2569 -> 2578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2585 -> 2617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2617 -> 2630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2630 -> 2637  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2630 -> 2657  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2637 -> "(6625, (395, 8), (399, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2657 -> 2660  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2657 -> "(6625, (395, 8), (399, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2660 -> "(6625, (395, 8), (399, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2672 -> 2684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2684 -> 2693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2715 -> 2728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2728 -> 2742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2751 -> 2764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2764 -> 2777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2786 -> 2804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2804 -> 2816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2816 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2832 -> 2848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2848 -> 2857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2872 -> 2880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2911 -> 2927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2927 -> 2936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2946 -> 2959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2961 -> 2974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2974 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2981 -> 2997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2997 -> 3006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3013 -> 3023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3028 -> 3044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3044 -> 3053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3062 -> 3066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3073 -> 3089  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3089 -> 3098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3105 -> 3113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3124 -> 3140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3140 -> 3149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3156 -> 3164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3175 -> 3191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3191 -> 3200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3219 -> 3235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3235 -> 3244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3257 -> 3273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3273 -> 3282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3313 -> 3325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3325 -> 3334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3348 -> 3361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3363 -> 3376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3376 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3383 -> 3391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3400 -> 3410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3415 -> 3423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3432 -> 3436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3443 -> 3455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3455 -> 3464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3475 -> 3483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3494 -> 3502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3511 -> 3519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3530 -> 3546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3546 -> 3555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3570 -> 3586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3586 -> 3595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3610 -> 3626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3626 -> 3635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3660 -> 3676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3676 -> 3685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3694 -> 3703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3703 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3705 -> 3717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3717 -> 3726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3737 -> 3751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3740 -> 3749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3754 -> 3762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3764 -> 3772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3767 -> 3769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3783 -> 3795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3795 -> 3804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3815 -> 3823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3818 -> 3820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3834 -> 3842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3903 -> 3919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3919 -> 3928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3937 -> 3967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3967 -> 3980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3980 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3983 -> 3991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(4519, (81, 8), (83, 9))" -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(4519, (81, 8), (83, 9))" -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
"(4917, (142, 8), (144, 9))" -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(5305, (194, 8), (198, 9))" -> 1336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(5391, (207, 8), (211, 9))" -> 1422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(6521, (375, 8), (377, 9))" -> 2553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(6521, (375, 8), (377, 9))" -> 2553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
"(6625, (395, 8), (399, 9))" -> 2672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(6625, (395, 8), (399, 9))" -> 2672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
}
