digraph  {
12 [label="2_ int256 constant private INT256_MIN = -2**255;\n12-new_variable-3-3", type_label=new_variable];
21 [label="3_ mul\n21-function_definition-4-11", type_label=function_definition];
38 [label="4_ if_a == 0\n38-if-5-7", type_label=if];
43 [label="5_ return 0;\n43-return-6-6", type_label=return];
45 [label="7_ uint256 c = a * b;\n45-new_variable-8-8", type_label=new_variable];
46 [label="7_ uint256 c\n46-new_variable-8-8", type_label=new_variable];
53 [label="8_ require(c / a == b);\n53-expression_statement-9-9", type_label=expression_statement];
62 [label="9_ return c;\n62-return-10-10", type_label=return];
64 [label="11_ mul\n64-function_definition-12-20", type_label=function_definition];
81 [label="12_ if_a == 0\n81-if-13-15", type_label=if];
86 [label="13_ return 0;\n86-return-14-14", type_label=return];
88 [label="15_ require(!(a == -1 && b == INT256_MIN));\n88-expression_statement-16-16", type_label=expression_statement];
102 [label="16_ int256 c = a * b;\n102-new_variable-17-17", type_label=new_variable];
103 [label="16_ int256 c\n103-new_variable-17-17", type_label=new_variable];
110 [label="17_ require(c / a == b);\n110-expression_statement-18-18", type_label=expression_statement];
119 [label="18_ return c;\n119-return-19-19", type_label=return];
121 [label="20_ div\n121-function_definition-21-25", type_label=function_definition];
138 [label="21_ require(b > 0);\n138-expression_statement-22-22", type_label=expression_statement];
145 [label="22_ uint256 c = a / b;\n145-new_variable-23-23", type_label=new_variable];
146 [label="22_ uint256 c\n146-new_variable-23-23", type_label=new_variable];
153 [label="23_ return c;\n153-return-24-24", type_label=return];
155 [label="25_ div\n155-function_definition-26-31", type_label=function_definition];
172 [label="26_ require(b != 0);\n172-expression_statement-27-27", type_label=expression_statement];
179 [label="27_ require(!(b == -1 && a == INT256_MIN));\n179-expression_statement-28-28", type_label=expression_statement];
193 [label="28_ int256 c = a / b;\n193-new_variable-29-29", type_label=new_variable];
194 [label="28_ int256 c\n194-new_variable-29-29", type_label=new_variable];
201 [label="29_ return c;\n201-return-30-30", type_label=return];
203 [label="31_ sub\n203-function_definition-32-36", type_label=function_definition];
220 [label="32_ require(b <= a);\n220-expression_statement-33-33", type_label=expression_statement];
227 [label="33_ uint256 c = a - b;\n227-new_variable-34-34", type_label=new_variable];
228 [label="33_ uint256 c\n228-new_variable-34-34", type_label=new_variable];
235 [label="34_ return c;\n235-return-35-35", type_label=return];
237 [label="36_ sub\n237-function_definition-37-41", type_label=function_definition];
254 [label="37_ int256 c = a - b;\n254-new_variable-38-38", type_label=new_variable];
255 [label="37_ int256 c\n255-new_variable-38-38", type_label=new_variable];
262 [label="38_ require((b >= 0 && c <= a) || (b < 0 && c > a));\n262-expression_statement-39-39", type_label=expression_statement];
283 [label="39_ return c;\n283-return-40-40", type_label=return];
285 [label="41_ add\n285-function_definition-42-46", type_label=function_definition];
302 [label="42_ uint256 c = a + b;\n302-new_variable-43-43", type_label=new_variable];
303 [label="42_ uint256 c\n303-new_variable-43-43", type_label=new_variable];
310 [label="43_ require(c >= a);\n310-expression_statement-44-44", type_label=expression_statement];
317 [label="44_ return c;\n317-return-45-45", type_label=return];
319 [label="46_ add\n319-function_definition-47-51", type_label=function_definition];
336 [label="47_ int256 c = a + b;\n336-new_variable-48-48", type_label=new_variable];
337 [label="47_ int256 c\n337-new_variable-48-48", type_label=new_variable];
344 [label="48_ require((b >= 0 && c >= a) || (b < 0 && c < a));\n344-expression_statement-49-49", type_label=expression_statement];
365 [label="49_ return c;\n365-return-50-50", type_label=return];
367 [label="51_ mod\n367-function_definition-52-55", type_label=function_definition];
384 [label="52_ require(b != 0);\n384-expression_statement-53-53", type_label=expression_statement];
391 [label="53_ return a % b;\n391-return-54-54", type_label=return];
398 [label="57_ balanceOf\n398-function_definition-58-58", type_label=function_definition];
411 [label="58_ transfer\n411-function_definition-59-59", type_label=function_definition];
430 [label="61_ address private _owner;\n430-new_variable-62-62", type_label=new_variable];
447 [label="64_ _owner = msg.sender;\n447-expression_statement-65-65", type_label=expression_statement];
461 [label="67_ owner\n461-function_definition-68-70", type_label=function_definition];
470 [label="68_ return _owner;\n470-return-69-69", type_label=return];
472 [label="70_ modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n472-expression_statement-71-74", type_label=expression_statement];
475 [label="71_ require(isOwner());\n475-expression_statement-72-72", type_label=expression_statement];
481 [label="72_ _;\n481-expression_statement-73-73", type_label=expression_statement];
483 [label="74_ isOwner\n483-function_definition-75-77", type_label=function_definition];
492 [label="75_ return msg.sender == _owner;\n492-return-76-76", type_label=return];
498 [label="77_ renounceOwnership\n498-function_definition-78-81", type_label=function_definition];
501 [label="77_ onlyOwner\n501-expression_statement-78-78", type_label=expression_statement];
512 [label="79_ _owner = address(0);\n512-expression_statement-80-80", type_label=expression_statement];
518 [label="81_ transferOwnership\n518-function_definition-82-84", type_label=function_definition];
525 [label="81_ onlyOwner\n525-expression_statement-82-82", type_label=expression_statement];
528 [label="82_ _transferOwnership(newOwner);\n528-expression_statement-83-83", type_label=expression_statement];
533 [label="84_ _transferOwnership\n533-function_definition-85-89", type_label=function_definition];
541 [label="85_ require(newOwner != address(0));\n541-expression_statement-86-86", type_label=expression_statement];
556 [label="87_ _owner = newOwner;\n556-expression_statement-88-88", type_label=expression_statement];
571 [label="92_ Token public tokenReward;\n571-new_variable-93-93", type_label=new_variable];
577 [label="93_ address private _beneficiary;\n577-new_variable-94-94", type_label=new_variable];
582 [label="94_ uint256 private _cliff;\n582-new_variable-95-95", type_label=new_variable];
587 [label="95_ uint256 private _start;\n587-new_variable-96-96", type_label=new_variable];
592 [label="96_ uint256 private _duration;\n592-new_variable-97-97", type_label=new_variable];
597 [label="97_ address public _addressOfTokenUsedAsReward;\n597-new_variable-98-98", type_label=new_variable];
602 [label="98_ address public creator;\n602-new_variable-99-99", type_label=new_variable];
607 [label="99_ mapping (address => uint256) private _released;\n607-new_variable-100-100", type_label=new_variable];
614 [label="100_ uint256 constant public   VESTING_DURATION    =  31536000;\n614-new_variable-101-101", type_label=new_variable];
620 [label="101_ Vesting\n620-function_definition-102-111", type_label=function_definition];
624 [label="102_ creator = msg.sender;\n624-expression_statement-103-103", type_label=expression_statement];
630 [label="103_ createVestingPeriod(\n            0xA2690D72D6c932AE7Aa1cC0dE48aEaBBDCaf2799,\n            block.timestamp,\n            0,\n            VESTING_DURATION,\n            0x5b53f9755f82439cba66007ec7073c59e0da4a7d\n        );\n630-expression_statement-104-110", type_label=expression_statement];
645 [label="111_ createVestingPeriod\n645-function_definition-112-122", type_label=function_definition];
668 [label="111_ onlyOwner\n668-expression_statement-112-112", type_label=expression_statement];
671 [label="112_ require(cliffDuration <= duration);\n671-expression_statement-113-113", type_label=expression_statement];
678 [label="113_ require(duration > 0);\n678-expression_statement-114-114", type_label=expression_statement];
685 [label="114_ require(start.add(duration) > block.timestamp);\n685-expression_statement-115-115", type_label=expression_statement];
699 [label="115_ _beneficiary = beneficiary;\n699-expression_statement-116-116", type_label=expression_statement];
703 [label="116_ _duration = duration;\n703-expression_statement-117-117", type_label=expression_statement];
707 [label="117_ _cliff = start.add(cliffDuration);\n707-expression_statement-118-118", type_label=expression_statement];
716 [label="118_ _start = start;\n716-expression_statement-119-119", type_label=expression_statement];
720 [label="119_ _addressOfTokenUsedAsReward = addressOfTokenUsedAsReward;\n720-expression_statement-120-120", type_label=expression_statement];
724 [label="120_ tokenReward = Token(addressOfTokenUsedAsReward);\n724-expression_statement-121-121", type_label=expression_statement];
731 [label="122_ beneficiary\n731-function_definition-123-125", type_label=function_definition];
740 [label="123_ return _beneficiary;\n740-return-124-124", type_label=return];
742 [label="125_ cliff\n742-function_definition-126-128", type_label=function_definition];
751 [label="126_ return _cliff;\n751-return-127-127", type_label=return];
753 [label="128_ start\n753-function_definition-129-131", type_label=function_definition];
762 [label="129_ return _start;\n762-return-130-130", type_label=return];
764 [label="131_ duration\n764-function_definition-132-134", type_label=function_definition];
773 [label="132_ return _duration;\n773-return-133-133", type_label=return];
775 [label="134_ released\n775-function_definition-135-137", type_label=function_definition];
788 [label="135_ return _released[token];\n788-return-136-136", type_label=return];
792 [label="137_ release\n792-function_definition-138-143", type_label=function_definition];
799 [label="137_ onlyOwner\n799-expression_statement-138-138", type_label=expression_statement];
802 [label="138_ uint256 unreleased = _releasableAmount(token);\n802-new_variable-139-139", type_label=new_variable];
803 [label="138_ uint256 unreleased\n803-new_variable-139-139", type_label=new_variable];
811 [label="139_ require(unreleased > 0);\n811-expression_statement-140-140", type_label=expression_statement];
818 [label="140_ _released[token] = _released[token].add(unreleased);\n818-expression_statement-141-141", type_label=expression_statement];
831 [label="141_ tokenReward.transfer(_beneficiary, unreleased);\n831-expression_statement-142-142", type_label=expression_statement];
840 [label="143_ _releasableAmount\n840-function_definition-144-146", type_label=function_definition];
853 [label="144_ return _vestedAmount(token).sub(_released[token]);\n853-return-145-145", type_label=return];
865 [label="146_ _vestedAmount\n865-function_definition-147-157", type_label=function_definition];
878 [label="147_ uint256 currentBalance = tokenReward.balanceOf(address(this));\n878-new_variable-148-148", type_label=new_variable];
879 [label="147_ uint256 currentBalance\n879-new_variable-148-148", type_label=new_variable];
891 [label="148_ uint256 totalBalance = currentBalance.add(_released[token]);\n891-new_variable-149-149", type_label=new_variable];
892 [label="148_ uint256 totalBalance\n892-new_variable-149-149", type_label=new_variable];
904 [label="149_ if_block.timestamp < _cliff\n904-if-150-156", type_label=if];
911 [label="150_ return 0;\n911-return-151-151", type_label=return];
913 [label="151_ if\n913-if-152-156", type_label=if];
925 [label="152_ return totalBalance;\n925-return-153-153", type_label=return];
928 [label="154_ return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\n928-return-155-155", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
21 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 43  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
38 -> 45  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
43 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
45 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
64 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 86  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
81 -> 88  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
86 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
88 -> 102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
102 -> 110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
110 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
121 -> 138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
138 -> 145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
145 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
153 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
155 -> 172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
172 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
201 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
203 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
235 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
237 -> 254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
254 -> 262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
283 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
285 -> 302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
302 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
317 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
319 -> 336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
336 -> 344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
344 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
367 -> 384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
461 -> 470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
470 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
475 -> 481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
492 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
498 -> 512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
533 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
571 -> 577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
587 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
620 -> 624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
624 -> 630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
645 -> 671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
671 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
699 -> 703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
716 -> 720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
720 -> 724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 740  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
740 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
742 -> 751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
751 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
753 -> 762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
762 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
764 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
775 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
792 -> 802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
811 -> 818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
818 -> 831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
853 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
865 -> 878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
878 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 911  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
904 -> 913  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
911 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
913 -> 925  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
913 -> 928  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
925 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
928 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
