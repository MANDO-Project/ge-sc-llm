digraph  {
12 [label="2_ max64\n12-function_definition-3-5", type_label=function_definition];
29 [label="3_ return a >= b ? a : b;\n29-return-4-4", type_label=return];
36 [label="5_ min64\n36-function_definition-6-8", type_label=function_definition];
53 [label="6_ return a < b ? a : b;\n53-return-7-7", type_label=return];
60 [label="8_ max256\n60-function_definition-9-11", type_label=function_definition];
77 [label="9_ return a >= b ? a : b;\n77-return-10-10", type_label=return];
84 [label="11_ min256\n84-function_definition-12-14", type_label=function_definition];
101 [label="12_ return a < b ? a : b;\n101-return-13-13", type_label=return];
111 [label="16_ mul\n111-function_definition-17-24", type_label=function_definition];
129 [label="17_ if_a == 0\n129-if-18-20", type_label=if];
134 [label="18_ return 0;\n134-return-19-19", type_label=return];
136 [label="20_ c = a * b;\n136-expression_statement-21-21", type_label=expression_statement];
142 [label="21_ assert(c / a == b);\n142-expression_statement-22-22", type_label=expression_statement];
151 [label="22_ return c;\n151-return-23-23", type_label=return];
153 [label="24_ div\n153-function_definition-25-27", type_label=function_definition];
170 [label="25_ return a / b;\n170-return-26-26", type_label=return];
174 [label="27_ sub\n174-function_definition-28-31", type_label=function_definition];
191 [label="28_ assert(b <= a);\n191-expression_statement-29-29", type_label=expression_statement];
198 [label="29_ return a - b;\n198-return-30-30", type_label=return];
202 [label="31_ add\n202-function_definition-32-36", type_label=function_definition];
220 [label="32_ c = a + b;\n220-expression_statement-33-33", type_label=expression_statement];
226 [label="33_ assert(c >= a);\n226-expression_statement-34-34", type_label=expression_statement];
233 [label="34_ return c;\n233-return-35-35", type_label=return];
238 [label="38_ address public owner;\n238-new_variable-39-39", type_label=new_variable];
253 [label="40_ Ownable\n253-function_definition-41-43", type_label=function_definition];
257 [label="41_ owner = msg.sender;\n257-expression_statement-42-42", type_label=expression_statement];
263 [label="43_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n263-expression_statement-44-47", type_label=expression_statement];
266 [label="44_ require(msg.sender == owner);\n266-expression_statement-45-45", type_label=expression_statement];
275 [label="45_ _;\n275-expression_statement-46-46", type_label=expression_statement];
277 [label="47_ transferOwnership\n277-function_definition-48-52", type_label=function_definition];
284 [label="47_ onlyOwner\n284-expression_statement-48-48", type_label=expression_statement];
287 [label="48_ require(newOwner != address(0));\n287-expression_statement-49-49", type_label=expression_statement];
302 [label="50_ owner = newOwner;\n302-expression_statement-51-51", type_label=expression_statement];
318 [label="55_ reclaimToken\n318-function_definition-56-59", type_label=function_definition];
326 [label="55_ onlyOwner\n326-expression_statement-56-56", type_label=expression_statement];
329 [label="56_ uint256 balance = token.balanceOf(this);\n329-new_variable-57-57", type_label=new_variable];
330 [label="56_ uint256 balance\n330-new_variable-57-57", type_label=new_variable];
340 [label="57_ token.safeTransfer(owner, balance);\n340-expression_statement-58-58", type_label=expression_statement];
355 [label="61_ reclaimContract\n355-function_definition-62-65", type_label=function_definition];
362 [label="61_ onlyOwner\n362-expression_statement-62-62", type_label=expression_statement];
365 [label="62_ Ownable contractInst = Ownable(contractAddr);\n365-new_variable-63-63", type_label=new_variable];
366 [label="62_ Ownable contractInst\n366-new_variable-63-63", type_label=new_variable];
375 [label="63_ contractInst.transferOwnership(owner);\n375-expression_statement-64-64", type_label=expression_statement];
388 [label="67_ tokenFallback\n388-function_definition-68-73", type_label=function_definition];
404 [label="68_ from_;\n404-expression_statement-69-69", type_label=expression_statement];
406 [label="69_ value_;\n406-expression_statement-70-70", type_label=expression_statement];
408 [label="70_ data_;\n408-expression_statement-71-71", type_label=expression_statement];
415 [label="75_ totalSupply\n415-function_definition-76-76", type_label=function_definition];
423 [label="76_ balanceOf\n423-function_definition-77-77", type_label=function_definition];
435 [label="77_ transfer\n435-function_definition-78-78", type_label=function_definition];
470 [label="81_ allowance\n470-function_definition-82-82", type_label=function_definition];
486 [label="82_ transferFrom\n486-function_definition-83-83", type_label=function_definition];
505 [label="83_ approve\n505-function_definition-84-84", type_label=function_definition];
545 [label="88_ mapping(address => uint256) balances;\n545-new_variable-89-89", type_label=new_variable];
551 [label="89_ uint256 totalSupply_;\n551-new_variable-90-90", type_label=new_variable];
555 [label="90_ totalSupply\n555-function_definition-91-93", type_label=function_definition];
564 [label="91_ return totalSupply_;\n564-return-92-92", type_label=return];
566 [label="93_ transfer\n566-function_definition-94-101", type_label=function_definition];
582 [label="94_ require(_to != address(0));\n582-expression_statement-95-95", type_label=expression_statement];
591 [label="95_ require(_value <= balances[msg.sender]);\n591-expression_statement-96-96", type_label=expression_statement];
602 [label="96_ balances[msg.sender] = balances[msg.sender].sub(_value);\n602-expression_statement-97-97", type_label=expression_statement];
619 [label="97_ balances[_to] = balances[_to].add(_value);\n619-expression_statement-98-98", type_label=expression_statement];
642 [label="99_ return true;\n642-return-100-100", type_label=return];
645 [label="101_ balanceOf\n645-function_definition-102-104", type_label=function_definition];
658 [label="102_ return balances[_owner];\n658-return-103-103", type_label=return];
671 [label="106_ mapping (address => mapping (address => uint256)) internal allowed;\n671-new_variable-107-107", type_label=new_variable];
680 [label="107_ transferFrom\n680-function_definition-108-117", type_label=function_definition];
700 [label="108_ require(_to != address(0));\n700-expression_statement-109-109", type_label=expression_statement];
709 [label="109_ require(_value <= balances[_from]);\n709-expression_statement-110-110", type_label=expression_statement];
718 [label="110_ require(_value <= allowed[_from][msg.sender]);\n718-expression_statement-111-111", type_label=expression_statement];
731 [label="111_ balances[_from] = balances[_from].sub(_value);\n731-expression_statement-112-112", type_label=expression_statement];
744 [label="112_ balances[_to] = balances[_to].add(_value);\n744-expression_statement-113-113", type_label=expression_statement];
757 [label="113_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n757-expression_statement-114-114", type_label=expression_statement];
786 [label="115_ return true;\n786-return-116-116", type_label=return];
789 [label="117_ approve\n789-function_definition-118-122", type_label=function_definition];
805 [label="118_ allowed[msg.sender][_spender] = _value;\n805-expression_statement-119-119", type_label=expression_statement];
825 [label="120_ return true;\n825-return-121-121", type_label=return];
828 [label="122_ allowance\n828-function_definition-123-125", type_label=function_definition];
845 [label="123_ return allowed[_owner][_spender];\n845-return-124-124", type_label=return];
851 [label="125_ increaseApproval\n851-function_definition-126-130", type_label=function_definition];
867 [label="126_ allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n867-expression_statement-127-127", type_label=expression_statement];
904 [label="128_ return true;\n904-return-129-129", type_label=return];
907 [label="130_ decreaseApproval\n907-function_definition-131-140", type_label=function_definition];
923 [label="131_ uint oldValue = allowed[msg.sender][_spender];\n923-new_variable-132-132", type_label=new_variable];
924 [label="131_ uint oldValue\n924-new_variable-132-132", type_label=new_variable];
935 [label="132_ if__subtractedValue > oldValue\n935-if-133-137", type_label=if];
940 [label="133_ allowed[msg.sender][_spender] = 0;\n940-expression_statement-134-134", type_label=expression_statement];
951 [label="135_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n951-expression_statement-136-136", type_label=expression_statement];
982 [label="138_ return true;\n982-return-139-139", type_label=return];
988 [label="142_ safeTransfer\n988-function_definition-143-145", type_label=function_definition];
1005 [label="143_ assert(token.transfer(to, value));\n1005-expression_statement-144-144", type_label=expression_statement];
1017 [label="145_ safeTransferFrom\n1017-function_definition-146-155", type_label=function_definition];
1038 [label="153_ assert(token.transferFrom(from, to, value));\n1038-expression_statement-154-154", type_label=expression_statement];
1052 [label="155_ safeApprove\n1052-function_definition-156-158", type_label=function_definition];
1069 [label="156_ assert(token.approve(spender, value));\n1069-expression_statement-157-157", type_label=expression_statement];
1093 [label="160_ string public constant name = \"DULA Coin\";\n1093-new_variable-161-161", type_label=new_variable];
1100 [label="161_ string public constant symbol = \"DULA\";\n1100-new_variable-162-162", type_label=new_variable];
1107 [label="162_ uint8 public constant decimals = 18;\n1107-new_variable-163-163", type_label=new_variable];
1113 [label="163_ uint256 public constant TOTAL_SUPPLY = 10 * 10 ** 9 * 10 ** uint256(decimals);\n1113-new_variable-164-164", type_label=new_variable];
1135 [label="165_ require(_distributor != address(0), \"Distributor address must not be 0!\");\n1135-expression_statement-166-166", type_label=expression_statement];
1147 [label="166_ totalSupply_ = totalSupply_.add(TOTAL_SUPPLY);\n1147-expression_statement-167-167", type_label=expression_statement];
1156 [label="167_ balances[_distributor] = balances[_distributor].add(TOTAL_SUPPLY);\n1156-expression_statement-168-168", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
966;
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
36 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
60 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
84 -> 101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
101 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 134  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
129 -> 136  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
134 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
136 -> 142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
142 -> 151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
153 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
174 -> 191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
191 -> 198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
198 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
202 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
226 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
253 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
266 -> 275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
388 -> 404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
404 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
555 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
566 -> 582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
591 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
642 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
645 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
680 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
700 -> 709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
709 -> 718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
718 -> 731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
744 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
789 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
825 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
828 -> 845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
851 -> 867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
907 -> 923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
923 -> 935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 940  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
935 -> 951  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
940 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
982 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
988 -> 1005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1052 -> 1069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1093 -> 1100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1100 -> 1107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1107 -> 1113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1135 -> 1147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1147 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
