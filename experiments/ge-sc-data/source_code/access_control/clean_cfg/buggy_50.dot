digraph  {
13 [label="3_ withdrawAll_txorigin2\n13-function_definition-4-7", type_label=function_definition];
25 [label="4_ require(tx.origin == owner_txorigin2);\n25-expression_statement-5-5", type_label=expression_statement];
34 [label="5_ _recipient.transfer(address(this).balance);\n34-expression_statement-6-6", type_label=expression_statement];
45 [label="7_ address payable private manager;\n45-new_variable-8-8", type_label=new_variable];
50 [label="8_ sendto_txorigin17\n50-function_definition-9-12", type_label=function_definition];
66 [label="9_ require (tx.origin == owner_txorigin17);\n66-expression_statement-10-10", type_label=expression_statement];
75 [label="10_ receiver.transfer(amount);\n75-expression_statement-11-11", type_label=expression_statement];
82 [label="12_ bool private contractactive;\n82-new_variable-13-13", type_label=new_variable];
87 [label="13_ sendto_txorigin37\n87-function_definition-14-17", type_label=function_definition];
103 [label="14_ require (tx.origin == owner_txorigin37);\n103-expression_statement-15-15", type_label=expression_statement];
112 [label="15_ receiver.transfer(amount);\n112-expression_statement-16-16", type_label=expression_statement];
119 [label="17_ uint private hashfee;\n119-new_variable-18-18", type_label=new_variable];
124 [label="18_ transferTo_txorigin3\n124-function_definition-19-22", type_label=function_definition];
140 [label="19_ require(tx.origin == owner_txorigin3);\n140-expression_statement-20-20", type_label=expression_statement];
149 [label="20_ to.call.value(amount);\n149-expression_statement-21-21", type_label=expression_statement];
158 [label="22_ uint private changehashownerfee;\n158-new_variable-23-23", type_label=new_variable];
163 [label="23_ struct HashRegistration \n    {\n        address owner;\n        uint registrationtime;\n    }\n163-expression_statement-24-28", type_label=expression_statement];
173 [label="28_ sendto_txorigin9\n173-function_definition-29-32", type_label=function_definition];
189 [label="29_ require (tx.origin == owner_txorigin9);\n189-expression_statement-30-30", type_label=expression_statement];
198 [label="30_ receiver.transfer(amount);\n198-expression_statement-31-31", type_label=expression_statement];
205 [label="32_ mapping(bytes32 => HashRegistration[]) HashList;\n205-new_variable-33-33", type_label=new_variable];
213 [label="33_ sendto_txorigin25\n213-function_definition-34-37", type_label=function_definition];
229 [label="34_ require (tx.origin == owner_txorigin25);\n229-expression_statement-35-35", type_label=expression_statement];
238 [label="35_ receiver.transfer(amount);\n238-expression_statement-36-36", type_label=expression_statement];
245 [label="37_ uint private HashListLength;\n245-new_variable-38-38", type_label=new_variable];
250 [label="38_ transferTo_txorigin31\n250-function_definition-39-42", type_label=function_definition];
266 [label="39_ require(tx.origin == owner_txorigin31);\n266-expression_statement-40-40", type_label=expression_statement];
275 [label="40_ to.call.value(amount);\n275-expression_statement-41-41", type_label=expression_statement];
298 [label="43_ sendto_txorigin13\n298-function_definition-44-47", type_label=function_definition];
314 [label="44_ require (tx.origin == owner_txorigin13);\n314-expression_statement-45-45", type_label=expression_statement];
323 [label="45_ receiver.transfer(amount);\n323-expression_statement-46-46", type_label=expression_statement];
350 [label="50_ manager = msg.sender;\n350-expression_statement-51-51", type_label=expression_statement];
356 [label="51_ contractactive = true;\n356-expression_statement-52-52", type_label=expression_statement];
361 [label="52_ hashfee = 5000000000000000;\n361-expression_statement-53-53", type_label=expression_statement];
365 [label="53_ changehashownerfee = 25000000000000000;\n365-expression_statement-54-54", type_label=expression_statement];
369 [label="54_ HashListLength = 0;\n369-expression_statement-55-55", type_label=expression_statement];
373 [label="56_ transferTo_txorigin19\n373-function_definition-57-60", type_label=function_definition];
389 [label="57_ require(tx.origin == owner_txorigin19);\n389-expression_statement-58-58", type_label=expression_statement];
398 [label="58_ to.call.value(amount);\n398-expression_statement-59-59", type_label=expression_statement];
407 [label="60_ modifier onlyManager()\n    {\n        require(msg.sender == manager);\n        _;\n    }\n407-expression_statement-61-65", type_label=expression_statement];
410 [label="62_ require(msg.sender == manager);\n410-expression_statement-63-63", type_label=expression_statement];
419 [label="63_ _;\n419-expression_statement-64-64", type_label=expression_statement];
421 [label="65_ gethashfee\n421-function_definition-66-69", type_label=function_definition];
430 [label="67_ return hashfee;\n430-return-68-68", type_label=return];
432 [label="69_ withdrawAll_txorigin26\n432-function_definition-70-73", type_label=function_definition];
444 [label="70_ require(tx.origin == owner_txorigin26);\n444-expression_statement-71-71", type_label=expression_statement];
453 [label="71_ _recipient.transfer(address(this).balance);\n453-expression_statement-72-72", type_label=expression_statement];
464 [label="73_ sethashfee\n464-function_definition-74-78", type_label=function_definition];
471 [label="73_ onlyManager\n471-expression_statement-74-74", type_label=expression_statement];
474 [label="75_ require(newfee >= 0);\n474-expression_statement-76-76", type_label=expression_statement];
481 [label="76_ hashfee = newfee;\n481-expression_statement-77-77", type_label=expression_statement];
485 [label="78_ bug_txorigin20\n485-function_definition-79-81", type_label=function_definition];
493 [label="79_ require(tx.origin == owner_txorigin20);\n493-expression_statement-80-80", type_label=expression_statement];
502 [label="81_ getchangehashownerfee\n502-function_definition-82-85", type_label=function_definition];
511 [label="83_ return changehashownerfee;\n511-return-84-84", type_label=return];
513 [label="85_ bug_txorigin32\n513-function_definition-86-88", type_label=function_definition];
521 [label="86_ require(tx.origin == owner_txorigin32);\n521-expression_statement-87-87", type_label=expression_statement];
530 [label="88_ setchangehashownerfee\n530-function_definition-89-93", type_label=function_definition];
537 [label="88_ onlyManager\n537-expression_statement-89-89", type_label=expression_statement];
540 [label="90_ require(newfee >= 0);\n540-expression_statement-91-91", type_label=expression_statement];
547 [label="91_ changehashownerfee = newfee;\n547-expression_statement-92-92", type_label=expression_statement];
551 [label="93_ withdrawAll_txorigin38\n551-function_definition-94-97", type_label=function_definition];
563 [label="94_ require(tx.origin == owner_txorigin38);\n563-expression_statement-95-95", type_label=expression_statement];
572 [label="95_ _recipient.transfer(address(this).balance);\n572-expression_statement-96-96", type_label=expression_statement];
583 [label="97_ getcontractactive\n583-function_definition-98-101", type_label=function_definition];
592 [label="99_ return contractactive;\n592-return-100-100", type_label=return];
594 [label="101_ bug_txorigin4\n594-function_definition-102-104", type_label=function_definition];
602 [label="102_ require(tx.origin == owner_txorigin4);\n602-expression_statement-103-103", type_label=expression_statement];
611 [label="104_ setcontractactive\n611-function_definition-105-108", type_label=function_definition];
618 [label="104_ onlyManager\n618-expression_statement-105-105", type_label=expression_statement];
621 [label="106_ contractactive = contactive;\n621-expression_statement-107-107", type_label=expression_statement];
625 [label="108_ transferTo_txorigin7\n625-function_definition-109-112", type_label=function_definition];
641 [label="109_ require(tx.origin == owner_txorigin7);\n641-expression_statement-110-110", type_label=expression_statement];
650 [label="110_ to.call.value(amount);\n650-expression_statement-111-111", type_label=expression_statement];
659 [label="112_ getmanager\n659-function_definition-113-116", type_label=function_definition];
668 [label="114_ return manager;\n668-return-115-115", type_label=return];
670 [label="116_ transferTo_txorigin23\n670-function_definition-117-120", type_label=function_definition];
686 [label="117_ require(tx.origin == owner_txorigin23);\n686-expression_statement-118-118", type_label=expression_statement];
695 [label="118_ to.call.value(amount);\n695-expression_statement-119-119", type_label=expression_statement];
704 [label="120_ setmanager\n704-function_definition-121-125", type_label=function_definition];
711 [label="120_ onlyManager\n711-expression_statement-121-121", type_label=expression_statement];
714 [label="122_ require(newmngr.balance > 0);\n714-expression_statement-123-123", type_label=expression_statement];
723 [label="123_ manager = newmngr;\n723-expression_statement-124-124", type_label=expression_statement];
727 [label="125_ withdrawAll_txorigin14\n727-function_definition-126-129", type_label=function_definition];
739 [label="126_ require(tx.origin == owner_txorigin14);\n739-expression_statement-127-127", type_label=expression_statement];
748 [label="127_ _recipient.transfer(address(this).balance);\n748-expression_statement-128-128", type_label=expression_statement];
759 [label="129_ getcontractbalance\n759-function_definition-130-133", type_label=function_definition];
768 [label="131_ return address(this).balance;\n768-return-132-132", type_label=return];
774 [label="133_ withdrawAll_txorigin30\n774-function_definition-134-137", type_label=function_definition];
786 [label="134_ require(tx.origin == owner_txorigin30);\n786-expression_statement-135-135", type_label=expression_statement];
795 [label="135_ _recipient.transfer(address(this).balance);\n795-expression_statement-136-136", type_label=expression_statement];
806 [label="137_ transfercontractbalance\n806-function_definition-138-143", type_label=function_definition];
809 [label="137_ onlyManager\n809-expression_statement-138-138", type_label=expression_statement];
812 [label="139_ uint cb = address(this).balance;\n812-new_variable-140-140", type_label=new_variable];
813 [label="139_ uint cb\n813-new_variable-140-140", type_label=new_variable];
822 [label="140_ require(cb > 0);\n822-expression_statement-141-141", type_label=expression_statement];
829 [label="141_ manager.transfer(cb);\n829-expression_statement-142-142", type_label=expression_statement];
836 [label="143_ bug_txorigin8\n836-function_definition-144-146", type_label=function_definition];
844 [label="144_ require(tx.origin == owner_txorigin8);\n844-expression_statement-145-145", type_label=expression_statement];
853 [label="146_ getHashOwnersCount\n853-function_definition-147-150", type_label=function_definition];
866 [label="148_ return HashList[hash].length;\n866-return-149-149", type_label=return];
872 [label="150_ transferTo_txorigin39\n872-function_definition-151-154", type_label=function_definition];
888 [label="151_ require(tx.origin == owner_txorigin39);\n888-expression_statement-152-152", type_label=expression_statement];
897 [label="152_ to.call.value(amount);\n897-expression_statement-153-153", type_label=expression_statement];
906 [label="154_ getNumberofHashesRegistered\n906-function_definition-155-158", type_label=function_definition];
915 [label="156_ return HashListLength;\n915-return-157-157", type_label=return];
917 [label="158_ bug_txorigin36\n917-function_definition-159-161", type_label=function_definition];
925 [label="159_ require(tx.origin == owner_txorigin36);\n925-expression_statement-160-160", type_label=expression_statement];
934 [label="161_ getHashDetails\n934-function_definition-162-168", type_label=function_definition];
954 [label="163_ uint owncount = getHashOwnersCount(hash);\n954-new_variable-164-164", type_label=new_variable];
955 [label="163_ uint owncount\n955-new_variable-164-164", type_label=new_variable];
963 [label="164_ require(owncount > 0);\n963-expression_statement-165-165", type_label=expression_statement];
970 [label="165_ require(indx < owncount);\n970-expression_statement-166-166", type_label=expression_statement];
977 [label="166_ return (HashList[hash][indx].owner,HashList[hash][indx].registrationtime);\n977-return-167-167", type_label=return];
993 [label="168_ transferTo_txorigin35\n993-function_definition-169-172", type_label=function_definition];
1009 [label="169_ require(tx.origin == owner_txorigin35);\n1009-expression_statement-170-170", type_label=expression_statement];
1018 [label="170_ to.call.value(amount);\n1018-expression_statement-171-171", type_label=expression_statement];
1027 [label="172_ registerHash\n1027-function_definition-173-184", type_label=function_definition];
1036 [label="174_ require(contractactive == true);\n1036-expression_statement-175-175", type_label=expression_statement];
1044 [label="175_ require(getHashOwnersCount(hash) == 0);\n1044-expression_statement-176-176", type_label=expression_statement];
1054 [label="176_ require(msg.value == hashfee);\n1054-expression_statement-177-177", type_label=expression_statement];
1063 [label="177_ HashRegistration memory thisregistration;\n1063-new_variable-178-178", type_label=new_variable];
1064 [label="177_ HashRegistration memory thisregistration\n1064-new_variable-178-178", type_label=new_variable];
1069 [label="178_ thisregistration.owner = msg.sender;\n1069-expression_statement-179-179", type_label=expression_statement];
1077 [label="179_ thisregistration.registrationtime = now;\n1077-expression_statement-180-180", type_label=expression_statement];
1083 [label="180_ HashList[hash].push(thisregistration);\n1083-expression_statement-181-181", type_label=expression_statement];
1092 [label="181_ HashListLength++;\n1092-expression_statement-182-182", type_label=expression_statement];
1093 [label="181_ HashListLength++\n1093-expression_statement-182-182", type_label=expression_statement];
1107 [label="184_ bug_txorigin40\n1107-function_definition-185-187", type_label=function_definition];
1115 [label="185_ require(tx.origin == owner_txorigin40);\n1115-expression_statement-186-186", type_label=expression_statement];
1124 [label="187_ changeHashOwnership\n1124-function_definition-188-200", type_label=function_definition];
1137 [label="189_ require(contractactive == true);\n1137-expression_statement-190-190", type_label=expression_statement];
1145 [label="190_ uint owncount = getHashOwnersCount(hash);\n1145-new_variable-191-191", type_label=new_variable];
1146 [label="190_ uint owncount\n1146-new_variable-191-191", type_label=new_variable];
1154 [label="191_ require(owncount > 0);\n1154-expression_statement-192-192", type_label=expression_statement];
1161 [label="192_ require(msg.sender == HashList[hash][owncount - 1].owner);\n1161-expression_statement-193-193", type_label=expression_statement];
1178 [label="193_ require(msg.value == changehashownerfee);\n1178-expression_statement-194-194", type_label=expression_statement];
1187 [label="194_ HashRegistration memory thisregistration;\n1187-new_variable-195-195", type_label=new_variable];
1188 [label="194_ HashRegistration memory thisregistration\n1188-new_variable-195-195", type_label=new_variable];
1193 [label="195_ thisregistration.owner = newowner;\n1193-expression_statement-196-196", type_label=expression_statement];
1199 [label="196_ thisregistration.registrationtime = now;\n1199-expression_statement-197-197", type_label=expression_statement];
1205 [label="197_ HashList[hash].push(thisregistration);\n1205-expression_statement-198-198", type_label=expression_statement];
1230 [label="200_ sendto_txorigin33\n1230-function_definition-201-204", type_label=function_definition];
1246 [label="201_ require (tx.origin == owner_txorigin33);\n1246-expression_statement-202-202", type_label=expression_statement];
1255 [label="202_ receiver.transfer(amount);\n1255-expression_statement-203-203", type_label=expression_statement];
1265 [label="207_ transferTo_txorigin27\n1265-function_definition-208-211", type_label=function_definition];
1281 [label="208_ require(tx.origin == owner_txorigin27);\n1281-expression_statement-209-209", type_label=expression_statement];
1290 [label="209_ to.call.value(amount);\n1290-expression_statement-210-210", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
13 -> 25  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
25 -> 34  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
50 -> 66  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
66 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
103 -> 112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
124 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
158 -> 163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
213 -> 229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
229 -> 238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
250 -> 266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
266 -> 275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
356 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
373 -> 389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
389 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
432 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
474 -> 481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
485 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
511 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
513 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
530 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
583 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
594 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
625 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
641 -> 650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
659 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
668 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
670 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
686 -> 695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
704 -> 714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
714 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
739 -> 748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
759 -> 768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
768 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
774 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
806 -> 812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
812 -> 822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
822 -> 829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
853 -> 866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
866 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
872 -> 888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
888 -> 897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
906 -> 915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
915 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
917 -> 925  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
934 -> 954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
954 -> 963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
963 -> 970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
970 -> 977  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
977 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
993 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1009 -> 1018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 1036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1036 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1044 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1069 -> 1077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1077 -> 1083  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1083 -> 1092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1107 -> 1115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1124 -> 1137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1137 -> 1145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1145 -> 1154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1154 -> 1161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1161 -> 1178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1178 -> 1187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1187 -> 1193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1193 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1199 -> 1205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1230 -> 1246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1246 -> 1255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1265 -> 1281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1281 -> 1290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
