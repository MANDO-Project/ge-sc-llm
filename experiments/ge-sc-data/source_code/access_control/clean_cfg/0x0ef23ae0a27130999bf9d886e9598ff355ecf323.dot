digraph  {
13 [label="2_ bytes32 private token;\n13-new_variable-3-3", type_label=new_variable];
18 [label="3_ address private owner;\n18-new_variable-4-4", type_label=new_variable];
23 [label="4_ uint private created_at;\n23-new_variable-5-5", type_label=new_variable];
28 [label="5_ uint private updated_at;\n28-new_variable-6-6", type_label=new_variable];
33 [label="6_ uint private expires_at;\n33-new_variable-7-7", type_label=new_variable];
38 [label="7_ bool private burnt;\n38-new_variable-8-8", type_label=new_variable];
53 [label="9_ token = voucher_token;\n53-expression_statement-10-10", type_label=expression_statement];
57 [label="10_ burnt = false;\n57-expression_statement-11-11", type_label=expression_statement];
62 [label="11_ created_at = now;\n62-expression_statement-12-12", type_label=expression_statement];
66 [label="12_ updated_at = now;\n66-expression_statement-13-13", type_label=expression_statement];
70 [label="13_ expires_at = created_at + (_lifetime * 60*60*24);\n70-expression_statement-14-14", type_label=expression_statement];
83 [label="14_ owner = msg.sender;\n83-expression_statement-15-15", type_label=expression_statement];
89 [label="16_ burn\n89-function_definition-17-24", type_label=function_definition];
102 [label="17_ require(token == voucher_token, \"Forbidden.\");\n102-expression_statement-18-18", type_label=expression_statement];
112 [label="18_ require(msg.sender == owner);\n112-expression_statement-19-19", type_label=expression_statement];
121 [label="19_ require(!burnt, \"Already burnt.\");\n121-expression_statement-20-20", type_label=expression_statement];
130 [label="20_ burnt = true;\n130-expression_statement-21-21", type_label=expression_statement];
135 [label="21_ updated_at = now;\n135-expression_statement-22-22", type_label=expression_statement];
139 [label="22_ return true;\n139-return-23-23", type_label=return];
142 [label="24_ is_burnt\n142-function_definition-25-32", type_label=function_definition];
154 [label="25_ require(token == voucher_token, \"Forbidden.\");\n154-expression_statement-26-26", type_label=expression_statement];
164 [label="26_ require(msg.sender == owner);\n164-expression_statement-27-27", type_label=expression_statement];
173 [label="27_ if\n173-if-28-30", type_label=if];
179 [label="28_ burn(voucher_token);\n179-expression_statement-29-29", type_label=expression_statement];
184 [label="30_ return burnt;\n184-return-31-31", type_label=return];
186 [label="32_ is_expired\n186-function_definition-33-36", type_label=function_definition];
199 [label="33_ require(token == voucher_token, \"Forbidden.\");\n199-expression_statement-34-34", type_label=expression_statement];
209 [label="34_ return expires_at != created_at && expires_at < now;\n209-return-35-35", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
13 -> 18  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
18 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
23 -> 28  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
28 -> 33  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
33 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 57  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
57 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 66  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
66 -> 70  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
70 -> 83  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
89 -> 102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
102 -> 112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
135 -> 139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
142 -> 154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
154 -> 164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 179  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
173 -> 184  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
179 -> 184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
184 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
186 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
209 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
