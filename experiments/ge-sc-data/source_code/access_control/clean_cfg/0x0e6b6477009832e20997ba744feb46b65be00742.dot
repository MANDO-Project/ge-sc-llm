digraph  {
12 [label="2_ recover\n12-function_definition-3-23", type_label=function_definition];
29 [label="3_ bytes32 r;\n29-new_variable-4-4", type_label=new_variable];
30 [label="3_ bytes32 r\n30-new_variable-4-4", type_label=new_variable];
34 [label="4_ bytes32 s;\n34-new_variable-5-5", type_label=new_variable];
35 [label="4_ bytes32 s\n35-new_variable-5-5", type_label=new_variable];
39 [label="5_ uint8 v;\n39-new_variable-6-6", type_label=new_variable];
40 [label="5_ uint8 v\n40-new_variable-6-6", type_label=new_variable];
44 [label="6_ if_sig.length != 65\n44-if-7-9", type_label=if];
51 [label="7_ return (address(0));\n51-return-8-8", type_label=return];
96 [label="14_ if_v < 27\n96-if-15-17", type_label=if];
101 [label="15_ v += 27;\n101-expression_statement-16-16", type_label=expression_statement];
102 [label="15_ v += 27\n102-expression_statement-16-16", type_label=expression_statement];
105 [label="17_ if_v != 27 && v != 28\n105-if-18-22", type_label=if];
114 [label="18_ return (address(0));\n114-return-19-19", type_label=return];
120 [label="20_ return ecrecover(hash, v, r, s);\n120-return-21-21", type_label=return];
134 [label="25_ address public owner;\n134-new_variable-26-26", type_label=new_variable];
151 [label="28_ owner = msg.sender;\n151-expression_statement-29-29", type_label=expression_statement];
157 [label="30_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n157-expression_statement-31-34", type_label=expression_statement];
160 [label="31_ require(msg.sender == owner);\n160-expression_statement-32-32", type_label=expression_statement];
169 [label="32_ _;\n169-expression_statement-33-33", type_label=expression_statement];
171 [label="34_ transferOwnership\n171-function_definition-35-39", type_label=function_definition];
177 [label="34_ onlyOwner\n177-expression_statement-35-35", type_label=expression_statement];
181 [label="35_ require(newOwner != address(0));\n181-expression_statement-36-36", type_label=expression_statement];
196 [label="37_ owner = newOwner;\n196-expression_statement-38-38", type_label=expression_statement];
206 [label="41_ address public pendingOwner;\n206-new_variable-42-42", type_label=new_variable];
211 [label="42_ modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n211-expression_statement-43-46", type_label=expression_statement];
214 [label="43_ require(msg.sender == pendingOwner);\n214-expression_statement-44-44", type_label=expression_statement];
223 [label="44_ _;\n223-expression_statement-45-45", type_label=expression_statement];
225 [label="46_ transferOwnership\n225-function_definition-47-49", type_label=function_definition];
231 [label="46_ onlyOwner\n231-expression_statement-47-47", type_label=expression_statement];
235 [label="47_ pendingOwner = newOwner;\n235-expression_statement-48-48", type_label=expression_statement];
239 [label="49_ claimOwnership\n239-function_definition-50-54", type_label=function_definition];
241 [label="49_ onlyPendingOwner\n241-expression_statement-50-50", type_label=expression_statement];
251 [label="51_ owner = pendingOwner;\n251-expression_statement-52-52", type_label=expression_statement];
255 [label="52_ pendingOwner = 0x0;\n255-expression_statement-53-53", type_label=expression_statement];
262 [label="56_ uint256 public totalSupply;\n262-new_variable-57-57", type_label=new_variable];
267 [label="57_ balanceOf\n267-function_definition-58-58", type_label=function_definition];
274 [label="57_ constant\n274-expression_statement-58-58", type_label=expression_statement];
280 [label="58_ transfer\n280-function_definition-59-59", type_label=function_definition];
315 [label="62_ allowance\n315-function_definition-63-63", type_label=function_definition];
326 [label="62_ constant\n326-expression_statement-63-63", type_label=expression_statement];
332 [label="63_ transferFrom\n332-function_definition-64-64", type_label=function_definition];
351 [label="64_ approve\n351-function_definition-65-65", type_label=function_definition];
391 [label="69_ mapping(address => bool) public signers;\n391-new_variable-70-70", type_label=new_variable];
398 [label="70_ mapping(bytes32 => uint256) public nonces;\n398-new_variable-71-71", type_label=new_variable];
405 [label="71_ address public token;\n405-new_variable-72-72", type_label=new_variable];
410 [label="72_ address public tokenHolder;\n410-new_variable-73-73", type_label=new_variable];
461 [label="80_ token = _token;\n461-expression_statement-81-81", type_label=expression_statement];
465 [label="81_ tokenHolder = _tokenHolder;\n465-expression_statement-82-82", type_label=expression_statement];
469 [label="83_ modifier onlyValidSignatureOnce(string accountId, bytes32 hash, bytes signature) {\n        address signedBy = hash.recover(signature);\n        require(signers[signedBy]);\n        _;\n        nonces[hashAccountId(accountId)]++;\n    }\n469-expression_statement-84-89", type_label=expression_statement];
484 [label="84_ address signedBy = hash.recover(signature);\n484-new_variable-85-85", type_label=new_variable];
485 [label="84_ address signedBy\n485-new_variable-85-85", type_label=new_variable];
495 [label="85_ require(signers[signedBy]);\n495-expression_statement-86-86", type_label=expression_statement];
502 [label="86_ _;\n502-expression_statement-87-87", type_label=expression_statement];
504 [label="87_ nonces[hashAccountId(accountId)]++;\n504-expression_statement-88-88", type_label=expression_statement];
505 [label="87_ nonces[hashAccountId(accountId)]++\n505-expression_statement-88-88", type_label=expression_statement];
512 [label="89_ withdraw\n512-function_definition-90-101", type_label=function_definition];
530 [label="90_ onlyValidSignatureOnce(\n        accountId,\n        generateWithdrawalHash(accountId, amount, recipient),\n        signature)\n530-expression_statement-91-94", type_label=expression_statement];
551 [label="97_ require(ERC20(token).transferFrom(tokenHolder, recipient, amount));\n551-expression_statement-98-98", type_label=expression_statement];
576 [label="99_ return true;\n576-return-100-100", type_label=return];
579 [label="101_ generateWithdrawalHash\n579-function_definition-102-111", type_label=function_definition];
600 [label="106_ bytes32 accountHash = hashAccountId(accountId);\n600-new_variable-107-107", type_label=new_variable];
601 [label="106_ bytes32 accountHash\n601-new_variable-107-107", type_label=new_variable];
609 [label="107_ bytes memory message = abi.encodePacked(address(this), recipient, amount, nonces[accountHash]);\n609-new_variable-108-108", type_label=new_variable];
610 [label="107_ bytes memory message\n610-new_variable-108-108", type_label=new_variable];
630 [label="108_ bytes32 messageHash = keccak256(message);\n630-new_variable-109-109", type_label=new_variable];
631 [label="108_ bytes32 messageHash\n631-new_variable-109-109", type_label=new_variable];
639 [label="109_ return keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", messageHash));\n639-return-110-110", type_label=return];
652 [label="111_ hashAccountId\n652-function_definition-112-118", type_label=function_definition];
665 [label="116_ return keccak256(abi.encodePacked(accountId));\n665-return-117-117", type_label=return];
675 [label="118_ updateTokenHolder\n675-function_definition-119-126", type_label=function_definition];
681 [label="119_ onlyOwner\n681-expression_statement-120-120", type_label=expression_statement];
685 [label="122_ address oldTokenHolder = tokenHolder;\n685-new_variable-123-123", type_label=new_variable];
686 [label="122_ address oldTokenHolder\n686-new_variable-123-123", type_label=new_variable];
691 [label="123_ tokenHolder = newTokenHolder;\n691-expression_statement-124-124", type_label=expression_statement];
701 [label="126_ addSigner\n701-function_definition-127-133", type_label=function_definition];
707 [label="127_ onlyOwner\n707-expression_statement-128-128", type_label=expression_statement];
711 [label="130_ signers[signer] = true;\n711-expression_statement-131-131", type_label=expression_statement];
722 [label="133_ removeSigner\n722-function_definition-134-140", type_label=function_definition];
728 [label="134_ onlyOwner\n728-expression_statement-135-135", type_label=expression_statement];
732 [label="137_ signers[signer] = false;\n732-expression_statement-138-138", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
56;
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 39  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
39 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 51  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
44 -> 56  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
51 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
96 -> 101  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
96 -> 105  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
101 -> 105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
105 -> 114  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
105 -> 120  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
114 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
120 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
160 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
171 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
239 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
405 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
484 -> 495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
576 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
579 -> 600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
600 -> 609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
609 -> 630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
652 -> 665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
675 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
722 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
