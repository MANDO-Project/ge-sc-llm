digraph  {
9 [label="1_ uint public totalSupply;\n9-new_variable-2-2", type_label=new_variable];
14 [label="2_ balanceOf\n14-function_definition-3-3", type_label=function_definition];
20 [label="2_ constant\n20-expression_statement-3-3", type_label=expression_statement];
26 [label="3_ allowance\n26-function_definition-4-4", type_label=function_definition];
36 [label="3_ constant\n36-expression_statement-4-4", type_label=expression_statement];
42 [label="4_ transfer\n42-function_definition-5-5", type_label=function_definition];
57 [label="5_ transferFrom\n57-function_definition-6-6", type_label=function_definition];
76 [label="6_ approve\n76-function_definition-7-7", type_label=function_definition];
122 [label="11_ safeMul\n122-function_definition-12-16", type_label=function_definition];
138 [label="12_ uint c = a * b;\n138-new_variable-13-13", type_label=new_variable];
139 [label="12_ uint c\n139-new_variable-13-13", type_label=new_variable];
146 [label="13_ assert(a == 0 || c / a == b);\n146-expression_statement-14-14", type_label=expression_statement];
159 [label="14_ return c;\n159-return-15-15", type_label=return];
161 [label="16_ safeDiv\n161-function_definition-17-22", type_label=function_definition];
177 [label="17_ assert(b > 0);\n177-expression_statement-18-18", type_label=expression_statement];
184 [label="18_ uint c = a / b;\n184-new_variable-19-19", type_label=new_variable];
185 [label="18_ uint c\n185-new_variable-19-19", type_label=new_variable];
192 [label="19_ assert(a == b * c + a % b);\n192-expression_statement-20-20", type_label=expression_statement];
205 [label="20_ return c;\n205-return-21-21", type_label=return];
207 [label="22_ safeSub\n207-function_definition-23-26", type_label=function_definition];
223 [label="23_ assert(b <= a);\n223-expression_statement-24-24", type_label=expression_statement];
230 [label="24_ return a - b;\n230-return-25-25", type_label=return];
234 [label="26_ safeAdd\n234-function_definition-27-31", type_label=function_definition];
250 [label="27_ uint c = a + b;\n250-new_variable-28-28", type_label=new_variable];
251 [label="27_ uint c\n251-new_variable-28-28", type_label=new_variable];
258 [label="28_ assert(c>=a && c>=b);\n258-expression_statement-29-29", type_label=expression_statement];
269 [label="29_ return c;\n269-return-30-30", type_label=return];
271 [label="31_ max64\n271-function_definition-32-34", type_label=function_definition];
282 [label="31_ constant\n282-expression_statement-32-32", type_label=expression_statement];
289 [label="32_ return a >= b ? a : b;\n289-return-33-33", type_label=return];
296 [label="34_ min64\n296-function_definition-35-37", type_label=function_definition];
307 [label="34_ constant\n307-expression_statement-35-35", type_label=expression_statement];
314 [label="35_ return a < b ? a : b;\n314-return-36-36", type_label=return];
321 [label="37_ max256\n321-function_definition-38-40", type_label=function_definition];
332 [label="37_ constant\n332-expression_statement-38-38", type_label=expression_statement];
339 [label="38_ return a >= b ? a : b;\n339-return-39-39", type_label=return];
346 [label="40_ min256\n346-function_definition-41-43", type_label=function_definition];
357 [label="40_ constant\n357-expression_statement-41-41", type_label=expression_statement];
364 [label="41_ return a < b ? a : b;\n364-return-42-42", type_label=return];
371 [label="43_ assert\n371-function_definition-44-48", type_label=function_definition];
379 [label="44_ if\n379-if-45-47", type_label=if];
383 [label="45_ throw;\n383-expression_statement-46-46", type_label=expression_statement];
394 [label="50_ mapping(address => uint) balances;\n394-new_variable-51-51", type_label=new_variable];
400 [label="51_ mapping (address => mapping (address => uint)) allowed;\n400-new_variable-52-52", type_label=new_variable];
408 [label="52_ modifier onlyPayloadSize(uint size) {\n     if(msg.data.length < size + 4) {\n       throw;\n     }\n     _;\n  }\n408-expression_statement-53-58", type_label=expression_statement];
415 [label="53_ if_msg.data.length < size + 4\n415-if-54-56", type_label=if];
426 [label="54_ throw;\n426-expression_statement-55-55", type_label=expression_statement];
428 [label="56_ _;\n428-expression_statement-57-57", type_label=expression_statement];
430 [label="58_ transfer\n430-function_definition-59-64", type_label=function_definition];
440 [label="58_ onlyPayloadSize(2 * 32)\n440-expression_statement-59-59", type_label=expression_statement];
452 [label="59_ balances[msg.sender] = safeSub(balances[msg.sender], _value);\n452-expression_statement-60-60", type_label=expression_statement];
469 [label="60_ balances[_to] = safeAdd(balances[_to], _value);\n469-expression_statement-61-61", type_label=expression_statement];
482 [label="61_ Transfer(msg.sender, _to, _value);\n482-expression_statement-62-62", type_label=expression_statement];
493 [label="62_ return true;\n493-return-63-63", type_label=return];
496 [label="64_ transferFrom\n496-function_definition-65-72", type_label=function_definition];
516 [label="65_ var _allowance = allowed[_from][msg.sender];\n516-new_variable-66-66", type_label=new_variable];
517 [label="65_ var _allowance\n517-new_variable-66-66", type_label=new_variable];
528 [label="66_ balances[_to] = safeAdd(balances[_to], _value);\n528-expression_statement-67-67", type_label=expression_statement];
541 [label="67_ balances[_from] = safeSub(balances[_from], _value);\n541-expression_statement-68-68", type_label=expression_statement];
554 [label="68_ allowed[_from][msg.sender] = safeSub(_allowance, _value);\n554-expression_statement-69-69", type_label=expression_statement];
569 [label="69_ Transfer(_from, _to, _value);\n569-expression_statement-70-70", type_label=expression_statement];
578 [label="70_ return true;\n578-return-71-71", type_label=return];
581 [label="72_ balanceOf\n581-function_definition-73-75", type_label=function_definition];
587 [label="72_ constant\n587-expression_statement-73-73", type_label=expression_statement];
595 [label="73_ return balances[_owner];\n595-return-74-74", type_label=return];
599 [label="75_ approve\n599-function_definition-76-80", type_label=function_definition];
615 [label="76_ allowed[msg.sender][_spender] = _value;\n615-expression_statement-77-77", type_label=expression_statement];
625 [label="77_ Approval(msg.sender, _spender, _value);\n625-expression_statement-78-78", type_label=expression_statement];
636 [label="78_ return true;\n636-return-79-79", type_label=return];
639 [label="80_ allowance\n639-function_definition-81-83", type_label=function_definition];
649 [label="80_ constant\n649-expression_statement-81-81", type_label=expression_statement];
657 [label="81_ return allowed[_owner][_spender];\n657-return-82-82", type_label=return];
666 [label="85_ uint public originalSupply;\n666-new_variable-86-86", type_label=new_variable];
671 [label="86_ isUpgradeAgent\n671-function_definition-87-89", type_label=function_definition];
674 [label="86_ constant\n674-expression_statement-87-87", type_label=expression_statement];
681 [label="87_ return true;\n681-return-88-88", type_label=return];
684 [label="89_ upgradeFrom\n684-function_definition-90-90", type_label=function_definition];
701 [label="92_ address public upgradeMaster;\n701-new_variable-93-93", type_label=new_variable];
706 [label="93_ UpgradeAgent public upgradeAgent;\n706-new_variable-94-94", type_label=new_variable];
712 [label="94_ uint256 public totalUpgraded;\n712-new_variable-95-95", type_label=new_variable];
744 [label="98_ UpgradeableToken\n744-function_definition-99-101", type_label=function_definition];
751 [label="99_ upgradeMaster = _upgradeMaster;\n751-expression_statement-100-100", type_label=expression_statement];
755 [label="101_ upgrade\n755-function_definition-102-113", type_label=function_definition];
763 [label="102_ UpgradeState state = getUpgradeState();\n763-new_variable-103-103", type_label=new_variable];
764 [label="102_ UpgradeState state\n764-new_variable-103-103", type_label=new_variable];
771 [label="103_ if\n771-if-104-106", type_label=if];
786 [label="104_ throw;\n786-expression_statement-105-105", type_label=expression_statement];
788 [label="106_ if_value == 0\n788-if-107-107", type_label=if];
792 [label="106_ throw;\n792-expression_statement-107-107", type_label=expression_statement];
794 [label="107_ balances[msg.sender] = safeSub(balances[msg.sender], value);\n794-expression_statement-108-108", type_label=expression_statement];
811 [label="108_ totalSupply = safeSub(totalSupply, value);\n811-expression_statement-109-109", type_label=expression_statement];
820 [label="109_ totalUpgraded = safeAdd(totalUpgraded, value);\n820-expression_statement-110-110", type_label=expression_statement];
829 [label="110_ upgradeAgent.upgradeFrom(msg.sender, value);\n829-expression_statement-111-111", type_label=expression_statement];
840 [label="111_ Upgrade(msg.sender, upgradeAgent, value);\n840-expression_statement-112-112", type_label=expression_statement];
851 [label="113_ setUpgradeAgent\n851-function_definition-114-125", type_label=function_definition];
859 [label="114_ if\n859-if-115-117", type_label=if];
864 [label="115_ throw;\n864-expression_statement-116-116", type_label=expression_statement];
866 [label="117_ if_agent == 0x0\n866-if-118-118", type_label=if];
870 [label="117_ throw;\n870-expression_statement-118-118", type_label=expression_statement];
872 [label="118_ if_msg.sender != upgradeMaster\n872-if-119-119", type_label=if];
878 [label="118_ throw;\n878-expression_statement-119-119", type_label=expression_statement];
880 [label="119_ if_getUpgradeState() == UpgradeState.Upgrading\n880-if-120-120", type_label=if];
887 [label="119_ throw;\n887-expression_statement-120-120", type_label=expression_statement];
889 [label="120_ upgradeAgent = UpgradeAgent(agent);\n889-expression_statement-121-121", type_label=expression_statement];
896 [label="121_ if\n896-if-122-122", type_label=if];
902 [label="121_ throw;\n902-expression_statement-122-122", type_label=expression_statement];
904 [label="122_ if_upgradeAgent.originalSupply() != totalSupply\n904-if-123-123", type_label=if];
911 [label="122_ throw;\n911-expression_statement-123-123", type_label=expression_statement];
913 [label="123_ UpgradeAgentSet(upgradeAgent);\n913-expression_statement-124-124", type_label=expression_statement];
918 [label="125_ getUpgradeState\n918-function_definition-126-131", type_label=function_definition];
921 [label="125_ constant\n921-expression_statement-126-126", type_label=expression_statement];
929 [label="126_ if\n929-if-127-130", type_label=if];
933 [label="126_ return UpgradeState.NotAllowed;\n933-return-127-127", type_label=return];
937 [label="127_ if_address(upgradeAgent) == 0x00\n937-if-128-130", type_label=if];
943 [label="127_ return UpgradeState.WaitingForAgent;\n943-return-128-128", type_label=return];
947 [label="128_ if_totalUpgraded == 0\n947-if-129-130", type_label=if];
951 [label="128_ return UpgradeState.ReadyToUpgrade;\n951-return-129-129", type_label=return];
955 [label="129_ return UpgradeState.Upgrading;\n955-return-130-130", type_label=return];
959 [label="131_ setUpgradeMaster\n959-function_definition-132-136", type_label=function_definition];
967 [label="132_ if_master == 0x0\n967-if-133-133", type_label=if];
971 [label="132_ throw;\n971-expression_statement-133-133", type_label=expression_statement];
973 [label="133_ if_msg.sender != upgradeMaster\n973-if-134-134", type_label=if];
979 [label="133_ throw;\n979-expression_statement-134-134", type_label=expression_statement];
981 [label="134_ upgradeMaster = master;\n981-expression_statement-135-135", type_label=expression_statement];
985 [label="136_ canUpgrade\n985-function_definition-137-139", type_label=function_definition];
988 [label="136_ constant\n988-expression_statement-137-137", type_label=expression_statement];
995 [label="137_ return true;\n995-return-138-138", type_label=return];
1001 [label="141_ address public owner;\n1001-new_variable-142-142", type_label=new_variable];
1006 [label="142_ Ownable\n1006-function_definition-143-145", type_label=function_definition];
1009 [label="143_ owner = msg.sender;\n1009-expression_statement-144-144", type_label=expression_statement];
1015 [label="145_ modifier onlyOwner() {\n    if (msg.sender != owner) {\n      throw;\n    }\n    _;\n  }\n1015-expression_statement-146-151", type_label=expression_statement];
1018 [label="146_ if_msg.sender != owner\n1018-if-147-149", type_label=if];
1025 [label="147_ throw;\n1025-expression_statement-148-148", type_label=expression_statement];
1027 [label="149_ _;\n1027-expression_statement-150-150", type_label=expression_statement];
1029 [label="151_ transferOwnership\n1029-function_definition-152-156", type_label=function_definition];
1035 [label="151_ onlyOwner\n1035-expression_statement-152-152", type_label=expression_statement];
1038 [label="152_ if_newOwner != address(0)\n1038-if-153-155", type_label=if];
1045 [label="153_ owner = newOwner;\n1045-expression_statement-154-154", type_label=expression_statement];
1058 [label="158_ address public releaseAgent;\n1058-new_variable-159-159", type_label=new_variable];
1063 [label="159_ bool public released = false;\n1063-new_variable-160-160", type_label=new_variable];
1070 [label="160_ mapping (address => bool) public transferAgents;\n1070-new_variable-161-161", type_label=new_variable];
1077 [label="161_ modifier canTransfer(address _sender) {\n    if(!released) {\n        if(!transferAgents[_sender]) {\n            throw;\n        }\n    }\n    _;\n  }\n1077-expression_statement-162-169", type_label=expression_statement];
1084 [label="162_ if\n1084-if-163-167", type_label=if];
1088 [label="163_ if\n1088-if-164-166", type_label=if];
1094 [label="164_ throw;\n1094-expression_statement-165-165", type_label=expression_statement];
1096 [label="167_ _;\n1096-expression_statement-168-168", type_label=expression_statement];
1098 [label="169_ setReleaseAgent\n1098-function_definition-170-172", type_label=function_definition];
1104 [label="169_ onlyOwner\n1104-expression_statement-170-170", type_label=expression_statement];
1106 [label="169_ inReleaseState(false)\n1106-expression_statement-170-170", type_label=expression_statement];
1113 [label="170_ releaseAgent = addr;\n1113-expression_statement-171-171", type_label=expression_statement];
1117 [label="172_ setTransferAgent\n1117-function_definition-173-175", type_label=function_definition];
1127 [label="172_ onlyOwner\n1127-expression_statement-173-173", type_label=expression_statement];
1129 [label="172_ inReleaseState(false)\n1129-expression_statement-173-173", type_label=expression_statement];
1136 [label="173_ transferAgents[addr] = state;\n1136-expression_statement-174-174", type_label=expression_statement];
1142 [label="175_ releaseTokenTransfer\n1142-function_definition-176-178", type_label=function_definition];
1145 [label="175_ onlyReleaseAgent\n1145-expression_statement-176-176", type_label=expression_statement];
1148 [label="176_ released = true;\n1148-expression_statement-177-177", type_label=expression_statement];
1153 [label="178_ modifier inReleaseState(bool releaseState) {\n    if(releaseState != released) {\n        throw;\n    }\n    _;\n  }\n1153-expression_statement-179-184", type_label=expression_statement];
1160 [label="179_ if_releaseState != released\n1160-if-180-182", type_label=if];
1165 [label="180_ throw;\n1165-expression_statement-181-181", type_label=expression_statement];
1167 [label="182_ _;\n1167-expression_statement-183-183", type_label=expression_statement];
1169 [label="184_ modifier onlyReleaseAgent() {\n    if(msg.sender != releaseAgent) {\n        throw;\n    }\n    _;\n  }\n1169-expression_statement-185-190", type_label=expression_statement];
1172 [label="185_ if_msg.sender != releaseAgent\n1172-if-186-188", type_label=if];
1179 [label="186_ throw;\n1179-expression_statement-187-187", type_label=expression_statement];
1181 [label="188_ _;\n1181-expression_statement-189-189", type_label=expression_statement];
1183 [label="190_ transfer\n1183-function_definition-191-193", type_label=function_definition];
1193 [label="190_ canTransfer(msg.sender)\n1193-expression_statement-191-191", type_label=expression_statement];
1205 [label="191_ return super.transfer(_to, _value);\n1205-return-192-192", type_label=return];
1214 [label="193_ transferFrom\n1214-function_definition-194-196", type_label=function_definition];
1228 [label="193_ canTransfer(_from)\n1228-expression_statement-194-194", type_label=expression_statement];
1238 [label="194_ return super.transferFrom(_from, _to, _value);\n1238-return-195-195", type_label=return];
1252 [label="198_ times\n1252-function_definition-199-203", type_label=function_definition];
1267 [label="199_ uint c = a * b;\n1267-new_variable-200-200", type_label=new_variable];
1268 [label="199_ uint c\n1268-new_variable-200-200", type_label=new_variable];
1275 [label="200_ assert(a == 0 || c / a == b);\n1275-expression_statement-201-201", type_label=expression_statement];
1288 [label="201_ return c;\n1288-return-202-202", type_label=return];
1290 [label="203_ minus\n1290-function_definition-204-207", type_label=function_definition];
1305 [label="204_ assert(b <= a);\n1305-expression_statement-205-205", type_label=expression_statement];
1312 [label="205_ return a - b;\n1312-return-206-206", type_label=return];
1316 [label="207_ plus\n1316-function_definition-208-212", type_label=function_definition];
1331 [label="208_ uint c = a + b;\n1331-new_variable-209-209", type_label=new_variable];
1332 [label="208_ uint c\n1332-new_variable-209-209", type_label=new_variable];
1339 [label="209_ assert(c>=a && c>=b);\n1339-expression_statement-210-210", type_label=expression_statement];
1350 [label="210_ return c;\n1350-return-211-211", type_label=return];
1352 [label="212_ assert\n1352-function_definition-213-215", type_label=function_definition];
1360 [label="213_ if\n1360-if-214-214", type_label=if];
1363 [label="213_ throw;\n1363-expression_statement-214-214", type_label=expression_statement];
1379 [label="218_ bool public mintingFinished = false;\n1379-new_variable-219-219", type_label=new_variable];
1386 [label="219_ mapping (address => bool) public mintAgents;\n1386-new_variable-220-220", type_label=new_variable];
1393 [label="220_ mint\n1393-function_definition-221-225", type_label=function_definition];
1403 [label="220_ onlyMintAgent\n1403-expression_statement-221-221", type_label=expression_statement];
1405 [label="220_ canMint\n1405-expression_statement-221-221", type_label=expression_statement];
1409 [label="221_ totalSupply = totalSupply.plus(amount);\n1409-expression_statement-222-222", type_label=expression_statement];
1418 [label="222_ balances[receiver] = balances[receiver].plus(amount);\n1418-expression_statement-223-223", type_label=expression_statement];
1431 [label="223_ Transfer(0, receiver, amount);\n1431-expression_statement-224-224", type_label=expression_statement];
1440 [label="225_ setMintAgent\n1440-function_definition-226-228", type_label=function_definition];
1450 [label="225_ onlyOwner\n1450-expression_statement-226-226", type_label=expression_statement];
1452 [label="225_ canMint\n1452-expression_statement-226-226", type_label=expression_statement];
1456 [label="226_ mintAgents[addr] = state;\n1456-expression_statement-227-227", type_label=expression_statement];
1462 [label="228_ modifier onlyMintAgent() {\n    if(!mintAgents[msg.sender]) {\n        throw;\n    }\n    _;\n  }\n1462-expression_statement-229-234", type_label=expression_statement];
1465 [label="229_ if\n1465-if-230-232", type_label=if];
1473 [label="230_ throw;\n1473-expression_statement-231-231", type_label=expression_statement];
1475 [label="232_ _;\n1475-expression_statement-233-233", type_label=expression_statement];
1477 [label="234_ modifier canMint() {\n    if(mintingFinished) throw;\n    _;\n  }\n1477-expression_statement-235-238", type_label=expression_statement];
1480 [label="235_ if\n1480-if-236-236", type_label=if];
1482 [label="235_ throw;\n1482-expression_statement-236-236", type_label=expression_statement];
1484 [label="236_ _;\n1484-expression_statement-237-237", type_label=expression_statement];
1498 [label="240_ string public name;\n1498-new_variable-241-241", type_label=new_variable];
1503 [label="241_ string public symbol;\n1503-new_variable-242-242", type_label=new_variable];
1508 [label="242_ uint public decimals;\n1508-new_variable-243-243", type_label=new_variable];
1513 [label="243_ CrowdsaleToken\n1513-function_definition-244-252", type_label=function_definition];
1531 [label="244_ UpgradeableToken(msg.sender)\n1531-expression_statement-245-245", type_label=expression_statement];
1538 [label="245_ owner = msg.sender;\n1538-expression_statement-246-246", type_label=expression_statement];
1544 [label="246_ name = _name;\n1544-expression_statement-247-247", type_label=expression_statement];
1548 [label="247_ symbol = _symbol;\n1548-expression_statement-248-248", type_label=expression_statement];
1552 [label="248_ totalSupply = _initialSupply;\n1552-expression_statement-249-249", type_label=expression_statement];
1556 [label="249_ decimals = _decimals;\n1556-expression_statement-250-250", type_label=expression_statement];
1560 [label="250_ balances[owner] = totalSupply;\n1560-expression_statement-251-251", type_label=expression_statement];
1566 [label="252_ releaseTokenTransfer\n1566-function_definition-253-256", type_label=function_definition];
1569 [label="252_ onlyReleaseAgent\n1569-expression_statement-253-253", type_label=expression_statement];
1572 [label="253_ mintingFinished = true;\n1572-expression_statement-254-254", type_label=expression_statement];
1577 [label="254_ super.releaseTokenTransfer();\n1577-expression_statement-255-255", type_label=expression_statement];
1582 [label="256_ canUpgrade\n1582-function_definition-257-259", type_label=function_definition];
1585 [label="256_ constant\n1585-expression_statement-257-257", type_label=expression_statement];
1592 [label="257_ return released;\n1592-return-258-258", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
385;
1049;
1365;
122 -> 138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
138 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
159 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
161 -> 177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
177 -> 184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
184 -> 192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
192 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
205 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
207 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
234 -> 250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
250 -> 258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
258 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
271 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
296 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
321 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
346 -> 364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
379 -> 383  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
379 -> 385  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
383 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
394 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 426  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
415 -> 428  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
426 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
452 -> 469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
496 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
516 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
554 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
569 -> 578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
578 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
581 -> 595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
595 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
599 -> 615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
615 -> 625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
625 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
636 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
639 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
671 -> 681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
681 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
701 -> 706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
706 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
744 -> 751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
755 -> 763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
771 -> 786  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
771 -> 788  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
786 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 792  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
788 -> 794  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
792 -> 794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
794 -> 811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
811 -> 820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
820 -> 829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
829 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
851 -> 889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
859 -> 864  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
859 -> 866  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
864 -> 866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
866 -> 870  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
866 -> 872  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
870 -> 872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
872 -> 878  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
872 -> 880  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
878 -> 880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
880 -> 887  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
880 -> 889  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
887 -> 889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
889 -> 896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
896 -> 902  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
896 -> 904  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
902 -> 904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 911  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
904 -> 913  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
911 -> 913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 933  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
929 -> 937  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
933 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
937 -> 943  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
937 -> 947  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
943 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
947 -> 951  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
947 -> 955  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
951 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
955 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
959 -> 981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
967 -> 971  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
967 -> 973  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
971 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
973 -> 979  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
973 -> 981  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
979 -> 981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
995 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1006 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1018 -> 1025  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1018 -> 1027  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1025 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 1045  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1038 -> 1049  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1045 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1058 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1070 -> 1077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1088  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1084 -> 1096  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1088 -> 1094  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1088 -> 1096  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1094 -> 1096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1098 -> 1113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1104 -> 1106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1117 -> 1136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1127 -> 1129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1142 -> 1148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1153 -> 1169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1160 -> 1165  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1160 -> 1167  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1165 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1172 -> 1179  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1172 -> 1181  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1179 -> 1181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1183 -> 1205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1205 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1214 -> 1238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1238 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1252 -> 1267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1267 -> 1275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1275 -> 1288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1288 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1290 -> 1305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1305 -> 1312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1312 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1316 -> 1331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 1339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1339 -> 1350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1350 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1360 -> 1363  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1360 -> 1365  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1363 -> 1365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1379 -> 1386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1393 -> 1409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1403 -> 1405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1409 -> 1418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1418 -> 1431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1440 -> 1456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1450 -> 1452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1462 -> 1477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1465 -> 1473  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1465 -> 1475  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1473 -> 1475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1480 -> 1482  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1480 -> 1484  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1482 -> 1484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1498 -> 1503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1503 -> 1508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1513 -> 1538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1538 -> 1544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1544 -> 1548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1548 -> 1552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1552 -> 1556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1556 -> 1560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1566 -> 1572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1572 -> 1577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1582 -> 1592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1592 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
