digraph  {
12 [label="2_ address public owner;\n12-new_variable-3-3", type_label=new_variable];
19 [label="4_ owner = msg.sender;\n19-expression_statement-5-5", type_label=expression_statement];
25 [label="6_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n25-expression_statement-7-10", type_label=expression_statement];
28 [label="7_ require(msg.sender == owner);\n28-expression_statement-8-8", type_label=expression_statement];
37 [label="8_ _;\n37-expression_statement-9-9", type_label=expression_statement];
49 [label="14_ bool public paused = false;\n49-new_variable-15-15", type_label=new_variable];
56 [label="15_ modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n56-expression_statement-16-19", type_label=expression_statement];
59 [label="16_ require(!paused);\n59-expression_statement-17-17", type_label=expression_statement];
65 [label="17_ _;\n65-expression_statement-18-18", type_label=expression_statement];
67 [label="19_ modifier whenPaused() {\n    require(paused);\n    _;\n  }\n67-expression_statement-20-23", type_label=expression_statement];
70 [label="20_ require(paused);\n70-expression_statement-21-21", type_label=expression_statement];
75 [label="21_ _;\n75-expression_statement-22-22", type_label=expression_statement];
77 [label="23_ pause\n77-function_definition-24-27", type_label=function_definition];
80 [label="23_ onlyOwner\n80-expression_statement-24-24", type_label=expression_statement];
82 [label="23_ whenNotPaused\n82-expression_statement-24-24", type_label=expression_statement];
85 [label="24_ paused = true;\n85-expression_statement-25-25", type_label=expression_statement];
92 [label="27_ unpause\n92-function_definition-28-31", type_label=function_definition];
95 [label="27_ onlyOwner\n95-expression_statement-28-28", type_label=expression_statement];
97 [label="27_ whenPaused\n97-expression_statement-28-28", type_label=expression_statement];
100 [label="28_ paused = false;\n100-expression_statement-29-29", type_label=expression_statement];
110 [label="33_ safeMul\n110-function_definition-34-38", type_label=function_definition];
127 [label="34_ uint c = a * b;\n127-new_variable-35-35", type_label=new_variable];
128 [label="34_ uint c\n128-new_variable-35-35", type_label=new_variable];
135 [label="35_ assert(a == 0 || c / a == b);\n135-expression_statement-36-36", type_label=expression_statement];
148 [label="36_ return c;\n148-return-37-37", type_label=return];
150 [label="38_ safeDiv\n150-function_definition-39-42", type_label=function_definition];
167 [label="39_ uint c = a / b;\n167-new_variable-40-40", type_label=new_variable];
168 [label="39_ uint c\n168-new_variable-40-40", type_label=new_variable];
175 [label="40_ return c;\n175-return-41-41", type_label=return];
177 [label="42_ safeSub\n177-function_definition-43-46", type_label=function_definition];
194 [label="43_ assert(b <= a);\n194-expression_statement-44-44", type_label=expression_statement];
201 [label="44_ return a - b;\n201-return-45-45", type_label=return];
205 [label="46_ safeAdd\n205-function_definition-47-51", type_label=function_definition];
222 [label="47_ uint c = a + b;\n222-new_variable-48-48", type_label=new_variable];
223 [label="47_ uint c\n223-new_variable-48-48", type_label=new_variable];
230 [label="48_ assert(c >= a);\n230-expression_statement-49-49", type_label=expression_statement];
237 [label="49_ return c;\n237-return-50-50", type_label=return];
239 [label="51_ max64\n239-function_definition-52-54", type_label=function_definition];
256 [label="52_ return a >= b ? a : b;\n256-return-53-53", type_label=return];
263 [label="54_ min64\n263-function_definition-55-57", type_label=function_definition];
280 [label="55_ return a < b ? a : b;\n280-return-56-56", type_label=return];
287 [label="57_ max256\n287-function_definition-58-60", type_label=function_definition];
304 [label="58_ return a >= b ? a : b;\n304-return-59-59", type_label=return];
311 [label="60_ min256\n311-function_definition-61-63", type_label=function_definition];
328 [label="61_ return a < b ? a : b;\n328-return-62-62", type_label=return];
343 [label="66_ bool public stopped = false;\n343-new_variable-67-67", type_label=new_variable];
350 [label="67_ modifier whenNotStopped() {\n    require(!stopped);\n    _;\n  }\n350-expression_statement-68-71", type_label=expression_statement];
353 [label="68_ require(!stopped);\n353-expression_statement-69-69", type_label=expression_statement];
359 [label="69_ _;\n359-expression_statement-70-70", type_label=expression_statement];
361 [label="71_ modifier whenStopped() {\n    require(stopped);\n    _;\n  }\n361-expression_statement-72-75", type_label=expression_statement];
364 [label="72_ require(stopped);\n364-expression_statement-73-73", type_label=expression_statement];
369 [label="73_ _;\n369-expression_statement-74-74", type_label=expression_statement];
371 [label="75_ stop\n371-function_definition-76-79", type_label=function_definition];
374 [label="75_ onlyOwner\n374-expression_statement-76-76", type_label=expression_statement];
376 [label="75_ whenNotStopped\n376-expression_statement-76-76", type_label=expression_statement];
379 [label="76_ stopped = true;\n379-expression_statement-77-77", type_label=expression_statement];
395 [label="81_ uint public commissionFee;\n395-new_variable-82-82", type_label=new_variable];
400 [label="82_ uint public commissionToWithdraw;\n400-new_variable-83-83", type_label=new_variable];
405 [label="83_ address public verifier;\n405-new_variable-84-84", type_label=new_variable];
482 [label="109_ struct Transfer {\n    address from;\n    uint amount;  \n  }\n482-expression_statement-110-113", type_label=expression_statement];
492 [label="113_ mapping (address => Transfer) transferDct;\n492-new_variable-114-114", type_label=new_variable];
509 [label="115_ commissionFee = _commissionFee;\n509-expression_statement-116-116", type_label=expression_statement];
513 [label="116_ verifier = _verifier;\n513-expression_statement-117-117", type_label=expression_statement];
517 [label="118_ modifier onlyVerifier() {\n    require(msg.sender == verifier);\n    _;\n  }\n517-expression_statement-119-122", type_label=expression_statement];
520 [label="119_ require(msg.sender == verifier);\n520-expression_statement-120-120", type_label=expression_statement];
529 [label="120_ _;\n529-expression_statement-121-121", type_label=expression_statement];
531 [label="122_ deposit\n531-function_definition-123-139", type_label=function_definition];
538 [label="124_ whenNotPaused\n538-expression_statement-125-125", type_label=expression_statement];
540 [label="125_ whenNotStopped\n540-expression_statement-126-126", type_label=expression_statement];
548 [label="129_ require(transferDct[_transitAddress].amount == 0);\n548-expression_statement-130-130", type_label=expression_statement];
559 [label="130_ require(msg.value > commissionFee);\n559-expression_statement-131-131", type_label=expression_statement];
568 [label="131_ transferDct[_transitAddress] = Transfer(\n					    msg.sender,\n					    safeSub(msg.value, commissionFee) \n					    );\n568-expression_statement-132-135", type_label=expression_statement];
588 [label="135_ commissionToWithdraw = safeAdd(commissionToWithdraw, commissionFee);\n588-expression_statement-136-136", type_label=expression_statement];
611 [label="137_ return true;\n611-return-138-138", type_label=return];
614 [label="139_ changeFixedCommissionFee\n614-function_definition-140-151", type_label=function_definition];
621 [label="141_ whenNotPaused\n621-expression_statement-142-142", type_label=expression_statement];
623 [label="142_ whenNotStopped\n623-expression_statement-143-143", type_label=expression_statement];
625 [label="143_ onlyOwner\n625-expression_statement-144-144", type_label=expression_statement];
633 [label="146_ uint oldCommissionFee = commissionFee;\n633-new_variable-147-147", type_label=new_variable];
634 [label="146_ uint oldCommissionFee\n634-new_variable-147-147", type_label=new_variable];
639 [label="147_ commissionFee = _newCommissionFee;\n639-expression_statement-148-148", type_label=expression_statement];
649 [label="149_ return true;\n649-return-150-150", type_label=return];
652 [label="151_ changeVerifier\n652-function_definition-152-163", type_label=function_definition];
659 [label="153_ whenNotPaused\n659-expression_statement-154-154", type_label=expression_statement];
661 [label="154_ whenNotStopped\n661-expression_statement-155-155", type_label=expression_statement];
663 [label="155_ onlyOwner\n663-expression_statement-156-156", type_label=expression_statement];
671 [label="158_ address oldVerifier = verifier;\n671-new_variable-159-159", type_label=new_variable];
672 [label="158_ address oldVerifier\n672-new_variable-159-159", type_label=new_variable];
677 [label="159_ verifier = _newVerifier;\n677-expression_statement-160-160", type_label=expression_statement];
687 [label="161_ return true;\n687-return-162-162", type_label=return];
690 [label="163_ withdrawCommission\n690-function_definition-164-174", type_label=function_definition];
693 [label="165_ whenNotPaused\n693-expression_statement-166-166", type_label=expression_statement];
701 [label="168_ uint commissionToTransfer = commissionToWithdraw;\n701-new_variable-169-169", type_label=new_variable];
702 [label="168_ uint commissionToTransfer\n702-new_variable-169-169", type_label=new_variable];
707 [label="169_ commissionToWithdraw = 0;\n707-expression_statement-170-170", type_label=expression_statement];
711 [label="170_ owner.transfer(commissionToTransfer);\n711-expression_statement-171-171", type_label=expression_statement];
722 [label="172_ return true;\n722-return-173-173", type_label=return];
725 [label="174_ getTransfer\n725-function_definition-175-189", type_label=function_definition];
732 [label="176_ constant\n732-expression_statement-177-177", type_label=expression_statement];
748 [label="182_ Transfer memory transfer = transferDct[_transitAddress];\n748-new_variable-183-183", type_label=new_variable];
749 [label="182_ Transfer memory transfer\n749-new_variable-183-183", type_label=new_variable];
757 [label="183_ return (\n	    _transitAddress,\n	    transfer.from,\n	        transfer.amount\n	    );\n757-return-184-188", type_label=return];
766 [label="189_ cancelTransfer\n766-function_definition-190-197", type_label=function_definition];
779 [label="190_ Transfer memory transferOrder = transferDct[_transitAddress];\n779-new_variable-191-191", type_label=new_variable];
780 [label="190_ Transfer memory transferOrder\n780-new_variable-191-191", type_label=new_variable];
788 [label="191_ require(msg.sender == transferOrder.from);\n788-expression_statement-192-192", type_label=expression_statement];
799 [label="192_ delete transferDct[_transitAddress];\n799-expression_statement-193-193", type_label=expression_statement];
804 [label="193_ msg.sender.transfer(transferOrder.amount);\n804-expression_statement-194-194", type_label=expression_statement];
823 [label="195_ return true;\n823-return-196-196", type_label=return];
826 [label="197_ verifySignature\n826-function_definition-198-209", type_label=function_definition];
856 [label="205_ bytes32 prefixedHash = keccak256(\"\x19Ethereum Signed Message:\n32\", _recipient);\n856-new_variable-206-206", type_label=new_variable];
857 [label="205_ bytes32 prefixedHash\n857-new_variable-206-206", type_label=new_variable];
868 [label="206_ address retAddr = ecrecover(prefixedHash, _v, _r, _s);\n868-new_variable-207-207", type_label=new_variable];
869 [label="206_ address retAddr\n869-new_variable-207-207", type_label=new_variable];
883 [label="207_ return retAddr == _transitAddress;\n883-return-208-208", type_label=return];
887 [label="209_ verifyTransferSignature\n887-function_definition-210-220", type_label=function_definition];
917 [label="217_ return (verifySignature(_transitAddress,\n			    _recipient, _v, _r, _s));\n917-return-218-219", type_label=return];
931 [label="220_ withdraw\n931-function_definition-221-241", type_label=function_definition];
954 [label="228_ onlyVerifier\n954-expression_statement-229-229", type_label=expression_statement];
956 [label="229_ whenNotPaused\n956-expression_statement-230-230", type_label=expression_statement];
958 [label="230_ whenNotStopped\n958-expression_statement-231-231", type_label=expression_statement];
966 [label="233_ Transfer memory transferOrder = transferDct[_transitAddress];\n966-new_variable-234-234", type_label=new_variable];
967 [label="233_ Transfer memory transferOrder\n967-new_variable-234-234", type_label=new_variable];
975 [label="234_ require(verifySignature(_transitAddress,\n		     _recipient, _v, _r, _s ));\n975-expression_statement-235-236", type_label=expression_statement];
991 [label="236_ delete transferDct[_transitAddress];\n991-expression_statement-237-237", type_label=expression_statement];
996 [label="237_ _recipient.transfer(transferOrder.amount);\n996-expression_statement-238-238", type_label=expression_statement];
1019 [label="239_ return true;\n1019-return-240-240", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
28 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
49 -> 56  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
56 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
59 -> 65  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
70 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 82  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
92 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 97  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
110 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
135 -> 148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
148 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
150 -> 167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
167 -> 175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
175 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
177 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
194 -> 201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
201 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
205 -> 222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
222 -> 230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
237 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
239 -> 256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
256 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
263 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
287 -> 304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
311 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
328 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
343 -> 350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
374 -> 376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
520 -> 529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
538 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
548 -> 559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
614 -> 633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
623 -> 625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
633 -> 639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
649 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
652 -> 671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
659 -> 661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
661 -> 663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
671 -> 677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
687 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
690 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
722 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
725 -> 748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
748 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
766 -> 779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
779 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
823 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
826 -> 856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
856 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
887 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
917 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
931 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
954 -> 956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
956 -> 958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
966 -> 975  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
975 -> 991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
991 -> 996  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
