digraph  {
12 [label="2_ mul\n12-function_definition-3-10", type_label=function_definition];
29 [label="3_ if_a == 0\n29-if-4-6", type_label=if];
34 [label="4_ return 0;\n34-return-5-5", type_label=return];
36 [label="6_ uint256 c = a * b;\n36-new_variable-7-7", type_label=new_variable];
37 [label="6_ uint256 c\n37-new_variable-7-7", type_label=new_variable];
44 [label="7_ assert(c / a == b);\n44-expression_statement-8-8", type_label=expression_statement];
53 [label="8_ return c;\n53-return-9-9", type_label=return];
55 [label="10_ div\n55-function_definition-11-14", type_label=function_definition];
72 [label="11_ uint256 c = a / b;\n72-new_variable-12-12", type_label=new_variable];
73 [label="11_ uint256 c\n73-new_variable-12-12", type_label=new_variable];
80 [label="12_ return c;\n80-return-13-13", type_label=return];
82 [label="14_ sub\n82-function_definition-15-18", type_label=function_definition];
99 [label="15_ assert(b <= a);\n99-expression_statement-16-16", type_label=expression_statement];
106 [label="16_ return a - b;\n106-return-17-17", type_label=return];
110 [label="18_ add\n110-function_definition-19-23", type_label=function_definition];
127 [label="19_ uint256 c = a + b;\n127-new_variable-20-20", type_label=new_variable];
128 [label="19_ uint256 c\n128-new_variable-20-20", type_label=new_variable];
135 [label="20_ assert(c >= a);\n135-expression_statement-21-21", type_label=expression_statement];
142 [label="21_ return c;\n142-return-22-22", type_label=return];
147 [label="25_ totalSupply\n147-function_definition-26-26", type_label=function_definition];
156 [label="26_ balanceOf\n156-function_definition-27-27", type_label=function_definition];
168 [label="27_ allowance\n168-function_definition-28-28", type_label=function_definition];
184 [label="28_ transferFrom\n184-function_definition-29-29", type_label=function_definition];
204 [label="29_ approve\n204-function_definition-30-30", type_label=function_definition];
220 [label="30_ transfer\n220-function_definition-31-31", type_label=function_definition];
275 [label="37_ string public constant name = \"FENIX\";\n275-new_variable-38-38", type_label=new_variable];
282 [label="38_ string public constant symbol = \"FNX\";\n282-new_variable-39-39", type_label=new_variable];
289 [label="39_ uint8 public constant decimals = 18;\n289-new_variable-40-40", type_label=new_variable];
295 [label="40_ uint public _totalsupply = 1000000000 * 10 ** 18;\n295-new_variable-41-41", type_label=new_variable];
305 [label="41_ address public owner;\n305-new_variable-42-42", type_label=new_variable];
310 [label="42_ uint256 public _price_tokn = 100;\n310-new_variable-43-43", type_label=new_variable];
316 [label="43_ uint256 no_of_tokens;\n316-new_variable-44-44", type_label=new_variable];
320 [label="44_ uint256 total_token;\n320-new_variable-45-45", type_label=new_variable];
324 [label="45_ bool stopped = false;\n324-new_variable-46-46", type_label=new_variable];
330 [label="46_ uint256 public ico_startdate;\n330-new_variable-47-47", type_label=new_variable];
335 [label="47_ uint256 public ico_enddate;\n335-new_variable-48-48", type_label=new_variable];
340 [label="48_ uint256 public preico_startdate;\n340-new_variable-49-49", type_label=new_variable];
345 [label="49_ uint256 public preico_enddate;\n345-new_variable-50-50", type_label=new_variable];
350 [label="50_ bool public icoRunningStatus;\n350-new_variable-51-51", type_label=new_variable];
355 [label="51_ bool public lockstatus;\n355-new_variable-52-52", type_label=new_variable];
360 [label="52_ mapping(address => uint) balances;\n360-new_variable-53-53", type_label=new_variable];
366 [label="53_ mapping(address => mapping(address => uint)) allowed;\n366-new_variable-54-54", type_label=new_variable];
374 [label="54_ address public ethFundMain = 0xBe80a978364649422708470c979435f43e027209;\n374-new_variable-55-55", type_label=new_variable];
380 [label="55_ uint256 public ethreceived;\n380-new_variable-56-56", type_label=new_variable];
385 [label="56_ uint bonusCalculationFactor;\n385-new_variable-57-57", type_label=new_variable];
389 [label="57_ uint256 public pre_minContribution = 100000;\n389-new_variable-58-58", type_label=new_variable];
395 [label="58_ uint256 ContributionAmount;\n395-new_variable-59-59", type_label=new_variable];
399 [label="59_ address public admin;\n399-new_variable-60-60", type_label=new_variable];
404 [label="60_ uint public priceFactor;\n404-new_variable-61-61", type_label=new_variable];
409 [label="61_ mapping(address => uint256) availTokens;\n409-new_variable-62-62", type_label=new_variable];
421 [label="68_ Stages public stage;\n421-new_variable-69-69", type_label=new_variable];
427 [label="69_ modifier atStage(Stages _stage) {\n        require (stage == _stage);\n        _;\n    }\n427-expression_statement-70-73", type_label=expression_statement];
435 [label="70_ require (stage == _stage);\n435-expression_statement-71-71", type_label=expression_statement];
442 [label="71_ _;\n442-expression_statement-72-72", type_label=expression_statement];
444 [label="73_ modifier onlyOwner(){\n        require (msg.sender == owner);\n     _;\n    }\n444-expression_statement-74-77", type_label=expression_statement];
447 [label="74_ require (msg.sender == owner);\n447-expression_statement-75-75", type_label=expression_statement];
456 [label="75_ _;\n456-expression_statement-76-76", type_label=expression_statement];
464 [label="79_ require(EtherPriceFactor != 0);\n464-expression_statement-80-80", type_label=expression_statement];
471 [label="80_ owner = msg.sender;\n471-expression_statement-81-81", type_label=expression_statement];
477 [label="81_ balances[owner] = 890000000 * 10 ** 18;\n477-expression_statement-82-82", type_label=expression_statement];
487 [label="82_ stage = Stages.NOTSTARTED;\n487-expression_statement-83-83", type_label=expression_statement];
493 [label="83_ icoRunningStatus =true;\n493-expression_statement-84-84", type_label=expression_statement];
498 [label="84_ lockstatus = true;\n498-expression_statement-85-85", type_label=expression_statement];
503 [label="85_ priceFactor = EtherPriceFactor;\n503-expression_statement-86-86", type_label=expression_statement];
521 [label="90_ require(stage != Stages.ENDED);\n521-expression_statement-91-91", type_label=expression_statement];
530 [label="91_ require(!stopped && msg.sender != owner);\n530-expression_statement-92-92", type_label=expression_statement];
542 [label="92_ if_stage == Stages.PREICO && now <= preico_enddate\n542-if-93-103", type_label=if];
553 [label="93_ require((msg.value).mul(priceFactor.mul(100)) >= (pre_minContribution.mul(10 ** 18)));\n553-expression_statement-94-94", type_label=expression_statement];
581 [label="94_ y();\n581-expression_statement-95-95", type_label=expression_statement];
584 [label="96_ if_stage == Stages.ICO && now <= ico_enddate\n584-if-97-103", type_label=if];
595 [label="97_ _price_tokn= getCurrentTokenPrice();\n595-expression_statement-98-98", type_label=expression_statement];
600 [label="98_ y();\n600-expression_statement-99-99", type_label=expression_statement];
606 [label="104_ getCurrentTokenPrice\n606-function_definition-105-120", type_label=function_definition];
614 [label="106_ uint price_tokn;\n614-new_variable-107-107", type_label=new_variable];
615 [label="106_ uint price_tokn\n615-new_variable-107-107", type_label=new_variable];
619 [label="107_ bonusCalculationFactor = (block.timestamp.sub(ico_startdate)).div(3600);\n619-expression_statement-108-108", type_label=expression_statement];
636 [label="108_ if_bonusCalculationFactor== 0\n636-if-109-118", type_label=if];
640 [label="109_ price_tokn = 70;\n640-expression_statement-110-110", type_label=expression_statement];
644 [label="110_ if_bonusCalculationFactor >= 1 && bonusCalculationFactor < 24\n644-if-111-118", type_label=if];
652 [label="111_ price_tokn = 75;\n652-expression_statement-112-112", type_label=expression_statement];
656 [label="112_ if_bonusCalculationFactor >= 24 && bonusCalculationFactor < 168\n656-if-113-118", type_label=if];
664 [label="113_ price_tokn = 80;\n664-expression_statement-114-114", type_label=expression_statement];
668 [label="114_ if_bonusCalculationFactor >= 168 && bonusCalculationFactor < 336\n668-if-115-118", type_label=if];
676 [label="115_ price_tokn = 90;\n676-expression_statement-116-116", type_label=expression_statement];
680 [label="116_ if_bonusCalculationFactor >= 336\n680-if-117-118", type_label=if];
684 [label="117_ price_tokn = 100;\n684-expression_statement-118-118", type_label=expression_statement];
688 [label="118_ return price_tokn;\n688-return-119-119", type_label=return];
690 [label="120_ y\n690-function_definition-121-130", type_label=function_definition];
694 [label="121_ no_of_tokens = ((msg.value).mul(priceFactor.mul(100))).div(_price_tokn);\n694-expression_statement-122-122", type_label=expression_statement];
717 [label="122_ if__price_tokn >=80\n717-if-123-125", type_label=if];
722 [label="123_ availTokens[msg.sender] = availTokens[msg.sender].add(no_of_tokens);\n722-expression_statement-124-124", type_label=expression_statement];
739 [label="125_ ethreceived = ethreceived.add(msg.value);\n739-expression_statement-126-126", type_label=expression_statement];
750 [label="126_ balances[address(this)] = (balances[address(this)]).sub(no_of_tokens);\n750-expression_statement-127-127", type_label=expression_statement];
768 [label="127_ balances[msg.sender] = balances[msg.sender].add(no_of_tokens);\n768-expression_statement-128-128", type_label=expression_statement];
797 [label="130_ StopICO\n797-function_definition-131-133", type_label=function_definition];
800 [label="130_ onlyOwner\n800-expression_statement-131-131", type_label=expression_statement];
803 [label="131_ stopped = true;\n803-expression_statement-132-132", type_label=expression_statement];
808 [label="133_ releaseICO\n808-function_definition-134-137", type_label=function_definition];
811 [label="133_ onlyOwner\n811-expression_statement-134-134", type_label=expression_statement];
814 [label="135_ stopped = false;\n814-expression_statement-136-136", type_label=expression_statement];
819 [label="137_ setpricefactor\n819-function_definition-138-141", type_label=function_definition];
826 [label="137_ onlyOwner\n826-expression_statement-138-138", type_label=expression_statement];
829 [label="139_ priceFactor = newPricefactor;\n829-expression_statement-140-140", type_label=expression_statement];
833 [label="141_ setEthmainAddress\n833-function_definition-142-145", type_label=function_definition];
840 [label="141_ onlyOwner\n840-expression_statement-142-142", type_label=expression_statement];
843 [label="143_ ethFundMain = newEthfundaddress;\n843-expression_statement-144-144", type_label=expression_statement];
847 [label="145_ setAdminAddress\n847-function_definition-146-149", type_label=function_definition];
854 [label="145_ onlyOwner\n854-expression_statement-146-146", type_label=expression_statement];
857 [label="147_ admin = newAdminaddress;\n857-expression_statement-148-148", type_label=expression_statement];
861 [label="149_ start_PREICO\n861-function_definition-150-159", type_label=function_definition];
864 [label="149_ onlyOwner\n864-expression_statement-150-150", type_label=expression_statement];
866 [label="149_ atStage(Stages.NOTSTARTED)\n866-expression_statement-150-150", type_label=expression_statement];
873 [label="151_ stage = Stages.PREICO;\n873-expression_statement-152-152", type_label=expression_statement];
879 [label="152_ stopped = false;\n879-expression_statement-153-153", type_label=expression_statement];
884 [label="153_ _price_tokn = 70;\n884-expression_statement-154-154", type_label=expression_statement];
888 [label="154_ balances[address(this)] =10000000 * 10 ** 18 ;\n888-expression_statement-155-155", type_label=expression_statement];
900 [label="155_ preico_startdate = now;\n900-expression_statement-156-156", type_label=expression_statement];
904 [label="156_ preico_enddate = now + 7 days;\n904-expression_statement-157-157", type_label=expression_statement];
925 [label="159_ start_ICO\n925-function_definition-160-168", type_label=function_definition];
928 [label="159_ onlyOwner\n928-expression_statement-160-160", type_label=expression_statement];
930 [label="159_ atStage(Stages.PREICO)\n930-expression_statement-160-160", type_label=expression_statement];
937 [label="161_ stage = Stages.ICO;\n937-expression_statement-162-162", type_label=expression_statement];
943 [label="162_ stopped = false;\n943-expression_statement-163-163", type_label=expression_statement];
948 [label="163_ balances[address(this)] =balances[address(this)].add(100000000 * 10 ** 18);\n948-expression_statement-164-164", type_label=expression_statement];
969 [label="164_ ico_startdate = now;\n969-expression_statement-165-165", type_label=expression_statement];
973 [label="165_ ico_enddate = now + 21 days;\n973-expression_statement-166-166", type_label=expression_statement];
994 [label="168_ end_ICO\n994-function_definition-169-178", type_label=function_definition];
997 [label="168_ onlyOwner\n997-expression_statement-169-169", type_label=expression_statement];
999 [label="168_ atStage(Stages.ICO)\n999-expression_statement-169-169", type_label=expression_statement];
1006 [label="170_ require(now > ico_enddate);\n1006-expression_statement-171-171", type_label=expression_statement];
1013 [label="171_ stage = Stages.ENDED;\n1013-expression_statement-172-172", type_label=expression_statement];
1019 [label="172_ icoRunningStatus = false;\n1019-expression_statement-173-173", type_label=expression_statement];
1024 [label="173_ uint256 x = balances[address(this)];\n1024-new_variable-174-174", type_label=new_variable];
1025 [label="173_ uint256 x\n1025-new_variable-174-174", type_label=new_variable];
1034 [label="174_ balances[owner] = (balances[owner]).add( balances[address(this)]);\n1034-expression_statement-175-175", type_label=expression_statement];
1052 [label="175_ balances[address(this)] = 0;\n1052-expression_statement-176-176", type_label=expression_statement];
1070 [label="178_ fixSpecications\n1070-function_definition-179-182", type_label=function_definition];
1077 [label="178_ onlyOwner\n1077-expression_statement-179-179", type_label=expression_statement];
1080 [label="180_ icoRunningStatus = RunningStatusICO;\n1080-expression_statement-181-181", type_label=expression_statement];
1084 [label="182_ removeLocking\n1084-function_definition-183-186", type_label=function_definition];
1091 [label="182_ onlyOwner\n1091-expression_statement-183-183", type_label=expression_statement];
1094 [label="184_ lockstatus = RunningStatusLock;\n1094-expression_statement-185-185", type_label=expression_statement];
1098 [label="186_ balanceDetails\n1098-function_definition-187-193", type_label=function_definition];
1104 [label="187_ constant\n1104-expression_statement-188-188", type_label=expression_statement];
1115 [label="191_ return (availTokens[investor], balances[investor]) ;\n1115-return-192-192", type_label=return];
1123 [label="193_ totalSupply\n1123-function_definition-194-196", type_label=function_definition];
1133 [label="194_ total_Supply = _totalsupply;\n1133-expression_statement-195-195", type_label=expression_statement];
1137 [label="196_ balanceOf\n1137-function_definition-197-199", type_label=function_definition];
1151 [label="197_ return balances[_owner];\n1151-return-198-198", type_label=return];
1155 [label="199_ transferFrom\n1155-function_definition-200-208", type_label=function_definition];
1176 [label="200_ require(_to != 0x0);\n1176-expression_statement-201-201", type_label=expression_statement];
1183 [label="201_ require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\n1183-expression_statement-202-202", type_label=expression_statement];
1206 [label="202_ balances[_from] = (balances[_from]).sub(_amount);\n1206-expression_statement-203-203", type_label=expression_statement];
1220 [label="203_ allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\n1220-expression_statement-204-204", type_label=expression_statement];
1242 [label="204_ balances[_to] = (balances[_to]).add(_amount);\n1242-expression_statement-205-205", type_label=expression_statement];
1264 [label="206_ return true;\n1264-return-207-207", type_label=return];
1267 [label="208_ approve\n1267-function_definition-209-217", type_label=function_definition];
1284 [label="209_ require(_spender != 0x0);\n1284-expression_statement-210-210", type_label=expression_statement];
1291 [label="210_ if_!icoRunningStatus && lockstatus\n1291-if-211-213", type_label=if];
1297 [label="211_ require(_amount <= availTokens[msg.sender]);\n1297-expression_statement-212-212", type_label=expression_statement];
1308 [label="213_ allowed[msg.sender][_spender] = _amount;\n1308-expression_statement-214-214", type_label=expression_statement];
1328 [label="215_ return true;\n1328-return-216-216", type_label=return];
1331 [label="217_ allowance\n1331-function_definition-218-221", type_label=function_definition];
1349 [label="218_ require(_owner != 0x0 && _spender != 0x0);\n1349-expression_statement-219-219", type_label=expression_statement];
1360 [label="219_ return allowed[_owner][_spender];\n1360-return-220-220", type_label=return];
1366 [label="221_ transfer\n1366-function_definition-222-252", type_label=function_definition];
1383 [label="222_ if_msg.sender == owner || msg.sender == admin\n1383-if-223-251", type_label=if];
1396 [label="223_ require(balances[msg.sender] >= _amount && _amount >= 0);\n1396-expression_statement-224-224", type_label=expression_statement];
1411 [label="224_ balances[msg.sender] = balances[msg.sender].sub(_amount);\n1411-expression_statement-225-225", type_label=expression_statement];
1428 [label="225_ balances[_to] += _amount;\n1428-expression_statement-226-226", type_label=expression_statement];
1429 [label="225_ balances[_to] += _amount\n1429-expression_statement-226-226", type_label=expression_statement];
1434 [label="226_ availTokens[_to] += _amount;\n1434-expression_statement-227-227", type_label=expression_statement];
1435 [label="226_ availTokens[_to] += _amount\n1435-expression_statement-227-227", type_label=expression_statement];
1450 [label="228_ return true;\n1450-return-229-229", type_label=return];
1453 [label="231_ if_!icoRunningStatus && lockstatus && msg.sender != owner\n1453-if-232-251", type_label=if];
1465 [label="232_ require(availTokens[msg.sender] >= _amount);\n1465-expression_statement-233-233", type_label=expression_statement];
1476 [label="233_ availTokens[msg.sender] -= _amount;\n1476-expression_statement-234-234", type_label=expression_statement];
1477 [label="233_ availTokens[msg.sender] -= _amount\n1477-expression_statement-234-234", type_label=expression_statement];
1484 [label="234_ balances[msg.sender] -= _amount;\n1484-expression_statement-235-235", type_label=expression_statement];
1485 [label="234_ balances[msg.sender] -= _amount\n1485-expression_statement-235-235", type_label=expression_statement];
1492 [label="235_ availTokens[_to] += _amount;\n1492-expression_statement-236-236", type_label=expression_statement];
1493 [label="235_ availTokens[_to] += _amount\n1493-expression_statement-236-236", type_label=expression_statement];
1498 [label="236_ balances[_to] += _amount;\n1498-expression_statement-237-237", type_label=expression_statement];
1499 [label="236_ balances[_to] += _amount\n1499-expression_statement-237-237", type_label=expression_statement];
1514 [label="238_ return true;\n1514-return-239-239", type_label=return];
1517 [label="240_ if\n1517-if-241-251", type_label=if];
1521 [label="242_ require(balances[msg.sender] >= _amount && _amount >= 0);\n1521-expression_statement-243-243", type_label=expression_statement];
1536 [label="243_ balances[msg.sender] = (balances[msg.sender]).sub(_amount);\n1536-expression_statement-244-244", type_label=expression_statement];
1554 [label="244_ balances[_to] = (balances[_to]).add(_amount);\n1554-expression_statement-245-245", type_label=expression_statement];
1578 [label="246_ return true;\n1578-return-247-247", type_label=return];
1584 [label="252_ transferOwnership\n1584-function_definition-253-260", type_label=function_definition];
1591 [label="252_ onlyOwner\n1591-expression_statement-253-253", type_label=expression_statement];
1594 [label="254_ require( newOwner != 0x0);\n1594-expression_statement-255-255", type_label=expression_statement];
1601 [label="255_ balances[newOwner] = (balances[newOwner]).add(balances[owner]);\n1601-expression_statement-256-256", type_label=expression_statement];
1617 [label="256_ balances[owner] = 0;\n1617-expression_statement-257-257", type_label=expression_statement];
1623 [label="257_ owner = newOwner;\n1623-expression_statement-258-258", type_label=expression_statement];
1639 [label="260_ drain\n1639-function_definition-261-264", type_label=function_definition];
1642 [label="260_ onlyOwner\n1642-expression_statement-261-261", type_label=expression_statement];
1645 [label="261_ address myAddress = this;\n1645-new_variable-262-262", type_label=new_variable];
1646 [label="261_ address myAddress\n1646-new_variable-262-262", type_label=new_variable];
1651 [label="262_ ethFundMain.transfer(myAddress.balance);\n1651-expression_statement-263-263", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
12 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
29 -> 36  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
34 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
36 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
55 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
82 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
110 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
135 -> 142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
142 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
275 -> 282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
282 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
305 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
316 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
324 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
335 -> 340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
340 -> 345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
360 -> 366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
374 -> 380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
380 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
389 -> 395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
399 -> 404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
404 -> 409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
530 -> 542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
542 -> 553  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
542 -> 584  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
553 -> 581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
581 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
584 -> 595  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
595 -> 600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
600 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
614 -> 619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
619 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
636 -> 640  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
636 -> 644  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
640 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
644 -> 652  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
644 -> 656  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
652 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
656 -> 664  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
656 -> 668  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
664 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
668 -> 676  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
668 -> 680  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
676 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 684  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
680 -> 688  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
684 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
690 -> 694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
694 -> 717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
717 -> 722  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
717 -> 739  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
722 -> 739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
739 -> 750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
750 -> 768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
797 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
819 -> 829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
847 -> 857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
864 -> 866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
873 -> 879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
879 -> 884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
884 -> 888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
888 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
925 -> 937  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
928 -> 930  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
937 -> 943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
969 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 1006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
997 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1006 -> 1013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1013 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 1024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1024 -> 1034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1034 -> 1052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1070 -> 1080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1098 -> 1115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1115 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1123 -> 1133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1137 -> 1151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1155 -> 1176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1176 -> 1183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1183 -> 1206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1206 -> 1220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1220 -> 1242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1264 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1267 -> 1284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1284 -> 1291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1291 -> 1297  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1291 -> 1308  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1297 -> 1308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1328 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1331 -> 1349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1349 -> 1360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1360 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1383 -> 1396  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1383 -> 1453  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1396 -> 1411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1411 -> 1428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1428 -> 1434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1450 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1453 -> 1465  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1453 -> 1517  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1465 -> 1476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1476 -> 1484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1484 -> 1492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1492 -> 1498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1514 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1517 -> 1521  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1521 -> 1536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1536 -> 1554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1578 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1584 -> 1594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1594 -> 1601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1601 -> 1617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1617 -> 1623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1639 -> 1645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1645 -> 1651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
