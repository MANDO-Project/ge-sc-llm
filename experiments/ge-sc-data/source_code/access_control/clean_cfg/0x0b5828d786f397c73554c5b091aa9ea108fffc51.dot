digraph  {
12 [label="2_ address public owner;\n12-new_variable-3-3", type_label=new_variable];
27 [label="4_ modifier onlyOwner() { require(msg.sender == owner); _; }\n27-expression_statement-5-5", type_label=expression_statement];
30 [label="4_ require(msg.sender == owner);\n30-expression_statement-5-5", type_label=expression_statement];
39 [label="4_ _;\n39-expression_statement-5-5", type_label=expression_statement];
41 [label="5_ Ownable\n41-function_definition-6-8", type_label=function_definition];
45 [label="6_ owner = msg.sender;\n45-expression_statement-7-7", type_label=expression_statement];
51 [label="8_ transferOwnership\n51-function_definition-9-13", type_label=function_definition];
58 [label="8_ onlyOwner\n58-expression_statement-9-9", type_label=expression_statement];
61 [label="9_ require(newOwner != address(0));\n61-expression_statement-10-10", type_label=expression_statement];
70 [label="10_ owner = newOwner;\n70-expression_statement-11-11", type_label=expression_statement];
74 [label="11_ OwnershipTransferred(owner, newOwner);\n74-expression_statement-12-12", type_label=expression_statement];
87 [label="15_ mapping(address => bool) public managers;\n87-new_variable-16-16", type_label=new_variable];
106 [label="18_ modifier onlyManager() { require(managers[msg.sender]); _; }\n106-expression_statement-19-19", type_label=expression_statement];
109 [label="18_ require(managers[msg.sender]);\n109-expression_statement-19-19", type_label=expression_statement];
118 [label="18_ _;\n118-expression_statement-19-19", type_label=expression_statement];
120 [label="19_ addManager\n120-function_definition-20-24", type_label=function_definition];
126 [label="19_ onlyOwner\n126-expression_statement-20-20", type_label=expression_statement];
130 [label="20_ require(_manager != address(0));\n130-expression_statement-21-21", type_label=expression_statement];
139 [label="21_ managers[_manager] = true;\n139-expression_statement-22-22", type_label=expression_statement];
146 [label="22_ ManagerAdded(_manager);\n146-expression_statement-23-23", type_label=expression_statement];
151 [label="24_ removeManager\n151-function_definition-25-29", type_label=function_definition];
157 [label="24_ onlyOwner\n157-expression_statement-25-25", type_label=expression_statement];
161 [label="25_ require(_manager != address(0));\n161-expression_statement-26-26", type_label=expression_statement];
170 [label="26_ managers[_manager] = false;\n170-expression_statement-27-27", type_label=expression_statement];
177 [label="27_ ManagerRemoved(_manager);\n177-expression_statement-28-28", type_label=expression_statement];
188 [label="31_ struct Picture {\n        string hash;\n        uint32 rows;\n        uint32 cols;\n        uint32 width;\n        uint32 height;\n        string image;\n        string name;\n        string author;\n    }\n188-expression_statement-32-41", type_label=expression_statement];
222 [label="41_ struct Segment {\n        uint32 row;\n        uint32 col;\n        string hash;\n        string image;\n        string email;\n        string login;\n    }\n222-expression_statement-42-49", type_label=expression_statement];
248 [label="49_ mapping(bytes32 => Picture) public pictures;\n248-new_variable-50-50", type_label=new_variable];
256 [label="50_ mapping(bytes32 => mapping(uint32 => mapping(uint32 => Segment))) public segments;\n256-new_variable-51-51", type_label=new_variable];
346 [label="54_ TilcoinStorage\n346-function_definition-55-58", type_label=function_definition];
350 [label="55_ addManager(msg.sender);\n350-expression_statement-56-56", type_label=expression_statement];
357 [label="56_ addManager(0x209eba96c917871f78671a3ed3503ecc4144495c);\n357-expression_statement-57-57", type_label=expression_statement];
362 [label="58_ addPicture\n362-function_definition-59-75", type_label=function_definition];
396 [label="58_ onlyManager\n396-expression_statement-59-59", type_label=expression_statement];
405 [label="59_ bytes32 key = str_to_bytes32(_hash);\n405-new_variable-60-60", type_label=new_variable];
406 [label="59_ bytes32 key\n406-new_variable-60-60", type_label=new_variable];
414 [label="60_ require(!(pictures[key].rows > 0));\n414-expression_statement-61-61", type_label=expression_statement];
427 [label="61_ require(_rows > 0 && _cols > 0 && _width > 0 && _height > 0);\n427-expression_statement-62-62", type_label=expression_statement];
446 [label="62_ pictures[key] = Picture({\n            hash: _hash,\n            rows: _rows,\n            cols: _cols,\n            width: _width,\n            height: _height,\n            image: _image,\n            name: _name,\n            author: _author\n        });\n446-expression_statement-63-72", type_label=expression_statement];
478 [label="72_ AddPicture(key, _rows, _cols, _width, _height, _image, _name, _author);\n478-expression_statement-73-73", type_label=expression_statement];
497 [label="73_ return true;\n497-return-74-74", type_label=return];
500 [label="75_ setSegment\n500-function_definition-76-92", type_label=function_definition];
530 [label="75_ onlyManager\n530-expression_statement-76-76", type_label=expression_statement];
539 [label="76_ bytes32 key = str_to_bytes32(_picture);\n539-new_variable-77-77", type_label=new_variable];
540 [label="76_ bytes32 key\n540-new_variable-77-77", type_label=new_variable];
548 [label="77_ require(pictures[key].rows > 0);\n548-expression_statement-78-78", type_label=expression_statement];
559 [label="78_ require(_row > 0 && _col > 0 && _row <= pictures[key].rows && _col <= pictures[key].cols);\n559-expression_statement-79-79", type_label=expression_statement];
586 [label="79_ require(!(segments[key][_row][_col].row > 0));\n586-expression_statement-80-80", type_label=expression_statement];
603 [label="80_ segments[key][_row][_col] = Segment({\n            row: _row,\n            col: _col,\n            hash: _hash,\n            image: _image,\n            email: _email,\n            login: _login\n        });\n603-expression_statement-81-88", type_label=expression_statement];
633 [label="88_ SetSegment(key, _row, _col, str_to_bytes32(_hash), _image);\n633-expression_statement-89-89", type_label=expression_statement];
649 [label="89_ SegmentOwner(key, _row, _col, _email, _login);\n649-expression_statement-90-90", type_label=expression_statement];
662 [label="90_ return true;\n662-return-91-91", type_label=return];
665 [label="92_ setSegmentOwner\n665-function_definition-93-102", type_label=function_definition];
687 [label="92_ onlyManager\n687-expression_statement-93-93", type_label=expression_statement];
696 [label="93_ bytes32 key = str_to_bytes32(_picture);\n696-new_variable-94-94", type_label=new_variable];
697 [label="93_ bytes32 key\n697-new_variable-94-94", type_label=new_variable];
705 [label="94_ require(pictures[key].rows > 0);\n705-expression_statement-95-95", type_label=expression_statement];
716 [label="95_ require(_row > 0 && _col > 0 && _row <= pictures[key].rows && _col <= pictures[key].cols);\n716-expression_statement-96-96", type_label=expression_statement];
743 [label="96_ require(segments[key][_row][_col].row > 0);\n743-expression_statement-97-97", type_label=expression_statement];
758 [label="97_ segments[key][_row][_col].email = _email;\n758-expression_statement-98-98", type_label=expression_statement];
770 [label="98_ segments[key][_row][_col].login = _login;\n770-expression_statement-99-99", type_label=expression_statement];
782 [label="99_ SegmentOwner(key, _row, _col, _email, _login);\n782-expression_statement-100-100", type_label=expression_statement];
795 [label="100_ return true;\n795-return-101-101", type_label=return];
798 [label="102_ str_to_bytes32\n798-function_definition-103-111", type_label=function_definition];
812 [label="103_ bytes memory tempEmptyStringTest = bytes(source);\n812-new_variable-104-104", type_label=new_variable];
813 [label="103_ bytes memory tempEmptyStringTest\n813-new_variable-104-104", type_label=new_variable];
820 [label="104_ if_tempEmptyStringTest.length == 0\n820-if-105-107", type_label=if];
827 [label="105_ return 0x0;\n827-return-106-106", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
829;
30 -> 39  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
41 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 61  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
61 -> 70  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
70 -> 74  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
222 -> 248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
248 -> 256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
346 -> 350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
362 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
405 -> 414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
414 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
478 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
500 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
548 -> 559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
586 -> 603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
603 -> 633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
633 -> 649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
649 -> 662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
662 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
665 -> 696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
696 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
716 -> 743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
743 -> 758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
770 -> 782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
782 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
795 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
798 -> 812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
812 -> 820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
820 -> 827  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
820 -> 829  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
827 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
