digraph  {
13 [label="2_ address private _owner;\n13-new_variable-3-3", type_label=new_variable];
30 [label="5_ _owner = msg.sender;\n30-expression_statement-6-6", type_label=expression_statement];
44 [label="8_ owner\n44-function_definition-9-11", type_label=function_definition];
53 [label="9_ return _owner;\n53-return-10-10", type_label=return];
55 [label="11_ modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n55-expression_statement-12-15", type_label=expression_statement];
58 [label="12_ require(isOwner());\n58-expression_statement-13-13", type_label=expression_statement];
64 [label="13_ _;\n64-expression_statement-14-14", type_label=expression_statement];
66 [label="15_ isOwner\n66-function_definition-16-18", type_label=function_definition];
75 [label="16_ return msg.sender == _owner;\n75-return-17-17", type_label=return];
81 [label="18_ renounceOwnership\n81-function_definition-19-22", type_label=function_definition];
84 [label="18_ onlyOwner\n84-expression_statement-19-19", type_label=expression_statement];
95 [label="20_ _owner = address(0);\n95-expression_statement-21-21", type_label=expression_statement];
101 [label="22_ transferOwnership\n101-function_definition-23-25", type_label=function_definition];
108 [label="22_ onlyOwner\n108-expression_statement-23-23", type_label=expression_statement];
111 [label="23_ _transferOwnership(newOwner);\n111-expression_statement-24-24", type_label=expression_statement];
116 [label="25_ _transferOwnership\n116-function_definition-26-30", type_label=function_definition];
124 [label="26_ require(newOwner != address(0));\n124-expression_statement-27-27", type_label=expression_statement];
139 [label="28_ _owner = newOwner;\n139-expression_statement-29-29", type_label=expression_statement];
150 [label="33_ struct Role {\n        mapping (address => bool) bearer;\n    }\n150-expression_statement-34-36", type_label=expression_statement];
158 [label="36_ add\n158-function_definition-37-41", type_label=function_definition];
171 [label="37_ require(account != address(0));\n171-expression_statement-38-38", type_label=expression_statement];
180 [label="38_ require(!has(role, account));\n180-expression_statement-39-39", type_label=expression_statement];
191 [label="39_ role.bearer[account] = true;\n191-expression_statement-40-40", type_label=expression_statement];
200 [label="41_ remove\n200-function_definition-42-46", type_label=function_definition];
213 [label="42_ require(account != address(0));\n213-expression_statement-43-43", type_label=expression_statement];
222 [label="43_ require(has(role, account));\n222-expression_statement-44-44", type_label=expression_statement];
232 [label="44_ role.bearer[account] = false;\n232-expression_statement-45-45", type_label=expression_statement];
241 [label="46_ has\n241-function_definition-47-50", type_label=function_definition];
259 [label="47_ require(account != address(0));\n259-expression_statement-48-48", type_label=expression_statement];
268 [label="48_ return role.bearer[account];\n268-return-49-49", type_label=return];
300 [label="56_ Roles.Role private _whitelistAdmins;\n300-new_variable-57-57", type_label=new_variable];
309 [label="58_ _addWhitelistAdmin(msg.sender);\n309-expression_statement-59-59", type_label=expression_statement];
316 [label="60_ modifier onlyWhitelistAdmin() {\n        require(isWhitelistAdmin(msg.sender));\n        _;\n    }\n316-expression_statement-61-64", type_label=expression_statement];
319 [label="61_ require(isWhitelistAdmin(msg.sender));\n319-expression_statement-62-62", type_label=expression_statement];
329 [label="62_ _;\n329-expression_statement-63-63", type_label=expression_statement];
331 [label="64_ isWhitelistAdmin\n331-function_definition-65-67", type_label=function_definition];
344 [label="65_ return _whitelistAdmins.has(account);\n344-return-66-66", type_label=return];
351 [label="67_ addWhitelistAdmin\n351-function_definition-68-70", type_label=function_definition];
358 [label="67_ onlyWhitelistAdmin\n358-expression_statement-68-68", type_label=expression_statement];
361 [label="68_ _addWhitelistAdmin(account);\n361-expression_statement-69-69", type_label=expression_statement];
366 [label="70_ renounceWhitelistAdmin\n366-function_definition-71-73", type_label=function_definition];
370 [label="71_ _removeWhitelistAdmin(msg.sender);\n370-expression_statement-72-72", type_label=expression_statement];
377 [label="73_ _addWhitelistAdmin\n377-function_definition-74-77", type_label=function_definition];
385 [label="74_ _whitelistAdmins.add(account);\n385-expression_statement-75-75", type_label=expression_statement];
396 [label="77_ _removeWhitelistAdmin\n396-function_definition-78-81", type_label=function_definition];
404 [label="78_ _whitelistAdmins.remove(account);\n404-expression_statement-79-79", type_label=expression_statement];
444 [label="87_ Roles.Role private _whitelisteds;\n444-new_variable-88-88", type_label=new_variable];
451 [label="88_ modifier onlyWhitelisted() {\n        require(isWhitelisted(msg.sender));\n        _;\n    }\n451-expression_statement-89-92", type_label=expression_statement];
454 [label="89_ require(isWhitelisted(msg.sender));\n454-expression_statement-90-90", type_label=expression_statement];
464 [label="90_ _;\n464-expression_statement-91-91", type_label=expression_statement];
466 [label="92_ isWhitelisted\n466-function_definition-93-95", type_label=function_definition];
479 [label="93_ return _whitelisteds.has(account);\n479-return-94-94", type_label=return];
486 [label="95_ addWhitelisted\n486-function_definition-96-98", type_label=function_definition];
493 [label="95_ onlyWhitelistAdmin\n493-expression_statement-96-96", type_label=expression_statement];
496 [label="96_ _addWhitelisted(account);\n496-expression_statement-97-97", type_label=expression_statement];
501 [label="98_ removeWhitelisted\n501-function_definition-99-101", type_label=function_definition];
508 [label="98_ onlyWhitelistAdmin\n508-expression_statement-99-99", type_label=expression_statement];
511 [label="99_ _removeWhitelisted(account);\n511-expression_statement-100-100", type_label=expression_statement];
516 [label="101_ renounceWhitelisted\n516-function_definition-102-104", type_label=function_definition];
520 [label="102_ _removeWhitelisted(msg.sender);\n520-expression_statement-103-103", type_label=expression_statement];
527 [label="104_ _addWhitelisted\n527-function_definition-105-108", type_label=function_definition];
535 [label="105_ _whitelisteds.add(account);\n535-expression_statement-106-106", type_label=expression_statement];
546 [label="108_ _removeWhitelisted\n546-function_definition-109-112", type_label=function_definition];
554 [label="109_ _whitelisteds.remove(account);\n554-expression_statement-110-110", type_label=expression_statement];
579 [label="116_ WhitelistedRole()\n579-expression_statement-117-117", type_label=expression_statement];
582 [label="118_ verifyParticipant\n582-function_definition-119-123", type_label=function_definition];
589 [label="118_ onlyWhitelistAdmin\n589-expression_statement-119-119", type_label=expression_statement];
592 [label="119_ if\n592-if-120-122", type_label=if];
599 [label="120_ addWhitelisted(participant);\n599-expression_statement-121-121", type_label=expression_statement];
604 [label="123_ removeWhitelistAdmin\n604-function_definition-124-127", type_label=function_definition];
611 [label="123_ onlyOwner\n611-expression_statement-124-124", type_label=expression_statement];
614 [label="124_ require(account != msg.sender, \"Use renounceWhitelistAdmin\");\n614-expression_statement-125-125", type_label=expression_statement];
626 [label="125_ _removeWhitelistAdmin(account);\n626-expression_statement-126-126", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
58 -> 64  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
66 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
81 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
101 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
116 -> 124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
158 -> 171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
171 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
200 -> 213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
213 -> 222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
222 -> 232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
241 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
268 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
319 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
344 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
351 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
454 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
486 -> 496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
516 -> 520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
527 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
546 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 599  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
592 -> 604  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
599 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
614 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
