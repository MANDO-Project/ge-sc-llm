digraph  {
12 [label="2_ address public owner;\n12-new_variable-3-3", type_label=new_variable];
19 [label="4_ owner = msg.sender;\n19-expression_statement-5-5", type_label=expression_statement];
25 [label="6_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n25-expression_statement-7-10", type_label=expression_statement];
28 [label="7_ require(msg.sender == owner);\n28-expression_statement-8-8", type_label=expression_statement];
37 [label="8_ _;\n37-expression_statement-9-9", type_label=expression_statement];
39 [label="10_ transferOwnership\n39-function_definition-11-13", type_label=function_definition];
46 [label="10_ onlyOwner\n46-expression_statement-11-11", type_label=expression_statement];
49 [label="11_ owner = newOwner;\n49-expression_statement-12-12", type_label=expression_statement];
56 [label="15_ mul\n56-function_definition-16-20", type_label=function_definition];
73 [label="16_ uint c = a * b;\n73-new_variable-17-17", type_label=new_variable];
74 [label="16_ uint c\n74-new_variable-17-17", type_label=new_variable];
81 [label="17_ assert(a == 0 || c / a == b);\n81-expression_statement-18-18", type_label=expression_statement];
94 [label="18_ return c;\n94-return-19-19", type_label=return];
96 [label="20_ div\n96-function_definition-21-26", type_label=function_definition];
113 [label="21_ assert(b > 0);\n113-expression_statement-22-22", type_label=expression_statement];
120 [label="22_ uint c = a / b;\n120-new_variable-23-23", type_label=new_variable];
121 [label="22_ uint c\n121-new_variable-23-23", type_label=new_variable];
128 [label="23_ assert(a == b * c + a % b);\n128-expression_statement-24-24", type_label=expression_statement];
141 [label="24_ return c;\n141-return-25-25", type_label=return];
143 [label="26_ sub\n143-function_definition-27-30", type_label=function_definition];
160 [label="27_ assert(b <= a);\n160-expression_statement-28-28", type_label=expression_statement];
167 [label="28_ return a - b;\n167-return-29-29", type_label=return];
171 [label="30_ add\n171-function_definition-31-35", type_label=function_definition];
188 [label="31_ uint c = a + b;\n188-new_variable-32-32", type_label=new_variable];
189 [label="31_ uint c\n189-new_variable-32-32", type_label=new_variable];
196 [label="32_ assert(c >= a);\n196-expression_statement-33-33", type_label=expression_statement];
203 [label="33_ return c;\n203-return-34-34", type_label=return];
211 [label="37_ bool public paused = false;\n211-new_variable-38-38", type_label=new_variable];
222 [label="40_ modifier notPaused {\n        require(!paused);\n        _;\n    }\n222-expression_statement-41-44", type_label=expression_statement];
225 [label="41_ require(!paused);\n225-expression_statement-42-42", type_label=expression_statement];
231 [label="42_ _;\n231-expression_statement-43-43", type_label=expression_statement];
233 [label="44_ pause\n233-function_definition-45-48", type_label=function_definition];
236 [label="44_ onlyOwner\n236-expression_statement-45-45", type_label=expression_statement];
239 [label="45_ paused = true;\n239-expression_statement-46-46", type_label=expression_statement];
246 [label="48_ unpause\n246-function_definition-49-52", type_label=function_definition];
249 [label="48_ onlyOwner\n249-expression_statement-49-49", type_label=expression_statement];
252 [label="49_ paused = false;\n252-expression_statement-50-50", type_label=expression_statement];
262 [label="54_ totalSupply\n262-function_definition-55-55", type_label=function_definition];
270 [label="55_ balanceOf\n270-function_definition-56-56", type_label=function_definition];
283 [label="56_ transfer\n283-function_definition-57-57", type_label=function_definition];
299 [label="57_ transferFrom\n299-function_definition-58-58", type_label=function_definition];
319 [label="58_ approve\n319-function_definition-59-59", type_label=function_definition];
335 [label="59_ allowance\n335-function_definition-60-60", type_label=function_definition];
395 [label="64_ uint256 private totalSupply_;\n395-new_variable-65-65", type_label=new_variable];
400 [label="65_ string public name;\n400-new_variable-66-66", type_label=new_variable];
405 [label="66_ string public symbol;\n405-new_variable-67-67", type_label=new_variable];
410 [label="67_ uint8 public decimals;\n410-new_variable-68-68", type_label=new_variable];
415 [label="68_ mapping (address => uint256) public balances;\n415-new_variable-69-69", type_label=new_variable];
422 [label="69_ mapping (address => uint256) public frozen;\n422-new_variable-70-70", type_label=new_variable];
429 [label="70_ mapping (address => mapping (address => uint256)) public allowed;\n429-new_variable-71-71", type_label=new_variable];
470 [label="75_ name = \"Qobit.com Token\";\n470-expression_statement-76-76", type_label=expression_statement];
475 [label="76_ symbol = \"QOB\";\n475-expression_statement-77-77", type_label=expression_statement];
480 [label="77_ decimals = 8;\n480-expression_statement-78-78", type_label=expression_statement];
484 [label="78_ totalSupply_ = 1500000000 * 10 ** uint256(decimals);\n484-expression_statement-79-79", type_label=expression_statement];
494 [label="79_ balances[msg.sender] = totalSupply_;\n494-expression_statement-80-80", type_label=expression_statement];
502 [label="81_ mint\n502-function_definition-82-88", type_label=function_definition];
512 [label="81_ onlyOwner\n512-expression_statement-82-82", type_label=expression_statement];
521 [label="82_ require(_addr != 0x0);\n521-expression_statement-83-83", type_label=expression_statement];
528 [label="83_ totalSupply_ = add(totalSupply_, _amount);\n528-expression_statement-84-84", type_label=expression_statement];
537 [label="84_ balances[_addr] = add(balances[_addr], _amount);\n537-expression_statement-85-85", type_label=expression_statement];
560 [label="86_ return true;\n560-return-87-87", type_label=return];
563 [label="88_ burn\n563-function_definition-89-97", type_label=function_definition];
573 [label="88_ onlyOwner\n573-expression_statement-89-89", type_label=expression_statement];
582 [label="89_ require(_addr != 0);\n582-expression_statement-90-90", type_label=expression_statement];
589 [label="90_ require(_amount <= balances[_addr]);\n589-expression_statement-91-91", type_label=expression_statement];
598 [label="91_ totalSupply_ = sub(totalSupply_, _amount);\n598-expression_statement-92-92", type_label=expression_statement];
607 [label="92_ balances[_addr] = sub(balances[_addr], _amount);\n607-expression_statement-93-93", type_label=expression_statement];
636 [label="95_ return true;\n636-return-96-96", type_label=return];
639 [label="97_ freeze\n639-function_definition-98-105", type_label=function_definition];
650 [label="97_ onlyOwner\n650-expression_statement-98-98", type_label=expression_statement];
658 [label="98_ require(balances[_addr] >= _value);\n658-expression_statement-99-99", type_label=expression_statement];
667 [label="99_ require(_value > 0);\n667-expression_statement-100-100", type_label=expression_statement];
674 [label="100_ balances[_addr] = sub(balances[_addr], _value);\n674-expression_statement-101-101", type_label=expression_statement];
687 [label="101_ frozen[_addr] = add(frozen[_addr], _value);\n687-expression_statement-102-102", type_label=expression_statement];
706 [label="103_ return true;\n706-return-104-104", type_label=return];
709 [label="105_ unfreeze\n709-function_definition-106-113", type_label=function_definition];
720 [label="105_ onlyOwner\n720-expression_statement-106-106", type_label=expression_statement];
728 [label="106_ require(frozen[_addr] >= _value);\n728-expression_statement-107-107", type_label=expression_statement];
737 [label="107_ require(_value > 0);\n737-expression_statement-108-108", type_label=expression_statement];
744 [label="108_ frozen[_addr] = sub(frozen[_addr], _value);\n744-expression_statement-109-109", type_label=expression_statement];
757 [label="109_ balances[_addr] = add(balances[_addr], _value);\n757-expression_statement-110-110", type_label=expression_statement];
776 [label="111_ return true;\n776-return-112-112", type_label=return];
779 [label="113_ frozenOf\n779-function_definition-114-116", type_label=function_definition];
793 [label="114_ return frozen[_addr];\n793-return-115-115", type_label=return];
797 [label="116_ totalSupply\n797-function_definition-117-119", type_label=function_definition];
806 [label="117_ return totalSupply_;\n806-return-118-118", type_label=return];
808 [label="119_ balanceOf\n808-function_definition-120-122", type_label=function_definition];
822 [label="120_ return balances[_addr];\n822-return-121-121", type_label=return];
826 [label="122_ transfer\n826-function_definition-123-130", type_label=function_definition];
837 [label="122_ notPaused\n837-expression_statement-123-123", type_label=expression_statement];
845 [label="123_ require(balances[msg.sender] >= _value);\n845-expression_statement-124-124", type_label=expression_statement];
856 [label="124_ require(balances[_to] + _value >= balances[_to]);\n856-expression_statement-125-125", type_label=expression_statement];
869 [label="125_ balances[msg.sender] -= _value;\n869-expression_statement-126-126", type_label=expression_statement];
870 [label="125_ balances[msg.sender] -= _value\n870-expression_statement-126-126", type_label=expression_statement];
877 [label="126_ balances[_to] += _value;\n877-expression_statement-127-127", type_label=expression_statement];
878 [label="126_ balances[_to] += _value\n878-expression_statement-127-127", type_label=expression_statement];
893 [label="128_ return true;\n893-return-129-129", type_label=return];
896 [label="130_ transferFrom\n896-function_definition-131-140", type_label=function_definition];
911 [label="130_ notPaused\n911-expression_statement-131-131", type_label=expression_statement];
919 [label="131_ require(balances[_from] >= _value);\n919-expression_statement-132-132", type_label=expression_statement];
928 [label="132_ require(balances[_to] + _value >= balances[_to]);\n928-expression_statement-133-133", type_label=expression_statement];
941 [label="133_ require(allowed[_from][msg.sender] >= _value);\n941-expression_statement-134-134", type_label=expression_statement];
954 [label="134_ balances[_to] += _value;\n954-expression_statement-135-135", type_label=expression_statement];
955 [label="134_ balances[_to] += _value\n955-expression_statement-135-135", type_label=expression_statement];
960 [label="135_ balances[_from] -= _value;\n960-expression_statement-136-136", type_label=expression_statement];
961 [label="135_ balances[_from] -= _value\n961-expression_statement-136-136", type_label=expression_statement];
966 [label="136_ allowed[_from][msg.sender] -= _value;\n966-expression_statement-137-137", type_label=expression_statement];
967 [label="136_ allowed[_from][msg.sender] -= _value\n967-expression_statement-137-137", type_label=expression_statement];
984 [label="138_ return true;\n984-return-139-139", type_label=return];
987 [label="140_ approve\n987-function_definition-141-146", type_label=function_definition];
998 [label="140_ notPaused\n998-expression_statement-141-141", type_label=expression_statement];
1006 [label="141_ require(_value > 0);\n1006-expression_statement-142-142", type_label=expression_statement];
1013 [label="142_ allowed[msg.sender][_spender] = _value;\n1013-expression_statement-143-143", type_label=expression_statement];
1033 [label="144_ return true;\n1033-return-145-145", type_label=return];
1036 [label="146_ allowance\n1036-function_definition-147-149", type_label=function_definition];
1054 [label="147_ return allowed[_owner][_spender];\n1054-return-148-148", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
28 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
39 -> 49  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 94  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
94 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
96 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
143 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
167 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
171 -> 188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
196 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
203 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
225 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
246 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
405 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
422 -> 429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
470 -> 475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
475 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
484 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
560 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
563 -> 582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
589 -> 598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
598 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
636 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
639 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
667 -> 674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
674 -> 687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
706 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
709 -> 728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
728 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
744 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
776 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
779 -> 793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
793 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
797 -> 806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
806 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
808 -> 822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
822 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
826 -> 845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
856 -> 869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
869 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
893 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
896 -> 919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
928 -> 941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
941 -> 954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
954 -> 960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
960 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
984 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
987 -> 1006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1006 -> 1013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1033 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1036 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
