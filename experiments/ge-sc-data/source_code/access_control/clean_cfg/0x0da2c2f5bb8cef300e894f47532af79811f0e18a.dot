digraph  {
15 [label="2_ transfer\n15-function_definition-3-3", type_label=function_definition];
30 [label="3_ approve\n30-function_definition-4-4", type_label=function_definition];
45 [label="4_ transferFrom\n45-function_definition-5-5", type_label=function_definition];
64 [label="5_ totalSupply\n64-function_definition-6-6", type_label=function_definition];
72 [label="6_ balanceOf\n72-function_definition-7-7", type_label=function_definition];
84 [label="7_ allowance\n84-function_definition-8-8", type_label=function_definition];
131 [label="12_ address private _owner;\n131-new_variable-13-13", type_label=new_variable];
148 [label="15_ _owner = msg.sender;\n148-expression_statement-16-16", type_label=expression_statement];
162 [label="18_ owner\n162-function_definition-19-21", type_label=function_definition];
171 [label="19_ return _owner;\n171-return-20-20", type_label=return];
173 [label="21_ modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n173-expression_statement-22-25", type_label=expression_statement];
176 [label="22_ require(isOwner());\n176-expression_statement-23-23", type_label=expression_statement];
182 [label="23_ _;\n182-expression_statement-24-24", type_label=expression_statement];
184 [label="25_ isOwner\n184-function_definition-26-28", type_label=function_definition];
193 [label="26_ return msg.sender == _owner;\n193-return-27-27", type_label=return];
199 [label="28_ renounceOwnership\n199-function_definition-29-32", type_label=function_definition];
202 [label="28_ onlyOwner\n202-expression_statement-29-29", type_label=expression_statement];
213 [label="30_ _owner = address(0);\n213-expression_statement-31-31", type_label=expression_statement];
219 [label="32_ transferOwnership\n219-function_definition-33-35", type_label=function_definition];
226 [label="32_ onlyOwner\n226-expression_statement-33-33", type_label=expression_statement];
229 [label="33_ _transferOwnership(newOwner);\n229-expression_statement-34-34", type_label=expression_statement];
234 [label="35_ _transferOwnership\n234-function_definition-36-40", type_label=function_definition];
242 [label="36_ require(newOwner != address(0));\n242-expression_statement-37-37", type_label=expression_statement];
257 [label="38_ _owner = newOwner;\n257-expression_statement-39-39", type_label=expression_statement];
264 [label="42_ safeMul\n264-function_definition-43-47", type_label=function_definition];
281 [label="43_ uint256 c = a * b;\n281-new_variable-44-44", type_label=new_variable];
282 [label="43_ uint256 c\n282-new_variable-44-44", type_label=new_variable];
289 [label="44_ assert(a == 0 || c / a == b);\n289-expression_statement-45-45", type_label=expression_statement];
302 [label="45_ return c;\n302-return-46-46", type_label=return];
304 [label="47_ safeDiv\n304-function_definition-48-53", type_label=function_definition];
321 [label="48_ assert(b > 0);\n321-expression_statement-49-49", type_label=expression_statement];
328 [label="49_ uint256 c = a / b;\n328-new_variable-50-50", type_label=new_variable];
329 [label="49_ uint256 c\n329-new_variable-50-50", type_label=new_variable];
336 [label="50_ assert(a == b * c + a % b);\n336-expression_statement-51-51", type_label=expression_statement];
349 [label="51_ return c;\n349-return-52-52", type_label=return];
351 [label="53_ safeSub\n351-function_definition-54-57", type_label=function_definition];
368 [label="54_ assert(b <= a);\n368-expression_statement-55-55", type_label=expression_statement];
375 [label="55_ return a - b;\n375-return-56-56", type_label=return];
379 [label="57_ safeAdd\n379-function_definition-58-62", type_label=function_definition];
396 [label="58_ uint256 c = a + b;\n396-new_variable-59-59", type_label=new_variable];
397 [label="58_ uint256 c\n397-new_variable-59-59", type_label=new_variable];
404 [label="59_ assert(c>=a && c>=b);\n404-expression_statement-60-60", type_label=expression_statement];
415 [label="60_ return c;\n415-return-61-61", type_label=return];
429 [label="64_ string public name;\n429-new_variable-65-65", type_label=new_variable];
434 [label="65_ string public symbol;\n434-new_variable-66-66", type_label=new_variable];
439 [label="66_ uint8 public decimals;\n439-new_variable-67-67", type_label=new_variable];
444 [label="67_ uint256 public totalSupply;\n444-new_variable-68-68", type_label=new_variable];
449 [label="68_ mapping (address => uint256) public balanceOf;\n449-new_variable-69-69", type_label=new_variable];
456 [label="69_ mapping (address => mapping (address => uint256)) public allowance;\n456-new_variable-70-70", type_label=new_variable];
495 [label="73_ balanceOf[msg.sender] = 100000000000000000000000000;\n495-expression_statement-74-74", type_label=expression_statement];
503 [label="74_ totalSupply = 100000000000000000000000000;\n503-expression_statement-75-75", type_label=expression_statement];
507 [label="75_ name = \"DaEX Coin\";\n507-expression_statement-76-76", type_label=expression_statement];
512 [label="76_ symbol = \"DC\";\n512-expression_statement-77-77", type_label=expression_statement];
517 [label="77_ decimals = 18;\n517-expression_statement-78-78", type_label=expression_statement];
521 [label="79_ transfer\n521-function_definition-80-91", type_label=function_definition];
537 [label="80_ require(_to != address(0));\n537-expression_statement-81-81", type_label=expression_statement];
546 [label="81_ require(_value > 0);\n546-expression_statement-82-82", type_label=expression_statement];
553 [label="82_ require(balanceOf[msg.sender] >= _value);\n553-expression_statement-83-83", type_label=expression_statement];
564 [label="83_ require(balanceOf[_to] + _value >= balanceOf[_to]);\n564-expression_statement-84-84", type_label=expression_statement];
577 [label="84_ uint previousBalances = balanceOf[msg.sender] + balanceOf[_to];\n577-new_variable-85-85", type_label=new_variable];
578 [label="84_ uint previousBalances\n578-new_variable-85-85", type_label=new_variable];
591 [label="85_ balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);\n591-expression_statement-86-86", type_label=expression_statement];
610 [label="86_ balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);\n610-expression_statement-87-87", type_label=expression_statement];
635 [label="88_ assert(balanceOf[msg.sender]+balanceOf[_to]==previousBalances);\n635-expression_statement-89-89", type_label=expression_statement];
650 [label="89_ return true;\n650-return-90-90", type_label=return];
653 [label="91_ approve\n653-function_definition-92-97", type_label=function_definition];
670 [label="92_ require((_value == 0) || (allowance[msg.sender][_spender] == 0));\n670-expression_statement-93-93", type_label=expression_statement];
689 [label="93_ allowance[msg.sender][_spender] = _value;\n689-expression_statement-94-94", type_label=expression_statement];
709 [label="95_ return true;\n709-return-96-96", type_label=return];
712 [label="97_ transferFrom\n712-function_definition-98-109", type_label=function_definition];
733 [label="98_ require (_to != address(0));\n733-expression_statement-99-99", type_label=expression_statement];
742 [label="99_ require (_value > 0);\n742-expression_statement-100-100", type_label=expression_statement];
749 [label="100_ require (balanceOf[_from] >= _value) ;\n749-expression_statement-101-101", type_label=expression_statement];
758 [label="101_ require (balanceOf[_to] + _value > balanceOf[_to]);\n758-expression_statement-102-102", type_label=expression_statement];
771 [label="102_ require (_value <= allowance[_from][msg.sender]);\n771-expression_statement-103-103", type_label=expression_statement];
784 [label="103_ balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);\n784-expression_statement-104-104", type_label=expression_statement];
799 [label="104_ balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);\n799-expression_statement-105-105", type_label=expression_statement];
814 [label="105_ allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n814-expression_statement-106-106", type_label=expression_statement];
845 [label="107_ return true;\n845-return-108-108", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
162 -> 171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
171 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
176 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
184 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
199 -> 213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
219 -> 229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
234 -> 242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
264 -> 281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
281 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
302 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
304 -> 321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
328 -> 336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
336 -> 349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
349 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
351 -> 368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
368 -> 375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
375 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
379 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
404 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
429 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
503 -> 507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
507 -> 512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
546 -> 553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
553 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
591 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
635 -> 650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
650 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
653 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
709 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
712 -> 733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
733 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
749 -> 758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
771 -> 784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
784 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
