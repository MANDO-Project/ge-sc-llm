digraph  {
13 [label="2_ add\n13-function_definition-3-6", type_label=function_definition];
31 [label="3_ c = a + b;\n31-expression_statement-4-4", type_label=expression_statement];
37 [label="4_ require(c >= a);\n37-expression_statement-5-5", type_label=expression_statement];
44 [label="6_ sub\n44-function_definition-7-10", type_label=function_definition];
62 [label="7_ require(b <= a);\n62-expression_statement-8-8", type_label=expression_statement];
69 [label="8_ c = a - b;\n69-expression_statement-9-9", type_label=expression_statement];
75 [label="10_ mul\n75-function_definition-11-14", type_label=function_definition];
93 [label="11_ c = a * b;\n93-expression_statement-12-12", type_label=expression_statement];
99 [label="12_ require(a == 0 || c / a == b);\n99-expression_statement-13-13", type_label=expression_statement];
112 [label="14_ div\n112-function_definition-15-18", type_label=function_definition];
130 [label="15_ require(b > 0);\n130-expression_statement-16-16", type_label=expression_statement];
137 [label="16_ c = a / b;\n137-expression_statement-17-17", type_label=expression_statement];
146 [label="20_ limitLessThan\n146-function_definition-21-24", type_label=function_definition];
164 [label="21_ if_a > b\n164-if-22-22", type_label=if];
2932 [label="21_ end_if", type_label=end_if];
168 [label="21_ return b;\n168-return-22-22", type_label=return];
170 [label="22_ return a;\n170-return-23-23", type_label=return];
175 [label="26_ totalSupply\n175-function_definition-27-27", type_label=function_definition];
183 [label="27_ bug_txorigin28\n183-function_definition-28-30", type_label=function_definition];
191 [label="28_ require(tx.origin == owner_txorigin28);\n191-expression_statement-29-29", type_label=expression_statement];
200 [label="30_ balanceOf\n200-function_definition-31-31", type_label=function_definition];
213 [label="31_ withdrawAll_txorigin34\n213-function_definition-32-35", type_label=function_definition];
225 [label="32_ require(tx.origin == owner_txorigin34);\n225-expression_statement-33-33", type_label=expression_statement];
234 [label="33_ _recipient.transfer(address(this).balance);\n234-expression_statement-34-34", type_label=expression_statement];
245 [label="35_ allowance\n245-function_definition-36-36", type_label=function_definition];
262 [label="36_ sendto_txorigin21\n262-function_definition-37-40", type_label=function_definition];
278 [label="37_ require (tx.origin == owner_txorigin21);\n278-expression_statement-38-38", type_label=expression_statement];
287 [label="38_ receiver.transfer(amount);\n287-expression_statement-39-39", type_label=expression_statement];
294 [label="40_ transfer\n294-function_definition-41-41", type_label=function_definition];
310 [label="41_ withdrawAll_txorigin10\n310-function_definition-42-45", type_label=function_definition];
322 [label="42_ require(tx.origin == owner_txorigin10);\n322-expression_statement-43-43", type_label=expression_statement];
331 [label="43_ _recipient.transfer(address(this).balance);\n331-expression_statement-44-44", type_label=expression_statement];
342 [label="45_ approve\n342-function_definition-46-46", type_label=function_definition];
358 [label="46_ withdrawAll_txorigin22\n358-function_definition-47-50", type_label=function_definition];
370 [label="47_ require(tx.origin == owner_txorigin22);\n370-expression_statement-48-48", type_label=expression_statement];
379 [label="48_ _recipient.transfer(address(this).balance);\n379-expression_statement-49-49", type_label=expression_statement];
390 [label="50_ transferFrom\n390-function_definition-51-51", type_label=function_definition];
410 [label="51_ bug_txorigin12\n410-function_definition-52-54", type_label=function_definition];
418 [label="52_ require(tx.origin == owner_txorigin12);\n418-expression_statement-53-53", type_label=expression_statement];
427 [label="54_ sendto_txorigin33\n427-function_definition-55-58", type_label=function_definition];
443 [label="55_ require (tx.origin == owner_txorigin33);\n443-expression_statement-56-56", type_label=expression_statement];
452 [label="56_ receiver.transfer(amount);\n452-expression_statement-57-57", type_label=expression_statement];
473 [label="59_ transferTo_txorigin27\n473-function_definition-60-63", type_label=function_definition];
489 [label="60_ require(tx.origin == owner_txorigin27);\n489-expression_statement-61-61", type_label=expression_statement];
498 [label="61_ to.call.value(amount);\n498-expression_statement-62-62", type_label=expression_statement];
524 [label="66_ receiveApproval\n524-function_definition-67-67", type_label=function_definition];
543 [label="67_ transferTo_txorigin11\n543-function_definition-68-71", type_label=function_definition];
559 [label="68_ require(tx.origin == owner_txorigin11);\n559-expression_statement-69-69", type_label=expression_statement];
568 [label="69_ to.call.value(amount);\n568-expression_statement-70-70", type_label=expression_statement];
580 [label="73_ address public owner;\n580-new_variable-74-74", type_label=new_variable];
585 [label="74_ address public newOwner;\n585-new_variable-75-75", type_label=new_variable];
590 [label="75_ transferTo_txorigin31\n590-function_definition-76-79", type_label=function_definition];
606 [label="76_ require(tx.origin == owner_txorigin31);\n606-expression_statement-77-77", type_label=expression_statement];
615 [label="77_ to.call.value(amount);\n615-expression_statement-78-78", type_label=expression_statement];
636 [label="81_ owner = msg.sender;\n636-expression_statement-82-82", type_label=expression_statement];
642 [label="83_ sendto_txorigin1\n642-function_definition-84-87", type_label=function_definition];
658 [label="84_ require (tx.origin == owner_txorigin1);\n658-expression_statement-85-85", type_label=expression_statement];
667 [label="85_ receiver.transfer(amount);\n667-expression_statement-86-86", type_label=expression_statement];
674 [label="87_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n674-expression_statement-88-91", type_label=expression_statement];
677 [label="88_ require(msg.sender == owner);\n677-expression_statement-89-89", type_label=expression_statement];
686 [label="89_ _;\n686-expression_statement-90-90", type_label=expression_statement];
688 [label="91_ transferOwnership\n688-function_definition-92-94", type_label=function_definition];
695 [label="91_ onlyOwner\n695-expression_statement-92-92", type_label=expression_statement];
698 [label="92_ newOwner = _newOwner;\n698-expression_statement-93-93", type_label=expression_statement];
702 [label="94_ withdrawAll_txorigin2\n702-function_definition-95-98", type_label=function_definition];
714 [label="95_ require(tx.origin == owner_txorigin2);\n714-expression_statement-96-96", type_label=expression_statement];
723 [label="96_ _recipient.transfer(address(this).balance);\n723-expression_statement-97-97", type_label=expression_statement];
734 [label="98_ acceptOwnership\n734-function_definition-99-104", type_label=function_definition];
738 [label="99_ require(msg.sender == newOwner);\n738-expression_statement-100-100", type_label=expression_statement];
753 [label="101_ owner = newOwner;\n753-expression_statement-102-102", type_label=expression_statement];
757 [label="102_ newOwner = address(0);\n757-expression_statement-103-103", type_label=expression_statement];
763 [label="104_ sendto_txorigin17\n763-function_definition-105-108", type_label=function_definition];
779 [label="105_ require (tx.origin == owner_txorigin17);\n779-expression_statement-106-106", type_label=expression_statement];
788 [label="106_ receiver.transfer(amount);\n788-expression_statement-107-107", type_label=expression_statement];
814 [label="112_ string public symbol;\n814-new_variable-113-113", type_label=new_variable];
819 [label="113_ string public name;\n819-new_variable-114-114", type_label=new_variable];
824 [label="114_ uint8 public decimals;\n824-new_variable-115-115", type_label=new_variable];
829 [label="115_ uint public _totalSupply;\n829-new_variable-116-116", type_label=new_variable];
834 [label="116_ uint public latestDifficultyPeriodStarted;\n834-new_variable-117-117", type_label=new_variable];
839 [label="117_ uint public epochCount;\n839-new_variable-118-118", type_label=new_variable];
844 [label="118_ uint public _BLOCKS_PER_READJUSTMENT = 1024;\n844-new_variable-119-119", type_label=new_variable];
850 [label="119_ uint public _MINIMUM_TARGET = 2 ** 16;\n850-new_variable-120-120", type_label=new_variable];
858 [label="120_ uint public _MAXIMUM_TARGET = 2 ** 234;\n858-new_variable-121-121", type_label=new_variable];
866 [label="121_ uint public miningTarget;\n866-new_variable-122-122", type_label=new_variable];
871 [label="122_ bytes32 public challengeNumber;\n871-new_variable-123-123", type_label=new_variable];
876 [label="123_ uint public rewardEra;\n876-new_variable-124-124", type_label=new_variable];
881 [label="124_ uint public maxSupplyForEra;\n881-new_variable-125-125", type_label=new_variable];
886 [label="125_ address public lastRewardTo;\n886-new_variable-126-126", type_label=new_variable];
891 [label="126_ uint public lastRewardAmount;\n891-new_variable-127-127", type_label=new_variable];
896 [label="127_ withdrawAll_txorigin18\n896-function_definition-128-131", type_label=function_definition];
908 [label="128_ require(tx.origin == owner_txorigin18);\n908-expression_statement-129-129", type_label=expression_statement];
917 [label="129_ _recipient.transfer(address(this).balance);\n917-expression_statement-130-130", type_label=expression_statement];
928 [label="131_ uint public lastRewardEthBlockNumber;\n928-new_variable-132-132", type_label=new_variable];
933 [label="132_ sendto_txorigin29\n933-function_definition-133-136", type_label=function_definition];
949 [label="133_ require (tx.origin == owner_txorigin29);\n949-expression_statement-134-134", type_label=expression_statement];
958 [label="134_ receiver.transfer(amount);\n958-expression_statement-135-135", type_label=expression_statement];
965 [label="136_ bool locked = false;\n965-new_variable-137-137", type_label=new_variable];
971 [label="137_ withdrawAll_txorigin6\n971-function_definition-138-141", type_label=function_definition];
983 [label="138_ require(tx.origin == owner_txorigin6);\n983-expression_statement-139-139", type_label=expression_statement];
992 [label="139_ _recipient.transfer(address(this).balance);\n992-expression_statement-140-140", type_label=expression_statement];
1003 [label="141_ mapping(bytes32 => bytes32) solutionForChallenge;\n1003-new_variable-142-142", type_label=new_variable];
1009 [label="142_ bug_txorigin16\n1009-function_definition-143-145", type_label=function_definition];
1017 [label="143_ require(tx.origin == owner_txorigin16);\n1017-expression_statement-144-144", type_label=expression_statement];
1026 [label="145_ uint public tokensMinted;\n1026-new_variable-146-146", type_label=new_variable];
1031 [label="146_ bug_txorigin24\n1031-function_definition-147-149", type_label=function_definition];
1039 [label="147_ require(tx.origin == owner_txorigin24);\n1039-expression_statement-148-148", type_label=expression_statement];
1048 [label="149_ mapping(address => uint) balances;\n1048-new_variable-150-150", type_label=new_variable];
1054 [label="150_ sendto_txorigin5\n1054-function_definition-151-154", type_label=function_definition];
1070 [label="151_ require (tx.origin == owner_txorigin5);\n1070-expression_statement-152-152", type_label=expression_statement];
1079 [label="152_ receiver.transfer(amount);\n1079-expression_statement-153-153", type_label=expression_statement];
1086 [label="154_ mapping(address => mapping(address => uint)) allowed;\n1086-new_variable-155-155", type_label=new_variable];
1094 [label="155_ transferTo_txorigin15\n1094-function_definition-156-159", type_label=function_definition];
1110 [label="156_ require(tx.origin == owner_txorigin15);\n1110-expression_statement-157-157", type_label=expression_statement];
1119 [label="157_ to.call.value(amount);\n1119-expression_statement-158-158", type_label=expression_statement];
1128 [label="159_ uint public burnPercent;\n1128-new_variable-160-160", type_label=new_variable];
1133 [label="160_ sendto_txorigin13\n1133-function_definition-161-164", type_label=function_definition];
1149 [label="161_ require (tx.origin == owner_txorigin13);\n1149-expression_statement-162-162", type_label=expression_statement];
1158 [label="162_ receiver.transfer(amount);\n1158-expression_statement-163-163", type_label=expression_statement];
1184 [label="165_ onlyOwner\n1184-expression_statement-166-166", type_label=expression_statement];
1187 [label="166_ symbol = \"YESBUZ\";\n1187-expression_statement-167-167", type_label=expression_statement];
1192 [label="167_ name = \"Yesbuzz\";\n1192-expression_statement-168-168", type_label=expression_statement];
1197 [label="168_ decimals = 8;\n1197-expression_statement-169-169", type_label=expression_statement];
1201 [label="169_ _totalSupply = 21000000 * 10 ** uint(decimals);\n1201-expression_statement-170-170", type_label=expression_statement];
1211 [label="170_ if\n1211-if-171-171", type_label=if];
3979 [label="170_ end_if", type_label=end_if];
1215 [label="171_ locked = true;\n1215-expression_statement-172-172", type_label=expression_statement];
1220 [label="172_ tokensMinted = 0;\n1220-expression_statement-173-173", type_label=expression_statement];
1224 [label="173_ rewardEra = 0;\n1224-expression_statement-174-174", type_label=expression_statement];
1228 [label="174_ maxSupplyForEra = _totalSupply.div(2);\n1228-expression_statement-175-175", type_label=expression_statement];
1237 [label="175_ miningTarget = _MAXIMUM_TARGET;\n1237-expression_statement-176-176", type_label=expression_statement];
1241 [label="176_ latestDifficultyPeriodStarted = block.number;\n1241-expression_statement-177-177", type_label=expression_statement];
1247 [label="177_ burnPercent = 10;\n1247-expression_statement-178-178", type_label=expression_statement];
1251 [label="178_ _startNewMiningEpoch();\n1251-expression_statement-179-179", type_label=expression_statement];
1254 [label="180_ sendto_txorigin37\n1254-function_definition-181-184", type_label=function_definition];
1270 [label="181_ require (tx.origin == owner_txorigin37);\n1270-expression_statement-182-182", type_label=expression_statement];
1279 [label="182_ receiver.transfer(amount);\n1279-expression_statement-183-183", type_label=expression_statement];
1286 [label="184_ mint\n1286-function_definition-185-202", type_label=function_definition];
1303 [label="185_ bytes32 digest = keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce));\n1303-new_variable-186-186", type_label=new_variable];
1304 [label="185_ bytes32 digest\n1304-new_variable-186-186", type_label=new_variable];
1323 [label="186_ if_digest != challenge_digest\n1323-if-187-187", type_label=if];
4091 [label="186_ end_if", type_label=end_if];
1329 [label="187_ if_uint256(digest) > miningTarget\n1329-if-188-188", type_label=if];
4097 [label="187_ end_if", type_label=end_if];
1337 [label="188_ bytes32 solution = solutionForChallenge[challengeNumber];\n1337-new_variable-189-189", type_label=new_variable];
1338 [label="188_ bytes32 solution\n1338-new_variable-189-189", type_label=new_variable];
1345 [label="189_ solutionForChallenge[challengeNumber] = digest;\n1345-expression_statement-190-190", type_label=expression_statement];
1351 [label="190_ if_solution != 0x0\n1351-if-191-191", type_label=if];
4119 [label="190_ end_if", type_label=end_if];
1357 [label="191_ uint reward_amount = getMiningReward();\n1357-new_variable-192-192", type_label=new_variable];
1358 [label="191_ uint reward_amount\n1358-new_variable-192-192", type_label=new_variable];
1364 [label="192_ balances[msg.sender] = balances[msg.sender].add(reward_amount);\n1364-expression_statement-193-193", type_label=expression_statement];
1381 [label="193_ tokensMinted = tokensMinted.add(reward_amount);\n1381-expression_statement-194-194", type_label=expression_statement];
1390 [label="194_ assert(tokensMinted <= maxSupplyForEra);\n1390-expression_statement-195-195", type_label=expression_statement];
1397 [label="195_ lastRewardTo = msg.sender;\n1397-expression_statement-196-196", type_label=expression_statement];
1403 [label="196_ lastRewardAmount = reward_amount;\n1403-expression_statement-197-197", type_label=expression_statement];
1407 [label="197_ lastRewardEthBlockNumber = block.number;\n1407-expression_statement-198-198", type_label=expression_statement];
1413 [label="198_ _startNewMiningEpoch();\n1413-expression_statement-199-199", type_label=expression_statement];
1428 [label="200_ return true;\n1428-return-201-201", type_label=return];
1431 [label="202_ transferTo_txorigin3\n1431-function_definition-203-206", type_label=function_definition];
1447 [label="203_ require(tx.origin == owner_txorigin3);\n1447-expression_statement-204-204", type_label=expression_statement];
1456 [label="204_ to.call.value(amount);\n1456-expression_statement-205-205", type_label=expression_statement];
1465 [label="206_ _startNewMiningEpoch\n1465-function_definition-207-217", type_label=function_definition];
1469 [label="207_ if_tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39\n1469-if-208-210", type_label=if];
4237 [label="207_ end_if", type_label=end_if];
1484 [label="208_ rewardEra = rewardEra + 1;\n1484-expression_statement-209-209", type_label=expression_statement];
1490 [label="210_ maxSupplyForEra = _totalSupply - _totalSupply.div(2 ** (rewardEra + 1));\n1490-expression_statement-211-211", type_label=expression_statement];
1506 [label="211_ epochCount = epochCount.add(1);\n1506-expression_statement-212-212", type_label=expression_statement];
1515 [label="212_ if_epochCount % _BLOCKS_PER_READJUSTMENT == 0\n1515-if-213-215", type_label=if];
4283 [label="212_ end_if", type_label=end_if];
1522 [label="213_ _reAdjustDifficulty();\n1522-expression_statement-214-214", type_label=expression_statement];
1525 [label="215_ challengeNumber = blockhash(block.number - 1);\n1525-expression_statement-216-216", type_label=expression_statement];
1536 [label="217_ sendto_txorigin9\n1536-function_definition-218-221", type_label=function_definition];
1552 [label="218_ require (tx.origin == owner_txorigin9);\n1552-expression_statement-219-219", type_label=expression_statement];
1561 [label="219_ receiver.transfer(amount);\n1561-expression_statement-220-220", type_label=expression_statement];
1568 [label="221_ _reAdjustDifficulty\n1568-function_definition-222-244", type_label=function_definition];
1572 [label="222_ uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n1572-new_variable-223-223", type_label=new_variable];
1573 [label="222_ uint ethBlocksSinceLastDifficultyPeriod\n1573-new_variable-223-223", type_label=new_variable];
1582 [label="223_ uint epochsMined = _BLOCKS_PER_READJUSTMENT;\n1582-new_variable-224-224", type_label=new_variable];
1583 [label="223_ uint epochsMined\n1583-new_variable-224-224", type_label=new_variable];
1588 [label="224_ uint targetEthBlocksPerDiffPeriod = epochsMined * 60;\n1588-new_variable-225-225", type_label=new_variable];
1589 [label="224_ uint targetEthBlocksPerDiffPeriod\n1589-new_variable-225-225", type_label=new_variable];
1596 [label="225_ if_ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod\n1596-if-226-234", type_label=if];
4364 [label="225_ end_if", type_label=end_if];
1601 [label="226_ uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod);\n1601-new_variable-227-227", type_label=new_variable];
1602 [label="226_ uint excess_block_pct\n1602-new_variable-227-227", type_label=new_variable];
1618 [label="227_ uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n1618-new_variable-228-228", type_label=new_variable];
1619 [label="227_ uint excess_block_pct_extra\n1619-new_variable-228-228", type_label=new_variable];
1634 [label="228_ miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));\n1634-expression_statement-229-229", type_label=expression_statement];
1654 [label="230_ uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod);\n1654-new_variable-231-231", type_label=new_variable];
1655 [label="230_ uint shortage_block_pct\n1655-new_variable-231-231", type_label=new_variable];
1671 [label="231_ uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);\n1671-new_variable-232-232", type_label=new_variable];
1672 [label="231_ uint shortage_block_pct_extra\n1672-new_variable-232-232", type_label=new_variable];
1687 [label="232_ miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));\n1687-expression_statement-233-233", type_label=expression_statement];
1706 [label="234_ latestDifficultyPeriodStarted = block.number;\n1706-expression_statement-235-235", type_label=expression_statement];
1712 [label="235_ if_miningTarget < _MINIMUM_TARGET\n1712-if-236-239", type_label=if];
4480 [label="235_ end_if", type_label=end_if];
1717 [label="237_ miningTarget = _MINIMUM_TARGET;\n1717-expression_statement-238-238", type_label=expression_statement];
1721 [label="239_ if_miningTarget > _MAXIMUM_TARGET\n1721-if-240-243", type_label=if];
4489 [label="239_ end_if", type_label=end_if];
1726 [label="241_ miningTarget = _MAXIMUM_TARGET;\n1726-expression_statement-242-242", type_label=expression_statement];
1730 [label="244_ sendto_txorigin25\n1730-function_definition-245-248", type_label=function_definition];
1746 [label="245_ require (tx.origin == owner_txorigin25);\n1746-expression_statement-246-246", type_label=expression_statement];
1755 [label="246_ receiver.transfer(amount);\n1755-expression_statement-247-247", type_label=expression_statement];
1762 [label="248_ getChallengeNumber\n1762-function_definition-249-251", type_label=function_definition];
1771 [label="249_ return challengeNumber;\n1771-return-250-250", type_label=return];
1773 [label="251_ transferTo_txorigin19\n1773-function_definition-252-255", type_label=function_definition];
1789 [label="252_ require(tx.origin == owner_txorigin19);\n1789-expression_statement-253-253", type_label=expression_statement];
1798 [label="253_ to.call.value(amount);\n1798-expression_statement-254-254", type_label=expression_statement];
1807 [label="255_ getMiningDifficulty\n1807-function_definition-256-258", type_label=function_definition];
1816 [label="256_ return _MAXIMUM_TARGET.div(miningTarget);\n1816-return-257-257", type_label=return];
1823 [label="258_ withdrawAll_txorigin26\n1823-function_definition-259-262", type_label=function_definition];
1835 [label="259_ require(tx.origin == owner_txorigin26);\n1835-expression_statement-260-260", type_label=expression_statement];
1844 [label="260_ _recipient.transfer(address(this).balance);\n1844-expression_statement-261-261", type_label=expression_statement];
1855 [label="262_ getMiningTarget\n1855-function_definition-263-265", type_label=function_definition];
1864 [label="263_ return miningTarget;\n1864-return-264-264", type_label=return];
1866 [label="265_ bug_txorigin20\n1866-function_definition-266-268", type_label=function_definition];
1874 [label="266_ require(tx.origin == owner_txorigin20);\n1874-expression_statement-267-267", type_label=expression_statement];
1883 [label="268_ getMiningReward\n1883-function_definition-269-271", type_label=function_definition];
1892 [label="269_ return (50 * 10 ** uint(decimals)).div(2 ** rewardEra);\n1892-return-270-270", type_label=return];
1908 [label="271_ bug_txorigin32\n1908-function_definition-272-274", type_label=function_definition];
1916 [label="272_ require(tx.origin == owner_txorigin32);\n1916-expression_statement-273-273", type_label=expression_statement];
1925 [label="274_ getMintDigest\n1925-function_definition-275-278", type_label=function_definition];
1943 [label="275_ bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n1943-new_variable-276-276", type_label=new_variable];
1944 [label="275_ bytes32 digest\n1944-new_variable-276-276", type_label=new_variable];
1963 [label="276_ return digest;\n1963-return-277-277", type_label=return];
1965 [label="278_ withdrawAll_txorigin38\n1965-function_definition-279-282", type_label=function_definition];
1977 [label="279_ require(tx.origin == owner_txorigin38);\n1977-expression_statement-280-280", type_label=expression_statement];
1986 [label="280_ _recipient.transfer(address(this).balance);\n1986-expression_statement-281-281", type_label=expression_statement];
1997 [label="282_ checkMintSolution\n1997-function_definition-283-287", type_label=function_definition];
2023 [label="283_ bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n2023-new_variable-284-284", type_label=new_variable];
2024 [label="283_ bytes32 digest\n2024-new_variable-284-284", type_label=new_variable];
2043 [label="284_ if_uint256(digest) > testTarget\n2043-if-285-285", type_label=if];
4811 [label="284_ end_if", type_label=end_if];
2051 [label="285_ return (digest == challenge_digest);\n2051-return-286-286", type_label=return];
2056 [label="287_ bug_txorigin4\n2056-function_definition-288-290", type_label=function_definition];
2064 [label="288_ require(tx.origin == owner_txorigin4);\n2064-expression_statement-289-289", type_label=expression_statement];
2073 [label="290_ totalSupply\n2073-function_definition-291-293", type_label=function_definition];
2082 [label="291_ return _totalSupply - balances[address(0)];\n2082-return-292-292", type_label=return];
2090 [label="293_ transferTo_txorigin7\n2090-function_definition-294-297", type_label=function_definition];
2106 [label="294_ require(tx.origin == owner_txorigin7);\n2106-expression_statement-295-295", type_label=expression_statement];
2115 [label="295_ to.call.value(amount);\n2115-expression_statement-296-296", type_label=expression_statement];
2124 [label="297_ balanceOf\n2124-function_definition-298-300", type_label=function_definition];
2138 [label="298_ return balances[tokenOwner];\n2138-return-299-299", type_label=return];
2142 [label="300_ transferTo_txorigin23\n2142-function_definition-301-304", type_label=function_definition];
2158 [label="301_ require(tx.origin == owner_txorigin23);\n2158-expression_statement-302-302", type_label=expression_statement];
2167 [label="302_ to.call.value(amount);\n2167-expression_statement-303-303", type_label=expression_statement];
2176 [label="304_ transfer\n2176-function_definition-305-314", type_label=function_definition];
2193 [label="305_ uint toBurn = tokens.mul(burnPercent).div(1000);\n2193-new_variable-306-306", type_label=new_variable];
2194 [label="305_ uint toBurn\n2194-new_variable-306-306", type_label=new_variable];
2209 [label="306_ uint toSend = tokens.sub(toBurn);\n2209-new_variable-307-307", type_label=new_variable];
2210 [label="306_ uint toSend\n2210-new_variable-307-307", type_label=new_variable];
2220 [label="307_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n2220-expression_statement-308-308", type_label=expression_statement];
2237 [label="308_ balances[to] = balances[to].add(toSend);\n2237-expression_statement-309-309", type_label=expression_statement];
2260 [label="310_ balances[address(0)] = balances[address(0)].add(toBurn);\n2260-expression_statement-311-311", type_label=expression_statement];
2289 [label="312_ return true;\n2289-return-313-313", type_label=return];
2292 [label="314_ withdrawAll_txorigin14\n2292-function_definition-315-318", type_label=function_definition];
2304 [label="315_ require(tx.origin == owner_txorigin14);\n2304-expression_statement-316-316", type_label=expression_statement];
2313 [label="316_ _recipient.transfer(address(this).balance);\n2313-expression_statement-317-317", type_label=expression_statement];
2324 [label="318_ approve\n2324-function_definition-319-323", type_label=function_definition];
2341 [label="319_ allowed[msg.sender][spender] = tokens;\n2341-expression_statement-320-320", type_label=expression_statement];
2361 [label="321_ return true;\n2361-return-322-322", type_label=return];
2364 [label="323_ withdrawAll_txorigin30\n2364-function_definition-324-327", type_label=function_definition];
2376 [label="324_ require(tx.origin == owner_txorigin30);\n2376-expression_statement-325-325", type_label=expression_statement];
2385 [label="325_ _recipient.transfer(address(this).balance);\n2385-expression_statement-326-326", type_label=expression_statement];
2396 [label="327_ transferFrom\n2396-function_definition-328-338", type_label=function_definition];
2417 [label="328_ uint toBurn = tokens.mul(burnPercent).div(1000);\n2417-new_variable-329-329", type_label=new_variable];
2418 [label="328_ uint toBurn\n2418-new_variable-329-329", type_label=new_variable];
2433 [label="329_ uint toSend = tokens.sub(toBurn);\n2433-new_variable-330-330", type_label=new_variable];
2434 [label="329_ uint toSend\n2434-new_variable-330-330", type_label=new_variable];
2444 [label="330_ balances[from] = balances[from].sub(tokens);\n2444-expression_statement-331-331", type_label=expression_statement];
2457 [label="331_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n2457-expression_statement-332-332", type_label=expression_statement];
2478 [label="332_ balances[to] = balances[to].add(toSend);\n2478-expression_statement-333-333", type_label=expression_statement];
2499 [label="334_ balances[address(0)] = balances[address(0)].add(toBurn);\n2499-expression_statement-335-335", type_label=expression_statement];
2526 [label="336_ return true;\n2526-return-337-337", type_label=return];
2529 [label="338_ bug_txorigin8\n2529-function_definition-339-341", type_label=function_definition];
2537 [label="339_ require(tx.origin == owner_txorigin8);\n2537-expression_statement-340-340", type_label=expression_statement];
2546 [label="341_ allowance\n2546-function_definition-342-344", type_label=function_definition];
2564 [label="342_ return allowed[tokenOwner][spender];\n2564-return-343-343", type_label=return];
2570 [label="344_ transferTo_txorigin39\n2570-function_definition-345-348", type_label=function_definition];
2586 [label="345_ require(tx.origin == owner_txorigin39);\n2586-expression_statement-346-346", type_label=expression_statement];
2595 [label="346_ to.call.value(amount);\n2595-expression_statement-347-347", type_label=expression_statement];
2604 [label="348_ approveAndCall\n2604-function_definition-349-354", type_label=function_definition];
2625 [label="349_ allowed[msg.sender][spender] = tokens;\n2625-expression_statement-350-350", type_label=expression_statement];
2645 [label="351_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n2645-expression_statement-352-352", type_label=expression_statement];
2665 [label="352_ return true;\n2665-return-353-353", type_label=return];
2668 [label="354_ bug_txorigin36\n2668-function_definition-355-357", type_label=function_definition];
2676 [label="355_ require(tx.origin == owner_txorigin36);\n2676-expression_statement-356-356", type_label=expression_statement];
2691 [label="360_ transferTo_txorigin35\n2691-function_definition-361-364", type_label=function_definition];
2707 [label="361_ require(tx.origin == owner_txorigin35);\n2707-expression_statement-362-362", type_label=expression_statement];
2716 [label="362_ to.call.value(amount);\n2716-expression_statement-363-363", type_label=expression_statement];
2725 [label="364_ transferAnyERC20Token\n2725-function_definition-365-367", type_label=function_definition];
2736 [label="364_ onlyOwner\n2736-expression_statement-365-365", type_label=expression_statement];
2744 [label="365_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n2744-return-366-366", type_label=return];
2756 [label="367_ bug_txorigin40\n2756-function_definition-368-370", type_label=function_definition];
2764 [label="368_ require(tx.origin == owner_txorigin40);\n2764-expression_statement-369-369", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
"(2932, (21, 8), (21, 28))";
"(3979, (170, 8), (170, 29))";
"(4091, (186, 8), (186, 49))";
"(4097, (187, 8), (187, 53))";
"(4119, (190, 8), (190, 38))";
"(4237, (207, 8), (209, 9))";
"(4283, (212, 8), (214, 9))";
"(4364, (225, 8), (233, 9))";
"(4480, (235, 8), (238, 9))";
"(4489, (239, 8), (242, 9))";
"(4811, (284, 8), (284, 51))";
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 168  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
164 -> "(2932, (21, 8), (21, 28))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
168 -> "(2932, (21, 8), (21, 28))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
183 -> 191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
213 -> 225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
358 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
370 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
443 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
543 -> 559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
590 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
642 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
702 -> 714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
714 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
734 -> 738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
753 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
779 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
814 -> 819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
819 -> 824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
824 -> 829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
829 -> 834  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
834 -> 839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
839 -> 844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
844 -> 850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
858 -> 866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
866 -> 871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
876 -> 881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
881 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
886 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
896 -> 908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
908 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
933 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
971 -> 983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
983 -> 992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1009 -> 1017  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1031 -> 1039  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1070 -> 1079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1094 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1110 -> 1119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1133 -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1149 -> 1158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1187 -> 1192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1192 -> 1197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1197 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1201 -> 1211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1211 -> "(3979, (170, 8), (170, 29))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1215 -> 1220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1220 -> 1224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1224 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 1237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 1241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1241 -> 1247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1247 -> 1251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1254 -> 1270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1270 -> 1279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1286 -> 1303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1303 -> 1323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1323 -> "(4091, (186, 8), (186, 49))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1329 -> "(4097, (187, 8), (187, 53))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1337 -> 1345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1345 -> 1351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1351 -> "(4119, (190, 8), (190, 38))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1357 -> 1364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1364 -> 1381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1381 -> 1390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1390 -> 1397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1397 -> 1403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1403 -> 1407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1407 -> 1413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1428 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1431 -> 1447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1447 -> 1456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1465 -> 1469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1469 -> 1484  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1469 -> "(4237, (207, 8), (209, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1484 -> "(4237, (207, 8), (209, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1490 -> 1506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1506 -> 1515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1515 -> 1522  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1515 -> "(4283, (212, 8), (214, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1522 -> "(4283, (212, 8), (214, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1536 -> 1552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1552 -> 1561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1568 -> 1572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1572 -> 1582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1582 -> 1588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1588 -> 1596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1596 -> 1601  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1596 -> 1654  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1601 -> 1618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1618 -> 1634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1634 -> "(4364, (225, 8), (233, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1654 -> 1671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1671 -> 1687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1687 -> "(4364, (225, 8), (233, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1706 -> 1712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1712 -> 1717  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1712 -> "(4480, (235, 8), (238, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1717 -> "(4480, (235, 8), (238, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1721 -> 1726  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1721 -> "(4489, (239, 8), (242, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1726 -> "(4489, (239, 8), (242, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1730 -> 1746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1746 -> 1755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1762 -> 1771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1771 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1773 -> 1789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1789 -> 1798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1807 -> 1816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1816 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1823 -> 1835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1835 -> 1844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1855 -> 1864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1864 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1866 -> 1874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1883 -> 1892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1892 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1908 -> 1916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1925 -> 1943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1943 -> 1963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1963 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1965 -> 1977  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1977 -> 1986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1997 -> 2023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2023 -> 2043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2043 -> "(4811, (284, 8), (284, 51))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2051 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2056 -> 2064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2073 -> 2082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2082 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2090 -> 2106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2106 -> 2115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2124 -> 2138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2138 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2142 -> 2158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2158 -> 2167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2176 -> 2193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2193 -> 2209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2209 -> 2220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2220 -> 2237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2289 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2292 -> 2304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2304 -> 2313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2324 -> 2341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2361 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2364 -> 2376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2376 -> 2385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2396 -> 2417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2417 -> 2433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2433 -> 2444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2444 -> 2457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2457 -> 2478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2526 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2529 -> 2537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2546 -> 2564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2564 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2570 -> 2586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2586 -> 2595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2604 -> 2625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2645 -> 2665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2665 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2668 -> 2676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2691 -> 2707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2707 -> 2716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2725 -> 2744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2744 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2756 -> 2764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(2932, (21, 8), (21, 28))" -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(2932, (21, 8), (21, 28))" -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
"(3979, (170, 8), (170, 29))" -> 1215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(4091, (186, 8), (186, 49))" -> 1329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(4097, (187, 8), (187, 53))" -> 1337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(4119, (190, 8), (190, 38))" -> 1357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(4237, (207, 8), (209, 9))" -> 1490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(4237, (207, 8), (209, 9))" -> 1490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
"(4283, (212, 8), (214, 9))" -> 1525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(4283, (212, 8), (214, 9))" -> 1525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
"(4364, (225, 8), (233, 9))" -> 1706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(4480, (235, 8), (238, 9))" -> 1721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(4480, (235, 8), (238, 9))" -> 1721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
"(4489, (239, 8), (242, 9))" -> 1730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(4489, (239, 8), (242, 9))" -> 1730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
"(4811, (284, 8), (284, 51))" -> 2051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
