digraph  {
13 [label="2_ bug_txorigin40\n13-function_definition-3-5", type_label=function_definition];
21 [label="3_ require(tx.origin == owner_txorigin40);\n21-expression_statement-4-4", type_label=expression_statement];
36 [label="6_ _setMetadata\n36-function_definition-7-9", type_label=function_definition];
48 [label="9_ transferTo_txorigin11\n48-function_definition-10-13", type_label=function_definition];
64 [label="10_ require(tx.origin == owner_txorigin11);\n64-expression_statement-11-11", type_label=expression_statement];
73 [label="11_ to.call.value(amount);\n73-expression_statement-12-12", type_label=expression_statement];
85 [label="15_ withdrawAll_txorigin10\n85-function_definition-16-19", type_label=function_definition];
97 [label="16_ require(tx.origin == owner_txorigin10);\n97-expression_statement-17-17", type_label=expression_statement];
106 [label="17_ _recipient.transfer(address(this).balance);\n106-expression_statement-18-18", type_label=expression_statement];
117 [label="19_ address private _operator;\n117-new_variable-20-20", type_label=new_variable];
122 [label="20_ withdrawAll_txorigin22\n122-function_definition-21-24", type_label=function_definition];
134 [label="21_ require(tx.origin == owner_txorigin22);\n134-expression_statement-22-22", type_label=expression_statement];
143 [label="22_ _recipient.transfer(address(this).balance);\n143-expression_statement-23-23", type_label=expression_statement];
154 [label="24_ bool private _status;\n154-new_variable-25-25", type_label=new_variable];
159 [label="25_ sendto_txorigin33\n159-function_definition-26-29", type_label=function_definition];
175 [label="26_ require (tx.origin == owner_txorigin33);\n175-expression_statement-27-27", type_label=expression_statement];
184 [label="27_ receiver.transfer(amount);\n184-expression_statement-28-28", type_label=expression_statement];
201 [label="30_ _setOperator\n201-function_definition-31-35", type_label=function_definition];
209 [label="31_ require(_operator != operator, \"cannot set same operator\");\n209-expression_statement-32-32", type_label=expression_statement];
219 [label="32_ _operator = operator;\n219-expression_statement-33-33", type_label=expression_statement];
230 [label="35_ sendto_txorigin1\n230-function_definition-36-39", type_label=function_definition];
246 [label="36_ require (tx.origin == owner_txorigin1);\n246-expression_statement-37-37", type_label=expression_statement];
255 [label="37_ receiver.transfer(amount);\n255-expression_statement-38-38", type_label=expression_statement];
262 [label="39_ _transferOperator\n262-function_definition-40-43", type_label=function_definition];
270 [label="40_ require(_operator != address(0), \"operator not set\");\n270-expression_statement-41-41", type_label=expression_statement];
282 [label="41_ _setOperator(operator);\n282-expression_statement-42-42", type_label=expression_statement];
287 [label="43_ withdrawAll_txorigin2\n287-function_definition-44-47", type_label=function_definition];
299 [label="44_ require(tx.origin == owner_txorigin2);\n299-expression_statement-45-45", type_label=expression_statement];
308 [label="45_ _recipient.transfer(address(this).balance);\n308-expression_statement-46-46", type_label=expression_statement];
319 [label="47_ _renounceOperator\n319-function_definition-48-53", type_label=function_definition];
323 [label="48_ require(hasActiveOperator(), \"only when operator active\");\n323-expression_statement-49-49", type_label=expression_statement];
332 [label="49_ _operator = address(0);\n332-expression_statement-50-50", type_label=expression_statement];
338 [label="50_ _status = false;\n338-expression_statement-51-51", type_label=expression_statement];
352 [label="53_ sendto_txorigin17\n352-function_definition-54-57", type_label=function_definition];
368 [label="54_ require (tx.origin == owner_txorigin17);\n368-expression_statement-55-55", type_label=expression_statement];
377 [label="55_ receiver.transfer(amount);\n377-expression_statement-56-56", type_label=expression_statement];
384 [label="57_ _activateOperator\n384-function_definition-58-62", type_label=function_definition];
388 [label="58_ require(!hasActiveOperator(), \"only when operator not active\");\n388-expression_statement-59-59", type_label=expression_statement];
398 [label="59_ _status = true;\n398-expression_statement-60-60", type_label=expression_statement];
410 [label="62_ sendto_txorigin37\n410-function_definition-63-66", type_label=function_definition];
426 [label="63_ require (tx.origin == owner_txorigin37);\n426-expression_statement-64-64", type_label=expression_statement];
435 [label="64_ receiver.transfer(amount);\n435-expression_statement-65-65", type_label=expression_statement];
442 [label="66_ _deactivateOperator\n442-function_definition-67-71", type_label=function_definition];
446 [label="67_ require(hasActiveOperator(), \"only when operator active\");\n446-expression_statement-68-68", type_label=expression_statement];
455 [label="68_ _status = false;\n455-expression_statement-69-69", type_label=expression_statement];
467 [label="71_ transferTo_txorigin3\n467-function_definition-72-75", type_label=function_definition];
483 [label="72_ require(tx.origin == owner_txorigin3);\n483-expression_statement-73-73", type_label=expression_statement];
492 [label="73_ to.call.value(amount);\n492-expression_statement-74-74", type_label=expression_statement];
501 [label="75_ getOperator\n501-function_definition-76-78", type_label=function_definition];
511 [label="76_ operator = _operator;\n511-expression_statement-77-77", type_label=expression_statement];
515 [label="78_ sendto_txorigin9\n515-function_definition-79-82", type_label=function_definition];
531 [label="79_ require (tx.origin == owner_txorigin9);\n531-expression_statement-80-80", type_label=expression_statement];
540 [label="80_ receiver.transfer(amount);\n540-expression_statement-81-81", type_label=expression_statement];
547 [label="82_ isOperator\n547-function_definition-83-85", type_label=function_definition];
561 [label="83_ return (caller == getOperator());\n561-return-84-84", type_label=return];
567 [label="85_ sendto_txorigin25\n567-function_definition-86-89", type_label=function_definition];
583 [label="86_ require (tx.origin == owner_txorigin25);\n583-expression_statement-87-87", type_label=expression_statement];
592 [label="87_ receiver.transfer(amount);\n592-expression_statement-88-88", type_label=expression_statement];
599 [label="89_ hasActiveOperator\n599-function_definition-90-92", type_label=function_definition];
609 [label="90_ return _status;\n609-return-91-91", type_label=return];
611 [label="92_ transferTo_txorigin19\n611-function_definition-93-96", type_label=function_definition];
627 [label="93_ require(tx.origin == owner_txorigin19);\n627-expression_statement-94-94", type_label=expression_statement];
636 [label="94_ to.call.value(amount);\n636-expression_statement-95-95", type_label=expression_statement];
645 [label="96_ isActiveOperator\n645-function_definition-97-99", type_label=function_definition];
659 [label="97_ return (isOperator(caller) && hasActiveOperator());\n659-return-98-98", type_label=return];
668 [label="99_ withdrawAll_txorigin26\n668-function_definition-100-103", type_label=function_definition];
680 [label="100_ require(tx.origin == owner_txorigin26);\n680-expression_statement-101-101", type_label=expression_statement];
689 [label="101_ _recipient.transfer(address(this).balance);\n689-expression_statement-102-102", type_label=expression_statement];
703 [label="105_ transferTo_txorigin27\n703-function_definition-106-109", type_label=function_definition];
719 [label="106_ require(tx.origin == owner_txorigin27);\n719-expression_statement-107-107", type_label=expression_statement];
728 [label="107_ to.call.value(amount);\n728-expression_statement-108-108", type_label=expression_statement];
747 [label="110_ transferTo_txorigin31\n747-function_definition-111-114", type_label=function_definition];
763 [label="111_ require(tx.origin == owner_txorigin31);\n763-expression_statement-112-112", type_label=expression_statement];
772 [label="112_ to.call.value(amount);\n772-expression_statement-113-113", type_label=expression_statement];
787 [label="115_ _setMultiHashFormat\n787-function_definition-116-118", type_label=function_definition];
805 [label="118_ bug_txorigin20\n805-function_definition-119-121", type_label=function_definition];
813 [label="119_ require(tx.origin == owner_txorigin20);\n813-expression_statement-120-120", type_label=expression_statement];
822 [label="121_ _submitHash\n822-function_definition-122-124", type_label=function_definition];
834 [label="124_ bug_txorigin32\n834-function_definition-125-127", type_label=function_definition];
842 [label="125_ require(tx.origin == owner_txorigin32);\n842-expression_statement-126-126", type_label=expression_statement];
854 [label="129_ struct MultiHash {\n        bytes32 hash;\n        uint8 hashFunction;\n        uint8 digestSize;\n    }\n854-expression_statement-130-134", type_label=expression_statement];
868 [label="134_ _combineMultiHash\n868-function_definition-135-144", type_label=function_definition];
882 [label="135_ bytes memory out = new bytes(34);\n882-new_variable-136-136", type_label=new_variable];
883 [label="135_ bytes memory out\n883-new_variable-136-136", type_label=new_variable];
893 [label="136_ out[0] = byte(multihash.hashFunction);\n893-expression_statement-137-137", type_label=expression_statement];
903 [label="137_ out[1] = byte(multihash.digestSize);\n903-expression_statement-138-138", type_label=expression_statement];
913 [label="138_ uint8 i;\n913-new_variable-139-139", type_label=new_variable];
914 [label="138_ uint8 i\n914-new_variable-139-139", type_label=new_variable];
918 [label="139_ for(i < 32;;i++)\n918-for-140-142", type_label=for];
2811 [label="139_ end_for", type_label=end_for];
927 [label="139_ i++\n927-expression_statement-140-140", type_label=expression_statement];
930 [label="140_ out[i+2] = multihash.hash[i];\n930-expression_statement-141-141", type_label=expression_statement];
942 [label="142_ return out;\n942-return-143-143", type_label=return];
944 [label="144_ withdrawAll_txorigin38\n944-function_definition-145-148", type_label=function_definition];
956 [label="145_ require(tx.origin == owner_txorigin38);\n956-expression_statement-146-146", type_label=expression_statement];
965 [label="146_ _recipient.transfer(address(this).balance);\n965-expression_statement-147-147", type_label=expression_statement];
976 [label="148_ _splitMultiHash\n976-function_definition-149-162", type_label=function_definition];
990 [label="149_ require(source.length == 34, \"length of source must be 34\");\n990-expression_statement-150-150", type_label=expression_statement];
1002 [label="150_ uint8 hashFunction = uint8(source[0]);\n1002-new_variable-151-151", type_label=new_variable];
1003 [label="150_ uint8 hashFunction\n1003-new_variable-151-151", type_label=new_variable];
1012 [label="151_ uint8 digestSize = uint8(source[1]);\n1012-new_variable-152-152", type_label=new_variable];
1013 [label="151_ uint8 digestSize\n1013-new_variable-152-152", type_label=new_variable];
1022 [label="152_ bytes32 hash;\n1022-new_variable-153-153", type_label=new_variable];
1023 [label="152_ bytes32 hash\n1023-new_variable-153-153", type_label=new_variable];
1040 [label="156_ return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n1040-return-157-161", type_label=return];
1054 [label="162_ bug_txorigin4\n1054-function_definition-163-165", type_label=function_definition];
1062 [label="163_ require(tx.origin == owner_txorigin4);\n1062-expression_statement-164-164", type_label=expression_statement];
1092 [label="168_ create\n1092-function_definition-169-169", type_label=function_definition];
1104 [label="169_ createSalty\n1104-function_definition-170-170", type_label=function_definition];
1120 [label="170_ getInitSelector\n1120-function_definition-171-171", type_label=function_definition];
1129 [label="171_ getInstanceRegistry\n1129-function_definition-172-172", type_label=function_definition];
1138 [label="172_ getTemplate\n1138-function_definition-173-173", type_label=function_definition];
1147 [label="173_ getSaltyInstance\n1147-function_definition-174-174", type_label=function_definition];
1163 [label="174_ getNextInstance\n1163-function_definition-175-175", type_label=function_definition];
1175 [label="175_ getInstanceCreator\n1175-function_definition-176-176", type_label=function_definition];
1188 [label="176_ getInstanceType\n1188-function_definition-177-177", type_label=function_definition];
1197 [label="177_ getInstanceCount\n1197-function_definition-178-178", type_label=function_definition];
1206 [label="178_ getInstance\n1206-function_definition-179-179", type_label=function_definition];
1219 [label="179_ getInstances\n1219-function_definition-180-180", type_label=function_definition];
1229 [label="180_ getPaginatedInstances\n1229-function_definition-181-181", type_label=function_definition];
1250 [label="183_ bug_txorigin12\n1250-function_definition-184-186", type_label=function_definition];
1258 [label="184_ require(tx.origin == owner_txorigin12);\n1258-expression_statement-185-185", type_label=expression_statement];
1267 [label="186_ address private _factory;\n1267-new_variable-187-187", type_label=new_variable];
1272 [label="187_ modifier initializeTemplate() {\n        _factory = msg.sender;\n        uint32 codeSize;\n        assembly { codeSize := extcodesize(address) }\n        require(codeSize == 0, \"must be called within contract constructor\");\n        _;\n    }\n1272-expression_statement-188-194", type_label=expression_statement];
1275 [label="188_ _factory = msg.sender;\n1275-expression_statement-189-189", type_label=expression_statement];
1281 [label="189_ uint32 codeSize;\n1281-new_variable-190-190", type_label=new_variable];
1282 [label="189_ uint32 codeSize\n1282-new_variable-190-190", type_label=new_variable];
1295 [label="191_ require(codeSize == 0, \"must be called within contract constructor\");\n1295-expression_statement-192-192", type_label=expression_statement];
1305 [label="192_ _;\n1305-expression_statement-193-193", type_label=expression_statement];
1307 [label="194_ getCreator\n1307-function_definition-195-197", type_label=function_definition];
1317 [label="195_ creator = iFactory(_factory).getInstanceCreator(address(this));\n1317-expression_statement-196-196", type_label=expression_statement];
1331 [label="197_ transferTo_txorigin7\n1331-function_definition-198-201", type_label=function_definition];
1347 [label="198_ require(tx.origin == owner_txorigin7);\n1347-expression_statement-199-199", type_label=expression_statement];
1356 [label="199_ to.call.value(amount);\n1356-expression_statement-200-200", type_label=expression_statement];
1365 [label="201_ isCreator\n1365-function_definition-202-204", type_label=function_definition];
1379 [label="202_ ok = (caller == getCreator());\n1379-expression_statement-203-203", type_label=expression_statement];
1387 [label="204_ transferTo_txorigin23\n1387-function_definition-205-208", type_label=function_definition];
1403 [label="205_ require(tx.origin == owner_txorigin23);\n1403-expression_statement-206-206", type_label=expression_statement];
1412 [label="206_ to.call.value(amount);\n1412-expression_statement-207-207", type_label=expression_statement];
1421 [label="208_ getFactory\n1421-function_definition-209-211", type_label=function_definition];
1431 [label="209_ factory = _factory;\n1431-expression_statement-210-210", type_label=expression_statement];
1435 [label="211_ withdrawAll_txorigin14\n1435-function_definition-212-215", type_label=function_definition];
1447 [label="212_ require(tx.origin == owner_txorigin14);\n1447-expression_statement-213-213", type_label=expression_statement];
1456 [label="213_ _recipient.transfer(address(this).balance);\n1456-expression_statement-214-214", type_label=expression_statement];
1485 [label="217_ sendto_txorigin13\n1485-function_definition-218-221", type_label=function_definition];
1501 [label="218_ require (tx.origin == owner_txorigin13);\n1501-expression_statement-219-219", type_label=expression_statement];
1510 [label="219_ receiver.transfer(amount);\n1510-expression_statement-220-220", type_label=expression_statement];
1531 [label="222_ initialize\n1531-function_definition-223-241", type_label=function_definition];
1546 [label="226_ initializeTemplate()\n1546-expression_statement-227-227", type_label=expression_statement];
1549 [label="227_ if_operator != address(0)\n1549-if-228-231", type_label=if];
3442 [label="227_ end_if", type_label=end_if];
1556 [label="228_ Operated._setOperator(operator);\n1556-expression_statement-229-229", type_label=expression_statement];
1563 [label="229_ Operated._activateOperator();\n1563-expression_statement-230-230", type_label=expression_statement];
1568 [label="231_ if_multihash.length != 0\n1568-if-232-236", type_label=if];
3461 [label="231_ end_if", type_label=end_if];
1575 [label="232_ MultiHashWrapper.MultiHash memory multihashObj = MultiHashWrapper._splitMultiHash(multihash);\n1575-new_variable-233-233", type_label=new_variable];
1576 [label="232_ MultiHashWrapper.MultiHash memory multihashObj\n1576-new_variable-233-233", type_label=new_variable];
1588 [label="233_ ProofHashes._setMultiHashFormat(multihashObj.hashFunction, multihashObj.digestSize);\n1588-expression_statement-234-234", type_label=expression_statement];
1601 [label="234_ ProofHashes._submitHash(multihashObj.hash);\n1601-expression_statement-235-235", type_label=expression_statement];
1610 [label="236_ if_metadata.length != 0\n1610-if-237-239", type_label=if];
3503 [label="236_ end_if", type_label=end_if];
1617 [label="237_ EventMetadata._setMetadata(metadata);\n1617-expression_statement-238-238", type_label=expression_statement];
1632 [label="241_ withdrawAll_txorigin30\n1632-function_definition-242-245", type_label=function_definition];
1644 [label="242_ require(tx.origin == owner_txorigin30);\n1644-expression_statement-243-243", type_label=expression_statement];
1653 [label="243_ _recipient.transfer(address(this).balance);\n1653-expression_statement-244-244", type_label=expression_statement];
1664 [label="245_ submitHash\n1664-function_definition-246-249", type_label=function_definition];
1672 [label="246_ require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n1672-expression_statement-247-247", type_label=expression_statement];
1696 [label="247_ ProofHashes._submitHash(multihash);\n1696-expression_statement-248-248", type_label=expression_statement];
1703 [label="249_ bug_txorigin8\n1703-function_definition-250-252", type_label=function_definition];
1711 [label="250_ require(tx.origin == owner_txorigin8);\n1711-expression_statement-251-251", type_label=expression_statement];
1720 [label="252_ setMetadata\n1720-function_definition-253-256", type_label=function_definition];
1728 [label="253_ require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n1728-expression_statement-254-254", type_label=expression_statement];
1752 [label="254_ EventMetadata._setMetadata(metadata);\n1752-expression_statement-255-255", type_label=expression_statement];
1759 [label="256_ transferTo_txorigin39\n1759-function_definition-257-260", type_label=function_definition];
1775 [label="257_ require(tx.origin == owner_txorigin39);\n1775-expression_statement-258-258", type_label=expression_statement];
1784 [label="258_ to.call.value(amount);\n1784-expression_statement-259-259", type_label=expression_statement];
1793 [label="260_ transferOperator\n1793-function_definition-261-264", type_label=function_definition];
1801 [label="261_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n1801-expression_statement-262-262", type_label=expression_statement];
1816 [label="262_ Operated._transferOperator(operator);\n1816-expression_statement-263-263", type_label=expression_statement];
1823 [label="264_ bug_txorigin36\n1823-function_definition-265-267", type_label=function_definition];
1831 [label="265_ require(tx.origin == owner_txorigin36);\n1831-expression_statement-266-266", type_label=expression_statement];
1840 [label="267_ renounceOperator\n1840-function_definition-268-271", type_label=function_definition];
1844 [label="268_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n1844-expression_statement-269-269", type_label=expression_statement];
1859 [label="269_ Operated._renounceOperator();\n1859-expression_statement-270-270", type_label=expression_statement];
1864 [label="271_ transferTo_txorigin35\n1864-function_definition-272-275", type_label=function_definition];
1880 [label="272_ require(tx.origin == owner_txorigin35);\n1880-expression_statement-273-273", type_label=expression_statement];
1889 [label="273_ to.call.value(amount);\n1889-expression_statement-274-274", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
"(2811, (139, 8), (141, 9))";
"(3442, (227, 8), (230, 9))";
"(3461, (231, 8), (235, 9))";
"(3503, (236, 8), (238, 9))";
1624;
13 -> 21  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 64  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
64 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 97  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
97 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
159 -> 175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
175 -> 184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
201 -> 209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
209 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
246 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
270 -> 282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
299 -> 308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
319 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
323 -> 332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
332 -> 338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
352 -> 368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
368 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
388 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
426 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
442 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
547 -> 561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
567 -> 583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
583 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
599 -> 609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
609 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
611 -> 627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
627 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
645 -> 659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
659 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
668 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
719 -> 728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
747 -> 763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
805 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
834 -> 842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
882 -> 893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
893 -> 903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
903 -> 913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
913 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 930  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
918 -> "(2811, (139, 8), (141, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
927 -> 918  [color=red, controlflow_type=loop_control, edge_type=CFG_edge, key=0, label=loop_control];
930 -> 927  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
942 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
944 -> 956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
956 -> 965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
976 -> 990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
990 -> 1002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1002 -> 1012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1012 -> 1022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1040 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1054 -> 1062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1250 -> 1258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1267 -> 1272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1275 -> 1281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1295 -> 1305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1307 -> 1317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 1347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1347 -> 1356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1365 -> 1379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1387 -> 1403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1403 -> 1412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1421 -> 1431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1435 -> 1447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1447 -> 1456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1485 -> 1501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1501 -> 1510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1531 -> 1549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1549 -> 1556  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1549 -> "(3442, (227, 8), (230, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1556 -> 1563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1563 -> "(3442, (227, 8), (230, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1568 -> 1575  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1568 -> "(3461, (231, 8), (235, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1575 -> 1588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1588 -> 1601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1601 -> "(3461, (231, 8), (235, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1610 -> 1617  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1610 -> "(3503, (236, 8), (238, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1617 -> "(3503, (236, 8), (238, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1632 -> 1644  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1644 -> 1653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1664 -> 1672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1672 -> 1696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1703 -> 1711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1720 -> 1728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1728 -> 1752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1759 -> 1775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1775 -> 1784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1793 -> 1801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1801 -> 1816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1823 -> 1831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1840 -> 1844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1844 -> 1859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1864 -> 1880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1880 -> 1889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(2811, (139, 8), (141, 9))" -> 942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(3442, (227, 8), (230, 9))" -> 1568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(3442, (227, 8), (230, 9))" -> 1568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
"(3461, (231, 8), (235, 9))" -> 1610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(3461, (231, 8), (235, 9))" -> 1610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
"(3503, (236, 8), (238, 9))" -> 1624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(3503, (236, 8), (238, 9))" -> 1624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
}
