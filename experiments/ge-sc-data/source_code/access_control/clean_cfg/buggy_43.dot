digraph  {
13 [label="2_ sendto_txorigin33\n13-function_definition-3-6", type_label=function_definition];
29 [label="3_ require (tx.origin == owner_txorigin33);\n29-expression_statement-4-4", type_label=expression_statement];
38 [label="4_ receiver.transfer(amount);\n38-expression_statement-5-5", type_label=expression_statement];
51 [label="7_ _setMetadata\n51-function_definition-8-10", type_label=function_definition];
63 [label="10_ withdrawAll_txorigin2\n63-function_definition-11-14", type_label=function_definition];
75 [label="11_ require(tx.origin == owner_txorigin2);\n75-expression_statement-12-12", type_label=expression_statement];
84 [label="12_ _recipient.transfer(address(this).balance);\n84-expression_statement-13-13", type_label=expression_statement];
98 [label="16_ withdrawAll_txorigin22\n98-function_definition-17-20", type_label=function_definition];
110 [label="17_ require(tx.origin == owner_txorigin22);\n110-expression_statement-18-18", type_label=expression_statement];
119 [label="18_ _recipient.transfer(address(this).balance);\n119-expression_statement-19-19", type_label=expression_statement];
130 [label="20_ address private _operator;\n130-new_variable-21-21", type_label=new_variable];
135 [label="21_ bug_txorigin12\n135-function_definition-22-24", type_label=function_definition];
143 [label="22_ require(tx.origin == owner_txorigin12);\n143-expression_statement-23-23", type_label=expression_statement];
152 [label="24_ bool private _status;\n152-new_variable-25-25", type_label=new_variable];
157 [label="25_ transferTo_txorigin27\n157-function_definition-26-29", type_label=function_definition];
173 [label="26_ require(tx.origin == owner_txorigin27);\n173-expression_statement-27-27", type_label=expression_statement];
182 [label="27_ to.call.value(amount);\n182-expression_statement-28-28", type_label=expression_statement];
201 [label="30_ _setOperator\n201-function_definition-31-35", type_label=function_definition];
209 [label="31_ require(_operator != operator, \"cannot set same operator\");\n209-expression_statement-32-32", type_label=expression_statement];
219 [label="32_ _operator = operator;\n219-expression_statement-33-33", type_label=expression_statement];
230 [label="35_ sendto_txorigin17\n230-function_definition-36-39", type_label=function_definition];
246 [label="36_ require (tx.origin == owner_txorigin17);\n246-expression_statement-37-37", type_label=expression_statement];
255 [label="37_ receiver.transfer(amount);\n255-expression_statement-38-38", type_label=expression_statement];
262 [label="39_ _transferOperator\n262-function_definition-40-43", type_label=function_definition];
270 [label="40_ require(_operator != address(0), \"operator not set\");\n270-expression_statement-41-41", type_label=expression_statement];
282 [label="41_ _setOperator(operator);\n282-expression_statement-42-42", type_label=expression_statement];
287 [label="43_ sendto_txorigin37\n287-function_definition-44-47", type_label=function_definition];
303 [label="44_ require (tx.origin == owner_txorigin37);\n303-expression_statement-45-45", type_label=expression_statement];
312 [label="45_ receiver.transfer(amount);\n312-expression_statement-46-46", type_label=expression_statement];
319 [label="47_ _renounceOperator\n319-function_definition-48-53", type_label=function_definition];
323 [label="48_ require(hasActiveOperator(), \"only when operator active\");\n323-expression_statement-49-49", type_label=expression_statement];
332 [label="49_ _operator = address(0);\n332-expression_statement-50-50", type_label=expression_statement];
338 [label="50_ _status = false;\n338-expression_statement-51-51", type_label=expression_statement];
352 [label="53_ transferTo_txorigin3\n352-function_definition-54-57", type_label=function_definition];
368 [label="54_ require(tx.origin == owner_txorigin3);\n368-expression_statement-55-55", type_label=expression_statement];
377 [label="55_ to.call.value(amount);\n377-expression_statement-56-56", type_label=expression_statement];
386 [label="57_ _activateOperator\n386-function_definition-58-62", type_label=function_definition];
390 [label="58_ require(!hasActiveOperator(), \"only when operator not active\");\n390-expression_statement-59-59", type_label=expression_statement];
400 [label="59_ _status = true;\n400-expression_statement-60-60", type_label=expression_statement];
412 [label="62_ sendto_txorigin9\n412-function_definition-63-66", type_label=function_definition];
428 [label="63_ require (tx.origin == owner_txorigin9);\n428-expression_statement-64-64", type_label=expression_statement];
437 [label="64_ receiver.transfer(amount);\n437-expression_statement-65-65", type_label=expression_statement];
444 [label="66_ _deactivateOperator\n444-function_definition-67-71", type_label=function_definition];
448 [label="67_ require(hasActiveOperator(), \"only when operator active\");\n448-expression_statement-68-68", type_label=expression_statement];
457 [label="68_ _status = false;\n457-expression_statement-69-69", type_label=expression_statement];
469 [label="71_ sendto_txorigin25\n469-function_definition-72-75", type_label=function_definition];
485 [label="72_ require (tx.origin == owner_txorigin25);\n485-expression_statement-73-73", type_label=expression_statement];
494 [label="73_ receiver.transfer(amount);\n494-expression_statement-74-74", type_label=expression_statement];
501 [label="75_ getOperator\n501-function_definition-76-78", type_label=function_definition];
511 [label="76_ operator = _operator;\n511-expression_statement-77-77", type_label=expression_statement];
515 [label="78_ transferTo_txorigin19\n515-function_definition-79-82", type_label=function_definition];
531 [label="79_ require(tx.origin == owner_txorigin19);\n531-expression_statement-80-80", type_label=expression_statement];
540 [label="80_ to.call.value(amount);\n540-expression_statement-81-81", type_label=expression_statement];
549 [label="82_ isOperator\n549-function_definition-83-85", type_label=function_definition];
563 [label="83_ return (caller == getOperator());\n563-return-84-84", type_label=return];
569 [label="85_ withdrawAll_txorigin26\n569-function_definition-86-89", type_label=function_definition];
581 [label="86_ require(tx.origin == owner_txorigin26);\n581-expression_statement-87-87", type_label=expression_statement];
590 [label="87_ _recipient.transfer(address(this).balance);\n590-expression_statement-88-88", type_label=expression_statement];
601 [label="89_ hasActiveOperator\n601-function_definition-90-92", type_label=function_definition];
611 [label="90_ return _status;\n611-return-91-91", type_label=return];
613 [label="92_ bug_txorigin20\n613-function_definition-93-95", type_label=function_definition];
621 [label="93_ require(tx.origin == owner_txorigin20);\n621-expression_statement-94-94", type_label=expression_statement];
630 [label="95_ isActiveOperator\n630-function_definition-96-98", type_label=function_definition];
644 [label="96_ return (isOperator(caller) && hasActiveOperator());\n644-return-97-97", type_label=return];
653 [label="98_ bug_txorigin32\n653-function_definition-99-101", type_label=function_definition];
661 [label="99_ require(tx.origin == owner_txorigin32);\n661-expression_statement-100-100", type_label=expression_statement];
673 [label="103_ struct MultiHash {\n        bytes32 hash;\n        uint8 hashFunction;\n        uint8 digestSize;\n    }\n673-expression_statement-104-108", type_label=expression_statement];
687 [label="108_ _combineMultiHash\n687-function_definition-109-118", type_label=function_definition];
701 [label="109_ bytes memory out = new bytes(34);\n701-new_variable-110-110", type_label=new_variable];
702 [label="109_ bytes memory out\n702-new_variable-110-110", type_label=new_variable];
712 [label="110_ out[0] = byte(multihash.hashFunction);\n712-expression_statement-111-111", type_label=expression_statement];
722 [label="111_ out[1] = byte(multihash.digestSize);\n722-expression_statement-112-112", type_label=expression_statement];
732 [label="112_ uint8 i;\n732-new_variable-113-113", type_label=new_variable];
733 [label="112_ uint8 i\n733-new_variable-113-113", type_label=new_variable];
737 [label="113_ for(i < 32;;i++)\n737-for-114-116", type_label=for];
2545 [label="113_ end_for", type_label=end_for];
746 [label="113_ i++\n746-expression_statement-114-114", type_label=expression_statement];
749 [label="114_ out[i+2] = multihash.hash[i];\n749-expression_statement-115-115", type_label=expression_statement];
761 [label="116_ return out;\n761-return-117-117", type_label=return];
763 [label="118_ withdrawAll_txorigin38\n763-function_definition-119-122", type_label=function_definition];
775 [label="119_ require(tx.origin == owner_txorigin38);\n775-expression_statement-120-120", type_label=expression_statement];
784 [label="120_ _recipient.transfer(address(this).balance);\n784-expression_statement-121-121", type_label=expression_statement];
795 [label="122_ _splitMultiHash\n795-function_definition-123-136", type_label=function_definition];
809 [label="123_ require(source.length == 34, \"length of source must be 34\");\n809-expression_statement-124-124", type_label=expression_statement];
821 [label="124_ uint8 hashFunction = uint8(source[0]);\n821-new_variable-125-125", type_label=new_variable];
822 [label="124_ uint8 hashFunction\n822-new_variable-125-125", type_label=new_variable];
831 [label="125_ uint8 digestSize = uint8(source[1]);\n831-new_variable-126-126", type_label=new_variable];
832 [label="125_ uint8 digestSize\n832-new_variable-126-126", type_label=new_variable];
841 [label="126_ bytes32 hash;\n841-new_variable-127-127", type_label=new_variable];
842 [label="126_ bytes32 hash\n842-new_variable-127-127", type_label=new_variable];
859 [label="130_ return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n859-return-131-135", type_label=return];
873 [label="136_ bug_txorigin4\n873-function_definition-137-139", type_label=function_definition];
881 [label="137_ require(tx.origin == owner_txorigin4);\n881-expression_statement-138-138", type_label=expression_statement];
911 [label="142_ create\n911-function_definition-143-143", type_label=function_definition];
923 [label="143_ createSalty\n923-function_definition-144-144", type_label=function_definition];
939 [label="144_ getInitSelector\n939-function_definition-145-145", type_label=function_definition];
948 [label="145_ getInstanceRegistry\n948-function_definition-146-146", type_label=function_definition];
957 [label="146_ getTemplate\n957-function_definition-147-147", type_label=function_definition];
966 [label="147_ getSaltyInstance\n966-function_definition-148-148", type_label=function_definition];
982 [label="148_ getNextInstance\n982-function_definition-149-149", type_label=function_definition];
994 [label="149_ getInstanceCreator\n994-function_definition-150-150", type_label=function_definition];
1007 [label="150_ getInstanceType\n1007-function_definition-151-151", type_label=function_definition];
1016 [label="151_ getInstanceCount\n1016-function_definition-152-152", type_label=function_definition];
1025 [label="152_ getInstance\n1025-function_definition-153-153", type_label=function_definition];
1038 [label="153_ getInstances\n1038-function_definition-154-154", type_label=function_definition];
1048 [label="154_ getPaginatedInstances\n1048-function_definition-155-155", type_label=function_definition];
1072 [label="157_ transferTo_txorigin11\n1072-function_definition-158-161", type_label=function_definition];
1088 [label="158_ require(tx.origin == owner_txorigin11);\n1088-expression_statement-159-159", type_label=expression_statement];
1097 [label="159_ to.call.value(amount);\n1097-expression_statement-160-160", type_label=expression_statement];
1106 [label="161_ MultiHash private _proofHash;\n1106-new_variable-162-162", type_label=new_variable];
1112 [label="162_ transferTo_txorigin31\n1112-function_definition-163-166", type_label=function_definition];
1128 [label="163_ require(tx.origin == owner_txorigin31);\n1128-expression_statement-164-164", type_label=expression_statement];
1137 [label="164_ to.call.value(amount);\n1137-expression_statement-165-165", type_label=expression_statement];
1156 [label="167_ _setProofHash\n1156-function_definition-168-171", type_label=function_definition];
1164 [label="168_ _proofHash = MultiHashWrapper._splitMultiHash(proofHash);\n1164-expression_statement-169-169", type_label=expression_statement];
1181 [label="171_ transferTo_txorigin7\n1181-function_definition-172-175", type_label=function_definition];
1197 [label="172_ require(tx.origin == owner_txorigin7);\n1197-expression_statement-173-173", type_label=expression_statement];
1206 [label="173_ to.call.value(amount);\n1206-expression_statement-174-174", type_label=expression_statement];
1215 [label="175_ getProofHash\n1215-function_definition-176-178", type_label=function_definition];
1225 [label="176_ proofHash = MultiHashWrapper._combineMultiHash(_proofHash);\n1225-expression_statement-177-177", type_label=expression_statement];
1234 [label="178_ transferTo_txorigin23\n1234-function_definition-179-182", type_label=function_definition];
1250 [label="179_ require(tx.origin == owner_txorigin23);\n1250-expression_statement-180-180", type_label=expression_statement];
1259 [label="180_ to.call.value(amount);\n1259-expression_statement-181-181", type_label=expression_statement];
1271 [label="184_ sendto_txorigin1\n1271-function_definition-185-188", type_label=function_definition];
1287 [label="185_ require (tx.origin == owner_txorigin1);\n1287-expression_statement-186-186", type_label=expression_statement];
1296 [label="186_ receiver.transfer(amount);\n1296-expression_statement-187-187", type_label=expression_statement];
1303 [label="188_ address private _factory;\n1303-new_variable-189-189", type_label=new_variable];
1308 [label="189_ modifier initializeTemplate() {\n        _factory = msg.sender;\n        uint32 codeSize;\n        assembly { codeSize := extcodesize(address) }\n        require(codeSize == 0, \"must be called within contract constructor\");\n        _;\n    }\n1308-expression_statement-190-196", type_label=expression_statement];
1311 [label="190_ _factory = msg.sender;\n1311-expression_statement-191-191", type_label=expression_statement];
1317 [label="191_ uint32 codeSize;\n1317-new_variable-192-192", type_label=new_variable];
1318 [label="191_ uint32 codeSize\n1318-new_variable-192-192", type_label=new_variable];
1331 [label="193_ require(codeSize == 0, \"must be called within contract constructor\");\n1331-expression_statement-194-194", type_label=expression_statement];
1341 [label="194_ _;\n1341-expression_statement-195-195", type_label=expression_statement];
1343 [label="196_ getCreator\n1343-function_definition-197-199", type_label=function_definition];
1353 [label="197_ creator = iFactory(_factory).getInstanceCreator(address(this));\n1353-expression_statement-198-198", type_label=expression_statement];
1367 [label="199_ withdrawAll_txorigin14\n1367-function_definition-200-203", type_label=function_definition];
1379 [label="200_ require(tx.origin == owner_txorigin14);\n1379-expression_statement-201-201", type_label=expression_statement];
1388 [label="201_ _recipient.transfer(address(this).balance);\n1388-expression_statement-202-202", type_label=expression_statement];
1399 [label="203_ isCreator\n1399-function_definition-204-206", type_label=function_definition];
1413 [label="204_ ok = (caller == getCreator());\n1413-expression_statement-205-205", type_label=expression_statement];
1421 [label="206_ withdrawAll_txorigin30\n1421-function_definition-207-210", type_label=function_definition];
1433 [label="207_ require(tx.origin == owner_txorigin30);\n1433-expression_statement-208-208", type_label=expression_statement];
1442 [label="208_ _recipient.transfer(address(this).balance);\n1442-expression_statement-209-209", type_label=expression_statement];
1453 [label="210_ getFactory\n1453-function_definition-211-213", type_label=function_definition];
1463 [label="211_ factory = _factory;\n1463-expression_statement-212-212", type_label=expression_statement];
1467 [label="213_ bug_txorigin8\n1467-function_definition-214-216", type_label=function_definition];
1475 [label="214_ require(tx.origin == owner_txorigin8);\n1475-expression_statement-215-215", type_label=expression_statement];
1499 [label="218_ sendto_txorigin13\n1499-function_definition-219-222", type_label=function_definition];
1515 [label="219_ require (tx.origin == owner_txorigin13);\n1515-expression_statement-220-220", type_label=expression_statement];
1524 [label="220_ receiver.transfer(amount);\n1524-expression_statement-221-221", type_label=expression_statement];
1545 [label="223_ initialize\n1545-function_definition-224-240", type_label=function_definition];
1560 [label="227_ initializeTemplate()\n1560-expression_statement-228-228", type_label=expression_statement];
1563 [label="228_ if_multihash.length != 0\n1563-if-229-231", type_label=if];
3371 [label="228_ end_if", type_label=end_if];
1570 [label="229_ ProofHash._setProofHash(multihash);\n1570-expression_statement-230-230", type_label=expression_statement];
1577 [label="231_ if_operator != address(0)\n1577-if-232-235", type_label=if];
3385 [label="231_ end_if", type_label=end_if];
1584 [label="232_ Operated._setOperator(operator);\n1584-expression_statement-233-233", type_label=expression_statement];
1591 [label="233_ Operated._activateOperator();\n1591-expression_statement-234-234", type_label=expression_statement];
1596 [label="235_ if_metadata.length != 0\n1596-if-236-238", type_label=if];
3404 [label="235_ end_if", type_label=end_if];
1603 [label="236_ EventMetadata._setMetadata(metadata);\n1603-expression_statement-237-237", type_label=expression_statement];
1618 [label="240_ transferTo_txorigin39\n1618-function_definition-241-244", type_label=function_definition];
1634 [label="241_ require(tx.origin == owner_txorigin39);\n1634-expression_statement-242-242", type_label=expression_statement];
1643 [label="242_ to.call.value(amount);\n1643-expression_statement-243-243", type_label=expression_statement];
1652 [label="244_ setMetadata\n1652-function_definition-245-248", type_label=function_definition];
1660 [label="245_ require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n1660-expression_statement-246-246", type_label=expression_statement];
1684 [label="246_ EventMetadata._setMetadata(metadata);\n1684-expression_statement-247-247", type_label=expression_statement];
1691 [label="248_ bug_txorigin36\n1691-function_definition-249-251", type_label=function_definition];
1699 [label="249_ require(tx.origin == owner_txorigin36);\n1699-expression_statement-250-250", type_label=expression_statement];
1708 [label="251_ transferOperator\n1708-function_definition-252-255", type_label=function_definition];
1716 [label="252_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n1716-expression_statement-253-253", type_label=expression_statement];
1731 [label="253_ Operated._transferOperator(operator);\n1731-expression_statement-254-254", type_label=expression_statement];
1738 [label="255_ transferTo_txorigin35\n1738-function_definition-256-259", type_label=function_definition];
1754 [label="256_ require(tx.origin == owner_txorigin35);\n1754-expression_statement-257-257", type_label=expression_statement];
1763 [label="257_ to.call.value(amount);\n1763-expression_statement-258-258", type_label=expression_statement];
1772 [label="259_ renounceOperator\n1772-function_definition-260-263", type_label=function_definition];
1776 [label="260_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n1776-expression_statement-261-261", type_label=expression_statement];
1791 [label="261_ Operated._renounceOperator();\n1791-expression_statement-262-262", type_label=expression_statement];
1796 [label="263_ bug_txorigin40\n1796-function_definition-264-266", type_label=function_definition];
1804 [label="264_ require(tx.origin == owner_txorigin40);\n1804-expression_statement-265-265", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
"(2545, (113, 8), (115, 9))";
"(3371, (228, 8), (230, 9))";
"(3385, (231, 8), (234, 9))";
"(3404, (235, 8), (237, 9))";
1610;
13 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
63 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 84  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
98 -> 110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
110 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
135 -> 143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
157 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
201 -> 209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
209 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
246 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
270 -> 282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
319 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
323 -> 332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
332 -> 338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
352 -> 368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
368 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
390 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
412 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
448 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
485 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
569 -> 581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
581 -> 590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
613 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 644  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
644 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
653 -> 661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
687 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
722 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
732 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 749  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
737 -> "(2545, (113, 8), (115, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
746 -> 737  [color=red, controlflow_type=loop_control, edge_type=CFG_edge, key=0, label=loop_control];
749 -> 746  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
761 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
763 -> 775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
775 -> 784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
795 -> 809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
831 -> 841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
859 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
873 -> 881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1072 -> 1088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1088 -> 1097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 1128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1128 -> 1137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1156 -> 1164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1181 -> 1197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1197 -> 1206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1215 -> 1225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1234 -> 1250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1250 -> 1259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1271 -> 1287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1287 -> 1296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1303 -> 1308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1311 -> 1317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 1341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1343 -> 1353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1367 -> 1379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1379 -> 1388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1399 -> 1413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1421 -> 1433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1433 -> 1442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1453 -> 1463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1467 -> 1475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1499 -> 1515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1515 -> 1524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1545 -> 1563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1563 -> 1570  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1563 -> "(3371, (228, 8), (230, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1570 -> "(3371, (228, 8), (230, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1577 -> 1584  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1577 -> "(3385, (231, 8), (234, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1584 -> 1591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1591 -> "(3385, (231, 8), (234, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1596 -> 1603  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1596 -> "(3404, (235, 8), (237, 9))"  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1603 -> "(3404, (235, 8), (237, 9))"  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1618 -> 1634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1634 -> 1643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1652 -> 1660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1660 -> 1684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1691 -> 1699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1708 -> 1716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1716 -> 1731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1738 -> 1754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1754 -> 1763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1772 -> 1776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1776 -> 1791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1796 -> 1804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(2545, (113, 8), (115, 9))" -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(3371, (228, 8), (230, 9))" -> 1577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(3371, (228, 8), (230, 9))" -> 1577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
"(3385, (231, 8), (234, 9))" -> 1596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(3385, (231, 8), (234, 9))" -> 1596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
"(3404, (235, 8), (237, 9))" -> 1610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(3404, (235, 8), (237, 9))" -> 1610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
}
