digraph  {
13 [label="2_ safeAdd\n13-function_definition-3-7", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", type_label=new_variable];
31 [label="3_ uint256 c\n31-new_variable-4-4", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", type_label=return];
50 [label="7_ safeSub\n50-function_definition-8-12", type_label=function_definition];
67 [label="8_ require(b <= a, \"SafeMath: subtraction overflow\");\n67-expression_statement-9-9", type_label=expression_statement];
77 [label="9_ uint256 c = a - b;\n77-new_variable-10-10", type_label=new_variable];
78 [label="9_ uint256 c\n78-new_variable-10-10", type_label=new_variable];
85 [label="10_ return c;\n85-return-11-11", type_label=return];
87 [label="12_ safeMul\n87-function_definition-13-20", type_label=function_definition];
104 [label="13_ if_a == 0\n104-if-14-16", type_label=if];
109 [label="14_ return 0;\n109-return-15-15", type_label=return];
111 [label="16_ uint256 c = a * b;\n111-new_variable-17-17", type_label=new_variable];
112 [label="16_ uint256 c\n112-new_variable-17-17", type_label=new_variable];
119 [label="17_ require(c / a == b, \"SafeMath: multiplication overflow\");\n119-expression_statement-18-18", type_label=expression_statement];
131 [label="18_ return c;\n131-return-19-19", type_label=return];
133 [label="20_ safeDiv\n133-function_definition-21-25", type_label=function_definition];
150 [label="21_ require(b > 0, \"SafeMath: division by zero\");\n150-expression_statement-22-22", type_label=expression_statement];
160 [label="22_ uint256 c = a / b;\n160-new_variable-23-23", type_label=new_variable];
161 [label="22_ uint256 c\n161-new_variable-23-23", type_label=new_variable];
168 [label="23_ return c;\n168-return-24-24", type_label=return];
170 [label="25_ safeMod\n170-function_definition-26-29", type_label=function_definition];
187 [label="26_ require(b != 0, \"SafeMath: modulo by zero\");\n187-expression_statement-27-27", type_label=expression_statement];
197 [label="27_ return a % b;\n197-return-28-28", type_label=return];
209 [label="32_ string public name;\n209-new_variable-33-33", type_label=new_variable];
214 [label="33_ string public symbol;\n214-new_variable-34-34", type_label=new_variable];
219 [label="34_ uint8 public decimals;\n219-new_variable-35-35", type_label=new_variable];
224 [label="35_ uint256 public totalSupply;\n224-new_variable-36-36", type_label=new_variable];
229 [label="36_ address public owner;\n229-new_variable-37-37", type_label=new_variable];
234 [label="37_ mapping (address => uint256) public balanceOf;\n234-new_variable-38-38", type_label=new_variable];
241 [label="38_ mapping (address => mapping (address => uint256)) public allowance;\n241-new_variable-39-39", type_label=new_variable];
292 [label="47_ balanceOf[msg.sender] = initialSupply;\n292-expression_statement-48-48", type_label=expression_statement];
300 [label="48_ totalSupply = initialSupply;\n300-expression_statement-49-49", type_label=expression_statement];
304 [label="49_ name = tokenName;\n304-expression_statement-50-50", type_label=expression_statement];
308 [label="50_ symbol = tokenSymbol;\n308-expression_statement-51-51", type_label=expression_statement];
312 [label="51_ decimals = decimalUnits;\n312-expression_statement-52-52", type_label=expression_statement];
316 [label="52_ owner = msg.sender;\n316-expression_statement-53-53", type_label=expression_statement];
322 [label="54_ transfer\n322-function_definition-55-63", type_label=function_definition];
334 [label="55_ require(_to != address(0), \"Cannot use zero address\");\n334-expression_statement-56-56", type_label=expression_statement];
346 [label="56_ require(_value > 0, \"Cannot use zero value\");\n346-expression_statement-57-57", type_label=expression_statement];
356 [label="57_ require (balanceOf[msg.sender] >= _value, \"Balance not enough\");\n356-expression_statement-58-58", type_label=expression_statement];
370 [label="58_ require (balanceOf[_to] + _value >= balanceOf[_to], \"Overflow\" );\n370-expression_statement-59-59", type_label=expression_statement];
386 [label="59_ balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);\n386-expression_statement-60-60", type_label=expression_statement];
405 [label="60_ balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);\n405-expression_statement-61-61", type_label=expression_statement];
430 [label="63_ approve\n430-function_definition-64-69", type_label=function_definition];
447 [label="65_ require (_value > 0, \"Cannot use zero\");\n447-expression_statement-66-66", type_label=expression_statement];
457 [label="66_ allowance[msg.sender][_spender] = _value;\n457-expression_statement-67-67", type_label=expression_statement];
467 [label="67_ return true;\n467-return-68-68", type_label=return];
470 [label="69_ transferFrom\n470-function_definition-70-81", type_label=function_definition];
491 [label="70_ require(_to != address(0), \"Cannot use zero address\");\n491-expression_statement-71-71", type_label=expression_statement];
503 [label="71_ require(_value > 0, \"Cannot use zero value\");\n503-expression_statement-72-72", type_label=expression_statement];
513 [label="72_ require( balanceOf[_from] >= _value, \"Balance not enough\" );\n513-expression_statement-73-73", type_label=expression_statement];
525 [label="73_ require( balanceOf[_to] + _value > balanceOf[_to], \"Cannot overflows\" );\n525-expression_statement-74-74", type_label=expression_statement];
541 [label="74_ require( _value <= allowance[_from][msg.sender], \"Cannot over allowance\" );\n541-expression_statement-75-75", type_label=expression_statement];
557 [label="75_ balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);\n557-expression_statement-76-76", type_label=expression_statement];
572 [label="76_ balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);\n572-expression_statement-77-77", type_label=expression_statement];
587 [label="77_ allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n587-expression_statement-78-78", type_label=expression_statement];
618 [label="79_ return true;\n618-return-80-80", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
87 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 109  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
104 -> 111  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
109 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
209 -> 214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
219 -> 224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
224 -> 229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
229 -> 234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
234 -> 241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
292 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
308 -> 312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
312 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
334 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
346 -> 356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
356 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
370 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
470 -> 491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
491 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
503 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
557 -> 572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
572 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
618 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
