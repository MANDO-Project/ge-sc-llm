digraph  {
13 [code="function totalSupply() external view returns (uint256);", label="2_ function totalSupply() external view returns (uint256);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [code="function balanceOf(address who) external view returns (uint256);", label="3_ function balanceOf(address who) external view returns (uint256);\n21-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
33 [code="function allowance(address owner, address spender) external view returns (uint256);", label="4_ function allowance(address owner, address spender) external view returns (uint256);\n33-function_definition-5-5", method="allowance(address owner,address spender)", type_label=function_definition];
49 [code="function transfer(address to, uint256 value) external returns (bool);", label="5_ function transfer(address to, uint256 value) external returns (bool);\n49-function_definition-6-6", method="transfer(address to,uint256 value)", type_label=function_definition];
64 [code="function approve(address spender, uint256 value) external returns (bool);", label="6_ function approve(address spender, uint256 value) external returns (bool);\n64-function_definition-7-7", method="approve(address spender,uint256 value)", type_label=function_definition];
79 [code="function transferFrom(address from, address to, uint256 value) external returns (bool);", label="7_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n79-function_definition-8-8", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
129 [code="function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }", label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n129-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
146 [code="if (a == 0) {\n      return 0;\n    }", label="13_ if_a == 0\n146-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
3008 [code="if (a == 0) {\n      return 0;\n    }", label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
151 [code="return 0;", label="14_ return 0;\n151-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
153 [code="uint256 c = a * b;", label="16_ uint256 c = a * b;\n153-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
161 [code="assert(c / a == b);", label="17_ assert(c / a == b);\n161-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
170 [code="return c;", label="18_ return c;\n170-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
172 [code="function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }", label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n172-function_definition-21-24", method="div(uint256 a,uint256 b)", type_label=function_definition];
189 [code="uint256 c = a / b;", label="21_ uint256 c = a / b;\n189-new_variable-22-22", method="div(uint256 a,uint256 b)", type_label=new_variable];
197 [code="return c;", label="22_ return c;\n197-return-23-23", method="div(uint256 a,uint256 b)", type_label=return];
199 [code="function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }", label="24_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n199-function_definition-25-28", method="sub(uint256 a,uint256 b)", type_label=function_definition];
216 [code="assert(b <= a);", label="25_ assert(b <= a);\n216-expression_statement-26-26", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
223 [code="return a - b;", label="26_ return a - b;\n223-return-27-27", method="sub(uint256 a,uint256 b)", type_label=return];
227 [code="function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }", label="28_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n227-function_definition-29-33", method="add(uint256 a,uint256 b)", type_label=function_definition];
244 [code="uint256 c = a + b;", label="29_ uint256 c = a + b;\n244-new_variable-30-30", method="add(uint256 a,uint256 b)", type_label=new_variable];
252 [code="assert(c >= a);", label="30_ assert(c >= a);\n252-expression_statement-31-31", method="add(uint256 a,uint256 b)", type_label=expression_statement];
259 [code="return c;", label="31_ return c;\n259-return-32-32", method="add(uint256 a,uint256 b)", type_label=return];
261 [code="function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }", label="33_ function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n261-function_definition-34-38", method="ceil(uint256 a,uint256 m)", type_label=function_definition];
278 [code="uint256 c = add(a,m);", label="34_ uint256 c = add(a,m);\n278-new_variable-35-35", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
289 [code="uint256 d = sub(c,1);", label="35_ uint256 d = sub(c,1);\n289-new_variable-36-36", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
300 [code="return mul(div(d,m),m);", label="36_ return mul(div(d,m),m);\n300-return-37-37", method="ceil(uint256 a,uint256 m)", type_label=return];
315 [code="address public owner;", label="40_ address public owner;\n315-new_variable-41-41", method="", type_label=new_variable];
320 [code="function bug_txorigin40(address owner_txorigin40) public{\n        require(tx.origin == owner_txorigin40);\n    }", label="41_ function bug_txorigin40(address owner_txorigin40) public{\n        require(tx.origin == owner_txorigin40);\n    }\n320-function_definition-42-44", method="bug_txorigin40(address owner_txorigin40)", type_label=function_definition];
328 [code="require(tx.origin == owner_txorigin40);", label="42_ require(tx.origin == owner_txorigin40);\n328-expression_statement-43-43", method="bug_txorigin40(address owner_txorigin40)", type_label=expression_statement];
349 [code="owner = msg.sender;", label="46_ owner = msg.sender;\n349-expression_statement-47-47", method="", type_label=expression_statement];
355 [code="function withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34) public {\n        require(tx.origin == owner_txorigin34);\n        _recipient.transfer(address(this).balance);\n    }", label="48_ function withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34) public {\n        require(tx.origin == owner_txorigin34);\n        _recipient.transfer(address(this).balance);\n    }\n355-function_definition-49-52", method="withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34)", type_label=function_definition];
367 [code="require(tx.origin == owner_txorigin34);", label="49_ require(tx.origin == owner_txorigin34);\n367-expression_statement-50-50", method="withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34)", type_label=expression_statement];
376 [code="_recipient.transfer(address(this).balance);", label="50_ _recipient.transfer(address(this).balance);\n376-expression_statement-51-51", method="withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34)", type_label=expression_statement];
387 [code="modifier onlyOwner() {\n      require(msg.sender == owner);\n      _;\n    }", label="52_ modifier onlyOwner() {\n      require(msg.sender == owner);\n      _;\n    }\n387-expression_statement-53-56", method="", type_label=expression_statement];
390 [code="require(msg.sender == owner);", label="53_ require(msg.sender == owner);\n390-expression_statement-54-54", method="", type_label=expression_statement];
399 [code="_;", label="54_ _;\n399-expression_statement-55-55", method="", type_label=expression_statement];
401 [code="function transferOwnership(address newOwner) public onlyOwner {\n      require(newOwner != address(0));\n      emit OwnershipTransferred(owner, newOwner);\n      owner = newOwner;\n    }", label="56_ function transferOwnership(address newOwner) public onlyOwner {\n      require(newOwner != address(0));\n      emit OwnershipTransferred(owner, newOwner);\n      owner = newOwner;\n    }\n401-function_definition-57-61", method="transferOwnership(address newOwner)", type_label=function_definition];
408 [code=onlyOwner, label="56_ onlyOwner\n408-expression_statement-57-57", method="transferOwnership(address newOwner)", type_label=expression_statement];
411 [code="require(newOwner != address(0));", label="57_ require(newOwner != address(0));\n411-expression_statement-58-58", method="transferOwnership(address newOwner)", type_label=expression_statement];
426 [code="owner = newOwner;", label="59_ owner = newOwner;\n426-expression_statement-60-60", method="transferOwnership(address newOwner)", type_label=expression_statement];
430 [code="function sendto_txorigin21(address payable receiver, uint amount,address owner_txorigin21) public {\n	require (tx.origin == owner_txorigin21);\n	receiver.transfer(amount);\n}", label="61_ function sendto_txorigin21(address payable receiver, uint amount,address owner_txorigin21) public {\n	require (tx.origin == owner_txorigin21);\n	receiver.transfer(amount);\n}\n430-function_definition-62-65", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=function_definition];
446 [code="require (tx.origin == owner_txorigin21);", label="62_ require (tx.origin == owner_txorigin21);\n446-expression_statement-63-63", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=expression_statement];
455 [code="receiver.transfer(amount);", label="63_ receiver.transfer(amount);\n455-expression_statement-64-64", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=expression_statement];
468 [code="string private _name;", label="67_ string private _name;\n468-new_variable-68-68", method="", type_label=new_variable];
473 [code="string private _symbol;", label="68_ string private _symbol;\n473-new_variable-69-69", method="", type_label=new_variable];
478 [code="uint8 private _decimals;", label="69_ uint8 private _decimals;\n478-new_variable-70-70", method="", type_label=new_variable];
497 [code="_name = name;", label="71_ _name = name;\n497-expression_statement-72-72", method="", type_label=expression_statement];
501 [code="_symbol = symbol;", label="72_ _symbol = symbol;\n501-expression_statement-73-73", method="", type_label=expression_statement];
505 [code="_decimals = decimals;", label="73_ _decimals = decimals;\n505-expression_statement-74-74", method="", type_label=expression_statement];
509 [code="function withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10) public {\n        require(tx.origin == owner_txorigin10);\n        _recipient.transfer(address(this).balance);\n    }", label="75_ function withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10) public {\n        require(tx.origin == owner_txorigin10);\n        _recipient.transfer(address(this).balance);\n    }\n509-function_definition-76-79", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=function_definition];
521 [code="require(tx.origin == owner_txorigin10);", label="76_ require(tx.origin == owner_txorigin10);\n521-expression_statement-77-77", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=expression_statement];
530 [code="_recipient.transfer(address(this).balance);", label="77_ _recipient.transfer(address(this).balance);\n530-expression_statement-78-78", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=expression_statement];
541 [code="function name() public view returns(string memory) {\n    return _name;\n  }", label="79_ function name() public view returns(string memory) {\n    return _name;\n  }\n541-function_definition-80-82", method="name()", type_label=function_definition];
550 [code="return _name;", label="80_ return _name;\n550-return-81-81", method="name()", type_label=return];
552 [code="function withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22) public {\n        require(tx.origin == owner_txorigin22);\n        _recipient.transfer(address(this).balance);\n    }", label="82_ function withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22) public {\n        require(tx.origin == owner_txorigin22);\n        _recipient.transfer(address(this).balance);\n    }\n552-function_definition-83-86", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=function_definition];
564 [code="require(tx.origin == owner_txorigin22);", label="83_ require(tx.origin == owner_txorigin22);\n564-expression_statement-84-84", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=expression_statement];
573 [code="_recipient.transfer(address(this).balance);", label="84_ _recipient.transfer(address(this).balance);\n573-expression_statement-85-85", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=expression_statement];
584 [code="function symbol() public view returns(string memory) {\n    return _symbol;\n  }", label="86_ function symbol() public view returns(string memory) {\n    return _symbol;\n  }\n584-function_definition-87-89", method="symbol()", type_label=function_definition];
593 [code="return _symbol;", label="87_ return _symbol;\n593-return-88-88", method="symbol()", type_label=return];
595 [code="function bug_txorigin12(address owner_txorigin12) public{\n        require(tx.origin == owner_txorigin12);\n    }", label="89_ function bug_txorigin12(address owner_txorigin12) public{\n        require(tx.origin == owner_txorigin12);\n    }\n595-function_definition-90-92", method="bug_txorigin12(address owner_txorigin12)", type_label=function_definition];
603 [code="require(tx.origin == owner_txorigin12);", label="90_ require(tx.origin == owner_txorigin12);\n603-expression_statement-91-91", method="bug_txorigin12(address owner_txorigin12)", type_label=expression_statement];
612 [code="function decimals() public view returns(uint8) {\n    return _decimals;\n  }", label="92_ function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n612-function_definition-93-95", method="decimals()", type_label=function_definition];
621 [code="return _decimals;", label="93_ return _decimals;\n621-return-94-94", method="decimals()", type_label=return];
623 [code="function transferTo_txorigin11(address to, uint amount,address owner_txorigin11) public {\n  require(tx.origin == owner_txorigin11);\n  to.call.value(amount);\n}", label="95_ function transferTo_txorigin11(address to, uint amount,address owner_txorigin11) public {\n  require(tx.origin == owner_txorigin11);\n  to.call.value(amount);\n}\n623-function_definition-96-99", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=function_definition];
639 [code="require(tx.origin == owner_txorigin11);", label="96_ require(tx.origin == owner_txorigin11);\n639-expression_statement-97-97", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=expression_statement];
648 [code="to.call.value(amount);", label="97_ to.call.value(amount);\n648-expression_statement-98-98", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=expression_statement];
671 [code="mapping (address => uint256) private _balances;", label="102_ mapping (address => uint256) private _balances;\n671-new_variable-103-103", method="", type_label=new_variable];
678 [code="mapping (address => mapping (address => uint256)) private _allowed;", label="103_ mapping (address => mapping (address => uint256)) private _allowed;\n678-new_variable-104-104", method="", type_label=new_variable];
687 [code="string constant tokenName = \"Dan Pan Coin\";", label="104_ string constant tokenName = \"Dan Pan Coin\";\n687-new_variable-105-105", method="", type_label=new_variable];
693 [code="function withdrawAll_txorigin18(address payable _recipient,address owner_txorigin18) public {\n        require(tx.origin == owner_txorigin18);\n        _recipient.transfer(address(this).balance);\n    }", label="105_ function withdrawAll_txorigin18(address payable _recipient,address owner_txorigin18) public {\n        require(tx.origin == owner_txorigin18);\n        _recipient.transfer(address(this).balance);\n    }\n693-function_definition-106-109", method="withdrawAll_txorigin18(address payable _recipient,address owner_txorigin18)", type_label=function_definition];
705 [code="require(tx.origin == owner_txorigin18);", label="106_ require(tx.origin == owner_txorigin18);\n705-expression_statement-107-107", method="withdrawAll_txorigin18(address payable _recipient,address owner_txorigin18)", type_label=expression_statement];
714 [code="_recipient.transfer(address(this).balance);", label="107_ _recipient.transfer(address(this).balance);\n714-expression_statement-108-108", method="withdrawAll_txorigin18(address payable _recipient,address owner_txorigin18)", type_label=expression_statement];
725 [code="string constant tokenSymbol = \"DPC\";", label="109_ string constant tokenSymbol = \"DPC\";\n725-new_variable-110-110", method="", type_label=new_variable];
731 [code="function sendto_txorigin29(address payable receiver, uint amount,address owner_txorigin29) public {\n	require (tx.origin == owner_txorigin29);\n	receiver.transfer(amount);\n}", label="110_ function sendto_txorigin29(address payable receiver, uint amount,address owner_txorigin29) public {\n	require (tx.origin == owner_txorigin29);\n	receiver.transfer(amount);\n}\n731-function_definition-111-114", method="sendto_txorigin29(address payable receiver,uint amount,address owner_txorigin29)", type_label=function_definition];
747 [code="require (tx.origin == owner_txorigin29);", label="111_ require (tx.origin == owner_txorigin29);\n747-expression_statement-112-112", method="sendto_txorigin29(address payable receiver,uint amount,address owner_txorigin29)", type_label=expression_statement];
756 [code="receiver.transfer(amount);", label="112_ receiver.transfer(amount);\n756-expression_statement-113-113", method="sendto_txorigin29(address payable receiver,uint amount,address owner_txorigin29)", type_label=expression_statement];
763 [code="uint8  constant tokenDecimals = 2;", label="114_ uint8  constant tokenDecimals = 2;\n763-new_variable-115-115", method="", type_label=new_variable];
768 [code="function withdrawAll_txorigin6(address payable _recipient,address owner_txorigin6) public {\n        require(tx.origin == owner_txorigin6);\n        _recipient.transfer(address(this).balance);\n    }", label="115_ function withdrawAll_txorigin6(address payable _recipient,address owner_txorigin6) public {\n        require(tx.origin == owner_txorigin6);\n        _recipient.transfer(address(this).balance);\n    }\n768-function_definition-116-119", method="withdrawAll_txorigin6(address payable _recipient,address owner_txorigin6)", type_label=function_definition];
780 [code="require(tx.origin == owner_txorigin6);", label="116_ require(tx.origin == owner_txorigin6);\n780-expression_statement-117-117", method="withdrawAll_txorigin6(address payable _recipient,address owner_txorigin6)", type_label=expression_statement];
789 [code="_recipient.transfer(address(this).balance);", label="117_ _recipient.transfer(address(this).balance);\n789-expression_statement-118-118", method="withdrawAll_txorigin6(address payable _recipient,address owner_txorigin6)", type_label=expression_statement];
800 [code="uint256 _totalSupply = 10000000000;", label="119_ uint256 _totalSupply = 10000000000;\n800-new_variable-120-120", method="", type_label=new_variable];
805 [code="function bug_txorigin16(address owner_txorigin16) public{\n        require(tx.origin == owner_txorigin16);\n    }", label="120_ function bug_txorigin16(address owner_txorigin16) public{\n        require(tx.origin == owner_txorigin16);\n    }\n805-function_definition-121-123", method="bug_txorigin16(address owner_txorigin16)", type_label=function_definition];
813 [code="require(tx.origin == owner_txorigin16);", label="121_ require(tx.origin == owner_txorigin16);\n813-expression_statement-122-122", method="bug_txorigin16(address owner_txorigin16)", type_label=expression_statement];
822 [code="uint256 public basePercent = 100;", label="123_ uint256 public basePercent = 100;\n822-new_variable-124-124", method="", type_label=new_variable];
828 [code="function bug_txorigin24(  address owner_txorigin24) public{\n        require(tx.origin == owner_txorigin24);\n    }", label="124_ function bug_txorigin24(  address owner_txorigin24) public{\n        require(tx.origin == owner_txorigin24);\n    }\n828-function_definition-125-127", method="bug_txorigin24(address owner_txorigin24)", type_label=function_definition];
836 [code="require(tx.origin == owner_txorigin24);", label="125_ require(tx.origin == owner_txorigin24);\n836-expression_statement-126-126", method="bug_txorigin24(address owner_txorigin24)", type_label=expression_statement];
845 [code="uint256 public dpPercent = 5;", label="127_ uint256 public dpPercent = 5;\n845-new_variable-128-128", method="", type_label=new_variable];
851 [code="function sendto_txorigin5(address payable receiver, uint amount,address owner_txorigin5) public {\n	require (tx.origin == owner_txorigin5);\n	receiver.transfer(amount);\n}", label="128_ function sendto_txorigin5(address payable receiver, uint amount,address owner_txorigin5) public {\n	require (tx.origin == owner_txorigin5);\n	receiver.transfer(amount);\n}\n851-function_definition-129-132", method="sendto_txorigin5(address payable receiver,uint amount,address owner_txorigin5)", type_label=function_definition];
867 [code="require (tx.origin == owner_txorigin5);", label="129_ require (tx.origin == owner_txorigin5);\n867-expression_statement-130-130", method="sendto_txorigin5(address payable receiver,uint amount,address owner_txorigin5)", type_label=expression_statement];
876 [code="receiver.transfer(amount);", label="130_ receiver.transfer(amount);\n876-expression_statement-131-131", method="sendto_txorigin5(address payable receiver,uint amount,address owner_txorigin5)", type_label=expression_statement];
883 [code="address public DanPanAddress = msg.sender;", label="132_ address public DanPanAddress = msg.sender;\n883-new_variable-133-133", method="", type_label=new_variable];
891 [code="function sendto_txorigin33(address payable receiver, uint amount,address owner_txorigin33) public {\n	require (tx.origin == owner_txorigin33);\n	receiver.transfer(amount);\n}", label="133_ function sendto_txorigin33(address payable receiver, uint amount,address owner_txorigin33) public {\n	require (tx.origin == owner_txorigin33);\n	receiver.transfer(amount);\n}\n891-function_definition-134-137", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=function_definition];
907 [code="require (tx.origin == owner_txorigin33);", label="134_ require (tx.origin == owner_txorigin33);\n907-expression_statement-135-135", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
916 [code="receiver.transfer(amount);", label="135_ receiver.transfer(amount);\n916-expression_statement-136-136", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
933 [code="function transferTo_txorigin27(address to, uint amount,address owner_txorigin27) public {\n  require(tx.origin == owner_txorigin27);\n  to.call.value(amount);\n}", label="138_ function transferTo_txorigin27(address to, uint amount,address owner_txorigin27) public {\n  require(tx.origin == owner_txorigin27);\n  to.call.value(amount);\n}\n933-function_definition-139-142", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=function_definition];
949 [code="require(tx.origin == owner_txorigin27);", label="139_ require(tx.origin == owner_txorigin27);\n949-expression_statement-140-140", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
958 [code="to.call.value(amount);", label="140_ to.call.value(amount);\n958-expression_statement-141-141", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
977 [code="function transferTo_txorigin31(address to, uint amount,address owner_txorigin31) public {\n  require(tx.origin == owner_txorigin31);\n  to.call.value(amount);\n}", label="143_ function transferTo_txorigin31(address to, uint amount,address owner_txorigin31) public {\n  require(tx.origin == owner_txorigin31);\n  to.call.value(amount);\n}\n977-function_definition-144-147", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=function_definition];
993 [code="require(tx.origin == owner_txorigin31);", label="144_ require(tx.origin == owner_txorigin31);\n993-expression_statement-145-145", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
1002 [code="to.call.value(amount);", label="145_ to.call.value(amount);\n1002-expression_statement-146-146", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
1021 [code="function sendto_txorigin13(address payable receiver, uint amount,address owner_txorigin13) public {\n	require (tx.origin == owner_txorigin13);\n	receiver.transfer(amount);\n}", label="148_ function sendto_txorigin13(address payable receiver, uint amount,address owner_txorigin13) public {\n	require (tx.origin == owner_txorigin13);\n	receiver.transfer(amount);\n}\n1021-function_definition-149-152", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=function_definition];
1037 [code="require (tx.origin == owner_txorigin13);", label="149_ require (tx.origin == owner_txorigin13);\n1037-expression_statement-150-150", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
1046 [code="receiver.transfer(amount);", label="150_ receiver.transfer(amount);\n1046-expression_statement-151-151", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
1063 [code="function transferTo_txorigin15(address to, uint amount,address owner_txorigin15) public {\n  require(tx.origin == owner_txorigin15);\n  to.call.value(amount);\n}", label="153_ function transferTo_txorigin15(address to, uint amount,address owner_txorigin15) public {\n  require(tx.origin == owner_txorigin15);\n  to.call.value(amount);\n}\n1063-function_definition-154-157", method="transferTo_txorigin15(address to,uint amount,address owner_txorigin15)", type_label=function_definition];
1079 [code="require(tx.origin == owner_txorigin15);", label="154_ require(tx.origin == owner_txorigin15);\n1079-expression_statement-155-155", method="transferTo_txorigin15(address to,uint amount,address owner_txorigin15)", type_label=expression_statement];
1088 [code="to.call.value(amount);", label="155_ to.call.value(amount);\n1088-expression_statement-156-156", method="transferTo_txorigin15(address to,uint amount,address owner_txorigin15)", type_label=expression_statement];
1097 [code="mapping(address => bool) public whitelistFrom;", label="157_ mapping(address => bool) public whitelistFrom;\n1097-new_variable-158-158", method="", type_label=new_variable];
1104 [code="function bug_txorigin28(  address owner_txorigin28) public{\n        require(tx.origin == owner_txorigin28);\n    }", label="158_ function bug_txorigin28(  address owner_txorigin28) public{\n        require(tx.origin == owner_txorigin28);\n    }\n1104-function_definition-159-161", method="bug_txorigin28(address owner_txorigin28)", type_label=function_definition];
1112 [code="require(tx.origin == owner_txorigin28);", label="159_ require(tx.origin == owner_txorigin28);\n1112-expression_statement-160-160", method="bug_txorigin28(address owner_txorigin28)", type_label=expression_statement];
1121 [code="mapping(address => bool) public whitelistTo;", label="161_ mapping(address => bool) public whitelistTo;\n1121-new_variable-162-162", method="", type_label=new_variable];
1129 [code="ERC20Detailed(tokenName, tokenSymbol, tokenDecimals)", label="162_ ERC20Detailed(tokenName, tokenSymbol, tokenDecimals)\n1129-expression_statement-163-163", method="", type_label=expression_statement];
1138 [code="_mint(msg.sender, _totalSupply);", label="163_ _mint(msg.sender, _totalSupply);\n1138-expression_statement-164-164", method="", type_label=expression_statement];
1147 [code="function sendto_txorigin1(address payable receiver, uint amount,address owner_txorigin1) public {\n	require (tx.origin == owner_txorigin1);\n	receiver.transfer(amount);\n}", label="165_ function sendto_txorigin1(address payable receiver, uint amount,address owner_txorigin1) public {\n	require (tx.origin == owner_txorigin1);\n	receiver.transfer(amount);\n}\n1147-function_definition-166-169", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=function_definition];
1163 [code="require (tx.origin == owner_txorigin1);", label="166_ require (tx.origin == owner_txorigin1);\n1163-expression_statement-167-167", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=expression_statement];
1172 [code="receiver.transfer(amount);", label="167_ receiver.transfer(amount);\n1172-expression_statement-168-168", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=expression_statement];
1179 [code="function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }", label="169_ function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n1179-function_definition-170-172", method="totalSupply()", type_label=function_definition];
1188 [code="return _totalSupply;", label="170_ return _totalSupply;\n1188-return-171-171", method="totalSupply()", type_label=return];
1190 [code="function withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2) public {\n        require(tx.origin == owner_txorigin2);\n        _recipient.transfer(address(this).balance);\n    }", label="172_ function withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2) public {\n        require(tx.origin == owner_txorigin2);\n        _recipient.transfer(address(this).balance);\n    }\n1190-function_definition-173-176", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=function_definition];
1202 [code="require(tx.origin == owner_txorigin2);", label="173_ require(tx.origin == owner_txorigin2);\n1202-expression_statement-174-174", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=expression_statement];
1211 [code="_recipient.transfer(address(this).balance);", label="174_ _recipient.transfer(address(this).balance);\n1211-expression_statement-175-175", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=expression_statement];
1222 [code="function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }", label="176_ function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n1222-function_definition-177-179", method="balanceOf(address owner)", type_label=function_definition];
1235 [code="return _balances[owner];", label="177_ return _balances[owner];\n1235-return-178-178", method="balanceOf(address owner)", type_label=return];
1239 [code="function sendto_txorigin17(address payable receiver, uint amount,address owner_txorigin17) public {\n	require (tx.origin == owner_txorigin17);\n	receiver.transfer(amount);\n}", label="179_ function sendto_txorigin17(address payable receiver, uint amount,address owner_txorigin17) public {\n	require (tx.origin == owner_txorigin17);\n	receiver.transfer(amount);\n}\n1239-function_definition-180-183", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=function_definition];
1255 [code="require (tx.origin == owner_txorigin17);", label="180_ require (tx.origin == owner_txorigin17);\n1255-expression_statement-181-181", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=expression_statement];
1264 [code="receiver.transfer(amount);", label="181_ receiver.transfer(amount);\n1264-expression_statement-182-182", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=expression_statement];
1271 [code="function allowance(address owner, address spender) public view returns (uint256) {\n    return _allowed[owner][spender];\n  }", label="183_ function allowance(address owner, address spender) public view returns (uint256) {\n    return _allowed[owner][spender];\n  }\n1271-function_definition-184-186", method="allowance(address owner,address spender)", type_label=function_definition];
1288 [code="return _allowed[owner][spender];", label="184_ return _allowed[owner][spender];\n1288-return-185-185", method="allowance(address owner,address spender)", type_label=return];
1294 [code="function sendto_txorigin37(address payable receiver, uint amount,address owner_txorigin37) public {\n	require (tx.origin == owner_txorigin37);\n	receiver.transfer(amount);\n}", label="186_ function sendto_txorigin37(address payable receiver, uint amount,address owner_txorigin37) public {\n	require (tx.origin == owner_txorigin37);\n	receiver.transfer(amount);\n}\n1294-function_definition-187-190", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=function_definition];
1310 [code="require (tx.origin == owner_txorigin37);", label="187_ require (tx.origin == owner_txorigin37);\n1310-expression_statement-188-188", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=expression_statement];
1319 [code="receiver.transfer(amount);", label="188_ receiver.transfer(amount);\n1319-expression_statement-189-189", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=expression_statement];
1326 [code="function findOnePercent(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 onePercent = roundValue.mul(basePercent).div(10000);\n    return onePercent;\n  }", label="190_ function findOnePercent(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 onePercent = roundValue.mul(basePercent).div(10000);\n    return onePercent;\n  }\n1326-function_definition-191-195", method="findOnePercent(uint256 value)", type_label=function_definition];
1339 [code="uint256 roundValue = value.ceil(basePercent);", label="191_ uint256 roundValue = value.ceil(basePercent);\n1339-new_variable-192-192", method="findOnePercent(uint256 value)", type_label=new_variable];
1350 [code="uint256 onePercent = roundValue.mul(basePercent).div(10000);", label="192_ uint256 onePercent = roundValue.mul(basePercent).div(10000);\n1350-new_variable-193-193", method="findOnePercent(uint256 value)", type_label=new_variable];
1366 [code="return onePercent;", label="193_ return onePercent;\n1366-return-194-194", method="findOnePercent(uint256 value)", type_label=return];
1368 [code="function transferTo_txorigin3(address to, uint amount,address owner_txorigin3) public {\n  require(tx.origin == owner_txorigin3);\n  to.call.value(amount);\n}", label="195_ function transferTo_txorigin3(address to, uint amount,address owner_txorigin3) public {\n  require(tx.origin == owner_txorigin3);\n  to.call.value(amount);\n}\n1368-function_definition-196-199", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=function_definition];
1384 [code="require(tx.origin == owner_txorigin3);", label="196_ require(tx.origin == owner_txorigin3);\n1384-expression_statement-197-197", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=expression_statement];
1393 [code="to.call.value(amount);", label="197_ to.call.value(amount);\n1393-expression_statement-198-198", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=expression_statement];
1402 [code="function findDPPercent(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 DPPercent = roundValue.mul(basePercent).div(10000).mul(dpPercent);\n    return DPPercent;\n  }", label="199_ function findDPPercent(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 DPPercent = roundValue.mul(basePercent).div(10000).mul(dpPercent);\n    return DPPercent;\n  }\n1402-function_definition-200-204", method="findDPPercent(uint256 value)", type_label=function_definition];
1415 [code="uint256 roundValue = value.ceil(basePercent);", label="200_ uint256 roundValue = value.ceil(basePercent);\n1415-new_variable-201-201", method="findDPPercent(uint256 value)", type_label=new_variable];
1426 [code="uint256 DPPercent = roundValue.mul(basePercent).div(10000).mul(dpPercent);", label="201_ uint256 DPPercent = roundValue.mul(basePercent).div(10000).mul(dpPercent);\n1426-new_variable-202-202", method="findDPPercent(uint256 value)", type_label=new_variable];
1447 [code="return DPPercent;", label="202_ return DPPercent;\n1447-return-203-203", method="findDPPercent(uint256 value)", type_label=return];
1449 [code="function sendto_txorigin9(address payable receiver, uint amount,address owner_txorigin9) public {\n	require (tx.origin == owner_txorigin9);\n	receiver.transfer(amount);\n}", label="204_ function sendto_txorigin9(address payable receiver, uint amount,address owner_txorigin9) public {\n	require (tx.origin == owner_txorigin9);\n	receiver.transfer(amount);\n}\n1449-function_definition-205-208", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=function_definition];
1465 [code="require (tx.origin == owner_txorigin9);", label="205_ require (tx.origin == owner_txorigin9);\n1465-expression_statement-206-206", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
1474 [code="receiver.transfer(amount);", label="206_ receiver.transfer(amount);\n1474-expression_statement-207-207", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
1481 [code="function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n        if (value == 0) {\n            emit Transfer(msg.sender, to, 0);\n            return true;\n        }\n        uint256 tokensToTransfer = value;\n        uint256 tokensToBurn = 0;\n        uint256 tokensToDanPan = 0;\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        if (!_isWhitelisted(msg.sender, to)) {\n              tokensToBurn = findOnePercent(value);\n              tokensToDanPan = findDPPercent(value);\n             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n            _totalSupply = _totalSupply.sub(tokensToBurn);\n            emit Transfer(msg.sender, address(0), tokensToBurn);\n            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n            emit Transfer(msg.sender, DanPanAddress, tokensToDanPan);\n        }\n        assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n        _balances[to] = _balances[to].add(tokensToTransfer);\n        emit Transfer(msg.sender, to, tokensToTransfer);\n    return true;\n  }", label="208_ function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n        if (value == 0) {\n            emit Transfer(msg.sender, to, 0);\n            return true;\n        }\n        uint256 tokensToTransfer = value;\n        uint256 tokensToBurn = 0;\n        uint256 tokensToDanPan = 0;\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        if (!_isWhitelisted(msg.sender, to)) {\n              tokensToBurn = findOnePercent(value);\n              tokensToDanPan = findDPPercent(value);\n             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n            _totalSupply = _totalSupply.sub(tokensToBurn);\n            emit Transfer(msg.sender, address(0), tokensToBurn);\n            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n            emit Transfer(msg.sender, DanPanAddress, tokensToDanPan);\n        }\n        assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n        _balances[to] = _balances[to].add(tokensToTransfer);\n        emit Transfer(msg.sender, to, tokensToTransfer);\n    return true;\n  }\n1481-function_definition-209-233", method="transfer(address to,uint256 value)", type_label=function_definition];
1497 [code="require(value <= _balances[msg.sender]);", label="209_ require(value <= _balances[msg.sender]);\n1497-expression_statement-210-210", method="transfer(address to,uint256 value)", type_label=expression_statement];
1508 [code="require(to != address(0));", label="210_ require(to != address(0));\n1508-expression_statement-211-211", method="transfer(address to,uint256 value)", type_label=expression_statement];
1517 [code="if (value == 0) {\n            emit Transfer(msg.sender, to, 0);\n            return true;\n        }", label="211_ if_value == 0\n1517-if-212-215", method="transfer(address to,uint256 value)", type_label=if];
4379 [code="if (value == 0) {\n            emit Transfer(msg.sender, to, 0);\n            return true;\n        }", label="211_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
1532 [code="return true;", label="213_ return true;\n1532-return-214-214", method="transfer(address to,uint256 value)", type_label=return];
1535 [code="uint256 tokensToTransfer = value;", label="215_ uint256 tokensToTransfer = value;\n1535-new_variable-216-216", method="transfer(address to,uint256 value)", type_label=new_variable];
1541 [code="uint256 tokensToBurn = 0;", label="216_ uint256 tokensToBurn = 0;\n1541-new_variable-217-217", method="transfer(address to,uint256 value)", type_label=new_variable];
1547 [code="uint256 tokensToDanPan = 0;", label="217_ uint256 tokensToDanPan = 0;\n1547-new_variable-218-218", method="transfer(address to,uint256 value)", type_label=new_variable];
1553 [code="_balances[msg.sender] = _balances[msg.sender].sub(value);", label="218_ _balances[msg.sender] = _balances[msg.sender].sub(value);\n1553-expression_statement-219-219", method="transfer(address to,uint256 value)", type_label=expression_statement];
1570 [code="if (!_isWhitelisted(msg.sender, to)) {\n              tokensToBurn = findOnePercent(value);\n              tokensToDanPan = findDPPercent(value);\n             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n            _totalSupply = _totalSupply.sub(tokensToBurn);\n            emit Transfer(msg.sender, address(0), tokensToBurn);\n            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n            emit Transfer(msg.sender, DanPanAddress, tokensToDanPan);\n        }", label="219_ if\n1570-if-220-228", method="transfer(address to,uint256 value)", type_label=if];
4432 [code="if (!_isWhitelisted(msg.sender, to)) {\n              tokensToBurn = findOnePercent(value);\n              tokensToDanPan = findDPPercent(value);\n             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n            _totalSupply = _totalSupply.sub(tokensToBurn);\n            emit Transfer(msg.sender, address(0), tokensToBurn);\n            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n            emit Transfer(msg.sender, DanPanAddress, tokensToDanPan);\n        }", label="219_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
1581 [code="tokensToBurn = findOnePercent(value);", label="220_ tokensToBurn = findOnePercent(value);\n1581-expression_statement-221-221", method="transfer(address to,uint256 value)", type_label=expression_statement];
1588 [code="tokensToDanPan = findDPPercent(value);", label="221_ tokensToDanPan = findDPPercent(value);\n1588-expression_statement-222-222", method="transfer(address to,uint256 value)", type_label=expression_statement];
1595 [code="tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);", label="222_ tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n1595-expression_statement-223-223", method="transfer(address to,uint256 value)", type_label=expression_statement];
1609 [code="_totalSupply = _totalSupply.sub(tokensToBurn);", label="223_ _totalSupply = _totalSupply.sub(tokensToBurn);\n1609-expression_statement-224-224", method="transfer(address to,uint256 value)", type_label=expression_statement];
1630 [code="_balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);", label="225_ _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n1630-expression_statement-226-226", method="transfer(address to,uint256 value)", type_label=expression_statement];
1653 [code="assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);", label="228_ assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n1653-expression_statement-229-229", method="transfer(address to,uint256 value)", type_label=expression_statement];
1670 [code="_balances[to] = _balances[to].add(tokensToTransfer);", label="229_ _balances[to] = _balances[to].add(tokensToTransfer);\n1670-expression_statement-230-230", method="transfer(address to,uint256 value)", type_label=expression_statement];
1693 [code="return true;", label="231_ return true;\n1693-return-232-232", method="transfer(address to,uint256 value)", type_label=return];
1696 [code="function sendto_txorigin25(address payable receiver, uint amount,address owner_txorigin25) public {\n	require (tx.origin == owner_txorigin25);\n	receiver.transfer(amount);\n}", label="233_ function sendto_txorigin25(address payable receiver, uint amount,address owner_txorigin25) public {\n	require (tx.origin == owner_txorigin25);\n	receiver.transfer(amount);\n}\n1696-function_definition-234-237", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=function_definition];
1712 [code="require (tx.origin == owner_txorigin25);", label="234_ require (tx.origin == owner_txorigin25);\n1712-expression_statement-235-235", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
1721 [code="receiver.transfer(amount);", label="235_ receiver.transfer(amount);\n1721-expression_statement-236-236", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
1728 [code="function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n    for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }\n  }", label="237_ function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n    for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }\n  }\n1728-function_definition-238-242", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=function_definition];
1742 [code="for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }", label="238_ for(i < receivers.length;;i++)\n1742-for-239-241", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=for];
4604 [code="for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }", label="238_ end_loop", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=end_loop];
1755 [code="i++", label="238_ i++\n1755-expression_statement-239-239", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1758 [code="transfer(receivers[i], amounts[i]);", label="239_ transfer(receivers[i], amounts[i]);\n1758-expression_statement-240-240", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1769 [code="function transferTo_txorigin19(address to, uint amount,address owner_txorigin19) public {\n  require(tx.origin == owner_txorigin19);\n  to.call.value(amount);\n}", label="242_ function transferTo_txorigin19(address to, uint amount,address owner_txorigin19) public {\n  require(tx.origin == owner_txorigin19);\n  to.call.value(amount);\n}\n1769-function_definition-243-246", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=function_definition];
1785 [code="require(tx.origin == owner_txorigin19);", label="243_ require(tx.origin == owner_txorigin19);\n1785-expression_statement-244-244", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
1794 [code="to.call.value(amount);", label="244_ to.call.value(amount);\n1794-expression_statement-245-245", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
1803 [code="function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }", label="246_ function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n1803-function_definition-247-252", method="approve(address spender,uint256 value)", type_label=function_definition];
1819 [code="require(spender != address(0));", label="247_ require(spender != address(0));\n1819-expression_statement-248-248", method="approve(address spender,uint256 value)", type_label=expression_statement];
1828 [code="_allowed[msg.sender][spender] = value;", label="248_ _allowed[msg.sender][spender] = value;\n1828-expression_statement-249-249", method="approve(address spender,uint256 value)", type_label=expression_statement];
1848 [code="return true;", label="250_ return true;\n1848-return-251-251", method="approve(address spender,uint256 value)", type_label=return];
1851 [code="function withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26) public {\n        require(tx.origin == owner_txorigin26);\n        _recipient.transfer(address(this).balance);\n    }", label="252_ function withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26) public {\n        require(tx.origin == owner_txorigin26);\n        _recipient.transfer(address(this).balance);\n    }\n1851-function_definition-253-256", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=function_definition];
1863 [code="require(tx.origin == owner_txorigin26);", label="253_ require(tx.origin == owner_txorigin26);\n1863-expression_statement-254-254", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
1872 [code="_recipient.transfer(address(this).balance);", label="254_ _recipient.transfer(address(this).balance);\n1872-expression_statement-255-255", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
1883 [code="function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n        if (value == 0) {\n            emit Transfer(from, to, 0);\n            return true;\n        }\n        uint256 tokensToTransfer = value;\n        uint256 tokensToBurn = 0;\n        uint256 tokensToDanPan = 0;\n        _balances[from] = _balances[from].sub(value);\n        if (!_isWhitelisted(from, to)) {\n              tokensToBurn = findOnePercent(value);\n              tokensToDanPan = findDPPercent(value);\n             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n            _totalSupply = _totalSupply.sub(tokensToBurn);\n            emit Transfer(from, address(0), tokensToBurn);\n            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n           emit Transfer(from, DanPanAddress, tokensToDanPan);\n        }\n        assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n        _balances[to] = _balances[to].add(tokensToTransfer);\n	_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        emit Transfer(from, to, tokensToTransfer);\n    return true;\n  }", label="256_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n        if (value == 0) {\n            emit Transfer(from, to, 0);\n            return true;\n        }\n        uint256 tokensToTransfer = value;\n        uint256 tokensToBurn = 0;\n        uint256 tokensToDanPan = 0;\n        _balances[from] = _balances[from].sub(value);\n        if (!_isWhitelisted(from, to)) {\n              tokensToBurn = findOnePercent(value);\n              tokensToDanPan = findDPPercent(value);\n             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n            _totalSupply = _totalSupply.sub(tokensToBurn);\n            emit Transfer(from, address(0), tokensToBurn);\n            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n           emit Transfer(from, DanPanAddress, tokensToDanPan);\n        }\n        assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n        _balances[to] = _balances[to].add(tokensToTransfer);\n	_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        emit Transfer(from, to, tokensToTransfer);\n    return true;\n  }\n1883-function_definition-257-283", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
1903 [code="require(value <= _balances[from]);", label="257_ require(value <= _balances[from]);\n1903-expression_statement-258-258", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1912 [code="require(value <= _allowed[from][msg.sender]);", label="258_ require(value <= _allowed[from][msg.sender]);\n1912-expression_statement-259-259", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1925 [code="require(to != address(0));", label="259_ require(to != address(0));\n1925-expression_statement-260-260", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1934 [code="if (value == 0) {\n            emit Transfer(from, to, 0);\n            return true;\n        }", label="260_ if_value == 0\n1934-if-261-264", method="transferFrom(address from,address to,uint256 value)", type_label=if];
4796 [code="if (value == 0) {\n            emit Transfer(from, to, 0);\n            return true;\n        }", label="260_ end_if", method="transferFrom(address from,address to,uint256 value)", type_label=end_if];
1947 [code="return true;", label="262_ return true;\n1947-return-263-263", method="transferFrom(address from,address to,uint256 value)", type_label=return];
1950 [code="uint256 tokensToTransfer = value;", label="264_ uint256 tokensToTransfer = value;\n1950-new_variable-265-265", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
1956 [code="uint256 tokensToBurn = 0;", label="265_ uint256 tokensToBurn = 0;\n1956-new_variable-266-266", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
1962 [code="uint256 tokensToDanPan = 0;", label="266_ uint256 tokensToDanPan = 0;\n1962-new_variable-267-267", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
1968 [code="_balances[from] = _balances[from].sub(value);", label="267_ _balances[from] = _balances[from].sub(value);\n1968-expression_statement-268-268", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1981 [code="if (!_isWhitelisted(from, to)) {\n              tokensToBurn = findOnePercent(value);\n              tokensToDanPan = findDPPercent(value);\n             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n            _totalSupply = _totalSupply.sub(tokensToBurn);\n            emit Transfer(from, address(0), tokensToBurn);\n            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n           emit Transfer(from, DanPanAddress, tokensToDanPan);\n        }", label="268_ if\n1981-if-269-277", method="transferFrom(address from,address to,uint256 value)", type_label=if];
4843 [code="if (!_isWhitelisted(from, to)) {\n              tokensToBurn = findOnePercent(value);\n              tokensToDanPan = findDPPercent(value);\n             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n            _totalSupply = _totalSupply.sub(tokensToBurn);\n            emit Transfer(from, address(0), tokensToBurn);\n            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n           emit Transfer(from, DanPanAddress, tokensToDanPan);\n        }", label="268_ end_if", method="transferFrom(address from,address to,uint256 value)", type_label=end_if];
1990 [code="tokensToBurn = findOnePercent(value);", label="269_ tokensToBurn = findOnePercent(value);\n1990-expression_statement-270-270", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1997 [code="tokensToDanPan = findDPPercent(value);", label="270_ tokensToDanPan = findDPPercent(value);\n1997-expression_statement-271-271", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2004 [code="tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);", label="271_ tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n2004-expression_statement-272-272", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2018 [code="_totalSupply = _totalSupply.sub(tokensToBurn);", label="272_ _totalSupply = _totalSupply.sub(tokensToBurn);\n2018-expression_statement-273-273", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2037 [code="_balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);", label="274_ _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n2037-expression_statement-275-275", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2058 [code="assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);", label="277_ assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n2058-expression_statement-278-278", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2075 [code="_balances[to] = _balances[to].add(tokensToTransfer);", label="278_ _balances[to] = _balances[to].add(tokensToTransfer);\n2075-expression_statement-279-279", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2088 [code="_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);", label="279_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n2088-expression_statement-280-280", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2117 [code="return true;", label="281_ return true;\n2117-return-282-282", method="transferFrom(address from,address to,uint256 value)", type_label=return];
2120 [code="function bug_txorigin20(address owner_txorigin20) public{\n        require(tx.origin == owner_txorigin20);\n    }", label="283_ function bug_txorigin20(address owner_txorigin20) public{\n        require(tx.origin == owner_txorigin20);\n    }\n2120-function_definition-284-286", method="bug_txorigin20(address owner_txorigin20)", type_label=function_definition];
2128 [code="require(tx.origin == owner_txorigin20);", label="284_ require(tx.origin == owner_txorigin20);\n2128-expression_statement-285-285", method="bug_txorigin20(address owner_txorigin20)", type_label=expression_statement];
2137 [code="function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }", label="286_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n2137-function_definition-287-292", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
2153 [code="require(spender != address(0));", label="287_ require(spender != address(0));\n2153-expression_statement-288-288", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
2162 [code="_allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));", label="288_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n2162-expression_statement-289-289", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
2200 [code="return true;", label="290_ return true;\n2200-return-291-291", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
2203 [code="function bug_txorigin32(  address owner_txorigin32) public{\n        require(tx.origin == owner_txorigin32);\n    }", label="292_ function bug_txorigin32(  address owner_txorigin32) public{\n        require(tx.origin == owner_txorigin32);\n    }\n2203-function_definition-293-295", method="bug_txorigin32(address owner_txorigin32)", type_label=function_definition];
2211 [code="require(tx.origin == owner_txorigin32);", label="293_ require(tx.origin == owner_txorigin32);\n2211-expression_statement-294-294", method="bug_txorigin32(address owner_txorigin32)", type_label=expression_statement];
2220 [code="function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }", label="295_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n2220-function_definition-296-301", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
2236 [code="require(spender != address(0));", label="296_ require(spender != address(0));\n2236-expression_statement-297-297", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
2245 [code="_allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));", label="297_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n2245-expression_statement-298-298", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
2283 [code="return true;", label="299_ return true;\n2283-return-300-300", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
2286 [code="function withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38) public {\n        require(tx.origin == owner_txorigin38);\n        _recipient.transfer(address(this).balance);\n    }", label="301_ function withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38) public {\n        require(tx.origin == owner_txorigin38);\n        _recipient.transfer(address(this).balance);\n    }\n2286-function_definition-302-305", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=function_definition];
2298 [code="require(tx.origin == owner_txorigin38);", label="302_ require(tx.origin == owner_txorigin38);\n2298-expression_statement-303-303", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
2307 [code="_recipient.transfer(address(this).balance);", label="303_ _recipient.transfer(address(this).balance);\n2307-expression_statement-304-304", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
2318 [code="function _mint(address account, uint256 amount) internal {\n    require(amount != 0);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }", label="305_ function _mint(address account, uint256 amount) internal {\n    require(amount != 0);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n2318-function_definition-306-310", method="_mint(address account,uint256 amount)", type_label=function_definition];
2330 [code="require(amount != 0);", label="306_ require(amount != 0);\n2330-expression_statement-307-307", method="_mint(address account,uint256 amount)", type_label=expression_statement];
2337 [code="_balances[account] = _balances[account].add(amount);", label="307_ _balances[account] = _balances[account].add(amount);\n2337-expression_statement-308-308", method="_mint(address account,uint256 amount)", type_label=expression_statement];
2360 [code="function bug_txorigin4(address owner_txorigin4) public{\n        require(tx.origin == owner_txorigin4);\n    }", label="310_ function bug_txorigin4(address owner_txorigin4) public{\n        require(tx.origin == owner_txorigin4);\n    }\n2360-function_definition-311-313", method="bug_txorigin4(address owner_txorigin4)", type_label=function_definition];
2368 [code="require(tx.origin == owner_txorigin4);", label="311_ require(tx.origin == owner_txorigin4);\n2368-expression_statement-312-312", method="bug_txorigin4(address owner_txorigin4)", type_label=expression_statement];
2377 [code="function burn(uint256 amount) external {\n    _burn(msg.sender, amount);\n  }", label="313_ function burn(uint256 amount) external {\n    _burn(msg.sender, amount);\n  }\n2377-function_definition-314-316", method="burn(uint256 amount)", type_label=function_definition];
2385 [code="_burn(msg.sender, amount);", label="314_ _burn(msg.sender, amount);\n2385-expression_statement-315-315", method="burn(uint256 amount)", type_label=expression_statement];
2394 [code="function transferTo_txorigin7(address to, uint amount,address owner_txorigin7) public {\n  require(tx.origin == owner_txorigin7);\n  to.call.value(amount);\n}", label="316_ function transferTo_txorigin7(address to, uint amount,address owner_txorigin7) public {\n  require(tx.origin == owner_txorigin7);\n  to.call.value(amount);\n}\n2394-function_definition-317-320", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=function_definition];
2410 [code="require(tx.origin == owner_txorigin7);", label="317_ require(tx.origin == owner_txorigin7);\n2410-expression_statement-318-318", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
2419 [code="to.call.value(amount);", label="318_ to.call.value(amount);\n2419-expression_statement-319-319", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
2428 [code="function _burn(address account, uint256 amount) internal {\n    require(amount != 0);\n    require(amount <= _balances[account]);\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }", label="320_ function _burn(address account, uint256 amount) internal {\n    require(amount != 0);\n    require(amount <= _balances[account]);\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n2428-function_definition-321-327", method="_burn(address account,uint256 amount)", type_label=function_definition];
2440 [code="require(amount != 0);", label="321_ require(amount != 0);\n2440-expression_statement-322-322", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2447 [code="require(amount <= _balances[account]);", label="322_ require(amount <= _balances[account]);\n2447-expression_statement-323-323", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2456 [code="_totalSupply = _totalSupply.sub(amount);", label="323_ _totalSupply = _totalSupply.sub(amount);\n2456-expression_statement-324-324", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2465 [code="_balances[account] = _balances[account].sub(amount);", label="324_ _balances[account] = _balances[account].sub(amount);\n2465-expression_statement-325-325", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2488 [code="function transferTo_txorigin23(address to, uint amount,address owner_txorigin23) public {\n  require(tx.origin == owner_txorigin23);\n  to.call.value(amount);\n}", label="327_ function transferTo_txorigin23(address to, uint amount,address owner_txorigin23) public {\n  require(tx.origin == owner_txorigin23);\n  to.call.value(amount);\n}\n2488-function_definition-328-331", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=function_definition];
2504 [code="require(tx.origin == owner_txorigin23);", label="328_ require(tx.origin == owner_txorigin23);\n2504-expression_statement-329-329", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
2513 [code="to.call.value(amount);", label="329_ to.call.value(amount);\n2513-expression_statement-330-330", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
2522 [code="function burnFrom(address account, uint256 amount) external {\n    require(amount <= _allowed[account][msg.sender]);\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n    _burn(account, amount);\n  }", label="331_ function burnFrom(address account, uint256 amount) external {\n    require(amount <= _allowed[account][msg.sender]);\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n    _burn(account, amount);\n  }\n2522-function_definition-332-336", method="burnFrom(address account,uint256 amount)", type_label=function_definition];
2534 [code="require(amount <= _allowed[account][msg.sender]);", label="332_ require(amount <= _allowed[account][msg.sender]);\n2534-expression_statement-333-333", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2547 [code="_allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);", label="333_ _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n2547-expression_statement-334-334", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2568 [code="_burn(account, amount);", label="334_ _burn(account, amount);\n2568-expression_statement-335-335", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2575 [code="function withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14) public {\n        require(tx.origin == owner_txorigin14);\n        _recipient.transfer(address(this).balance);\n    }", label="336_ function withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14) public {\n        require(tx.origin == owner_txorigin14);\n        _recipient.transfer(address(this).balance);\n    }\n2575-function_definition-337-340", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=function_definition];
2587 [code="require(tx.origin == owner_txorigin14);", label="337_ require(tx.origin == owner_txorigin14);\n2587-expression_statement-338-338", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
2596 [code="_recipient.transfer(address(this).balance);", label="338_ _recipient.transfer(address(this).balance);\n2596-expression_statement-339-339", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
2607 [code="function NewDanPanAddress(address newDanPanaddress) external onlyOwner {\n    require(newDanPanaddress != address(0));\n      emit DanPanAddressChanged(DanPanAddress, newDanPanaddress);\n      DanPanAddress = newDanPanaddress;\n  }", label="340_ function NewDanPanAddress(address newDanPanaddress) external onlyOwner {\n    require(newDanPanaddress != address(0));\n      emit DanPanAddressChanged(DanPanAddress, newDanPanaddress);\n      DanPanAddress = newDanPanaddress;\n  }\n2607-function_definition-341-345", method="NewDanPanAddress(address newDanPanaddress)", type_label=function_definition];
2614 [code=onlyOwner, label="340_ onlyOwner\n2614-expression_statement-341-341", method="NewDanPanAddress(address newDanPanaddress)", type_label=expression_statement];
2617 [code="require(newDanPanaddress != address(0));", label="341_ require(newDanPanaddress != address(0));\n2617-expression_statement-342-342", method="NewDanPanAddress(address newDanPanaddress)", type_label=expression_statement];
2632 [code="DanPanAddress = newDanPanaddress;", label="343_ DanPanAddress = newDanPanaddress;\n2632-expression_statement-344-344", method="NewDanPanAddress(address newDanPanaddress)", type_label=expression_statement];
2636 [code="function withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30) public {\n        require(tx.origin == owner_txorigin30);\n        _recipient.transfer(address(this).balance);\n    }", label="345_ function withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30) public {\n        require(tx.origin == owner_txorigin30);\n        _recipient.transfer(address(this).balance);\n    }\n2636-function_definition-346-349", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=function_definition];
2648 [code="require(tx.origin == owner_txorigin30);", label="346_ require(tx.origin == owner_txorigin30);\n2648-expression_statement-347-347", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
2657 [code="_recipient.transfer(address(this).balance);", label="347_ _recipient.transfer(address(this).balance);\n2657-expression_statement-348-348", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
2668 [code="function NewDanPanPercent(uint256 newDanPanpercent) external onlyOwner {\n      emit DanPanPercentChanged(dpPercent, newDanPanpercent);\n      dpPercent = newDanPanpercent;\n  }", label="349_ function NewDanPanPercent(uint256 newDanPanpercent) external onlyOwner {\n      emit DanPanPercentChanged(dpPercent, newDanPanpercent);\n      dpPercent = newDanPanpercent;\n  }\n2668-function_definition-350-353", method="NewDanPanPercent(uint256 newDanPanpercent)", type_label=function_definition];
2675 [code=onlyOwner, label="349_ onlyOwner\n2675-expression_statement-350-350", method="NewDanPanPercent(uint256 newDanPanpercent)", type_label=expression_statement];
2684 [code="dpPercent = newDanPanpercent;", label="351_ dpPercent = newDanPanpercent;\n2684-expression_statement-352-352", method="NewDanPanPercent(uint256 newDanPanpercent)", type_label=expression_statement];
2688 [code="function bug_txorigin8(address owner_txorigin8) public{\n        require(tx.origin == owner_txorigin8);\n    }", label="353_ function bug_txorigin8(address owner_txorigin8) public{\n        require(tx.origin == owner_txorigin8);\n    }\n2688-function_definition-354-356", method="bug_txorigin8(address owner_txorigin8)", type_label=function_definition];
2696 [code="require(tx.origin == owner_txorigin8);", label="354_ require(tx.origin == owner_txorigin8);\n2696-expression_statement-355-355", method="bug_txorigin8(address owner_txorigin8)", type_label=expression_statement];
2705 [code="function _isWhitelisted(address _from, address _to) internal view returns (bool) {\n        return whitelistFrom[_from]||whitelistTo[_to];\n}", label="356_ function _isWhitelisted(address _from, address _to) internal view returns (bool) {\n        return whitelistFrom[_from]||whitelistTo[_to];\n}\n2705-function_definition-357-359", method="_isWhitelisted(address _from,address _to)", type_label=function_definition];
2722 [code="return whitelistFrom[_from]||whitelistTo[_to];", label="357_ return whitelistFrom[_from]||whitelistTo[_to];\n2722-return-358-358", method="_isWhitelisted(address _from,address _to)", type_label=return];
2730 [code="function transferTo_txorigin39(address to, uint amount,address owner_txorigin39) public {\n  require(tx.origin == owner_txorigin39);\n  to.call.value(amount);\n}", label="359_ function transferTo_txorigin39(address to, uint amount,address owner_txorigin39) public {\n  require(tx.origin == owner_txorigin39);\n  to.call.value(amount);\n}\n2730-function_definition-360-363", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=function_definition];
2746 [code="require(tx.origin == owner_txorigin39);", label="360_ require(tx.origin == owner_txorigin39);\n2746-expression_statement-361-361", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
2755 [code="to.call.value(amount);", label="361_ to.call.value(amount);\n2755-expression_statement-362-362", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
2764 [code="function setWhitelistedTo(address _addr, bool _whitelisted) external onlyOwner {\n        emit WhitelistTo(_addr, _whitelisted);\n        whitelistTo[_addr] = _whitelisted;\n    }", label="363_ function setWhitelistedTo(address _addr, bool _whitelisted) external onlyOwner {\n        emit WhitelistTo(_addr, _whitelisted);\n        whitelistTo[_addr] = _whitelisted;\n    }\n2764-function_definition-364-367", method="setWhitelistedTo(address _addr,bool _whitelisted)", type_label=function_definition];
2775 [code=onlyOwner, label="363_ onlyOwner\n2775-expression_statement-364-364", method="setWhitelistedTo(address _addr,bool _whitelisted)", type_label=expression_statement];
2784 [code="whitelistTo[_addr] = _whitelisted;", label="365_ whitelistTo[_addr] = _whitelisted;\n2784-expression_statement-366-366", method="setWhitelistedTo(address _addr,bool _whitelisted)", type_label=expression_statement];
2790 [code="function bug_txorigin36(  address owner_txorigin36) public{\n        require(tx.origin == owner_txorigin36);\n    }", label="367_ function bug_txorigin36(  address owner_txorigin36) public{\n        require(tx.origin == owner_txorigin36);\n    }\n2790-function_definition-368-370", method="bug_txorigin36(address owner_txorigin36)", type_label=function_definition];
2798 [code="require(tx.origin == owner_txorigin36);", label="368_ require(tx.origin == owner_txorigin36);\n2798-expression_statement-369-369", method="bug_txorigin36(address owner_txorigin36)", type_label=expression_statement];
2807 [code="function setWhitelistedFrom(address _addr, bool _whitelisted) external onlyOwner {\n        emit WhitelistFrom(_addr, _whitelisted);\n        whitelistFrom[_addr] = _whitelisted;\n}", label="370_ function setWhitelistedFrom(address _addr, bool _whitelisted) external onlyOwner {\n        emit WhitelistFrom(_addr, _whitelisted);\n        whitelistFrom[_addr] = _whitelisted;\n}\n2807-function_definition-371-374", method="setWhitelistedFrom(address _addr,bool _whitelisted)", type_label=function_definition];
2818 [code=onlyOwner, label="370_ onlyOwner\n2818-expression_statement-371-371", method="setWhitelistedFrom(address _addr,bool _whitelisted)", type_label=expression_statement];
2827 [code="whitelistFrom[_addr] = _whitelisted;", label="372_ whitelistFrom[_addr] = _whitelisted;\n2827-expression_statement-373-373", method="setWhitelistedFrom(address _addr,bool _whitelisted)", type_label=expression_statement];
2833 [code="function transferTo_txorigin35(address to, uint amount,address owner_txorigin35) public {\n  require(tx.origin == owner_txorigin35);\n  to.call.value(amount);\n}", label="374_ function transferTo_txorigin35(address to, uint amount,address owner_txorigin35) public {\n  require(tx.origin == owner_txorigin35);\n  to.call.value(amount);\n}\n2833-function_definition-375-378", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=function_definition];
2849 [code="require(tx.origin == owner_txorigin35);", label="375_ require(tx.origin == owner_txorigin35);\n2849-expression_statement-376-376", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
2858 [code="to.call.value(amount);", label="376_ to.call.value(amount);\n2858-expression_statement-377-377", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
2;
129 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
146 -> 3008  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3008 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 3008  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
153 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
172 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
199 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
227 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
261 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
320 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
367 -> 376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
390 -> 399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
552 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
584 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
595 -> 603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
612 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
623 -> 639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
671 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
747 -> 756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
768 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
805 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
851 -> 867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
867 -> 876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
907 -> 916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
933 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
977 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 1002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 1037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1037 -> 1046  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1079 -> 1088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1104 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1147 -> 1163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1163 -> 1172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1179 -> 1188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1188 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1190 -> 1202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1202 -> 1211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1222 -> 1235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1235 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1239 -> 1255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1255 -> 1264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1271 -> 1288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1288 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1294 -> 1310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1310 -> 1319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1326 -> 1339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1339 -> 1350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1350 -> 1366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1366 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1368 -> 1384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1384 -> 1393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1402 -> 1415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1415 -> 1426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1426 -> 1447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1447 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1449 -> 1465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1465 -> 1474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1481 -> 1497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1497 -> 1508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1508 -> 1517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1517 -> 4379  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4379 -> 1535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1532 -> 4379  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1532 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1535 -> 1541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1541 -> 1547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1547 -> 1553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1553 -> 1570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1570 -> 1581  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1570 -> 4432  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1581 -> 1588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1588 -> 1595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1595 -> 1609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1653 -> 1670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1693 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1696 -> 1712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1712 -> 1721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1728 -> 1742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1742 -> 1758  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1742 -> 4604  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4604 -> 1769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1755 -> 1742  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1758 -> 1755  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1769 -> 1785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1785 -> 1794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1803 -> 1819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1819 -> 1828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1848 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1851 -> 1863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1863 -> 1872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1883 -> 1903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1903 -> 1912  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1912 -> 1925  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1925 -> 1934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1934 -> 4796  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4796 -> 1950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1947 -> 4796  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1947 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1950 -> 1956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1956 -> 1962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1962 -> 1968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1968 -> 1981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1981 -> 1990  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1981 -> 4843  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1990 -> 1997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1997 -> 2004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2004 -> 2018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2058 -> 2075  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2075 -> 2088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2117 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2120 -> 2128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2137 -> 2153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2153 -> 2162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2200 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2203 -> 2211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2220 -> 2236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2236 -> 2245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2283 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2286 -> 2298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2298 -> 2307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2318 -> 2330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2330 -> 2337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2360 -> 2368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2377 -> 2385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2394 -> 2410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2410 -> 2419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2428 -> 2440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2440 -> 2447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2447 -> 2456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2456 -> 2465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2488 -> 2504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2504 -> 2513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2522 -> 2534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2534 -> 2547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2547 -> 2568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2575 -> 2587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2587 -> 2596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2607 -> 2617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2636 -> 2648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2648 -> 2657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2668 -> 2684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2688 -> 2696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2705 -> 2722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2722 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2730 -> 2746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2746 -> 2755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2764 -> 2784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2790 -> 2798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2807 -> 2827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2833 -> 2849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2849 -> 2858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
