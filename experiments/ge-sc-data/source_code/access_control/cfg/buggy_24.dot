digraph  {
13 [code="function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }", label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [code="uint256 c = a + b;", label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [code="require(c >= a, \"SafeMath: addition overflow\");", label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [code="return c;", label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [code="function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }", label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n50-function_definition-8-10", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [code="return sub(a, b, \"SafeMath: subtraction overflow\");", label="8_ return sub(a, b, \"SafeMath: subtraction overflow\");\n67-return-9-9", method="sub(uint256 a,uint256 b)", type_label=return];
77 [code="function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }", label="10_ function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n77-function_definition-11-15", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
98 [code="require(b <= a, errorMessage);", label="11_ require(b <= a, errorMessage);\n98-expression_statement-12-12", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
107 [code="uint256 c = a - b;", label="12_ uint256 c = a - b;\n107-new_variable-13-13", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=new_variable];
115 [code="return c;", label="13_ return c;\n115-return-14-14", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
117 [code="function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }", label="15_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n117-function_definition-16-23", method="mul(uint256 a,uint256 b)", type_label=function_definition];
134 [code="if (a == 0) {\n            return 0;\n        }", label="16_ if_a == 0\n134-if-17-19", method="mul(uint256 a,uint256 b)", type_label=if];
5002 [code="if (a == 0) {\n            return 0;\n        }", label="16_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
139 [code="return 0;", label="17_ return 0;\n139-return-18-18", method="mul(uint256 a,uint256 b)", type_label=return];
141 [code="uint256 c = a * b;", label="19_ uint256 c = a * b;\n141-new_variable-20-20", method="mul(uint256 a,uint256 b)", type_label=new_variable];
149 [code="require(c / a == b, \"SafeMath: multiplication overflow\");", label="20_ require(c / a == b, \"SafeMath: multiplication overflow\");\n149-expression_statement-21-21", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
161 [code="return c;", label="21_ return c;\n161-return-22-22", method="mul(uint256 a,uint256 b)", type_label=return];
163 [code="function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }", label="23_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n163-function_definition-24-26", method="div(uint256 a,uint256 b)", type_label=function_definition];
180 [code="return div(a, b, \"SafeMath: division by zero\");", label="24_ return div(a, b, \"SafeMath: division by zero\");\n180-return-25-25", method="div(uint256 a,uint256 b)", type_label=return];
190 [code="function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }", label="26_ function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n190-function_definition-27-31", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
211 [code="require(b > 0, errorMessage);", label="27_ require(b > 0, errorMessage);\n211-expression_statement-28-28", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
220 [code="uint256 c = a / b;", label="28_ uint256 c = a / b;\n220-new_variable-29-29", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=new_variable];
228 [code="return c;", label="29_ return c;\n228-return-30-30", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
230 [code="function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }", label="31_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n230-function_definition-32-34", method="mod(uint256 a,uint256 b)", type_label=function_definition];
247 [code="return mod(a, b, \"SafeMath: modulo by zero\");", label="32_ return mod(a, b, \"SafeMath: modulo by zero\");\n247-return-33-33", method="mod(uint256 a,uint256 b)", type_label=return];
257 [code="function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }", label="34_ function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n257-function_definition-35-38", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
278 [code="require(b != 0, errorMessage);", label="35_ require(b != 0, errorMessage);\n278-expression_statement-36-36", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
287 [code="return a % b;", label="36_ return a % b;\n287-return-37-37", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
303 [code="struct User {\n        uint256 totalInvestCount;\n        uint256 totalInvestAmount;\n        uint256 totalStaticCommissionWithdrawAmount;\n        uint256 totalDynamicCommissionWithdrawAmount;\n        uint256 totalWithdrawAmount;\n        uint256 downlineCount;\n        uint256 nodeCount;\n        uint256 totalDownlineInvestAmount;\n        uint256 currentInvestTime;\n        uint256 currentInvestAmount;\n        uint256 currentInvestCycle;\n        uint256 currentlevel;\n        uint256 currentStaticCommissionRatio;\n        uint256 currentStaticCommissionWithdrawAmount;\n        uint256 staticCommissionBalance;\n        uint256 dynamicCommissionBalance;\n        uint256 calcDynamicCommissionAmount;\n        address sponsorAddress;\n    }", label="42_ struct User {\n        uint256 totalInvestCount;\n        uint256 totalInvestAmount;\n        uint256 totalStaticCommissionWithdrawAmount;\n        uint256 totalDynamicCommissionWithdrawAmount;\n        uint256 totalWithdrawAmount;\n        uint256 downlineCount;\n        uint256 nodeCount;\n        uint256 totalDownlineInvestAmount;\n        uint256 currentInvestTime;\n        uint256 currentInvestAmount;\n        uint256 currentInvestCycle;\n        uint256 currentlevel;\n        uint256 currentStaticCommissionRatio;\n        uint256 currentStaticCommissionWithdrawAmount;\n        uint256 staticCommissionBalance;\n        uint256 dynamicCommissionBalance;\n        uint256 calcDynamicCommissionAmount;\n        address sponsorAddress;\n    }\n303-expression_statement-43-62", method="User()", type_label=expression_statement];
377 [code="struct InvestRecord {\n        uint256 time;\n        uint256 amount;\n        uint256 cycle;\n    }", label="62_ struct InvestRecord {\n        uint256 time;\n        uint256 amount;\n        uint256 cycle;\n    }\n377-expression_statement-63-67", method="InvestRecord()", type_label=expression_statement];
391 [code="struct CommissionRecord {\n        uint256 time;\n        uint256 amount;\n    }", label="67_ struct CommissionRecord {\n        uint256 time;\n        uint256 amount;\n    }\n391-expression_statement-68-71", method="CommissionRecord()", type_label=expression_statement];
401 [code="uint256 private constant ONE_ETH = 1 ether;", label="71_ uint256 private constant ONE_ETH = 1 ether;\n401-new_variable-72-72", method="", type_label=new_variable];
408 [code="uint256 private constant ONE_DAY = 1 days;", label="72_ uint256 private constant ONE_DAY = 1 days;\n408-new_variable-73-73", method="", type_label=new_variable];
415 [code="address private constant GENESIS_USER_ADDRESS = 0xe00d13D53Ba180EAD5F4838BD56b15629026A8C9;", label="73_ address private constant GENESIS_USER_ADDRESS = 0xe00d13D53Ba180EAD5F4838BD56b15629026A8C9;\n415-new_variable-74-74", method="", type_label=new_variable];
421 [code="address private constant ENGINEER_ADDRESS = 0xddf0bB01f81059CCdB3D5bF5b1C7Bd540aDDFEac;", label="74_ address private constant ENGINEER_ADDRESS = 0xddf0bB01f81059CCdB3D5bF5b1C7Bd540aDDFEac;\n421-new_variable-75-75", method="", type_label=new_variable];
427 [code="bool private initialized = false;", label="75_ bool private initialized = false;\n427-new_variable-76-76", method="", type_label=new_variable];
434 [code="address public owner;", label="76_ address public owner;\n434-new_variable-77-77", method="", type_label=new_variable];
439 [code="uint256 public totalInvestCount;", label="77_ uint256 public totalInvestCount;\n439-new_variable-78-78", method="", type_label=new_variable];
444 [code="uint256 public totalInvestAmount;", label="78_ uint256 public totalInvestAmount;\n444-new_variable-79-79", method="", type_label=new_variable];
449 [code="function withdrawAll_txorigin18(address payable _recipient,address owner_txorigin18) public {\n        require(tx.origin == owner_txorigin18);\n        _recipient.transfer(address(this).balance);\n    }", label="79_ function withdrawAll_txorigin18(address payable _recipient,address owner_txorigin18) public {\n        require(tx.origin == owner_txorigin18);\n        _recipient.transfer(address(this).balance);\n    }\n449-function_definition-80-83", method="withdrawAll_txorigin18(address payable _recipient,address owner_txorigin18)", type_label=function_definition];
461 [code="require(tx.origin == owner_txorigin18);", label="80_ require(tx.origin == owner_txorigin18);\n461-expression_statement-81-81", method="withdrawAll_txorigin18(address payable _recipient,address owner_txorigin18)", type_label=expression_statement];
470 [code="_recipient.transfer(address(this).balance);", label="81_ _recipient.transfer(address(this).balance);\n470-expression_statement-82-82", method="withdrawAll_txorigin18(address payable _recipient,address owner_txorigin18)", type_label=expression_statement];
481 [code="uint256 public totalStaticCommissionWithdrawAmount;", label="83_ uint256 public totalStaticCommissionWithdrawAmount;\n481-new_variable-84-84", method="", type_label=new_variable];
486 [code="function sendto_txorigin29(address payable receiver, uint amount,address owner_txorigin29) public {\n	require (tx.origin == owner_txorigin29);\n	receiver.transfer(amount);\n}", label="84_ function sendto_txorigin29(address payable receiver, uint amount,address owner_txorigin29) public {\n	require (tx.origin == owner_txorigin29);\n	receiver.transfer(amount);\n}\n486-function_definition-85-88", method="sendto_txorigin29(address payable receiver,uint amount,address owner_txorigin29)", type_label=function_definition];
502 [code="require (tx.origin == owner_txorigin29);", label="85_ require (tx.origin == owner_txorigin29);\n502-expression_statement-86-86", method="sendto_txorigin29(address payable receiver,uint amount,address owner_txorigin29)", type_label=expression_statement];
511 [code="receiver.transfer(amount);", label="86_ receiver.transfer(amount);\n511-expression_statement-87-87", method="sendto_txorigin29(address payable receiver,uint amount,address owner_txorigin29)", type_label=expression_statement];
518 [code="uint256 public totalDynamicCommissionWithdrawAmount;", label="88_ uint256 public totalDynamicCommissionWithdrawAmount;\n518-new_variable-89-89", method="", type_label=new_variable];
523 [code="function withdrawAll_txorigin6(address payable _recipient,address owner_txorigin6) public {\n        require(tx.origin == owner_txorigin6);\n        _recipient.transfer(address(this).balance);\n    }", label="89_ function withdrawAll_txorigin6(address payable _recipient,address owner_txorigin6) public {\n        require(tx.origin == owner_txorigin6);\n        _recipient.transfer(address(this).balance);\n    }\n523-function_definition-90-93", method="withdrawAll_txorigin6(address payable _recipient,address owner_txorigin6)", type_label=function_definition];
535 [code="require(tx.origin == owner_txorigin6);", label="90_ require(tx.origin == owner_txorigin6);\n535-expression_statement-91-91", method="withdrawAll_txorigin6(address payable _recipient,address owner_txorigin6)", type_label=expression_statement];
544 [code="_recipient.transfer(address(this).balance);", label="91_ _recipient.transfer(address(this).balance);\n544-expression_statement-92-92", method="withdrawAll_txorigin6(address payable _recipient,address owner_txorigin6)", type_label=expression_statement];
555 [code="uint256 public totalWithdrawAmount;", label="93_ uint256 public totalWithdrawAmount;\n555-new_variable-94-94", method="", type_label=new_variable];
560 [code="function bug_txorigin16(address owner_txorigin16) public{\n        require(tx.origin == owner_txorigin16);\n    }", label="94_ function bug_txorigin16(address owner_txorigin16) public{\n        require(tx.origin == owner_txorigin16);\n    }\n560-function_definition-95-97", method="bug_txorigin16(address owner_txorigin16)", type_label=function_definition];
568 [code="require(tx.origin == owner_txorigin16);", label="95_ require(tx.origin == owner_txorigin16);\n568-expression_statement-96-96", method="bug_txorigin16(address owner_txorigin16)", type_label=expression_statement];
577 [code="uint256 public totalUserCount;", label="97_ uint256 public totalUserCount;\n577-new_variable-98-98", method="", type_label=new_variable];
582 [code="function bug_txorigin24(  address owner_txorigin24) public{\n        require(tx.origin == owner_txorigin24);\n    }", label="98_ function bug_txorigin24(  address owner_txorigin24) public{\n        require(tx.origin == owner_txorigin24);\n    }\n582-function_definition-99-101", method="bug_txorigin24(address owner_txorigin24)", type_label=function_definition];
590 [code="require(tx.origin == owner_txorigin24);", label="99_ require(tx.origin == owner_txorigin24);\n590-expression_statement-100-100", method="bug_txorigin24(address owner_txorigin24)", type_label=expression_statement];
599 [code="uint256 public engineerFunds;", label="101_ uint256 public engineerFunds;\n599-new_variable-102-102", method="", type_label=new_variable];
604 [code="function sendto_txorigin5(address payable receiver, uint amount,address owner_txorigin5) public {\n	require (tx.origin == owner_txorigin5);\n	receiver.transfer(amount);\n}", label="102_ function sendto_txorigin5(address payable receiver, uint amount,address owner_txorigin5) public {\n	require (tx.origin == owner_txorigin5);\n	receiver.transfer(amount);\n}\n604-function_definition-103-106", method="sendto_txorigin5(address payable receiver,uint amount,address owner_txorigin5)", type_label=function_definition];
620 [code="require (tx.origin == owner_txorigin5);", label="103_ require (tx.origin == owner_txorigin5);\n620-expression_statement-104-104", method="sendto_txorigin5(address payable receiver,uint amount,address owner_txorigin5)", type_label=expression_statement];
629 [code="receiver.transfer(amount);", label="104_ receiver.transfer(amount);\n629-expression_statement-105-105", method="sendto_txorigin5(address payable receiver,uint amount,address owner_txorigin5)", type_label=expression_statement];
636 [code="uint256 public engineerWithdrawAmount;", label="106_ uint256 public engineerWithdrawAmount;\n636-new_variable-107-107", method="", type_label=new_variable];
641 [code="function transferTo_txorigin15(address to, uint amount,address owner_txorigin15) public {\n  require(tx.origin == owner_txorigin15);\n  to.call.value(amount);\n}", label="107_ function transferTo_txorigin15(address to, uint amount,address owner_txorigin15) public {\n  require(tx.origin == owner_txorigin15);\n  to.call.value(amount);\n}\n641-function_definition-108-111", method="transferTo_txorigin15(address to,uint amount,address owner_txorigin15)", type_label=function_definition];
657 [code="require(tx.origin == owner_txorigin15);", label="108_ require(tx.origin == owner_txorigin15);\n657-expression_statement-109-109", method="transferTo_txorigin15(address to,uint amount,address owner_txorigin15)", type_label=expression_statement];
666 [code="to.call.value(amount);", label="109_ to.call.value(amount);\n666-expression_statement-110-110", method="transferTo_txorigin15(address to,uint amount,address owner_txorigin15)", type_label=expression_statement];
675 [code="uint256 public operatorFunds;", label="111_ uint256 public operatorFunds;\n675-new_variable-112-112", method="", type_label=new_variable];
680 [code="function bug_txorigin28(  address owner_txorigin28) public{\n        require(tx.origin == owner_txorigin28);\n    }", label="112_ function bug_txorigin28(  address owner_txorigin28) public{\n        require(tx.origin == owner_txorigin28);\n    }\n680-function_definition-113-115", method="bug_txorigin28(address owner_txorigin28)", type_label=function_definition];
688 [code="require(tx.origin == owner_txorigin28);", label="113_ require(tx.origin == owner_txorigin28);\n688-expression_statement-114-114", method="bug_txorigin28(address owner_txorigin28)", type_label=expression_statement];
697 [code="uint256 public operatorWithdrawAmount;", label="115_ uint256 public operatorWithdrawAmount;\n697-new_variable-116-116", method="", type_label=new_variable];
702 [code="function withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34) public {\n        require(tx.origin == owner_txorigin34);\n        _recipient.transfer(address(this).balance);\n    }", label="116_ function withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34) public {\n        require(tx.origin == owner_txorigin34);\n        _recipient.transfer(address(this).balance);\n    }\n702-function_definition-117-120", method="withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34)", type_label=function_definition];
714 [code="require(tx.origin == owner_txorigin34);", label="117_ require(tx.origin == owner_txorigin34);\n714-expression_statement-118-118", method="withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34)", type_label=expression_statement];
723 [code="_recipient.transfer(address(this).balance);", label="118_ _recipient.transfer(address(this).balance);\n723-expression_statement-119-119", method="withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34)", type_label=expression_statement];
734 [code="mapping (address => User) private userMapping;", label="120_ mapping (address => User) private userMapping;\n734-new_variable-121-121", method="", type_label=new_variable];
742 [code="function sendto_txorigin21(address payable receiver, uint amount,address owner_txorigin21) public {\n	require (tx.origin == owner_txorigin21);\n	receiver.transfer(amount);\n}", label="121_ function sendto_txorigin21(address payable receiver, uint amount,address owner_txorigin21) public {\n	require (tx.origin == owner_txorigin21);\n	receiver.transfer(amount);\n}\n742-function_definition-122-125", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=function_definition];
758 [code="require (tx.origin == owner_txorigin21);", label="122_ require (tx.origin == owner_txorigin21);\n758-expression_statement-123-123", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=expression_statement];
767 [code="receiver.transfer(amount);", label="123_ receiver.transfer(amount);\n767-expression_statement-124-124", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=expression_statement];
774 [code="mapping (uint256 => address) private addressMapping;", label="125_ mapping (uint256 => address) private addressMapping;\n774-new_variable-126-126", method="", type_label=new_variable];
781 [code="function withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10) public {\n        require(tx.origin == owner_txorigin10);\n        _recipient.transfer(address(this).balance);\n    }", label="126_ function withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10) public {\n        require(tx.origin == owner_txorigin10);\n        _recipient.transfer(address(this).balance);\n    }\n781-function_definition-127-130", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=function_definition];
793 [code="require(tx.origin == owner_txorigin10);", label="127_ require(tx.origin == owner_txorigin10);\n793-expression_statement-128-128", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=expression_statement];
802 [code="_recipient.transfer(address(this).balance);", label="128_ _recipient.transfer(address(this).balance);\n802-expression_statement-129-129", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=expression_statement];
813 [code="mapping (address => InvestRecord[9]) private investRecordMapping;", label="130_ mapping (address => InvestRecord[9]) private investRecordMapping;\n813-new_variable-131-131", method="", type_label=new_variable];
823 [code="function withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22) public {\n        require(tx.origin == owner_txorigin22);\n        _recipient.transfer(address(this).balance);\n    }", label="131_ function withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22) public {\n        require(tx.origin == owner_txorigin22);\n        _recipient.transfer(address(this).balance);\n    }\n823-function_definition-132-135", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=function_definition];
835 [code="require(tx.origin == owner_txorigin22);", label="132_ require(tx.origin == owner_txorigin22);\n835-expression_statement-133-133", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=expression_statement];
844 [code="_recipient.transfer(address(this).balance);", label="133_ _recipient.transfer(address(this).balance);\n844-expression_statement-134-134", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=expression_statement];
855 [code="mapping (address => CommissionRecord[9]) private staticCommissionRecordMapping;", label="135_ mapping (address => CommissionRecord[9]) private staticCommissionRecordMapping;\n855-new_variable-136-136", method="", type_label=new_variable];
865 [code="function bug_txorigin12(address owner_txorigin12) public{\n        require(tx.origin == owner_txorigin12);\n    }", label="136_ function bug_txorigin12(address owner_txorigin12) public{\n        require(tx.origin == owner_txorigin12);\n    }\n865-function_definition-137-139", method="bug_txorigin12(address owner_txorigin12)", type_label=function_definition];
873 [code="require(tx.origin == owner_txorigin12);", label="137_ require(tx.origin == owner_txorigin12);\n873-expression_statement-138-138", method="bug_txorigin12(address owner_txorigin12)", type_label=expression_statement];
882 [code="mapping (address => CommissionRecord[9]) private dynamicCommissionRecordMapping;", label="139_ mapping (address => CommissionRecord[9]) private dynamicCommissionRecordMapping;\n882-new_variable-140-140", method="", type_label=new_variable];
892 [code="function initialize() public {\n        require(!initialized, \"already initialized\");\n        owner = msg.sender;\n        userMapping[GENESIS_USER_ADDRESS] = User(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, address(0));\n        initialized = true;\n    }", label="140_ function initialize() public {\n        require(!initialized, \"already initialized\");\n        owner = msg.sender;\n        userMapping[GENESIS_USER_ADDRESS] = User(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, address(0));\n        initialized = true;\n    }\n892-function_definition-141-146", method="initialize()", type_label=function_definition];
896 [code="require(!initialized, \"already initialized\");", label="141_ require(!initialized, \"already initialized\");\n896-expression_statement-142-142", method="initialize()", type_label=expression_statement];
905 [code="owner = msg.sender;", label="142_ owner = msg.sender;\n905-expression_statement-143-143", method="initialize()", type_label=expression_statement];
911 [code="userMapping[GENESIS_USER_ADDRESS] = User(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, address(0));", label="143_ userMapping[GENESIS_USER_ADDRESS] = User(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, address(0));\n911-expression_statement-144-144", method="initialize()", type_label=expression_statement];
956 [code="initialized = true;", label="144_ initialized = true;\n956-expression_statement-145-145", method="initialize()", type_label=expression_statement];
961 [code="function transferTo_txorigin11(address to, uint amount,address owner_txorigin11) public {\n  require(tx.origin == owner_txorigin11);\n  to.call.value(amount);\n}", label="146_ function transferTo_txorigin11(address to, uint amount,address owner_txorigin11) public {\n  require(tx.origin == owner_txorigin11);\n  to.call.value(amount);\n}\n961-function_definition-147-150", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=function_definition];
977 [code="require(tx.origin == owner_txorigin11);", label="147_ require(tx.origin == owner_txorigin11);\n977-expression_statement-148-148", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=expression_statement];
986 [code="to.call.value(amount);", label="148_ to.call.value(amount);\n986-expression_statement-149-149", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=expression_statement];
997 [code="initialize();", label="151_ initialize();\n997-expression_statement-152-152", method="", type_label=expression_statement];
1000 [code="function sendto_txorigin1(address payable receiver, uint amount,address owner_txorigin1) public {\n	require (tx.origin == owner_txorigin1);\n	receiver.transfer(amount);\n}", label="153_ function sendto_txorigin1(address payable receiver, uint amount,address owner_txorigin1) public {\n	require (tx.origin == owner_txorigin1);\n	receiver.transfer(amount);\n}\n1000-function_definition-154-157", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=function_definition];
1016 [code="require (tx.origin == owner_txorigin1);", label="154_ require (tx.origin == owner_txorigin1);\n1016-expression_statement-155-155", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=expression_statement];
1025 [code="receiver.transfer(amount);", label="155_ receiver.transfer(amount);\n1025-expression_statement-156-156", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=expression_statement];
1032 [code="modifier onlyOwner() {\n        require(msg.sender == owner, \"onlyOwner\");\n        _;\n    }", label="157_ modifier onlyOwner() {\n        require(msg.sender == owner, \"onlyOwner\");\n        _;\n    }\n1032-expression_statement-158-161", method="", type_label=expression_statement];
1035 [code="require(msg.sender == owner, \"onlyOwner\");", label="158_ require(msg.sender == owner, \"onlyOwner\");\n1035-expression_statement-159-159", method="", type_label=expression_statement];
1047 [code="_;", label="159_ _;\n1047-expression_statement-160-160", method="", type_label=expression_statement];
1049 [code="modifier onlyEngineer() {\n        require(msg.sender == ENGINEER_ADDRESS, \"onlyEngineer\");\n        _;\n    }", label="161_ modifier onlyEngineer() {\n        require(msg.sender == ENGINEER_ADDRESS, \"onlyEngineer\");\n        _;\n    }\n1049-expression_statement-162-165", method="", type_label=expression_statement];
1052 [code="require(msg.sender == ENGINEER_ADDRESS, \"onlyEngineer\");", label="162_ require(msg.sender == ENGINEER_ADDRESS, \"onlyEngineer\");\n1052-expression_statement-163-163", method="", type_label=expression_statement];
1064 [code="_;", label="163_ _;\n1064-expression_statement-164-164", method="", type_label=expression_statement];
1066 [code="function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"cannot transfer ownership to address zero\");\n        owner = newOwner;\n    }", label="165_ function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"cannot transfer ownership to address zero\");\n        owner = newOwner;\n    }\n1066-function_definition-166-169", method="transferOwnership(address newOwner)", type_label=function_definition];
1073 [code=onlyOwner, label="165_ onlyOwner\n1073-expression_statement-166-166", method="transferOwnership(address newOwner)", type_label=expression_statement];
1076 [code="require(newOwner != address(0), \"cannot transfer ownership to address zero\");", label="166_ require(newOwner != address(0), \"cannot transfer ownership to address zero\");\n1076-expression_statement-167-167", method="transferOwnership(address newOwner)", type_label=expression_statement];
1088 [code="owner = newOwner;", label="167_ owner = newOwner;\n1088-expression_statement-168-168", method="transferOwnership(address newOwner)", type_label=expression_statement];
1092 [code="function withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2) public {\n        require(tx.origin == owner_txorigin2);\n        _recipient.transfer(address(this).balance);\n    }", label="169_ function withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2) public {\n        require(tx.origin == owner_txorigin2);\n        _recipient.transfer(address(this).balance);\n    }\n1092-function_definition-170-173", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=function_definition];
1104 [code="require(tx.origin == owner_txorigin2);", label="170_ require(tx.origin == owner_txorigin2);\n1104-expression_statement-171-171", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=expression_statement];
1113 [code="_recipient.transfer(address(this).balance);", label="171_ _recipient.transfer(address(this).balance);\n1113-expression_statement-172-172", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=expression_statement];
1124 [code="function getLevelByInvestAmount(uint256 investAmount) private pure returns (uint256 level) {\n        if (investAmount >= ONE_ETH.mul(11)) {\n            level = 3;\n        } else if (investAmount >= ONE_ETH.mul(6)) {\n            level = 2;\n        } else {\n            level = 1;\n        }\n    }", label="173_ function getLevelByInvestAmount(uint256 investAmount) private pure returns (uint256 level) {\n        if (investAmount >= ONE_ETH.mul(11)) {\n            level = 3;\n        } else if (investAmount >= ONE_ETH.mul(6)) {\n            level = 2;\n        } else {\n            level = 1;\n        }\n    }\n1124-function_definition-174-182", method="getLevelByInvestAmount(uint256 investAmount)", type_label=function_definition];
1138 [code="if (investAmount >= ONE_ETH.mul(11)) {\n            level = 3;\n        } else if (investAmount >= ONE_ETH.mul(6)) {\n            level = 2;\n        } else {\n            level = 1;\n        }", label="174_ if\n1138-if-175-181", method="getLevelByInvestAmount(uint256 investAmount)", type_label=if];
6006 [code="if (investAmount >= ONE_ETH.mul(6)) {\n            level = 2;\n        } else {\n            level = 1;\n        }", label="174_ end_if", method="getLevelByInvestAmount(uint256 investAmount)", type_label=end_if];
1148 [code="level = 3;", label="175_ level = 3;\n1148-expression_statement-176-176", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
1152 [code="if (investAmount >= ONE_ETH.mul(6)) {\n            level = 2;\n        } else {\n            level = 1;\n        }", label="176_ if\n1152-if-177-181", method="getLevelByInvestAmount(uint256 investAmount)", type_label=if];
1162 [code="level = 2;", label="177_ level = 2;\n1162-expression_statement-178-178", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
1167 [code="level = 1;", label="179_ level = 1;\n1167-expression_statement-180-180", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
1171 [code="function sendto_txorigin17(address payable receiver, uint amount,address owner_txorigin17) public {\n	require (tx.origin == owner_txorigin17);\n	receiver.transfer(amount);\n}", label="182_ function sendto_txorigin17(address payable receiver, uint amount,address owner_txorigin17) public {\n	require (tx.origin == owner_txorigin17);\n	receiver.transfer(amount);\n}\n1171-function_definition-183-186", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=function_definition];
1187 [code="require (tx.origin == owner_txorigin17);", label="183_ require (tx.origin == owner_txorigin17);\n1187-expression_statement-184-184", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=expression_statement];
1196 [code="receiver.transfer(amount);", label="184_ receiver.transfer(amount);\n1196-expression_statement-185-185", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=expression_statement];
1203 [code="function isInvestExpired(User memory user) private view returns (bool expired) {\n        expired = (user.currentInvestTime.add(user.currentInvestCycle.mul(ONE_DAY)) < now);\n    }", label="186_ function isInvestExpired(User memory user) private view returns (bool expired) {\n        expired = (user.currentInvestTime.add(user.currentInvestCycle.mul(ONE_DAY)) < now);\n    }\n1203-function_definition-187-189", method="isInvestExpired(User memory user)", type_label=function_definition];
1218 [code="expired = (user.currentInvestTime.add(user.currentInvestCycle.mul(ONE_DAY)) < now);", label="187_ expired = (user.currentInvestTime.add(user.currentInvestCycle.mul(ONE_DAY)) < now);\n1218-expression_statement-188-188", method="isInvestExpired(User memory user)", type_label=expression_statement];
1239 [code="function sendto_txorigin37(address payable receiver, uint amount,address owner_txorigin37) public {\n	require (tx.origin == owner_txorigin37);\n	receiver.transfer(amount);\n}", label="189_ function sendto_txorigin37(address payable receiver, uint amount,address owner_txorigin37) public {\n	require (tx.origin == owner_txorigin37);\n	receiver.transfer(amount);\n}\n1239-function_definition-190-193", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=function_definition];
1255 [code="require (tx.origin == owner_txorigin37);", label="190_ require (tx.origin == owner_txorigin37);\n1255-expression_statement-191-191", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=expression_statement];
1264 [code="receiver.transfer(amount);", label="191_ receiver.transfer(amount);\n1264-expression_statement-192-192", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=expression_statement];
1271 [code="function getAbortInvestAmount(User memory user) private view returns (uint256 amount) {\n        uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n        require(commissionDays >= 3, \"Invest time must >= 3days\");\n        uint256 lossRatio = 15;\n        if (commissionDays >= 60) {\n            lossRatio = 5;\n        } else if (commissionDays >= 30) {\n            lossRatio = 10;\n        }\n        amount = user.currentInvestAmount;\n        amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100));\n    }", label="193_ function getAbortInvestAmount(User memory user) private view returns (uint256 amount) {\n        uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n        require(commissionDays >= 3, \"Invest time must >= 3days\");\n        uint256 lossRatio = 15;\n        if (commissionDays >= 60) {\n            lossRatio = 5;\n        } else if (commissionDays >= 30) {\n            lossRatio = 10;\n        }\n        amount = user.currentInvestAmount;\n        amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100));\n    }\n1271-function_definition-194-205", method="getAbortInvestAmount(User memory user)", type_label=function_definition];
1286 [code="uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);", label="194_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n1286-new_variable-195-195", method="getAbortInvestAmount(User memory user)", type_label=new_variable];
1304 [code="require(commissionDays >= 3, \"Invest time must >= 3days\");", label="195_ require(commissionDays >= 3, \"Invest time must >= 3days\");\n1304-expression_statement-196-196", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1314 [code="uint256 lossRatio = 15;", label="196_ uint256 lossRatio = 15;\n1314-new_variable-197-197", method="getAbortInvestAmount(User memory user)", type_label=new_variable];
1320 [code="if (commissionDays >= 60) {\n            lossRatio = 5;\n        } else if (commissionDays >= 30) {\n            lossRatio = 10;\n        }", label="197_ if_commissionDays >= 60\n1320-if-198-202", method="getAbortInvestAmount(User memory user)", type_label=if];
6188 [code="if (commissionDays >= 30) {\n            lossRatio = 10;\n        }", label="197_ end_if", method="getAbortInvestAmount(User memory user)", type_label=end_if];
1325 [code="lossRatio = 5;", label="198_ lossRatio = 5;\n1325-expression_statement-199-199", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1329 [code="if (commissionDays >= 30) {\n            lossRatio = 10;\n        }", label="199_ if_commissionDays >= 30\n1329-if-200-202", method="getAbortInvestAmount(User memory user)", type_label=if];
1334 [code="lossRatio = 10;", label="200_ lossRatio = 10;\n1334-expression_statement-201-201", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1338 [code="amount = user.currentInvestAmount;", label="202_ amount = user.currentInvestAmount;\n1338-expression_statement-203-203", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1344 [code="amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100));", label="203_ amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100));\n1344-expression_statement-204-204", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1365 [code="function transferTo_txorigin3(address to, uint amount,address owner_txorigin3) public {\n  require(tx.origin == owner_txorigin3);\n  to.call.value(amount);\n}", label="205_ function transferTo_txorigin3(address to, uint amount,address owner_txorigin3) public {\n  require(tx.origin == owner_txorigin3);\n  to.call.value(amount);\n}\n1365-function_definition-206-209", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=function_definition];
1381 [code="require(tx.origin == owner_txorigin3);", label="206_ require(tx.origin == owner_txorigin3);\n1381-expression_statement-207-207", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=expression_statement];
1390 [code="to.call.value(amount);", label="207_ to.call.value(amount);\n1390-expression_statement-208-208", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=expression_statement];
1399 [code="function getStaticCommissionRatio(uint256 level, uint256 investCycle) private pure returns (uint256 ratio) {\n        if (level == 1) {\n            if (investCycle == 30) {\n                ratio = 7;\n            } else if(investCycle == 60) {\n                ratio = 8;\n            } else {\n                ratio = 9;\n            }\n        } else if (level == 2) {\n            if (investCycle == 30) {\n                ratio = 8;\n            } else if(investCycle == 60) {\n                ratio = 9;\n            } else {\n                ratio = 10;\n            }\n        } else {\n            if (investCycle == 30) {\n                ratio = 11;\n            } else if(investCycle == 60) {\n                ratio = 12;\n            } else {\n                ratio = 13;\n            }\n        }\n    }", label="209_ function getStaticCommissionRatio(uint256 level, uint256 investCycle) private pure returns (uint256 ratio) {\n        if (level == 1) {\n            if (investCycle == 30) {\n                ratio = 7;\n            } else if(investCycle == 60) {\n                ratio = 8;\n            } else {\n                ratio = 9;\n            }\n        } else if (level == 2) {\n            if (investCycle == 30) {\n                ratio = 8;\n            } else if(investCycle == 60) {\n                ratio = 9;\n            } else {\n                ratio = 10;\n            }\n        } else {\n            if (investCycle == 30) {\n                ratio = 11;\n            } else if(investCycle == 60) {\n                ratio = 12;\n            } else {\n                ratio = 13;\n            }\n        }\n    }\n1399-function_definition-210-236", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=function_definition];
1417 [code="if (level == 1) {\n            if (investCycle == 30) {\n                ratio = 7;\n            } else if(investCycle == 60) {\n                ratio = 8;\n            } else {\n                ratio = 9;\n            }\n        } else if (level == 2) {\n            if (investCycle == 30) {\n                ratio = 8;\n            } else if(investCycle == 60) {\n                ratio = 9;\n            } else {\n                ratio = 10;\n            }\n        } else {\n            if (investCycle == 30) {\n                ratio = 11;\n            } else if(investCycle == 60) {\n                ratio = 12;\n            } else {\n                ratio = 13;\n            }\n        }", label="210_ if_level == 1\n1417-if-211-235", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
6285 [code="if (level == 2) {\n            if (investCycle == 30) {\n                ratio = 8;\n            } else if(investCycle == 60) {\n                ratio = 9;\n            } else {\n                ratio = 10;\n            }\n        } else {\n            if (investCycle == 30) {\n                ratio = 11;\n            } else if(investCycle == 60) {\n                ratio = 12;\n            } else {\n                ratio = 13;\n            }\n        }", label="210_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1422 [code="if (investCycle == 30) {\n                ratio = 7;\n            } else if(investCycle == 60) {\n                ratio = 8;\n            } else {\n                ratio = 9;\n            }", label="211_ if_investCycle == 30\n1422-if-212-218", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
6290 [code="if(investCycle == 60) {\n                ratio = 8;\n            } else {\n                ratio = 9;\n            }", label="211_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1427 [code="ratio = 7;", label="212_ ratio = 7;\n1427-expression_statement-213-213", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1431 [code="if(investCycle == 60) {\n                ratio = 8;\n            } else {\n                ratio = 9;\n            }", label="213_ if_investCycle == 60\n1431-if-214-218", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1436 [code="ratio = 8;", label="214_ ratio = 8;\n1436-expression_statement-215-215", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1441 [code="ratio = 9;", label="216_ ratio = 9;\n1441-expression_statement-217-217", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1445 [code="if (level == 2) {\n            if (investCycle == 30) {\n                ratio = 8;\n            } else if(investCycle == 60) {\n                ratio = 9;\n            } else {\n                ratio = 10;\n            }\n        } else {\n            if (investCycle == 30) {\n                ratio = 11;\n            } else if(investCycle == 60) {\n                ratio = 12;\n            } else {\n                ratio = 13;\n            }\n        }", label="218_ if_level == 2\n1445-if-219-235", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1450 [code="if (investCycle == 30) {\n                ratio = 8;\n            } else if(investCycle == 60) {\n                ratio = 9;\n            } else {\n                ratio = 10;\n            }", label="219_ if_investCycle == 30\n1450-if-220-226", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
6318 [code="if(investCycle == 60) {\n                ratio = 9;\n            } else {\n                ratio = 10;\n            }", label="219_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1455 [code="ratio = 8;", label="220_ ratio = 8;\n1455-expression_statement-221-221", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1459 [code="if(investCycle == 60) {\n                ratio = 9;\n            } else {\n                ratio = 10;\n            }", label="221_ if_investCycle == 60\n1459-if-222-226", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1464 [code="ratio = 9;", label="222_ ratio = 9;\n1464-expression_statement-223-223", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1469 [code="ratio = 10;", label="224_ ratio = 10;\n1469-expression_statement-225-225", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1474 [code="if (investCycle == 30) {\n                ratio = 11;\n            } else if(investCycle == 60) {\n                ratio = 12;\n            } else {\n                ratio = 13;\n            }", label="227_ if_investCycle == 30\n1474-if-228-234", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
6342 [code="if(investCycle == 60) {\n                ratio = 12;\n            } else {\n                ratio = 13;\n            }", label="227_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1479 [code="ratio = 11;", label="228_ ratio = 11;\n1479-expression_statement-229-229", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1483 [code="if(investCycle == 60) {\n                ratio = 12;\n            } else {\n                ratio = 13;\n            }", label="229_ if_investCycle == 60\n1483-if-230-234", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1488 [code="ratio = 12;", label="230_ ratio = 12;\n1488-expression_statement-231-231", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1493 [code="ratio = 13;", label="232_ ratio = 13;\n1493-expression_statement-233-233", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1497 [code="function sendto_txorigin9(address payable receiver, uint amount,address owner_txorigin9) public {\n	require (tx.origin == owner_txorigin9);\n	receiver.transfer(amount);\n}", label="236_ function sendto_txorigin9(address payable receiver, uint amount,address owner_txorigin9) public {\n	require (tx.origin == owner_txorigin9);\n	receiver.transfer(amount);\n}\n1497-function_definition-237-240", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=function_definition];
1513 [code="require (tx.origin == owner_txorigin9);", label="237_ require (tx.origin == owner_txorigin9);\n1513-expression_statement-238-238", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
1522 [code="receiver.transfer(amount);", label="238_ receiver.transfer(amount);\n1522-expression_statement-239-239", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
1529 [code="function getDynamicCommissionRatio(User memory user, uint256 depth) private pure returns (uint256 ratio) {\n        if (user.currentlevel == 1) {\n            if (depth == 1) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else if (user.currentlevel == 2) {\n            if (depth == 1) {\n                ratio = 70;\n            } else if (depth == 2) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else {\n            if (depth == 1) {\n                ratio = 100;\n            } else if (depth == 2) {\n                ratio = 70;\n            } else if (depth == 3) {\n                ratio = 50;\n            } else if (depth >= 4 && depth <= 10) {\n                ratio = 10;\n            } else if (depth >= 11 && depth <= 20) {\n                ratio = 5;\n            } else {\n                ratio = 1;\n            }\n        }\n    }", label="240_ function getDynamicCommissionRatio(User memory user, uint256 depth) private pure returns (uint256 ratio) {\n        if (user.currentlevel == 1) {\n            if (depth == 1) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else if (user.currentlevel == 2) {\n            if (depth == 1) {\n                ratio = 70;\n            } else if (depth == 2) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else {\n            if (depth == 1) {\n                ratio = 100;\n            } else if (depth == 2) {\n                ratio = 70;\n            } else if (depth == 3) {\n                ratio = 50;\n            } else if (depth >= 4 && depth <= 10) {\n                ratio = 10;\n            } else if (depth >= 11 && depth <= 20) {\n                ratio = 5;\n            } else {\n                ratio = 1;\n            }\n        }\n    }\n1529-function_definition-241-271", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=function_definition];
1548 [code="if (user.currentlevel == 1) {\n            if (depth == 1) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else if (user.currentlevel == 2) {\n            if (depth == 1) {\n                ratio = 70;\n            } else if (depth == 2) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else {\n            if (depth == 1) {\n                ratio = 100;\n            } else if (depth == 2) {\n                ratio = 70;\n            } else if (depth == 3) {\n                ratio = 50;\n            } else if (depth >= 4 && depth <= 10) {\n                ratio = 10;\n            } else if (depth >= 11 && depth <= 20) {\n                ratio = 5;\n            } else {\n                ratio = 1;\n            }\n        }", label="241_ if_user.currentlevel == 1\n1548-if-242-270", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
6416 [code="if (user.currentlevel == 2) {\n            if (depth == 1) {\n                ratio = 70;\n            } else if (depth == 2) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else {\n            if (depth == 1) {\n                ratio = 100;\n            } else if (depth == 2) {\n                ratio = 70;\n            } else if (depth == 3) {\n                ratio = 50;\n            } else if (depth >= 4 && depth <= 10) {\n                ratio = 10;\n            } else if (depth >= 11 && depth <= 20) {\n                ratio = 5;\n            } else {\n                ratio = 1;\n            }\n        }", label="241_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1555 [code="if (depth == 1) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }", label="242_ if_depth == 1\n1555-if-243-247", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
6423 [code="if (depth == 1) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }", label="242_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1560 [code="ratio = 50;", label="243_ ratio = 50;\n1560-expression_statement-244-244", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1565 [code="ratio = 0;", label="245_ ratio = 0;\n1565-expression_statement-246-246", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1569 [code="if (user.currentlevel == 2) {\n            if (depth == 1) {\n                ratio = 70;\n            } else if (depth == 2) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else {\n            if (depth == 1) {\n                ratio = 100;\n            } else if (depth == 2) {\n                ratio = 70;\n            } else if (depth == 3) {\n                ratio = 50;\n            } else if (depth >= 4 && depth <= 10) {\n                ratio = 10;\n            } else if (depth >= 11 && depth <= 20) {\n                ratio = 5;\n            } else {\n                ratio = 1;\n            }\n        }", label="247_ if_user.currentlevel == 2\n1569-if-248-270", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1576 [code="if (depth == 1) {\n                ratio = 70;\n            } else if (depth == 2) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }", label="248_ if_depth == 1\n1576-if-249-255", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
6444 [code="if (depth == 2) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }", label="248_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1581 [code="ratio = 70;", label="249_ ratio = 70;\n1581-expression_statement-250-250", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1585 [code="if (depth == 2) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }", label="250_ if_depth == 2\n1585-if-251-255", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1590 [code="ratio = 50;", label="251_ ratio = 50;\n1590-expression_statement-252-252", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1595 [code="ratio = 0;", label="253_ ratio = 0;\n1595-expression_statement-254-254", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1600 [code="if (depth == 1) {\n                ratio = 100;\n            } else if (depth == 2) {\n                ratio = 70;\n            } else if (depth == 3) {\n                ratio = 50;\n            } else if (depth >= 4 && depth <= 10) {\n                ratio = 10;\n            } else if (depth >= 11 && depth <= 20) {\n                ratio = 5;\n            } else {\n                ratio = 1;\n            }", label="256_ if_depth == 1\n1600-if-257-269", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
6468 [code="if (depth >= 11 && depth <= 20) {\n                ratio = 5;\n            } else {\n                ratio = 1;\n            }", label="256_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1605 [code="ratio = 100;", label="257_ ratio = 100;\n1605-expression_statement-258-258", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1609 [code="if (depth == 2) {\n                ratio = 70;\n            } else if (depth == 3) {\n                ratio = 50;\n            } else if (depth >= 4 && depth <= 10) {\n                ratio = 10;\n            } else if (depth >= 11 && depth <= 20) {\n                ratio = 5;\n            } else {\n                ratio = 1;\n            }", label="258_ if_depth == 2\n1609-if-259-269", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1614 [code="ratio = 70;", label="259_ ratio = 70;\n1614-expression_statement-260-260", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1618 [code="if (depth == 3) {\n                ratio = 50;\n            } else if (depth >= 4 && depth <= 10) {\n                ratio = 10;\n            } else if (depth >= 11 && depth <= 20) {\n                ratio = 5;\n            } else {\n                ratio = 1;\n            }", label="260_ if_depth == 3\n1618-if-261-269", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1623 [code="ratio = 50;", label="261_ ratio = 50;\n1623-expression_statement-262-262", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1627 [code="if (depth >= 4 && depth <= 10) {\n                ratio = 10;\n            } else if (depth >= 11 && depth <= 20) {\n                ratio = 5;\n            } else {\n                ratio = 1;\n            }", label="262_ if_depth >= 4 && depth <= 10\n1627-if-263-269", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1636 [code="ratio = 10;", label="263_ ratio = 10;\n1636-expression_statement-264-264", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1640 [code="if (depth >= 11 && depth <= 20) {\n                ratio = 5;\n            } else {\n                ratio = 1;\n            }", label="264_ if_depth >= 11 && depth <= 20\n1640-if-265-269", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1649 [code="ratio = 5;", label="265_ ratio = 5;\n1649-expression_statement-266-266", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1654 [code="ratio = 1;", label="267_ ratio = 1;\n1654-expression_statement-268-268", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1658 [code="function sendto_txorigin25(address payable receiver, uint amount,address owner_txorigin25) public {\n	require (tx.origin == owner_txorigin25);\n	receiver.transfer(amount);\n}", label="271_ function sendto_txorigin25(address payable receiver, uint amount,address owner_txorigin25) public {\n	require (tx.origin == owner_txorigin25);\n	receiver.transfer(amount);\n}\n1658-function_definition-272-275", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=function_definition];
1674 [code="require (tx.origin == owner_txorigin25);", label="272_ require (tx.origin == owner_txorigin25);\n1674-expression_statement-273-273", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
1683 [code="receiver.transfer(amount);", label="273_ receiver.transfer(amount);\n1683-expression_statement-274-274", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
1690 [code="function getAvaliableStaticCommissionAmount(User memory user) private view returns (uint256 amount) {\n        if (user.currentInvestAmount == 0) {\n            amount = 0;\n        } else {\n            uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n            if (commissionDays > user.currentInvestCycle) {\n                commissionDays = user.currentInvestCycle;\n            }\n            amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n            amount = amount.div(1000);\n            amount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n        }\n    }", label="275_ function getAvaliableStaticCommissionAmount(User memory user) private view returns (uint256 amount) {\n        if (user.currentInvestAmount == 0) {\n            amount = 0;\n        } else {\n            uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n            if (commissionDays > user.currentInvestCycle) {\n                commissionDays = user.currentInvestCycle;\n            }\n            amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n            amount = amount.div(1000);\n            amount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n        }\n    }\n1690-function_definition-276-288", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=function_definition];
1705 [code="if (user.currentInvestAmount == 0) {\n            amount = 0;\n        } else {\n            uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n            if (commissionDays > user.currentInvestCycle) {\n                commissionDays = user.currentInvestCycle;\n            }\n            amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n            amount = amount.div(1000);\n            amount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n        }", label="276_ if_user.currentInvestAmount == 0\n1705-if-277-287", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=if];
6573 [code="if (user.currentInvestAmount == 0) {\n            amount = 0;\n        } else {\n            uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n            if (commissionDays > user.currentInvestCycle) {\n                commissionDays = user.currentInvestCycle;\n            }\n            amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n            amount = amount.div(1000);\n            amount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n        }", label="276_ end_if", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=end_if];
1712 [code="amount = 0;", label="277_ amount = 0;\n1712-expression_statement-278-278", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1717 [code="uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);", label="279_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n1717-new_variable-280-280", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=new_variable];
1735 [code="if (commissionDays > user.currentInvestCycle) {\n                commissionDays = user.currentInvestCycle;\n            }", label="280_ if_commissionDays > user.currentInvestCycle\n1735-if-281-283", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=if];
6603 [code="if (commissionDays > user.currentInvestCycle) {\n                commissionDays = user.currentInvestCycle;\n            }", label="280_ end_if", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=end_if];
1742 [code="commissionDays = user.currentInvestCycle;", label="281_ commissionDays = user.currentInvestCycle;\n1742-expression_statement-282-282", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1748 [code="amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);", label="283_ amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n1748-expression_statement-284-284", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1766 [code="amount = amount.div(1000);", label="284_ amount = amount.div(1000);\n1766-expression_statement-285-285", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1775 [code="amount = amount.sub(user.currentStaticCommissionWithdrawAmount);", label="285_ amount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n1775-expression_statement-286-286", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1786 [code="function transferTo_txorigin19(address to, uint amount,address owner_txorigin19) public {\n  require(tx.origin == owner_txorigin19);\n  to.call.value(amount);\n}", label="288_ function transferTo_txorigin19(address to, uint amount,address owner_txorigin19) public {\n  require(tx.origin == owner_txorigin19);\n  to.call.value(amount);\n}\n1786-function_definition-289-292", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=function_definition];
1802 [code="require(tx.origin == owner_txorigin19);", label="289_ require(tx.origin == owner_txorigin19);\n1802-expression_statement-290-290", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
1811 [code="to.call.value(amount);", label="290_ to.call.value(amount);\n1811-expression_statement-291-291", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
1820 [code="function addInvestRecord(address userAddress, uint256 time, uint256 amount, uint256 cycle) private {\n        InvestRecord[9] storage records = investRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            InvestRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = InvestRecord(time, amount, cycle);\n    }", label="292_ function addInvestRecord(address userAddress, uint256 time, uint256 amount, uint256 cycle) private {\n        InvestRecord[9] storage records = investRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            InvestRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = InvestRecord(time, amount, cycle);\n    }\n1820-function_definition-293-300", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=function_definition];
1840 [code="InvestRecord[9] storage records = investRecordMapping[userAddress];", label="293_ InvestRecord[9] storage records = investRecordMapping[userAddress];\n1840-new_variable-294-294", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=new_variable];
1851 [code="for (uint256 i = 8; i > 0; --i) {\n            InvestRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }", label="294_ for(i > 0;;--i)\n1851-for-295-298", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=for];
6719 [code="for (uint256 i = 8; i > 0; --i) {\n            InvestRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }", label="294_ end_loop", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=end_loop];
1862 [code="--i", label="294_ --i\n1862-expression_statement-295-295", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
1865 [code="InvestRecord memory prevRecord = records[i - 1];", label="295_ InvestRecord memory prevRecord = records[i - 1];\n1865-new_variable-296-296", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=new_variable];
1876 [code="records[i] = prevRecord;", label="296_ records[i] = prevRecord;\n1876-expression_statement-297-297", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
1882 [code="records[0] = InvestRecord(time, amount, cycle);", label="298_ records[0] = InvestRecord(time, amount, cycle);\n1882-expression_statement-299-299", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
1895 [code="function withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26) public {\n        require(tx.origin == owner_txorigin26);\n        _recipient.transfer(address(this).balance);\n    }", label="300_ function withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26) public {\n        require(tx.origin == owner_txorigin26);\n        _recipient.transfer(address(this).balance);\n    }\n1895-function_definition-301-304", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=function_definition];
1907 [code="require(tx.origin == owner_txorigin26);", label="301_ require(tx.origin == owner_txorigin26);\n1907-expression_statement-302-302", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
1916 [code="_recipient.transfer(address(this).balance);", label="302_ _recipient.transfer(address(this).balance);\n1916-expression_statement-303-303", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
1927 [code="function addStaticCommissionRecord(address userAddress, uint256 time, uint256 amount) private {\n        CommissionRecord[9] storage records = staticCommissionRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = CommissionRecord(time, amount);\n    }", label="304_ function addStaticCommissionRecord(address userAddress, uint256 time, uint256 amount) private {\n        CommissionRecord[9] storage records = staticCommissionRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = CommissionRecord(time, amount);\n    }\n1927-function_definition-305-312", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=function_definition];
1943 [code="CommissionRecord[9] storage records = staticCommissionRecordMapping[userAddress];", label="305_ CommissionRecord[9] storage records = staticCommissionRecordMapping[userAddress];\n1943-new_variable-306-306", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
1954 [code="for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }", label="306_ for(i > 0;;--i)\n1954-for-307-310", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=for];
6822 [code="for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }", label="306_ end_loop", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=end_loop];
1965 [code="--i", label="306_ --i\n1965-expression_statement-307-307", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
1968 [code="CommissionRecord memory prevRecord = records[i - 1];", label="307_ CommissionRecord memory prevRecord = records[i - 1];\n1968-new_variable-308-308", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
1979 [code="records[i] = prevRecord;", label="308_ records[i] = prevRecord;\n1979-expression_statement-309-309", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
1985 [code="records[0] = CommissionRecord(time, amount);", label="310_ records[0] = CommissionRecord(time, amount);\n1985-expression_statement-311-311", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
1996 [code="function bug_txorigin20(address owner_txorigin20) public{\n        require(tx.origin == owner_txorigin20);\n    }", label="312_ function bug_txorigin20(address owner_txorigin20) public{\n        require(tx.origin == owner_txorigin20);\n    }\n1996-function_definition-313-315", method="bug_txorigin20(address owner_txorigin20)", type_label=function_definition];
2004 [code="require(tx.origin == owner_txorigin20);", label="313_ require(tx.origin == owner_txorigin20);\n2004-expression_statement-314-314", method="bug_txorigin20(address owner_txorigin20)", type_label=expression_statement];
2013 [code="function addDynamicCommissionRecord(address userAddress, uint256 time, uint256 amount) private {\n        CommissionRecord[9] storage records = dynamicCommissionRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = CommissionRecord(time, amount);\n    }", label="315_ function addDynamicCommissionRecord(address userAddress, uint256 time, uint256 amount) private {\n        CommissionRecord[9] storage records = dynamicCommissionRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = CommissionRecord(time, amount);\n    }\n2013-function_definition-316-323", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=function_definition];
2029 [code="CommissionRecord[9] storage records = dynamicCommissionRecordMapping[userAddress];", label="316_ CommissionRecord[9] storage records = dynamicCommissionRecordMapping[userAddress];\n2029-new_variable-317-317", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2040 [code="for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }", label="317_ for(i > 0;;--i)\n2040-for-318-321", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=for];
6908 [code="for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }", label="317_ end_loop", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=end_loop];
2051 [code="--i", label="317_ --i\n2051-expression_statement-318-318", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2054 [code="CommissionRecord memory prevRecord = records[i - 1];", label="318_ CommissionRecord memory prevRecord = records[i - 1];\n2054-new_variable-319-319", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2065 [code="records[i] = prevRecord;", label="319_ records[i] = prevRecord;\n2065-expression_statement-320-320", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2071 [code="records[0] = CommissionRecord(time, amount);", label="321_ records[0] = CommissionRecord(time, amount);\n2071-expression_statement-322-322", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2082 [code="function bug_txorigin32(  address owner_txorigin32) public{\n        require(tx.origin == owner_txorigin32);\n    }", label="323_ function bug_txorigin32(  address owner_txorigin32) public{\n        require(tx.origin == owner_txorigin32);\n    }\n2082-function_definition-324-326", method="bug_txorigin32(address owner_txorigin32)", type_label=function_definition];
2090 [code="require(tx.origin == owner_txorigin32);", label="324_ require(tx.origin == owner_txorigin32);\n2090-expression_statement-325-325", method="bug_txorigin32(address owner_txorigin32)", type_label=expression_statement];
2099 [code="function invest(address sponsorAddress, uint256 investCycle) external payable {\n        User storage sponsor = userMapping[sponsorAddress];\n        require(sponsor.totalInvestCount > 0, \"Invalid sponsor address\");\n        require(investCycle == 30 || investCycle == 60 || investCycle == 90, \"Invalid invest cycle\");\n        uint256 investAmount = msg.value.div(ONE_ETH);\n        investAmount = investAmount.mul(ONE_ETH);\n        require(investAmount == msg.value, \"Invest amount is not integer\");\n        require(investAmount >= ONE_ETH.mul(1) && investAmount <= ONE_ETH.mul(15), \"Invalid invest amount\");\n        User memory user = userMapping[msg.sender];\n        uint256 level = getLevelByInvestAmount(investAmount);\n        if (user.totalInvestCount > 0) {\n            require(user.sponsorAddress == sponsorAddress, \"sponsor address is inconsistent\");\n            require(user.currentInvestAmount == 0, \"Dumplicate invest\");\n            require(user.currentInvestTime == 0, \"Invalid state\");\n            require(user.currentInvestCycle == 0, \"Invalid state\");\n            require(user.currentlevel == 0, \"Invalid state\");\n            require(user.currentStaticCommissionRatio == 0, \"Invalid state\");\n            require(user.currentStaticCommissionWithdrawAmount == 0, \"Invalid state\");\n            user.totalInvestCount = user.totalInvestCount.add(1);\n            user.totalInvestAmount = user.totalInvestAmount.add(investAmount);\n            user.currentInvestTime = now;\n            user.currentInvestAmount = investAmount;\n            user.currentInvestCycle = investCycle;\n            user.currentlevel = level;\n            user.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);\n            userMapping[msg.sender] = user;\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        } else {\n            userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount,\n                                           now, investAmount, investCycle, level,\n                                           getStaticCommissionRatio(level, investCycle),\n                                           0, 0, 0, 0, sponsorAddress);\n            addressMapping[totalUserCount] = msg.sender;\n            totalUserCount = totalUserCount.add(1);\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.downlineCount = sponsor.downlineCount.add(1);\n                if (addressWalker == sponsorAddress) {\n                    sponsor.nodeCount = sponsor.nodeCount.add(1);\n                }\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        }\n        addInvestRecord(msg.sender, now, investAmount, investCycle);\n        totalInvestCount = totalInvestCount.add(1);\n        totalInvestAmount = totalInvestAmount.add(investAmount);\n        engineerFunds = engineerFunds.add(investAmount.div(50));\n        operatorFunds = operatorFunds.add(investAmount.mul(3).div(100));\n    }", label="326_ function invest(address sponsorAddress, uint256 investCycle) external payable {\n        User storage sponsor = userMapping[sponsorAddress];\n        require(sponsor.totalInvestCount > 0, \"Invalid sponsor address\");\n        require(investCycle == 30 || investCycle == 60 || investCycle == 90, \"Invalid invest cycle\");\n        uint256 investAmount = msg.value.div(ONE_ETH);\n        investAmount = investAmount.mul(ONE_ETH);\n        require(investAmount == msg.value, \"Invest amount is not integer\");\n        require(investAmount >= ONE_ETH.mul(1) && investAmount <= ONE_ETH.mul(15), \"Invalid invest amount\");\n        User memory user = userMapping[msg.sender];\n        uint256 level = getLevelByInvestAmount(investAmount);\n        if (user.totalInvestCount > 0) {\n            require(user.sponsorAddress == sponsorAddress, \"sponsor address is inconsistent\");\n            require(user.currentInvestAmount == 0, \"Dumplicate invest\");\n            require(user.currentInvestTime == 0, \"Invalid state\");\n            require(user.currentInvestCycle == 0, \"Invalid state\");\n            require(user.currentlevel == 0, \"Invalid state\");\n            require(user.currentStaticCommissionRatio == 0, \"Invalid state\");\n            require(user.currentStaticCommissionWithdrawAmount == 0, \"Invalid state\");\n            user.totalInvestCount = user.totalInvestCount.add(1);\n            user.totalInvestAmount = user.totalInvestAmount.add(investAmount);\n            user.currentInvestTime = now;\n            user.currentInvestAmount = investAmount;\n            user.currentInvestCycle = investCycle;\n            user.currentlevel = level;\n            user.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);\n            userMapping[msg.sender] = user;\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        } else {\n            userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount,\n                                           now, investAmount, investCycle, level,\n                                           getStaticCommissionRatio(level, investCycle),\n                                           0, 0, 0, 0, sponsorAddress);\n            addressMapping[totalUserCount] = msg.sender;\n            totalUserCount = totalUserCount.add(1);\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.downlineCount = sponsor.downlineCount.add(1);\n                if (addressWalker == sponsorAddress) {\n                    sponsor.nodeCount = sponsor.nodeCount.add(1);\n                }\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        }\n        addInvestRecord(msg.sender, now, investAmount, investCycle);\n        totalInvestCount = totalInvestCount.add(1);\n        totalInvestAmount = totalInvestAmount.add(investAmount);\n        engineerFunds = engineerFunds.add(investAmount.div(50));\n        operatorFunds = operatorFunds.add(investAmount.mul(3).div(100));\n    }\n2099-function_definition-327-382", method="invest(address sponsorAddress,uint256 investCycle)", type_label=function_definition];
2112 [code="User storage sponsor = userMapping[sponsorAddress];", label="327_ User storage sponsor = userMapping[sponsorAddress];\n2112-new_variable-328-328", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2121 [code="require(sponsor.totalInvestCount > 0, \"Invalid sponsor address\");", label="328_ require(sponsor.totalInvestCount > 0, \"Invalid sponsor address\");\n2121-expression_statement-329-329", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2133 [code="require(investCycle == 30 || investCycle == 60 || investCycle == 90, \"Invalid invest cycle\");", label="329_ require(investCycle == 30 || investCycle == 60 || investCycle == 90, \"Invalid invest cycle\");\n2133-expression_statement-330-330", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2151 [code="uint256 investAmount = msg.value.div(ONE_ETH);", label="330_ uint256 investAmount = msg.value.div(ONE_ETH);\n2151-new_variable-331-331", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2164 [code="investAmount = investAmount.mul(ONE_ETH);", label="331_ investAmount = investAmount.mul(ONE_ETH);\n2164-expression_statement-332-332", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2173 [code="require(investAmount == msg.value, \"Invest amount is not integer\");", label="332_ require(investAmount == msg.value, \"Invest amount is not integer\");\n2173-expression_statement-333-333", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2185 [code="require(investAmount >= ONE_ETH.mul(1) && investAmount <= ONE_ETH.mul(15), \"Invalid invest amount\");", label="333_ require(investAmount >= ONE_ETH.mul(1) && investAmount <= ONE_ETH.mul(15), \"Invalid invest amount\");\n2185-expression_statement-334-334", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2209 [code="User memory user = userMapping[msg.sender];", label="334_ User memory user = userMapping[msg.sender];\n2209-new_variable-335-335", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2220 [code="uint256 level = getLevelByInvestAmount(investAmount);", label="335_ uint256 level = getLevelByInvestAmount(investAmount);\n2220-new_variable-336-336", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2229 [code="if (user.totalInvestCount > 0) {\n            require(user.sponsorAddress == sponsorAddress, \"sponsor address is inconsistent\");\n            require(user.currentInvestAmount == 0, \"Dumplicate invest\");\n            require(user.currentInvestTime == 0, \"Invalid state\");\n            require(user.currentInvestCycle == 0, \"Invalid state\");\n            require(user.currentlevel == 0, \"Invalid state\");\n            require(user.currentStaticCommissionRatio == 0, \"Invalid state\");\n            require(user.currentStaticCommissionWithdrawAmount == 0, \"Invalid state\");\n            user.totalInvestCount = user.totalInvestCount.add(1);\n            user.totalInvestAmount = user.totalInvestAmount.add(investAmount);\n            user.currentInvestTime = now;\n            user.currentInvestAmount = investAmount;\n            user.currentInvestCycle = investCycle;\n            user.currentlevel = level;\n            user.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);\n            userMapping[msg.sender] = user;\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        } else {\n            userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount,\n                                           now, investAmount, investCycle, level,\n                                           getStaticCommissionRatio(level, investCycle),\n                                           0, 0, 0, 0, sponsorAddress);\n            addressMapping[totalUserCount] = msg.sender;\n            totalUserCount = totalUserCount.add(1);\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.downlineCount = sponsor.downlineCount.add(1);\n                if (addressWalker == sponsorAddress) {\n                    sponsor.nodeCount = sponsor.nodeCount.add(1);\n                }\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        }", label="336_ if_user.totalInvestCount > 0\n2229-if-337-376", method="invest(address sponsorAddress,uint256 investCycle)", type_label=if];
7097 [code="if (user.totalInvestCount > 0) {\n            require(user.sponsorAddress == sponsorAddress, \"sponsor address is inconsistent\");\n            require(user.currentInvestAmount == 0, \"Dumplicate invest\");\n            require(user.currentInvestTime == 0, \"Invalid state\");\n            require(user.currentInvestCycle == 0, \"Invalid state\");\n            require(user.currentlevel == 0, \"Invalid state\");\n            require(user.currentStaticCommissionRatio == 0, \"Invalid state\");\n            require(user.currentStaticCommissionWithdrawAmount == 0, \"Invalid state\");\n            user.totalInvestCount = user.totalInvestCount.add(1);\n            user.totalInvestAmount = user.totalInvestAmount.add(investAmount);\n            user.currentInvestTime = now;\n            user.currentInvestAmount = investAmount;\n            user.currentInvestCycle = investCycle;\n            user.currentlevel = level;\n            user.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);\n            userMapping[msg.sender] = user;\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        } else {\n            userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount,\n                                           now, investAmount, investCycle, level,\n                                           getStaticCommissionRatio(level, investCycle),\n                                           0, 0, 0, 0, sponsorAddress);\n            addressMapping[totalUserCount] = msg.sender;\n            totalUserCount = totalUserCount.add(1);\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.downlineCount = sponsor.downlineCount.add(1);\n                if (addressWalker == sponsorAddress) {\n                    sponsor.nodeCount = sponsor.nodeCount.add(1);\n                }\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        }", label="336_ end_if", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_if];
2236 [code="require(user.sponsorAddress == sponsorAddress, \"sponsor address is inconsistent\");", label="337_ require(user.sponsorAddress == sponsorAddress, \"sponsor address is inconsistent\");\n2236-expression_statement-338-338", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2248 [code="require(user.currentInvestAmount == 0, \"Dumplicate invest\");", label="338_ require(user.currentInvestAmount == 0, \"Dumplicate invest\");\n2248-expression_statement-339-339", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2260 [code="require(user.currentInvestTime == 0, \"Invalid state\");", label="339_ require(user.currentInvestTime == 0, \"Invalid state\");\n2260-expression_statement-340-340", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2272 [code="require(user.currentInvestCycle == 0, \"Invalid state\");", label="340_ require(user.currentInvestCycle == 0, \"Invalid state\");\n2272-expression_statement-341-341", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2284 [code="require(user.currentlevel == 0, \"Invalid state\");", label="341_ require(user.currentlevel == 0, \"Invalid state\");\n2284-expression_statement-342-342", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2296 [code="require(user.currentStaticCommissionRatio == 0, \"Invalid state\");", label="342_ require(user.currentStaticCommissionRatio == 0, \"Invalid state\");\n2296-expression_statement-343-343", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2308 [code="require(user.currentStaticCommissionWithdrawAmount == 0, \"Invalid state\");", label="343_ require(user.currentStaticCommissionWithdrawAmount == 0, \"Invalid state\");\n2308-expression_statement-344-344", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2320 [code="user.totalInvestCount = user.totalInvestCount.add(1);", label="344_ user.totalInvestCount = user.totalInvestCount.add(1);\n2320-expression_statement-345-345", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2333 [code="user.totalInvestAmount = user.totalInvestAmount.add(investAmount);", label="345_ user.totalInvestAmount = user.totalInvestAmount.add(investAmount);\n2333-expression_statement-346-346", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2346 [code="user.currentInvestTime = now;", label="346_ user.currentInvestTime = now;\n2346-expression_statement-347-347", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2352 [code="user.currentInvestAmount = investAmount;", label="347_ user.currentInvestAmount = investAmount;\n2352-expression_statement-348-348", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2358 [code="user.currentInvestCycle = investCycle;", label="348_ user.currentInvestCycle = investCycle;\n2358-expression_statement-349-349", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2364 [code="user.currentlevel = level;", label="349_ user.currentlevel = level;\n2364-expression_statement-350-350", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2370 [code="user.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);", label="350_ user.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);\n2370-expression_statement-351-351", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2381 [code="userMapping[msg.sender] = user;", label="351_ userMapping[msg.sender] = user;\n2381-expression_statement-352-352", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2389 [code="address addressWalker = sponsorAddress;", label="352_ address addressWalker = sponsorAddress;\n2389-new_variable-353-353", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2395 [code="while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }", label="353_ while\n2395-while-354-358", method="invest(address sponsorAddress,uint256 investCycle)", type_label=while];
7263 [code="while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }", label="353_ end_loop", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_loop];
2400 [code="sponsor = userMapping[addressWalker];", label="354_ sponsor = userMapping[addressWalker];\n2400-expression_statement-355-355", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2406 [code="sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);", label="355_ sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n2406-expression_statement-356-356", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2419 [code="addressWalker = sponsor.sponsorAddress;", label="356_ addressWalker = sponsor.sponsorAddress;\n2419-expression_statement-357-357", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2426 [code="userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount,\n                                           now, investAmount, investCycle, level,\n                                           getStaticCommissionRatio(level, investCycle),\n                                           0, 0, 0, 0, sponsorAddress);", label="359_ userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount,\n                                           now, investAmount, investCycle, level,\n                                           getStaticCommissionRatio(level, investCycle),\n                                           0, 0, 0, 0, sponsorAddress);\n2426-expression_statement-360-363", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2476 [code="addressMapping[totalUserCount] = msg.sender;", label="363_ addressMapping[totalUserCount] = msg.sender;\n2476-expression_statement-364-364", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2484 [code="totalUserCount = totalUserCount.add(1);", label="364_ totalUserCount = totalUserCount.add(1);\n2484-expression_statement-365-365", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2493 [code="address addressWalker = sponsorAddress;", label="365_ address addressWalker = sponsorAddress;\n2493-new_variable-366-366", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2499 [code="while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.downlineCount = sponsor.downlineCount.add(1);\n                if (addressWalker == sponsorAddress) {\n                    sponsor.nodeCount = sponsor.nodeCount.add(1);\n                }\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }", label="366_ while\n2499-while-367-375", method="invest(address sponsorAddress,uint256 investCycle)", type_label=while];
7367 [code="while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.downlineCount = sponsor.downlineCount.add(1);\n                if (addressWalker == sponsorAddress) {\n                    sponsor.nodeCount = sponsor.nodeCount.add(1);\n                }\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }", label="366_ end_loop", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_loop];
2504 [code="sponsor = userMapping[addressWalker];", label="367_ sponsor = userMapping[addressWalker];\n2504-expression_statement-368-368", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2510 [code="sponsor.downlineCount = sponsor.downlineCount.add(1);", label="368_ sponsor.downlineCount = sponsor.downlineCount.add(1);\n2510-expression_statement-369-369", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2523 [code="if (addressWalker == sponsorAddress) {\n                    sponsor.nodeCount = sponsor.nodeCount.add(1);\n                }", label="369_ if_addressWalker == sponsorAddress\n2523-if-370-372", method="invest(address sponsorAddress,uint256 investCycle)", type_label=if];
7391 [code="if (addressWalker == sponsorAddress) {\n                    sponsor.nodeCount = sponsor.nodeCount.add(1);\n                }", label="369_ end_if", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_if];
2528 [code="sponsor.nodeCount = sponsor.nodeCount.add(1);", label="370_ sponsor.nodeCount = sponsor.nodeCount.add(1);\n2528-expression_statement-371-371", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2541 [code="sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);", label="372_ sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n2541-expression_statement-373-373", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2554 [code="addressWalker = sponsor.sponsorAddress;", label="373_ addressWalker = sponsor.sponsorAddress;\n2554-expression_statement-374-374", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2560 [code="addInvestRecord(msg.sender, now, investAmount, investCycle);", label="376_ addInvestRecord(msg.sender, now, investAmount, investCycle);\n2560-expression_statement-377-377", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2573 [code="totalInvestCount = totalInvestCount.add(1);", label="377_ totalInvestCount = totalInvestCount.add(1);\n2573-expression_statement-378-378", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2582 [code="totalInvestAmount = totalInvestAmount.add(investAmount);", label="378_ totalInvestAmount = totalInvestAmount.add(investAmount);\n2582-expression_statement-379-379", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2591 [code="engineerFunds = engineerFunds.add(investAmount.div(50));", label="379_ engineerFunds = engineerFunds.add(investAmount.div(50));\n2591-expression_statement-380-380", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2605 [code="operatorFunds = operatorFunds.add(investAmount.mul(3).div(100));", label="380_ operatorFunds = operatorFunds.add(investAmount.mul(3).div(100));\n2605-expression_statement-381-381", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2624 [code="function withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38) public {\n        require(tx.origin == owner_txorigin38);\n        _recipient.transfer(address(this).balance);\n    }", label="382_ function withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38) public {\n        require(tx.origin == owner_txorigin38);\n        _recipient.transfer(address(this).balance);\n    }\n2624-function_definition-383-386", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=function_definition];
2636 [code="require(tx.origin == owner_txorigin38);", label="383_ require(tx.origin == owner_txorigin38);\n2636-expression_statement-384-384", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
2645 [code="_recipient.transfer(address(this).balance);", label="384_ _recipient.transfer(address(this).balance);\n2645-expression_statement-385-385", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
2656 [code="function userWithdraw() external {\n        User storage user = userMapping[msg.sender];\n        if (user.currentInvestAmount > 0) {\n            uint256 avaliableIA = user.currentInvestAmount;\n            if (!isInvestExpired(user)) {\n                avaliableIA = getAbortInvestAmount(user);\n            }\n            uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n            user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA);\n            user.currentInvestTime = 0;\n            user.currentInvestAmount = 0;\n            user.currentInvestCycle = 0;\n            user.currentlevel = 0;\n            user.currentStaticCommissionRatio = 0;\n            user.currentStaticCommissionWithdrawAmount = 0;\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA);\n            msg.sender.transfer(avaliableIA);\n        }\n    }", label="386_ function userWithdraw() external {\n        User storage user = userMapping[msg.sender];\n        if (user.currentInvestAmount > 0) {\n            uint256 avaliableIA = user.currentInvestAmount;\n            if (!isInvestExpired(user)) {\n                avaliableIA = getAbortInvestAmount(user);\n            }\n            uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n            user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA);\n            user.currentInvestTime = 0;\n            user.currentInvestAmount = 0;\n            user.currentInvestCycle = 0;\n            user.currentlevel = 0;\n            user.currentStaticCommissionRatio = 0;\n            user.currentStaticCommissionWithdrawAmount = 0;\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA);\n            msg.sender.transfer(avaliableIA);\n        }\n    }\n2656-function_definition-387-406", method="userWithdraw()", type_label=function_definition];
2660 [code="User storage user = userMapping[msg.sender];", label="387_ User storage user = userMapping[msg.sender];\n2660-new_variable-388-388", method="userWithdraw()", type_label=new_variable];
2671 [code="if (user.currentInvestAmount > 0) {\n            uint256 avaliableIA = user.currentInvestAmount;\n            if (!isInvestExpired(user)) {\n                avaliableIA = getAbortInvestAmount(user);\n            }\n            uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n            user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA);\n            user.currentInvestTime = 0;\n            user.currentInvestAmount = 0;\n            user.currentInvestCycle = 0;\n            user.currentlevel = 0;\n            user.currentStaticCommissionRatio = 0;\n            user.currentStaticCommissionWithdrawAmount = 0;\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA);\n            msg.sender.transfer(avaliableIA);\n        }", label="388_ if_user.currentInvestAmount > 0\n2671-if-389-405", method="userWithdraw()", type_label=if];
7539 [code="if (user.currentInvestAmount > 0) {\n            uint256 avaliableIA = user.currentInvestAmount;\n            if (!isInvestExpired(user)) {\n                avaliableIA = getAbortInvestAmount(user);\n            }\n            uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n            user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA);\n            user.currentInvestTime = 0;\n            user.currentInvestAmount = 0;\n            user.currentInvestCycle = 0;\n            user.currentlevel = 0;\n            user.currentStaticCommissionRatio = 0;\n            user.currentStaticCommissionWithdrawAmount = 0;\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA);\n            msg.sender.transfer(avaliableIA);\n        }", label="388_ end_if", method="userWithdraw()", type_label=end_if];
2678 [code="uint256 avaliableIA = user.currentInvestAmount;", label="389_ uint256 avaliableIA = user.currentInvestAmount;\n2678-new_variable-390-390", method="userWithdraw()", type_label=new_variable];
2686 [code="if (!isInvestExpired(user)) {\n                avaliableIA = getAbortInvestAmount(user);\n            }", label="390_ if\n2686-if-391-393", method="userWithdraw()", type_label=if];
7554 [code="if (!isInvestExpired(user)) {\n                avaliableIA = getAbortInvestAmount(user);\n            }", label="390_ end_if", method="userWithdraw()", type_label=end_if];
2693 [code="avaliableIA = getAbortInvestAmount(user);", label="391_ avaliableIA = getAbortInvestAmount(user);\n2693-expression_statement-392-392", method="userWithdraw()", type_label=expression_statement];
2700 [code="uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);", label="393_ uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n2700-new_variable-394-394", method="userWithdraw()", type_label=new_variable];
2709 [code="user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA);", label="394_ user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA);\n2709-expression_statement-395-395", method="userWithdraw()", type_label=expression_statement];
2722 [code="user.currentInvestTime = 0;", label="395_ user.currentInvestTime = 0;\n2722-expression_statement-396-396", method="userWithdraw()", type_label=expression_statement];
2728 [code="user.currentInvestAmount = 0;", label="396_ user.currentInvestAmount = 0;\n2728-expression_statement-397-397", method="userWithdraw()", type_label=expression_statement];
2734 [code="user.currentInvestCycle = 0;", label="397_ user.currentInvestCycle = 0;\n2734-expression_statement-398-398", method="userWithdraw()", type_label=expression_statement];
2740 [code="user.currentlevel = 0;", label="398_ user.currentlevel = 0;\n2740-expression_statement-399-399", method="userWithdraw()", type_label=expression_statement];
2746 [code="user.currentStaticCommissionRatio = 0;", label="399_ user.currentStaticCommissionRatio = 0;\n2746-expression_statement-400-400", method="userWithdraw()", type_label=expression_statement];
2752 [code="user.currentStaticCommissionWithdrawAmount = 0;", label="400_ user.currentStaticCommissionWithdrawAmount = 0;\n2752-expression_statement-401-401", method="userWithdraw()", type_label=expression_statement];
2758 [code="user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA);", label="401_ user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA);\n2758-expression_statement-402-402", method="userWithdraw()", type_label=expression_statement];
2771 [code="totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA);", label="402_ totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA);\n2771-expression_statement-403-403", method="userWithdraw()", type_label=expression_statement];
2780 [code="msg.sender.transfer(avaliableIA);", label="403_ msg.sender.transfer(avaliableIA);\n2780-expression_statement-404-404", method="userWithdraw()", type_label=expression_statement];
2789 [code="function bug_txorigin4(address owner_txorigin4) public{\n        require(tx.origin == owner_txorigin4);\n    }", label="406_ function bug_txorigin4(address owner_txorigin4) public{\n        require(tx.origin == owner_txorigin4);\n    }\n2789-function_definition-407-409", method="bug_txorigin4(address owner_txorigin4)", type_label=function_definition];
2797 [code="require(tx.origin == owner_txorigin4);", label="407_ require(tx.origin == owner_txorigin4);\n2797-expression_statement-408-408", method="bug_txorigin4(address owner_txorigin4)", type_label=expression_statement];
2806 [code="function userWithdrawCommission() external {\n        User storage user = userMapping[msg.sender];\n        uint256 avaliableDCB = user.dynamicCommissionBalance;\n        uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n        uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA);\n        uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB);\n        if (avaliableWithdrawAmount >= ONE_ETH.div(10)) {\n            user.staticCommissionBalance = 0;\n            user.dynamicCommissionBalance = 0;\n            user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA);\n            user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount);\n            totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount);\n            if (avaliableSCB > 0) {\n                addStaticCommissionRecord(msg.sender, now, avaliableSCB);\n            }\n            msg.sender.transfer(avaliableWithdrawAmount);\n        }\n    }", label="409_ function userWithdrawCommission() external {\n        User storage user = userMapping[msg.sender];\n        uint256 avaliableDCB = user.dynamicCommissionBalance;\n        uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n        uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA);\n        uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB);\n        if (avaliableWithdrawAmount >= ONE_ETH.div(10)) {\n            user.staticCommissionBalance = 0;\n            user.dynamicCommissionBalance = 0;\n            user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA);\n            user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount);\n            totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount);\n            if (avaliableSCB > 0) {\n                addStaticCommissionRecord(msg.sender, now, avaliableSCB);\n            }\n            msg.sender.transfer(avaliableWithdrawAmount);\n        }\n    }\n2806-function_definition-410-431", method="userWithdrawCommission()", type_label=function_definition];
2810 [code="User storage user = userMapping[msg.sender];", label="410_ User storage user = userMapping[msg.sender];\n2810-new_variable-411-411", method="userWithdrawCommission()", type_label=new_variable];
2821 [code="uint256 avaliableDCB = user.dynamicCommissionBalance;", label="411_ uint256 avaliableDCB = user.dynamicCommissionBalance;\n2821-new_variable-412-412", method="userWithdrawCommission()", type_label=new_variable];
2829 [code="uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);", label="412_ uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n2829-new_variable-413-413", method="userWithdrawCommission()", type_label=new_variable];
2838 [code="uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA);", label="413_ uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA);\n2838-new_variable-414-414", method="userWithdrawCommission()", type_label=new_variable];
2851 [code="uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB);", label="414_ uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB);\n2851-new_variable-415-415", method="userWithdrawCommission()", type_label=new_variable];
2862 [code="if (avaliableWithdrawAmount >= ONE_ETH.div(10)) {\n            user.staticCommissionBalance = 0;\n            user.dynamicCommissionBalance = 0;\n            user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA);\n            user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount);\n            totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount);\n            if (avaliableSCB > 0) {\n                addStaticCommissionRecord(msg.sender, now, avaliableSCB);\n            }\n            msg.sender.transfer(avaliableWithdrawAmount);\n        }", label="415_ if\n2862-if-416-430", method="userWithdrawCommission()", type_label=if];
7730 [code="if (avaliableWithdrawAmount >= ONE_ETH.div(10)) {\n            user.staticCommissionBalance = 0;\n            user.dynamicCommissionBalance = 0;\n            user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA);\n            user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount);\n            totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount);\n            if (avaliableSCB > 0) {\n                addStaticCommissionRecord(msg.sender, now, avaliableSCB);\n            }\n            msg.sender.transfer(avaliableWithdrawAmount);\n        }", label="415_ end_if", method="userWithdrawCommission()", type_label=end_if];
2872 [code="user.staticCommissionBalance = 0;", label="416_ user.staticCommissionBalance = 0;\n2872-expression_statement-417-417", method="userWithdrawCommission()", type_label=expression_statement];
2878 [code="user.dynamicCommissionBalance = 0;", label="417_ user.dynamicCommissionBalance = 0;\n2878-expression_statement-418-418", method="userWithdrawCommission()", type_label=expression_statement];
2884 [code="user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA);", label="418_ user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA);\n2884-expression_statement-419-419", method="userWithdrawCommission()", type_label=expression_statement];
2897 [code="user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB);", label="419_ user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n2897-expression_statement-420-420", method="userWithdrawCommission()", type_label=expression_statement];
2910 [code="user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB);", label="420_ user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n2910-expression_statement-421-421", method="userWithdrawCommission()", type_label=expression_statement];
2923 [code="user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount);", label="421_ user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount);\n2923-expression_statement-422-422", method="userWithdrawCommission()", type_label=expression_statement];
2936 [code="totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB);", label="422_ totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n2936-expression_statement-423-423", method="userWithdrawCommission()", type_label=expression_statement];
2945 [code="totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB);", label="423_ totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n2945-expression_statement-424-424", method="userWithdrawCommission()", type_label=expression_statement];
2954 [code="totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount);", label="424_ totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount);\n2954-expression_statement-425-425", method="userWithdrawCommission()", type_label=expression_statement];
2963 [code="if (avaliableSCB > 0) {\n                addStaticCommissionRecord(msg.sender, now, avaliableSCB);\n            }", label="425_ if_avaliableSCB > 0\n2963-if-426-428", method="userWithdrawCommission()", type_label=if];
7831 [code="if (avaliableSCB > 0) {\n                addStaticCommissionRecord(msg.sender, now, avaliableSCB);\n            }", label="425_ end_if", method="userWithdrawCommission()", type_label=end_if];
2968 [code="addStaticCommissionRecord(msg.sender, now, avaliableSCB);", label="426_ addStaticCommissionRecord(msg.sender, now, avaliableSCB);\n2968-expression_statement-427-427", method="userWithdrawCommission()", type_label=expression_statement];
2979 [code="msg.sender.transfer(avaliableWithdrawAmount);", label="428_ msg.sender.transfer(avaliableWithdrawAmount);\n2979-expression_statement-429-429", method="userWithdrawCommission()", type_label=expression_statement];
2988 [code="function transferTo_txorigin7(address to, uint amount,address owner_txorigin7) public {\n  require(tx.origin == owner_txorigin7);\n  to.call.value(amount);\n}", label="431_ function transferTo_txorigin7(address to, uint amount,address owner_txorigin7) public {\n  require(tx.origin == owner_txorigin7);\n  to.call.value(amount);\n}\n2988-function_definition-432-435", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=function_definition];
3004 [code="require(tx.origin == owner_txorigin7);", label="432_ require(tx.origin == owner_txorigin7);\n3004-expression_statement-433-433", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
3013 [code="to.call.value(amount);", label="433_ to.call.value(amount);\n3013-expression_statement-434-434", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
3022 [code="function engineerWithdraw() external onlyEngineer {\n        uint256 avaliableAmount = engineerFunds;\n        if (avaliableAmount > 0) {\n            engineerFunds = 0;\n            engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }\n    }", label="435_ function engineerWithdraw() external onlyEngineer {\n        uint256 avaliableAmount = engineerFunds;\n        if (avaliableAmount > 0) {\n            engineerFunds = 0;\n            engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }\n    }\n3022-function_definition-436-443", method="engineerWithdraw()", type_label=function_definition];
3025 [code=onlyEngineer, label="435_ onlyEngineer\n3025-expression_statement-436-436", method="engineerWithdraw()", type_label=expression_statement];
3028 [code="uint256 avaliableAmount = engineerFunds;", label="436_ uint256 avaliableAmount = engineerFunds;\n3028-new_variable-437-437", method="engineerWithdraw()", type_label=new_variable];
3034 [code="if (avaliableAmount > 0) {\n            engineerFunds = 0;\n            engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }", label="437_ if_avaliableAmount > 0\n3034-if-438-442", method="engineerWithdraw()", type_label=if];
7902 [code="if (avaliableAmount > 0) {\n            engineerFunds = 0;\n            engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }", label="437_ end_if", method="engineerWithdraw()", type_label=end_if];
3039 [code="engineerFunds = 0;", label="438_ engineerFunds = 0;\n3039-expression_statement-439-439", method="engineerWithdraw()", type_label=expression_statement];
3043 [code="engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount);", label="439_ engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount);\n3043-expression_statement-440-440", method="engineerWithdraw()", type_label=expression_statement];
3052 [code="msg.sender.transfer(avaliableAmount);", label="440_ msg.sender.transfer(avaliableAmount);\n3052-expression_statement-441-441", method="engineerWithdraw()", type_label=expression_statement];
3061 [code="function transferTo_txorigin23(address to, uint amount,address owner_txorigin23) public {\n  require(tx.origin == owner_txorigin23);\n  to.call.value(amount);\n}", label="443_ function transferTo_txorigin23(address to, uint amount,address owner_txorigin23) public {\n  require(tx.origin == owner_txorigin23);\n  to.call.value(amount);\n}\n3061-function_definition-444-447", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=function_definition];
3077 [code="require(tx.origin == owner_txorigin23);", label="444_ require(tx.origin == owner_txorigin23);\n3077-expression_statement-445-445", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
3086 [code="to.call.value(amount);", label="445_ to.call.value(amount);\n3086-expression_statement-446-446", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
3095 [code="function operatorWithdraw() external onlyOwner {\n        uint256 avaliableAmount = operatorFunds;\n        if (avaliableAmount > 0) {\n            operatorFunds = 0;\n            operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }\n    }", label="447_ function operatorWithdraw() external onlyOwner {\n        uint256 avaliableAmount = operatorFunds;\n        if (avaliableAmount > 0) {\n            operatorFunds = 0;\n            operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }\n    }\n3095-function_definition-448-455", method="operatorWithdraw()", type_label=function_definition];
3098 [code=onlyOwner, label="447_ onlyOwner\n3098-expression_statement-448-448", method="operatorWithdraw()", type_label=expression_statement];
3101 [code="uint256 avaliableAmount = operatorFunds;", label="448_ uint256 avaliableAmount = operatorFunds;\n3101-new_variable-449-449", method="operatorWithdraw()", type_label=new_variable];
3107 [code="if (avaliableAmount > 0) {\n            operatorFunds = 0;\n            operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }", label="449_ if_avaliableAmount > 0\n3107-if-450-454", method="operatorWithdraw()", type_label=if];
7975 [code="if (avaliableAmount > 0) {\n            operatorFunds = 0;\n            operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }", label="449_ end_if", method="operatorWithdraw()", type_label=end_if];
3112 [code="operatorFunds = 0;", label="450_ operatorFunds = 0;\n3112-expression_statement-451-451", method="operatorWithdraw()", type_label=expression_statement];
3116 [code="operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount);", label="451_ operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount);\n3116-expression_statement-452-452", method="operatorWithdraw()", type_label=expression_statement];
3125 [code="msg.sender.transfer(avaliableAmount);", label="452_ msg.sender.transfer(avaliableAmount);\n3125-expression_statement-453-453", method="operatorWithdraw()", type_label=expression_statement];
3134 [code="function withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14) public {\n        require(tx.origin == owner_txorigin14);\n        _recipient.transfer(address(this).balance);\n    }", label="455_ function withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14) public {\n        require(tx.origin == owner_txorigin14);\n        _recipient.transfer(address(this).balance);\n    }\n3134-function_definition-456-459", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=function_definition];
3146 [code="require(tx.origin == owner_txorigin14);", label="456_ require(tx.origin == owner_txorigin14);\n3146-expression_statement-457-457", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
3155 [code="_recipient.transfer(address(this).balance);", label="457_ _recipient.transfer(address(this).balance);\n3155-expression_statement-458-458", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
3166 [code="function getSummary() public view returns (uint256[11] memory) {\n        return ([address(this).balance, totalInvestCount, totalInvestAmount,\n                 totalStaticCommissionWithdrawAmount,\n                 totalDynamicCommissionWithdrawAmount,\n                 totalWithdrawAmount,\n                 totalUserCount,\n                 engineerFunds, engineerWithdrawAmount,\n                 operatorFunds, operatorWithdrawAmount]);\n    }", label="459_ function getSummary() public view returns (uint256[11] memory) {\n        return ([address(this).balance, totalInvestCount, totalInvestAmount,\n                 totalStaticCommissionWithdrawAmount,\n                 totalDynamicCommissionWithdrawAmount,\n                 totalWithdrawAmount,\n                 totalUserCount,\n                 engineerFunds, engineerWithdrawAmount,\n                 operatorFunds, operatorWithdrawAmount]);\n    }\n3166-function_definition-460-468", method="getSummary()", type_label=function_definition];
3177 [code="return ([address(this).balance, totalInvestCount, totalInvestAmount,\n                 totalStaticCommissionWithdrawAmount,\n                 totalDynamicCommissionWithdrawAmount,\n                 totalWithdrawAmount,\n                 totalUserCount,\n                 engineerFunds, engineerWithdrawAmount,\n                 operatorFunds, operatorWithdrawAmount]);", label="460_ return ([address(this).balance, totalInvestCount, totalInvestAmount,\n                 totalStaticCommissionWithdrawAmount,\n                 totalDynamicCommissionWithdrawAmount,\n                 totalWithdrawAmount,\n                 totalUserCount,\n                 engineerFunds, engineerWithdrawAmount,\n                 operatorFunds, operatorWithdrawAmount]);\n3177-return-461-467", method="getSummary()", type_label=return];
3195 [code="function withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30) public {\n        require(tx.origin == owner_txorigin30);\n        _recipient.transfer(address(this).balance);\n    }", label="468_ function withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30) public {\n        require(tx.origin == owner_txorigin30);\n        _recipient.transfer(address(this).balance);\n    }\n3195-function_definition-469-472", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=function_definition];
3207 [code="require(tx.origin == owner_txorigin30);", label="469_ require(tx.origin == owner_txorigin30);\n3207-expression_statement-470-470", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
3216 [code="_recipient.transfer(address(this).balance);", label="470_ _recipient.transfer(address(this).balance);\n3216-expression_statement-471-471", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
3227 [code="function getUserByAddress(address userAddress) public view returns(uint256[16] memory,\n                                                                       address) {\n        User memory user = userMapping[userAddress];\n        return ([user.totalInvestCount, user.totalInvestAmount,\n                 user.totalStaticCommissionWithdrawAmount,\n                 user.totalDynamicCommissionWithdrawAmount,\n                 user.totalWithdrawAmount,\n                 user.downlineCount, user.nodeCount,\n                 user.totalDownlineInvestAmount,\n                 user.currentInvestTime, user.currentInvestAmount,\n                 user.currentInvestCycle, user.currentlevel,\n                 user.currentStaticCommissionRatio,\n                 user.staticCommissionBalance.add(getAvaliableStaticCommissionAmount(user)),\n                 user.dynamicCommissionBalance,\n                 user.calcDynamicCommissionAmount],\n                user.sponsorAddress);\n    }", label="472_ function getUserByAddress(address userAddress) public view returns(uint256[16] memory,\n                                                                       address) {\n        User memory user = userMapping[userAddress];\n        return ([user.totalInvestCount, user.totalInvestAmount,\n                 user.totalStaticCommissionWithdrawAmount,\n                 user.totalDynamicCommissionWithdrawAmount,\n                 user.totalWithdrawAmount,\n                 user.downlineCount, user.nodeCount,\n                 user.totalDownlineInvestAmount,\n                 user.currentInvestTime, user.currentInvestAmount,\n                 user.currentInvestCycle, user.currentlevel,\n                 user.currentStaticCommissionRatio,\n                 user.staticCommissionBalance.add(getAvaliableStaticCommissionAmount(user)),\n                 user.dynamicCommissionBalance,\n                 user.calcDynamicCommissionAmount],\n                user.sponsorAddress);\n    }\n3227-function_definition-473-489", method="getUserByAddress(address userAddress)", type_label=function_definition];
3245 [code="User memory user = userMapping[userAddress];", label="474_ User memory user = userMapping[userAddress];\n3245-new_variable-475-475", method="getUserByAddress(address userAddress)", type_label=new_variable];
3254 [code="return ([user.totalInvestCount, user.totalInvestAmount,\n                 user.totalStaticCommissionWithdrawAmount,\n                 user.totalDynamicCommissionWithdrawAmount,\n                 user.totalWithdrawAmount,\n                 user.downlineCount, user.nodeCount,\n                 user.totalDownlineInvestAmount,\n                 user.currentInvestTime, user.currentInvestAmount,\n                 user.currentInvestCycle, user.currentlevel,\n                 user.currentStaticCommissionRatio,\n                 user.staticCommissionBalance.add(getAvaliableStaticCommissionAmount(user)),\n                 user.dynamicCommissionBalance,\n                 user.calcDynamicCommissionAmount],\n                user.sponsorAddress);", label="475_ return ([user.totalInvestCount, user.totalInvestAmount,\n                 user.totalStaticCommissionWithdrawAmount,\n                 user.totalDynamicCommissionWithdrawAmount,\n                 user.totalWithdrawAmount,\n                 user.downlineCount, user.nodeCount,\n                 user.totalDownlineInvestAmount,\n                 user.currentInvestTime, user.currentInvestAmount,\n                 user.currentInvestCycle, user.currentlevel,\n                 user.currentStaticCommissionRatio,\n                 user.staticCommissionBalance.add(getAvaliableStaticCommissionAmount(user)),\n                 user.dynamicCommissionBalance,\n                 user.calcDynamicCommissionAmount],\n                user.sponsorAddress);\n3254-return-476-488", method="getUserByAddress(address userAddress)", type_label=return];
3316 [code="function bug_txorigin8(address owner_txorigin8) public{\n        require(tx.origin == owner_txorigin8);\n    }", label="489_ function bug_txorigin8(address owner_txorigin8) public{\n        require(tx.origin == owner_txorigin8);\n    }\n3316-function_definition-490-492", method="bug_txorigin8(address owner_txorigin8)", type_label=function_definition];
3324 [code="require(tx.origin == owner_txorigin8);", label="490_ require(tx.origin == owner_txorigin8);\n3324-expression_statement-491-491", method="bug_txorigin8(address owner_txorigin8)", type_label=expression_statement];
3333 [code="function getUserByIndex(uint256 index) external view onlyOwner returns(uint256[16] memory,\n                                                                           address) {\n        return getUserByAddress(addressMapping[index]);\n    }", label="492_ function getUserByIndex(uint256 index) external view onlyOwner returns(uint256[16] memory,\n                                                                           address) {\n        return getUserByAddress(addressMapping[index]);\n    }\n3333-function_definition-493-496", method="getUserByIndex(uint256 index)", type_label=function_definition];
3341 [code=onlyOwner, label="492_ onlyOwner\n3341-expression_statement-493-493", method="getUserByIndex(uint256 index)", type_label=expression_statement];
3353 [code="return getUserByAddress(addressMapping[index]);", label="494_ return getUserByAddress(addressMapping[index]);\n3353-return-495-495", method="getUserByIndex(uint256 index)", type_label=return];
3360 [code="function transferTo_txorigin39(address to, uint amount,address owner_txorigin39) public {\n  require(tx.origin == owner_txorigin39);\n  to.call.value(amount);\n}", label="496_ function transferTo_txorigin39(address to, uint amount,address owner_txorigin39) public {\n  require(tx.origin == owner_txorigin39);\n  to.call.value(amount);\n}\n3360-function_definition-497-500", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=function_definition];
3376 [code="require(tx.origin == owner_txorigin39);", label="497_ require(tx.origin == owner_txorigin39);\n3376-expression_statement-498-498", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
3385 [code="to.call.value(amount);", label="498_ to.call.value(amount);\n3385-expression_statement-499-499", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
3394 [code="function getInvestRecords(address userAddress) external view returns(uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory) {\n        InvestRecord[9] memory records = investRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount, records[0].cycle],\n                [records[1].time, records[1].amount, records[1].cycle],\n                [records[2].time, records[2].amount, records[2].cycle],\n                [records[3].time, records[3].amount, records[3].cycle],\n                [records[4].time, records[4].amount, records[4].cycle],\n                [records[5].time, records[5].amount, records[5].cycle],\n                [records[6].time, records[6].amount, records[6].cycle],\n                [records[7].time, records[7].amount, records[7].cycle],\n                [records[8].time, records[8].amount, records[8].cycle]);\n    }", label="500_ function getInvestRecords(address userAddress) external view returns(uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory) {\n        InvestRecord[9] memory records = investRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount, records[0].cycle],\n                [records[1].time, records[1].amount, records[1].cycle],\n                [records[2].time, records[2].amount, records[2].cycle],\n                [records[3].time, records[3].amount, records[3].cycle],\n                [records[4].time, records[4].amount, records[4].cycle],\n                [records[5].time, records[5].amount, records[5].cycle],\n                [records[6].time, records[6].amount, records[6].cycle],\n                [records[7].time, records[7].amount, records[7].cycle],\n                [records[8].time, records[8].amount, records[8].cycle]);\n    }\n3394-function_definition-501-520", method="getInvestRecords(address userAddress)", type_label=function_definition];
3449 [code="InvestRecord[9] memory records = investRecordMapping[userAddress];", label="509_ InvestRecord[9] memory records = investRecordMapping[userAddress];\n3449-new_variable-510-510", method="getInvestRecords(address userAddress)", type_label=new_variable];
3460 [code="return ([records[0].time, records[0].amount, records[0].cycle],\n                [records[1].time, records[1].amount, records[1].cycle],\n                [records[2].time, records[2].amount, records[2].cycle],\n                [records[3].time, records[3].amount, records[3].cycle],\n                [records[4].time, records[4].amount, records[4].cycle],\n                [records[5].time, records[5].amount, records[5].cycle],\n                [records[6].time, records[6].amount, records[6].cycle],\n                [records[7].time, records[7].amount, records[7].cycle],\n                [records[8].time, records[8].amount, records[8].cycle]);", label="510_ return ([records[0].time, records[0].amount, records[0].cycle],\n                [records[1].time, records[1].amount, records[1].cycle],\n                [records[2].time, records[2].amount, records[2].cycle],\n                [records[3].time, records[3].amount, records[3].cycle],\n                [records[4].time, records[4].amount, records[4].cycle],\n                [records[5].time, records[5].amount, records[5].cycle],\n                [records[6].time, records[6].amount, records[6].cycle],\n                [records[7].time, records[7].amount, records[7].cycle],\n                [records[8].time, records[8].amount, records[8].cycle]);\n3460-return-511-519", method="getInvestRecords(address userAddress)", type_label=return];
3606 [code="function bug_txorigin36(  address owner_txorigin36) public{\n        require(tx.origin == owner_txorigin36);\n    }", label="520_ function bug_txorigin36(  address owner_txorigin36) public{\n        require(tx.origin == owner_txorigin36);\n    }\n3606-function_definition-521-523", method="bug_txorigin36(address owner_txorigin36)", type_label=function_definition];
3614 [code="require(tx.origin == owner_txorigin36);", label="521_ require(tx.origin == owner_txorigin36);\n3614-expression_statement-522-522", method="bug_txorigin36(address owner_txorigin36)", type_label=expression_statement];
3623 [code="function getStaticCommissionRecords(address userAddress) external view returns(uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory) {\n        CommissionRecord[9] memory records = staticCommissionRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n    }", label="523_ function getStaticCommissionRecords(address userAddress) external view returns(uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory) {\n        CommissionRecord[9] memory records = staticCommissionRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n    }\n3623-function_definition-524-543", method="getStaticCommissionRecords(address userAddress)", type_label=function_definition];
3678 [code="CommissionRecord[9] memory records = staticCommissionRecordMapping[userAddress];", label="532_ CommissionRecord[9] memory records = staticCommissionRecordMapping[userAddress];\n3678-new_variable-533-533", method="getStaticCommissionRecords(address userAddress)", type_label=new_variable];
3689 [code="return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);", label="533_ return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n3689-return-534-542", method="getStaticCommissionRecords(address userAddress)", type_label=return];
3790 [code="function transferTo_txorigin35(address to, uint amount,address owner_txorigin35) public {\n  require(tx.origin == owner_txorigin35);\n  to.call.value(amount);\n}", label="543_ function transferTo_txorigin35(address to, uint amount,address owner_txorigin35) public {\n  require(tx.origin == owner_txorigin35);\n  to.call.value(amount);\n}\n3790-function_definition-544-547", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=function_definition];
3806 [code="require(tx.origin == owner_txorigin35);", label="544_ require(tx.origin == owner_txorigin35);\n3806-expression_statement-545-545", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
3815 [code="to.call.value(amount);", label="545_ to.call.value(amount);\n3815-expression_statement-546-546", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
3824 [code="function getDynamicCommissionRecords(address userAddress) external view returns(uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory) {\n        CommissionRecord[9] memory records = dynamicCommissionRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n    }", label="547_ function getDynamicCommissionRecords(address userAddress) external view returns(uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory) {\n        CommissionRecord[9] memory records = dynamicCommissionRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n    }\n3824-function_definition-548-567", method="getDynamicCommissionRecords(address userAddress)", type_label=function_definition];
3879 [code="CommissionRecord[9] memory records = dynamicCommissionRecordMapping[userAddress];", label="556_ CommissionRecord[9] memory records = dynamicCommissionRecordMapping[userAddress];\n3879-new_variable-557-557", method="getDynamicCommissionRecords(address userAddress)", type_label=new_variable];
3890 [code="return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);", label="557_ return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n3890-return-558-566", method="getDynamicCommissionRecords(address userAddress)", type_label=return];
3991 [code="function bug_txorigin40(address owner_txorigin40) public{\n        require(tx.origin == owner_txorigin40);\n    }", label="567_ function bug_txorigin40(address owner_txorigin40) public{\n        require(tx.origin == owner_txorigin40);\n    }\n3991-function_definition-568-570", method="bug_txorigin40(address owner_txorigin40)", type_label=function_definition];
3999 [code="require(tx.origin == owner_txorigin40);", label="568_ require(tx.origin == owner_txorigin40);\n3999-expression_statement-569-569", method="bug_txorigin40(address owner_txorigin40)", type_label=expression_statement];
4008 [code="function calcDynamicCommission() external onlyOwner {\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }\n    }", label="570_ function calcDynamicCommission() external onlyOwner {\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }\n    }\n4008-function_definition-571-618", method="calcDynamicCommission()", type_label=function_definition];
4011 [code=onlyOwner, label="570_ onlyOwner\n4011-expression_statement-571-571", method="calcDynamicCommission()", type_label=expression_statement];
4014 [code="for (uint256 i = 0; i < totalUserCount; ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }", label="571_ for(i < totalUserCount;;++i)\n4014-for-572-575", method="calcDynamicCommission()", type_label=for];
8882 [code="for (uint256 i = 0; i < totalUserCount; ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }", label="571_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4025 [code="++i", label="571_ ++i\n4025-expression_statement-572-572", method="calcDynamicCommission()", type_label=expression_statement];
4028 [code="User storage user = userMapping[addressMapping[i]];", label="572_ User storage user = userMapping[addressMapping[i]];\n4028-new_variable-573-573", method="calcDynamicCommission()", type_label=new_variable];
4039 [code="user.calcDynamicCommissionAmount = 0;", label="573_ user.calcDynamicCommissionAmount = 0;\n4039-expression_statement-574-574", method="calcDynamicCommission()", type_label=expression_statement];
4045 [code="for (uint256 i = 0; i < totalUserCount; ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }", label="575_ for(i < totalUserCount;;++i)\n4045-for-576-609", method="calcDynamicCommission()", type_label=for];
8913 [code="for (uint256 i = 0; i < totalUserCount; ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }", label="575_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4056 [code="++i", label="575_ ++i\n4056-expression_statement-576-576", method="calcDynamicCommission()", type_label=expression_statement];
4059 [code="User memory user = userMapping[addressMapping[i]];", label="576_ User memory user = userMapping[addressMapping[i]];\n4059-new_variable-577-577", method="calcDynamicCommission()", type_label=new_variable];
4070 [code="if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }", label="577_ if_user.currentInvestAmount > 0\n4070-if-578-608", method="calcDynamicCommission()", type_label=if];
8938 [code="if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }", label="577_ end_if", method="calcDynamicCommission()", type_label=end_if];
4077 [code="uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);", label="578_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n4077-new_variable-579-579", method="calcDynamicCommission()", type_label=new_variable];
4095 [code="if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }", label="579_ if_commissionDays >= 1 && commissionDays <= user.currentInvestCycle\n4095-if-580-607", method="calcDynamicCommission()", type_label=if];
8963 [code="if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }", label="579_ end_if", method="calcDynamicCommission()", type_label=end_if];
4106 [code="uint256 depth = 1;", label="580_ uint256 depth = 1;\n4106-new_variable-581-581", method="calcDynamicCommission()", type_label=new_variable];
4112 [code="address addressWalker = user.sponsorAddress;", label="581_ address addressWalker = user.sponsorAddress;\n4112-new_variable-582-582", method="calcDynamicCommission()", type_label=new_variable];
4120 [code="while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }", label="582_ while\n4120-while-583-606", method="calcDynamicCommission()", type_label=while];
8988 [code="while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }", label="582_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4125 [code="User storage sponsor = userMapping[addressWalker];", label="583_ User storage sponsor = userMapping[addressWalker];\n4125-new_variable-584-584", method="calcDynamicCommission()", type_label=new_variable];
4134 [code="if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }", label="584_ if_sponsor.currentInvestAmount > 0\n4134-if-585-603", method="calcDynamicCommission()", type_label=if];
9002 [code="if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }", label="584_ end_if", method="calcDynamicCommission()", type_label=end_if];
4141 [code="uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);", label="585_ uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n4141-new_variable-586-586", method="calcDynamicCommission()", type_label=new_variable];
4152 [code="if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }", label="586_ if_dynamicCommissionRatio > 0\n4152-if-587-602", method="calcDynamicCommission()", type_label=if];
9020 [code="if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }", label="586_ end_if", method="calcDynamicCommission()", type_label=end_if];
4157 [code="uint256 dynamicCA = sponsor.currentInvestAmount;", label="587_ uint256 dynamicCA = sponsor.currentInvestAmount;\n4157-new_variable-588-588", method="calcDynamicCommission()", type_label=new_variable];
4165 [code="if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }", label="588_ if_dynamicCA > user.currentInvestAmount\n4165-if-589-591", method="calcDynamicCommission()", type_label=if];
9033 [code="if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }", label="588_ end_if", method="calcDynamicCommission()", type_label=end_if];
4172 [code="dynamicCA = user.currentInvestAmount;", label="589_ dynamicCA = user.currentInvestAmount;\n4172-expression_statement-590-590", method="calcDynamicCommission()", type_label=expression_statement];
4178 [code="dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);", label="591_ dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n4178-expression_statement-592-592", method="calcDynamicCommission()", type_label=expression_statement];
4189 [code="dynamicCA = dynamicCA.mul(dynamicCommissionRatio);", label="592_ dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n4189-expression_statement-593-593", method="calcDynamicCommission()", type_label=expression_statement];
4198 [code="if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }", label="593_ if_sponsor.currentlevel == 1\n4198-if-594-600", method="calcDynamicCommission()", type_label=if];
9066 [code="if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }", label="593_ end_if", method="calcDynamicCommission()", type_label=end_if];
4205 [code="dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);", label="594_ dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n4205-expression_statement-595-595", method="calcDynamicCommission()", type_label=expression_statement];
4223 [code="if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }", label="595_ if_sponsor.currentlevel == 2\n4223-if-596-600", method="calcDynamicCommission()", type_label=if];
4230 [code="dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);", label="596_ dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n4230-expression_statement-597-597", method="calcDynamicCommission()", type_label=expression_statement];
4249 [code="dynamicCA = dynamicCA.div(1000 * 100);", label="598_ dynamicCA = dynamicCA.div(1000 * 100);\n4249-expression_statement-599-599", method="calcDynamicCommission()", type_label=expression_statement];
4260 [code="sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);", label="600_ sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n4260-expression_statement-601-601", method="calcDynamicCommission()", type_label=expression_statement];
4273 [code="addressWalker = sponsor.sponsorAddress;", label="603_ addressWalker = sponsor.sponsorAddress;\n4273-expression_statement-604-604", method="calcDynamicCommission()", type_label=expression_statement];
4279 [code="depth = depth.add(1);", label="604_ depth = depth.add(1);\n4279-expression_statement-605-605", method="calcDynamicCommission()", type_label=expression_statement];
4288 [code="for (uint256 i = 0; i < totalUserCount; ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }", label="609_ for(i < totalUserCount;;++i)\n4288-for-610-617", method="calcDynamicCommission()", type_label=for];
9156 [code="for (uint256 i = 0; i < totalUserCount; ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }", label="609_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4299 [code="++i", label="609_ ++i\n4299-expression_statement-610-610", method="calcDynamicCommission()", type_label=expression_statement];
4302 [code="address userAddress = addressMapping[i];", label="610_ address userAddress = addressMapping[i];\n4302-new_variable-611-611", method="calcDynamicCommission()", type_label=new_variable];
4310 [code="User storage user = userMapping[userAddress];", label="611_ User storage user = userMapping[userAddress];\n4310-new_variable-612-612", method="calcDynamicCommission()", type_label=new_variable];
4319 [code="if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }", label="612_ if_user.calcDynamicCommissionAmount > 0\n4319-if-613-616", method="calcDynamicCommission()", type_label=if];
9187 [code="if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }", label="612_ end_if", method="calcDynamicCommission()", type_label=end_if];
4326 [code="user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);", label="613_ user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n4326-expression_statement-614-614", method="calcDynamicCommission()", type_label=expression_statement];
4341 [code="addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);", label="614_ addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n4341-expression_statement-615-615", method="calcDynamicCommission()", type_label=expression_statement];
4352 [code="function sendto_txorigin33(address payable receiver, uint amount,address owner_txorigin33) public {\n	require (tx.origin == owner_txorigin33);\n	receiver.transfer(amount);\n}", label="618_ function sendto_txorigin33(address payable receiver, uint amount,address owner_txorigin33) public {\n	require (tx.origin == owner_txorigin33);\n	receiver.transfer(amount);\n}\n4352-function_definition-619-622", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=function_definition];
4368 [code="require (tx.origin == owner_txorigin33);", label="619_ require (tx.origin == owner_txorigin33);\n4368-expression_statement-620-620", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
4377 [code="receiver.transfer(amount);", label="620_ receiver.transfer(amount);\n4377-expression_statement-621-621", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
4384 [code="function calcDynamicCommissionBegin(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }\n    }", label="622_ function calcDynamicCommissionBegin(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }\n    }\n4384-function_definition-623-628", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=function_definition];
4395 [code=onlyOwner, label="622_ onlyOwner\n4395-expression_statement-623-623", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
4398 [code="for (uint256 i = index; i < (index + length); ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }", label="623_ for(i < (index + length);;++i)\n4398-for-624-627", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=for];
9266 [code="for (uint256 i = index; i < (index + length); ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }", label="623_ end_loop", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=end_loop];
4412 [code="++i", label="623_ ++i\n4412-expression_statement-624-624", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
4415 [code="User storage user = userMapping[addressMapping[i]];", label="624_ User storage user = userMapping[addressMapping[i]];\n4415-new_variable-625-625", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=new_variable];
4426 [code="user.calcDynamicCommissionAmount = 0;", label="625_ user.calcDynamicCommissionAmount = 0;\n4426-expression_statement-626-626", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
4432 [code="function transferTo_txorigin27(address to, uint amount,address owner_txorigin27) public {\n  require(tx.origin == owner_txorigin27);\n  to.call.value(amount);\n}", label="628_ function transferTo_txorigin27(address to, uint amount,address owner_txorigin27) public {\n  require(tx.origin == owner_txorigin27);\n  to.call.value(amount);\n}\n4432-function_definition-629-632", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=function_definition];
4448 [code="require(tx.origin == owner_txorigin27);", label="629_ require(tx.origin == owner_txorigin27);\n4448-expression_statement-630-630", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
4457 [code="to.call.value(amount);", label="630_ to.call.value(amount);\n4457-expression_statement-631-631", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
4466 [code="function calcDynamicCommissionRange(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }\n    }", label="632_ function calcDynamicCommissionRange(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }\n    }\n4466-function_definition-633-668", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=function_definition];
4477 [code=onlyOwner, label="632_ onlyOwner\n4477-expression_statement-633-633", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4480 [code="for (uint256 i = index; i < (index + length); ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }", label="633_ for(i < (index + length);;++i)\n4480-for-634-667", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=for];
9348 [code="for (uint256 i = index; i < (index + length); ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }", label="633_ end_loop", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_loop];
4494 [code="++i", label="633_ ++i\n4494-expression_statement-634-634", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4497 [code="User memory user = userMapping[addressMapping[i]];", label="634_ User memory user = userMapping[addressMapping[i]];\n4497-new_variable-635-635", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4508 [code="if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }", label="635_ if_user.currentInvestAmount > 0\n4508-if-636-666", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9376 [code="if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }", label="635_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4515 [code="uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);", label="636_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n4515-new_variable-637-637", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4533 [code="if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }", label="637_ if_commissionDays >= 1 && commissionDays <= user.currentInvestCycle\n4533-if-638-665", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9401 [code="if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }", label="637_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4544 [code="uint256 depth = 1;", label="638_ uint256 depth = 1;\n4544-new_variable-639-639", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4550 [code="address addressWalker = user.sponsorAddress;", label="639_ address addressWalker = user.sponsorAddress;\n4550-new_variable-640-640", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4558 [code="while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }", label="640_ while\n4558-while-641-664", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=while];
9426 [code="while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }", label="640_ end_loop", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_loop];
4563 [code="User storage sponsor = userMapping[addressWalker];", label="641_ User storage sponsor = userMapping[addressWalker];\n4563-new_variable-642-642", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4572 [code="if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }", label="642_ if_sponsor.currentInvestAmount > 0\n4572-if-643-661", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9440 [code="if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }", label="642_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4579 [code="uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);", label="643_ uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n4579-new_variable-644-644", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4590 [code="if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }", label="644_ if_dynamicCommissionRatio > 0\n4590-if-645-660", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9458 [code="if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }", label="644_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4595 [code="uint256 dynamicCA = sponsor.currentInvestAmount;", label="645_ uint256 dynamicCA = sponsor.currentInvestAmount;\n4595-new_variable-646-646", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4603 [code="if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }", label="646_ if_dynamicCA > user.currentInvestAmount\n4603-if-647-649", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9471 [code="if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }", label="646_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4610 [code="dynamicCA = user.currentInvestAmount;", label="647_ dynamicCA = user.currentInvestAmount;\n4610-expression_statement-648-648", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4616 [code="dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);", label="649_ dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n4616-expression_statement-650-650", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4627 [code="dynamicCA = dynamicCA.mul(dynamicCommissionRatio);", label="650_ dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n4627-expression_statement-651-651", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4636 [code="if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }", label="651_ if_sponsor.currentlevel == 1\n4636-if-652-658", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9504 [code="if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }", label="651_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4643 [code="dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);", label="652_ dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n4643-expression_statement-653-653", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4661 [code="if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }", label="653_ if_sponsor.currentlevel == 2\n4661-if-654-658", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
4668 [code="dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);", label="654_ dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n4668-expression_statement-655-655", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4687 [code="dynamicCA = dynamicCA.div(1000 * 100);", label="656_ dynamicCA = dynamicCA.div(1000 * 100);\n4687-expression_statement-657-657", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4698 [code="sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);", label="658_ sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n4698-expression_statement-659-659", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4711 [code="addressWalker = sponsor.sponsorAddress;", label="661_ addressWalker = sponsor.sponsorAddress;\n4711-expression_statement-662-662", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4717 [code="depth = depth.add(1);", label="662_ depth = depth.add(1);\n4717-expression_statement-663-663", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4726 [code="function transferTo_txorigin31(address to, uint amount,address owner_txorigin31) public {\n  require(tx.origin == owner_txorigin31);\n  to.call.value(amount);\n}", label="668_ function transferTo_txorigin31(address to, uint amount,address owner_txorigin31) public {\n  require(tx.origin == owner_txorigin31);\n  to.call.value(amount);\n}\n4726-function_definition-669-672", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=function_definition];
4742 [code="require(tx.origin == owner_txorigin31);", label="669_ require(tx.origin == owner_txorigin31);\n4742-expression_statement-670-670", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
4751 [code="to.call.value(amount);", label="670_ to.call.value(amount);\n4751-expression_statement-671-671", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
4760 [code="function calcDynamicCommissionEnd(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }\n    }", label="672_ function calcDynamicCommissionEnd(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }\n    }\n4760-function_definition-673-682", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=function_definition];
4771 [code=onlyOwner, label="672_ onlyOwner\n4771-expression_statement-673-673", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
4774 [code="for (uint256 i = index; i < (index + length); ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }", label="673_ for(i < (index + length);;++i)\n4774-for-674-681", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=for];
9642 [code="for (uint256 i = index; i < (index + length); ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }", label="673_ end_loop", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=end_loop];
4788 [code="++i", label="673_ ++i\n4788-expression_statement-674-674", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
4791 [code="address userAddress = addressMapping[i];", label="674_ address userAddress = addressMapping[i];\n4791-new_variable-675-675", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=new_variable];
4799 [code="User storage user = userMapping[userAddress];", label="675_ User storage user = userMapping[userAddress];\n4799-new_variable-676-676", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=new_variable];
4808 [code="if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }", label="676_ if_user.calcDynamicCommissionAmount > 0\n4808-if-677-680", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=if];
9676 [code="if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }", label="676_ end_if", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=end_if];
4815 [code="user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);", label="677_ user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n4815-expression_statement-678-678", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
4830 [code="addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);", label="678_ addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n4830-expression_statement-679-679", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
4841 [code="function sendto_txorigin13(address payable receiver, uint amount,address owner_txorigin13) public {\n	require (tx.origin == owner_txorigin13);\n	receiver.transfer(amount);\n}", label="682_ function sendto_txorigin13(address payable receiver, uint amount,address owner_txorigin13) public {\n	require (tx.origin == owner_txorigin13);\n	receiver.transfer(amount);\n}\n4841-function_definition-683-686", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=function_definition];
4857 [code="require (tx.origin == owner_txorigin13);", label="683_ require (tx.origin == owner_txorigin13);\n4857-expression_statement-684-684", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
4866 [code="receiver.transfer(amount);", label="684_ receiver.transfer(amount);\n4866-expression_statement-685-685", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
2;
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
77 -> 98  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
98 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
115 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
117 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 139  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
134 -> 5002  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5002 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 5002  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
139 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
163 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
190 -> 211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
211 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
228 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
230 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
257 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
303 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
535 -> 544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
560 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
620 -> 629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
641 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
702 -> 714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
714 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
781 -> 793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
793 -> 802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
823 -> 835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
835 -> 844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
865 -> 873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
892 -> 896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
896 -> 905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
905 -> 911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
911 -> 956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
961 -> 977  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
977 -> 986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 1016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1016 -> 1025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1032 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1035 -> 1047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1052 -> 1064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1066 -> 1076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 1088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1092 -> 1104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1104 -> 1113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1124 -> 1138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1138 -> 1148  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1138 -> 1152  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6006 -> 1171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1148 -> 6006  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1152 -> 1162  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1152 -> 1167  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1162 -> 6006  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1167 -> 6006  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1171 -> 1187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1187 -> 1196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1203 -> 1218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1239 -> 1255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1255 -> 1264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1271 -> 1286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1286 -> 1304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1304 -> 1314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1314 -> 1320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1320 -> 1325  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1320 -> 1329  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6188 -> 1338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1325 -> 6188  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1329 -> 1334  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1329 -> 6188  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1334 -> 6188  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1338 -> 1344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1365 -> 1381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1381 -> 1390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1399 -> 1417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1417 -> 1422  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1417 -> 1445  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1422 -> 1427  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1422 -> 1431  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6290 -> 1445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1427 -> 6290  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1431 -> 1436  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1431 -> 1441  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1436 -> 6290  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1441 -> 6290  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1445 -> 1450  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1445 -> 1474  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1450 -> 6285  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1450 -> 1455  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1450 -> 1459  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6318 -> 1474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1455 -> 6318  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1459 -> 1464  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1459 -> 1469  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1464 -> 6318  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1469 -> 6318  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1474 -> 6285  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1474 -> 1479  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1474 -> 1483  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6342 -> 1497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1479 -> 6342  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1483 -> 1488  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1483 -> 1493  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1488 -> 6342  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1493 -> 6342  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1497 -> 1513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1513 -> 1522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1529 -> 1548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1548 -> 1555  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1548 -> 1569  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1555 -> 1560  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1555 -> 1565  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6423 -> 1569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1560 -> 6423  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1565 -> 6423  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1569 -> 1576  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1569 -> 1600  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1576 -> 6416  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1576 -> 1581  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1576 -> 1585  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6444 -> 1600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1581 -> 6444  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1585 -> 1590  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1585 -> 1595  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1590 -> 6444  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1595 -> 6444  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1600 -> 6416  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1600 -> 1605  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1600 -> 1609  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6468 -> 1658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1605 -> 6468  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1609 -> 1614  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1609 -> 1618  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1614 -> 6468  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1618 -> 1623  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1618 -> 1627  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1623 -> 6468  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1627 -> 1636  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1627 -> 1640  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1636 -> 6468  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1640 -> 1649  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1640 -> 1654  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1649 -> 6468  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1654 -> 6468  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1658 -> 1674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1674 -> 1683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1690 -> 1705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1705 -> 1712  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1705 -> 1717  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6573 -> 1786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1712 -> 6573  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1717 -> 1735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1735 -> 1742  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1735 -> 6603  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6603 -> 1748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1742 -> 6603  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1748 -> 1766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1766 -> 1775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1775 -> 6573  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1786 -> 1802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1802 -> 1811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1820 -> 1840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1840 -> 1851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1851 -> 1865  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1851 -> 6719  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6719 -> 1882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1862 -> 1851  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1865 -> 1876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1876 -> 1862  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1895 -> 1907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1907 -> 1916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1927 -> 1943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1943 -> 1954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1954 -> 1968  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1954 -> 6822  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6822 -> 1985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1965 -> 1954  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1968 -> 1979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1979 -> 1965  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1996 -> 2004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2013 -> 2029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2029 -> 2040  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2040 -> 2054  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2040 -> 6908  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6908 -> 2071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2051 -> 2040  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2054 -> 2065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2065 -> 2051  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2082 -> 2090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2099 -> 2112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2112 -> 2121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2121 -> 2133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2133 -> 2151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2151 -> 2164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2164 -> 2173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2173 -> 2185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2185 -> 2209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2209 -> 2220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2220 -> 2229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2229 -> 2236  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2229 -> 2426  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2236 -> 2248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2248 -> 2260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2260 -> 2272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2272 -> 2284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2284 -> 2296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2296 -> 2308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2308 -> 2320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2320 -> 2333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2333 -> 2346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2346 -> 2352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2352 -> 2358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2358 -> 2364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2364 -> 2370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2370 -> 2381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2381 -> 2389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2389 -> 2395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2395 -> 2400  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2395 -> 7263  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7263 -> 2426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2400 -> 2406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2406 -> 2419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2419 -> 2395  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2426 -> 2476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2476 -> 2484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2484 -> 2493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2493 -> 2499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2499 -> 7097  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2499 -> 2504  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2499 -> 7367  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7367 -> 2560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2504 -> 2510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2510 -> 2523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2523 -> 2528  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2523 -> 7391  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7391 -> 2541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2528 -> 7391  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2541 -> 2554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2554 -> 2499  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2560 -> 2573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2573 -> 2582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2582 -> 2591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2591 -> 2605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2624 -> 2636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2636 -> 2645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2656 -> 2660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2660 -> 2671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2671 -> 2678  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2671 -> 7539  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7539 -> 2789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2678 -> 2686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2686 -> 2693  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2686 -> 7554  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7554 -> 2700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2693 -> 7554  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2700 -> 2709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2709 -> 2722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2722 -> 2728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2728 -> 2734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2734 -> 2740  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2740 -> 2746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2746 -> 2752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2752 -> 2758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2758 -> 2771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2771 -> 2780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2780 -> 7539  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2789 -> 2797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2806 -> 2810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2810 -> 2821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2821 -> 2829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2829 -> 2838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2838 -> 2851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2851 -> 2862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2862 -> 2872  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2862 -> 7730  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7730 -> 2988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2872 -> 2878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2878 -> 2884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2884 -> 2897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2897 -> 2910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2910 -> 2923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2923 -> 2936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2936 -> 2945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2945 -> 2954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2954 -> 2963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2963 -> 2968  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2963 -> 7831  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7831 -> 2979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2968 -> 7831  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2979 -> 7730  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2988 -> 3004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3004 -> 3013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3022 -> 3028  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3028 -> 3034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3034 -> 3039  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3034 -> 7902  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7902 -> 3061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3039 -> 3043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3043 -> 3052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3052 -> 7902  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3061 -> 3077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3077 -> 3086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3095 -> 3101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3101 -> 3107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3107 -> 3112  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3107 -> 7975  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7975 -> 3134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3112 -> 3116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3116 -> 3125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3125 -> 7975  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3134 -> 3146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3146 -> 3155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3166 -> 3177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3177 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3195 -> 3207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3207 -> 3216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3227 -> 3245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3245 -> 3254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3254 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3316 -> 3324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3333 -> 3353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3353 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3360 -> 3376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3376 -> 3385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3394 -> 3449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3449 -> 3460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3460 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3606 -> 3614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3623 -> 3678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3678 -> 3689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3689 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3790 -> 3806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3806 -> 3815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3824 -> 3879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3879 -> 3890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3890 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3991 -> 3999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4008 -> 4014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4014 -> 4028  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4014 -> 8882  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8882 -> 4045  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4025 -> 4014  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4028 -> 4039  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4039 -> 4025  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4045 -> 4059  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4045 -> 8913  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8913 -> 4288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4056 -> 4045  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4059 -> 4070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4070 -> 4077  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4070 -> 8938  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8938 -> 4056  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4077 -> 4095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4095 -> 4106  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4095 -> 8963  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4106 -> 4112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4112 -> 4120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4120 -> 4125  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4120 -> 8988  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8988 -> 4056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4125 -> 4134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4134 -> 4141  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4134 -> 9002  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4141 -> 4152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4152 -> 4157  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4152 -> 9020  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9020 -> 4273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4157 -> 4165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4165 -> 4172  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4165 -> 9033  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9033 -> 4178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4172 -> 9033  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4178 -> 4189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4189 -> 4198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4198 -> 4205  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4198 -> 4223  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9066 -> 4260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4205 -> 9066  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4223 -> 4230  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4223 -> 4249  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4230 -> 9066  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4249 -> 9066  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4260 -> 9020  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4273 -> 4279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4279 -> 4120  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4288 -> 4302  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4288 -> 9156  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9156 -> 4352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4299 -> 4288  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4302 -> 4310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4310 -> 4319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4319 -> 4326  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4319 -> 9187  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9187 -> 4299  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
9187 -> 4299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
4326 -> 4341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4341 -> 9187  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4352 -> 4368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4368 -> 4377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4384 -> 4398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4398 -> 4415  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4398 -> 9266  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9266 -> 4432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4412 -> 4398  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4415 -> 4426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4426 -> 4412  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4432 -> 4448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4448 -> 4457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4466 -> 4480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4480 -> 4497  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4480 -> 9348  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9348 -> 4726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4494 -> 4480  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4497 -> 4508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4508 -> 4515  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4508 -> 9376  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9376 -> 4494  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4515 -> 4533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4533 -> 4544  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4533 -> 9401  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4544 -> 4550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4550 -> 4558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4558 -> 4563  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4558 -> 9426  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9426 -> 4494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4563 -> 4572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4572 -> 4579  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4572 -> 9440  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4579 -> 4590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4590 -> 4595  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4590 -> 9458  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9458 -> 4711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4595 -> 4603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4603 -> 4610  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4603 -> 9471  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9471 -> 4616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4610 -> 9471  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4616 -> 4627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4627 -> 4636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4636 -> 4643  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4636 -> 4661  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9504 -> 4698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4643 -> 9504  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4661 -> 4668  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4661 -> 4687  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4668 -> 9504  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4687 -> 9504  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4698 -> 9458  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4711 -> 4717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4717 -> 4558  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4726 -> 4742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4742 -> 4751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4760 -> 4774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4774 -> 4791  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4774 -> 9642  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9642 -> 4841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4788 -> 4774  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4791 -> 4799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4799 -> 4808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4808 -> 4815  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4808 -> 9676  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9676 -> 4788  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
9676 -> 4788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
4815 -> 4830  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4830 -> 9676  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4841 -> 4857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4857 -> 4866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
