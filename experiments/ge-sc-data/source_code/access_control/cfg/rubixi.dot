digraph  {
13 [code="uint private balance = 0;", label="2_ uint private balance = 0;\n13-new_variable-3-3", method="", type_label=new_variable];
19 [code="uint private collectedFees = 0;", label="3_ uint private collectedFees = 0;\n19-new_variable-4-4", method="", type_label=new_variable];
25 [code="uint private feePercent = 10;", label="4_ uint private feePercent = 10;\n25-new_variable-5-5", method="", type_label=new_variable];
31 [code="uint private pyramidMultiplier = 300;", label="5_ uint private pyramidMultiplier = 300;\n31-new_variable-6-6", method="", type_label=new_variable];
37 [code="uint private payoutOrder = 0;", label="6_ uint private payoutOrder = 0;\n37-new_variable-7-7", method="", type_label=new_variable];
43 [code="address private creator;", label="7_ address private creator;\n43-new_variable-8-8", method="", type_label=new_variable];
48 [code="function DynamicPyramid() {\n                 creator = msg.sender;  \n         }", label="8_ function DynamicPyramid() {\n                 creator = msg.sender;  \n         }\n48-function_definition-9-11", method="DynamicPyramid()", type_label=function_definition];
51 [code="creator = msg.sender;", label="9_ creator = msg.sender;\n51-expression_statement-10-10", method="DynamicPyramid()", type_label=expression_statement];
57 [code="modifier onlyowner {\n                 if (msg.sender == creator) _;\n         }", label="11_ modifier onlyowner {\n                 if (msg.sender == creator) _;\n         }\n57-expression_statement-12-14", method="", type_label=expression_statement];
60 [code="if (msg.sender == creator) _;", label="12_ if_msg.sender == creator\n60-if-13-13", method="", type_label=if];
645 [code="if (msg.sender == creator) _;", label="12_ end_if", method="", type_label=end_if];
66 [code="_;", label="12_ _;\n66-expression_statement-13-13", method="", type_label=expression_statement];
68 [code="struct Participant {\n                 address etherAddress;\n                 uint payout;\n         }", label="14_ struct Participant {\n                 address etherAddress;\n                 uint payout;\n         }\n68-expression_statement-15-18", method="Participant()", type_label=expression_statement];
78 [code="Participant[] private participants;", label="18_ Participant[] private participants;\n78-new_variable-19-19", method="", type_label=new_variable];
87 [code="init();", label="20_ init();\n87-expression_statement-21-21", method="", type_label=expression_statement];
90 [code="function init() private {\n                 if (msg.value < 1 ether) {\n                         collectedFees += msg.value;\n                         return;\n                 }\n                 uint _fee = feePercent;\n                 if (msg.value >= 50 ether) _fee /= 2;\n                 addPayout(_fee);\n         }", label="22_ function init() private {\n                 if (msg.value < 1 ether) {\n                         collectedFees += msg.value;\n                         return;\n                 }\n                 uint _fee = feePercent;\n                 if (msg.value >= 50 ether) _fee /= 2;\n                 addPayout(_fee);\n         }\n90-function_definition-23-31", method="init()", type_label=function_definition];
94 [code="if (msg.value < 1 ether) {\n                         collectedFees += msg.value;\n                         return;\n                 }", label="23_ if_msg.value < 1 ether\n94-if-24-27", method="init()", type_label=if];
679 [code="if (msg.value < 1 ether) {\n                         collectedFees += msg.value;\n                         return;\n                 }", label="23_ end_if", method="init()", type_label=end_if];
102 [code="collectedFees += msg.value;", label="24_ collectedFees += msg.value;\n102-expression_statement-25-25", method="init()", type_label=expression_statement];
108 [code="return;", label="25_ return;\n108-return-26-26", method="init()", type_label=return];
109 [code="uint _fee = feePercent;", label="27_ uint _fee = feePercent;\n109-new_variable-28-28", method="init()", type_label=new_variable];
115 [code="if (msg.value >= 50 ether) _fee /= 2;", label="28_ if_msg.value >= 50 ether\n115-if-29-29", method="init()", type_label=if];
700 [code="if (msg.value >= 50 ether) _fee /= 2;", label="28_ end_if", method="init()", type_label=end_if];
122 [code="_fee /= 2;", label="28_ _fee /= 2;\n122-expression_statement-29-29", method="init()", type_label=expression_statement];
126 [code="addPayout(_fee);", label="29_ addPayout(_fee);\n126-expression_statement-30-30", method="init()", type_label=expression_statement];
131 [code="function addPayout(uint _fee) private {\n                 participants.push(Participant(msg.sender, (msg.value * pyramidMultiplier) / 100));\n                 if (participants.length == 10) pyramidMultiplier = 200;\n                 else if (participants.length == 25) pyramidMultiplier = 150;\n                 balance += (msg.value * (100 - _fee)) / 100;\n                 collectedFees += (msg.value * _fee) / 100;\n                 while (balance > participants[payoutOrder].payout) {\n                         uint payoutToSend = participants[payoutOrder].payout;\n                         participants[payoutOrder].etherAddress.send(payoutToSend);\n                         balance -= participants[payoutOrder].payout;\n                         payoutOrder += 1;\n                 }\n         }", label="31_ function addPayout(uint _fee) private {\n                 participants.push(Participant(msg.sender, (msg.value * pyramidMultiplier) / 100));\n                 if (participants.length == 10) pyramidMultiplier = 200;\n                 else if (participants.length == 25) pyramidMultiplier = 150;\n                 balance += (msg.value * (100 - _fee)) / 100;\n                 collectedFees += (msg.value * _fee) / 100;\n                 while (balance > participants[payoutOrder].payout) {\n                         uint payoutToSend = participants[payoutOrder].payout;\n                         participants[payoutOrder].etherAddress.send(payoutToSend);\n                         balance -= participants[payoutOrder].payout;\n                         payoutOrder += 1;\n                 }\n         }\n131-function_definition-32-44", method="addPayout(uint _fee)", type_label=function_definition];
139 [code="participants.push(Participant(msg.sender, (msg.value * pyramidMultiplier) / 100));", label="32_ participants.push(Participant(msg.sender, (msg.value * pyramidMultiplier) / 100));\n139-expression_statement-33-33", method="addPayout(uint _fee)", type_label=expression_statement];
160 [code="if (participants.length == 10) pyramidMultiplier = 200;\n                 else if (participants.length == 25) pyramidMultiplier = 150;", label="33_ if_participants.length == 10\n160-if-34-35", method="addPayout(uint _fee)", type_label=if];
745 [code="if (participants.length == 25) pyramidMultiplier = 150;", label="33_ end_if", method="addPayout(uint _fee)", type_label=end_if];
166 [code="pyramidMultiplier = 200;", label="33_ pyramidMultiplier = 200;\n166-expression_statement-34-34", method="addPayout(uint _fee)", type_label=expression_statement];
170 [code="if (participants.length == 25) pyramidMultiplier = 150;", label="34_ if_participants.length == 25\n170-if-35-35", method="addPayout(uint _fee)", type_label=if];
176 [code="pyramidMultiplier = 150;", label="34_ pyramidMultiplier = 150;\n176-expression_statement-35-35", method="addPayout(uint _fee)", type_label=expression_statement];
180 [code="balance += (msg.value * (100 - _fee)) / 100;", label="35_ balance += (msg.value * (100 - _fee)) / 100;\n180-expression_statement-36-36", method="addPayout(uint _fee)", type_label=expression_statement];
194 [code="collectedFees += (msg.value * _fee) / 100;", label="36_ collectedFees += (msg.value * _fee) / 100;\n194-expression_statement-37-37", method="addPayout(uint _fee)", type_label=expression_statement];
205 [code="while (balance > participants[payoutOrder].payout) {\n                         uint payoutToSend = participants[payoutOrder].payout;\n                         participants[payoutOrder].etherAddress.send(payoutToSend);\n                         balance -= participants[payoutOrder].payout;\n                         payoutOrder += 1;\n                 }", label="37_ while\n205-while-38-43", method="addPayout(uint _fee)", type_label=while];
790 [code="while (balance > participants[payoutOrder].payout) {\n                         uint payoutToSend = participants[payoutOrder].payout;\n                         participants[payoutOrder].etherAddress.send(payoutToSend);\n                         balance -= participants[payoutOrder].payout;\n                         payoutOrder += 1;\n                 }", label="37_ end_loop", method="addPayout(uint _fee)", type_label=end_loop];
214 [code="uint payoutToSend = participants[payoutOrder].payout;", label="38_ uint payoutToSend = participants[payoutOrder].payout;\n214-new_variable-39-39", method="addPayout(uint _fee)", type_label=new_variable];
224 [code="participants[payoutOrder].etherAddress.send(payoutToSend);", label="39_ participants[payoutOrder].etherAddress.send(payoutToSend);\n224-expression_statement-40-40", method="addPayout(uint _fee)", type_label=expression_statement];
235 [code="balance -= participants[payoutOrder].payout;", label="40_ balance -= participants[payoutOrder].payout;\n235-expression_statement-41-41", method="addPayout(uint _fee)", type_label=expression_statement];
243 [code="payoutOrder += 1;", label="41_ payoutOrder += 1;\n243-expression_statement-42-42", method="addPayout(uint _fee)", type_label=expression_statement];
247 [code="function collectAllFees() onlyowner {\n                 if (collectedFees == 0) throw;\n                 creator.send(collectedFees);\n                 collectedFees = 0;\n         }", label="44_ function collectAllFees() onlyowner {\n                 if (collectedFees == 0) throw;\n                 creator.send(collectedFees);\n                 collectedFees = 0;\n         }\n247-function_definition-45-49", method="collectAllFees()", type_label=function_definition];
249 [code=onlyowner, label="44_ onlyowner\n249-expression_statement-45-45", method="collectAllFees()", type_label=expression_statement];
252 [code="if (collectedFees == 0) throw;", label="45_ if_collectedFees == 0\n252-if-46-46", method="collectAllFees()", type_label=if];
837 [code="if (collectedFees == 0) throw;", label="45_ end_if", method="collectAllFees()", type_label=end_if];
256 [code="throw;", label="45_ throw;\n256-expression_statement-46-46", method="collectAllFees()", type_label=expression_statement];
258 [code="creator.send(collectedFees);", label="46_ creator.send(collectedFees);\n258-expression_statement-47-47", method="collectAllFees()", type_label=expression_statement];
265 [code="collectedFees = 0;", label="47_ collectedFees = 0;\n265-expression_statement-48-48", method="collectAllFees()", type_label=expression_statement];
269 [code="function collectFeesInEther(uint _amt) onlyowner {\n                 _amt *= 1 ether;\n                 if (_amt > collectedFees) collectAllFees();\n                 if (collectedFees == 0) throw;\n                 creator.send(_amt);\n                 collectedFees -= _amt;\n         }", label="49_ function collectFeesInEther(uint _amt) onlyowner {\n                 _amt *= 1 ether;\n                 if (_amt > collectedFees) collectAllFees();\n                 if (collectedFees == 0) throw;\n                 creator.send(_amt);\n                 collectedFees -= _amt;\n         }\n269-function_definition-50-56", method="collectFeesInEther(uint _amt)", type_label=function_definition];
275 [code=onlyowner, label="49_ onlyowner\n275-expression_statement-50-50", method="collectFeesInEther(uint _amt)", type_label=expression_statement];
278 [code="_amt *= 1 ether;", label="50_ _amt *= 1 ether;\n278-expression_statement-51-51", method="collectFeesInEther(uint _amt)", type_label=expression_statement];
283 [code="if (_amt > collectedFees) collectAllFees();", label="51_ if__amt > collectedFees\n283-if-52-52", method="collectFeesInEther(uint _amt)", type_label=if];
868 [code="if (_amt > collectedFees) collectAllFees();", label="51_ end_if", method="collectFeesInEther(uint _amt)", type_label=end_if];
287 [code="collectAllFees();", label="51_ collectAllFees();\n287-expression_statement-52-52", method="collectFeesInEther(uint _amt)", type_label=expression_statement];
290 [code="if (collectedFees == 0) throw;", label="52_ if_collectedFees == 0\n290-if-53-53", method="collectFeesInEther(uint _amt)", type_label=if];
875 [code="if (collectedFees == 0) throw;", label="52_ end_if", method="collectFeesInEther(uint _amt)", type_label=end_if];
294 [code="throw;", label="52_ throw;\n294-expression_statement-53-53", method="collectFeesInEther(uint _amt)", type_label=expression_statement];
296 [code="creator.send(_amt);", label="53_ creator.send(_amt);\n296-expression_statement-54-54", method="collectFeesInEther(uint _amt)", type_label=expression_statement];
303 [code="collectedFees -= _amt;", label="54_ collectedFees -= _amt;\n303-expression_statement-55-55", method="collectFeesInEther(uint _amt)", type_label=expression_statement];
307 [code="function collectPercentOfFees(uint _pcent) onlyowner {\n                 if (collectedFees == 0 || _pcent > 100) throw;\n                 uint feesToCollect = collectedFees / 100 * _pcent;\n                 creator.send(feesToCollect);\n                 collectedFees -= feesToCollect;\n         }", label="56_ function collectPercentOfFees(uint _pcent) onlyowner {\n                 if (collectedFees == 0 || _pcent > 100) throw;\n                 uint feesToCollect = collectedFees / 100 * _pcent;\n                 creator.send(feesToCollect);\n                 collectedFees -= feesToCollect;\n         }\n307-function_definition-57-62", method="collectPercentOfFees(uint _pcent)", type_label=function_definition];
313 [code=onlyowner, label="56_ onlyowner\n313-expression_statement-57-57", method="collectPercentOfFees(uint _pcent)", type_label=expression_statement];
316 [code="if (collectedFees == 0 || _pcent > 100) throw;", label="57_ if_collectedFees == 0 || _pcent > 100\n316-if-58-58", method="collectPercentOfFees(uint _pcent)", type_label=if];
901 [code="if (collectedFees == 0 || _pcent > 100) throw;", label="57_ end_if", method="collectPercentOfFees(uint _pcent)", type_label=end_if];
324 [code="throw;", label="57_ throw;\n324-expression_statement-58-58", method="collectPercentOfFees(uint _pcent)", type_label=expression_statement];
326 [code="uint feesToCollect = collectedFees / 100 * _pcent;", label="58_ uint feesToCollect = collectedFees / 100 * _pcent;\n326-new_variable-59-59", method="collectPercentOfFees(uint _pcent)", type_label=new_variable];
336 [code="creator.send(feesToCollect);", label="59_ creator.send(feesToCollect);\n336-expression_statement-60-60", method="collectPercentOfFees(uint _pcent)", type_label=expression_statement];
343 [code="collectedFees -= feesToCollect;", label="60_ collectedFees -= feesToCollect;\n343-expression_statement-61-61", method="collectPercentOfFees(uint _pcent)", type_label=expression_statement];
347 [code="function changeOwner(address _owner) onlyowner {\n                 creator = _owner;\n         }", label="62_ function changeOwner(address _owner) onlyowner {\n                 creator = _owner;\n         }\n347-function_definition-63-65", method="changeOwner(address _owner)", type_label=function_definition];
353 [code=onlyowner, label="62_ onlyowner\n353-expression_statement-63-63", method="changeOwner(address _owner)", type_label=expression_statement];
356 [code="creator = _owner;", label="63_ creator = _owner;\n356-expression_statement-64-64", method="changeOwner(address _owner)", type_label=expression_statement];
360 [code="function changeMultiplier(uint _mult) onlyowner {\n                 if (_mult > 300 || _mult < 120) throw;\n                 pyramidMultiplier = _mult;\n         }", label="65_ function changeMultiplier(uint _mult) onlyowner {\n                 if (_mult > 300 || _mult < 120) throw;\n                 pyramidMultiplier = _mult;\n         }\n360-function_definition-66-69", method="changeMultiplier(uint _mult)", type_label=function_definition];
366 [code=onlyowner, label="65_ onlyowner\n366-expression_statement-66-66", method="changeMultiplier(uint _mult)", type_label=expression_statement];
369 [code="if (_mult > 300 || _mult < 120) throw;", label="66_ if__mult > 300 || _mult < 120\n369-if-67-67", method="changeMultiplier(uint _mult)", type_label=if];
954 [code="if (_mult > 300 || _mult < 120) throw;", label="66_ end_if", method="changeMultiplier(uint _mult)", type_label=end_if];
377 [code="throw;", label="66_ throw;\n377-expression_statement-67-67", method="changeMultiplier(uint _mult)", type_label=expression_statement];
379 [code="pyramidMultiplier = _mult;", label="67_ pyramidMultiplier = _mult;\n379-expression_statement-68-68", method="changeMultiplier(uint _mult)", type_label=expression_statement];
383 [code="function changeFeePercentage(uint _fee) onlyowner {\n                 if (_fee > 10) throw;\n                 feePercent = _fee;\n         }", label="69_ function changeFeePercentage(uint _fee) onlyowner {\n                 if (_fee > 10) throw;\n                 feePercent = _fee;\n         }\n383-function_definition-70-73", method="changeFeePercentage(uint _fee)", type_label=function_definition];
389 [code=onlyowner, label="69_ onlyowner\n389-expression_statement-70-70", method="changeFeePercentage(uint _fee)", type_label=expression_statement];
392 [code="if (_fee > 10) throw;", label="70_ if__fee > 10\n392-if-71-71", method="changeFeePercentage(uint _fee)", type_label=if];
977 [code="if (_fee > 10) throw;", label="70_ end_if", method="changeFeePercentage(uint _fee)", type_label=end_if];
396 [code="throw;", label="70_ throw;\n396-expression_statement-71-71", method="changeFeePercentage(uint _fee)", type_label=expression_statement];
398 [code="feePercent = _fee;", label="71_ feePercent = _fee;\n398-expression_statement-72-72", method="changeFeePercentage(uint _fee)", type_label=expression_statement];
402 [code="function currentMultiplier() constant returns(uint multiplier, string info) {\n                 multiplier = pyramidMultiplier;\n                 info = 'This multiplier applies to you as soon as transaction is received, may be lowered to hasten payouts or increased if payouts are fast enough. Due to no float or decimals, multiplier is x100 for a fractional multiplier e.g. 250 is actually a 2.5x multiplier. Capped at 3x max and 1.2x min.';\n         }", label="73_ function currentMultiplier() constant returns(uint multiplier, string info) {\n                 multiplier = pyramidMultiplier;\n                 info = 'This multiplier applies to you as soon as transaction is received, may be lowered to hasten payouts or increased if payouts are fast enough. Due to no float or decimals, multiplier is x100 for a fractional multiplier e.g. 250 is actually a 2.5x multiplier. Capped at 3x max and 1.2x min.';\n         }\n402-function_definition-74-77", method="currentMultiplier()", type_label=function_definition];
404 [code=constant, label="73_ constant\n404-expression_statement-74-74", method="currentMultiplier()", type_label=expression_statement];
416 [code="multiplier = pyramidMultiplier;", label="74_ multiplier = pyramidMultiplier;\n416-expression_statement-75-75", method="currentMultiplier()", type_label=expression_statement];
420 [code="info = 'This multiplier applies to you as soon as transaction is received, may be lowered to hasten payouts or increased if payouts are fast enough. Due to no float or decimals, multiplier is x100 for a fractional multiplier e.g. 250 is actually a 2.5x multiplier. Capped at 3x max and 1.2x min.';", label="75_ info = 'This multiplier applies to you as soon as transaction is received, may be lowered to hasten payouts or increased if payouts are fast enough. Due to no float or decimals, multiplier is x100 for a fractional multiplier e.g. 250 is actually a 2.5x multiplier. Capped at 3x max and 1.2x min.';\n420-expression_statement-76-76", method="currentMultiplier()", type_label=expression_statement];
425 [code="function currentFeePercentage() constant returns(uint fee, string info) {\n                 fee = feePercent;\n                 info = 'Shown in % form. Fee is halved(50%) for amounts equal or greater than 50 ethers. (Fee may change, but is capped to a maximum of 10%)';\n         }", label="77_ function currentFeePercentage() constant returns(uint fee, string info) {\n                 fee = feePercent;\n                 info = 'Shown in % form. Fee is halved(50%) for amounts equal or greater than 50 ethers. (Fee may change, but is capped to a maximum of 10%)';\n         }\n425-function_definition-78-81", method="currentFeePercentage()", type_label=function_definition];
427 [code=constant, label="77_ constant\n427-expression_statement-78-78", method="currentFeePercentage()", type_label=expression_statement];
439 [code="fee = feePercent;", label="78_ fee = feePercent;\n439-expression_statement-79-79", method="currentFeePercentage()", type_label=expression_statement];
443 [code="info = 'Shown in % form. Fee is halved(50%) for amounts equal or greater than 50 ethers. (Fee may change, but is capped to a maximum of 10%)';", label="79_ info = 'Shown in % form. Fee is halved(50%) for amounts equal or greater than 50 ethers. (Fee may change, but is capped to a maximum of 10%)';\n443-expression_statement-80-80", method="currentFeePercentage()", type_label=expression_statement];
448 [code="function currentPyramidBalanceApproximately() constant returns(uint pyramidBalance, string info) {\n                 pyramidBalance = balance / 1 ether;\n                 info = 'All balance values are measured in Ethers, note that due to no decimal placing, these values show up as integers only, within the contract itself you will get the exact decimal value you are supposed to';\n         }", label="81_ function currentPyramidBalanceApproximately() constant returns(uint pyramidBalance, string info) {\n                 pyramidBalance = balance / 1 ether;\n                 info = 'All balance values are measured in Ethers, note that due to no decimal placing, these values show up as integers only, within the contract itself you will get the exact decimal value you are supposed to';\n         }\n448-function_definition-82-85", method="currentPyramidBalanceApproximately()", type_label=function_definition];
450 [code=constant, label="81_ constant\n450-expression_statement-82-82", method="currentPyramidBalanceApproximately()", type_label=expression_statement];
462 [code="pyramidBalance = balance / 1 ether;", label="82_ pyramidBalance = balance / 1 ether;\n462-expression_statement-83-83", method="currentPyramidBalanceApproximately()", type_label=expression_statement];
469 [code="info = 'All balance values are measured in Ethers, note that due to no decimal placing, these values show up as integers only, within the contract itself you will get the exact decimal value you are supposed to';", label="83_ info = 'All balance values are measured in Ethers, note that due to no decimal placing, these values show up as integers only, within the contract itself you will get the exact decimal value you are supposed to';\n469-expression_statement-84-84", method="currentPyramidBalanceApproximately()", type_label=expression_statement];
474 [code="function nextPayoutWhenPyramidBalanceTotalsApproximately() constant returns(uint balancePayout) {\n                 balancePayout = participants[payoutOrder].payout / 1 ether;\n         }", label="85_ function nextPayoutWhenPyramidBalanceTotalsApproximately() constant returns(uint balancePayout) {\n                 balancePayout = participants[payoutOrder].payout / 1 ether;\n         }\n474-function_definition-86-88", method="nextPayoutWhenPyramidBalanceTotalsApproximately()", type_label=function_definition];
476 [code=constant, label="85_ constant\n476-expression_statement-86-86", method="nextPayoutWhenPyramidBalanceTotalsApproximately()", type_label=expression_statement];
484 [code="balancePayout = participants[payoutOrder].payout / 1 ether;", label="86_ balancePayout = participants[payoutOrder].payout / 1 ether;\n484-expression_statement-87-87", method="nextPayoutWhenPyramidBalanceTotalsApproximately()", type_label=expression_statement];
495 [code="function feesSeperateFromBalanceApproximately() constant returns(uint fees) {\n                 fees = collectedFees / 1 ether;\n         }", label="88_ function feesSeperateFromBalanceApproximately() constant returns(uint fees) {\n                 fees = collectedFees / 1 ether;\n         }\n495-function_definition-89-91", method="feesSeperateFromBalanceApproximately()", type_label=function_definition];
497 [code=constant, label="88_ constant\n497-expression_statement-89-89", method="feesSeperateFromBalanceApproximately()", type_label=expression_statement];
505 [code="fees = collectedFees / 1 ether;", label="89_ fees = collectedFees / 1 ether;\n505-expression_statement-90-90", method="feesSeperateFromBalanceApproximately()", type_label=expression_statement];
512 [code="function totalParticipants() constant returns(uint count) {\n                 count = participants.length;\n         }", label="91_ function totalParticipants() constant returns(uint count) {\n                 count = participants.length;\n         }\n512-function_definition-92-94", method="totalParticipants()", type_label=function_definition];
514 [code=constant, label="91_ constant\n514-expression_statement-92-92", method="totalParticipants()", type_label=expression_statement];
522 [code="count = participants.length;", label="92_ count = participants.length;\n522-expression_statement-93-93", method="totalParticipants()", type_label=expression_statement];
528 [code="function numberOfParticipantsWaitingForPayout() constant returns(uint count) {\n                 count = participants.length - payoutOrder;\n         }", label="94_ function numberOfParticipantsWaitingForPayout() constant returns(uint count) {\n                 count = participants.length - payoutOrder;\n         }\n528-function_definition-95-97", method="numberOfParticipantsWaitingForPayout()", type_label=function_definition];
530 [code=constant, label="94_ constant\n530-expression_statement-95-95", method="numberOfParticipantsWaitingForPayout()", type_label=expression_statement];
538 [code="count = participants.length - payoutOrder;", label="95_ count = participants.length - payoutOrder;\n538-expression_statement-96-96", method="numberOfParticipantsWaitingForPayout()", type_label=expression_statement];
546 [code="function participantDetails(uint orderInPyramid) constant returns(address Address, uint Payout) {\n                 if (orderInPyramid <= participants.length) {\n                         Address = participants[orderInPyramid].etherAddress;\n                         Payout = participants[orderInPyramid].payout / 1 ether;\n                 }\n         }", label="97_ function participantDetails(uint orderInPyramid) constant returns(address Address, uint Payout) {\n                 if (orderInPyramid <= participants.length) {\n                         Address = participants[orderInPyramid].etherAddress;\n                         Payout = participants[orderInPyramid].payout / 1 ether;\n                 }\n         }\n546-function_definition-98-103", method="participantDetails(uint orderInPyramid)", type_label=function_definition];
552 [code=constant, label="97_ constant\n552-expression_statement-98-98", method="participantDetails(uint orderInPyramid)", type_label=expression_statement];
564 [code="if (orderInPyramid <= participants.length) {\n                         Address = participants[orderInPyramid].etherAddress;\n                         Payout = participants[orderInPyramid].payout / 1 ether;\n                 }", label="98_ if_orderInPyramid <= participants.length\n564-if-99-102", method="participantDetails(uint orderInPyramid)", type_label=if];
1149 [code="if (orderInPyramid <= participants.length) {\n                         Address = participants[orderInPyramid].etherAddress;\n                         Payout = participants[orderInPyramid].payout / 1 ether;\n                 }", label="98_ end_if", method="participantDetails(uint orderInPyramid)", type_label=end_if];
571 [code="Address = participants[orderInPyramid].etherAddress;", label="99_ Address = participants[orderInPyramid].etherAddress;\n571-expression_statement-100-100", method="participantDetails(uint orderInPyramid)", type_label=expression_statement];
579 [code="Payout = participants[orderInPyramid].payout / 1 ether;", label="100_ Payout = participants[orderInPyramid].payout / 1 ether;\n579-expression_statement-101-101", method="participantDetails(uint orderInPyramid)", type_label=expression_statement];
2;
13 -> 19  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
19 -> 25  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
25 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
37 -> 43  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 51  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
57 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
60 -> 66  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
60 -> 645  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
645 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
66 -> 645  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
68 -> 78  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
90 -> 94  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
94 -> 102  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
94 -> 679  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
679 -> 109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
102 -> 108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
108 -> 679  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
108 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
109 -> 115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
115 -> 122  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
115 -> 700  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
700 -> 126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 700  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
131 -> 139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 166  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
160 -> 170  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
745 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
166 -> 745  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
170 -> 176  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
170 -> 745  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
176 -> 745  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
180 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
194 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
205 -> 214  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
205 -> 790  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
790 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
224 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
235 -> 243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
243 -> 205  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
247 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 256  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
252 -> 837  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
837 -> 258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
256 -> 837  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
258 -> 265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
283 -> 287  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
283 -> 868  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
868 -> 290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 868  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
290 -> 294  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
290 -> 875  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
875 -> 296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 875  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
296 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
307 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
316 -> 324  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
316 -> 901  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
901 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
324 -> 901  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
326 -> 336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
336 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
347 -> 356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
360 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
369 -> 377  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
369 -> 954  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
954 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 954  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
383 -> 392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
392 -> 396  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
392 -> 977  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
977 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 977  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
402 -> 416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
416 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
425 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
448 -> 462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
462 -> 469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
474 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
546 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 571  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
564 -> 1149  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1149 -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
571 -> 579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 1149  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
