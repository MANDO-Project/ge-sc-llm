digraph "" {
	node [label="\N"];
	0	[contract_name=IERC20,
		function_fullname="totalSupply()",
		label="buggy_27.sol_IERC20_totalSupply()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[8]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	1	[contract_name=IERC20,
		function_fullname="balanceOf(address)",
		label="buggy_27.sol_IERC20_balanceOf(address)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[9]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	2	[contract_name=IERC20,
		function_fullname="allowance(address,address)",
		label="buggy_27.sol_IERC20_allowance(address,address)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[10]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	3	[contract_name=IERC20,
		function_fullname="transfer(address,uint256)",
		label="buggy_27.sol_IERC20_transfer(address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[11]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	4	[contract_name=IERC20,
		function_fullname="approve(address,uint256)",
		label="buggy_27.sol_IERC20_approve(address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[12]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	5	[contract_name=IERC20,
		function_fullname="transferFrom(address,address,uint256)",
		label="buggy_27.sol_IERC20_transferFrom(address,address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[13]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	6	[contract_name=SafeMath,
		function_fullname="mul(uint256,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[20, 21, 22, 23, 24, 25, 26, 27]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	7	[contract_name=SafeMath,
		function_fullname="mul(uint256,uint256)",
		label="Node Type: IF

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0",
		node_expression="a == 0",
		node_info_vulnerabilities=None,
		node_irs="TMP_0(bool) = a == 0
CONDITION TMP_0",
		node_source_code_lines="[21]",
		node_type=IF,
		source_file="buggy_27.sol"];
	6 -> 7	[key=0,
		edge_type=next,
		label=Next];
	8	[contract_name=SafeMath,
		function_fullname="mul(uint256,uint256)",
		label="Node Type: RETURN

EXPRESSION:
0

IRs:
RETURN 0",
		node_expression=0,
		node_info_vulnerabilities=None,
		node_irs="RETURN 0",
		node_source_code_lines="[22]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	7 -> 8	[key=0,
		edge_type=if_true,
		label=True];
	9	[contract_name=SafeMath,
		function_fullname="mul(uint256,uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[21, 22, 23]",
		node_type=END_IF,
		source_file="buggy_27.sol"];
	7 -> 9	[key=0,
		edge_type=if_false,
		label=False];
	10	[contract_name=SafeMath,
		function_fullname="mul(uint256,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)",
		node_expression="c = a * b",
		node_info_vulnerabilities=None,
		node_irs="TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)",
		node_source_code_lines="[24]",
		node_type="NEW VARIABLE",
		source_file="buggy_27.sol"];
	9 -> 10	[key=0,
		edge_type=next,
		label=Next];
	11	[contract_name=SafeMath,
		function_fullname="mul(uint256,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = \
SOLIDITY_CALL assert(bool)(TMP_3)",
		node_expression="assert(bool)(c / a == b)",
		node_info_vulnerabilities=None,
		node_irs="TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)",
		node_source_code_lines="[25]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	10 -> 11	[key=0,
		edge_type=next,
		label=Next];
	12	[contract_name=SafeMath,
		function_fullname="mul(uint256,uint256)",
		label="Node Type: RETURN

EXPRESSION:
c

IRs:
RETURN c",
		node_expression=c,
		node_info_vulnerabilities=None,
		node_irs="RETURN c",
		node_source_code_lines="[26]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	11 -> 12	[key=0,
		edge_type=next,
		label=Next];
	13	[contract_name=SafeMath,
		function_fullname="mul(uint256,uint256)",
		label="buggy_27.sol_SafeMath_mul(uint256,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[20, 21, 22, 23, 24, 25, 26, 27]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	13 -> 6	[key=0,
		edge_type=next,
		label=Next];
	14	[contract_name=SafeMath,
		function_fullname="div(uint256,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[29, 30, 31, 32]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	15	[contract_name=SafeMath,
		function_fullname="div(uint256,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)",
		node_expression="c = a / b",
		node_info_vulnerabilities=None,
		node_irs="TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)",
		node_source_code_lines="[30]",
		node_type="NEW VARIABLE",
		source_file="buggy_27.sol"];
	14 -> 15	[key=0,
		edge_type=next,
		label=Next];
	16	[contract_name=SafeMath,
		function_fullname="div(uint256,uint256)",
		label="Node Type: RETURN

EXPRESSION:
c

IRs:
RETURN c",
		node_expression=c,
		node_info_vulnerabilities=None,
		node_irs="RETURN c",
		node_source_code_lines="[31]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	15 -> 16	[key=0,
		edge_type=next,
		label=Next];
	17	[contract_name=SafeMath,
		function_fullname="div(uint256,uint256)",
		label="buggy_27.sol_SafeMath_div(uint256,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[29, 30, 31, 32]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	17 -> 14	[key=0,
		edge_type=next,
		label=Next];
	18	[contract_name=SafeMath,
		function_fullname="sub(uint256,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[34, 35, 36, 37]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	19	[contract_name=SafeMath,
		function_fullname="sub(uint256,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_\
6)",
		node_expression="assert(bool)(b <= a)",
		node_info_vulnerabilities=None,
		node_irs="TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)",
		node_source_code_lines="[35]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	18 -> 19	[key=0,
		edge_type=next,
		label=Next];
	20	[contract_name=SafeMath,
		function_fullname="sub(uint256,uint256)",
		label="Node Type: RETURN

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8",
		node_expression="a - b",
		node_info_vulnerabilities=None,
		node_irs="TMP_8(uint256) = a - b
RETURN TMP_8",
		node_source_code_lines="[36]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	19 -> 20	[key=0,
		edge_type=next,
		label=Next];
	21	[contract_name=SafeMath,
		function_fullname="sub(uint256,uint256)",
		label="buggy_27.sol_SafeMath_sub(uint256,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[34, 35, 36, 37]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	21 -> 18	[key=0,
		edge_type=next,
		label=Next];
	22	[contract_name=SafeMath,
		function_fullname="add(uint256,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[39, 40, 41, 42, 43]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	23	[contract_name=SafeMath,
		function_fullname="add(uint256,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)",
		node_expression="c = a + b",
		node_info_vulnerabilities=None,
		node_irs="TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)",
		node_source_code_lines="[40]",
		node_type="NEW VARIABLE",
		source_file="buggy_27.sol"];
	22 -> 23	[key=0,
		edge_type=next,
		label=Next];
	24	[contract_name=SafeMath,
		function_fullname="add(uint256,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_\
10)",
		node_expression="assert(bool)(c >= a)",
		node_info_vulnerabilities=None,
		node_irs="TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)",
		node_source_code_lines="[41]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	23 -> 24	[key=0,
		edge_type=next,
		label=Next];
	25	[contract_name=SafeMath,
		function_fullname="add(uint256,uint256)",
		label="Node Type: RETURN

EXPRESSION:
c

IRs:
RETURN c",
		node_expression=c,
		node_info_vulnerabilities=None,
		node_irs="RETURN c",
		node_source_code_lines="[42]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	24 -> 25	[key=0,
		edge_type=next,
		label=Next];
	26	[contract_name=SafeMath,
		function_fullname="add(uint256,uint256)",
		label="buggy_27.sol_SafeMath_add(uint256,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[39, 40, 41, 42, 43]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	26 -> 22	[key=0,
		edge_type=next,
		label=Next];
	27	[contract_name=SafeMath,
		function_fullname="ceil(uint256,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[45, 46, 47, 48, 49]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	28	[contract_name=SafeMath,
		function_fullname="ceil(uint256,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
c = add(a,m)

IRs:
TMP_12(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(a,m)
c(uint256) := \
TMP_12(uint256)",
		node_expression="c = add(a,m)",
		node_info_vulnerabilities=None,
		node_irs="TMP_12(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(a,m)
c(uint256) := TMP_12(uint256)",
		node_source_code_lines="[46]",
		node_type="NEW VARIABLE",
		source_file="buggy_27.sol"];
	27 -> 28	[key=0,
		edge_type=next,
		label=Next];
	29	[contract_name=SafeMath,
		function_fullname="ceil(uint256,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
d = sub(c,1)

IRs:
TMP_13(uint256) = INTERNAL_CALL, SafeMath.sub(uint256,uint256)(c,1)
d(uint256) := \
TMP_13(uint256)",
		node_expression="d = sub(c,1)",
		node_info_vulnerabilities=None,
		node_irs="TMP_13(uint256) = INTERNAL_CALL, SafeMath.sub(uint256,uint256)(c,1)
d(uint256) := TMP_13(uint256)",
		node_source_code_lines="[47]",
		node_type="NEW VARIABLE",
		source_file="buggy_27.sol"];
	28 -> 29	[key=0,
		edge_type=next,
		label=Next];
	30	[contract_name=SafeMath,
		function_fullname="ceil(uint256,uint256)",
		label="Node Type: RETURN

EXPRESSION:
mul(div(d,m),m)

IRs:
TMP_14(uint256) = INTERNAL_CALL, SafeMath.div(uint256,uint256)(d,m)
TMP_15(\
uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(TMP_14,m)
RETURN TMP_15",
		node_expression="mul(div(d,m),m)",
		node_info_vulnerabilities=None,
		node_irs="TMP_14(uint256) = INTERNAL_CALL, SafeMath.div(uint256,uint256)(d,m)
TMP_15(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(\
TMP_14,m)
RETURN TMP_15",
		node_source_code_lines="[48]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	29 -> 30	[key=0,
		edge_type=next,
		label=Next];
	31	[contract_name=SafeMath,
		function_fullname="ceil(uint256,uint256)",
		label="buggy_27.sol_SafeMath_ceil(uint256,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[45, 46, 47, 48, 49]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	31 -> 27	[key=0,
		edge_type=next,
		label=Next];
	32	[contract_name=Ownable,
		function_fullname="bug_txorigin40(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[54, 55, 56]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	33	[contract_name=Ownable,
		function_fullname="bug_txorigin40(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin40)

IRs:
TMP_16(bool) = tx.origin == owner_txorigin40
\
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)",
		node_expression="require(bool)(tx.origin == owner_txorigin40)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_16(bool) = tx.origin == owner_txorigin40
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)",
		node_source_code_lines="[55]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	32 -> 33	[key=0,
		edge_type=next,
		label=Next];
	34	[contract_name=Ownable,
		function_fullname="bug_txorigin40(address)",
		label="buggy_27.sol_Ownable_bug_txorigin40(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[54, 55, 56]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	34 -> 32	[key=0,
		edge_type=next,
		label=Next];
	35	[contract_name=Ownable,
		function_fullname="constructor()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[60, 61, 62]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	36	[contract_name=Ownable,
		function_fullname="constructor()",
		label="Node Type: EXPRESSION

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)",
		node_expression="owner = msg.sender",
		node_info_vulnerabilities=None,
		node_irs="owner(address) := msg.sender(address)",
		node_source_code_lines="[61]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	35 -> 36	[key=0,
		edge_type=next,
		label=Next];
	37	[contract_name=Ownable,
		function_fullname="constructor()",
		label="buggy_27.sol_Ownable_constructor()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[60, 61, 62]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	37 -> 35	[key=0,
		edge_type=next,
		label=Next];
	38	[contract_name=Ownable,
		function_fullname="withdrawAll_txorigin34(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[63, 64, 65, 66]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	39	[contract_name=Ownable,
		function_fullname="withdrawAll_txorigin34(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin34)

IRs:
TMP_18(bool) = tx.origin == owner_txorigin34
\
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)",
		node_expression="require(bool)(tx.origin == owner_txorigin34)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_18(bool) = tx.origin == owner_txorigin34
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)",
		node_source_code_lines="[64]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	38 -> 39	[key=0,
		edge_type=next,
		label=Next];
	40	[contract_name=Ownable,
		function_fullname="withdrawAll_txorigin34(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_20 = CONVERT this to address
REF_1 -> BALANCE \
TMP_20
Transfer dest:_recipient value:REF_1",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_20 = CONVERT this to address
REF_1 -> BALANCE TMP_20
Transfer dest:_recipient value:REF_1",
		node_source_code_lines="[65]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	39 -> 40	[key=0,
		edge_type=next,
		label=Next];
	41	[contract_name=Ownable,
		function_fullname="withdrawAll_txorigin34(address,address)",
		label="buggy_27.sol_Ownable_withdrawAll_txorigin34(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[63, 64, 65, 66]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	41 -> 38	[key=0,
		edge_type=next,
		label=Next];
	42	[contract_name=Ownable,
		function_fullname="transferOwnership(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[75, 76, 77, 78, 79]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	46	[contract_name=Ownable,
		function_fullname="transferOwnership(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()",
		node_expression="onlyOwner()",
		node_info_vulnerabilities=None,
		node_irs="MODIFIER_CALL, Ownable.onlyOwner()()",
		node_source_code_lines="[75]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	42 -> 46	[key=0,
		edge_type=next,
		label=Next];
	43	[contract_name=Ownable,
		function_fullname="transferOwnership(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_22 = CONVERT 0 to address
TMP_23(bool) = newOwner != \
TMP_22
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)",
		node_expression="require(bool)(newOwner != address(0))",
		node_info_vulnerabilities=None,
		node_irs="TMP_22 = CONVERT 0 to address
TMP_23(bool) = newOwner != TMP_22
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)",
		node_source_code_lines="[76]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	44	[contract_name=Ownable,
		function_fullname="transferOwnership(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner.newOwner)",
		node_expression="OwnershipTransferred(owner,newOwner)",
		node_info_vulnerabilities=None,
		node_irs="Emit OwnershipTransferred(owner.newOwner)",
		node_source_code_lines="[77]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	43 -> 44	[key=0,
		edge_type=next,
		label=Next];
	45	[contract_name=Ownable,
		function_fullname="transferOwnership(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)",
		node_expression="owner = newOwner",
		node_info_vulnerabilities=None,
		node_irs="owner(address) := newOwner(address)",
		node_source_code_lines="[78]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	44 -> 45	[key=0,
		edge_type=next,
		label=Next];
	46 -> 43	[key=0,
		edge_type=next,
		label=Next];
	47	[contract_name=Ownable,
		function_fullname="transferOwnership(address)",
		label="buggy_27.sol_Ownable_transferOwnership(address)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[75, 76, 77, 78, 79]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	47 -> 42	[key=0,
		edge_type=next,
		label=Next];
	48	[contract_name=Ownable,
		function_fullname="sendto_txorigin21(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[80, 81, 82, 83]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	49	[contract_name=Ownable,
		function_fullname="sendto_txorigin21(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin21)

IRs:
TMP_27(bool) = tx.origin == owner_txorigin21
\
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)",
		node_expression="require(bool)(tx.origin == owner_txorigin21)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_27(bool) = tx.origin == owner_txorigin21
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)",
		node_source_code_lines="[81]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	48 -> 49	[key=0,
		edge_type=next,
		label=Next];
	50	[contract_name=Ownable,
		function_fullname="sendto_txorigin21(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[82]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	49 -> 50	[key=0,
		edge_type=next,
		label=Next];
	51	[contract_name=Ownable,
		function_fullname="sendto_txorigin21(address,uint256,address)",
		label="buggy_27.sol_Ownable_sendto_txorigin21(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[80, 81, 82, 83]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	51 -> 48	[key=0,
		edge_type=next,
		label=Next];
	52	[contract_name=Ownable,
		function_fullname="onlyOwner()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[69, 70, 71, 72]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	53	[contract_name=Ownable,
		function_fullname="onlyOwner()",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_30(bool) = msg.sender == owner
TMP_31(None) = SOLIDITY_\
CALL require(bool)(TMP_30)",
		node_expression="require(bool)(msg.sender == owner)",
		node_info_vulnerabilities=None,
		node_irs="TMP_30(bool) = msg.sender == owner
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)",
		node_source_code_lines="[70]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	52 -> 53	[key=0,
		edge_type=next,
		label=Next];
	54	[contract_name=Ownable,
		function_fullname="onlyOwner()",
		label="Node Type: _
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[71]",
		node_type=_,
		source_file="buggy_27.sol"];
	53 -> 54	[key=0,
		edge_type=next,
		label=Next];
	55	[contract_name=Ownable,
		function_fullname="onlyOwner()",
		label="buggy_27.sol_Ownable_onlyOwner()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[69, 70, 71, 72]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	55 -> 52	[key=0,
		edge_type=next,
		label=Next];
	56	[contract_name=ERC20Detailed,
		function_fullname="totalSupply()",
		label="buggy_27.sol_ERC20Detailed_totalSupply()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[8]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	57	[contract_name=ERC20Detailed,
		function_fullname="balanceOf(address)",
		label="buggy_27.sol_ERC20Detailed_balanceOf(address)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[9]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	58	[contract_name=ERC20Detailed,
		function_fullname="allowance(address,address)",
		label="buggy_27.sol_ERC20Detailed_allowance(address,address)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[10]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	59	[contract_name=ERC20Detailed,
		function_fullname="transfer(address,uint256)",
		label="buggy_27.sol_ERC20Detailed_transfer(address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[11]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	60	[contract_name=ERC20Detailed,
		function_fullname="approve(address,uint256)",
		label="buggy_27.sol_ERC20Detailed_approve(address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[12]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	61	[contract_name=ERC20Detailed,
		function_fullname="transferFrom(address,address,uint256)",
		label="buggy_27.sol_ERC20Detailed_transferFrom(address,address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[13]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	62	[contract_name=ERC20Detailed,
		function_fullname="constructor(string,string,uint8)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[94, 95, 96, 97, 98]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	63	[contract_name=ERC20Detailed,
		function_fullname="constructor(string,string,uint8)",
		label="Node Type: EXPRESSION

EXPRESSION:
_name = name

IRs:
_name(string) := name(string)",
		node_expression="_name = name",
		node_info_vulnerabilities=None,
		node_irs="_name(string) := name(string)",
		node_source_code_lines="[95]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	62 -> 63	[key=0,
		edge_type=next,
		label=Next];
	64	[contract_name=ERC20Detailed,
		function_fullname="constructor(string,string,uint8)",
		label="Node Type: EXPRESSION

EXPRESSION:
_symbol = symbol

IRs:
_symbol(string) := symbol(string)",
		node_expression="_symbol = symbol",
		node_info_vulnerabilities=None,
		node_irs="_symbol(string) := symbol(string)",
		node_source_code_lines="[96]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	63 -> 64	[key=0,
		edge_type=next,
		label=Next];
	65	[contract_name=ERC20Detailed,
		function_fullname="constructor(string,string,uint8)",
		label="Node Type: EXPRESSION

EXPRESSION:
_decimals = decimals

IRs:
_decimals(uint8) := decimals(uint8)",
		node_expression="_decimals = decimals",
		node_info_vulnerabilities=None,
		node_irs="_decimals(uint8) := decimals(uint8)",
		node_source_code_lines="[97]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	64 -> 65	[key=0,
		edge_type=next,
		label=Next];
	66	[contract_name=ERC20Detailed,
		function_fullname="constructor(string,string,uint8)",
		label="buggy_27.sol_ERC20Detailed_constructor(string,string,uint8)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[94, 95, 96, 97, 98]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	66 -> 62	[key=0,
		edge_type=next,
		label=Next];
	67	[contract_name=ERC20Detailed,
		function_fullname="withdrawAll_txorigin10(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[99, 100, 101, 102]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	68	[contract_name=ERC20Detailed,
		function_fullname="withdrawAll_txorigin10(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin10)

IRs:
TMP_32(bool) = tx.origin == owner_txorigin10
\
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)",
		node_expression="require(bool)(tx.origin == owner_txorigin10)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_32(bool) = tx.origin == owner_txorigin10
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)",
		node_source_code_lines="[100]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	67 -> 68	[key=0,
		edge_type=next,
		label=Next];
	69	[contract_name=ERC20Detailed,
		function_fullname="withdrawAll_txorigin10(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_34 = CONVERT this to address
REF_4 -> BALANCE \
TMP_34
Transfer dest:_recipient value:REF_4",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_34 = CONVERT this to address
REF_4 -> BALANCE TMP_34
Transfer dest:_recipient value:REF_4",
		node_source_code_lines="[101]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	68 -> 69	[key=0,
		edge_type=next,
		label=Next];
	70	[contract_name=ERC20Detailed,
		function_fullname="withdrawAll_txorigin10(address,address)",
		label="buggy_27.sol_ERC20Detailed_withdrawAll_txorigin10(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[99, 100, 101, 102]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	70 -> 67	[key=0,
		edge_type=next,
		label=Next];
	71	[contract_name=ERC20Detailed,
		function_fullname="name()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[104, 105, 106]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	72	[contract_name=ERC20Detailed,
		function_fullname="name()",
		label="Node Type: RETURN

EXPRESSION:
_name

IRs:
RETURN _name",
		node_expression=_name,
		node_info_vulnerabilities=None,
		node_irs="RETURN _name",
		node_source_code_lines="[105]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	71 -> 72	[key=0,
		edge_type=next,
		label=Next];
	73	[contract_name=ERC20Detailed,
		function_fullname="name()",
		label="buggy_27.sol_ERC20Detailed_name()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[104, 105, 106]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	73 -> 71	[key=0,
		edge_type=next,
		label=Next];
	74	[contract_name=ERC20Detailed,
		function_fullname="withdrawAll_txorigin22(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[107, 108, 109, 110]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	75	[contract_name=ERC20Detailed,
		function_fullname="withdrawAll_txorigin22(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin22)

IRs:
TMP_36(bool) = tx.origin == owner_txorigin22
\
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)",
		node_expression="require(bool)(tx.origin == owner_txorigin22)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_36(bool) = tx.origin == owner_txorigin22
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)",
		node_source_code_lines="[108]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	74 -> 75	[key=0,
		edge_type=next,
		label=Next];
	76	[contract_name=ERC20Detailed,
		function_fullname="withdrawAll_txorigin22(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_38 = CONVERT this to address
REF_6 -> BALANCE \
TMP_38
Transfer dest:_recipient value:REF_6",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_38 = CONVERT this to address
REF_6 -> BALANCE TMP_38
Transfer dest:_recipient value:REF_6",
		node_source_code_lines="[109]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	75 -> 76	[key=0,
		edge_type=next,
		label=Next];
	77	[contract_name=ERC20Detailed,
		function_fullname="withdrawAll_txorigin22(address,address)",
		label="buggy_27.sol_ERC20Detailed_withdrawAll_txorigin22(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[107, 108, 109, 110]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	77 -> 74	[key=0,
		edge_type=next,
		label=Next];
	78	[contract_name=ERC20Detailed,
		function_fullname="symbol()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[112, 113, 114]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	79	[contract_name=ERC20Detailed,
		function_fullname="symbol()",
		label="Node Type: RETURN

EXPRESSION:
_symbol

IRs:
RETURN _symbol",
		node_expression=_symbol,
		node_info_vulnerabilities=None,
		node_irs="RETURN _symbol",
		node_source_code_lines="[113]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	78 -> 79	[key=0,
		edge_type=next,
		label=Next];
	80	[contract_name=ERC20Detailed,
		function_fullname="symbol()",
		label="buggy_27.sol_ERC20Detailed_symbol()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[112, 113, 114]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	80 -> 78	[key=0,
		edge_type=next,
		label=Next];
	81	[contract_name=ERC20Detailed,
		function_fullname="bug_txorigin12(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[115, 116, 117]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	82	[contract_name=ERC20Detailed,
		function_fullname="bug_txorigin12(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin12)

IRs:
TMP_40(bool) = tx.origin == owner_txorigin12
\
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)",
		node_expression="require(bool)(tx.origin == owner_txorigin12)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_40(bool) = tx.origin == owner_txorigin12
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)",
		node_source_code_lines="[116]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	81 -> 82	[key=0,
		edge_type=next,
		label=Next];
	83	[contract_name=ERC20Detailed,
		function_fullname="bug_txorigin12(address)",
		label="buggy_27.sol_ERC20Detailed_bug_txorigin12(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[115, 116, 117]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	83 -> 81	[key=0,
		edge_type=next,
		label=Next];
	84	[contract_name=ERC20Detailed,
		function_fullname="decimals()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[119, 120, 121]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	85	[contract_name=ERC20Detailed,
		function_fullname="decimals()",
		label="Node Type: RETURN

EXPRESSION:
_decimals

IRs:
RETURN _decimals",
		node_expression=_decimals,
		node_info_vulnerabilities=None,
		node_irs="RETURN _decimals",
		node_source_code_lines="[120]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	84 -> 85	[key=0,
		edge_type=next,
		label=Next];
	86	[contract_name=ERC20Detailed,
		function_fullname="decimals()",
		label="buggy_27.sol_ERC20Detailed_decimals()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[119, 120, 121]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	86 -> 84	[key=0,
		edge_type=next,
		label=Next];
	87	[contract_name=ERC20Detailed,
		function_fullname="transferTo_txorigin11(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[122, 123, 124, 125]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	88	[contract_name=ERC20Detailed,
		function_fullname="transferTo_txorigin11(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin11)

IRs:
TMP_42(bool) = tx.origin == owner_txorigin11
\
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)",
		node_expression="require(bool)(tx.origin == owner_txorigin11)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_42(bool) = tx.origin == owner_txorigin11
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)",
		node_source_code_lines="[123]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	87 -> 88	[key=0,
		edge_type=next,
		label=Next];
	89	[contract_name=ERC20Detailed,
		function_fullname="transferTo_txorigin11(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_7(None) -> to.call
REF_8(None) -> REF_7.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="REF_7(None) -> to.call
REF_8(None) -> REF_7.value",
		node_source_code_lines="[124]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	88 -> 89	[key=0,
		edge_type=next,
		label=Next];
	90	[contract_name=ERC20Detailed,
		function_fullname="transferTo_txorigin11(address,uint256,address)",
		label="buggy_27.sol_ERC20Detailed_transferTo_txorigin11(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[122, 123, 124, 125]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	90 -> 87	[key=0,
		edge_type=next,
		label=Next];
	91	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin40(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[54, 55, 56]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	92	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin40(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin40)

IRs:
TMP_45(bool) = tx.origin == owner_txorigin40
\
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)",
		node_expression="require(bool)(tx.origin == owner_txorigin40)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_45(bool) = tx.origin == owner_txorigin40
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)",
		node_source_code_lines="[55]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	91 -> 92	[key=0,
		edge_type=next,
		label=Next];
	93	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin40(address)",
		label="buggy_27.sol_DanPanCoin_bug_txorigin40(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[54, 55, 56]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	93 -> 91	[key=0,
		edge_type=next,
		label=Next];
	94	[contract_name=DanPanCoin,
		function_fullname="constructor()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[60, 61, 62]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	95	[contract_name=DanPanCoin,
		function_fullname="constructor()",
		label="Node Type: EXPRESSION

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)",
		node_expression="owner = msg.sender",
		node_info_vulnerabilities=None,
		node_irs="owner(address) := msg.sender(address)",
		node_source_code_lines="[61]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	94 -> 95	[key=0,
		edge_type=next,
		label=Next];
	96	[contract_name=DanPanCoin,
		function_fullname="constructor()",
		label="buggy_27.sol_DanPanCoin_constructor()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[60, 61, 62]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	96 -> 94	[key=0,
		edge_type=next,
		label=Next];
	97	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin34(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[63, 64, 65, 66]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	98	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin34(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin34)

IRs:
TMP_47(bool) = tx.origin == owner_txorigin34
\
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)",
		node_expression="require(bool)(tx.origin == owner_txorigin34)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_47(bool) = tx.origin == owner_txorigin34
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)",
		node_source_code_lines="[64]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	97 -> 98	[key=0,
		edge_type=next,
		label=Next];
	99	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin34(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_49 = CONVERT this to address
REF_10 -> BALANCE \
TMP_49
Transfer dest:_recipient value:REF_10",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_49 = CONVERT this to address
REF_10 -> BALANCE TMP_49
Transfer dest:_recipient value:REF_10",
		node_source_code_lines="[65]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	98 -> 99	[key=0,
		edge_type=next,
		label=Next];
	100	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin34(address,address)",
		label="buggy_27.sol_DanPanCoin_withdrawAll_txorigin34(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[63, 64, 65, 66]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	100 -> 97	[key=0,
		edge_type=next,
		label=Next];
	101	[contract_name=DanPanCoin,
		function_fullname="transferOwnership(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[75, 76, 77, 78, 79]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	105	[contract_name=DanPanCoin,
		function_fullname="transferOwnership(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()",
		node_expression="onlyOwner()",
		node_info_vulnerabilities=None,
		node_irs="MODIFIER_CALL, Ownable.onlyOwner()()",
		node_source_code_lines="[75]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	101 -> 105	[key=0,
		edge_type=next,
		label=Next];
	102	[contract_name=DanPanCoin,
		function_fullname="transferOwnership(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_51 = CONVERT 0 to address
TMP_52(bool) = newOwner != \
TMP_51
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)",
		node_expression="require(bool)(newOwner != address(0))",
		node_info_vulnerabilities=None,
		node_irs="TMP_51 = CONVERT 0 to address
TMP_52(bool) = newOwner != TMP_51
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)",
		node_source_code_lines="[76]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	103	[contract_name=DanPanCoin,
		function_fullname="transferOwnership(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner.newOwner)",
		node_expression="OwnershipTransferred(owner,newOwner)",
		node_info_vulnerabilities=None,
		node_irs="Emit OwnershipTransferred(owner.newOwner)",
		node_source_code_lines="[77]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	102 -> 103	[key=0,
		edge_type=next,
		label=Next];
	104	[contract_name=DanPanCoin,
		function_fullname="transferOwnership(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)",
		node_expression="owner = newOwner",
		node_info_vulnerabilities=None,
		node_irs="owner(address) := newOwner(address)",
		node_source_code_lines="[78]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	103 -> 104	[key=0,
		edge_type=next,
		label=Next];
	105 -> 102	[key=0,
		edge_type=next,
		label=Next];
	106	[contract_name=DanPanCoin,
		function_fullname="transferOwnership(address)",
		label="buggy_27.sol_DanPanCoin_transferOwnership(address)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[75, 76, 77, 78, 79]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	106 -> 101	[key=0,
		edge_type=next,
		label=Next];
	107	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin21(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[80, 81, 82, 83]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	108	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin21(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin21)

IRs:
TMP_56(bool) = tx.origin == owner_txorigin21
\
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)",
		node_expression="require(bool)(tx.origin == owner_txorigin21)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_56(bool) = tx.origin == owner_txorigin21
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)",
		node_source_code_lines="[81]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	107 -> 108	[key=0,
		edge_type=next,
		label=Next];
	109	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin21(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[82]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	108 -> 109	[key=0,
		edge_type=next,
		label=Next];
	110	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin21(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_sendto_txorigin21(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[80, 81, 82, 83]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	110 -> 107	[key=0,
		edge_type=next,
		label=Next];
	111	[contract_name=DanPanCoin,
		function_fullname="constructor(string,string,uint8)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[94, 95, 96, 97, 98]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	112	[contract_name=DanPanCoin,
		function_fullname="constructor(string,string,uint8)",
		label="Node Type: EXPRESSION

EXPRESSION:
_name = name

IRs:
_name(string) := name(string)",
		node_expression="_name = name",
		node_info_vulnerabilities=None,
		node_irs="_name(string) := name(string)",
		node_source_code_lines="[95]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	111 -> 112	[key=0,
		edge_type=next,
		label=Next];
	113	[contract_name=DanPanCoin,
		function_fullname="constructor(string,string,uint8)",
		label="Node Type: EXPRESSION

EXPRESSION:
_symbol = symbol

IRs:
_symbol(string) := symbol(string)",
		node_expression="_symbol = symbol",
		node_info_vulnerabilities=None,
		node_irs="_symbol(string) := symbol(string)",
		node_source_code_lines="[96]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	112 -> 113	[key=0,
		edge_type=next,
		label=Next];
	114	[contract_name=DanPanCoin,
		function_fullname="constructor(string,string,uint8)",
		label="Node Type: EXPRESSION

EXPRESSION:
_decimals = decimals

IRs:
_decimals(uint8) := decimals(uint8)",
		node_expression="_decimals = decimals",
		node_info_vulnerabilities=None,
		node_irs="_decimals(uint8) := decimals(uint8)",
		node_source_code_lines="[97]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	113 -> 114	[key=0,
		edge_type=next,
		label=Next];
	115	[contract_name=DanPanCoin,
		function_fullname="constructor(string,string,uint8)",
		label="buggy_27.sol_DanPanCoin_constructor(string,string,uint8)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[94, 95, 96, 97, 98]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	115 -> 111	[key=0,
		edge_type=next,
		label=Next];
	116	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin10(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[99, 100, 101, 102]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	117	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin10(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin10)

IRs:
TMP_59(bool) = tx.origin == owner_txorigin10
\
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)",
		node_expression="require(bool)(tx.origin == owner_txorigin10)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_59(bool) = tx.origin == owner_txorigin10
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)",
		node_source_code_lines="[100]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	116 -> 117	[key=0,
		edge_type=next,
		label=Next];
	118	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin10(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_61 = CONVERT this to address
REF_13 -> BALANCE \
TMP_61
Transfer dest:_recipient value:REF_13",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_61 = CONVERT this to address
REF_13 -> BALANCE TMP_61
Transfer dest:_recipient value:REF_13",
		node_source_code_lines="[101]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	117 -> 118	[key=0,
		edge_type=next,
		label=Next];
	119	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin10(address,address)",
		label="buggy_27.sol_DanPanCoin_withdrawAll_txorigin10(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[99, 100, 101, 102]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	119 -> 116	[key=0,
		edge_type=next,
		label=Next];
	120	[contract_name=DanPanCoin,
		function_fullname="name()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[104, 105, 106]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	121	[contract_name=DanPanCoin,
		function_fullname="name()",
		label="Node Type: RETURN

EXPRESSION:
_name

IRs:
RETURN _name",
		node_expression=_name,
		node_info_vulnerabilities=None,
		node_irs="RETURN _name",
		node_source_code_lines="[105]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	120 -> 121	[key=0,
		edge_type=next,
		label=Next];
	122	[contract_name=DanPanCoin,
		function_fullname="name()",
		label="buggy_27.sol_DanPanCoin_name()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[104, 105, 106]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	122 -> 120	[key=0,
		edge_type=next,
		label=Next];
	123	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin22(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[107, 108, 109, 110]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	124	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin22(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin22)

IRs:
TMP_63(bool) = tx.origin == owner_txorigin22
\
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)",
		node_expression="require(bool)(tx.origin == owner_txorigin22)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_63(bool) = tx.origin == owner_txorigin22
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)",
		node_source_code_lines="[108]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	123 -> 124	[key=0,
		edge_type=next,
		label=Next];
	125	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin22(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_65 = CONVERT this to address
REF_15 -> BALANCE \
TMP_65
Transfer dest:_recipient value:REF_15",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_65 = CONVERT this to address
REF_15 -> BALANCE TMP_65
Transfer dest:_recipient value:REF_15",
		node_source_code_lines="[109]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	124 -> 125	[key=0,
		edge_type=next,
		label=Next];
	126	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin22(address,address)",
		label="buggy_27.sol_DanPanCoin_withdrawAll_txorigin22(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[107, 108, 109, 110]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	126 -> 123	[key=0,
		edge_type=next,
		label=Next];
	127	[contract_name=DanPanCoin,
		function_fullname="symbol()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[112, 113, 114]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	128	[contract_name=DanPanCoin,
		function_fullname="symbol()",
		label="Node Type: RETURN

EXPRESSION:
_symbol

IRs:
RETURN _symbol",
		node_expression=_symbol,
		node_info_vulnerabilities=None,
		node_irs="RETURN _symbol",
		node_source_code_lines="[113]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	127 -> 128	[key=0,
		edge_type=next,
		label=Next];
	129	[contract_name=DanPanCoin,
		function_fullname="symbol()",
		label="buggy_27.sol_DanPanCoin_symbol()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[112, 113, 114]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	129 -> 127	[key=0,
		edge_type=next,
		label=Next];
	130	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin12(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[115, 116, 117]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	131	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin12(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin12)

IRs:
TMP_67(bool) = tx.origin == owner_txorigin12
\
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)",
		node_expression="require(bool)(tx.origin == owner_txorigin12)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_67(bool) = tx.origin == owner_txorigin12
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)",
		node_source_code_lines="[116]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	130 -> 131	[key=0,
		edge_type=next,
		label=Next];
	132	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin12(address)",
		label="buggy_27.sol_DanPanCoin_bug_txorigin12(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[115, 116, 117]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	132 -> 130	[key=0,
		edge_type=next,
		label=Next];
	133	[contract_name=DanPanCoin,
		function_fullname="decimals()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[119, 120, 121]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	134	[contract_name=DanPanCoin,
		function_fullname="decimals()",
		label="Node Type: RETURN

EXPRESSION:
_decimals

IRs:
RETURN _decimals",
		node_expression=_decimals,
		node_info_vulnerabilities=None,
		node_irs="RETURN _decimals",
		node_source_code_lines="[120]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	133 -> 134	[key=0,
		edge_type=next,
		label=Next];
	135	[contract_name=DanPanCoin,
		function_fullname="decimals()",
		label="buggy_27.sol_DanPanCoin_decimals()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[119, 120, 121]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	135 -> 133	[key=0,
		edge_type=next,
		label=Next];
	136	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin11(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[122, 123, 124, 125]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	137	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin11(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin11)

IRs:
TMP_69(bool) = tx.origin == owner_txorigin11
\
TMP_70(None) = SOLIDITY_CALL require(bool)(TMP_69)",
		node_expression="require(bool)(tx.origin == owner_txorigin11)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_69(bool) = tx.origin == owner_txorigin11
TMP_70(None) = SOLIDITY_CALL require(bool)(TMP_69)",
		node_source_code_lines="[123]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	136 -> 137	[key=0,
		edge_type=next,
		label=Next];
	138	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin11(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_16(None) -> to.call
REF_17(None) -> REF_16.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="REF_16(None) -> to.call
REF_17(None) -> REF_16.value",
		node_source_code_lines="[124]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	137 -> 138	[key=0,
		edge_type=next,
		label=Next];
	139	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin11(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_transferTo_txorigin11(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[122, 123, 124, 125]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	139 -> 136	[key=0,
		edge_type=next,
		label=Next];
	140	[contract_name=DanPanCoin,
		function_fullname="totalSupply()",
		label="buggy_27.sol_DanPanCoin_totalSupply()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[8]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	141	[contract_name=DanPanCoin,
		function_fullname="balanceOf(address)",
		label="buggy_27.sol_DanPanCoin_balanceOf(address)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[9]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	142	[contract_name=DanPanCoin,
		function_fullname="allowance(address,address)",
		label="buggy_27.sol_DanPanCoin_allowance(address,address)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[10]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	143	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="buggy_27.sol_DanPanCoin_transfer(address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[11]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	144	[contract_name=DanPanCoin,
		function_fullname="approve(address,uint256)",
		label="buggy_27.sol_DanPanCoin_approve(address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[12]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	145	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="buggy_27.sol_DanPanCoin_transferFrom(address,address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[13]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	146	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin18(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[135, 136, 137, 138]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	147	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin18(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin18)

IRs:
TMP_72(bool) = tx.origin == owner_txorigin18
\
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)",
		node_expression="require(bool)(tx.origin == owner_txorigin18)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_72(bool) = tx.origin == owner_txorigin18
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)",
		node_source_code_lines="[136]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	146 -> 147	[key=0,
		edge_type=next,
		label=Next];
	148	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin18(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_74 = CONVERT this to address
REF_19 -> BALANCE \
TMP_74
Transfer dest:_recipient value:REF_19",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_74 = CONVERT this to address
REF_19 -> BALANCE TMP_74
Transfer dest:_recipient value:REF_19",
		node_source_code_lines="[137]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	147 -> 148	[key=0,
		edge_type=next,
		label=Next];
	149	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin18(address,address)",
		label="buggy_27.sol_DanPanCoin_withdrawAll_txorigin18(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[135, 136, 137, 138]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	149 -> 146	[key=0,
		edge_type=next,
		label=Next];
	150	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin29(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[140, 141, 142, 143]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	151	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin29(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin29)

IRs:
TMP_76(bool) = tx.origin == owner_txorigin29
\
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)",
		node_expression="require(bool)(tx.origin == owner_txorigin29)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_76(bool) = tx.origin == owner_txorigin29
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)",
		node_source_code_lines="[141]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	150 -> 151	[key=0,
		edge_type=next,
		label=Next];
	152	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin29(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[142]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	151 -> 152	[key=0,
		edge_type=next,
		label=Next];
	153	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin29(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_sendto_txorigin29(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[140, 141, 142, 143]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	153 -> 150	[key=0,
		edge_type=next,
		label=Next];
	154	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin6(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[145, 146, 147, 148]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	155	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin6(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin6)

IRs:
TMP_79(bool) = tx.origin == owner_txorigin6
\
TMP_80(None) = SOLIDITY_CALL require(bool)(TMP_79)",
		node_expression="require(bool)(tx.origin == owner_txorigin6)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_79(bool) = tx.origin == owner_txorigin6
TMP_80(None) = SOLIDITY_CALL require(bool)(TMP_79)",
		node_source_code_lines="[146]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	154 -> 155	[key=0,
		edge_type=next,
		label=Next];
	156	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin6(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_81 = CONVERT this to address
REF_22 -> BALANCE \
TMP_81
Transfer dest:_recipient value:REF_22",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_81 = CONVERT this to address
REF_22 -> BALANCE TMP_81
Transfer dest:_recipient value:REF_22",
		node_source_code_lines="[147]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	155 -> 156	[key=0,
		edge_type=next,
		label=Next];
	157	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin6(address,address)",
		label="buggy_27.sol_DanPanCoin_withdrawAll_txorigin6(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[145, 146, 147, 148]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	157 -> 154	[key=0,
		edge_type=next,
		label=Next];
	158	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin16(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[150, 151, 152]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	159	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin16(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin16)

IRs:
TMP_83(bool) = tx.origin == owner_txorigin16
\
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)",
		node_expression="require(bool)(tx.origin == owner_txorigin16)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_83(bool) = tx.origin == owner_txorigin16
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)",
		node_source_code_lines="[151]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	158 -> 159	[key=0,
		edge_type=next,
		label=Next];
	160	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin16(address)",
		label="buggy_27.sol_DanPanCoin_bug_txorigin16(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[150, 151, 152]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	160 -> 158	[key=0,
		edge_type=next,
		label=Next];
	161	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin24(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[154, 155, 156]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	162	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin24(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin24)

IRs:
TMP_85(bool) = tx.origin == owner_txorigin24
\
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)",
		node_expression="require(bool)(tx.origin == owner_txorigin24)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_85(bool) = tx.origin == owner_txorigin24
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)",
		node_source_code_lines="[155]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	161 -> 162	[key=0,
		edge_type=next,
		label=Next];
	163	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin24(address)",
		label="buggy_27.sol_DanPanCoin_bug_txorigin24(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[154, 155, 156]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	163 -> 161	[key=0,
		edge_type=next,
		label=Next];
	164	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin5(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[158, 159, 160, 161]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	165	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin5(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin5)

IRs:
TMP_87(bool) = tx.origin == owner_txorigin5
\
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)",
		node_expression="require(bool)(tx.origin == owner_txorigin5)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_87(bool) = tx.origin == owner_txorigin5
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)",
		node_source_code_lines="[159]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	164 -> 165	[key=0,
		edge_type=next,
		label=Next];
	166	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin5(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[160]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	165 -> 166	[key=0,
		edge_type=next,
		label=Next];
	167	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin5(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_sendto_txorigin5(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[158, 159, 160, 161]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	167 -> 164	[key=0,
		edge_type=next,
		label=Next];
	168	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin33(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[163, 164, 165, 166]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	169	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin33(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin33)

IRs:
TMP_90(bool) = tx.origin == owner_txorigin33
\
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)",
		node_expression="require(bool)(tx.origin == owner_txorigin33)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_90(bool) = tx.origin == owner_txorigin33
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)",
		node_source_code_lines="[164]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	168 -> 169	[key=0,
		edge_type=next,
		label=Next];
	170	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin33(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[165]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	169 -> 170	[key=0,
		edge_type=next,
		label=Next];
	171	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin33(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_sendto_txorigin33(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[163, 164, 165, 166]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	171 -> 168	[key=0,
		edge_type=next,
		label=Next];
	172	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin27(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[168, 169, 170, 171]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	173	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin27(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin27)

IRs:
TMP_93(bool) = tx.origin == owner_txorigin27
\
TMP_94(None) = SOLIDITY_CALL require(bool)(TMP_93)",
		node_expression="require(bool)(tx.origin == owner_txorigin27)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_93(bool) = tx.origin == owner_txorigin27
TMP_94(None) = SOLIDITY_CALL require(bool)(TMP_93)",
		node_source_code_lines="[169]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	172 -> 173	[key=0,
		edge_type=next,
		label=Next];
	174	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin27(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_25(None) -> to.call
REF_26(None) -> REF_25.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="REF_25(None) -> to.call
REF_26(None) -> REF_25.value",
		node_source_code_lines="[170]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	173 -> 174	[key=0,
		edge_type=next,
		label=Next];
	175	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin27(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_transferTo_txorigin27(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[168, 169, 170, 171]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	175 -> 172	[key=0,
		edge_type=next,
		label=Next];
	176	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin31(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[173, 174, 175, 176]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	177	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin31(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin31)

IRs:
TMP_96(bool) = tx.origin == owner_txorigin31
\
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)",
		node_expression="require(bool)(tx.origin == owner_txorigin31)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_96(bool) = tx.origin == owner_txorigin31
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)",
		node_source_code_lines="[174]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	176 -> 177	[key=0,
		edge_type=next,
		label=Next];
	178	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin31(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_27(None) -> to.call
REF_28(None) -> REF_27.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="REF_27(None) -> to.call
REF_28(None) -> REF_27.value",
		node_source_code_lines="[175]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	177 -> 178	[key=0,
		edge_type=next,
		label=Next];
	179	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin31(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_transferTo_txorigin31(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[173, 174, 175, 176]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	179 -> 176	[key=0,
		edge_type=next,
		label=Next];
	180	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin13(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[178, 179, 180, 181]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	181	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin13(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin13)

IRs:
TMP_99(bool) = tx.origin == owner_txorigin13
\
TMP_100(None) = SOLIDITY_CALL require(bool)(TMP_99)",
		node_expression="require(bool)(tx.origin == owner_txorigin13)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_99(bool) = tx.origin == owner_txorigin13
TMP_100(None) = SOLIDITY_CALL require(bool)(TMP_99)",
		node_source_code_lines="[179]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	180 -> 181	[key=0,
		edge_type=next,
		label=Next];
	182	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin13(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[180]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	181 -> 182	[key=0,
		edge_type=next,
		label=Next];
	183	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin13(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_sendto_txorigin13(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[178, 179, 180, 181]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	183 -> 180	[key=0,
		edge_type=next,
		label=Next];
	184	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin15(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[185, 186, 187, 188]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	185	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin15(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin15)

IRs:
TMP_102(bool) = tx.origin == owner_txorigin15
\
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)",
		node_expression="require(bool)(tx.origin == owner_txorigin15)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_102(bool) = tx.origin == owner_txorigin15
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)",
		node_source_code_lines="[186]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	184 -> 185	[key=0,
		edge_type=next,
		label=Next];
	186	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin15(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_30(None) -> to.call
REF_31(None) -> REF_30.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="REF_30(None) -> to.call
REF_31(None) -> REF_30.value",
		node_source_code_lines="[187]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	185 -> 186	[key=0,
		edge_type=next,
		label=Next];
	187	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin15(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_transferTo_txorigin15(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[185, 186, 187, 188]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	187 -> 184	[key=0,
		edge_type=next,
		label=Next];
	188	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin28(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[190, 191, 192]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	189	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin28(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin28)

IRs:
TMP_105(bool) = tx.origin == owner_txorigin28
\
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)",
		node_expression="require(bool)(tx.origin == owner_txorigin28)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_105(bool) = tx.origin == owner_txorigin28
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)",
		node_source_code_lines="[191]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	188 -> 189	[key=0,
		edge_type=next,
		label=Next];
	190	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin28(address)",
		label="buggy_27.sol_DanPanCoin_bug_txorigin28(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[190, 191, 192]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	190 -> 188	[key=0,
		edge_type=next,
		label=Next];
	191	[contract_name=DanPanCoin,
		function_fullname="constructor()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[195, 196, 197]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	193	[contract_name=DanPanCoin,
		function_fullname="constructor()",
		label="Node Type: EXPRESSION

EXPRESSION:
ERC20Detailed(tokenName,tokenSymbol,tokenDecimals)

IRs:
INTERNAL_CALL, ERC20Detailed.constructor(\
string,string,uint8)(tokenName,tokenSymbol,tokenDecimals)",
		node_expression="ERC20Detailed(tokenName,tokenSymbol,tokenDecimals)",
		node_info_vulnerabilities=None,
		node_irs="INTERNAL_CALL, ERC20Detailed.constructor(string,string,uint8)(tokenName,tokenSymbol,tokenDecimals)",
		node_source_code_lines="[195]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	191 -> 193	[key=0,
		edge_type=next,
		label=Next];
	192	[contract_name=DanPanCoin,
		function_fullname="constructor()",
		label="Node Type: EXPRESSION

EXPRESSION:
_mint(msg.sender,_totalSupply)

IRs:
INTERNAL_CALL, DanPanCoin._mint(address,uint256)(msg.sender,_\
totalSupply)",
		node_expression="_mint(msg.sender,_totalSupply)",
		node_info_vulnerabilities=None,
		node_irs="INTERNAL_CALL, DanPanCoin._mint(address,uint256)(msg.sender,_totalSupply)",
		node_source_code_lines="[196]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	193 -> 192	[key=0,
		edge_type=next,
		label=Next];
	194	[contract_name=DanPanCoin,
		function_fullname="constructor()",
		label="buggy_27.sol_DanPanCoin_constructor()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[195, 196, 197]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	194 -> 191	[key=0,
		edge_type=next,
		label=Next];
	195	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin1(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[198, 199, 200, 201]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	196	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin1(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin1)

IRs:
TMP_109(bool) = tx.origin == owner_txorigin1
\
TMP_110(None) = SOLIDITY_CALL require(bool)(TMP_109)",
		node_expression="require(bool)(tx.origin == owner_txorigin1)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_109(bool) = tx.origin == owner_txorigin1
TMP_110(None) = SOLIDITY_CALL require(bool)(TMP_109)",
		node_source_code_lines="[199]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	195 -> 196	[key=0,
		edge_type=next,
		label=Next];
	197	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin1(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[200]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	196 -> 197	[key=0,
		edge_type=next,
		label=Next];
	198	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin1(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_sendto_txorigin1(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[198, 199, 200, 201]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	198 -> 195	[key=0,
		edge_type=next,
		label=Next];
	199	[contract_name=DanPanCoin,
		function_fullname="totalSupply()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[203, 204, 205]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	200	[contract_name=DanPanCoin,
		function_fullname="totalSupply()",
		label="Node Type: RETURN

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply",
		node_expression=_totalSupply,
		node_info_vulnerabilities=None,
		node_irs="RETURN _totalSupply",
		node_source_code_lines="[204]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	199 -> 200	[key=0,
		edge_type=next,
		label=Next];
	201	[contract_name=DanPanCoin,
		function_fullname="totalSupply()",
		label="buggy_27.sol_DanPanCoin_totalSupply()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[203, 204, 205]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	201 -> 199	[key=0,
		edge_type=next,
		label=Next];
	202	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin2(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[206, 207, 208, 209]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	203	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin2(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin2)

IRs:
TMP_112(bool) = tx.origin == owner_txorigin2
\
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)",
		node_expression="require(bool)(tx.origin == owner_txorigin2)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_112(bool) = tx.origin == owner_txorigin2
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)",
		node_source_code_lines="[207]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	202 -> 203	[key=0,
		edge_type=next,
		label=Next];
	204	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin2(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_114 = CONVERT this to address
REF_34 -> \
BALANCE TMP_114
Transfer dest:_recipient value:REF_34",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_114 = CONVERT this to address
REF_34 -> BALANCE TMP_114
Transfer dest:_recipient value:REF_34",
		node_source_code_lines="[208]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	203 -> 204	[key=0,
		edge_type=next,
		label=Next];
	205	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin2(address,address)",
		label="buggy_27.sol_DanPanCoin_withdrawAll_txorigin2(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[206, 207, 208, 209]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	205 -> 202	[key=0,
		edge_type=next,
		label=Next];
	206	[contract_name=DanPanCoin,
		function_fullname="balanceOf(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[211, 212, 213]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	207	[contract_name=DanPanCoin,
		function_fullname="balanceOf(address)",
		label="Node Type: RETURN

EXPRESSION:
_balances[owner]

IRs:
REF_35(uint256) -> _balances[owner]
RETURN REF_35",
		node_expression="_balances[owner]",
		node_info_vulnerabilities=None,
		node_irs="REF_35(uint256) -> _balances[owner]
RETURN REF_35",
		node_source_code_lines="[212]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	206 -> 207	[key=0,
		edge_type=next,
		label=Next];
	208	[contract_name=DanPanCoin,
		function_fullname="balanceOf(address)",
		label="buggy_27.sol_DanPanCoin_balanceOf(address)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[211, 212, 213]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	208 -> 206	[key=0,
		edge_type=next,
		label=Next];
	209	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin17(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[214, 215, 216, 217]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	210	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin17(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin17)

IRs:
TMP_116(bool) = tx.origin == owner_txorigin17
\
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)",
		node_expression="require(bool)(tx.origin == owner_txorigin17)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_116(bool) = tx.origin == owner_txorigin17
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)",
		node_source_code_lines="[215]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	209 -> 210	[key=0,
		edge_type=next,
		label=Next];
	211	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin17(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[216]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	210 -> 211	[key=0,
		edge_type=next,
		label=Next];
	212	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin17(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_sendto_txorigin17(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[214, 215, 216, 217]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	212 -> 209	[key=0,
		edge_type=next,
		label=Next];
	213	[contract_name=DanPanCoin,
		function_fullname="allowance(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[219, 220, 221]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	214	[contract_name=DanPanCoin,
		function_fullname="allowance(address,address)",
		label="Node Type: RETURN

EXPRESSION:
_allowed[owner][spender]

IRs:
REF_37(mapping(address => uint256)) -> _allowed[owner]
REF_38(uint256) \
-> REF_37[spender]
RETURN REF_38",
		node_expression="_allowed[owner][spender]",
		node_info_vulnerabilities=None,
		node_irs="REF_37(mapping(address => uint256)) -> _allowed[owner]
REF_38(uint256) -> REF_37[spender]
RETURN REF_38",
		node_source_code_lines="[220]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	213 -> 214	[key=0,
		edge_type=next,
		label=Next];
	215	[contract_name=DanPanCoin,
		function_fullname="allowance(address,address)",
		label="buggy_27.sol_DanPanCoin_allowance(address,address)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[219, 220, 221]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	215 -> 213	[key=0,
		edge_type=next,
		label=Next];
	216	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin37(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[222, 223, 224, 225]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	217	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin37(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin37)

IRs:
TMP_119(bool) = tx.origin == owner_txorigin37
\
TMP_120(None) = SOLIDITY_CALL require(bool)(TMP_119)",
		node_expression="require(bool)(tx.origin == owner_txorigin37)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_119(bool) = tx.origin == owner_txorigin37
TMP_120(None) = SOLIDITY_CALL require(bool)(TMP_119)",
		node_source_code_lines="[223]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	216 -> 217	[key=0,
		edge_type=next,
		label=Next];
	218	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin37(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[224]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	217 -> 218	[key=0,
		edge_type=next,
		label=Next];
	219	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin37(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_sendto_txorigin37(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[222, 223, 224, 225]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	219 -> 216	[key=0,
		edge_type=next,
		label=Next];
	220	[contract_name=DanPanCoin,
		function_fullname="findOnePercent(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[227, 228, 229, 230, 231]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	221	[contract_name=DanPanCoin,
		function_fullname="findOnePercent(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
roundValue = value.ceil(basePercent)

IRs:
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, \
function:SafeMath.ceil(uint256,uint256), arguments:['value', 'basePercent'] 
roundValue(uint256) := TMP_122(uint256)",
		node_expression="roundValue = value.ceil(basePercent)",
		node_info_vulnerabilities=None,
		node_irs="TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.ceil(uint256,uint256), arguments:['value', 'basePercent'] 
roundValue(\
uint256) := TMP_122(uint256)",
		node_source_code_lines="[228]",
		node_type="NEW VARIABLE",
		source_file="buggy_27.sol"];
	220 -> 221	[key=0,
		edge_type=next,
		label=Next];
	222	[contract_name=DanPanCoin,
		function_fullname="findOnePercent(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
onePercent = roundValue.mul(basePercent).div(10000)

IRs:
TMP_123(uint256) = LIBRARY_CALL, \
dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['roundValue', 'basePercent'] 
TMP_124(uint256) = LIBRARY_CALL, \
dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_123', '10000'] 
onePercent(uint256) := TMP_124(uint256)",
		node_expression="onePercent = roundValue.mul(basePercent).div(10000)",
		node_info_vulnerabilities=None,
		node_irs="TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['roundValue', 'basePercent'] 
\
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_123', '10000'] 
onePercent(\
uint256) := TMP_124(uint256)",
		node_source_code_lines="[229]",
		node_type="NEW VARIABLE",
		source_file="buggy_27.sol"];
	221 -> 222	[key=0,
		edge_type=next,
		label=Next];
	223	[contract_name=DanPanCoin,
		function_fullname="findOnePercent(uint256)",
		label="Node Type: RETURN

EXPRESSION:
onePercent

IRs:
RETURN onePercent",
		node_expression=onePercent,
		node_info_vulnerabilities=None,
		node_irs="RETURN onePercent",
		node_source_code_lines="[230]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	222 -> 223	[key=0,
		edge_type=next,
		label=Next];
	224	[contract_name=DanPanCoin,
		function_fullname="findOnePercent(uint256)",
		label="buggy_27.sol_DanPanCoin_findOnePercent(uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[227, 228, 229, 230, 231]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	224 -> 220	[key=0,
		edge_type=next,
		label=Next];
	225	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin3(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[232, 233, 234, 235]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	226	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin3(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin3)

IRs:
TMP_125(bool) = tx.origin == owner_txorigin3
\
TMP_126(None) = SOLIDITY_CALL require(bool)(TMP_125)",
		node_expression="require(bool)(tx.origin == owner_txorigin3)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_125(bool) = tx.origin == owner_txorigin3
TMP_126(None) = SOLIDITY_CALL require(bool)(TMP_125)",
		node_source_code_lines="[233]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	225 -> 226	[key=0,
		edge_type=next,
		label=Next];
	227	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin3(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_43(None) -> to.call
REF_44(None) -> REF_43.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="REF_43(None) -> to.call
REF_44(None) -> REF_43.value",
		node_source_code_lines="[234]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	226 -> 227	[key=0,
		edge_type=next,
		label=Next];
	228	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin3(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_transferTo_txorigin3(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[232, 233, 234, 235]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	228 -> 225	[key=0,
		edge_type=next,
		label=Next];
	229	[contract_name=DanPanCoin,
		function_fullname="findDPPercent(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[236, 237, 238, 239, 240]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	230	[contract_name=DanPanCoin,
		function_fullname="findDPPercent(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
roundValue = value.ceil(basePercent)

IRs:
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, \
function:SafeMath.ceil(uint256,uint256), arguments:['value', 'basePercent'] 
roundValue(uint256) := TMP_128(uint256)",
		node_expression="roundValue = value.ceil(basePercent)",
		node_info_vulnerabilities=None,
		node_irs="TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.ceil(uint256,uint256), arguments:['value', 'basePercent'] 
roundValue(\
uint256) := TMP_128(uint256)",
		node_source_code_lines="[237]",
		node_type="NEW VARIABLE",
		source_file="buggy_27.sol"];
	229 -> 230	[key=0,
		edge_type=next,
		label=Next];
	231	[contract_name=DanPanCoin,
		function_fullname="findDPPercent(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
DPPercent = roundValue.mul(basePercent).div(10000).mul(dpPercent)

IRs:
TMP_129(uint256) = \
LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['roundValue', 'basePercent'] 
TMP_130(uint256) = \
LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_129', '10000'] 
TMP_131(uint256) = LIBRARY_\
CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_130', 'dpPercent'] 
DPPercent(uint256) := TMP_131(uint256)",
		node_expression="DPPercent = roundValue.mul(basePercent).div(10000).mul(dpPercent)",
		node_info_vulnerabilities=None,
		node_irs="TMP_129(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['roundValue', 'basePercent'] 
\
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_129', '10000'] 
TMP_131(\
uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_130', 'dpPercent'] 
DPPercent(uint256) := \
TMP_131(uint256)",
		node_source_code_lines="[238]",
		node_type="NEW VARIABLE",
		source_file="buggy_27.sol"];
	230 -> 231	[key=0,
		edge_type=next,
		label=Next];
	232	[contract_name=DanPanCoin,
		function_fullname="findDPPercent(uint256)",
		label="Node Type: RETURN

EXPRESSION:
DPPercent

IRs:
RETURN DPPercent",
		node_expression=DPPercent,
		node_info_vulnerabilities=None,
		node_irs="RETURN DPPercent",
		node_source_code_lines="[239]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	231 -> 232	[key=0,
		edge_type=next,
		label=Next];
	233	[contract_name=DanPanCoin,
		function_fullname="findDPPercent(uint256)",
		label="buggy_27.sol_DanPanCoin_findDPPercent(uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[236, 237, 238, 239, 240]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	233 -> 229	[key=0,
		edge_type=next,
		label=Next];
	234	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin9(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[241, 242, 243, 244]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	235	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin9(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin9)

IRs:
TMP_132(bool) = tx.origin == owner_txorigin9
\
TMP_133(None) = SOLIDITY_CALL require(bool)(TMP_132)",
		node_expression="require(bool)(tx.origin == owner_txorigin9)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_132(bool) = tx.origin == owner_txorigin9
TMP_133(None) = SOLIDITY_CALL require(bool)(TMP_132)",
		node_source_code_lines="[242]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	234 -> 235	[key=0,
		edge_type=next,
		label=Next];
	236	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin9(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[243]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	235 -> 236	[key=0,
		edge_type=next,
		label=Next];
	237	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin9(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_sendto_txorigin9(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[241, 242, 243, 244]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	237 -> 234	[key=0,
		edge_type=next,
		label=Next];
	238	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, \
272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, \
298, 299, 300, 301]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	239	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(value <= _balances[msg.sender])

IRs:
REF_50(uint256) -> _balances[msg.sender]
\
TMP_135(bool) = value <= REF_50
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)",
		node_expression="require(bool)(value <= _balances[msg.sender])",
		node_info_vulnerabilities=None,
		node_irs="REF_50(uint256) -> _balances[msg.sender]
TMP_135(bool) = value <= REF_50
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)",
		node_source_code_lines="[247]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	238 -> 239	[key=0,
		edge_type=next,
		label=Next];
	240	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(to != address(0))

IRs:
TMP_137 = CONVERT 0 to address
TMP_138(bool) = to != TMP_\
137
TMP_139(None) = SOLIDITY_CALL require(bool)(TMP_138)",
		node_expression="require(bool)(to != address(0))",
		node_info_vulnerabilities=None,
		node_irs="TMP_137 = CONVERT 0 to address
TMP_138(bool) = to != TMP_137
TMP_139(None) = SOLIDITY_CALL require(bool)(TMP_138)",
		node_source_code_lines="[248]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	239 -> 240	[key=0,
		edge_type=next,
		label=Next];
	241	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: IF

EXPRESSION:
value == 0

IRs:
TMP_140(bool) = value == 0
CONDITION TMP_140",
		node_expression="value == 0",
		node_info_vulnerabilities=None,
		node_irs="TMP_140(bool) = value == 0
CONDITION TMP_140",
		node_source_code_lines="[252]",
		node_type=IF,
		source_file="buggy_27.sol"];
	240 -> 241	[key=0,
		edge_type=next,
		label=Next];
	242	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Transfer(msg.sender,to,0)

IRs:
Emit Transfer(msg.sender.to.0)",
		node_expression="Transfer(msg.sender,to,0)",
		node_info_vulnerabilities=None,
		node_irs="Emit Transfer(msg.sender.to.0)",
		node_source_code_lines="[253]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	241 -> 242	[key=0,
		edge_type=if_true,
		label=True];
	244	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[252, 253, 254, 255]",
		node_type=END_IF,
		source_file="buggy_27.sol"];
	241 -> 244	[key=0,
		edge_type=if_false,
		label=False];
	243	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: RETURN

EXPRESSION:
true

IRs:
RETURN True",
		node_expression=true,
		node_info_vulnerabilities=None,
		node_irs="RETURN True",
		node_source_code_lines="[254]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	242 -> 243	[key=0,
		edge_type=next,
		label=Next];
	245	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
tokensToTransfer = value

IRs:
tokensToTransfer(uint256) := value(uint256)",
		node_expression="tokensToTransfer = value",
		node_info_vulnerabilities=None,
		node_irs="tokensToTransfer(uint256) := value(uint256)",
		node_source_code_lines="[261]",
		node_type="NEW VARIABLE",
		source_file="buggy_27.sol"];
	244 -> 245	[key=0,
		edge_type=next,
		label=Next];
	246	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
tokensToBurn = 0

IRs:
tokensToBurn(uint256) := 0(uint256)",
		node_expression="tokensToBurn = 0",
		node_info_vulnerabilities=None,
		node_irs="tokensToBurn(uint256) := 0(uint256)",
		node_source_code_lines="[262]",
		node_type="NEW VARIABLE",
		source_file="buggy_27.sol"];
	245 -> 246	[key=0,
		edge_type=next,
		label=Next];
	247	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
tokensToDanPan = 0

IRs:
tokensToDanPan(uint256) := 0(uint256)",
		node_expression="tokensToDanPan = 0",
		node_info_vulnerabilities=None,
		node_irs="tokensToDanPan(uint256) := 0(uint256)",
		node_source_code_lines="[263]",
		node_type="NEW VARIABLE",
		source_file="buggy_27.sol"];
	246 -> 247	[key=0,
		edge_type=next,
		label=Next];
	248	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_balances[msg.sender] = _balances[msg.sender].sub(value)

IRs:
REF_51(uint256) -> _balances[msg.sender]
\
REF_52(uint256) -> _balances[msg.sender]
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), \
arguments:['REF_52', 'value'] 
REF_51 (->_balances) := TMP_142(uint256)",
		node_expression="_balances[msg.sender] = _balances[msg.sender].sub(value)",
		node_info_vulnerabilities=None,
		node_irs="REF_51(uint256) -> _balances[msg.sender]
REF_52(uint256) -> _balances[msg.sender]
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, \
function:SafeMath.sub(uint256,uint256), arguments:['REF_52', 'value'] 
REF_51 (->_balances) := TMP_142(uint256)",
		node_source_code_lines="[267]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	247 -> 248	[key=0,
		edge_type=next,
		label=Next];
	249	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: IF

EXPRESSION:
! _isWhitelisted(msg.sender,to)

IRs:
TMP_143(bool) = INTERNAL_CALL, DanPanCoin._isWhitelisted(address,\
address)(msg.sender,to)
TMP_144 = ! TMP_143 
CONDITION TMP_144",
		node_expression="! _isWhitelisted(msg.sender,to)",
		node_info_vulnerabilities=None,
		node_irs="TMP_143(bool) = INTERNAL_CALL, DanPanCoin._isWhitelisted(address,address)(msg.sender,to)
TMP_144 = ! TMP_143 
CONDITION TMP_144",
		node_source_code_lines="[271]",
		node_type=IF,
		source_file="buggy_27.sol"];
	248 -> 249	[key=0,
		edge_type=next,
		label=Next];
	250	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
tokensToBurn = findOnePercent(value)

IRs:
TMP_145(uint256) = INTERNAL_CALL, DanPanCoin.findOnePercent(\
uint256)(value)
tokensToBurn(uint256) := TMP_145(uint256)",
		node_expression="tokensToBurn = findOnePercent(value)",
		node_info_vulnerabilities=None,
		node_irs="TMP_145(uint256) = INTERNAL_CALL, DanPanCoin.findOnePercent(uint256)(value)
tokensToBurn(uint256) := TMP_145(uint256)",
		node_source_code_lines="[273]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	249 -> 250	[key=0,
		edge_type=if_true,
		label=True];
	257	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288]",
		node_type=END_IF,
		source_file="buggy_27.sol"];
	249 -> 257	[key=0,
		edge_type=if_false,
		label=False];
	251	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
tokensToDanPan = findDPPercent(value)

IRs:
TMP_146(uint256) = INTERNAL_CALL, DanPanCoin.findDPPercent(\
uint256)(value)
tokensToDanPan(uint256) := TMP_146(uint256)",
		node_expression="tokensToDanPan = findDPPercent(value)",
		node_info_vulnerabilities=None,
		node_irs="TMP_146(uint256) = INTERNAL_CALL, DanPanCoin.findDPPercent(uint256)(value)
tokensToDanPan(uint256) := TMP_146(uint256)",
		node_source_code_lines="[274]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	250 -> 251	[key=0,
		edge_type=next,
		label=Next];
	252	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan)

IRs:
TMP_147(uint256) = LIBRARY_\
CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['value', 'tokensToBurn'] 
TMP_148(uint256) = LIBRARY_CALL, \
dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_147', 'tokensToDanPan'] 
tokensToTransfer(uint256) := TMP_\
148(uint256)",
		node_expression="tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan)",
		node_info_vulnerabilities=None,
		node_irs="TMP_147(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['value', 'tokensToBurn'] 
TMP_\
148(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_147', 'tokensToDanPan'] 
tokensToTransfer(\
uint256) := TMP_148(uint256)",
		node_source_code_lines="[277]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	251 -> 252	[key=0,
		edge_type=next,
		label=Next];
	253	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_totalSupply = _totalSupply.sub(tokensToBurn)

IRs:
TMP_149(uint256) = LIBRARY_CALL, dest:SafeMath, \
function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', 'tokensToBurn'] 
_totalSupply(uint256) := TMP_149(uint256)",
		node_expression="_totalSupply = _totalSupply.sub(tokensToBurn)",
		node_info_vulnerabilities=None,
		node_irs="TMP_149(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', 'tokensToBurn'] 
_\
totalSupply(uint256) := TMP_149(uint256)",
		node_source_code_lines="[280]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	252 -> 253	[key=0,
		edge_type=next,
		label=Next];
	254	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Transfer(msg.sender,address(0),tokensToBurn)

IRs:
TMP_150 = CONVERT 0 to address
Emit Transfer(\
msg.sender.TMP_150.tokensToBurn)",
		node_expression="Transfer(msg.sender,address(0),tokensToBurn)",
		node_info_vulnerabilities=None,
		node_irs="TMP_150 = CONVERT 0 to address
Emit Transfer(msg.sender.TMP_150.tokensToBurn)",
		node_source_code_lines="[281]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	253 -> 254	[key=0,
		edge_type=next,
		label=Next];
	255	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan)

IRs:
REF_57(uint256) \
-> _balances[DanPanAddress]
REF_58(uint256) -> _balances[DanPanAddress]
TMP_152(uint256) = LIBRARY_CALL, dest:SafeMath, function:\
SafeMath.add(uint256,uint256), arguments:['REF_58', 'tokensToDanPan'] 
REF_57 (->_balances) := TMP_152(uint256)",
		node_expression="_balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan)",
		node_info_vulnerabilities=None,
		node_irs="REF_57(uint256) -> _balances[DanPanAddress]
REF_58(uint256) -> _balances[DanPanAddress]
TMP_152(uint256) = LIBRARY_CALL, dest:SafeMath, \
function:SafeMath.add(uint256,uint256), arguments:['REF_58', 'tokensToDanPan'] 
REF_57 (->_balances) := TMP_152(uint256)",
		node_source_code_lines="[285]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	254 -> 255	[key=0,
		edge_type=next,
		label=Next];
	256	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Transfer(msg.sender,DanPanAddress,tokensToDanPan)

IRs:
Emit Transfer(msg.sender.DanPanAddress.tokensToDanPan)",
		node_expression="Transfer(msg.sender,DanPanAddress,tokensToDanPan)",
		node_info_vulnerabilities=None,
		node_irs="Emit Transfer(msg.sender.DanPanAddress.tokensToDanPan)",
		node_source_code_lines="[286]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	255 -> 256	[key=0,
		edge_type=next,
		label=Next];
	256 -> 257	[key=0,
		edge_type=next,
		label=Next];
	258	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
assert(bool)(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value)

IRs:
TMP_154(uint256) = \
LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensToBurn', 'tokensToTransfer'] 
TMP_155(uint256) = \
LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_154', 'tokensToDanPan'] 
TMP_156(bool) = TMP_\
155 == value
TMP_157(None) = SOLIDITY_CALL assert(bool)(TMP_156)",
		node_expression="assert(bool)(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value)",
		node_info_vulnerabilities=None,
		node_irs="TMP_154(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensToBurn', 'tokensToTransfer'] 
\
TMP_155(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_154', 'tokensToDanPan'] 
\
TMP_156(bool) = TMP_155 == value
TMP_157(None) = SOLIDITY_CALL assert(bool)(TMP_156)",
		node_source_code_lines="[292]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	257 -> 258	[key=0,
		edge_type=next,
		label=Next];
	259	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_balances[to] = _balances[to].add(tokensToTransfer)

IRs:
REF_62(uint256) -> _balances[to]
REF_\
63(uint256) -> _balances[to]
TMP_158(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['\
REF_63', 'tokensToTransfer'] 
REF_62 (->_balances) := TMP_158(uint256)",
		node_expression="_balances[to] = _balances[to].add(tokensToTransfer)",
		node_info_vulnerabilities=None,
		node_irs="REF_62(uint256) -> _balances[to]
REF_63(uint256) -> _balances[to]
TMP_158(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(\
uint256,uint256), arguments:['REF_63', 'tokensToTransfer'] 
REF_62 (->_balances) := TMP_158(uint256)",
		node_source_code_lines="[295]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	258 -> 259	[key=0,
		edge_type=next,
		label=Next];
	260	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Transfer(msg.sender,to,tokensToTransfer)

IRs:
Emit Transfer(msg.sender.to.tokensToTransfer)",
		node_expression="Transfer(msg.sender,to,tokensToTransfer)",
		node_info_vulnerabilities=None,
		node_irs="Emit Transfer(msg.sender.to.tokensToTransfer)",
		node_source_code_lines="[296]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	259 -> 260	[key=0,
		edge_type=next,
		label=Next];
	261	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="Node Type: RETURN

EXPRESSION:
true

IRs:
RETURN True",
		node_expression=true,
		node_info_vulnerabilities=None,
		node_irs="RETURN True",
		node_source_code_lines="[300]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	260 -> 261	[key=0,
		edge_type=next,
		label=Next];
	262	[contract_name=DanPanCoin,
		function_fullname="transfer(address,uint256)",
		label="buggy_27.sol_DanPanCoin_transfer(address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, \
272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, \
298, 299, 300, 301]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	262 -> 238	[key=0,
		edge_type=next,
		label=Next];
	263	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin25(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[302, 303, 304, 305]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	264	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin25(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin25)

IRs:
TMP_160(bool) = tx.origin == owner_txorigin25
\
TMP_161(None) = SOLIDITY_CALL require(bool)(TMP_160)",
		node_expression="require(bool)(tx.origin == owner_txorigin25)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_160(bool) = tx.origin == owner_txorigin25
TMP_161(None) = SOLIDITY_CALL require(bool)(TMP_160)",
		node_source_code_lines="[303]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	263 -> 264	[key=0,
		edge_type=next,
		label=Next];
	265	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin25(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[304]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	264 -> 265	[key=0,
		edge_type=next,
		label=Next];
	266	[contract_name=DanPanCoin,
		function_fullname="sendto_txorigin25(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_sendto_txorigin25(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[302, 303, 304, 305]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	266 -> 263	[key=0,
		edge_type=next,
		label=Next];
	267	[contract_name=DanPanCoin,
		function_fullname="multiTransfer(address[],uint256[])",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[307, 308, 309, 310, 311]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	270	[contract_name=DanPanCoin,
		function_fullname="multiTransfer(address[],uint256[])",
		label="Node Type: NEW VARIABLE

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)",
		node_expression="i = 0",
		node_info_vulnerabilities=None,
		node_irs="i(uint256) := 0(uint256)",
		node_source_code_lines="[308]",
		node_type="NEW VARIABLE",
		source_file="buggy_27.sol"];
	267 -> 270	[key=0,
		edge_type=next,
		label=Next];
	268	[contract_name=DanPanCoin,
		function_fullname="multiTransfer(address[],uint256[])",
		label="Node Type: BEGIN_LOOP
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[308, 309, 310]",
		node_type=BEGIN_LOOP,
		source_file="buggy_27.sol"];
	271	[contract_name=DanPanCoin,
		function_fullname="multiTransfer(address[],uint256[])",
		label="Node Type: IF_LOOP

EXPRESSION:
i < receivers.length

IRs:
REF_66 -> LENGTH receivers
TMP_163(bool) = i < REF_66
CONDITION TMP_163",
		node_expression="i < receivers.length",
		node_info_vulnerabilities=None,
		node_irs="REF_66 -> LENGTH receivers
TMP_163(bool) = i < REF_66
CONDITION TMP_163",
		node_source_code_lines="[308]",
		node_type=IF_LOOP,
		source_file="buggy_27.sol"];
	268 -> 271	[key=0,
		edge_type=next,
		label=Next];
	269	[contract_name=DanPanCoin,
		function_fullname="multiTransfer(address[],uint256[])",
		label="Node Type: END_LOOP
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[308, 309, 310]",
		node_type=END_LOOP,
		source_file="buggy_27.sol"];
	270 -> 268	[key=0,
		edge_type=next,
		label=Next];
	271 -> 269	[key=0,
		edge_type=if_false,
		label=False];
	272	[contract_name=DanPanCoin,
		function_fullname="multiTransfer(address[],uint256[])",
		label="Node Type: EXPRESSION

EXPRESSION:
transfer(receivers[i],amounts[i])

IRs:
REF_67(address) -> receivers[i]
REF_68(uint256) -> amounts[\
i]
TMP_164(bool) = INTERNAL_CALL, DanPanCoin.transfer(address,uint256)(REF_67,REF_68)",
		node_expression="transfer(receivers[i],amounts[i])",
		node_info_vulnerabilities=None,
		node_irs="REF_67(address) -> receivers[i]
REF_68(uint256) -> amounts[i]
TMP_164(bool) = INTERNAL_CALL, DanPanCoin.transfer(address,uint256)(\
REF_67,REF_68)",
		node_source_code_lines="[309]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	271 -> 272	[key=0,
		edge_type=if_true,
		label=True];
	273	[contract_name=DanPanCoin,
		function_fullname="multiTransfer(address[],uint256[])",
		label="Node Type: EXPRESSION

EXPRESSION:
i ++

IRs:
TMP_165(uint256) := i(uint256)
i(uint256) = i + 1",
		node_expression="i ++",
		node_info_vulnerabilities=None,
		node_irs="TMP_165(uint256) := i(uint256)
i(uint256) = i + 1",
		node_source_code_lines="[308]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	272 -> 273	[key=0,
		edge_type=next,
		label=Next];
	273 -> 271	[key=0,
		edge_type=next,
		label=Next];
	274	[contract_name=DanPanCoin,
		function_fullname="multiTransfer(address[],uint256[])",
		label="buggy_27.sol_DanPanCoin_multiTransfer(address[],uint256[])",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[307, 308, 309, 310, 311]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	274 -> 267	[key=0,
		edge_type=next,
		label=Next];
	275	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin19(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[312, 313, 314, 315]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	276	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin19(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin19)

IRs:
TMP_166(bool) = tx.origin == owner_txorigin19
\
TMP_167(None) = SOLIDITY_CALL require(bool)(TMP_166)",
		node_expression="require(bool)(tx.origin == owner_txorigin19)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_166(bool) = tx.origin == owner_txorigin19
TMP_167(None) = SOLIDITY_CALL require(bool)(TMP_166)",
		node_source_code_lines="[313]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	275 -> 276	[key=0,
		edge_type=next,
		label=Next];
	277	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin19(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_69(None) -> to.call
REF_70(None) -> REF_69.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="REF_69(None) -> to.call
REF_70(None) -> REF_69.value",
		node_source_code_lines="[314]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	276 -> 277	[key=0,
		edge_type=next,
		label=Next];
	278	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin19(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_transferTo_txorigin19(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[312, 313, 314, 315]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	278 -> 275	[key=0,
		edge_type=next,
		label=Next];
	279	[contract_name=DanPanCoin,
		function_fullname="approve(address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[317, 318, 319, 320, 321, 322]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	280	[contract_name=DanPanCoin,
		function_fullname="approve(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(spender != address(0))

IRs:
TMP_169 = CONVERT 0 to address
TMP_170(bool) = spender != \
TMP_169
TMP_171(None) = SOLIDITY_CALL require(bool)(TMP_170)",
		node_expression="require(bool)(spender != address(0))",
		node_info_vulnerabilities=None,
		node_irs="TMP_169 = CONVERT 0 to address
TMP_170(bool) = spender != TMP_169
TMP_171(None) = SOLIDITY_CALL require(bool)(TMP_170)",
		node_source_code_lines="[318]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	279 -> 280	[key=0,
		edge_type=next,
		label=Next];
	281	[contract_name=DanPanCoin,
		function_fullname="approve(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_allowed[msg.sender][spender] = value

IRs:
REF_71(mapping(address => uint256)) -> _allowed[msg.sender]
\
REF_72(uint256) -> REF_71[spender]
REF_72 (->_allowed) := value(uint256)",
		node_expression="_allowed[msg.sender][spender] = value",
		node_info_vulnerabilities=None,
		node_irs="REF_71(mapping(address => uint256)) -> _allowed[msg.sender]
REF_72(uint256) -> REF_71[spender]
REF_72 (->_allowed) := value(uint256)",
		node_source_code_lines="[319]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	280 -> 281	[key=0,
		edge_type=next,
		label=Next];
	282	[contract_name=DanPanCoin,
		function_fullname="approve(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Approval(msg.sender,spender,value)

IRs:
Emit Approval(msg.sender.spender.value)",
		node_expression="Approval(msg.sender,spender,value)",
		node_info_vulnerabilities=None,
		node_irs="Emit Approval(msg.sender.spender.value)",
		node_source_code_lines="[320]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	281 -> 282	[key=0,
		edge_type=next,
		label=Next];
	283	[contract_name=DanPanCoin,
		function_fullname="approve(address,uint256)",
		label="Node Type: RETURN

EXPRESSION:
true

IRs:
RETURN True",
		node_expression=true,
		node_info_vulnerabilities=None,
		node_irs="RETURN True",
		node_source_code_lines="[321]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	282 -> 283	[key=0,
		edge_type=next,
		label=Next];
	284	[contract_name=DanPanCoin,
		function_fullname="approve(address,uint256)",
		label="buggy_27.sol_DanPanCoin_approve(address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[317, 318, 319, 320, 321, 322]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	284 -> 279	[key=0,
		edge_type=next,
		label=Next];
	285	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin26(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[323, 324, 325, 326]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	286	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin26(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin26)

IRs:
TMP_173(bool) = tx.origin == owner_txorigin26
\
TMP_174(None) = SOLIDITY_CALL require(bool)(TMP_173)",
		node_expression="require(bool)(tx.origin == owner_txorigin26)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_173(bool) = tx.origin == owner_txorigin26
TMP_174(None) = SOLIDITY_CALL require(bool)(TMP_173)",
		node_source_code_lines="[324]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	285 -> 286	[key=0,
		edge_type=next,
		label=Next];
	287	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin26(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_175 = CONVERT this to address
REF_74 -> \
BALANCE TMP_175
Transfer dest:_recipient value:REF_74",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_175 = CONVERT this to address
REF_74 -> BALANCE TMP_175
Transfer dest:_recipient value:REF_74",
		node_source_code_lines="[325]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	286 -> 287	[key=0,
		edge_type=next,
		label=Next];
	288	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin26(address,address)",
		label="buggy_27.sol_DanPanCoin_withdrawAll_txorigin26(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[323, 324, 325, 326]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	288 -> 285	[key=0,
		edge_type=next,
		label=Next];
	289	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, \
354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, \
380, 381, 382]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	290	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(value <= _balances[from])

IRs:
REF_75(uint256) -> _balances[from]
TMP_177(bool) = \
value <= REF_75
TMP_178(None) = SOLIDITY_CALL require(bool)(TMP_177)",
		node_expression="require(bool)(value <= _balances[from])",
		node_info_vulnerabilities=None,
		node_irs="REF_75(uint256) -> _balances[from]
TMP_177(bool) = value <= REF_75
TMP_178(None) = SOLIDITY_CALL require(bool)(TMP_177)",
		node_source_code_lines="[329]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	289 -> 290	[key=0,
		edge_type=next,
		label=Next];
	291	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(value <= _allowed[from][msg.sender])

IRs:
REF_76(mapping(address => uint256)) \
-> _allowed[from]
REF_77(uint256) -> REF_76[msg.sender]
TMP_179(bool) = value <= REF_77
TMP_180(None) = SOLIDITY_CALL require(bool)(\
TMP_179)",
		node_expression="require(bool)(value <= _allowed[from][msg.sender])",
		node_info_vulnerabilities=None,
		node_irs="REF_76(mapping(address => uint256)) -> _allowed[from]
REF_77(uint256) -> REF_76[msg.sender]
TMP_179(bool) = value <= REF_77
TMP_\
180(None) = SOLIDITY_CALL require(bool)(TMP_179)",
		node_source_code_lines="[330]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	290 -> 291	[key=0,
		edge_type=next,
		label=Next];
	292	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(to != address(0))

IRs:
TMP_181 = CONVERT 0 to address
TMP_182(bool) = to != TMP_\
181
TMP_183(None) = SOLIDITY_CALL require(bool)(TMP_182)",
		node_expression="require(bool)(to != address(0))",
		node_info_vulnerabilities=None,
		node_irs="TMP_181 = CONVERT 0 to address
TMP_182(bool) = to != TMP_181
TMP_183(None) = SOLIDITY_CALL require(bool)(TMP_182)",
		node_source_code_lines="[331]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	291 -> 292	[key=0,
		edge_type=next,
		label=Next];
	293	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: IF

EXPRESSION:
value == 0

IRs:
TMP_184(bool) = value == 0
CONDITION TMP_184",
		node_expression="value == 0",
		node_info_vulnerabilities=None,
		node_irs="TMP_184(bool) = value == 0
CONDITION TMP_184",
		node_source_code_lines="[335]",
		node_type=IF,
		source_file="buggy_27.sol"];
	292 -> 293	[key=0,
		edge_type=next,
		label=Next];
	294	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Transfer(from,to,0)

IRs:
Emit Transfer(from.to.0)",
		node_expression="Transfer(from,to,0)",
		node_info_vulnerabilities=None,
		node_irs="Emit Transfer(from.to.0)",
		node_source_code_lines="[336]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	293 -> 294	[key=0,
		edge_type=if_true,
		label=True];
	296	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[335, 336, 337, 338]",
		node_type=END_IF,
		source_file="buggy_27.sol"];
	293 -> 296	[key=0,
		edge_type=if_false,
		label=False];
	295	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: RETURN

EXPRESSION:
true

IRs:
RETURN True",
		node_expression=true,
		node_info_vulnerabilities=None,
		node_irs="RETURN True",
		node_source_code_lines="[337]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	294 -> 295	[key=0,
		edge_type=next,
		label=Next];
	297	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
tokensToTransfer = value

IRs:
tokensToTransfer(uint256) := value(uint256)",
		node_expression="tokensToTransfer = value",
		node_info_vulnerabilities=None,
		node_irs="tokensToTransfer(uint256) := value(uint256)",
		node_source_code_lines="[342]",
		node_type="NEW VARIABLE",
		source_file="buggy_27.sol"];
	296 -> 297	[key=0,
		edge_type=next,
		label=Next];
	298	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
tokensToBurn = 0

IRs:
tokensToBurn(uint256) := 0(uint256)",
		node_expression="tokensToBurn = 0",
		node_info_vulnerabilities=None,
		node_irs="tokensToBurn(uint256) := 0(uint256)",
		node_source_code_lines="[343]",
		node_type="NEW VARIABLE",
		source_file="buggy_27.sol"];
	297 -> 298	[key=0,
		edge_type=next,
		label=Next];
	299	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
tokensToDanPan = 0

IRs:
tokensToDanPan(uint256) := 0(uint256)",
		node_expression="tokensToDanPan = 0",
		node_info_vulnerabilities=None,
		node_irs="tokensToDanPan(uint256) := 0(uint256)",
		node_source_code_lines="[344]",
		node_type="NEW VARIABLE",
		source_file="buggy_27.sol"];
	298 -> 299	[key=0,
		edge_type=next,
		label=Next];
	300	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_balances[from] = _balances[from].sub(value)

IRs:
REF_78(uint256) -> _balances[from]
REF_79(\
uint256) -> _balances[from]
TMP_186(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['\
REF_79', 'value'] 
REF_78 (->_balances) := TMP_186(uint256)",
		node_expression="_balances[from] = _balances[from].sub(value)",
		node_info_vulnerabilities=None,
		node_irs="REF_78(uint256) -> _balances[from]
REF_79(uint256) -> _balances[from]
TMP_186(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(\
uint256,uint256), arguments:['REF_79', 'value'] 
REF_78 (->_balances) := TMP_186(uint256)",
		node_source_code_lines="[347]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	299 -> 300	[key=0,
		edge_type=next,
		label=Next];
	301	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: IF

EXPRESSION:
! _isWhitelisted(from,to)

IRs:
TMP_187(bool) = INTERNAL_CALL, DanPanCoin._isWhitelisted(address,address)(\
from,to)
TMP_188 = ! TMP_187 
CONDITION TMP_188",
		node_expression="! _isWhitelisted(from,to)",
		node_info_vulnerabilities=None,
		node_irs="TMP_187(bool) = INTERNAL_CALL, DanPanCoin._isWhitelisted(address,address)(from,to)
TMP_188 = ! TMP_187 
CONDITION TMP_188",
		node_source_code_lines="[351]",
		node_type=IF,
		source_file="buggy_27.sol"];
	300 -> 301	[key=0,
		edge_type=next,
		label=Next];
	302	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
tokensToBurn = findOnePercent(value)

IRs:
TMP_189(uint256) = INTERNAL_CALL, DanPanCoin.findOnePercent(\
uint256)(value)
tokensToBurn(uint256) := TMP_189(uint256)",
		node_expression="tokensToBurn = findOnePercent(value)",
		node_info_vulnerabilities=None,
		node_irs="TMP_189(uint256) = INTERNAL_CALL, DanPanCoin.findOnePercent(uint256)(value)
tokensToBurn(uint256) := TMP_189(uint256)",
		node_source_code_lines="[353]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	301 -> 302	[key=0,
		edge_type=if_true,
		label=True];
	309	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368]",
		node_type=END_IF,
		source_file="buggy_27.sol"];
	301 -> 309	[key=0,
		edge_type=if_false,
		label=False];
	303	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
tokensToDanPan = findDPPercent(value)

IRs:
TMP_190(uint256) = INTERNAL_CALL, DanPanCoin.findDPPercent(\
uint256)(value)
tokensToDanPan(uint256) := TMP_190(uint256)",
		node_expression="tokensToDanPan = findDPPercent(value)",
		node_info_vulnerabilities=None,
		node_irs="TMP_190(uint256) = INTERNAL_CALL, DanPanCoin.findDPPercent(uint256)(value)
tokensToDanPan(uint256) := TMP_190(uint256)",
		node_source_code_lines="[354]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	302 -> 303	[key=0,
		edge_type=next,
		label=Next];
	304	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan)

IRs:
TMP_191(uint256) = LIBRARY_\
CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['value', 'tokensToBurn'] 
TMP_192(uint256) = LIBRARY_CALL, \
dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_191', 'tokensToDanPan'] 
tokensToTransfer(uint256) := TMP_\
192(uint256)",
		node_expression="tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan)",
		node_info_vulnerabilities=None,
		node_irs="TMP_191(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['value', 'tokensToBurn'] 
TMP_\
192(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_191', 'tokensToDanPan'] 
tokensToTransfer(\
uint256) := TMP_192(uint256)",
		node_source_code_lines="[357]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	303 -> 304	[key=0,
		edge_type=next,
		label=Next];
	305	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_totalSupply = _totalSupply.sub(tokensToBurn)

IRs:
TMP_193(uint256) = LIBRARY_CALL, dest:SafeMath, \
function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', 'tokensToBurn'] 
_totalSupply(uint256) := TMP_193(uint256)",
		node_expression="_totalSupply = _totalSupply.sub(tokensToBurn)",
		node_info_vulnerabilities=None,
		node_irs="TMP_193(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', 'tokensToBurn'] 
_\
totalSupply(uint256) := TMP_193(uint256)",
		node_source_code_lines="[360]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	304 -> 305	[key=0,
		edge_type=next,
		label=Next];
	306	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Transfer(from,address(0),tokensToBurn)

IRs:
TMP_194 = CONVERT 0 to address
Emit Transfer(from.TMP_\
194.tokensToBurn)",
		node_expression="Transfer(from,address(0),tokensToBurn)",
		node_info_vulnerabilities=None,
		node_irs="TMP_194 = CONVERT 0 to address
Emit Transfer(from.TMP_194.tokensToBurn)",
		node_source_code_lines="[361]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	305 -> 306	[key=0,
		edge_type=next,
		label=Next];
	307	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan)

IRs:
REF_84(uint256) \
-> _balances[DanPanAddress]
REF_85(uint256) -> _balances[DanPanAddress]
TMP_196(uint256) = LIBRARY_CALL, dest:SafeMath, function:\
SafeMath.add(uint256,uint256), arguments:['REF_85', 'tokensToDanPan'] 
REF_84 (->_balances) := TMP_196(uint256)",
		node_expression="_balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan)",
		node_info_vulnerabilities=None,
		node_irs="REF_84(uint256) -> _balances[DanPanAddress]
REF_85(uint256) -> _balances[DanPanAddress]
TMP_196(uint256) = LIBRARY_CALL, dest:SafeMath, \
function:SafeMath.add(uint256,uint256), arguments:['REF_85', 'tokensToDanPan'] 
REF_84 (->_balances) := TMP_196(uint256)",
		node_source_code_lines="[365]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	306 -> 307	[key=0,
		edge_type=next,
		label=Next];
	308	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Transfer(from,DanPanAddress,tokensToDanPan)

IRs:
Emit Transfer(from.DanPanAddress.tokensToDanPan)",
		node_expression="Transfer(from,DanPanAddress,tokensToDanPan)",
		node_info_vulnerabilities=None,
		node_irs="Emit Transfer(from.DanPanAddress.tokensToDanPan)",
		node_source_code_lines="[366]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	307 -> 308	[key=0,
		edge_type=next,
		label=Next];
	308 -> 309	[key=0,
		edge_type=next,
		label=Next];
	310	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
assert(bool)(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value)

IRs:
TMP_198(uint256) = \
LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensToBurn', 'tokensToTransfer'] 
TMP_199(uint256) = \
LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_198', 'tokensToDanPan'] 
TMP_200(bool) = TMP_\
199 == value
TMP_201(None) = SOLIDITY_CALL assert(bool)(TMP_200)",
		node_expression="assert(bool)(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value)",
		node_info_vulnerabilities=None,
		node_irs="TMP_198(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensToBurn', 'tokensToTransfer'] 
\
TMP_199(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_198', 'tokensToDanPan'] 
\
TMP_200(bool) = TMP_199 == value
TMP_201(None) = SOLIDITY_CALL assert(bool)(TMP_200)",
		node_source_code_lines="[372]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	309 -> 310	[key=0,
		edge_type=next,
		label=Next];
	311	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_balances[to] = _balances[to].add(tokensToTransfer)

IRs:
REF_89(uint256) -> _balances[to]
REF_\
90(uint256) -> _balances[to]
TMP_202(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['\
REF_90', 'tokensToTransfer'] 
REF_89 (->_balances) := TMP_202(uint256)",
		node_expression="_balances[to] = _balances[to].add(tokensToTransfer)",
		node_info_vulnerabilities=None,
		node_irs="REF_89(uint256) -> _balances[to]
REF_90(uint256) -> _balances[to]
TMP_202(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(\
uint256,uint256), arguments:['REF_90', 'tokensToTransfer'] 
REF_89 (->_balances) := TMP_202(uint256)",
		node_source_code_lines="[375]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	310 -> 311	[key=0,
		edge_type=next,
		label=Next];
	312	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value)

IRs:
REF_92(mapping(address => \
uint256)) -> _allowed[from]
REF_93(uint256) -> REF_92[msg.sender]
REF_94(mapping(address => uint256)) -> _allowed[from]
REF_95(uint256) \
-> REF_94[msg.sender]
TMP_203(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_95', '\
value'] 
REF_93 (->_allowed) := TMP_203(uint256)",
		node_expression="_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value)",
		node_info_vulnerabilities=None,
		node_irs="REF_92(mapping(address => uint256)) -> _allowed[from]
REF_93(uint256) -> REF_92[msg.sender]
REF_94(mapping(address => uint256)) \
-> _allowed[from]
REF_95(uint256) -> REF_94[msg.sender]
TMP_203(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,\
uint256), arguments:['REF_95', 'value'] 
REF_93 (->_allowed) := TMP_203(uint256)",
		node_source_code_lines="[376]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	311 -> 312	[key=0,
		edge_type=next,
		label=Next];
	313	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Transfer(from,to,tokensToTransfer)

IRs:
Emit Transfer(from.to.tokensToTransfer)",
		node_expression="Transfer(from,to,tokensToTransfer)",
		node_info_vulnerabilities=None,
		node_irs="Emit Transfer(from.to.tokensToTransfer)",
		node_source_code_lines="[377]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	312 -> 313	[key=0,
		edge_type=next,
		label=Next];
	314	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: RETURN

EXPRESSION:
true

IRs:
RETURN True",
		node_expression=true,
		node_info_vulnerabilities=None,
		node_irs="RETURN True",
		node_source_code_lines="[381]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	313 -> 314	[key=0,
		edge_type=next,
		label=Next];
	315	[contract_name=DanPanCoin,
		function_fullname="transferFrom(address,address,uint256)",
		label="buggy_27.sol_DanPanCoin_transferFrom(address,address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, \
354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, \
380, 381, 382]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	315 -> 289	[key=0,
		edge_type=next,
		label=Next];
	316	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin20(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[383, 384, 385]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	317	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin20(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin20)

IRs:
TMP_205(bool) = tx.origin == owner_txorigin20
\
TMP_206(None) = SOLIDITY_CALL require(bool)(TMP_205)",
		node_expression="require(bool)(tx.origin == owner_txorigin20)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_205(bool) = tx.origin == owner_txorigin20
TMP_206(None) = SOLIDITY_CALL require(bool)(TMP_205)",
		node_source_code_lines="[384]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	316 -> 317	[key=0,
		edge_type=next,
		label=Next];
	318	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin20(address)",
		label="buggy_27.sol_DanPanCoin_bug_txorigin20(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[383, 384, 385]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	318 -> 316	[key=0,
		edge_type=next,
		label=Next];
	319	[contract_name=DanPanCoin,
		function_fullname="increaseAllowance(address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[387, 388, 389, 390, 391, 392]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	320	[contract_name=DanPanCoin,
		function_fullname="increaseAllowance(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(spender != address(0))

IRs:
TMP_207 = CONVERT 0 to address
TMP_208(bool) = spender != \
TMP_207
TMP_209(None) = SOLIDITY_CALL require(bool)(TMP_208)",
		node_expression="require(bool)(spender != address(0))",
		node_info_vulnerabilities=None,
		node_irs="TMP_207 = CONVERT 0 to address
TMP_208(bool) = spender != TMP_207
TMP_209(None) = SOLIDITY_CALL require(bool)(TMP_208)",
		node_source_code_lines="[388]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	319 -> 320	[key=0,
		edge_type=next,
		label=Next];
	321	[contract_name=DanPanCoin,
		function_fullname="increaseAllowance(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue))

IRs:
REF_97(\
mapping(address => uint256)) -> _allowed[msg.sender]
REF_98(uint256) -> REF_97[spender]
REF_99(mapping(address => uint256)) -> _\
allowed[msg.sender]
REF_100(uint256) -> REF_99[spender]
TMP_210(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,\
uint256), arguments:['REF_100', 'addedValue'] 
REF_98 (->_allowed) := TMP_210(uint256)",
		node_expression="_allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue))",
		node_info_vulnerabilities=None,
		node_irs="REF_97(mapping(address => uint256)) -> _allowed[msg.sender]
REF_98(uint256) -> REF_97[spender]
REF_99(mapping(address => uint256)) \
-> _allowed[msg.sender]
REF_100(uint256) -> REF_99[spender]
TMP_210(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(\
uint256,uint256), arguments:['REF_100', 'addedValue'] 
REF_98 (->_allowed) := TMP_210(uint256)",
		node_source_code_lines="[389]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	320 -> 321	[key=0,
		edge_type=next,
		label=Next];
	322	[contract_name=DanPanCoin,
		function_fullname="increaseAllowance(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Approval(msg.sender,spender,_allowed[msg.sender][spender])

IRs:
REF_102(mapping(address => uint256)) \
-> _allowed[msg.sender]
REF_103(uint256) -> REF_102[spender]
Emit Approval(msg.sender.spender.REF_103)",
		node_expression="Approval(msg.sender,spender,_allowed[msg.sender][spender])",
		node_info_vulnerabilities=None,
		node_irs="REF_102(mapping(address => uint256)) -> _allowed[msg.sender]
REF_103(uint256) -> REF_102[spender]
Emit Approval(msg.sender.spender.REF_\
103)",
		node_source_code_lines="[390]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	321 -> 322	[key=0,
		edge_type=next,
		label=Next];
	323	[contract_name=DanPanCoin,
		function_fullname="increaseAllowance(address,uint256)",
		label="Node Type: RETURN

EXPRESSION:
true

IRs:
RETURN True",
		node_expression=true,
		node_info_vulnerabilities=None,
		node_irs="RETURN True",
		node_source_code_lines="[391]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	322 -> 323	[key=0,
		edge_type=next,
		label=Next];
	324	[contract_name=DanPanCoin,
		function_fullname="increaseAllowance(address,uint256)",
		label="buggy_27.sol_DanPanCoin_increaseAllowance(address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[387, 388, 389, 390, 391, 392]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	324 -> 319	[key=0,
		edge_type=next,
		label=Next];
	325	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin32(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[393, 394, 395]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	326	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin32(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin32)

IRs:
TMP_212(bool) = tx.origin == owner_txorigin32
\
TMP_213(None) = SOLIDITY_CALL require(bool)(TMP_212)",
		node_expression="require(bool)(tx.origin == owner_txorigin32)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_212(bool) = tx.origin == owner_txorigin32
TMP_213(None) = SOLIDITY_CALL require(bool)(TMP_212)",
		node_source_code_lines="[394]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	325 -> 326	[key=0,
		edge_type=next,
		label=Next];
	327	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin32(address)",
		label="buggy_27.sol_DanPanCoin_bug_txorigin32(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[393, 394, 395]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	327 -> 325	[key=0,
		edge_type=next,
		label=Next];
	328	[contract_name=DanPanCoin,
		function_fullname="decreaseAllowance(address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[397, 398, 399, 400, 401, 402]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	329	[contract_name=DanPanCoin,
		function_fullname="decreaseAllowance(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(spender != address(0))

IRs:
TMP_214 = CONVERT 0 to address
TMP_215(bool) = spender != \
TMP_214
TMP_216(None) = SOLIDITY_CALL require(bool)(TMP_215)",
		node_expression="require(bool)(spender != address(0))",
		node_info_vulnerabilities=None,
		node_irs="TMP_214 = CONVERT 0 to address
TMP_215(bool) = spender != TMP_214
TMP_216(None) = SOLIDITY_CALL require(bool)(TMP_215)",
		node_source_code_lines="[398]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	328 -> 329	[key=0,
		edge_type=next,
		label=Next];
	330	[contract_name=DanPanCoin,
		function_fullname="decreaseAllowance(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue))

IRs:
REF_\
104(mapping(address => uint256)) -> _allowed[msg.sender]
REF_105(uint256) -> REF_104[spender]
REF_106(mapping(address => uint256)) \
-> _allowed[msg.sender]
REF_107(uint256) -> REF_106[spender]
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(\
uint256,uint256), arguments:['REF_107', 'subtractedValue'] 
REF_105 (->_allowed) := TMP_217(uint256)",
		node_expression="_allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue))",
		node_info_vulnerabilities=None,
		node_irs="REF_104(mapping(address => uint256)) -> _allowed[msg.sender]
REF_105(uint256) -> REF_104[spender]
REF_106(mapping(address => uint256)) \
-> _allowed[msg.sender]
REF_107(uint256) -> REF_106[spender]
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(\
uint256,uint256), arguments:['REF_107', 'subtractedValue'] 
REF_105 (->_allowed) := TMP_217(uint256)",
		node_source_code_lines="[399]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	329 -> 330	[key=0,
		edge_type=next,
		label=Next];
	331	[contract_name=DanPanCoin,
		function_fullname="decreaseAllowance(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Approval(msg.sender,spender,_allowed[msg.sender][spender])

IRs:
REF_109(mapping(address => uint256)) \
-> _allowed[msg.sender]
REF_110(uint256) -> REF_109[spender]
Emit Approval(msg.sender.spender.REF_110)",
		node_expression="Approval(msg.sender,spender,_allowed[msg.sender][spender])",
		node_info_vulnerabilities=None,
		node_irs="REF_109(mapping(address => uint256)) -> _allowed[msg.sender]
REF_110(uint256) -> REF_109[spender]
Emit Approval(msg.sender.spender.REF_\
110)",
		node_source_code_lines="[400]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	330 -> 331	[key=0,
		edge_type=next,
		label=Next];
	332	[contract_name=DanPanCoin,
		function_fullname="decreaseAllowance(address,uint256)",
		label="Node Type: RETURN

EXPRESSION:
true

IRs:
RETURN True",
		node_expression=true,
		node_info_vulnerabilities=None,
		node_irs="RETURN True",
		node_source_code_lines="[401]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	331 -> 332	[key=0,
		edge_type=next,
		label=Next];
	333	[contract_name=DanPanCoin,
		function_fullname="decreaseAllowance(address,uint256)",
		label="buggy_27.sol_DanPanCoin_decreaseAllowance(address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[397, 398, 399, 400, 401, 402]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	333 -> 328	[key=0,
		edge_type=next,
		label=Next];
	334	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin38(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[403, 404, 405, 406]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	335	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin38(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin38)

IRs:
TMP_219(bool) = tx.origin == owner_txorigin38
\
TMP_220(None) = SOLIDITY_CALL require(bool)(TMP_219)",
		node_expression="require(bool)(tx.origin == owner_txorigin38)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_219(bool) = tx.origin == owner_txorigin38
TMP_220(None) = SOLIDITY_CALL require(bool)(TMP_219)",
		node_source_code_lines="[404]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	334 -> 335	[key=0,
		edge_type=next,
		label=Next];
	336	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin38(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_221 = CONVERT this to address
REF_112 -> \
BALANCE TMP_221
Transfer dest:_recipient value:REF_112",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_221 = CONVERT this to address
REF_112 -> BALANCE TMP_221
Transfer dest:_recipient value:REF_112",
		node_source_code_lines="[405]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	335 -> 336	[key=0,
		edge_type=next,
		label=Next];
	337	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin38(address,address)",
		label="buggy_27.sol_DanPanCoin_withdrawAll_txorigin38(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[403, 404, 405, 406]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	337 -> 334	[key=0,
		edge_type=next,
		label=Next];
	338	[contract_name=DanPanCoin,
		function_fullname="_mint(address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[408, 409, 410, 411, 412]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	339	[contract_name=DanPanCoin,
		function_fullname="_mint(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(amount != 0)

IRs:
TMP_223(bool) = amount != 0
TMP_224(None) = SOLIDITY_CALL require(\
bool)(TMP_223)",
		node_expression="require(bool)(amount != 0)",
		node_info_vulnerabilities=None,
		node_irs="TMP_223(bool) = amount != 0
TMP_224(None) = SOLIDITY_CALL require(bool)(TMP_223)",
		node_source_code_lines="[409]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	338 -> 339	[key=0,
		edge_type=next,
		label=Next];
	340	[contract_name=DanPanCoin,
		function_fullname="_mint(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_balances[account] = _balances[account].add(amount)

IRs:
REF_113(uint256) -> _balances[account]
\
REF_114(uint256) -> _balances[account]
TMP_225(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['\
REF_114', 'amount'] 
REF_113 (->_balances) := TMP_225(uint256)",
		node_expression="_balances[account] = _balances[account].add(amount)",
		node_info_vulnerabilities=None,
		node_irs="REF_113(uint256) -> _balances[account]
REF_114(uint256) -> _balances[account]
TMP_225(uint256) = LIBRARY_CALL, dest:SafeMath, function:\
SafeMath.add(uint256,uint256), arguments:['REF_114', 'amount'] 
REF_113 (->_balances) := TMP_225(uint256)",
		node_source_code_lines="[410]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	339 -> 340	[key=0,
		edge_type=next,
		label=Next];
	341	[contract_name=DanPanCoin,
		function_fullname="_mint(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Transfer(address(0),account,amount)

IRs:
TMP_226 = CONVERT 0 to address
Emit Transfer(TMP_226.account.amount)",
		node_expression="Transfer(address(0),account,amount)",
		node_info_vulnerabilities=None,
		node_irs="TMP_226 = CONVERT 0 to address
Emit Transfer(TMP_226.account.amount)",
		node_source_code_lines="[411]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	340 -> 341	[key=0,
		edge_type=next,
		label=Next];
	342	[contract_name=DanPanCoin,
		function_fullname="_mint(address,uint256)",
		label="buggy_27.sol_DanPanCoin__mint(address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[408, 409, 410, 411, 412]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	342 -> 338	[key=0,
		edge_type=next,
		label=Next];
	343	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin4(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[413, 414, 415]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	344	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin4(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin4)

IRs:
TMP_228(bool) = tx.origin == owner_txorigin4
\
TMP_229(None) = SOLIDITY_CALL require(bool)(TMP_228)",
		node_expression="require(bool)(tx.origin == owner_txorigin4)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_228(bool) = tx.origin == owner_txorigin4
TMP_229(None) = SOLIDITY_CALL require(bool)(TMP_228)",
		node_source_code_lines="[414]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	343 -> 344	[key=0,
		edge_type=next,
		label=Next];
	345	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin4(address)",
		label="buggy_27.sol_DanPanCoin_bug_txorigin4(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[413, 414, 415]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	345 -> 343	[key=0,
		edge_type=next,
		label=Next];
	346	[contract_name=DanPanCoin,
		function_fullname="burn(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[417, 418, 419]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	347	[contract_name=DanPanCoin,
		function_fullname="burn(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_burn(msg.sender,amount)

IRs:
INTERNAL_CALL, DanPanCoin._burn(address,uint256)(msg.sender,amount)",
		node_expression="_burn(msg.sender,amount)",
		node_info_vulnerabilities=None,
		node_irs="INTERNAL_CALL, DanPanCoin._burn(address,uint256)(msg.sender,amount)",
		node_source_code_lines="[418]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	346 -> 347	[key=0,
		edge_type=next,
		label=Next];
	348	[contract_name=DanPanCoin,
		function_fullname="burn(uint256)",
		label="buggy_27.sol_DanPanCoin_burn(uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[417, 418, 419]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	348 -> 346	[key=0,
		edge_type=next,
		label=Next];
	349	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin7(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[420, 421, 422, 423]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	350	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin7(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin7)

IRs:
TMP_231(bool) = tx.origin == owner_txorigin7
\
TMP_232(None) = SOLIDITY_CALL require(bool)(TMP_231)",
		node_expression="require(bool)(tx.origin == owner_txorigin7)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_231(bool) = tx.origin == owner_txorigin7
TMP_232(None) = SOLIDITY_CALL require(bool)(TMP_231)",
		node_source_code_lines="[421]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	349 -> 350	[key=0,
		edge_type=next,
		label=Next];
	351	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin7(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_116(None) -> to.call
REF_117(None) -> REF_116.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="REF_116(None) -> to.call
REF_117(None) -> REF_116.value",
		node_source_code_lines="[422]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	350 -> 351	[key=0,
		edge_type=next,
		label=Next];
	352	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin7(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_transferTo_txorigin7(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[420, 421, 422, 423]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	352 -> 349	[key=0,
		edge_type=next,
		label=Next];
	353	[contract_name=DanPanCoin,
		function_fullname="_burn(address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[425, 426, 427, 428, 429, 430, 431]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	354	[contract_name=DanPanCoin,
		function_fullname="_burn(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(amount != 0)

IRs:
TMP_234(bool) = amount != 0
TMP_235(None) = SOLIDITY_CALL require(\
bool)(TMP_234)",
		node_expression="require(bool)(amount != 0)",
		node_info_vulnerabilities=None,
		node_irs="TMP_234(bool) = amount != 0
TMP_235(None) = SOLIDITY_CALL require(bool)(TMP_234)",
		node_source_code_lines="[426]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	353 -> 354	[key=0,
		edge_type=next,
		label=Next];
	355	[contract_name=DanPanCoin,
		function_fullname="_burn(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(amount <= _balances[account])

IRs:
REF_118(uint256) -> _balances[account]
TMP_\
236(bool) = amount <= REF_118
TMP_237(None) = SOLIDITY_CALL require(bool)(TMP_236)",
		node_expression="require(bool)(amount <= _balances[account])",
		node_info_vulnerabilities=None,
		node_irs="REF_118(uint256) -> _balances[account]
TMP_236(bool) = amount <= REF_118
TMP_237(None) = SOLIDITY_CALL require(bool)(TMP_236)",
		node_source_code_lines="[427]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	354 -> 355	[key=0,
		edge_type=next,
		label=Next];
	356	[contract_name=DanPanCoin,
		function_fullname="_burn(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_totalSupply = _totalSupply.sub(amount)

IRs:
TMP_238(uint256) = LIBRARY_CALL, dest:SafeMath, \
function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', 'amount'] 
_totalSupply(uint256) := TMP_238(uint256)",
		node_expression="_totalSupply = _totalSupply.sub(amount)",
		node_info_vulnerabilities=None,
		node_irs="TMP_238(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', 'amount'] 
_totalSupply(\
uint256) := TMP_238(uint256)",
		node_source_code_lines="[428]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	355 -> 356	[key=0,
		edge_type=next,
		label=Next];
	357	[contract_name=DanPanCoin,
		function_fullname="_burn(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_balances[account] = _balances[account].sub(amount)

IRs:
REF_120(uint256) -> _balances[account]
\
REF_121(uint256) -> _balances[account]
TMP_239(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['\
REF_121', 'amount'] 
REF_120 (->_balances) := TMP_239(uint256)",
		node_expression="_balances[account] = _balances[account].sub(amount)",
		node_info_vulnerabilities=None,
		node_irs="REF_120(uint256) -> _balances[account]
REF_121(uint256) -> _balances[account]
TMP_239(uint256) = LIBRARY_CALL, dest:SafeMath, function:\
SafeMath.sub(uint256,uint256), arguments:['REF_121', 'amount'] 
REF_120 (->_balances) := TMP_239(uint256)",
		node_source_code_lines="[429]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	356 -> 357	[key=0,
		edge_type=next,
		label=Next];
	358	[contract_name=DanPanCoin,
		function_fullname="_burn(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Transfer(account,address(0),amount)

IRs:
TMP_240 = CONVERT 0 to address
Emit Transfer(account.TMP_\
240.amount)",
		node_expression="Transfer(account,address(0),amount)",
		node_info_vulnerabilities=None,
		node_irs="TMP_240 = CONVERT 0 to address
Emit Transfer(account.TMP_240.amount)",
		node_source_code_lines="[430]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	357 -> 358	[key=0,
		edge_type=next,
		label=Next];
	359	[contract_name=DanPanCoin,
		function_fullname="_burn(address,uint256)",
		label="buggy_27.sol_DanPanCoin__burn(address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[425, 426, 427, 428, 429, 430, 431]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	359 -> 353	[key=0,
		edge_type=next,
		label=Next];
	360	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin23(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[432, 433, 434, 435]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	361	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin23(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin23)

IRs:
TMP_242(bool) = tx.origin == owner_txorigin23
\
TMP_243(None) = SOLIDITY_CALL require(bool)(TMP_242)",
		node_expression="require(bool)(tx.origin == owner_txorigin23)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_242(bool) = tx.origin == owner_txorigin23
TMP_243(None) = SOLIDITY_CALL require(bool)(TMP_242)",
		node_source_code_lines="[433]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	360 -> 361	[key=0,
		edge_type=next,
		label=Next];
	362	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin23(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_123(None) -> to.call
REF_124(None) -> REF_123.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="REF_123(None) -> to.call
REF_124(None) -> REF_123.value",
		node_source_code_lines="[434]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	361 -> 362	[key=0,
		edge_type=next,
		label=Next];
	363	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin23(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_transferTo_txorigin23(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[432, 433, 434, 435]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	363 -> 360	[key=0,
		edge_type=next,
		label=Next];
	364	[contract_name=DanPanCoin,
		function_fullname="burnFrom(address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[437, 438, 439, 440, 441]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	365	[contract_name=DanPanCoin,
		function_fullname="burnFrom(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(amount <= _allowed[account][msg.sender])

IRs:
REF_125(mapping(address => uint256)) \
-> _allowed[account]
REF_126(uint256) -> REF_125[msg.sender]
TMP_245(bool) = amount <= REF_126
TMP_246(None) = SOLIDITY_CALL require(\
bool)(TMP_245)",
		node_expression="require(bool)(amount <= _allowed[account][msg.sender])",
		node_info_vulnerabilities=None,
		node_irs="REF_125(mapping(address => uint256)) -> _allowed[account]
REF_126(uint256) -> REF_125[msg.sender]
TMP_245(bool) = amount <= REF_\
126
TMP_246(None) = SOLIDITY_CALL require(bool)(TMP_245)",
		node_source_code_lines="[438]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	364 -> 365	[key=0,
		edge_type=next,
		label=Next];
	366	[contract_name=DanPanCoin,
		function_fullname="burnFrom(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount)

IRs:
REF_127(mapping(\
address => uint256)) -> _allowed[account]
REF_128(uint256) -> REF_127[msg.sender]
REF_129(mapping(address => uint256)) -> _allowed[\
account]
REF_130(uint256) -> REF_129[msg.sender]
TMP_247(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), \
arguments:['REF_130', 'amount'] 
REF_128 (->_allowed) := TMP_247(uint256)",
		node_expression="_allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount)",
		node_info_vulnerabilities=None,
		node_irs="REF_127(mapping(address => uint256)) -> _allowed[account]
REF_128(uint256) -> REF_127[msg.sender]
REF_129(mapping(address => uint256)) \
-> _allowed[account]
REF_130(uint256) -> REF_129[msg.sender]
TMP_247(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(\
uint256,uint256), arguments:['REF_130', 'amount'] 
REF_128 (->_allowed) := TMP_247(uint256)",
		node_source_code_lines="[439]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	365 -> 366	[key=0,
		edge_type=next,
		label=Next];
	367	[contract_name=DanPanCoin,
		function_fullname="burnFrom(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_burn(account,amount)

IRs:
INTERNAL_CALL, DanPanCoin._burn(address,uint256)(account,amount)",
		node_expression="_burn(account,amount)",
		node_info_vulnerabilities=None,
		node_irs="INTERNAL_CALL, DanPanCoin._burn(address,uint256)(account,amount)",
		node_source_code_lines="[440]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	366 -> 367	[key=0,
		edge_type=next,
		label=Next];
	368	[contract_name=DanPanCoin,
		function_fullname="burnFrom(address,uint256)",
		label="buggy_27.sol_DanPanCoin_burnFrom(address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[437, 438, 439, 440, 441]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	368 -> 364	[key=0,
		edge_type=next,
		label=Next];
	369	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin14(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[442, 443, 444, 445]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	370	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin14(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin14)

IRs:
TMP_249(bool) = tx.origin == owner_txorigin14
\
TMP_250(None) = SOLIDITY_CALL require(bool)(TMP_249)",
		node_expression="require(bool)(tx.origin == owner_txorigin14)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_249(bool) = tx.origin == owner_txorigin14
TMP_250(None) = SOLIDITY_CALL require(bool)(TMP_249)",
		node_source_code_lines="[443]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	369 -> 370	[key=0,
		edge_type=next,
		label=Next];
	371	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin14(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_251 = CONVERT this to address
REF_133 -> \
BALANCE TMP_251
Transfer dest:_recipient value:REF_133",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_251 = CONVERT this to address
REF_133 -> BALANCE TMP_251
Transfer dest:_recipient value:REF_133",
		node_source_code_lines="[444]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	370 -> 371	[key=0,
		edge_type=next,
		label=Next];
	372	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin14(address,address)",
		label="buggy_27.sol_DanPanCoin_withdrawAll_txorigin14(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[442, 443, 444, 445]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	372 -> 369	[key=0,
		edge_type=next,
		label=Next];
	373	[contract_name=DanPanCoin,
		function_fullname="NewDanPanAddress(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[447, 448, 449, 450, 451]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	377	[contract_name=DanPanCoin,
		function_fullname="NewDanPanAddress(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()",
		node_expression="onlyOwner()",
		node_info_vulnerabilities=None,
		node_irs="MODIFIER_CALL, Ownable.onlyOwner()()",
		node_source_code_lines="[447]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	373 -> 377	[key=0,
		edge_type=next,
		label=Next];
	374	[contract_name=DanPanCoin,
		function_fullname="NewDanPanAddress(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(newDanPanaddress != address(0))

IRs:
TMP_253 = CONVERT 0 to address
TMP_254(bool) = \
newDanPanaddress != TMP_253
TMP_255(None) = SOLIDITY_CALL require(bool)(TMP_254)",
		node_expression="require(bool)(newDanPanaddress != address(0))",
		node_info_vulnerabilities=None,
		node_irs="TMP_253 = CONVERT 0 to address
TMP_254(bool) = newDanPanaddress != TMP_253
TMP_255(None) = SOLIDITY_CALL require(bool)(TMP_254)",
		node_source_code_lines="[448]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	375	[contract_name=DanPanCoin,
		function_fullname="NewDanPanAddress(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
DanPanAddressChanged(DanPanAddress,newDanPanaddress)

IRs:
Emit DanPanAddressChanged(DanPanAddress.newDanPanaddress)",
		node_expression="DanPanAddressChanged(DanPanAddress,newDanPanaddress)",
		node_info_vulnerabilities=None,
		node_irs="Emit DanPanAddressChanged(DanPanAddress.newDanPanaddress)",
		node_source_code_lines="[449]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	374 -> 375	[key=0,
		edge_type=next,
		label=Next];
	376	[contract_name=DanPanCoin,
		function_fullname="NewDanPanAddress(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
DanPanAddress = newDanPanaddress

IRs:
DanPanAddress(address) := newDanPanaddress(address)",
		node_expression="DanPanAddress = newDanPanaddress",
		node_info_vulnerabilities=None,
		node_irs="DanPanAddress(address) := newDanPanaddress(address)",
		node_source_code_lines="[450]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	375 -> 376	[key=0,
		edge_type=next,
		label=Next];
	377 -> 374	[key=0,
		edge_type=next,
		label=Next];
	378	[contract_name=DanPanCoin,
		function_fullname="NewDanPanAddress(address)",
		label="buggy_27.sol_DanPanCoin_NewDanPanAddress(address)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[447, 448, 449, 450, 451]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	378 -> 373	[key=0,
		edge_type=next,
		label=Next];
	379	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin30(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[452, 453, 454, 455]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	380	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin30(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin30)

IRs:
TMP_258(bool) = tx.origin == owner_txorigin30
\
TMP_259(None) = SOLIDITY_CALL require(bool)(TMP_258)",
		node_expression="require(bool)(tx.origin == owner_txorigin30)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_258(bool) = tx.origin == owner_txorigin30
TMP_259(None) = SOLIDITY_CALL require(bool)(TMP_258)",
		node_source_code_lines="[453]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	379 -> 380	[key=0,
		edge_type=next,
		label=Next];
	381	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin30(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_260 = CONVERT this to address
REF_135 -> \
BALANCE TMP_260
Transfer dest:_recipient value:REF_135",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_260 = CONVERT this to address
REF_135 -> BALANCE TMP_260
Transfer dest:_recipient value:REF_135",
		node_source_code_lines="[454]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	380 -> 381	[key=0,
		edge_type=next,
		label=Next];
	382	[contract_name=DanPanCoin,
		function_fullname="withdrawAll_txorigin30(address,address)",
		label="buggy_27.sol_DanPanCoin_withdrawAll_txorigin30(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[452, 453, 454, 455]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	382 -> 379	[key=0,
		edge_type=next,
		label=Next];
	383	[contract_name=DanPanCoin,
		function_fullname="NewDanPanPercent(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[457, 458, 459, 460]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	386	[contract_name=DanPanCoin,
		function_fullname="NewDanPanPercent(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()",
		node_expression="onlyOwner()",
		node_info_vulnerabilities=None,
		node_irs="MODIFIER_CALL, Ownable.onlyOwner()()",
		node_source_code_lines="[457]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	383 -> 386	[key=0,
		edge_type=next,
		label=Next];
	384	[contract_name=DanPanCoin,
		function_fullname="NewDanPanPercent(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
DanPanPercentChanged(dpPercent,newDanPanpercent)

IRs:
Emit DanPanPercentChanged(dpPercent.newDanPanpercent)",
		node_expression="DanPanPercentChanged(dpPercent,newDanPanpercent)",
		node_info_vulnerabilities=None,
		node_irs="Emit DanPanPercentChanged(dpPercent.newDanPanpercent)",
		node_source_code_lines="[458]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	385	[contract_name=DanPanCoin,
		function_fullname="NewDanPanPercent(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
dpPercent = newDanPanpercent

IRs:
dpPercent(uint256) := newDanPanpercent(uint256)",
		node_expression="dpPercent = newDanPanpercent",
		node_info_vulnerabilities=None,
		node_irs="dpPercent(uint256) := newDanPanpercent(uint256)",
		node_source_code_lines="[459]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	384 -> 385	[key=0,
		edge_type=next,
		label=Next];
	386 -> 384	[key=0,
		edge_type=next,
		label=Next];
	387	[contract_name=DanPanCoin,
		function_fullname="NewDanPanPercent(uint256)",
		label="buggy_27.sol_DanPanCoin_NewDanPanPercent(uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[457, 458, 459, 460]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	387 -> 383	[key=0,
		edge_type=next,
		label=Next];
	388	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin8(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[461, 462, 463]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	389	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin8(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin8)

IRs:
TMP_264(bool) = tx.origin == owner_txorigin8
\
TMP_265(None) = SOLIDITY_CALL require(bool)(TMP_264)",
		node_expression="require(bool)(tx.origin == owner_txorigin8)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_264(bool) = tx.origin == owner_txorigin8
TMP_265(None) = SOLIDITY_CALL require(bool)(TMP_264)",
		node_source_code_lines="[462]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	388 -> 389	[key=0,
		edge_type=next,
		label=Next];
	390	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin8(address)",
		label="buggy_27.sol_DanPanCoin_bug_txorigin8(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[461, 462, 463]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	390 -> 388	[key=0,
		edge_type=next,
		label=Next];
	391	[contract_name=DanPanCoin,
		function_fullname="_isWhitelisted(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[465, 466, 467, 468]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	392	[contract_name=DanPanCoin,
		function_fullname="_isWhitelisted(address,address)",
		label="Node Type: RETURN

EXPRESSION:
whitelistFrom[_from] || whitelistTo[_to]

IRs:
REF_136(bool) -> whitelistFrom[_from]
REF_137(bool) \
-> whitelistTo[_to]
TMP_266(bool) = REF_136 || REF_137
RETURN TMP_266",
		node_expression="whitelistFrom[_from] || whitelistTo[_to]",
		node_info_vulnerabilities=None,
		node_irs="REF_136(bool) -> whitelistFrom[_from]
REF_137(bool) -> whitelistTo[_to]
TMP_266(bool) = REF_136 || REF_137
RETURN TMP_266",
		node_source_code_lines="[467]",
		node_type=RETURN,
		source_file="buggy_27.sol"];
	391 -> 392	[key=0,
		edge_type=next,
		label=Next];
	393	[contract_name=DanPanCoin,
		function_fullname="_isWhitelisted(address,address)",
		label="buggy_27.sol_DanPanCoin__isWhitelisted(address,address)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[465, 466, 467, 468]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	393 -> 391	[key=0,
		edge_type=next,
		label=Next];
	394	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin39(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[469, 470, 471, 472]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	395	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin39(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin39)

IRs:
TMP_267(bool) = tx.origin == owner_txorigin39
\
TMP_268(None) = SOLIDITY_CALL require(bool)(TMP_267)",
		node_expression="require(bool)(tx.origin == owner_txorigin39)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_267(bool) = tx.origin == owner_txorigin39
TMP_268(None) = SOLIDITY_CALL require(bool)(TMP_267)",
		node_source_code_lines="[470]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	394 -> 395	[key=0,
		edge_type=next,
		label=Next];
	396	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin39(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_138(None) -> to.call
REF_139(None) -> REF_138.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="REF_138(None) -> to.call
REF_139(None) -> REF_138.value",
		node_source_code_lines="[471]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	395 -> 396	[key=0,
		edge_type=next,
		label=Next];
	397	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin39(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_transferTo_txorigin39(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[469, 470, 471, 472]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	397 -> 394	[key=0,
		edge_type=next,
		label=Next];
	398	[contract_name=DanPanCoin,
		function_fullname="setWhitelistedTo(address,bool)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[474, 475, 476, 477]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	401	[contract_name=DanPanCoin,
		function_fullname="setWhitelistedTo(address,bool)",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()",
		node_expression="onlyOwner()",
		node_info_vulnerabilities=None,
		node_irs="MODIFIER_CALL, Ownable.onlyOwner()()",
		node_source_code_lines="[474]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	398 -> 401	[key=0,
		edge_type=next,
		label=Next];
	399	[contract_name=DanPanCoin,
		function_fullname="setWhitelistedTo(address,bool)",
		label="Node Type: EXPRESSION

EXPRESSION:
WhitelistTo(_addr,_whitelisted)

IRs:
Emit WhitelistTo(_addr._whitelisted)",
		node_expression="WhitelistTo(_addr,_whitelisted)",
		node_info_vulnerabilities=None,
		node_irs="Emit WhitelistTo(_addr._whitelisted)",
		node_source_code_lines="[475]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	400	[contract_name=DanPanCoin,
		function_fullname="setWhitelistedTo(address,bool)",
		label="Node Type: EXPRESSION

EXPRESSION:
whitelistTo[_addr] = _whitelisted

IRs:
REF_140(bool) -> whitelistTo[_addr]
REF_140 (->whitelistTo) := _\
whitelisted(bool)",
		node_expression="whitelistTo[_addr] = _whitelisted",
		node_info_vulnerabilities=None,
		node_irs="REF_140(bool) -> whitelistTo[_addr]
REF_140 (->whitelistTo) := _whitelisted(bool)",
		node_source_code_lines="[476]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	399 -> 400	[key=0,
		edge_type=next,
		label=Next];
	401 -> 399	[key=0,
		edge_type=next,
		label=Next];
	402	[contract_name=DanPanCoin,
		function_fullname="setWhitelistedTo(address,bool)",
		label="buggy_27.sol_DanPanCoin_setWhitelistedTo(address,bool)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[474, 475, 476, 477]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	402 -> 398	[key=0,
		edge_type=next,
		label=Next];
	403	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin36(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[478, 479, 480]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	404	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin36(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin36)

IRs:
TMP_272(bool) = tx.origin == owner_txorigin36
\
TMP_273(None) = SOLIDITY_CALL require(bool)(TMP_272)",
		node_expression="require(bool)(tx.origin == owner_txorigin36)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_272(bool) = tx.origin == owner_txorigin36
TMP_273(None) = SOLIDITY_CALL require(bool)(TMP_272)",
		node_source_code_lines="[479]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	403 -> 404	[key=0,
		edge_type=next,
		label=Next];
	405	[contract_name=DanPanCoin,
		function_fullname="bug_txorigin36(address)",
		label="buggy_27.sol_DanPanCoin_bug_txorigin36(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[478, 479, 480]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	405 -> 403	[key=0,
		edge_type=next,
		label=Next];
	406	[contract_name=DanPanCoin,
		function_fullname="setWhitelistedFrom(address,bool)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[482, 483, 484, 485]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	409	[contract_name=DanPanCoin,
		function_fullname="setWhitelistedFrom(address,bool)",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()",
		node_expression="onlyOwner()",
		node_info_vulnerabilities=None,
		node_irs="MODIFIER_CALL, Ownable.onlyOwner()()",
		node_source_code_lines="[482]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	406 -> 409	[key=0,
		edge_type=next,
		label=Next];
	407	[contract_name=DanPanCoin,
		function_fullname="setWhitelistedFrom(address,bool)",
		label="Node Type: EXPRESSION

EXPRESSION:
WhitelistFrom(_addr,_whitelisted)

IRs:
Emit WhitelistFrom(_addr._whitelisted)",
		node_expression="WhitelistFrom(_addr,_whitelisted)",
		node_info_vulnerabilities=None,
		node_irs="Emit WhitelistFrom(_addr._whitelisted)",
		node_source_code_lines="[483]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	408	[contract_name=DanPanCoin,
		function_fullname="setWhitelistedFrom(address,bool)",
		label="Node Type: EXPRESSION

EXPRESSION:
whitelistFrom[_addr] = _whitelisted

IRs:
REF_141(bool) -> whitelistFrom[_addr]
REF_141 (->whitelistFrom) := _\
whitelisted(bool)",
		node_expression="whitelistFrom[_addr] = _whitelisted",
		node_info_vulnerabilities=None,
		node_irs="REF_141(bool) -> whitelistFrom[_addr]
REF_141 (->whitelistFrom) := _whitelisted(bool)",
		node_source_code_lines="[484]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	407 -> 408	[key=0,
		edge_type=next,
		label=Next];
	409 -> 407	[key=0,
		edge_type=next,
		label=Next];
	410	[contract_name=DanPanCoin,
		function_fullname="setWhitelistedFrom(address,bool)",
		label="buggy_27.sol_DanPanCoin_setWhitelistedFrom(address,bool)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[482, 483, 484, 485]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	410 -> 406	[key=0,
		edge_type=next,
		label=Next];
	411	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin35(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[486, 487, 488, 489]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	412	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin35(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin35)

IRs:
TMP_276(bool) = tx.origin == owner_txorigin35
\
TMP_277(None) = SOLIDITY_CALL require(bool)(TMP_276)",
		node_expression="require(bool)(tx.origin == owner_txorigin35)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="TMP_276(bool) = tx.origin == owner_txorigin35
TMP_277(None) = SOLIDITY_CALL require(bool)(TMP_276)",
		node_source_code_lines="[487]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	411 -> 412	[key=0,
		edge_type=next,
		label=Next];
	413	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin35(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_142(None) -> to.call
REF_143(None) -> REF_142.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs="REF_142(None) -> to.call
REF_143(None) -> REF_142.value",
		node_source_code_lines="[488]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	412 -> 413	[key=0,
		edge_type=next,
		label=Next];
	414	[contract_name=DanPanCoin,
		function_fullname="transferTo_txorigin35(address,uint256,address)",
		label="buggy_27.sol_DanPanCoin_transferTo_txorigin35(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[486, 487, 488, 489]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	414 -> 411	[key=0,
		edge_type=next,
		label=Next];
	415	[contract_name=DanPanCoin,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
_totalSupply = 10000000000

IRs:
_totalSupply(uint256) := 10000000000(uint256)",
		node_expression="_totalSupply = 10000000000",
		node_info_vulnerabilities=None,
		node_irs="_totalSupply(uint256) := 10000000000(uint256)",
		node_source_code_lines="[149]",
		node_type=OTHER_ENTRYPOINT,
		source_file="buggy_27.sol"];
	416	[contract_name=DanPanCoin,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
basePercent = 100

IRs:
basePercent(uint256) := 100(uint256)",
		node_expression="basePercent = 100",
		node_info_vulnerabilities=None,
		node_irs="basePercent(uint256) := 100(uint256)",
		node_source_code_lines="[153]",
		node_type=OTHER_ENTRYPOINT,
		source_file="buggy_27.sol"];
	415 -> 416	[key=0,
		edge_type=next,
		label=Next];
	417	[contract_name=DanPanCoin,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
dpPercent = 5

IRs:
dpPercent(uint256) := 5(uint256)",
		node_expression="dpPercent = 5",
		node_info_vulnerabilities=None,
		node_irs="dpPercent(uint256) := 5(uint256)",
		node_source_code_lines="[157]",
		node_type=OTHER_ENTRYPOINT,
		source_file="buggy_27.sol"];
	416 -> 417	[key=0,
		edge_type=next,
		label=Next];
	418	[contract_name=DanPanCoin,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
DanPanAddress = msg.sender

IRs:
DanPanAddress(address) := msg.sender(address)",
		node_expression="DanPanAddress = msg.sender",
		node_info_vulnerabilities=None,
		node_irs="DanPanAddress(address) := msg.sender(address)",
		node_source_code_lines="[162]",
		node_type=OTHER_ENTRYPOINT,
		source_file="buggy_27.sol"];
	417 -> 418	[key=0,
		edge_type=next,
		label=Next];
	419	[contract_name=DanPanCoin,
		function_fullname="slitherConstructorVariables()",
		label="buggy_27.sol_DanPanCoin_slitherConstructorVariables()",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, \
154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, \
180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, \
206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, \
232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, \
258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, \
284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, \
310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, \
336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, \
362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, \
388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, \
414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, \
440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, \
466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	419 -> 415	[key=0,
		edge_type=next,
		label=Next];
	420	[contract_name=DanPanCoin,
		function_fullname="slitherConstructorConstantVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
tokenName = Dan Pan Coin

IRs:
tokenName(string) := Dan Pan Coin(string)",
		node_expression="tokenName = Dan Pan Coin",
		node_info_vulnerabilities=None,
		node_irs="tokenName(string) := Dan Pan Coin(string)",
		node_source_code_lines="[134]",
		node_type=OTHER_ENTRYPOINT,
		source_file="buggy_27.sol"];
	421	[contract_name=DanPanCoin,
		function_fullname="slitherConstructorConstantVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
tokenSymbol = DPC

IRs:
tokenSymbol(string) := DPC(string)",
		node_expression="tokenSymbol = DPC",
		node_info_vulnerabilities=None,
		node_irs="tokenSymbol(string) := DPC(string)",
		node_source_code_lines="[139]",
		node_type=OTHER_ENTRYPOINT,
		source_file="buggy_27.sol"];
	420 -> 421	[key=0,
		edge_type=next,
		label=Next];
	422	[contract_name=DanPanCoin,
		function_fullname="slitherConstructorConstantVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
tokenDecimals = 2

IRs:
tokenDecimals(uint8) := 2(uint256)",
		node_expression="tokenDecimals = 2",
		node_info_vulnerabilities=None,
		node_irs="tokenDecimals(uint8) := 2(uint256)",
		node_source_code_lines="[144]",
		node_type=OTHER_ENTRYPOINT,
		source_file="buggy_27.sol"];
	421 -> 422	[key=0,
		edge_type=next,
		label=Next];
	423	[contract_name=DanPanCoin,
		function_fullname="slitherConstructorConstantVariables()",
		label="buggy_27.sol_DanPanCoin_slitherConstructorConstantVariables()",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [54, 55, 56, 63, 64, 65, 66, 80, 81, 82, 83, 99, 100, 101, 102, 107, 108, 109, 110, 115, 116, 117, 122, 123, 124, 125, \
135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, \
168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 192, 198, 199, 200, 201, 206, 207, 208, \
209, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 235, 241, 242, 243, 244, 302, 303, 304, 305, 312, 313, 314, 315, 323, \
324, 325, 326, 383, 384, 385, 393, 394, 395, 403, 404, 405, 406, 413, 414, 415, 420, 421, 422, 423, 432, 433, 434, 435, 442, 443, \
444, 445, 452, 453, 454, 455, 461, 462, 463, 469, 470, 471, 472, 478, 479, 480, 486, 487, 488, 489], 'category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, \
154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, \
180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, \
206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, \
232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, \
258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, \
284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, \
310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, \
336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, \
362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, \
388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, \
414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, \
440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, \
466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	423 -> 420	[key=0,
		edge_type=next,
		label=Next];
	424	[contract_name=DanPanCoin,
		function_fullname="onlyOwner()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[69, 70, 71, 72]",
		node_type=ENTRY_POINT,
		source_file="buggy_27.sol"];
	425	[contract_name=DanPanCoin,
		function_fullname="onlyOwner()",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_279(bool) = msg.sender == owner
TMP_280(None) = \
SOLIDITY_CALL require(bool)(TMP_279)",
		node_expression="require(bool)(msg.sender == owner)",
		node_info_vulnerabilities=None,
		node_irs="TMP_279(bool) = msg.sender == owner
TMP_280(None) = SOLIDITY_CALL require(bool)(TMP_279)",
		node_source_code_lines="[70]",
		node_type=EXPRESSION,
		source_file="buggy_27.sol"];
	424 -> 425	[key=0,
		edge_type=next,
		label=Next];
	426	[contract_name=DanPanCoin,
		function_fullname="onlyOwner()",
		label="Node Type: _
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[71]",
		node_type=_,
		source_file="buggy_27.sol"];
	425 -> 426	[key=0,
		edge_type=next,
		label=Next];
	427	[contract_name=DanPanCoin,
		function_fullname="onlyOwner()",
		label="buggy_27.sol_DanPanCoin_onlyOwner()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[69, 70, 71, 72]",
		node_type=FUNCTION_NAME,
		source_file="buggy_27.sol"];
	427 -> 424	[key=0,
		edge_type=next,
		label=Next];
}
