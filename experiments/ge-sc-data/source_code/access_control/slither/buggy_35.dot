digraph "" {
	node [label="\N"];
	0	[contract_name=SafeMath,
		function_fullname="add(uint256,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[47, 48, 49, 50, 51, 52]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	1	[contract_name=SafeMath,
		function_fullname="add(uint256,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
c = a + b

IRs:
TMP_0(uint256) = a + b
c(uint256) := TMP_0(uint256)",
		node_expression="c = a + b",
		node_info_vulnerabilities=None,
		node_irs="TMP_0(uint256) = a + b
c(uint256) := TMP_0(uint256)",
		node_source_code_lines="[48]",
		node_type="NEW VARIABLE",
		source_file="buggy_35.sol"];
	0 -> 1	[key=0,
		edge_type=next,
		label=Next];
	2	[contract_name=SafeMath,
		function_fullname="add(uint256,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(c >= a,SafeMath: addition overflow)

IRs:
TMP_1(bool) = c >= a
TMP_2(None) = \
SOLIDITY_CALL require(bool,string)(TMP_1,SafeMath: addition overflow)",
		node_expression="require(bool,string)(c >= a,SafeMath: addition overflow)",
		node_info_vulnerabilities=None,
		node_irs="TMP_1(bool) = c >= a
TMP_2(None) = SOLIDITY_CALL require(bool,string)(TMP_1,SafeMath: addition overflow)",
		node_source_code_lines="[49]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	1 -> 2	[key=0,
		edge_type=next,
		label=Next];
	3	[contract_name=SafeMath,
		function_fullname="add(uint256,uint256)",
		label="Node Type: RETURN

EXPRESSION:
c

IRs:
RETURN c",
		node_expression=c,
		node_info_vulnerabilities=None,
		node_irs="RETURN c",
		node_source_code_lines="[51]",
		node_type=RETURN,
		source_file="buggy_35.sol"];
	2 -> 3	[key=0,
		edge_type=next,
		label=Next];
	4	[contract_name=SafeMath,
		function_fullname="add(uint256,uint256)",
		label="buggy_35.sol_SafeMath_add(uint256,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[47, 48, 49, 50, 51, 52]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	4 -> 0	[key=0,
		edge_type=next,
		label=Next];
	5	[contract_name=SafeMath,
		function_fullname="sub(uint256,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[63, 64, 65, 66, 67, 68]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	6	[contract_name=SafeMath,
		function_fullname="sub(uint256,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(b <= a,SafeMath: subtraction overflow)

IRs:
TMP_3(bool) = b <= a
TMP_4(\
None) = SOLIDITY_CALL require(bool,string)(TMP_3,SafeMath: subtraction overflow)",
		node_expression="require(bool,string)(b <= a,SafeMath: subtraction overflow)",
		node_info_vulnerabilities=None,
		node_irs="TMP_3(bool) = b <= a
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,SafeMath: subtraction overflow)",
		node_source_code_lines="[64]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	5 -> 6	[key=0,
		edge_type=next,
		label=Next];
	7	[contract_name=SafeMath,
		function_fullname="sub(uint256,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
c = a - b

IRs:
TMP_5(uint256) = a - b
c(uint256) := TMP_5(uint256)",
		node_expression="c = a - b",
		node_info_vulnerabilities=None,
		node_irs="TMP_5(uint256) = a - b
c(uint256) := TMP_5(uint256)",
		node_source_code_lines="[65]",
		node_type="NEW VARIABLE",
		source_file="buggy_35.sol"];
	6 -> 7	[key=0,
		edge_type=next,
		label=Next];
	8	[contract_name=SafeMath,
		function_fullname="sub(uint256,uint256)",
		label="Node Type: RETURN

EXPRESSION:
c

IRs:
RETURN c",
		node_expression=c,
		node_info_vulnerabilities=None,
		node_irs="RETURN c",
		node_source_code_lines="[67]",
		node_type=RETURN,
		source_file="buggy_35.sol"];
	7 -> 8	[key=0,
		edge_type=next,
		label=Next];
	9	[contract_name=SafeMath,
		function_fullname="sub(uint256,uint256)",
		label="buggy_35.sol_SafeMath_sub(uint256,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[63, 64, 65, 66, 67, 68]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	9 -> 5	[key=0,
		edge_type=next,
		label=Next];
	10	[contract_name=SafeMath,
		function_fullname="mul(uint256,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	11	[contract_name=SafeMath,
		function_fullname="mul(uint256,uint256)",
		label="Node Type: IF

EXPRESSION:
a == 0

IRs:
TMP_6(bool) = a == 0
CONDITION TMP_6",
		node_expression="a == 0",
		node_info_vulnerabilities=None,
		node_irs="TMP_6(bool) = a == 0
CONDITION TMP_6",
		node_source_code_lines="[83]",
		node_type=IF,
		source_file="buggy_35.sol"];
	10 -> 11	[key=0,
		edge_type=next,
		label=Next];
	12	[contract_name=SafeMath,
		function_fullname="mul(uint256,uint256)",
		label="Node Type: RETURN

EXPRESSION:
0

IRs:
RETURN 0",
		node_expression=0,
		node_info_vulnerabilities=None,
		node_irs="RETURN 0",
		node_source_code_lines="[84]",
		node_type=RETURN,
		source_file="buggy_35.sol"];
	11 -> 12	[key=0,
		edge_type=if_true,
		label=True];
	13	[contract_name=SafeMath,
		function_fullname="mul(uint256,uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[83, 84, 85]",
		node_type=END_IF,
		source_file="buggy_35.sol"];
	11 -> 13	[key=0,
		edge_type=if_false,
		label=False];
	14	[contract_name=SafeMath,
		function_fullname="mul(uint256,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
c = a * b

IRs:
TMP_7(uint256) = a * b
c(uint256) := TMP_7(uint256)",
		node_expression="c = a * b",
		node_info_vulnerabilities=None,
		node_irs="TMP_7(uint256) = a * b
c(uint256) := TMP_7(uint256)",
		node_source_code_lines="[87]",
		node_type="NEW VARIABLE",
		source_file="buggy_35.sol"];
	13 -> 14	[key=0,
		edge_type=next,
		label=Next];
	15	[contract_name=SafeMath,
		function_fullname="mul(uint256,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(c / a == b,SafeMath: multiplication overflow)

IRs:
TMP_8(uint256) = c / \
a
TMP_9(bool) = TMP_8 == b
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,SafeMath: multiplication overflow)",
		node_expression="require(bool,string)(c / a == b,SafeMath: multiplication overflow)",
		node_info_vulnerabilities=None,
		node_irs="TMP_8(uint256) = c / a
TMP_9(bool) = TMP_8 == b
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,SafeMath: multiplication \
overflow)",
		node_source_code_lines="[88]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	14 -> 15	[key=0,
		edge_type=next,
		label=Next];
	16	[contract_name=SafeMath,
		function_fullname="mul(uint256,uint256)",
		label="Node Type: RETURN

EXPRESSION:
c

IRs:
RETURN c",
		node_expression=c,
		node_info_vulnerabilities=None,
		node_irs="RETURN c",
		node_source_code_lines="[90]",
		node_type=RETURN,
		source_file="buggy_35.sol"];
	15 -> 16	[key=0,
		edge_type=next,
		label=Next];
	17	[contract_name=SafeMath,
		function_fullname="mul(uint256,uint256)",
		label="buggy_35.sol_SafeMath_mul(uint256,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	17 -> 10	[key=0,
		edge_type=next,
		label=Next];
	18	[contract_name=SafeMath,
		function_fullname="div(uint256,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[104, 105, 106, 107, 108, 109, 110, 111]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	19	[contract_name=SafeMath,
		function_fullname="div(uint256,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(b > 0,SafeMath: division by zero)

IRs:
TMP_11(bool) = b > 0
TMP_12(None) = \
SOLIDITY_CALL require(bool,string)(TMP_11,SafeMath: division by zero)",
		node_expression="require(bool,string)(b > 0,SafeMath: division by zero)",
		node_info_vulnerabilities=None,
		node_irs="TMP_11(bool) = b > 0
TMP_12(None) = SOLIDITY_CALL require(bool,string)(TMP_11,SafeMath: division by zero)",
		node_source_code_lines="[106]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	18 -> 19	[key=0,
		edge_type=next,
		label=Next];
	20	[contract_name=SafeMath,
		function_fullname="div(uint256,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
c = a / b

IRs:
TMP_13(uint256) = a / b
c(uint256) := TMP_13(uint256)",
		node_expression="c = a / b",
		node_info_vulnerabilities=None,
		node_irs="TMP_13(uint256) = a / b
c(uint256) := TMP_13(uint256)",
		node_source_code_lines="[107]",
		node_type="NEW VARIABLE",
		source_file="buggy_35.sol"];
	19 -> 20	[key=0,
		edge_type=next,
		label=Next];
	21	[contract_name=SafeMath,
		function_fullname="div(uint256,uint256)",
		label="Node Type: RETURN

EXPRESSION:
c

IRs:
RETURN c",
		node_expression=c,
		node_info_vulnerabilities=None,
		node_irs="RETURN c",
		node_source_code_lines="[110]",
		node_type=RETURN,
		source_file="buggy_35.sol"];
	20 -> 21	[key=0,
		edge_type=next,
		label=Next];
	22	[contract_name=SafeMath,
		function_fullname="div(uint256,uint256)",
		label="buggy_35.sol_SafeMath_div(uint256,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[104, 105, 106, 107, 108, 109, 110, 111]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	22 -> 18	[key=0,
		edge_type=next,
		label=Next];
	23	[contract_name=SafeMath,
		function_fullname="mod(uint256,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[124, 125, 126, 127]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	24	[contract_name=SafeMath,
		function_fullname="mod(uint256,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(b != 0,SafeMath: modulo by zero)

IRs:
TMP_14(bool) = b != 0
TMP_15(None) = \
SOLIDITY_CALL require(bool,string)(TMP_14,SafeMath: modulo by zero)",
		node_expression="require(bool,string)(b != 0,SafeMath: modulo by zero)",
		node_info_vulnerabilities=None,
		node_irs="TMP_14(bool) = b != 0
TMP_15(None) = SOLIDITY_CALL require(bool,string)(TMP_14,SafeMath: modulo by zero)",
		node_source_code_lines="[125]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	23 -> 24	[key=0,
		edge_type=next,
		label=Next];
	25	[contract_name=SafeMath,
		function_fullname="mod(uint256,uint256)",
		label="Node Type: RETURN

EXPRESSION:
a % b

IRs:
TMP_16(uint256) = a % b
RETURN TMP_16",
		node_expression="a % b",
		node_info_vulnerabilities=None,
		node_irs="TMP_16(uint256) = a % b
RETURN TMP_16",
		node_source_code_lines="[126]",
		node_type=RETURN,
		source_file="buggy_35.sol"];
	24 -> 25	[key=0,
		edge_type=next,
		label=Next];
	26	[contract_name=SafeMath,
		function_fullname="mod(uint256,uint256)",
		label="buggy_35.sol_SafeMath_mod(uint256,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[124, 125, 126, 127]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	26 -> 23	[key=0,
		edge_type=next,
		label=Next];
	27	[contract_name=owned,
		function_fullname="transferTo_txorigin15(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[136, 137, 138, 139]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	28	[contract_name=owned,
		function_fullname="transferTo_txorigin15(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin15)

IRs:
TMP_17(bool) = tx.origin == owner_txorigin15
\
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)",
		node_expression="require(bool)(tx.origin == owner_txorigin15)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_17(bool) = tx.origin == owner_txorigin15
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)",
		node_source_code_lines="[137]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	27 -> 28	[key=0,
		edge_type=next,
		label=Next];
	29	[contract_name=owned,
		function_fullname="transferTo_txorigin15(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_0(None) -> to.call
REF_1(None) -> REF_0.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="REF_0(None) -> to.call
REF_1(None) -> REF_0.value",
		node_source_code_lines="[138]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	28 -> 29	[key=0,
		edge_type=next,
		label=Next];
	30	[contract_name=owned,
		function_fullname="transferTo_txorigin15(address,uint256,address)",
		label="buggy_35.sol_owned_transferTo_txorigin15(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[136, 137, 138, 139]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	30 -> 27	[key=0,
		edge_type=next,
		label=Next];
	31	[contract_name=owned,
		function_fullname="bug_txorigin28(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[141, 142, 143]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	32	[contract_name=owned,
		function_fullname="bug_txorigin28(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin28)

IRs:
TMP_20(bool) = tx.origin == owner_txorigin28
\
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)",
		node_expression="require(bool)(tx.origin == owner_txorigin28)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_20(bool) = tx.origin == owner_txorigin28
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)",
		node_source_code_lines="[142]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	31 -> 32	[key=0,
		edge_type=next,
		label=Next];
	33	[contract_name=owned,
		function_fullname="bug_txorigin28(address)",
		label="buggy_35.sol_owned_bug_txorigin28(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[141, 142, 143]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	33 -> 31	[key=0,
		edge_type=next,
		label=Next];
	34	[contract_name=owned,
		function_fullname="bug_txorigin36(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[147, 148, 149]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	35	[contract_name=owned,
		function_fullname="bug_txorigin36(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin36)

IRs:
TMP_22(bool) = tx.origin == owner_txorigin36
\
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)",
		node_expression="require(bool)(tx.origin == owner_txorigin36)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_22(bool) = tx.origin == owner_txorigin36
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)",
		node_source_code_lines="[148]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	34 -> 35	[key=0,
		edge_type=next,
		label=Next];
	36	[contract_name=owned,
		function_fullname="bug_txorigin36(address)",
		label="buggy_35.sol_owned_bug_txorigin36(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[147, 148, 149]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	36 -> 34	[key=0,
		edge_type=next,
		label=Next];
	37	[contract_name=owned,
		function_fullname="constructor()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[152, 153, 154]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	38	[contract_name=owned,
		function_fullname="constructor()",
		label="Node Type: EXPRESSION

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)",
		node_expression="owner = msg.sender",
		node_info_vulnerabilities=None,
		node_irs="owner(address) := msg.sender(address)",
		node_source_code_lines="[153]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	37 -> 38	[key=0,
		edge_type=next,
		label=Next];
	39	[contract_name=owned,
		function_fullname="constructor()",
		label="buggy_35.sol_owned_constructor()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[152, 153, 154]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	39 -> 37	[key=0,
		edge_type=next,
		label=Next];
	40	[contract_name=owned,
		function_fullname="sendto_txorigin1(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[155, 156, 157, 158]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	41	[contract_name=owned,
		function_fullname="sendto_txorigin1(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin1)

IRs:
TMP_24(bool) = tx.origin == owner_txorigin1
\
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)",
		node_expression="require(bool)(tx.origin == owner_txorigin1)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_24(bool) = tx.origin == owner_txorigin1
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)",
		node_source_code_lines="[156]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	40 -> 41	[key=0,
		edge_type=next,
		label=Next];
	42	[contract_name=owned,
		function_fullname="sendto_txorigin1(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[157]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	41 -> 42	[key=0,
		edge_type=next,
		label=Next];
	43	[contract_name=owned,
		function_fullname="sendto_txorigin1(address,uint256,address)",
		label="buggy_35.sol_owned_sendto_txorigin1(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[155, 156, 157, 158]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	43 -> 40	[key=0,
		edge_type=next,
		label=Next];
	44	[contract_name=owned,
		function_fullname="onlyOwnerTransferOwnership(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[166, 167, 168]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	46	[contract_name=owned,
		function_fullname="onlyOwnerTransferOwnership(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()",
		node_expression="onlyOwner()",
		node_info_vulnerabilities=None,
		node_irs="MODIFIER_CALL, owned.onlyOwner()()",
		node_source_code_lines="[166]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	44 -> 46	[key=0,
		edge_type=next,
		label=Next];
	45	[contract_name=owned,
		function_fullname="onlyOwnerTransferOwnership(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)",
		node_expression="newOwner = _newOwner",
		node_info_vulnerabilities=None,
		node_irs="newOwner(address) := _newOwner(address)",
		node_source_code_lines="[167]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	46 -> 45	[key=0,
		edge_type=next,
		label=Next];
	47	[contract_name=owned,
		function_fullname="onlyOwnerTransferOwnership(address)",
		label="buggy_35.sol_owned_onlyOwnerTransferOwnership(address)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[166, 167, 168]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	47 -> 44	[key=0,
		edge_type=next,
		label=Next];
	48	[contract_name=owned,
		function_fullname="withdrawAll_txorigin2(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[169, 170, 171, 172]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	49	[contract_name=owned,
		function_fullname="withdrawAll_txorigin2(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin2)

IRs:
TMP_28(bool) = tx.origin == owner_txorigin2
\
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)",
		node_expression="require(bool)(tx.origin == owner_txorigin2)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_28(bool) = tx.origin == owner_txorigin2
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)",
		node_source_code_lines="[170]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	48 -> 49	[key=0,
		edge_type=next,
		label=Next];
	50	[contract_name=owned,
		function_fullname="withdrawAll_txorigin2(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_30 = CONVERT this to address
REF_4 -> BALANCE \
TMP_30
Transfer dest:_recipient value:REF_4",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_30 = CONVERT this to address
REF_4 -> BALANCE TMP_30
Transfer dest:_recipient value:REF_4",
		node_source_code_lines="[171]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	49 -> 50	[key=0,
		edge_type=next,
		label=Next];
	51	[contract_name=owned,
		function_fullname="withdrawAll_txorigin2(address,address)",
		label="buggy_35.sol_owned_withdrawAll_txorigin2(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[169, 170, 171, 172]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	51 -> 48	[key=0,
		edge_type=next,
		label=Next];
	52	[contract_name=owned,
		function_fullname="acceptOwnership()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[175, 176, 177, 178, 179, 180]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	53	[contract_name=owned,
		function_fullname="acceptOwnership()",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_32(bool) = msg.sender == newOwner
TMP_33(None) = \
SOLIDITY_CALL require(bool)(TMP_32)",
		node_expression="require(bool)(msg.sender == newOwner)",
		node_info_vulnerabilities=None,
		node_irs="TMP_32(bool) = msg.sender == newOwner
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)",
		node_source_code_lines="[176]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	52 -> 53	[key=0,
		edge_type=next,
		label=Next];
	54	[contract_name=owned,
		function_fullname="acceptOwnership()",
		label="Node Type: EXPRESSION

EXPRESSION:
OwnershipTransferred(now,owner,newOwner)

IRs:
Emit OwnershipTransferred(now.owner.newOwner)",
		node_expression="OwnershipTransferred(now,owner,newOwner)",
		node_info_vulnerabilities=None,
		node_irs="Emit OwnershipTransferred(now.owner.newOwner)",
		node_source_code_lines="[177]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	53 -> 54	[key=0,
		edge_type=next,
		label=Next];
	55	[contract_name=owned,
		function_fullname="acceptOwnership()",
		label="Node Type: EXPRESSION

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)",
		node_expression="owner = newOwner",
		node_info_vulnerabilities=None,
		node_irs="owner(address) := newOwner(address)",
		node_source_code_lines="[178]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	54 -> 55	[key=0,
		edge_type=next,
		label=Next];
	56	[contract_name=owned,
		function_fullname="acceptOwnership()",
		label="Node Type: EXPRESSION

EXPRESSION:
newOwner = address(0)

IRs:
TMP_35 = CONVERT 0 to address
newOwner(address) := TMP_35(address)",
		node_expression="newOwner = address(0)",
		node_info_vulnerabilities=None,
		node_irs="TMP_35 = CONVERT 0 to address
newOwner(address) := TMP_35(address)",
		node_source_code_lines="[179]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	55 -> 56	[key=0,
		edge_type=next,
		label=Next];
	57	[contract_name=owned,
		function_fullname="acceptOwnership()",
		label="buggy_35.sol_owned_acceptOwnership()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[175, 176, 177, 178, 179, 180]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	57 -> 52	[key=0,
		edge_type=next,
		label=Next];
	58	[contract_name=owned,
		function_fullname="sendto_txorigin17(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[181, 182, 183, 184]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	59	[contract_name=owned,
		function_fullname="sendto_txorigin17(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin17)

IRs:
TMP_36(bool) = tx.origin == owner_txorigin17
\
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)",
		node_expression="require(bool)(tx.origin == owner_txorigin17)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_36(bool) = tx.origin == owner_txorigin17
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)",
		node_source_code_lines="[182]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	58 -> 59	[key=0,
		edge_type=next,
		label=Next];
	60	[contract_name=owned,
		function_fullname="sendto_txorigin17(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[183]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	59 -> 60	[key=0,
		edge_type=next,
		label=Next];
	61	[contract_name=owned,
		function_fullname="sendto_txorigin17(address,uint256,address)",
		label="buggy_35.sol_owned_sendto_txorigin17(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[181, 182, 183, 184]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	61 -> 58	[key=0,
		edge_type=next,
		label=Next];
	62	[contract_name=owned,
		function_fullname="onlyOwner()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[160, 161, 162, 163]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	63	[contract_name=owned,
		function_fullname="onlyOwner()",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_39(bool) = msg.sender == owner
TMP_40(None) = SOLIDITY_\
CALL require(bool)(TMP_39)",
		node_expression="require(bool)(msg.sender == owner)",
		node_info_vulnerabilities=None,
		node_irs="TMP_39(bool) = msg.sender == owner
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)",
		node_source_code_lines="[161]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	62 -> 63	[key=0,
		edge_type=next,
		label=Next];
	64	[contract_name=owned,
		function_fullname="onlyOwner()",
		label="Node Type: _
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[162]",
		node_type=_,
		source_file="buggy_35.sol"];
	63 -> 64	[key=0,
		edge_type=next,
		label=Next];
	65	[contract_name=owned,
		function_fullname="onlyOwner()",
		label="buggy_35.sol_owned_onlyOwner()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[160, 161, 162, 163]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	65 -> 62	[key=0,
		edge_type=next,
		label=Next];
	66	[contract_name=ERC20Essential,
		function_fullname="transfer(address,uint256)",
		label="buggy_35.sol_ERC20Essential_transfer(address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[190]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	67	[contract_name=ERC20Essential,
		function_fullname="transferFrom(address,address,uint256)",
		label="buggy_35.sol_ERC20Essential_transferFrom(address,address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[191]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	68	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin15(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[136, 137, 138, 139]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	69	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin15(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin15)

IRs:
TMP_41(bool) = tx.origin == owner_txorigin15
\
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)",
		node_expression="require(bool)(tx.origin == owner_txorigin15)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_41(bool) = tx.origin == owner_txorigin15
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)",
		node_source_code_lines="[137]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	68 -> 69	[key=0,
		edge_type=next,
		label=Next];
	70	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin15(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_6(None) -> to.call
REF_7(None) -> REF_6.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="REF_6(None) -> to.call
REF_7(None) -> REF_6.value",
		node_source_code_lines="[138]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	69 -> 70	[key=0,
		edge_type=next,
		label=Next];
	71	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin15(address,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_transferTo_txorigin15(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[136, 137, 138, 139]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	71 -> 68	[key=0,
		edge_type=next,
		label=Next];
	72	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin28(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[141, 142, 143]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	73	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin28(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin28)

IRs:
TMP_44(bool) = tx.origin == owner_txorigin28
\
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)",
		node_expression="require(bool)(tx.origin == owner_txorigin28)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_44(bool) = tx.origin == owner_txorigin28
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)",
		node_source_code_lines="[142]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	72 -> 73	[key=0,
		edge_type=next,
		label=Next];
	74	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin28(address)",
		label="buggy_35.sol_BitpayerDEX_bug_txorigin28(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[141, 142, 143]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	74 -> 72	[key=0,
		edge_type=next,
		label=Next];
	75	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin36(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[147, 148, 149]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	76	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin36(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin36)

IRs:
TMP_46(bool) = tx.origin == owner_txorigin36
\
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)",
		node_expression="require(bool)(tx.origin == owner_txorigin36)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_46(bool) = tx.origin == owner_txorigin36
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)",
		node_source_code_lines="[148]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	75 -> 76	[key=0,
		edge_type=next,
		label=Next];
	77	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin36(address)",
		label="buggy_35.sol_BitpayerDEX_bug_txorigin36(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[147, 148, 149]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	77 -> 75	[key=0,
		edge_type=next,
		label=Next];
	78	[contract_name=BitpayerDEX,
		function_fullname="constructor()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[152, 153, 154]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	79	[contract_name=BitpayerDEX,
		function_fullname="constructor()",
		label="Node Type: EXPRESSION

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)",
		node_expression="owner = msg.sender",
		node_info_vulnerabilities=None,
		node_irs="owner(address) := msg.sender(address)",
		node_source_code_lines="[153]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	78 -> 79	[key=0,
		edge_type=next,
		label=Next];
	80	[contract_name=BitpayerDEX,
		function_fullname="constructor()",
		label="buggy_35.sol_BitpayerDEX_constructor()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[152, 153, 154]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	80 -> 78	[key=0,
		edge_type=next,
		label=Next];
	81	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin1(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[155, 156, 157, 158]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	82	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin1(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin1)

IRs:
TMP_48(bool) = tx.origin == owner_txorigin1
\
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)",
		node_expression="require(bool)(tx.origin == owner_txorigin1)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_48(bool) = tx.origin == owner_txorigin1
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)",
		node_source_code_lines="[156]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	81 -> 82	[key=0,
		edge_type=next,
		label=Next];
	83	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin1(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[157]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	82 -> 83	[key=0,
		edge_type=next,
		label=Next];
	84	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin1(address,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_sendto_txorigin1(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[155, 156, 157, 158]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	84 -> 81	[key=0,
		edge_type=next,
		label=Next];
	85	[contract_name=BitpayerDEX,
		function_fullname="onlyOwnerTransferOwnership(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[166, 167, 168]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	87	[contract_name=BitpayerDEX,
		function_fullname="onlyOwnerTransferOwnership(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()",
		node_expression="onlyOwner()",
		node_info_vulnerabilities=None,
		node_irs="MODIFIER_CALL, owned.onlyOwner()()",
		node_source_code_lines="[166]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	85 -> 87	[key=0,
		edge_type=next,
		label=Next];
	86	[contract_name=BitpayerDEX,
		function_fullname="onlyOwnerTransferOwnership(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)",
		node_expression="newOwner = _newOwner",
		node_info_vulnerabilities=None,
		node_irs="newOwner(address) := _newOwner(address)",
		node_source_code_lines="[167]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	87 -> 86	[key=0,
		edge_type=next,
		label=Next];
	88	[contract_name=BitpayerDEX,
		function_fullname="onlyOwnerTransferOwnership(address)",
		label="buggy_35.sol_BitpayerDEX_onlyOwnerTransferOwnership(address)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[166, 167, 168]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	88 -> 85	[key=0,
		edge_type=next,
		label=Next];
	89	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin2(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[169, 170, 171, 172]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	90	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin2(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin2)

IRs:
TMP_52(bool) = tx.origin == owner_txorigin2
\
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)",
		node_expression="require(bool)(tx.origin == owner_txorigin2)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_52(bool) = tx.origin == owner_txorigin2
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)",
		node_source_code_lines="[170]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	89 -> 90	[key=0,
		edge_type=next,
		label=Next];
	91	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin2(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_54 = CONVERT this to address
REF_10 -> BALANCE \
TMP_54
Transfer dest:_recipient value:REF_10",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_54 = CONVERT this to address
REF_10 -> BALANCE TMP_54
Transfer dest:_recipient value:REF_10",
		node_source_code_lines="[171]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	90 -> 91	[key=0,
		edge_type=next,
		label=Next];
	92	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin2(address,address)",
		label="buggy_35.sol_BitpayerDEX_withdrawAll_txorigin2(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[169, 170, 171, 172]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	92 -> 89	[key=0,
		edge_type=next,
		label=Next];
	93	[contract_name=BitpayerDEX,
		function_fullname="acceptOwnership()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[175, 176, 177, 178, 179, 180]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	94	[contract_name=BitpayerDEX,
		function_fullname="acceptOwnership()",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_56(bool) = msg.sender == newOwner
TMP_57(None) = \
SOLIDITY_CALL require(bool)(TMP_56)",
		node_expression="require(bool)(msg.sender == newOwner)",
		node_info_vulnerabilities=None,
		node_irs="TMP_56(bool) = msg.sender == newOwner
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)",
		node_source_code_lines="[176]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	93 -> 94	[key=0,
		edge_type=next,
		label=Next];
	95	[contract_name=BitpayerDEX,
		function_fullname="acceptOwnership()",
		label="Node Type: EXPRESSION

EXPRESSION:
OwnershipTransferred(now,owner,newOwner)

IRs:
Emit OwnershipTransferred(now.owner.newOwner)",
		node_expression="OwnershipTransferred(now,owner,newOwner)",
		node_info_vulnerabilities=None,
		node_irs="Emit OwnershipTransferred(now.owner.newOwner)",
		node_source_code_lines="[177]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	94 -> 95	[key=0,
		edge_type=next,
		label=Next];
	96	[contract_name=BitpayerDEX,
		function_fullname="acceptOwnership()",
		label="Node Type: EXPRESSION

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)",
		node_expression="owner = newOwner",
		node_info_vulnerabilities=None,
		node_irs="owner(address) := newOwner(address)",
		node_source_code_lines="[178]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	95 -> 96	[key=0,
		edge_type=next,
		label=Next];
	97	[contract_name=BitpayerDEX,
		function_fullname="acceptOwnership()",
		label="Node Type: EXPRESSION

EXPRESSION:
newOwner = address(0)

IRs:
TMP_59 = CONVERT 0 to address
newOwner(address) := TMP_59(address)",
		node_expression="newOwner = address(0)",
		node_info_vulnerabilities=None,
		node_irs="TMP_59 = CONVERT 0 to address
newOwner(address) := TMP_59(address)",
		node_source_code_lines="[179]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	96 -> 97	[key=0,
		edge_type=next,
		label=Next];
	98	[contract_name=BitpayerDEX,
		function_fullname="acceptOwnership()",
		label="buggy_35.sol_BitpayerDEX_acceptOwnership()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[175, 176, 177, 178, 179, 180]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	98 -> 93	[key=0,
		edge_type=next,
		label=Next];
	99	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin17(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[181, 182, 183, 184]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	100	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin17(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin17)

IRs:
TMP_60(bool) = tx.origin == owner_txorigin17
\
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)",
		node_expression="require(bool)(tx.origin == owner_txorigin17)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_60(bool) = tx.origin == owner_txorigin17
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)",
		node_source_code_lines="[182]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	99 -> 100	[key=0,
		edge_type=next,
		label=Next];
	101	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin17(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[183]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	100 -> 101	[key=0,
		edge_type=next,
		label=Next];
	102	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin17(address,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_sendto_txorigin17(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[181, 182, 183, 184]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	102 -> 99	[key=0,
		edge_type=next,
		label=Next];
	103	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin34(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[198, 199, 200, 201]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	104	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin34(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin34)

IRs:
TMP_63(bool) = tx.origin == owner_txorigin34
\
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)",
		node_expression="require(bool)(tx.origin == owner_txorigin34)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_63(bool) = tx.origin == owner_txorigin34
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)",
		node_source_code_lines="[199]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	103 -> 104	[key=0,
		edge_type=next,
		label=Next];
	105	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin34(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_65 = CONVERT this to address
REF_13 -> BALANCE \
TMP_65
Transfer dest:_recipient value:REF_13",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_65 = CONVERT this to address
REF_13 -> BALANCE TMP_65
Transfer dest:_recipient value:REF_13",
		node_source_code_lines="[200]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	104 -> 105	[key=0,
		edge_type=next,
		label=Next];
	106	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin34(address,address)",
		label="buggy_35.sol_BitpayerDEX_withdrawAll_txorigin34(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[198, 199, 200, 201]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	106 -> 103	[key=0,
		edge_type=next,
		label=Next];
	107	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin21(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[203, 204, 205, 206]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	108	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin21(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin21)

IRs:
TMP_67(bool) = tx.origin == owner_txorigin21
\
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)",
		node_expression="require(bool)(tx.origin == owner_txorigin21)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_67(bool) = tx.origin == owner_txorigin21
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)",
		node_source_code_lines="[204]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	107 -> 108	[key=0,
		edge_type=next,
		label=Next];
	109	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin21(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[205]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	108 -> 109	[key=0,
		edge_type=next,
		label=Next];
	110	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin21(address,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_sendto_txorigin21(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[203, 204, 205, 206]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	110 -> 107	[key=0,
		edge_type=next,
		label=Next];
	111	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin10(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[208, 209, 210, 211]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	112	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin10(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin10)

IRs:
TMP_70(bool) = tx.origin == owner_txorigin10
\
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)",
		node_expression="require(bool)(tx.origin == owner_txorigin10)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_70(bool) = tx.origin == owner_txorigin10
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)",
		node_source_code_lines="[209]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	111 -> 112	[key=0,
		edge_type=next,
		label=Next];
	113	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin10(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_72 = CONVERT this to address
REF_16 -> BALANCE \
TMP_72
Transfer dest:_recipient value:REF_16",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_72 = CONVERT this to address
REF_16 -> BALANCE TMP_72
Transfer dest:_recipient value:REF_16",
		node_source_code_lines="[210]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	112 -> 113	[key=0,
		edge_type=next,
		label=Next];
	114	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin10(address,address)",
		label="buggy_35.sol_BitpayerDEX_withdrawAll_txorigin10(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[208, 209, 210, 211]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	114 -> 111	[key=0,
		edge_type=next,
		label=Next];
	115	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin22(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[214, 215, 216, 217]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	116	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin22(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin22)

IRs:
TMP_74(bool) = tx.origin == owner_txorigin22
\
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)",
		node_expression="require(bool)(tx.origin == owner_txorigin22)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_74(bool) = tx.origin == owner_txorigin22
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)",
		node_source_code_lines="[215]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	115 -> 116	[key=0,
		edge_type=next,
		label=Next];
	117	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin22(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_76 = CONVERT this to address
REF_18 -> BALANCE \
TMP_76
Transfer dest:_recipient value:REF_18",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_76 = CONVERT this to address
REF_18 -> BALANCE TMP_76
Transfer dest:_recipient value:REF_18",
		node_source_code_lines="[216]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	116 -> 117	[key=0,
		edge_type=next,
		label=Next];
	118	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin22(address,address)",
		label="buggy_35.sol_BitpayerDEX_withdrawAll_txorigin22(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[214, 215, 216, 217]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	118 -> 115	[key=0,
		edge_type=next,
		label=Next];
	119	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin12(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[219, 220, 221]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	120	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin12(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin12)

IRs:
TMP_78(bool) = tx.origin == owner_txorigin12
\
TMP_79(None) = SOLIDITY_CALL require(bool)(TMP_78)",
		node_expression="require(bool)(tx.origin == owner_txorigin12)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_78(bool) = tx.origin == owner_txorigin12
TMP_79(None) = SOLIDITY_CALL require(bool)(TMP_78)",
		node_source_code_lines="[220]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	119 -> 120	[key=0,
		edge_type=next,
		label=Next];
	121	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin12(address)",
		label="buggy_35.sol_BitpayerDEX_bug_txorigin12(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[219, 220, 221]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	121 -> 119	[key=0,
		edge_type=next,
		label=Next];
	122	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin11(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[223, 224, 225, 226]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	123	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin11(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin11)

IRs:
TMP_80(bool) = tx.origin == owner_txorigin11
\
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)",
		node_expression="require(bool)(tx.origin == owner_txorigin11)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_80(bool) = tx.origin == owner_txorigin11
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)",
		node_source_code_lines="[224]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	122 -> 123	[key=0,
		edge_type=next,
		label=Next];
	124	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin11(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_19(None) -> to.call
REF_20(None) -> REF_19.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="REF_19(None) -> to.call
REF_20(None) -> REF_19.value",
		node_source_code_lines="[225]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	123 -> 124	[key=0,
		edge_type=next,
		label=Next];
	125	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin11(address,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_transferTo_txorigin11(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[223, 224, 225, 226]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	125 -> 122	[key=0,
		edge_type=next,
		label=Next];
	126	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin35(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[229, 230, 231, 232]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	127	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin35(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin35)

IRs:
TMP_83(bool) = tx.origin == owner_txorigin35
\
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)",
		node_expression="require(bool)(tx.origin == owner_txorigin35)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_83(bool) = tx.origin == owner_txorigin35
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)",
		node_source_code_lines="[230]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	126 -> 127	[key=0,
		edge_type=next,
		label=Next];
	128	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin35(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_21(None) -> to.call
REF_22(None) -> REF_21.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="REF_21(None) -> to.call
REF_22(None) -> REF_21.value",
		node_source_code_lines="[231]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	127 -> 128	[key=0,
		edge_type=next,
		label=Next];
	129	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin35(address,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_transferTo_txorigin35(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[229, 230, 231, 232]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	129 -> 126	[key=0,
		edge_type=next,
		label=Next];
	130	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin40(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[234, 235, 236]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	131	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin40(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin40)

IRs:
TMP_86(bool) = tx.origin == owner_txorigin40
\
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)",
		node_expression="require(bool)(tx.origin == owner_txorigin40)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_86(bool) = tx.origin == owner_txorigin40
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)",
		node_source_code_lines="[235]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	130 -> 131	[key=0,
		edge_type=next,
		label=Next];
	132	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin40(address)",
		label="buggy_35.sol_BitpayerDEX_bug_txorigin40(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[234, 235, 236]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	132 -> 130	[key=0,
		edge_type=next,
		label=Next];
	133	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin33(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[238, 239, 240, 241]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	134	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin33(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin33)

IRs:
TMP_88(bool) = tx.origin == owner_txorigin33
\
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)",
		node_expression="require(bool)(tx.origin == owner_txorigin33)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_88(bool) = tx.origin == owner_txorigin33
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)",
		node_source_code_lines="[239]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	133 -> 134	[key=0,
		edge_type=next,
		label=Next];
	135	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin33(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[240]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	134 -> 135	[key=0,
		edge_type=next,
		label=Next];
	136	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin33(address,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_sendto_txorigin33(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[238, 239, 240, 241]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	136 -> 133	[key=0,
		edge_type=next,
		label=Next];
	137	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin27(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[243, 244, 245, 246]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	138	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin27(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin27)

IRs:
TMP_91(bool) = tx.origin == owner_txorigin27
\
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)",
		node_expression="require(bool)(tx.origin == owner_txorigin27)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_91(bool) = tx.origin == owner_txorigin27
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)",
		node_source_code_lines="[244]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	137 -> 138	[key=0,
		edge_type=next,
		label=Next];
	139	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin27(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_24(None) -> to.call
REF_25(None) -> REF_24.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="REF_24(None) -> to.call
REF_25(None) -> REF_24.value",
		node_source_code_lines="[245]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	138 -> 139	[key=0,
		edge_type=next,
		label=Next];
	140	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin27(address,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_transferTo_txorigin27(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[243, 244, 245, 246]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	140 -> 137	[key=0,
		edge_type=next,
		label=Next];
	141	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin31(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[248, 249, 250, 251]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	142	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin31(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin31)

IRs:
TMP_94(bool) = tx.origin == owner_txorigin31
\
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)",
		node_expression="require(bool)(tx.origin == owner_txorigin31)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_94(bool) = tx.origin == owner_txorigin31
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)",
		node_source_code_lines="[249]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	141 -> 142	[key=0,
		edge_type=next,
		label=Next];
	143	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin31(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_26(None) -> to.call
REF_27(None) -> REF_26.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="REF_26(None) -> to.call
REF_27(None) -> REF_26.value",
		node_source_code_lines="[250]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	142 -> 143	[key=0,
		edge_type=next,
		label=Next];
	144	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin31(address,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_transferTo_txorigin31(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[248, 249, 250, 251]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	144 -> 141	[key=0,
		edge_type=next,
		label=Next];
	145	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin13(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[253, 254, 255, 256]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	146	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin13(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin13)

IRs:
TMP_97(bool) = tx.origin == owner_txorigin13
\
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)",
		node_expression="require(bool)(tx.origin == owner_txorigin13)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_97(bool) = tx.origin == owner_txorigin13
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)",
		node_source_code_lines="[254]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	145 -> 146	[key=0,
		edge_type=next,
		label=Next];
	147	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin13(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[255]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	146 -> 147	[key=0,
		edge_type=next,
		label=Next];
	148	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin13(address,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_sendto_txorigin13(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[253, 254, 255, 256]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	148 -> 145	[key=0,
		edge_type=next,
		label=Next];
	149	[contract_name=BitpayerDEX,
		function_fullname="constructor()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[261, 262, 263]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	150	[contract_name=BitpayerDEX,
		function_fullname="constructor()",
		label="Node Type: EXPRESSION

EXPRESSION:
feeAccount = msg.sender

IRs:
feeAccount(address) := msg.sender(address)",
		node_expression="feeAccount = msg.sender",
		node_info_vulnerabilities=None,
		node_irs="feeAccount(address) := msg.sender(address)",
		node_source_code_lines="[262]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	149 -> 150	[key=0,
		edge_type=next,
		label=Next];
	151	[contract_name=BitpayerDEX,
		function_fullname="constructor()",
		label="buggy_35.sol_BitpayerDEX_constructor()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[261, 262, 263]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	151 -> 149	[key=0,
		edge_type=next,
		label=Next];
	152	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin37(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[264, 265, 266, 267]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	153	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin37(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin37)

IRs:
TMP_100(bool) = tx.origin == owner_txorigin37
\
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)",
		node_expression="require(bool)(tx.origin == owner_txorigin37)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_100(bool) = tx.origin == owner_txorigin37
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)",
		node_source_code_lines="[265]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	152 -> 153	[key=0,
		edge_type=next,
		label=Next];
	154	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin37(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[266]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	153 -> 154	[key=0,
		edge_type=next,
		label=Next];
	155	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin37(address,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_sendto_txorigin37(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[264, 265, 266, 267]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	155 -> 152	[key=0,
		edge_type=next,
		label=Next];
	156	[contract_name=BitpayerDEX,
		function_fullname="changeSafeguardStatus()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[270, 271, 272, 273, 274, 275, 276, 277, 278, 279]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	161	[contract_name=BitpayerDEX,
		function_fullname="changeSafeguardStatus()",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()",
		node_expression="onlyOwner()",
		node_info_vulnerabilities=None,
		node_irs="MODIFIER_CALL, owned.onlyOwner()()",
		node_source_code_lines="[269]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	156 -> 161	[key=0,
		edge_type=next,
		label=Next];
	157	[contract_name=BitpayerDEX,
		function_fullname="changeSafeguardStatus()",
		label="Node Type: IF

EXPRESSION:
safeGuard == false

IRs:
TMP_103(bool) = safeGuard == False
CONDITION TMP_103",
		node_expression="safeGuard == false",
		node_info_vulnerabilities=None,
		node_irs="TMP_103(bool) = safeGuard == False
CONDITION TMP_103",
		node_source_code_lines="[271]",
		node_type=IF,
		source_file="buggy_35.sol"];
	158	[contract_name=BitpayerDEX,
		function_fullname="changeSafeguardStatus()",
		label="Node Type: EXPRESSION

EXPRESSION:
safeGuard = true

IRs:
safeGuard(bool) := True(bool)",
		node_expression="safeGuard = true",
		node_info_vulnerabilities=None,
		node_irs="safeGuard(bool) := True(bool)",
		node_source_code_lines="[273]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	157 -> 158	[key=0,
		edge_type=if_true,
		label=True];
	159	[contract_name=BitpayerDEX,
		function_fullname="changeSafeguardStatus()",
		label="Node Type: EXPRESSION

EXPRESSION:
safeGuard = false

IRs:
safeGuard(bool) := False(bool)",
		node_expression="safeGuard = false",
		node_info_vulnerabilities=None,
		node_irs="safeGuard(bool) := False(bool)",
		node_source_code_lines="[277]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	157 -> 159	[key=0,
		edge_type=if_false,
		label=False];
	160	[contract_name=BitpayerDEX,
		function_fullname="changeSafeguardStatus()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[271, 272, 273, 274, 275, 276, 277, 278]",
		node_type=END_IF,
		source_file="buggy_35.sol"];
	158 -> 160	[key=0,
		edge_type=next,
		label=Next];
	159 -> 160	[key=0,
		edge_type=next,
		label=Next];
	161 -> 157	[key=0,
		edge_type=next,
		label=Next];
	162	[contract_name=BitpayerDEX,
		function_fullname="changeSafeguardStatus()",
		label="buggy_35.sol_BitpayerDEX_changeSafeguardStatus()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	162 -> 156	[key=0,
		edge_type=next,
		label=Next];
	163	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin3(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[280, 281, 282, 283]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	164	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin3(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin3)

IRs:
TMP_105(bool) = tx.origin == owner_txorigin3
\
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)",
		node_expression="require(bool)(tx.origin == owner_txorigin3)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_105(bool) = tx.origin == owner_txorigin3
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)",
		node_source_code_lines="[281]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	163 -> 164	[key=0,
		edge_type=next,
		label=Next];
	165	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin3(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_30(None) -> to.call
REF_31(None) -> REF_30.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="REF_30(None) -> to.call
REF_31(None) -> REF_30.value",
		node_source_code_lines="[282]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	164 -> 165	[key=0,
		edge_type=next,
		label=Next];
	166	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin3(address,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_transferTo_txorigin3(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[280, 281, 282, 283]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	166 -> 163	[key=0,
		edge_type=next,
		label=Next];
	167	[contract_name=BitpayerDEX,
		function_fullname="calculatePercentage(uint256,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[287, 288, 289, 290, 291, 292]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	168	[contract_name=BitpayerDEX,
		function_fullname="calculatePercentage(uint256,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
factor = 10000

IRs:
factor(uint256) := 10000(uint256)",
		node_expression="factor = 10000",
		node_info_vulnerabilities=None,
		node_irs="factor(uint256) := 10000(uint256)",
		node_source_code_lines="[288]",
		node_type="NEW VARIABLE",
		source_file="buggy_35.sol"];
	167 -> 168	[key=0,
		edge_type=next,
		label=Next];
	169	[contract_name=BitpayerDEX,
		function_fullname="calculatePercentage(uint256,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(percentTo <= factor)

IRs:
TMP_108(bool) = percentTo <= factor
TMP_109(None) = \
SOLIDITY_CALL require(bool)(TMP_108)",
		node_expression="require(bool)(percentTo <= factor)",
		node_info_vulnerabilities=None,
		node_irs="TMP_108(bool) = percentTo <= factor
TMP_109(None) = SOLIDITY_CALL require(bool)(TMP_108)",
		node_source_code_lines="[289]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	168 -> 169	[key=0,
		edge_type=next,
		label=Next];
	170	[contract_name=BitpayerDEX,
		function_fullname="calculatePercentage(uint256,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
c = PercentOf.mul(percentTo).div(factor)

IRs:
TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, \
function:SafeMath.mul(uint256,uint256), arguments:['PercentOf', 'percentTo'] 
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:\
SafeMath.div(uint256,uint256), arguments:['TMP_110', 'factor'] 
c(uint256) := TMP_111(uint256)",
		node_expression="c = PercentOf.mul(percentTo).div(factor)",
		node_info_vulnerabilities=None,
		node_irs="TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['PercentOf', 'percentTo'] 
TMP_\
111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_110', 'factor'] 
c(uint256) := \
TMP_111(uint256)",
		node_source_code_lines="[290]",
		node_type="NEW VARIABLE",
		source_file="buggy_35.sol"];
	169 -> 170	[key=0,
		edge_type=next,
		label=Next];
	171	[contract_name=BitpayerDEX,
		function_fullname="calculatePercentage(uint256,uint256)",
		label="Node Type: RETURN

EXPRESSION:
c

IRs:
RETURN c",
		node_expression=c,
		node_info_vulnerabilities=None,
		node_irs="RETURN c",
		node_source_code_lines="[291]",
		node_type=RETURN,
		source_file="buggy_35.sol"];
	170 -> 171	[key=0,
		edge_type=next,
		label=Next];
	172	[contract_name=BitpayerDEX,
		function_fullname="calculatePercentage(uint256,uint256)",
		label="buggy_35.sol_BitpayerDEX_calculatePercentage(uint256,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[286, 287, 288, 289, 290, 291, 292]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	172 -> 167	[key=0,
		edge_type=next,
		label=Next];
	173	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin9(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[293, 294, 295, 296]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	174	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin9(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin9)

IRs:
TMP_112(bool) = tx.origin == owner_txorigin9
\
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)",
		node_expression="require(bool)(tx.origin == owner_txorigin9)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_112(bool) = tx.origin == owner_txorigin9
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)",
		node_source_code_lines="[294]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	173 -> 174	[key=0,
		edge_type=next,
		label=Next];
	175	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin9(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[295]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	174 -> 175	[key=0,
		edge_type=next,
		label=Next];
	176	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin9(address,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_sendto_txorigin9(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[293, 294, 295, 296]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	176 -> 173	[key=0,
		edge_type=next,
		label=Next];
	177	[contract_name=BitpayerDEX,
		function_fullname="changeFeeAccount(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[305, 306, 307]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	179	[contract_name=BitpayerDEX,
		function_fullname="changeFeeAccount(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()",
		node_expression="onlyOwner()",
		node_info_vulnerabilities=None,
		node_irs="MODIFIER_CALL, owned.onlyOwner()()",
		node_source_code_lines="[305]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	177 -> 179	[key=0,
		edge_type=next,
		label=Next];
	178	[contract_name=BitpayerDEX,
		function_fullname="changeFeeAccount(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
feeAccount = feeAccount_

IRs:
feeAccount(address) := feeAccount_(address)",
		node_expression="feeAccount = feeAccount_",
		node_info_vulnerabilities=None,
		node_irs="feeAccount(address) := feeAccount_(address)",
		node_source_code_lines="[306]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	179 -> 178	[key=0,
		edge_type=next,
		label=Next];
	180	[contract_name=BitpayerDEX,
		function_fullname="changeFeeAccount(address)",
		label="buggy_35.sol_BitpayerDEX_changeFeeAccount(address)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[305, 306, 307]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	180 -> 177	[key=0,
		edge_type=next,
		label=Next];
	181	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin25(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[308, 309, 310, 311]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	182	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin25(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin25)

IRs:
TMP_116(bool) = tx.origin == owner_txorigin25
\
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)",
		node_expression="require(bool)(tx.origin == owner_txorigin25)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_116(bool) = tx.origin == owner_txorigin25
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)",
		node_source_code_lines="[309]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	181 -> 182	[key=0,
		edge_type=next,
		label=Next];
	183	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin25(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
receiver.transfer(amount)

IRs:
Transfer dest:receiver value:amount",
		node_expression="receiver.transfer(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="Transfer dest:receiver value:amount",
		node_source_code_lines="[310]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	182 -> 183	[key=0,
		edge_type=next,
		label=Next];
	184	[contract_name=BitpayerDEX,
		function_fullname="sendto_txorigin25(address,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_sendto_txorigin25(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[308, 309, 310, 311]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	184 -> 181	[key=0,
		edge_type=next,
		label=Next];
	185	[contract_name=BitpayerDEX,
		function_fullname="changetradingFee(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[313, 314, 315, 316]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	187	[contract_name=BitpayerDEX,
		function_fullname="changetradingFee(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()",
		node_expression="onlyOwner()",
		node_info_vulnerabilities=None,
		node_irs="MODIFIER_CALL, owned.onlyOwner()()",
		node_source_code_lines="[313]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	185 -> 187	[key=0,
		edge_type=next,
		label=Next];
	186	[contract_name=BitpayerDEX,
		function_fullname="changetradingFee(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
tradingFee = tradingFee_

IRs:
tradingFee(uint256) := tradingFee_(uint256)",
		node_expression="tradingFee = tradingFee_",
		node_info_vulnerabilities=None,
		node_irs="tradingFee(uint256) := tradingFee_(uint256)",
		node_source_code_lines="[315]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	187 -> 186	[key=0,
		edge_type=next,
		label=Next];
	188	[contract_name=BitpayerDEX,
		function_fullname="changetradingFee(uint256)",
		label="buggy_35.sol_BitpayerDEX_changetradingFee(uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[313, 314, 315, 316]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	188 -> 185	[key=0,
		edge_type=next,
		label=Next];
	189	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin19(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[317, 318, 319, 320]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	190	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin19(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin19)

IRs:
TMP_120(bool) = tx.origin == owner_txorigin19
\
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)",
		node_expression="require(bool)(tx.origin == owner_txorigin19)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_120(bool) = tx.origin == owner_txorigin19
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)",
		node_source_code_lines="[318]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	189 -> 190	[key=0,
		edge_type=next,
		label=Next];
	191	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin19(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_36(None) -> to.call
REF_37(None) -> REF_36.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="REF_36(None) -> to.call
REF_37(None) -> REF_36.value",
		node_source_code_lines="[319]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	190 -> 191	[key=0,
		edge_type=next,
		label=Next];
	192	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin19(address,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_transferTo_txorigin19(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[317, 318, 319, 320]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	192 -> 189	[key=0,
		edge_type=next,
		label=Next];
	193	[contract_name=BitpayerDEX,
		function_fullname="availableTradingFeeOwner()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[322, 323, 324, 325]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	194	[contract_name=BitpayerDEX,
		function_fullname="availableTradingFeeOwner()",
		label="Node Type: RETURN

EXPRESSION:
tokens[address(0)][feeAccount]

IRs:
TMP_123 = CONVERT 0 to address
REF_38(mapping(address => uint256)) \
-> tokens[TMP_123]
REF_39(uint256) -> REF_38[feeAccount]
RETURN REF_39",
		node_expression="tokens[address(0)][feeAccount]",
		node_info_vulnerabilities=None,
		node_irs="TMP_123 = CONVERT 0 to address
REF_38(mapping(address => uint256)) -> tokens[TMP_123]
REF_39(uint256) -> REF_38[feeAccount]
RETURN \
REF_39",
		node_source_code_lines="[324]",
		node_type=RETURN,
		source_file="buggy_35.sol"];
	193 -> 194	[key=0,
		edge_type=next,
		label=Next];
	195	[contract_name=BitpayerDEX,
		function_fullname="availableTradingFeeOwner()",
		label="buggy_35.sol_BitpayerDEX_availableTradingFeeOwner()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[322, 323, 324, 325]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	195 -> 193	[key=0,
		edge_type=next,
		label=Next];
	196	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin26(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[326, 327, 328, 329]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	197	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin26(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin26)

IRs:
TMP_124(bool) = tx.origin == owner_txorigin26
\
TMP_125(None) = SOLIDITY_CALL require(bool)(TMP_124)",
		node_expression="require(bool)(tx.origin == owner_txorigin26)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_124(bool) = tx.origin == owner_txorigin26
TMP_125(None) = SOLIDITY_CALL require(bool)(TMP_124)",
		node_source_code_lines="[327]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	196 -> 197	[key=0,
		edge_type=next,
		label=Next];
	198	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin26(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_126 = CONVERT this to address
REF_41 -> \
BALANCE TMP_126
Transfer dest:_recipient value:REF_41",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_126 = CONVERT this to address
REF_41 -> BALANCE TMP_126
Transfer dest:_recipient value:REF_41",
		node_source_code_lines="[328]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	197 -> 198	[key=0,
		edge_type=next,
		label=Next];
	199	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin26(address,address)",
		label="buggy_35.sol_BitpayerDEX_withdrawAll_txorigin26(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[326, 327, 328, 329]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	199 -> 196	[key=0,
		edge_type=next,
		label=Next];
	200	[contract_name=BitpayerDEX,
		function_fullname="withdrawTradingFeeOwner()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	206	[contract_name=BitpayerDEX,
		function_fullname="withdrawTradingFeeOwner()",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()",
		node_expression="onlyOwner()",
		node_info_vulnerabilities=None,
		node_irs="MODIFIER_CALL, owned.onlyOwner()()",
		node_source_code_lines="[331]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	200 -> 206	[key=0,
		edge_type=next,
		label=Next];
	201	[contract_name=BitpayerDEX,
		function_fullname="withdrawTradingFeeOwner()",
		label="Node Type: NEW VARIABLE

EXPRESSION:
amount = availableTradingFeeOwner()

IRs:
TMP_128(uint256) = INTERNAL_CALL, BitpayerDEX.availableTradingFeeOwner()()
\
amount(uint256) := TMP_128(uint256)",
		node_expression="amount = availableTradingFeeOwner()",
		node_info_vulnerabilities=None,
		node_irs="TMP_128(uint256) = INTERNAL_CALL, BitpayerDEX.availableTradingFeeOwner()()
amount(uint256) := TMP_128(uint256)",
		node_source_code_lines="[332]",
		node_type="NEW VARIABLE",
		source_file="buggy_35.sol"];
	202	[contract_name=BitpayerDEX,
		function_fullname="withdrawTradingFeeOwner()",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(amount > 0,Nothing to withdraw)

IRs:
TMP_129(bool) = amount > 0
TMP_130(\
None) = SOLIDITY_CALL require(bool,string)(TMP_129,Nothing to withdraw)",
		node_expression="require(bool,string)(amount > 0,Nothing to withdraw)",
		node_info_vulnerabilities=None,
		node_irs="TMP_129(bool) = amount > 0
TMP_130(None) = SOLIDITY_CALL require(bool,string)(TMP_129,Nothing to withdraw)",
		node_source_code_lines="[333]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	201 -> 202	[key=0,
		edge_type=next,
		label=Next];
	203	[contract_name=BitpayerDEX,
		function_fullname="withdrawTradingFeeOwner()",
		label="Node Type: EXPRESSION

EXPRESSION:
tokens[address(0)][feeAccount] = 0

IRs:
TMP_131 = CONVERT 0 to address
REF_42(mapping(address => \
uint256)) -> tokens[TMP_131]
REF_43(uint256) -> REF_42[feeAccount]
REF_43 (->tokens) := 0(uint256)",
		node_expression="tokens[address(0)][feeAccount] = 0",
		node_info_vulnerabilities=None,
		node_irs="TMP_131 = CONVERT 0 to address
REF_42(mapping(address => uint256)) -> tokens[TMP_131]
REF_43(uint256) -> REF_42[feeAccount]
REF_\
43 (->tokens) := 0(uint256)",
		node_source_code_lines="[335]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	202 -> 203	[key=0,
		edge_type=next,
		label=Next];
	204	[contract_name=BitpayerDEX,
		function_fullname="withdrawTradingFeeOwner()",
		label="Node Type: EXPRESSION

EXPRESSION:
msg.sender.transfer(amount)

IRs:
Transfer dest:msg.sender value:amount",
		node_expression="msg.sender.transfer(amount)",
		node_info_vulnerabilities=None,
		node_irs="Transfer dest:msg.sender value:amount",
		node_source_code_lines="[337]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	203 -> 204	[key=0,
		edge_type=next,
		label=Next];
	205	[contract_name=BitpayerDEX,
		function_fullname="withdrawTradingFeeOwner()",
		label="Node Type: EXPRESSION

EXPRESSION:
OwnerWithdrawTradingFee(owner,amount)

IRs:
Emit OwnerWithdrawTradingFee(owner.amount)",
		node_expression="OwnerWithdrawTradingFee(owner,amount)",
		node_info_vulnerabilities=None,
		node_irs="Emit OwnerWithdrawTradingFee(owner.amount)",
		node_source_code_lines="[339]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	204 -> 205	[key=0,
		edge_type=next,
		label=Next];
	206 -> 201	[key=0,
		edge_type=next,
		label=Next];
	207	[contract_name=BitpayerDEX,
		function_fullname="withdrawTradingFeeOwner()",
		label="buggy_35.sol_BitpayerDEX_withdrawTradingFeeOwner()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	207 -> 200	[key=0,
		edge_type=next,
		label=Next];
	208	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin20(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[342, 343, 344]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	209	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin20(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin20)

IRs:
TMP_135(bool) = tx.origin == owner_txorigin20
\
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)",
		node_expression="require(bool)(tx.origin == owner_txorigin20)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_135(bool) = tx.origin == owner_txorigin20
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)",
		node_source_code_lines="[343]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	208 -> 209	[key=0,
		edge_type=next,
		label=Next];
	210	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin20(address)",
		label="buggy_35.sol_BitpayerDEX_bug_txorigin20(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[342, 343, 344]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	210 -> 208	[key=0,
		edge_type=next,
		label=Next];
	211	[contract_name=BitpayerDEX,
		function_fullname="deposit()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[346, 347, 348, 349]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	212	[contract_name=BitpayerDEX,
		function_fullname="deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value)

IRs:
TMP_137 = \
CONVERT 0 to address
REF_45(mapping(address => uint256)) -> tokens[TMP_137]
REF_46(uint256) -> REF_45[msg.sender]
TMP_138 = CONVERT \
0 to address
REF_47(mapping(address => uint256)) -> tokens[TMP_138]
REF_48(uint256) -> REF_47[msg.sender]
TMP_139(uint256) = LIBRARY_\
CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_48', 'msg.value'] 
REF_46 (->tokens) := TMP_139(uint256)",
		node_expression="tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value)",
		node_info_vulnerabilities=None,
		node_irs="TMP_137 = CONVERT 0 to address
REF_45(mapping(address => uint256)) -> tokens[TMP_137]
REF_46(uint256) -> REF_45[msg.sender]
TMP_\
138 = CONVERT 0 to address
REF_47(mapping(address => uint256)) -> tokens[TMP_138]
REF_48(uint256) -> REF_47[msg.sender]
TMP_139(\
uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_48', 'msg.value'] 
REF_46 (->tokens) := \
TMP_139(uint256)",
		node_source_code_lines="[347]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	211 -> 212	[key=0,
		edge_type=next,
		label=Next];
	213	[contract_name=BitpayerDEX,
		function_fullname="deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
Deposit(now,address(0),msg.sender,msg.value,tokens[address(0)][msg.sender])

IRs:
TMP_140 = CONVERT \
0 to address
TMP_141 = CONVERT 0 to address
REF_50(mapping(address => uint256)) -> tokens[TMP_141]
REF_51(uint256) -> REF_50[msg.sender]
\
Emit Deposit(now.TMP_140.msg.sender.msg.value.REF_51)",
		node_expression="Deposit(now,address(0),msg.sender,msg.value,tokens[address(0)][msg.sender])",
		node_info_vulnerabilities=None,
		node_irs="TMP_140 = CONVERT 0 to address
TMP_141 = CONVERT 0 to address
REF_50(mapping(address => uint256)) -> tokens[TMP_141]
REF_51(uint256) \
-> REF_50[msg.sender]
Emit Deposit(now.TMP_140.msg.sender.msg.value.REF_51)",
		node_source_code_lines="[348]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	212 -> 213	[key=0,
		edge_type=next,
		label=Next];
	214	[contract_name=BitpayerDEX,
		function_fullname="deposit()",
		label="buggy_35.sol_BitpayerDEX_deposit()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[346, 347, 348, 349]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	214 -> 211	[key=0,
		edge_type=next,
		label=Next];
	215	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin32(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[350, 351, 352]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	216	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin32(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin32)

IRs:
TMP_143(bool) = tx.origin == owner_txorigin32
\
TMP_144(None) = SOLIDITY_CALL require(bool)(TMP_143)",
		node_expression="require(bool)(tx.origin == owner_txorigin32)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_143(bool) = tx.origin == owner_txorigin32
TMP_144(None) = SOLIDITY_CALL require(bool)(TMP_143)",
		node_source_code_lines="[351]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	215 -> 216	[key=0,
		edge_type=next,
		label=Next];
	217	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin32(address)",
		label="buggy_35.sol_BitpayerDEX_bug_txorigin32(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[350, 351, 352]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	217 -> 215	[key=0,
		edge_type=next,
		label=Next];
	218	[contract_name=BitpayerDEX,
		function_fullname="withdraw(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[354, 355, 356, 357, 358, 359, 360]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	219	[contract_name=BitpayerDEX,
		function_fullname="withdraw(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(! safeGuard,System Paused by Admin)

IRs:
TMP_145 = ! safeGuard 
TMP_146(\
None) = SOLIDITY_CALL require(bool,string)(TMP_145,System Paused by Admin)",
		node_expression="require(bool,string)(! safeGuard,System Paused by Admin)",
		node_info_vulnerabilities=None,
		node_irs="TMP_145 = ! safeGuard 
TMP_146(None) = SOLIDITY_CALL require(bool,string)(TMP_145,System Paused by Admin)",
		node_source_code_lines="[355]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	218 -> 219	[key=0,
		edge_type=next,
		label=Next];
	220	[contract_name=BitpayerDEX,
		function_fullname="withdraw(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tokens[address(0)][msg.sender] >= amount)

IRs:
TMP_147 = CONVERT 0 to address
\
REF_52(mapping(address => uint256)) -> tokens[TMP_147]
REF_53(uint256) -> REF_52[msg.sender]
TMP_148(bool) = REF_53 >= amount
TMP_\
149(None) = SOLIDITY_CALL require(bool)(TMP_148)",
		node_expression="require(bool)(tokens[address(0)][msg.sender] >= amount)",
		node_info_vulnerabilities=None,
		node_irs="TMP_147 = CONVERT 0 to address
REF_52(mapping(address => uint256)) -> tokens[TMP_147]
REF_53(uint256) -> REF_52[msg.sender]
TMP_\
148(bool) = REF_53 >= amount
TMP_149(None) = SOLIDITY_CALL require(bool)(TMP_148)",
		node_source_code_lines="[356]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	219 -> 220	[key=0,
		edge_type=next,
		label=Next];
	221	[contract_name=BitpayerDEX,
		function_fullname="withdraw(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount)

IRs:
TMP_150 = CONVERT \
0 to address
REF_54(mapping(address => uint256)) -> tokens[TMP_150]
REF_55(uint256) -> REF_54[msg.sender]
TMP_151 = CONVERT 0 to \
address
REF_56(mapping(address => uint256)) -> tokens[TMP_151]
REF_57(uint256) -> REF_56[msg.sender]
TMP_152(uint256) = LIBRARY_\
CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_57', 'amount'] 
REF_55 (->tokens) := TMP_152(uint256)",
		node_expression="tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount)",
		node_info_vulnerabilities=None,
		node_irs="TMP_150 = CONVERT 0 to address
REF_54(mapping(address => uint256)) -> tokens[TMP_150]
REF_55(uint256) -> REF_54[msg.sender]
TMP_\
151 = CONVERT 0 to address
REF_56(mapping(address => uint256)) -> tokens[TMP_151]
REF_57(uint256) -> REF_56[msg.sender]
TMP_152(\
uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_57', 'amount'] 
REF_55 (->tokens) := \
TMP_152(uint256)",
		node_source_code_lines="[357]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	220 -> 221	[key=0,
		edge_type=next,
		label=Next];
	222	[contract_name=BitpayerDEX,
		function_fullname="withdraw(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
msg.sender.transfer(amount)

IRs:
Transfer dest:msg.sender value:amount",
		node_expression="msg.sender.transfer(amount)",
		node_info_vulnerabilities=None,
		node_irs="Transfer dest:msg.sender value:amount",
		node_source_code_lines="[358]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	221 -> 222	[key=0,
		edge_type=next,
		label=Next];
	223	[contract_name=BitpayerDEX,
		function_fullname="withdraw(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Withdraw(now,address(0),msg.sender,amount,tokens[address(0)][msg.sender])

IRs:
TMP_154 = CONVERT \
0 to address
TMP_155 = CONVERT 0 to address
REF_60(mapping(address => uint256)) -> tokens[TMP_155]
REF_61(uint256) -> REF_60[msg.sender]
\
Emit Withdraw(now.TMP_154.msg.sender.amount.REF_61)",
		node_expression="Withdraw(now,address(0),msg.sender,amount,tokens[address(0)][msg.sender])",
		node_info_vulnerabilities=None,
		node_irs="TMP_154 = CONVERT 0 to address
TMP_155 = CONVERT 0 to address
REF_60(mapping(address => uint256)) -> tokens[TMP_155]
REF_61(uint256) \
-> REF_60[msg.sender]
Emit Withdraw(now.TMP_154.msg.sender.amount.REF_61)",
		node_source_code_lines="[359]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	222 -> 223	[key=0,
		edge_type=next,
		label=Next];
	224	[contract_name=BitpayerDEX,
		function_fullname="withdraw(uint256)",
		label="buggy_35.sol_BitpayerDEX_withdraw(uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[354, 355, 356, 357, 358, 359, 360]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	224 -> 218	[key=0,
		edge_type=next,
		label=Next];
	225	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin38(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[361, 362, 363, 364]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	226	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin38(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin38)

IRs:
TMP_157(bool) = tx.origin == owner_txorigin38
\
TMP_158(None) = SOLIDITY_CALL require(bool)(TMP_157)",
		node_expression="require(bool)(tx.origin == owner_txorigin38)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_157(bool) = tx.origin == owner_txorigin38
TMP_158(None) = SOLIDITY_CALL require(bool)(TMP_157)",
		node_source_code_lines="[362]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	225 -> 226	[key=0,
		edge_type=next,
		label=Next];
	227	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin38(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_159 = CONVERT this to address
REF_63 -> \
BALANCE TMP_159
Transfer dest:_recipient value:REF_63",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_159 = CONVERT this to address
REF_63 -> BALANCE TMP_159
Transfer dest:_recipient value:REF_63",
		node_source_code_lines="[363]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	226 -> 227	[key=0,
		edge_type=next,
		label=Next];
	228	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin38(address,address)",
		label="buggy_35.sol_BitpayerDEX_withdrawAll_txorigin38(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[361, 362, 363, 364]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	228 -> 225	[key=0,
		edge_type=next,
		label=Next];
	229	[contract_name=BitpayerDEX,
		function_fullname="depositToken(address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[366, 367, 368, 369, 370, 371, 372]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	230	[contract_name=BitpayerDEX,
		function_fullname="depositToken(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(token != address(0))

IRs:
TMP_161 = CONVERT 0 to address
TMP_162(bool) = token != \
TMP_161
TMP_163(None) = SOLIDITY_CALL require(bool)(TMP_162)",
		node_expression="require(bool)(token != address(0))",
		node_info_vulnerabilities=None,
		node_irs="TMP_161 = CONVERT 0 to address
TMP_162(bool) = token != TMP_161
TMP_163(None) = SOLIDITY_CALL require(bool)(TMP_162)",
		node_source_code_lines="[368]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	229 -> 230	[key=0,
		edge_type=next,
		label=Next];
	231	[contract_name=BitpayerDEX,
		function_fullname="depositToken(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(ERC20Essential(token).transferFrom(msg.sender,address(this),amount))

IRs:
TMP_\
164 = CONVERT token to ERC20Essential
TMP_165 = CONVERT this to address
TMP_166(bool) = HIGH_LEVEL_CALL, dest:TMP_164(ERC20Essential), \
function:transferFrom, arguments:['msg.sender', 'TMP_165', 'amount']  
TMP_167(None) = SOLIDITY_CALL require(bool)(TMP_166)",
		node_expression="require(bool)(ERC20Essential(token).transferFrom(msg.sender,address(this),amount))",
		node_info_vulnerabilities=None,
		node_irs="TMP_164 = CONVERT token to ERC20Essential
TMP_165 = CONVERT this to address
TMP_166(bool) = HIGH_LEVEL_CALL, dest:TMP_164(ERC20Essential), \
function:transferFrom, arguments:['msg.sender', 'TMP_165', 'amount']  
TMP_167(None) = SOLIDITY_CALL require(bool)(TMP_166)",
		node_source_code_lines="[369]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	230 -> 231	[key=0,
		edge_type=next,
		label=Next];
	232	[contract_name=BitpayerDEX,
		function_fullname="depositToken(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
tokens[token][msg.sender] = tokens[token][msg.sender].add(amount)

IRs:
REF_65(mapping(address => \
uint256)) -> tokens[token]
REF_66(uint256) -> REF_65[msg.sender]
REF_67(mapping(address => uint256)) -> tokens[token]
REF_68(uint256) \
-> REF_67[msg.sender]
TMP_168(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_68', '\
amount'] 
REF_66 (->tokens) := TMP_168(uint256)",
		node_expression="tokens[token][msg.sender] = tokens[token][msg.sender].add(amount)",
		node_info_vulnerabilities=None,
		node_irs="REF_65(mapping(address => uint256)) -> tokens[token]
REF_66(uint256) -> REF_65[msg.sender]
REF_67(mapping(address => uint256)) -> \
tokens[token]
REF_68(uint256) -> REF_67[msg.sender]
TMP_168(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,\
uint256), arguments:['REF_68', 'amount'] 
REF_66 (->tokens) := TMP_168(uint256)",
		node_source_code_lines="[370]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	231 -> 232	[key=0,
		edge_type=next,
		label=Next];
	233	[contract_name=BitpayerDEX,
		function_fullname="depositToken(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Deposit(now,token,msg.sender,amount,tokens[token][msg.sender])

IRs:
REF_70(mapping(address => \
uint256)) -> tokens[token]
REF_71(uint256) -> REF_70[msg.sender]
Emit Deposit(now.token.msg.sender.amount.REF_71)",
		node_expression="Deposit(now,token,msg.sender,amount,tokens[token][msg.sender])",
		node_info_vulnerabilities=None,
		node_irs="REF_70(mapping(address => uint256)) -> tokens[token]
REF_71(uint256) -> REF_70[msg.sender]
Emit Deposit(now.token.msg.sender.amount.REF_\
71)",
		node_source_code_lines="[371]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	232 -> 233	[key=0,
		edge_type=next,
		label=Next];
	234	[contract_name=BitpayerDEX,
		function_fullname="depositToken(address,uint256)",
		label="buggy_35.sol_BitpayerDEX_depositToken(address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[366, 367, 368, 369, 370, 371, 372]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	234 -> 229	[key=0,
		edge_type=next,
		label=Next];
	235	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin4(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[373, 374, 375]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	236	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin4(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin4)

IRs:
TMP_170(bool) = tx.origin == owner_txorigin4
\
TMP_171(None) = SOLIDITY_CALL require(bool)(TMP_170)",
		node_expression="require(bool)(tx.origin == owner_txorigin4)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_170(bool) = tx.origin == owner_txorigin4
TMP_171(None) = SOLIDITY_CALL require(bool)(TMP_170)",
		node_source_code_lines="[374]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	235 -> 236	[key=0,
		edge_type=next,
		label=Next];
	237	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin4(address)",
		label="buggy_35.sol_BitpayerDEX_bug_txorigin4(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[373, 374, 375]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	237 -> 235	[key=0,
		edge_type=next,
		label=Next];
	238	[contract_name=BitpayerDEX,
		function_fullname="withdrawToken(address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[377, 378, 379, 380, 381, 382, 383, 384]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	239	[contract_name=BitpayerDEX,
		function_fullname="withdrawToken(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(! safeGuard,System Paused by Admin)

IRs:
TMP_172 = ! safeGuard 
TMP_173(\
None) = SOLIDITY_CALL require(bool,string)(TMP_172,System Paused by Admin)",
		node_expression="require(bool,string)(! safeGuard,System Paused by Admin)",
		node_info_vulnerabilities=None,
		node_irs="TMP_172 = ! safeGuard 
TMP_173(None) = SOLIDITY_CALL require(bool,string)(TMP_172,System Paused by Admin)",
		node_source_code_lines="[378]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	238 -> 239	[key=0,
		edge_type=next,
		label=Next];
	240	[contract_name=BitpayerDEX,
		function_fullname="withdrawToken(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(token != address(0))

IRs:
TMP_174 = CONVERT 0 to address
TMP_175(bool) = token != \
TMP_174
TMP_176(None) = SOLIDITY_CALL require(bool)(TMP_175)",
		node_expression="require(bool)(token != address(0))",
		node_info_vulnerabilities=None,
		node_irs="TMP_174 = CONVERT 0 to address
TMP_175(bool) = token != TMP_174
TMP_176(None) = SOLIDITY_CALL require(bool)(TMP_175)",
		node_source_code_lines="[379]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	239 -> 240	[key=0,
		edge_type=next,
		label=Next];
	241	[contract_name=BitpayerDEX,
		function_fullname="withdrawToken(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tokens[token][msg.sender] >= amount)

IRs:
REF_72(mapping(address => uint256)) \
-> tokens[token]
REF_73(uint256) -> REF_72[msg.sender]
TMP_177(bool) = REF_73 >= amount
TMP_178(None) = SOLIDITY_CALL require(bool)(\
TMP_177)",
		node_expression="require(bool)(tokens[token][msg.sender] >= amount)",
		node_info_vulnerabilities=None,
		node_irs="REF_72(mapping(address => uint256)) -> tokens[token]
REF_73(uint256) -> REF_72[msg.sender]
TMP_177(bool) = REF_73 >= amount
TMP_\
178(None) = SOLIDITY_CALL require(bool)(TMP_177)",
		node_source_code_lines="[380]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	240 -> 241	[key=0,
		edge_type=next,
		label=Next];
	242	[contract_name=BitpayerDEX,
		function_fullname="withdrawToken(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount)

IRs:
REF_74(mapping(address => \
uint256)) -> tokens[token]
REF_75(uint256) -> REF_74[msg.sender]
REF_76(mapping(address => uint256)) -> tokens[token]
REF_77(uint256) \
-> REF_76[msg.sender]
TMP_179(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_77', '\
amount'] 
REF_75 (->tokens) := TMP_179(uint256)",
		node_expression="tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount)",
		node_info_vulnerabilities=None,
		node_irs="REF_74(mapping(address => uint256)) -> tokens[token]
REF_75(uint256) -> REF_74[msg.sender]
REF_76(mapping(address => uint256)) -> \
tokens[token]
REF_77(uint256) -> REF_76[msg.sender]
TMP_179(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,\
uint256), arguments:['REF_77', 'amount'] 
REF_75 (->tokens) := TMP_179(uint256)",
		node_source_code_lines="[381]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	241 -> 242	[key=0,
		edge_type=next,
		label=Next];
	243	[contract_name=BitpayerDEX,
		function_fullname="withdrawToken(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
ERC20Essential(token).transfer(msg.sender,amount)

IRs:
TMP_180 = CONVERT token to ERC20Essential
\
TMP_181(bool) = HIGH_LEVEL_CALL, dest:TMP_180(ERC20Essential), function:transfer, arguments:['msg.sender', 'amount']  ",
		node_expression="ERC20Essential(token).transfer(msg.sender,amount)",
		node_info_vulnerabilities=None,
		node_irs="TMP_180 = CONVERT token to ERC20Essential
TMP_181(bool) = HIGH_LEVEL_CALL, dest:TMP_180(ERC20Essential), function:transfer, arguments:['\
msg.sender', 'amount']  ",
		node_source_code_lines="[382]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	242 -> 243	[key=0,
		edge_type=next,
		label=Next];
	244	[contract_name=BitpayerDEX,
		function_fullname="withdrawToken(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Withdraw(now,token,msg.sender,amount,tokens[token][msg.sender])

IRs:
REF_80(mapping(address => \
uint256)) -> tokens[token]
REF_81(uint256) -> REF_80[msg.sender]
Emit Withdraw(now.token.msg.sender.amount.REF_81)",
		node_expression="Withdraw(now,token,msg.sender,amount,tokens[token][msg.sender])",
		node_info_vulnerabilities=None,
		node_irs="REF_80(mapping(address => uint256)) -> tokens[token]
REF_81(uint256) -> REF_80[msg.sender]
Emit Withdraw(now.token.msg.sender.amount.REF_\
81)",
		node_source_code_lines="[383]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	243 -> 244	[key=0,
		edge_type=next,
		label=Next];
	245	[contract_name=BitpayerDEX,
		function_fullname="withdrawToken(address,uint256)",
		label="buggy_35.sol_BitpayerDEX_withdrawToken(address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[377, 378, 379, 380, 381, 382, 383, 384]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	245 -> 238	[key=0,
		edge_type=next,
		label=Next];
	246	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin7(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[385, 386, 387, 388]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	247	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin7(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin7)

IRs:
TMP_183(bool) = tx.origin == owner_txorigin7
\
TMP_184(None) = SOLIDITY_CALL require(bool)(TMP_183)",
		node_expression="require(bool)(tx.origin == owner_txorigin7)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_183(bool) = tx.origin == owner_txorigin7
TMP_184(None) = SOLIDITY_CALL require(bool)(TMP_183)",
		node_source_code_lines="[386]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	246 -> 247	[key=0,
		edge_type=next,
		label=Next];
	248	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin7(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_82(None) -> to.call
REF_83(None) -> REF_82.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="REF_82(None) -> to.call
REF_83(None) -> REF_82.value",
		node_source_code_lines="[387]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	247 -> 248	[key=0,
		edge_type=next,
		label=Next];
	249	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin7(address,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_transferTo_txorigin7(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[385, 386, 387, 388]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	249 -> 246	[key=0,
		edge_type=next,
		label=Next];
	250	[contract_name=BitpayerDEX,
		function_fullname="balanceOf(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[390, 391, 392]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	251	[contract_name=BitpayerDEX,
		function_fullname="balanceOf(address,address)",
		label="Node Type: RETURN

EXPRESSION:
tokens[token][user]

IRs:
REF_84(mapping(address => uint256)) -> tokens[token]
REF_85(uint256) -> \
REF_84[user]
RETURN REF_85",
		node_expression="tokens[token][user]",
		node_info_vulnerabilities=None,
		node_irs="REF_84(mapping(address => uint256)) -> tokens[token]
REF_85(uint256) -> REF_84[user]
RETURN REF_85",
		node_source_code_lines="[391]",
		node_type=RETURN,
		source_file="buggy_35.sol"];
	250 -> 251	[key=0,
		edge_type=next,
		label=Next];
	252	[contract_name=BitpayerDEX,
		function_fullname="balanceOf(address,address)",
		label="buggy_35.sol_BitpayerDEX_balanceOf(address,address)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[390, 391, 392]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	252 -> 250	[key=0,
		edge_type=next,
		label=Next];
	253	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin23(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[393, 394, 395, 396]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	254	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin23(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin23)

IRs:
TMP_186(bool) = tx.origin == owner_txorigin23
\
TMP_187(None) = SOLIDITY_CALL require(bool)(TMP_186)",
		node_expression="require(bool)(tx.origin == owner_txorigin23)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_186(bool) = tx.origin == owner_txorigin23
TMP_187(None) = SOLIDITY_CALL require(bool)(TMP_186)",
		node_source_code_lines="[394]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	253 -> 254	[key=0,
		edge_type=next,
		label=Next];
	255	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin23(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_86(None) -> to.call
REF_87(None) -> REF_86.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="REF_86(None) -> to.call
REF_87(None) -> REF_86.value",
		node_source_code_lines="[395]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	254 -> 255	[key=0,
		edge_type=next,
		label=Next];
	256	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin23(address,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_transferTo_txorigin23(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[393, 394, 395, 396]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	256 -> 253	[key=0,
		edge_type=next,
		label=Next];
	257	[contract_name=BitpayerDEX,
		function_fullname="order(address,uint256,address,uint256,uint256,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[398, 399, 400, 401, 402]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	258	[contract_name=BitpayerDEX,
		function_fullname="order(address,uint256,address,uint256,uint256,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
hash = keccak256(bytes)(abi.encodePacked(this,tokenGet,amountGet,tokenGive,amountGive,expires,\
nonce))

IRs:
TMP_189(bytes) = SOLIDITY_CALL abi.encodePacked()(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce)
TMP_\
190(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_189)
hash(bytes32) := TMP_190(bytes32)",
		node_expression="hash = keccak256(bytes)(abi.encodePacked(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce))",
		node_info_vulnerabilities=None,
		node_irs="TMP_189(bytes) = SOLIDITY_CALL abi.encodePacked()(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce)
TMP_190(bytes32) = \
SOLIDITY_CALL keccak256(bytes)(TMP_189)
hash(bytes32) := TMP_190(bytes32)",
		node_source_code_lines="[399]",
		node_type="NEW VARIABLE",
		source_file="buggy_35.sol"];
	257 -> 258	[key=0,
		edge_type=next,
		label=Next];
	259	[contract_name=BitpayerDEX,
		function_fullname="order(address,uint256,address,uint256,uint256,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
orders[msg.sender][hash] = true

IRs:
REF_89(mapping(bytes32 => bool)) -> orders[msg.sender]
\
REF_90(bool) -> REF_89[hash]
REF_90 (->orders) := True(bool)",
		node_expression="orders[msg.sender][hash] = true",
		node_info_vulnerabilities=None,
		node_irs="REF_89(mapping(bytes32 => bool)) -> orders[msg.sender]
REF_90(bool) -> REF_89[hash]
REF_90 (->orders) := True(bool)",
		node_source_code_lines="[400]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	258 -> 259	[key=0,
		edge_type=next,
		label=Next];
	260	[contract_name=BitpayerDEX,
		function_fullname="order(address,uint256,address,uint256,uint256,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Order(now,tokenGet,amountGet,tokenGive,amountGive,expires,nonce,msg.sender)

IRs:
Emit Order(\
now.tokenGet.amountGet.tokenGive.amountGive.expires.nonce.msg.sender)",
		node_expression="Order(now,tokenGet,amountGet,tokenGive,amountGive,expires,nonce,msg.sender)",
		node_info_vulnerabilities=None,
		node_irs="Emit Order(now.tokenGet.amountGet.tokenGive.amountGive.expires.nonce.msg.sender)",
		node_source_code_lines="[401]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	259 -> 260	[key=0,
		edge_type=next,
		label=Next];
	261	[contract_name=BitpayerDEX,
		function_fullname="order(address,uint256,address,uint256,uint256,uint256)",
		label="buggy_35.sol_BitpayerDEX_order(address,uint256,address,uint256,uint256,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[398, 399, 400, 401, 402]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	261 -> 257	[key=0,
		edge_type=next,
		label=Next];
	262	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin14(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[403, 404, 405, 406]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	263	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin14(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin14)

IRs:
TMP_192(bool) = tx.origin == owner_txorigin14
\
TMP_193(None) = SOLIDITY_CALL require(bool)(TMP_192)",
		node_expression="require(bool)(tx.origin == owner_txorigin14)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_192(bool) = tx.origin == owner_txorigin14
TMP_193(None) = SOLIDITY_CALL require(bool)(TMP_192)",
		node_source_code_lines="[404]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	262 -> 263	[key=0,
		edge_type=next,
		label=Next];
	264	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin14(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_194 = CONVERT this to address
REF_92 -> \
BALANCE TMP_194
Transfer dest:_recipient value:REF_92",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_194 = CONVERT this to address
REF_92 -> BALANCE TMP_194
Transfer dest:_recipient value:REF_92",
		node_source_code_lines="[405]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	263 -> 264	[key=0,
		edge_type=next,
		label=Next];
	265	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin14(address,address)",
		label="buggy_35.sol_BitpayerDEX_withdrawAll_txorigin14(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[403, 404, 405, 406]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	265 -> 262	[key=0,
		edge_type=next,
		label=Next];
	266	[contract_name=BitpayerDEX,
		function_fullname="trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	267	[contract_name=BitpayerDEX,
		function_fullname="trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(! safeGuard,System Paused by Admin)

IRs:
TMP_196 = ! safeGuard 
TMP_197(\
None) = SOLIDITY_CALL require(bool,string)(TMP_196,System Paused by Admin)",
		node_expression="require(bool,string)(! safeGuard,System Paused by Admin)",
		node_info_vulnerabilities=None,
		node_irs="TMP_196 = ! safeGuard 
TMP_197(None) = SOLIDITY_CALL require(bool,string)(TMP_196,System Paused by Admin)",
		node_source_code_lines="[409]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	266 -> 267	[key=0,
		edge_type=next,
		label=Next];
	268	[contract_name=BitpayerDEX,
		function_fullname="trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
hash = keccak256(bytes)(abi.encodePacked(this,tokenGet,amountGet,tokenGive,amountGive,expires,\
nonce))

IRs:
TMP_198(bytes) = SOLIDITY_CALL abi.encodePacked()(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce)
TMP_\
199(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_198)
hash(bytes32) := TMP_199(bytes32)",
		node_expression="hash = keccak256(bytes)(abi.encodePacked(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce))",
		node_info_vulnerabilities=None,
		node_irs="TMP_198(bytes) = SOLIDITY_CALL abi.encodePacked()(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce)
TMP_199(bytes32) = \
SOLIDITY_CALL keccak256(bytes)(TMP_198)
hash(bytes32) := TMP_199(bytes32)",
		node_source_code_lines="[411]",
		node_type="NEW VARIABLE",
		source_file="buggy_35.sol"];
	267 -> 268	[key=0,
		edge_type=next,
		label=Next];
	269	[contract_name=BitpayerDEX,
		function_fullname="trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(((orders[user][hash] || ecrecover(bytes32,uint8,bytes32,bytes32)(keccak256(bytes)(\
abi.encodePacked(Ethereum Signed Message:
32,hash)),v,r,s) == user) && block.number <= expires && orderFills[user][hash].add(amount) <= \
amountGet))

IRs:
REF_94(mapping(bytes32 => bool)) -> orders[user]
REF_95(bool) -> REF_94[hash]
TMP_200(bytes) = SOLIDITY_CALL abi.encodePacked()(\
Ethereum Signed Message:
32,hash)
TMP_201(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_200)
TMP_202(address) = SOLIDITY_CALL ecrecover(\
bytes32,uint8,bytes32,bytes32)(TMP_201,v,r,s)
TMP_203(bool) = TMP_202 == user
TMP_204(bool) = REF_95 || TMP_203
TMP_205(bool) = \
block.number <= expires
TMP_206(bool) = TMP_204 && TMP_205
REF_97(mapping(bytes32 => uint256)) -> orderFills[user]
REF_98(uint256) \
-> REF_97[hash]
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_98', 'amount'] 
\
TMP_208(bool) = TMP_207 <= amountGet
TMP_209(bool) = TMP_206 && TMP_208
TMP_210(None) = SOLIDITY_CALL require(bool)(TMP_209)",
		node_expression="require(bool)(((orders[user][hash] || ecrecover(bytes32,uint8,bytes32,bytes32)(keccak256(bytes)(abi.encodePacked(Ethereum Signed \
Message:
32,hash)),v,r,s) == user) && block.number <= expires && orderFills[user][hash].add(amount) <= amountGet))",
		node_info_vulnerabilities=None,
		node_irs="REF_94(mapping(bytes32 => bool)) -> orders[user]
REF_95(bool) -> REF_94[hash]
TMP_200(bytes) = SOLIDITY_CALL abi.encodePacked()(\
Ethereum Signed Message:
32,hash)
TMP_201(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_200)
TMP_202(address) = SOLIDITY_CALL ecrecover(\
bytes32,uint8,bytes32,bytes32)(TMP_201,v,r,s)
TMP_203(bool) = TMP_202 == user
TMP_204(bool) = REF_95 || TMP_203
TMP_205(bool) = \
block.number <= expires
TMP_206(bool) = TMP_204 && TMP_205
REF_97(mapping(bytes32 => uint256)) -> orderFills[user]
REF_98(uint256) \
-> REF_97[hash]
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_98', 'amount'] 
\
TMP_208(bool) = TMP_207 <= amountGet
TMP_209(bool) = TMP_206 && TMP_208
TMP_210(None) = SOLIDITY_CALL require(bool)(TMP_209)",
		node_source_code_lines="[412, 413, 414, 415, 416]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	268 -> 269	[key=0,
		edge_type=next,
		label=Next];
	270	[contract_name=BitpayerDEX,
		function_fullname="trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
tradeBalances(tokenGet,amountGet,tokenGive,amountGive,user,amount)

IRs:
INTERNAL_CALL, BitpayerDEX.tradeBalances(\
address,uint256,address,uint256,address,uint256)(tokenGet,amountGet,tokenGive,amountGive,user,amount)",
		node_expression="tradeBalances(tokenGet,amountGet,tokenGive,amountGive,user,amount)",
		node_info_vulnerabilities=None,
		node_irs="INTERNAL_CALL, BitpayerDEX.tradeBalances(address,uint256,address,uint256,address,uint256)(tokenGet,amountGet,tokenGive,amountGive,\
user,amount)",
		node_source_code_lines="[417]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	269 -> 270	[key=0,
		edge_type=next,
		label=Next];
	271	[contract_name=BitpayerDEX,
		function_fullname="trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
orderFills[user][hash] = orderFills[user][hash].add(amount)

IRs:
REF_100(mapping(bytes32 => \
uint256)) -> orderFills[user]
REF_101(uint256) -> REF_100[hash]
REF_102(mapping(bytes32 => uint256)) -> orderFills[user]
REF_103(\
uint256) -> REF_102[hash]
TMP_212(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_\
103', 'amount'] 
REF_101 (->orderFills) := TMP_212(uint256)",
		node_expression="orderFills[user][hash] = orderFills[user][hash].add(amount)",
		node_info_vulnerabilities=None,
		node_irs="REF_100(mapping(bytes32 => uint256)) -> orderFills[user]
REF_101(uint256) -> REF_100[hash]
REF_102(mapping(bytes32 => uint256)) \
-> orderFills[user]
REF_103(uint256) -> REF_102[hash]
TMP_212(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,\
uint256), arguments:['REF_103', 'amount'] 
REF_101 (->orderFills) := TMP_212(uint256)",
		node_source_code_lines="[418]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	270 -> 271	[key=0,
		edge_type=next,
		label=Next];
	272	[contract_name=BitpayerDEX,
		function_fullname="trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Trade(now,tokenGet,amount,tokenGive,amountGive * amount / amountGet,user,msg.sender)

IRs:
TMP_\
213(uint256) = amountGive * amount
TMP_214(uint256) = TMP_213 / amountGet
Emit Trade(now.tokenGet.amount.tokenGive.TMP_214.user.msg.sender)",
		node_expression="Trade(now,tokenGet,amount,tokenGive,amountGive * amount / amountGet,user,msg.sender)",
		node_info_vulnerabilities=None,
		node_irs="TMP_213(uint256) = amountGive * amount
TMP_214(uint256) = TMP_213 / amountGet
Emit Trade(now.tokenGet.amount.tokenGive.TMP_214.user.msg.sender)",
		node_source_code_lines="[419]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	271 -> 272	[key=0,
		edge_type=next,
		label=Next];
	273	[contract_name=BitpayerDEX,
		function_fullname="trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)",
		label="buggy_35.sol_BitpayerDEX_trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	273 -> 266	[key=0,
		edge_type=next,
		label=Next];
	274	[contract_name=BitpayerDEX,
		function_fullname="tradeBalances(address,uint256,address,uint256,address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[422, 423, 424, 425, 426, 427, 428, 429, 430, 431]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	275	[contract_name=BitpayerDEX,
		function_fullname="tradeBalances(address,uint256,address,uint256,address,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
tradingFeeXfer = calculatePercentage(amount,tradingFee)

IRs:
TMP_216(uint256) = INTERNAL_CALL, \
BitpayerDEX.calculatePercentage(uint256,uint256)(amount,tradingFee)
tradingFeeXfer(uint256) := TMP_216(uint256)",
		node_expression="tradingFeeXfer = calculatePercentage(amount,tradingFee)",
		node_info_vulnerabilities=None,
		node_irs="TMP_216(uint256) = INTERNAL_CALL, BitpayerDEX.calculatePercentage(uint256,uint256)(amount,tradingFee)
tradingFeeXfer(uint256) := \
TMP_216(uint256)",
		node_source_code_lines="[424]",
		node_type="NEW VARIABLE",
		source_file="buggy_35.sol"];
	274 -> 275	[key=0,
		edge_type=next,
		label=Next];
	276	[contract_name=BitpayerDEX,
		function_fullname="tradeBalances(address,uint256,address,uint256,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer))

\
IRs:
REF_105(mapping(address => uint256)) -> tokens[tokenGet]
REF_106(uint256) -> REF_105[msg.sender]
REF_107(mapping(address => \
uint256)) -> tokens[tokenGet]
REF_108(uint256) -> REF_107[msg.sender]
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(\
uint256,uint256), arguments:['amount', 'tradingFeeXfer'] 
TMP_218(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(\
uint256,uint256), arguments:['REF_108', 'TMP_217'] 
REF_106 (->tokens) := TMP_218(uint256)",
		node_expression="tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer))",
		node_info_vulnerabilities=None,
		node_irs="REF_105(mapping(address => uint256)) -> tokens[tokenGet]
REF_106(uint256) -> REF_105[msg.sender]
REF_107(mapping(address => uint256)) \
-> tokens[tokenGet]
REF_108(uint256) -> REF_107[msg.sender]
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(\
uint256,uint256), arguments:['amount', 'tradingFeeXfer'] 
TMP_218(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(\
uint256,uint256), arguments:['REF_108', 'TMP_217'] 
REF_106 (->tokens) := TMP_218(uint256)",
		node_source_code_lines="[425]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	275 -> 276	[key=0,
		edge_type=next,
		label=Next];
	277	[contract_name=BitpayerDEX,
		function_fullname="tradeBalances(address,uint256,address,uint256,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer))

IRs:
REF_111(\
mapping(address => uint256)) -> tokens[tokenGet]
REF_112(uint256) -> REF_111[user]
REF_113(mapping(address => uint256)) -> tokens[\
tokenGet]
REF_114(uint256) -> REF_113[user]
TMP_219(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), \
arguments:['amount', 'tradingFeeXfer'] 
TMP_220(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), \
arguments:['REF_114', 'TMP_219'] 
REF_112 (->tokens) := TMP_220(uint256)",
		node_expression="tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer))",
		node_info_vulnerabilities=None,
		node_irs="REF_111(mapping(address => uint256)) -> tokens[tokenGet]
REF_112(uint256) -> REF_111[user]
REF_113(mapping(address => uint256)) \
-> tokens[tokenGet]
REF_114(uint256) -> REF_113[user]
TMP_219(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,\
uint256), arguments:['amount', 'tradingFeeXfer'] 
TMP_220(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,\
uint256), arguments:['REF_114', 'TMP_219'] 
REF_112 (->tokens) := TMP_220(uint256)",
		node_source_code_lines="[426]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	276 -> 277	[key=0,
		edge_type=next,
		label=Next];
	278	[contract_name=BitpayerDEX,
		function_fullname="tradeBalances(address,uint256,address,uint256,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer)

IRs:
TMP_\
221 = CONVERT 0 to address
REF_117(mapping(address => uint256)) -> tokens[TMP_221]
REF_118(uint256) -> REF_117[feeAccount]
TMP_222 = \
CONVERT 0 to address
REF_119(mapping(address => uint256)) -> tokens[TMP_222]
REF_120(uint256) -> REF_119[feeAccount]
TMP_223(uint256) = \
LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_120', 'tradingFeeXfer'] 
REF_118 (->tokens) := \
TMP_223(uint256)",
		node_expression="tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer)",
		node_info_vulnerabilities=None,
		node_irs="TMP_221 = CONVERT 0 to address
REF_117(mapping(address => uint256)) -> tokens[TMP_221]
REF_118(uint256) -> REF_117[feeAccount]
TMP_\
222 = CONVERT 0 to address
REF_119(mapping(address => uint256)) -> tokens[TMP_222]
REF_120(uint256) -> REF_119[feeAccount]
TMP_223(\
uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_120', 'tradingFeeXfer'] 
REF_118 (\
->tokens) := TMP_223(uint256)",
		node_source_code_lines="[427]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	277 -> 278	[key=0,
		edge_type=next,
		label=Next];
	279	[contract_name=BitpayerDEX,
		function_fullname="tradeBalances(address,uint256,address,uint256,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet)

IRs:
\
REF_122(mapping(address => uint256)) -> tokens[tokenGive]
REF_123(uint256) -> REF_122[user]
REF_124(mapping(address => uint256)) \
-> tokens[tokenGive]
REF_125(uint256) -> REF_124[user]
TMP_224(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,\
uint256), arguments:['amountGive', 'amount'] 
TMP_225(uint256) = TMP_224 / amountGet
TMP_226(uint256) = LIBRARY_CALL, dest:SafeMath, \
function:SafeMath.sub(uint256,uint256), arguments:['REF_125', 'TMP_225'] 
REF_123 (->tokens) := TMP_226(uint256)",
		node_expression="tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet)",
		node_info_vulnerabilities=None,
		node_irs="REF_122(mapping(address => uint256)) -> tokens[tokenGive]
REF_123(uint256) -> REF_122[user]
REF_124(mapping(address => uint256)) \
-> tokens[tokenGive]
REF_125(uint256) -> REF_124[user]
TMP_224(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,\
uint256), arguments:['amountGive', 'amount'] 
TMP_225(uint256) = TMP_224 / amountGet
TMP_226(uint256) = LIBRARY_CALL, dest:SafeMath, \
function:SafeMath.sub(uint256,uint256), arguments:['REF_125', 'TMP_225'] 
REF_123 (->tokens) := TMP_226(uint256)",
		node_source_code_lines="[429]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	278 -> 279	[key=0,
		edge_type=next,
		label=Next];
	280	[contract_name=BitpayerDEX,
		function_fullname="tradeBalances(address,uint256,address,uint256,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet)

\
IRs:
REF_128(mapping(address => uint256)) -> tokens[tokenGive]
REF_129(uint256) -> REF_128[msg.sender]
REF_130(mapping(address => \
uint256)) -> tokens[tokenGive]
REF_131(uint256) -> REF_130[msg.sender]
TMP_227(uint256) = LIBRARY_CALL, dest:SafeMath, function:\
SafeMath.mul(uint256,uint256), arguments:['amountGive', 'amount'] 
TMP_228(uint256) = TMP_227 / amountGet
TMP_229(uint256) = LIBRARY_\
CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_131', 'TMP_228'] 
REF_129 (->tokens) := TMP_229(uint256)",
		node_expression="tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet)",
		node_info_vulnerabilities=None,
		node_irs="REF_128(mapping(address => uint256)) -> tokens[tokenGive]
REF_129(uint256) -> REF_128[msg.sender]
REF_130(mapping(address => uint256)) \
-> tokens[tokenGive]
REF_131(uint256) -> REF_130[msg.sender]
TMP_227(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(\
uint256,uint256), arguments:['amountGive', 'amount'] 
TMP_228(uint256) = TMP_227 / amountGet
TMP_229(uint256) = LIBRARY_CALL, dest:\
SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_131', 'TMP_228'] 
REF_129 (->tokens) := TMP_229(uint256)",
		node_source_code_lines="[430]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	279 -> 280	[key=0,
		edge_type=next,
		label=Next];
	281	[contract_name=BitpayerDEX,
		function_fullname="tradeBalances(address,uint256,address,uint256,address,uint256)",
		label="buggy_35.sol_BitpayerDEX_tradeBalances(address,uint256,address,uint256,address,uint256)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[422, 423, 424, 425, 426, 427, 428, 429, 430, 431]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	281 -> 274	[key=0,
		edge_type=next,
		label=Next];
	282	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin30(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[432, 433, 434, 435]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	283	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin30(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin30)

IRs:
TMP_230(bool) = tx.origin == owner_txorigin30
\
TMP_231(None) = SOLIDITY_CALL require(bool)(TMP_230)",
		node_expression="require(bool)(tx.origin == owner_txorigin30)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_230(bool) = tx.origin == owner_txorigin30
TMP_231(None) = SOLIDITY_CALL require(bool)(TMP_230)",
		node_source_code_lines="[433]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	282 -> 283	[key=0,
		edge_type=next,
		label=Next];
	284	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin30(address,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
_recipient.transfer(address(this).balance)

IRs:
TMP_232 = CONVERT this to address
REF_135 -> \
BALANCE TMP_232
Transfer dest:_recipient value:REF_135",
		node_expression="_recipient.transfer(address(this).balance)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_232 = CONVERT this to address
REF_135 -> BALANCE TMP_232
Transfer dest:_recipient value:REF_135",
		node_source_code_lines="[434]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	283 -> 284	[key=0,
		edge_type=next,
		label=Next];
	285	[contract_name=BitpayerDEX,
		function_fullname="withdrawAll_txorigin30(address,address)",
		label="buggy_35.sol_BitpayerDEX_withdrawAll_txorigin30(address,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[432, 433, 434, 435]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	285 -> 282	[key=0,
		edge_type=next,
		label=Next];
	286	[contract_name=BitpayerDEX,
		function_fullname="testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[437, 438, 439, 440, 441, 442, 443, 444]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	287	[contract_name=BitpayerDEX,
		function_fullname="testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address)",
		label="Node Type: IF

EXPRESSION:
! (tokens[tokenGet][sender] >= amount && availableVolume(tokenGet,amountGet,tokenGive,amountGive,expires,\
nonce,user,v,r,s) >= amount)

IRs:
REF_136(mapping(address => uint256)) -> tokens[tokenGet]
REF_137(uint256) -> REF_136[sender]
\
TMP_234(bool) = REF_137 >= amount
TMP_235(uint256) = INTERNAL_CALL, BitpayerDEX.availableVolume(address,uint256,address,uint256,\
uint256,uint256,address,uint8,bytes32,bytes32)(tokenGet,amountGet,tokenGive,amountGive,expires,nonce,user,v,r,s)
TMP_236(bool) = \
TMP_235 >= amount
TMP_237(bool) = TMP_234 && TMP_236
TMP_238 = ! TMP_237 
CONDITION TMP_238",
		node_expression="! (tokens[tokenGet][sender] >= amount && availableVolume(tokenGet,amountGet,tokenGive,amountGive,expires,nonce,user,v,r,s) >= amount)",
		node_info_vulnerabilities=None,
		node_irs="REF_136(mapping(address => uint256)) -> tokens[tokenGet]
REF_137(uint256) -> REF_136[sender]
TMP_234(bool) = REF_137 >= amount
TMP_\
235(uint256) = INTERNAL_CALL, BitpayerDEX.availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,\
bytes32)(tokenGet,amountGet,tokenGive,amountGive,expires,nonce,user,v,r,s)
TMP_236(bool) = TMP_235 >= amount
TMP_237(bool) = TMP_\
234 && TMP_236
TMP_238 = ! TMP_237 
CONDITION TMP_238",
		node_source_code_lines="[439, 440, 441, 442]",
		node_type=IF,
		source_file="buggy_35.sol"];
	286 -> 287	[key=0,
		edge_type=next,
		label=Next];
	288	[contract_name=BitpayerDEX,
		function_fullname="testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address)",
		label="Node Type: RETURN

EXPRESSION:
false

IRs:
RETURN False",
		node_expression=false,
		node_info_vulnerabilities=None,
		node_irs="RETURN False",
		node_source_code_lines="[442]",
		node_type=RETURN,
		source_file="buggy_35.sol"];
	287 -> 288	[key=0,
		edge_type=if_true,
		label=True];
	289	[contract_name=BitpayerDEX,
		function_fullname="testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[439, 440, 441, 442]",
		node_type=END_IF,
		source_file="buggy_35.sol"];
	287 -> 289	[key=0,
		edge_type=if_false,
		label=False];
	290	[contract_name=BitpayerDEX,
		function_fullname="testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address)",
		label="Node Type: RETURN

EXPRESSION:
true

IRs:
RETURN True",
		node_expression=true,
		node_info_vulnerabilities=None,
		node_irs="RETURN True",
		node_source_code_lines="[443]",
		node_type=RETURN,
		source_file="buggy_35.sol"];
	289 -> 290	[key=0,
		edge_type=next,
		label=Next];
	291	[contract_name=BitpayerDEX,
		function_fullname="testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[437, 438, 439, 440, 441, 442, 443, 444]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	291 -> 286	[key=0,
		edge_type=next,
		label=Next];
	292	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin8(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[445, 446, 447]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	293	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin8(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin8)

IRs:
TMP_239(bool) = tx.origin == owner_txorigin8
\
TMP_240(None) = SOLIDITY_CALL require(bool)(TMP_239)",
		node_expression="require(bool)(tx.origin == owner_txorigin8)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_239(bool) = tx.origin == owner_txorigin8
TMP_240(None) = SOLIDITY_CALL require(bool)(TMP_239)",
		node_source_code_lines="[446]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	292 -> 293	[key=0,
		edge_type=next,
		label=Next];
	294	[contract_name=BitpayerDEX,
		function_fullname="bug_txorigin8(address)",
		label="buggy_35.sol_BitpayerDEX_bug_txorigin8(address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[445, 446, 447]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	294 -> 292	[key=0,
		edge_type=next,
		label=Next];
	295	[contract_name=BitpayerDEX,
		function_fullname="availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	296	[contract_name=BitpayerDEX,
		function_fullname="availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
hash = keccak256(bytes)(abi.encodePacked(this,tokenGet,amountGet,tokenGive,amountGive,expires,\
nonce))

IRs:
TMP_241(bytes) = SOLIDITY_CALL abi.encodePacked()(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce)
TMP_\
242(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_241)
hash(bytes32) := TMP_242(bytes32)",
		node_expression="hash = keccak256(bytes)(abi.encodePacked(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce))",
		node_info_vulnerabilities=None,
		node_irs="TMP_241(bytes) = SOLIDITY_CALL abi.encodePacked()(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce)
TMP_242(bytes32) = \
SOLIDITY_CALL keccak256(bytes)(TMP_241)
hash(bytes32) := TMP_242(bytes32)",
		node_source_code_lines="[450]",
		node_type="NEW VARIABLE",
		source_file="buggy_35.sol"];
	295 -> 296	[key=0,
		edge_type=next,
		label=Next];
	297	[contract_name=BitpayerDEX,
		function_fullname="availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)",
		label="Node Type: NEW VARIABLE
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[451]",
		node_type="NEW VARIABLE",
		source_file="buggy_35.sol"];
	296 -> 297	[key=0,
		edge_type=next,
		label=Next];
	298	[contract_name=BitpayerDEX,
		function_fullname="availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)",
		label="Node Type: IF

EXPRESSION:
! ((orders[user][hash] || ecrecover(bytes32,uint8,bytes32,bytes32)(keccak256(bytes)(abi.encodePacked(\
Ethereum Signed Message:
32,hash)),v,r,s) == user) && block.number <= expires)

IRs:
REF_139(mapping(bytes32 => bool)) -> orders[\
user]
REF_140(bool) -> REF_139[hash]
TMP_243(bytes) = SOLIDITY_CALL abi.encodePacked()(Ethereum Signed Message:
32,hash)
TMP_244(\
bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_243)
TMP_245(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(TMP_\
244,v,r,s)
TMP_246(bool) = TMP_245 == user
TMP_247(bool) = REF_140 || TMP_246
TMP_248(bool) = block.number <= expires
TMP_249(bool) = \
TMP_247 && TMP_248
TMP_250 = ! TMP_249 
CONDITION TMP_250",
		node_expression="! ((orders[user][hash] || ecrecover(bytes32,uint8,bytes32,bytes32)(keccak256(bytes)(abi.encodePacked(Ethereum Signed Message:
32,\
hash)),v,r,s) == user) && block.number <= expires)",
		node_info_vulnerabilities=None,
		node_irs="REF_139(mapping(bytes32 => bool)) -> orders[user]
REF_140(bool) -> REF_139[hash]
TMP_243(bytes) = SOLIDITY_CALL abi.encodePacked()(\
Ethereum Signed Message:
32,hash)
TMP_244(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_243)
TMP_245(address) = SOLIDITY_CALL ecrecover(\
bytes32,uint8,bytes32,bytes32)(TMP_244,v,r,s)
TMP_246(bool) = TMP_245 == user
TMP_247(bool) = REF_140 || TMP_246
TMP_248(bool) = \
block.number <= expires
TMP_249(bool) = TMP_247 && TMP_248
TMP_250 = ! TMP_249 
CONDITION TMP_250",
		node_source_code_lines="[452, 453, 454, 455]",
		node_type=IF,
		source_file="buggy_35.sol"];
	297 -> 298	[key=0,
		edge_type=next,
		label=Next];
	299	[contract_name=BitpayerDEX,
		function_fullname="availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)",
		label="Node Type: RETURN

EXPRESSION:
0

IRs:
RETURN 0",
		node_expression=0,
		node_info_vulnerabilities=None,
		node_irs="RETURN 0",
		node_source_code_lines="[455]",
		node_type=RETURN,
		source_file="buggy_35.sol"];
	298 -> 299	[key=0,
		edge_type=if_true,
		label=True];
	300	[contract_name=BitpayerDEX,
		function_fullname="availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[452, 453, 454, 455]",
		node_type=END_IF,
		source_file="buggy_35.sol"];
	298 -> 300	[key=0,
		edge_type=if_false,
		label=False];
	301	[contract_name=BitpayerDEX,
		function_fullname="availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
available1 = tokens[tokenGive][user].mul(amountGet) / amountGive

IRs:
REF_142(mapping(address => \
uint256)) -> tokens[tokenGive]
REF_143(uint256) -> REF_142[user]
TMP_251(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(\
uint256,uint256), arguments:['REF_143', 'amountGet'] 
TMP_252(uint256) = TMP_251 / amountGive
available1(uint256) := TMP_252(uint256)",
		node_expression="available1 = tokens[tokenGive][user].mul(amountGet) / amountGive",
		node_info_vulnerabilities=None,
		node_irs="REF_142(mapping(address => uint256)) -> tokens[tokenGive]
REF_143(uint256) -> REF_142[user]
TMP_251(uint256) = LIBRARY_CALL, dest:\
SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_143', 'amountGet'] 
TMP_252(uint256) = TMP_251 / amountGive
available1(\
uint256) := TMP_252(uint256)",
		node_source_code_lines="[456]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	300 -> 301	[key=0,
		edge_type=next,
		label=Next];
	302	[contract_name=BitpayerDEX,
		function_fullname="availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)",
		label="Node Type: IF

EXPRESSION:
amountGet.sub(orderFills[user][hash]) < available1

IRs:
REF_146(mapping(bytes32 => uint256)) -> orderFills[\
user]
REF_147(uint256) -> REF_146[hash]
TMP_253(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), \
arguments:['amountGet', 'REF_147'] 
TMP_254(bool) = TMP_253 < available1
CONDITION TMP_254",
		node_expression="amountGet.sub(orderFills[user][hash]) < available1",
		node_info_vulnerabilities=None,
		node_irs="REF_146(mapping(bytes32 => uint256)) -> orderFills[user]
REF_147(uint256) -> REF_146[hash]
TMP_253(uint256) = LIBRARY_CALL, dest:\
SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['amountGet', 'REF_147'] 
TMP_254(bool) = TMP_253 < available1
CONDITION \
TMP_254",
		node_source_code_lines="[458]",
		node_type=IF,
		source_file="buggy_35.sol"];
	301 -> 302	[key=0,
		edge_type=next,
		label=Next];
	303	[contract_name=BitpayerDEX,
		function_fullname="availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)",
		label="Node Type: RETURN

EXPRESSION:
amountGet.sub(orderFills[user][hash])

IRs:
REF_149(mapping(bytes32 => uint256)) -> orderFills[user]
\
REF_150(uint256) -> REF_149[hash]
TMP_255(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['\
amountGet', 'REF_150'] 
RETURN TMP_255",
		node_expression="amountGet.sub(orderFills[user][hash])",
		node_info_vulnerabilities=None,
		node_irs="REF_149(mapping(bytes32 => uint256)) -> orderFills[user]
REF_150(uint256) -> REF_149[hash]
TMP_255(uint256) = LIBRARY_CALL, dest:\
SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['amountGet', 'REF_150'] 
RETURN TMP_255",
		node_source_code_lines="[458]",
		node_type=RETURN,
		source_file="buggy_35.sol"];
	302 -> 303	[key=0,
		edge_type=if_true,
		label=True];
	304	[contract_name=BitpayerDEX,
		function_fullname="availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[458]",
		node_type=END_IF,
		source_file="buggy_35.sol"];
	302 -> 304	[key=0,
		edge_type=if_false,
		label=False];
	305	[contract_name=BitpayerDEX,
		function_fullname="availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)",
		label="Node Type: RETURN

EXPRESSION:
available1

IRs:
RETURN available1",
		node_expression=available1,
		node_info_vulnerabilities=None,
		node_irs="RETURN available1",
		node_source_code_lines="[459]",
		node_type=RETURN,
		source_file="buggy_35.sol"];
	304 -> 305	[key=0,
		edge_type=next,
		label=Next];
	306	[contract_name=BitpayerDEX,
		function_fullname="availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)",
		label="buggy_35.sol_BitpayerDEX_availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	306 -> 295	[key=0,
		edge_type=next,
		label=Next];
	307	[contract_name=BitpayerDEX,
		function_fullname="amountFilled(address,uint256,address,uint256,uint256,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[463, 464, 465, 466]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	308	[contract_name=BitpayerDEX,
		function_fullname="amountFilled(address,uint256,address,uint256,uint256,uint256,address)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
hash = keccak256(bytes)(abi.encodePacked(this,tokenGet,amountGet,tokenGive,amountGive,expires,\
nonce))

IRs:
TMP_256(bytes) = SOLIDITY_CALL abi.encodePacked()(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce)
TMP_\
257(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_256)
hash(bytes32) := TMP_257(bytes32)",
		node_expression="hash = keccak256(bytes)(abi.encodePacked(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce))",
		node_info_vulnerabilities=None,
		node_irs="TMP_256(bytes) = SOLIDITY_CALL abi.encodePacked()(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce)
TMP_257(bytes32) = \
SOLIDITY_CALL keccak256(bytes)(TMP_256)
hash(bytes32) := TMP_257(bytes32)",
		node_source_code_lines="[464]",
		node_type="NEW VARIABLE",
		source_file="buggy_35.sol"];
	307 -> 308	[key=0,
		edge_type=next,
		label=Next];
	309	[contract_name=BitpayerDEX,
		function_fullname="amountFilled(address,uint256,address,uint256,uint256,uint256,address)",
		label="Node Type: RETURN

EXPRESSION:
orderFills[user][hash]

IRs:
REF_152(mapping(bytes32 => uint256)) -> orderFills[user]
REF_153(uint256) \
-> REF_152[hash]
RETURN REF_153",
		node_expression="orderFills[user][hash]",
		node_info_vulnerabilities=None,
		node_irs="REF_152(mapping(bytes32 => uint256)) -> orderFills[user]
REF_153(uint256) -> REF_152[hash]
RETURN REF_153",
		node_source_code_lines="[465]",
		node_type=RETURN,
		source_file="buggy_35.sol"];
	308 -> 309	[key=0,
		edge_type=next,
		label=Next];
	310	[contract_name=BitpayerDEX,
		function_fullname="amountFilled(address,uint256,address,uint256,uint256,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_amountFilled(address,uint256,address,uint256,uint256,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[463, 464, 465, 466]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	310 -> 307	[key=0,
		edge_type=next,
		label=Next];
	311	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin39(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[467, 468, 469, 470]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	312	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin39(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner_txorigin39)

IRs:
TMP_258(bool) = tx.origin == owner_txorigin39
\
TMP_259(None) = SOLIDITY_CALL require(bool)(TMP_258)",
		node_expression="require(bool)(tx.origin == owner_txorigin39)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="TMP_258(bool) = tx.origin == owner_txorigin39
TMP_259(None) = SOLIDITY_CALL require(bool)(TMP_258)",
		node_source_code_lines="[468]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	311 -> 312	[key=0,
		edge_type=next,
		label=Next];
	313	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin39(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
to.call.value(amount)

IRs:
REF_154(None) -> to.call
REF_155(None) -> REF_154.value",
		node_expression="to.call.value(amount)",
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs="REF_154(None) -> to.call
REF_155(None) -> REF_154.value",
		node_source_code_lines="[469]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	312 -> 313	[key=0,
		edge_type=next,
		label=Next];
	314	[contract_name=BitpayerDEX,
		function_fullname="transferTo_txorigin39(address,uint256,address)",
		label="buggy_35.sol_BitpayerDEX_transferTo_txorigin39(address,uint256,address)",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[467, 468, 469, 470]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	314 -> 311	[key=0,
		edge_type=next,
		label=Next];
	315	[contract_name=BitpayerDEX,
		function_fullname="cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[472, 473, 474, 475, 476, 477, 478]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	316	[contract_name=BitpayerDEX,
		function_fullname="cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(! safeGuard,System Paused by Admin)

IRs:
TMP_261 = ! safeGuard 
TMP_262(\
None) = SOLIDITY_CALL require(bool,string)(TMP_261,System Paused by Admin)",
		node_expression="require(bool,string)(! safeGuard,System Paused by Admin)",
		node_info_vulnerabilities=None,
		node_irs="TMP_261 = ! safeGuard 
TMP_262(None) = SOLIDITY_CALL require(bool,string)(TMP_261,System Paused by Admin)",
		node_source_code_lines="[473]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	315 -> 316	[key=0,
		edge_type=next,
		label=Next];
	317	[contract_name=BitpayerDEX,
		function_fullname="cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
hash = keccak256(bytes)(abi.encodePacked(this,tokenGet,amountGet,tokenGive,amountGive,expires,\
nonce))

IRs:
TMP_263(bytes) = SOLIDITY_CALL abi.encodePacked()(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce)
TMP_\
264(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_263)
hash(bytes32) := TMP_264(bytes32)",
		node_expression="hash = keccak256(bytes)(abi.encodePacked(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce))",
		node_info_vulnerabilities=None,
		node_irs="TMP_263(bytes) = SOLIDITY_CALL abi.encodePacked()(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce)
TMP_264(bytes32) = \
SOLIDITY_CALL keccak256(bytes)(TMP_263)
hash(bytes32) := TMP_264(bytes32)",
		node_source_code_lines="[474]",
		node_type="NEW VARIABLE",
		source_file="buggy_35.sol"];
	316 -> 317	[key=0,
		edge_type=next,
		label=Next];
	318	[contract_name=BitpayerDEX,
		function_fullname="cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)((orders[msg.sender][hash] || ecrecover(bytes32,uint8,bytes32,bytes32)(keccak256(\
bytes)(abi.encodePacked(Ethereum Signed Message:
32,hash)),v,r,s) == msg.sender))

IRs:
REF_157(mapping(bytes32 => bool)) -> orders[\
msg.sender]
REF_158(bool) -> REF_157[hash]
TMP_265(bytes) = SOLIDITY_CALL abi.encodePacked()(Ethereum Signed Message:
32,hash)
\
TMP_266(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_265)
TMP_267(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(\
TMP_266,v,r,s)
TMP_268(bool) = TMP_267 == msg.sender
TMP_269(bool) = REF_158 || TMP_268
TMP_270(None) = SOLIDITY_CALL require(bool)(\
TMP_269)",
		node_expression="require(bool)((orders[msg.sender][hash] || ecrecover(bytes32,uint8,bytes32,bytes32)(keccak256(bytes)(abi.encodePacked(Ethereum \
Signed Message:
32,hash)),v,r,s) == msg.sender))",
		node_info_vulnerabilities=None,
		node_irs="REF_157(mapping(bytes32 => bool)) -> orders[msg.sender]
REF_158(bool) -> REF_157[hash]
TMP_265(bytes) = SOLIDITY_CALL abi.encodePacked()(\
Ethereum Signed Message:
32,hash)
TMP_266(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_265)
TMP_267(address) = SOLIDITY_CALL ecrecover(\
bytes32,uint8,bytes32,bytes32)(TMP_266,v,r,s)
TMP_268(bool) = TMP_267 == msg.sender
TMP_269(bool) = REF_158 || TMP_268
TMP_270(None) = \
SOLIDITY_CALL require(bool)(TMP_269)",
		node_source_code_lines="[475]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	317 -> 318	[key=0,
		edge_type=next,
		label=Next];
	319	[contract_name=BitpayerDEX,
		function_fullname="cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
orderFills[msg.sender][hash] = amountGet

IRs:
REF_160(mapping(bytes32 => uint256)) -> orderFills[\
msg.sender]
REF_161(uint256) -> REF_160[hash]
REF_161 (->orderFills) := amountGet(uint256)",
		node_expression="orderFills[msg.sender][hash] = amountGet",
		node_info_vulnerabilities=None,
		node_irs="REF_160(mapping(bytes32 => uint256)) -> orderFills[msg.sender]
REF_161(uint256) -> REF_160[hash]
REF_161 (->orderFills) := amountGet(\
uint256)",
		node_source_code_lines="[476]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	318 -> 319	[key=0,
		edge_type=next,
		label=Next];
	320	[contract_name=BitpayerDEX,
		function_fullname="cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
Cancel(now,tokenGet,amountGet,tokenGive,amountGive,expires,nonce,msg.sender,v,r,s)

IRs:
Emit \
Cancel(now.tokenGet.amountGet.tokenGive.amountGive.expires.nonce.msg.sender.v.r.s)",
		node_expression="Cancel(now,tokenGet,amountGet,tokenGive,amountGive,expires,nonce,msg.sender,v,r,s)",
		node_info_vulnerabilities=None,
		node_irs="Emit Cancel(now.tokenGet.amountGet.tokenGive.amountGive.expires.nonce.msg.sender.v.r.s)",
		node_source_code_lines="[477]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	319 -> 320	[key=0,
		edge_type=next,
		label=Next];
	321	[contract_name=BitpayerDEX,
		function_fullname="cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32)",
		label="buggy_35.sol_BitpayerDEX_cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32)",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[472, 473, 474, 475, 476, 477, 478]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	321 -> 315	[key=0,
		edge_type=next,
		label=Next];
	322	[contract_name=BitpayerDEX,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
tradingFee = 50

IRs:
tradingFee(uint256) := 50(uint256)",
		node_expression="tradingFee = 50",
		node_info_vulnerabilities=None,
		node_irs="tradingFee(uint256) := 50(uint256)",
		node_source_code_lines="[212]",
		node_type=OTHER_ENTRYPOINT,
		source_file="buggy_35.sol"];
	323	[contract_name=BitpayerDEX,
		function_fullname="slitherConstructorVariables()",
		label="buggy_35.sol_BitpayerDEX_slitherConstructorVariables()",
		node_expression=None,
		node_info_vulnerabilities="[{'lines': [136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 155, 156, 157, 158, 169, 170, 171, 172, 181, 182, 183, 184, 198, 199, \
200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 234, \
235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 264, 265, 266, 267, 280, 281, 282, 283, \
293, 294, 295, 296, 308, 309, 310, 311, 317, 318, 319, 320, 326, 327, 328, 329, 342, 343, 344, 350, 351, 352, 361, 362, 363, 364, \
373, 374, 375, 385, 386, 387, 388, 393, 394, 395, 396, 403, 404, 405, 406, 432, 433, 434, 435, 445, 446, 447, 467, 468, 469, 470], '\
category': 'access_control'}]",
		node_irs=None,
		node_source_code_lines="[196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, \
222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, \
248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, \
274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, \
300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, \
326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, \
352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, \
378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, \
404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, \
430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, \
456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	323 -> 322	[key=0,
		edge_type=next,
		label=Next];
	324	[contract_name=BitpayerDEX,
		function_fullname="onlyOwner()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[160, 161, 162, 163]",
		node_type=ENTRY_POINT,
		source_file="buggy_35.sol"];
	325	[contract_name=BitpayerDEX,
		function_fullname="onlyOwner()",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_272(bool) = msg.sender == owner
TMP_273(None) = \
SOLIDITY_CALL require(bool)(TMP_272)",
		node_expression="require(bool)(msg.sender == owner)",
		node_info_vulnerabilities=None,
		node_irs="TMP_272(bool) = msg.sender == owner
TMP_273(None) = SOLIDITY_CALL require(bool)(TMP_272)",
		node_source_code_lines="[161]",
		node_type=EXPRESSION,
		source_file="buggy_35.sol"];
	324 -> 325	[key=0,
		edge_type=next,
		label=Next];
	326	[contract_name=BitpayerDEX,
		function_fullname="onlyOwner()",
		label="Node Type: _
",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[162]",
		node_type=_,
		source_file="buggy_35.sol"];
	325 -> 326	[key=0,
		edge_type=next,
		label=Next];
	327	[contract_name=BitpayerDEX,
		function_fullname="onlyOwner()",
		label="buggy_35.sol_BitpayerDEX_onlyOwner()",
		node_expression=None,
		node_info_vulnerabilities=None,
		node_irs=None,
		node_source_code_lines="[160, 161, 162, 163]",
		node_type=FUNCTION_NAME,
		source_file="buggy_35.sol"];
	327 -> 324	[key=0,
		edge_type=next,
		label=Next];
}
