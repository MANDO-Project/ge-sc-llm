digraph  {
13 [label="2_ function sendto_txorigin21(address payable receiver, uint amount,address owner_txorigin21) public {\n	require (tx.origin == owner_txorigin21);\n	receiver.transfer(amount);\n}\n13-function_definition-3-6", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=function_definition];
29 [label="3_ require (tx.origin == owner_txorigin21);\n29-expression_statement-4-4", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=expression_statement];
38 [label="4_ receiver.transfer(amount);\n38-expression_statement-5-5", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=expression_statement];
45 [label="6_ address public owner;\n45-new_variable-7-7", method="", type_label=new_variable];
50 [label="7_ function bug_txorigin40(address owner_txorigin40) public{\n        require(tx.origin == owner_txorigin40);\n    }\n50-function_definition-8-10", method="bug_txorigin40(address owner_txorigin40)", type_label=function_definition];
58 [label="8_ require(tx.origin == owner_txorigin40);\n58-expression_statement-9-9", method="bug_txorigin40(address owner_txorigin40)", type_label=expression_statement];
79 [label="12_ owner = msg.sender;\n79-expression_statement-13-13", method="", type_label=expression_statement];
85 [label="14_ function sendto_txorigin17(address payable receiver, uint amount,address owner_txorigin17) public {\n	require (tx.origin == owner_txorigin17);\n	receiver.transfer(amount);\n}\n85-function_definition-15-18", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=function_definition];
101 [label="15_ require (tx.origin == owner_txorigin17);\n101-expression_statement-16-16", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=expression_statement];
110 [label="16_ receiver.transfer(amount);\n110-expression_statement-17-17", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=expression_statement];
117 [label="18_ modifier onlyOwner() {\n        require(msg.sender == owner, \"only the owner can call this\");\n        _;\n    }\n117-expression_statement-19-22", method="", type_label=expression_statement];
120 [label="19_ require(msg.sender == owner, \"only the owner can call this\");\n120-expression_statement-20-20", method="", type_label=expression_statement];
132 [label="20_ _;\n132-expression_statement-21-21", method="", type_label=expression_statement];
134 [label="22_ function changeOwner(address _newOwner) external onlyOwner {\n        owner = _newOwner;\n        emit OwnerChanged(msg.sender, _newOwner);\n    }\n134-function_definition-23-26", method="changeOwner(address _newOwner)", type_label=function_definition];
141 [label="22_ onlyOwner\n141-expression_statement-23-23", method="changeOwner(address _newOwner)", type_label=expression_statement];
144 [label="23_ owner = _newOwner;\n144-expression_statement-24-24", method="changeOwner(address _newOwner)", type_label=expression_statement];
156 [label="26_ function sendto_txorigin37(address payable receiver, uint amount,address owner_txorigin37) public {\n	require (tx.origin == owner_txorigin37);\n	receiver.transfer(amount);\n}\n156-function_definition-27-30", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=function_definition];
172 [label="27_ require (tx.origin == owner_txorigin37);\n172-expression_statement-28-28", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=expression_statement];
181 [label="28_ receiver.transfer(amount);\n181-expression_statement-29-29", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=expression_statement];
194 [label="32_ function withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10) public {\n        require(tx.origin == owner_txorigin10);\n        _recipient.transfer(address(this).balance);\n    }\n194-function_definition-33-36", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=function_definition];
206 [label="33_ require(tx.origin == owner_txorigin10);\n206-expression_statement-34-34", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=expression_statement];
215 [label="34_ _recipient.transfer(address(this).balance);\n215-expression_statement-35-35", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=expression_statement];
226 [label="36_ bool public isActive = true;\n226-new_variable-37-37", method="", type_label=new_variable];
233 [label="37_ function sendto_txorigin33(address payable receiver, uint amount,address owner_txorigin33) public {\n	require (tx.origin == owner_txorigin33);\n	receiver.transfer(amount);\n}\n233-function_definition-38-41", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=function_definition];
249 [label="38_ require (tx.origin == owner_txorigin33);\n249-expression_statement-39-39", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
258 [label="39_ receiver.transfer(amount);\n258-expression_statement-40-40", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
271 [label="42_ modifier onlyActive() {\n        require(isActive, \"contract is stopped\");\n        _;\n    }\n271-expression_statement-43-46", method="", type_label=expression_statement];
274 [label="43_ require(isActive, \"contract is stopped\");\n274-expression_statement-44-44", method="", type_label=expression_statement];
282 [label="44_ _;\n282-expression_statement-45-45", method="", type_label=expression_statement];
284 [label="46_ function setIsActive(bool _isActive) external onlyOwner {\n        if (_isActive == isActive) return;\n        isActive = _isActive;\n        emit IsActiveChanged(_isActive);\n    }\n284-function_definition-47-51", method="setIsActive(bool _isActive)", type_label=function_definition];
291 [label="46_ onlyOwner\n291-expression_statement-47-47", method="setIsActive(bool _isActive)", type_label=expression_statement];
294 [label="47_ if__isActive == isActive\n294-if-48-48", method="setIsActive(bool _isActive)", type_label=if];
2010 [label="47_ end_if", method="setIsActive(bool _isActive)", type_label=end_if];
298 [label="47_ return;\n298-return-48-48", method="setIsActive(bool _isActive)", type_label=return];
299 [label="48_ isActive = _isActive;\n299-expression_statement-49-49", method="setIsActive(bool _isActive)", type_label=expression_statement];
307 [label="51_ function transferTo_txorigin3(address to, uint amount,address owner_txorigin3) public {\n  require(tx.origin == owner_txorigin3);\n  to.call.value(amount);\n}\n307-function_definition-52-55", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=function_definition];
323 [label="52_ require(tx.origin == owner_txorigin3);\n323-expression_statement-53-53", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=expression_statement];
332 [label="53_ to.call.value(amount);\n332-expression_statement-54-54", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=expression_statement];
344 [label="57_ uint16 public ASSET_TYPE;\n344-new_variable-58-58", method="", type_label=new_variable];
349 [label="58_ function sendFundsToSwap(uint256 _amount)\n        public   returns(bool success);\n349-function_definition-59-60", method="sendFundsToSwap(uint256 _amount)", type_label=function_definition];
364 [label="62_ uint16 public ASSET_TYPE;\n364-new_variable-63-63", method="", type_label=new_variable];
369 [label="63_ function release(\n        address _pool,\n        address payable _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    )\n        external;\n369-function_definition-64-71", method="release(address _pool,address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
392 [label="71_ function sendto_txorigin9(address payable receiver, uint amount,address owner_txorigin9) public {\n	require (tx.origin == owner_txorigin9);\n	receiver.transfer(amount);\n}\n392-function_definition-72-75", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=function_definition];
408 [label="72_ require (tx.origin == owner_txorigin9);\n408-expression_statement-73-73", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
417 [label="73_ receiver.transfer(amount);\n417-expression_statement-74-74", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
424 [label="75_ function returnFunds(\n        address payable _pool,\n        address _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    )\n        external;\n424-function_definition-76-83", method="returnFunds(address payable _pool,address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
447 [label="83_ function sendto_txorigin25(address payable receiver, uint amount,address owner_txorigin25) public {\n	require (tx.origin == owner_txorigin25);\n	receiver.transfer(amount);\n}\n447-function_definition-84-87", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=function_definition];
463 [label="84_ require (tx.origin == owner_txorigin25);\n463-expression_statement-85-85", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
472 [label="85_ receiver.transfer(amount);\n472-expression_statement-86-86", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
491 [label="89_ uint256 constant private MAX_SWAP_AMOUNT_LIMIT = 1 << 240;\n491-new_variable-90-90", method="", type_label=new_variable];
499 [label="90_ uint16 public ASSET_TYPE;\n499-new_variable-91-91", method="", type_label=new_variable];
504 [label="91_ function withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22) public {\n        require(tx.origin == owner_txorigin22);\n        _recipient.transfer(address(this).balance);\n    }\n504-function_definition-92-95", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=function_definition];
516 [label="92_ require(tx.origin == owner_txorigin22);\n516-expression_statement-93-93", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=expression_statement];
525 [label="93_ _recipient.transfer(address(this).balance);\n525-expression_statement-94-94", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=expression_statement];
536 [label="95_ address payable public swapsContract;\n536-new_variable-96-96", method="", type_label=new_variable];
541 [label="96_ function bug_txorigin12(address owner_txorigin12) public{\n        require(tx.origin == owner_txorigin12);\n    }\n541-function_definition-97-99", method="bug_txorigin12(address owner_txorigin12)", type_label=function_definition];
549 [label="97_ require(tx.origin == owner_txorigin12);\n549-expression_statement-98-98", method="bug_txorigin12(address owner_txorigin12)", type_label=expression_statement];
558 [label="99_ uint256 public minSwapAmount;\n558-new_variable-100-100", method="", type_label=new_variable];
563 [label="100_ function transferTo_txorigin11(address to, uint amount,address owner_txorigin11) public {\n  require(tx.origin == owner_txorigin11);\n  to.call.value(amount);\n}\n563-function_definition-101-104", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=function_definition];
579 [label="101_ require(tx.origin == owner_txorigin11);\n579-expression_statement-102-102", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=expression_statement];
588 [label="102_ to.call.value(amount);\n588-expression_statement-103-103", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=expression_statement];
597 [label="104_ uint256 public maxSwapAmount;\n597-new_variable-105-105", method="", type_label=new_variable];
602 [label="105_ function sendto_txorigin1(address payable receiver, uint amount,address owner_txorigin1) public {\n	require (tx.origin == owner_txorigin1);\n	receiver.transfer(amount);\n}\n602-function_definition-106-109", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=function_definition];
618 [label="106_ require (tx.origin == owner_txorigin1);\n618-expression_statement-107-107", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=expression_statement];
627 [label="107_ receiver.transfer(amount);\n627-expression_statement-108-108", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=expression_statement];
634 [label="109_ bytes32 public paymentDetailsHash;\n634-new_variable-110-110", method="", type_label=new_variable];
639 [label="110_ function transferTo_txorigin27(address to, uint amount,address owner_txorigin27) public {\n  require(tx.origin == owner_txorigin27);\n  to.call.value(amount);\n}\n639-function_definition-111-114", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=function_definition];
655 [label="111_ require(tx.origin == owner_txorigin27);\n655-expression_statement-112-112", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
664 [label="112_ to.call.value(amount);\n664-expression_statement-113-113", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
683 [label="115_ function transferTo_txorigin31(address to, uint amount,address owner_txorigin31) public {\n  require(tx.origin == owner_txorigin31);\n  to.call.value(amount);\n}\n683-function_definition-116-119", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=function_definition];
699 [label="116_ require(tx.origin == owner_txorigin31);\n699-expression_statement-117-117", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
708 [label="117_ to.call.value(amount);\n708-expression_statement-118-118", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
727 [label="120_ function sendto_txorigin13(address payable receiver, uint amount,address owner_txorigin13) public {\n	require (tx.origin == owner_txorigin13);\n	receiver.transfer(amount);\n}\n727-function_definition-121-124", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=function_definition];
743 [label="121_ require (tx.origin == owner_txorigin13);\n743-expression_statement-122-122", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
752 [label="122_ receiver.transfer(amount);\n752-expression_statement-123-123", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
790 [label="133_ validateLimits(_minSwapAmount, _maxSwapAmount)\n790-expression_statement-134-134", method="", type_label=expression_statement];
796 [label="134_ validateSwapsContract(_swapsContract, _assetType)\n796-expression_statement-135-135", method="", type_label=expression_statement];
803 [label="136_ swapsContract = _swapsContract;\n803-expression_statement-137-137", method="", type_label=expression_statement];
807 [label="137_ paymentDetailsHash = _paymentDetailsHash;\n807-expression_statement-138-138", method="", type_label=expression_statement];
811 [label="138_ minSwapAmount = _minSwapAmount;\n811-expression_statement-139-139", method="", type_label=expression_statement];
815 [label="139_ maxSwapAmount = _maxSwapAmount;\n815-expression_statement-140-140", method="", type_label=expression_statement];
819 [label="140_ ASSET_TYPE = _assetType;\n819-expression_statement-141-141", method="", type_label=expression_statement];
823 [label="142_ function transferTo_txorigin19(address to, uint amount,address owner_txorigin19) public {\n  require(tx.origin == owner_txorigin19);\n  to.call.value(amount);\n}\n823-function_definition-143-146", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=function_definition];
839 [label="143_ require(tx.origin == owner_txorigin19);\n839-expression_statement-144-144", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
848 [label="144_ to.call.value(amount);\n848-expression_statement-145-145", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
857 [label="146_ function availableFunds() public view returns (uint256);\n857-function_definition-147-147", method="availableFunds()", type_label=function_definition];
865 [label="147_ function withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26) public {\n        require(tx.origin == owner_txorigin26);\n        _recipient.transfer(address(this).balance);\n    }\n865-function_definition-148-151", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=function_definition];
877 [label="148_ require(tx.origin == owner_txorigin26);\n877-expression_statement-149-149", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
886 [label="149_ _recipient.transfer(address(this).balance);\n886-expression_statement-150-150", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
897 [label="151_ function withdrawFunds(address payable _to, uint256 _amount)\n        public   returns (bool success);\n897-function_definition-152-153", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=function_definition];
913 [label="153_ function bug_txorigin20(address owner_txorigin20) public{\n        require(tx.origin == owner_txorigin20);\n    }\n913-function_definition-154-156", method="bug_txorigin20(address owner_txorigin20)", type_label=function_definition];
921 [label="154_ require(tx.origin == owner_txorigin20);\n921-expression_statement-155-155", method="bug_txorigin20(address owner_txorigin20)", type_label=expression_statement];
930 [label="156_ function withdrawAllFunds(address payable _to) public onlyOwner returns (bool success) {\n        return withdrawFunds(_to, availableFunds());\n    }\n930-function_definition-157-159", method="withdrawAllFunds(address payable _to)", type_label=function_definition];
937 [label="156_ onlyOwner\n937-expression_statement-157-157", method="withdrawAllFunds(address payable _to)", type_label=expression_statement];
945 [label="157_ return withdrawFunds(_to, availableFunds());\n945-return-158-158", method="withdrawAllFunds(address payable _to)", type_label=return];
953 [label="159_ function bug_txorigin32(  address owner_txorigin32) public{\n        require(tx.origin == owner_txorigin32);\n    }\n953-function_definition-160-162", method="bug_txorigin32(address owner_txorigin32)", type_label=function_definition];
961 [label="160_ require(tx.origin == owner_txorigin32);\n961-expression_statement-161-161", method="bug_txorigin32(address owner_txorigin32)", type_label=expression_statement];
970 [label="162_ function setLimits(\n        uint256 _minAmount,\n        uint256 _maxAmount\n    ) public onlyOwner validateLimits(_minAmount, _maxAmount) {\n        minSwapAmount = _minAmount;\n        maxSwapAmount = _maxAmount;\n        emit LimitsChanged(_minAmount, _maxAmount);\n    }\n970-function_definition-163-170", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=function_definition];
981 [label="165_ onlyOwner\n981-expression_statement-166-166", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
983 [label="165_ validateLimits(_minAmount, _maxAmount)\n983-expression_statement-166-166", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
990 [label="166_ minSwapAmount = _minAmount;\n990-expression_statement-167-167", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
994 [label="167_ maxSwapAmount = _maxAmount;\n994-expression_statement-168-168", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
1004 [label="170_ function withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38) public {\n        require(tx.origin == owner_txorigin38);\n        _recipient.transfer(address(this).balance);\n    }\n1004-function_definition-171-174", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=function_definition];
1016 [label="171_ require(tx.origin == owner_txorigin38);\n1016-expression_statement-172-172", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
1025 [label="172_ _recipient.transfer(address(this).balance);\n1025-expression_statement-173-173", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
1036 [label="174_ function setSwapsContract(\n        address payable _swapsContract\n    ) public onlyOwner validateSwapsContract(_swapsContract, ASSET_TYPE) {\n        address oldSwapsContract = swapsContract;\n        swapsContract = _swapsContract;\n        emit SwapsContractChanged(oldSwapsContract, _swapsContract);\n    }\n1036-function_definition-175-181", method="setSwapsContract(address payable _swapsContract)", type_label=function_definition];
1043 [label="176_ onlyOwner\n1043-expression_statement-177-177", method="setSwapsContract(address payable _swapsContract)", type_label=expression_statement];
1045 [label="176_ validateSwapsContract(_swapsContract, ASSET_TYPE)\n1045-expression_statement-177-177", method="setSwapsContract(address payable _swapsContract)", type_label=expression_statement];
1052 [label="177_ address oldSwapsContract = swapsContract;\n1052-new_variable-178-178", method="setSwapsContract(address payable _swapsContract)", type_label=new_variable];
1058 [label="178_ swapsContract = _swapsContract;\n1058-expression_statement-179-179", method="setSwapsContract(address payable _swapsContract)", type_label=expression_statement];
1068 [label="181_ function bug_txorigin4(address owner_txorigin4) public{\n        require(tx.origin == owner_txorigin4);\n    }\n1068-function_definition-182-184", method="bug_txorigin4(address owner_txorigin4)", type_label=function_definition];
1076 [label="182_ require(tx.origin == owner_txorigin4);\n1076-expression_statement-183-183", method="bug_txorigin4(address owner_txorigin4)", type_label=expression_statement];
1085 [label="184_ function sendFundsToSwap(uint256 _amount)\n        public   returns(bool success);\n1085-function_definition-185-186", method="sendFundsToSwap(uint256 _amount)", type_label=function_definition];
1097 [label="186_ function releaseSwap(\n        address payable _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    ) external onlyOwner {\n        RampInstantEscrowsPoolInterface(swapsContract).release(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n    }\n1097-function_definition-187-200", method="releaseSwap(address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
1116 [label="191_ onlyOwner\n1116-expression_statement-192-192", method="releaseSwap(address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1119 [label="192_ RampInstantEscrowsPoolInterface(swapsContract).release(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n1119-expression_statement-193-199", method="releaseSwap(address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1139 [label="200_ function transferTo_txorigin7(address to, uint amount,address owner_txorigin7) public {\n  require(tx.origin == owner_txorigin7);\n  to.call.value(amount);\n}\n1139-function_definition-201-204", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=function_definition];
1155 [label="201_ require(tx.origin == owner_txorigin7);\n1155-expression_statement-202-202", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
1164 [label="202_ to.call.value(amount);\n1164-expression_statement-203-203", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
1173 [label="204_ function returnSwap(\n        address _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    ) external onlyOwner {\n        RampInstantEscrowsPoolInterface(swapsContract).returnFunds(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n    }\n1173-function_definition-205-218", method="returnSwap(address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
1192 [label="209_ onlyOwner\n1192-expression_statement-210-210", method="returnSwap(address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1195 [label="210_ RampInstantEscrowsPoolInterface(swapsContract).returnFunds(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n1195-expression_statement-211-217", method="returnSwap(address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1215 [label="218_ function transferTo_txorigin23(address to, uint amount,address owner_txorigin23) public {\n  require(tx.origin == owner_txorigin23);\n  to.call.value(amount);\n}\n1215-function_definition-219-222", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=function_definition];
1231 [label="219_ require(tx.origin == owner_txorigin23);\n1231-expression_statement-220-220", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
1240 [label="220_ to.call.value(amount);\n1240-expression_statement-221-221", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
1257 [label="225_ function withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14) public {\n        require(tx.origin == owner_txorigin14);\n        _recipient.transfer(address(this).balance);\n    }\n1257-function_definition-226-229", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=function_definition];
1269 [label="226_ require(tx.origin == owner_txorigin14);\n1269-expression_statement-227-227", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
1278 [label="227_ _recipient.transfer(address(this).balance);\n1278-expression_statement-228-228", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
1289 [label="229_ modifier onlySwapsContract() {\n        require(msg.sender == swapsContract, \"only the swaps contract can call this\");\n        _;\n    }\n1289-expression_statement-230-233", method="", type_label=expression_statement];
1292 [label="230_ require(msg.sender == swapsContract, \"only the swaps contract can call this\");\n1292-expression_statement-231-231", method="", type_label=expression_statement];
1304 [label="231_ _;\n1304-expression_statement-232-232", method="", type_label=expression_statement];
1306 [label="233_ modifier isWithinLimits(uint256 _amount) {\n        require(_amount >= minSwapAmount && _amount <= maxSwapAmount, \"amount outside swap limits\");\n        _;\n    }\n1306-expression_statement-234-237", method="", type_label=expression_statement];
1313 [label="234_ require(_amount >= minSwapAmount && _amount <= maxSwapAmount, \"amount outside swap limits\");\n1313-expression_statement-235-235", method="", type_label=expression_statement];
1327 [label="235_ _;\n1327-expression_statement-236-236", method="", type_label=expression_statement];
1329 [label="237_ modifier validateLimits(uint256 _minAmount, uint256 _maxAmount) {\n        require(_minAmount <= _maxAmount, \"min limit over max limit\");\n        require(_maxAmount <= MAX_SWAP_AMOUNT_LIMIT, \"maxAmount too high\");\n        _;\n    }\n1329-expression_statement-238-242", method="", type_label=expression_statement];
1340 [label="238_ require(_minAmount <= _maxAmount, \"min limit over max limit\");\n1340-expression_statement-239-239", method="", type_label=expression_statement];
1350 [label="239_ require(_maxAmount <= MAX_SWAP_AMOUNT_LIMIT, \"maxAmount too high\");\n1350-expression_statement-240-240", method="", type_label=expression_statement];
1360 [label="240_ _;\n1360-expression_statement-241-241", method="", type_label=expression_statement];
1362 [label="242_ modifier validateSwapsContract(address payable _swapsContract, uint16 _assetType) {\n        require(_swapsContract != address(0), \"null swaps contract address\");\n        require(\n            RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE() == _assetType,\n            \"pool asset type doesn't match swap contract\"\n        );\n        _;\n    }\n1362-expression_statement-243-250", method="", type_label=expression_statement];
1373 [label="243_ require(_swapsContract != address(0), \"null swaps contract address\");\n1373-expression_statement-244-244", method="", type_label=expression_statement];
1385 [label="244_ require(\n            RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE() == _assetType,\n            \"pool asset type doesn't match swap contract\"\n        );\n1385-expression_statement-245-248", method="", type_label=expression_statement];
1401 [label="248_ _;\n1401-expression_statement-249-249", method="", type_label=expression_statement];
1409 [label="252_ function withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2) public {\n        require(tx.origin == owner_txorigin2);\n        _recipient.transfer(address(this).balance);\n    }\n1409-function_definition-253-256", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=function_definition];
1421 [label="253_ require(tx.origin == owner_txorigin2);\n1421-expression_statement-254-254", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=expression_statement];
1430 [label="254_ _recipient.transfer(address(this).balance);\n1430-expression_statement-255-255", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=expression_statement];
1441 [label="256_ uint16 internal constant ETH_TYPE_ID = 1;\n1441-new_variable-257-257", method="", type_label=new_variable];
1464 [label="264_ RampInstantPool(\n            _swapsContract, _minSwapAmount, _maxSwapAmount, _paymentDetailsHash, ETH_TYPE_ID\n        )\n1464-expression_statement-265-267", method="", type_label=expression_statement];
1477 [label="268_ function withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30) public {\n        require(tx.origin == owner_txorigin30);\n        _recipient.transfer(address(this).balance);\n    }\n1477-function_definition-269-272", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=function_definition];
1489 [label="269_ require(tx.origin == owner_txorigin30);\n1489-expression_statement-270-270", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
1498 [label="270_ _recipient.transfer(address(this).balance);\n1498-expression_statement-271-271", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
1509 [label="272_ function availableFunds() public view returns(uint256) {\n        return address(this).balance;\n    }\n1509-function_definition-273-275", method="availableFunds()", type_label=function_definition];
1518 [label="273_ return address(this).balance;\n1518-return-274-274", method="availableFunds()", type_label=return];
1524 [label="275_ function bug_txorigin8(address owner_txorigin8) public{\n        require(tx.origin == owner_txorigin8);\n    }\n1524-function_definition-276-278", method="bug_txorigin8(address owner_txorigin8)", type_label=function_definition];
1532 [label="276_ require(tx.origin == owner_txorigin8);\n1532-expression_statement-277-277", method="bug_txorigin8(address owner_txorigin8)", type_label=expression_statement];
1541 [label="278_ function withdrawFunds(\n        address payable _to,\n        uint256 _amount\n    ) public onlyOwner returns (bool success) {\n        _to.transfer(_amount);   \n        return true;\n    }\n1541-function_definition-279-285", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=function_definition];
1552 [label="281_ onlyOwner\n1552-expression_statement-282-282", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=expression_statement];
1560 [label="282_ _to.transfer(_amount);\n1560-expression_statement-283-283", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=expression_statement];
1567 [label="283_ return true;\n1567-return-284-284", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=return];
1570 [label="285_ function transferTo_txorigin39(address to, uint amount,address owner_txorigin39) public {\n  require(tx.origin == owner_txorigin39);\n  to.call.value(amount);\n}\n1570-function_definition-286-289", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=function_definition];
1586 [label="286_ require(tx.origin == owner_txorigin39);\n1586-expression_statement-287-287", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
1595 [label="287_ to.call.value(amount);\n1595-expression_statement-288-288", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
1604 [label="289_ function sendFundsToSwap(\n        uint256 _amount\n    ) public onlyActive onlySwapsContract isWithinLimits(_amount) returns(bool success) {\n        swapsContract.transfer(_amount);   \n        return true;\n    }\n1604-function_definition-290-295", method="sendFundsToSwap(uint256 _amount)", type_label=function_definition];
1611 [label="291_ onlyActive\n1611-expression_statement-292-292", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1613 [label="291_ onlySwapsContract\n1613-expression_statement-292-292", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1615 [label="291_ isWithinLimits(_amount)\n1615-expression_statement-292-292", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1625 [label="292_ swapsContract.transfer(_amount);\n1625-expression_statement-293-293", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1632 [label="293_ return true;\n1632-return-294-294", method="sendFundsToSwap(uint256 _amount)", type_label=return];
1635 [label="295_ function bug_txorigin36(  address owner_txorigin36) public{\n        require(tx.origin == owner_txorigin36);\n    }\n1635-function_definition-296-298", method="bug_txorigin36(address owner_txorigin36)", type_label=function_definition];
1643 [label="296_ require(tx.origin == owner_txorigin36);\n1643-expression_statement-297-297", method="bug_txorigin36(address owner_txorigin36)", type_label=expression_statement];
1656 [label="299_ require(msg.data.length == 0, \"invalid pool function called\");\n1656-expression_statement-300-300", method="", type_label=expression_statement];
1670 [label="300_ if_msg.sender != swapsContract\n1670-if-301-303", method="", type_label=if];
3386 [label="300_ end_if", method="", type_label=end_if];
1687 [label="304_ function transferTo_txorigin35(address to, uint amount,address owner_txorigin35) public {\n  require(tx.origin == owner_txorigin35);\n  to.call.value(amount);\n}\n1687-function_definition-305-308", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=function_definition];
1703 [label="305_ require(tx.origin == owner_txorigin35);\n1703-expression_statement-306-306", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
1712 [label="306_ to.call.value(amount);\n1712-expression_statement-307-307", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
50 -> 58  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
101 -> 110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
156 -> 172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
172 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
194 -> 206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
274 -> 282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
284 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 298  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
294 -> 2010  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2010 -> 299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 2010  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
298 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
307 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
323 -> 332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
392 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
463 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
491 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
504 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
516 -> 525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
618 -> 627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
655 -> 664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
683 -> 699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
699 -> 708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
743 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
790 -> 796  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
811 -> 815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
823 -> 839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
839 -> 848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
865 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
913 -> 921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
930 -> 945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
945 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
953 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
970 -> 990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
981 -> 983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
990 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 1016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1016 -> 1025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1036 -> 1052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1043 -> 1045  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1052 -> 1058  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1097 -> 1119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1139 -> 1155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1155 -> 1164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1173 -> 1195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1215 -> 1231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1231 -> 1240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1257 -> 1269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1269 -> 1278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1289 -> 1306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1292 -> 1304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1306 -> 1329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1313 -> 1327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1329 -> 1362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1340 -> 1350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1350 -> 1360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1373 -> 1385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1385 -> 1401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1409 -> 1421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1421 -> 1430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1477 -> 1489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1489 -> 1498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1509 -> 1518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1518 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1524 -> 1532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1541 -> 1560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1560 -> 1567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1567 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1570 -> 1586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1586 -> 1595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1604 -> 1625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1611 -> 1613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1613 -> 1615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1625 -> 1632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1632 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1635 -> 1643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1656 -> 1670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1670 -> 3386  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1687 -> 1703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1703 -> 1712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
