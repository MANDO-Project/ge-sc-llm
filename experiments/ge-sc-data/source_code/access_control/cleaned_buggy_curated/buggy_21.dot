digraph  {
13 [label="2_ function transfer(address to, uint256 value) public returns (bool success);\n13-function_definition-3-3", method="transfer(address to,uint256 value)", type_label=function_definition];
29 [label="3_ function bug_txorigin20(address owner_txorigin20) public{\n        require(tx.origin == owner_txorigin20);\n    }\n29-function_definition-4-6", method="bug_txorigin20(address owner_txorigin20)", type_label=function_definition];
37 [label="4_ require(tx.origin == owner_txorigin20);\n37-expression_statement-5-5", method="bug_txorigin20(address owner_txorigin20)", type_label=expression_statement];
46 [label="6_ function transferFrom(address from, address to, uint256 value) public returns (bool success);\n46-function_definition-7-7", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
66 [label="7_ function bug_txorigin32(  address owner_txorigin32) public{\n        require(tx.origin == owner_txorigin32);\n    }\n66-function_definition-8-10", method="bug_txorigin32(address owner_txorigin32)", type_label=function_definition];
74 [label="8_ require(tx.origin == owner_txorigin32);\n74-expression_statement-9-9", method="bug_txorigin32(address owner_txorigin32)", type_label=expression_statement];
83 [label="10_ function balanceOf(address account) external view returns(uint256);\n83-function_definition-11-11", method="balanceOf(address account)", type_label=function_definition];
95 [label="11_ function withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38) public {\n        require(tx.origin == owner_txorigin38);\n        _recipient.transfer(address(this).balance);\n    }\n95-function_definition-12-15", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=function_definition];
107 [label="12_ require(tx.origin == owner_txorigin38);\n107-expression_statement-13-13", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
116 [label="13_ _recipient.transfer(address(this).balance);\n116-expression_statement-14-14", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
127 [label="15_ function allowance(address _owner, address _spender)external view returns(uint256);\n127-function_definition-16-16", method="allowance(address _owner,address _spender)", type_label=function_definition];
143 [label="16_ function bug_txorigin4(address owner_txorigin4) public{\n        require(tx.origin == owner_txorigin4);\n    }\n143-function_definition-17-19", method="bug_txorigin4(address owner_txorigin4)", type_label=function_definition];
151 [label="17_ require(tx.origin == owner_txorigin4);\n151-expression_statement-18-18", method="bug_txorigin4(address owner_txorigin4)", type_label=expression_statement];
163 [label="21_ function mul(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        if (a == 0) {\n        return 0;}\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n163-function_definition-22-29", method="mul(uint256 a,uint256 b)", type_label=function_definition];
180 [label="23_ if_a == 0\n180-if-24-25", method="mul(uint256 a,uint256 b)", type_label=if];
3392 [label="23_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
185 [label="24_ return 0;\n185-return-25-25", method="mul(uint256 a,uint256 b)", type_label=return];
187 [label="25_ uint256 c = a * b;\n187-new_variable-26-26", method="mul(uint256 a,uint256 b)", type_label=new_variable];
195 [label="26_ assert(c / a == b);\n195-expression_statement-27-27", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
204 [label="27_ return c;\n204-return-28-28", method="mul(uint256 a,uint256 b)", type_label=return];
206 [label="29_ function div(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        uint256 c = a / b;\n        return c;\n    }\n206-function_definition-30-34", method="div(uint256 a,uint256 b)", type_label=function_definition];
223 [label="31_ uint256 c = a / b;\n223-new_variable-32-32", method="div(uint256 a,uint256 b)", type_label=new_variable];
231 [label="32_ return c;\n231-return-33-33", method="div(uint256 a,uint256 b)", type_label=return];
233 [label="34_ function sub(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        assert(b <= a);\n        return a - b;\n    }\n233-function_definition-35-39", method="sub(uint256 a,uint256 b)", type_label=function_definition];
250 [label="36_ assert(b <= a);\n250-expression_statement-37-37", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
257 [label="37_ return a - b;\n257-return-38-38", method="sub(uint256 a,uint256 b)", type_label=return];
261 [label="39_ function add(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n261-function_definition-40-45", method="add(uint256 a,uint256 b)", type_label=function_definition];
278 [label="41_ uint256 c = a + b;\n278-new_variable-42-42", method="add(uint256 a,uint256 b)", type_label=new_variable];
286 [label="42_ assert(c >= a);\n286-expression_statement-43-43", method="add(uint256 a,uint256 b)", type_label=expression_statement];
293 [label="43_ return c;\n293-return-44-44", method="add(uint256 a,uint256 b)", type_label=return];
303 [label="48_ function sendto_txorigin13(address payable receiver, uint amount,address owner_txorigin13) public {\n	require (tx.origin == owner_txorigin13);\n	receiver.transfer(amount);\n}\n303-function_definition-49-52", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=function_definition];
319 [label="49_ require (tx.origin == owner_txorigin13);\n319-expression_statement-50-50", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
328 [label="50_ receiver.transfer(amount);\n328-expression_statement-51-51", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
353 [label="53_ function transferTo_txorigin11(address to, uint amount,address owner_txorigin11) public {\n  require(tx.origin == owner_txorigin11);\n  to.call.value(amount);\n}\n353-function_definition-54-57", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=function_definition];
369 [label="54_ require(tx.origin == owner_txorigin11);\n369-expression_statement-55-55", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=expression_statement];
378 [label="55_ to.call.value(amount);\n378-expression_statement-56-56", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=expression_statement];
387 [label="57_ address payable admin;\n387-new_variable-58-58", method="", type_label=new_variable];
391 [label="58_ function sendto_txorigin1(address payable receiver, uint amount,address owner_txorigin1) public {\n	require (tx.origin == owner_txorigin1);\n	receiver.transfer(amount);\n}\n391-function_definition-59-62", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=function_definition];
407 [label="59_ require (tx.origin == owner_txorigin1);\n407-expression_statement-60-60", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=expression_statement];
416 [label="60_ receiver.transfer(amount);\n416-expression_statement-61-61", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=expression_statement];
423 [label="62_ address public feeAddress;\n423-new_variable-63-63", method="", type_label=new_variable];
428 [label="63_ function withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2) public {\n        require(tx.origin == owner_txorigin2);\n        _recipient.transfer(address(this).balance);\n    }\n428-function_definition-64-67", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=function_definition];
440 [label="64_ require(tx.origin == owner_txorigin2);\n440-expression_statement-65-65", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=expression_statement];
449 [label="65_ _recipient.transfer(address(this).balance);\n449-expression_statement-66-66", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=expression_statement];
460 [label="67_ bool private dexStatus;\n460-new_variable-68-68", method="", type_label=new_variable];
465 [label="68_ function sendto_txorigin17(address payable receiver, uint amount,address owner_txorigin17) public {\n	require (tx.origin == owner_txorigin17);\n	receiver.transfer(amount);\n}\n465-function_definition-69-72", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=function_definition];
481 [label="69_ require (tx.origin == owner_txorigin17);\n481-expression_statement-70-70", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=expression_statement];
490 [label="70_ receiver.transfer(amount);\n490-expression_statement-71-71", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=expression_statement];
497 [label="72_ uint256 public tokenId=0;\n497-new_variable-73-73", method="", type_label=new_variable];
503 [label="73_ struct orders{\n        address userAddress;\n        address tokenAddress;\n        uint256 type_;\n        uint256 price;\n        uint256 total;\n        uint256 _decimal;\n        uint256 tradeTotal;\n        uint256 amount;\n        uint256 tradeAmount;\n        uint256 pairOrderID;\n        uint256 status; \n    }\n503-expression_statement-74-86", method="orders()", type_label=expression_statement];
549 [label="86_ struct tokens{\n        address tokenAddress;\n        string tokenSymbol;\n        uint256 decimals;\n        bool status;\n    }\n549-expression_statement-87-92", method="tokens()", type_label=expression_statement];
577 [label="93_ admin = _admin;\n577-expression_statement-94-94", method="", type_label=expression_statement];
581 [label="94_ feeAddress = feeAddress_;\n581-expression_statement-95-95", method="", type_label=expression_statement];
585 [label="95_ dexStatus = true;\n585-expression_statement-96-96", method="", type_label=expression_statement];
590 [label="97_ function transferTo_txorigin7(address to, uint amount,address owner_txorigin7) public {\n  require(tx.origin == owner_txorigin7);\n  to.call.value(amount);\n}\n590-function_definition-98-101", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=function_definition];
606 [label="98_ require(tx.origin == owner_txorigin7);\n606-expression_statement-99-99", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
615 [label="99_ to.call.value(amount);\n615-expression_statement-100-100", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
624 [label="101_ function sendto_txorigin37(address payable receiver, uint amount,address owner_txorigin37) public {\n	require (tx.origin == owner_txorigin37);\n	receiver.transfer(amount);\n}\n624-function_definition-102-105", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=function_definition];
640 [label="102_ require (tx.origin == owner_txorigin37);\n640-expression_statement-103-103", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=expression_statement];
649 [label="103_ receiver.transfer(amount);\n649-expression_statement-104-104", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=expression_statement];
656 [label="105_ mapping(uint256=>orders) public Order;\n656-new_variable-106-106", method="", type_label=new_variable];
664 [label="106_ function transferTo_txorigin3(address to, uint amount,address owner_txorigin3) public {\n  require(tx.origin == owner_txorigin3);\n  to.call.value(amount);\n}\n664-function_definition-107-110", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=function_definition];
680 [label="107_ require(tx.origin == owner_txorigin3);\n680-expression_statement-108-108", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=expression_statement];
689 [label="108_ to.call.value(amount);\n689-expression_statement-109-109", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=expression_statement];
698 [label="110_ mapping(address=>mapping(address=>uint256))public userDetails;\n698-new_variable-111-111", method="", type_label=new_variable];
707 [label="111_ function sendto_txorigin9(address payable receiver, uint amount,address owner_txorigin9) public {\n	require (tx.origin == owner_txorigin9);\n	receiver.transfer(amount);\n}\n707-function_definition-112-115", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=function_definition];
723 [label="112_ require (tx.origin == owner_txorigin9);\n723-expression_statement-113-113", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
732 [label="113_ receiver.transfer(amount);\n732-expression_statement-114-114", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
739 [label="115_ mapping(address=>mapping(address=>uint256))public feeAmount;\n739-new_variable-116-116", method="", type_label=new_variable];
748 [label="116_ function sendto_txorigin25(address payable receiver, uint amount,address owner_txorigin25) public {\n	require (tx.origin == owner_txorigin25);\n	receiver.transfer(amount);\n}\n748-function_definition-117-120", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=function_definition];
764 [label="117_ require (tx.origin == owner_txorigin25);\n764-expression_statement-118-118", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
773 [label="118_ receiver.transfer(amount);\n773-expression_statement-119-119", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
780 [label="120_ mapping(address=>uint256) public withdrawfee;\n780-new_variable-121-121", method="", type_label=new_variable];
787 [label="121_ function transferTo_txorigin19(address to, uint amount,address owner_txorigin19) public {\n  require(tx.origin == owner_txorigin19);\n  to.call.value(amount);\n}\n787-function_definition-122-125", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=function_definition];
803 [label="122_ require(tx.origin == owner_txorigin19);\n803-expression_statement-123-123", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
812 [label="123_ to.call.value(amount);\n812-expression_statement-124-124", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
821 [label="125_ mapping(uint256=>mapping(uint256=>bool)) public orderPairStatus;\n821-new_variable-126-126", method="", type_label=new_variable];
830 [label="126_ function withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26) public {\n        require(tx.origin == owner_txorigin26);\n        _recipient.transfer(address(this).balance);\n    }\n830-function_definition-127-130", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=function_definition];
842 [label="127_ require(tx.origin == owner_txorigin26);\n842-expression_statement-128-128", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
851 [label="128_ _recipient.transfer(address(this).balance);\n851-expression_statement-129-129", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
862 [label="130_ mapping(address=>tokens) public tokendetails;\n862-new_variable-131-131", method="", type_label=new_variable];
870 [label="131_ modifier dexstatuscheck(){\n       require(dexStatus==true);\n       _;\n    }\n870-expression_statement-132-135", method="", type_label=expression_statement];
873 [label="132_ require(dexStatus==true);\n873-expression_statement-133-133", method="", type_label=expression_statement];
881 [label="133_ _;\n881-expression_statement-134-134", method="", type_label=expression_statement];
883 [label="135_ function setDexStatus(bool status_) public returns(bool){\n        require(msg.sender == admin);\n        dexStatus = status_;\n        return true;\n    }\n883-function_definition-136-140", method="setDexStatus(bool status_)", type_label=function_definition];
895 [label="136_ require(msg.sender == admin);\n895-expression_statement-137-137", method="setDexStatus(bool status_)", type_label=expression_statement];
904 [label="137_ dexStatus = status_;\n904-expression_statement-138-138", method="setDexStatus(bool status_)", type_label=expression_statement];
908 [label="138_ return true;\n908-return-139-139", method="setDexStatus(bool status_)", type_label=return];
911 [label="140_ function transferTo_txorigin23(address to, uint amount,address owner_txorigin23) public {\n  require(tx.origin == owner_txorigin23);\n  to.call.value(amount);\n}\n911-function_definition-141-144", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=function_definition];
927 [label="141_ require(tx.origin == owner_txorigin23);\n927-expression_statement-142-142", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
936 [label="142_ to.call.value(amount);\n936-expression_statement-143-143", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
945 [label="144_ function addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_) public returns(bool){\n        require(msg.sender == feeAddress && tokendetails[tokenAddress].status==false);\n        tokendetails[tokenAddress].tokenSymbol=tokenSymbol;\n        tokendetails[tokenAddress].decimals=decimal_;\n        tokendetails[tokenAddress].status=true;\n        return true;\n    }\n945-function_definition-145-151", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=function_definition];
965 [label="145_ require(msg.sender == feeAddress && tokendetails[tokenAddress].status==false);\n965-expression_statement-146-146", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
983 [label="146_ tokendetails[tokenAddress].tokenSymbol=tokenSymbol;\n983-expression_statement-147-147", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
991 [label="147_ tokendetails[tokenAddress].decimals=decimal_;\n991-expression_statement-148-148", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
999 [label="148_ tokendetails[tokenAddress].status=true;\n999-expression_statement-149-149", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
1008 [label="149_ return true;\n1008-return-150-150", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=return];
1011 [label="151_ function withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14) public {\n        require(tx.origin == owner_txorigin14);\n        _recipient.transfer(address(this).balance);\n    }\n1011-function_definition-152-155", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=function_definition];
1023 [label="152_ require(tx.origin == owner_txorigin14);\n1023-expression_statement-153-153", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
1032 [label="153_ _recipient.transfer(address(this).balance);\n1032-expression_statement-154-154", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
1043 [label="155_ function deposit() dexstatuscheck public payable returns(bool) {\n        require(msg.value > 0);\n        userDetails[msg.sender][address(0)]=userDetails[msg.sender][address(0)].add(msg.value);\n        emit DepositandWithdraw( msg.sender, address(0),msg.value,0);\n        return true;\n    }\n1043-function_definition-156-161", method="deposit()", type_label=function_definition];
1045 [label="155_ dexstatuscheck\n1045-expression_statement-156-156", method="deposit()", type_label=expression_statement];
1054 [label="156_ require(msg.value > 0);\n1054-expression_statement-157-157", method="deposit()", type_label=expression_statement];
1063 [label="157_ userDetails[msg.sender][address(0)]=userDetails[msg.sender][address(0)].add(msg.value);\n1063-expression_statement-158-158", method="deposit()", type_label=expression_statement];
1106 [label="159_ return true;\n1106-return-160-160", method="deposit()", type_label=return];
1109 [label="161_ function withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30) public {\n        require(tx.origin == owner_txorigin30);\n        _recipient.transfer(address(this).balance);\n    }\n1109-function_definition-162-165", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=function_definition];
1121 [label="162_ require(tx.origin == owner_txorigin30);\n1121-expression_statement-163-163", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
1130 [label="163_ _recipient.transfer(address(this).balance);\n1130-expression_statement-164-164", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
1141 [label="165_ function tokenDeposit(address tokenaddr,uint256 tokenAmount) dexstatuscheck public returns(bool)\n    {\n        require(tokenAmount > 0 && tokendetails[tokenaddr].status==true);\n        require(tokenallowance(tokenaddr,msg.sender) > 0);\n        userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].add(tokenAmount);\n        Token(tokenaddr).transferFrom(msg.sender,address(this), tokenAmount);\n        emit DepositandWithdraw( msg.sender,tokenaddr,tokenAmount,0);\n        return true;\n    }\n1141-function_definition-166-174", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=function_definition];
1151 [label="165_ dexstatuscheck\n1151-expression_statement-166-166", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1159 [label="167_ require(tokenAmount > 0 && tokendetails[tokenaddr].status==true);\n1159-expression_statement-168-168", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1175 [label="168_ require(tokenallowance(tokenaddr,msg.sender) > 0);\n1175-expression_statement-169-169", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1189 [label="169_ userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].add(tokenAmount);\n1189-expression_statement-170-170", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1210 [label="170_ Token(tokenaddr).transferFrom(msg.sender,address(this), tokenAmount);\n1210-expression_statement-171-171", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1240 [label="172_ return true;\n1240-return-173-173", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=return];
1243 [label="174_ function bug_txorigin8(address owner_txorigin8) public{\n        require(tx.origin == owner_txorigin8);\n    }\n1243-function_definition-175-177", method="bug_txorigin8(address owner_txorigin8)", type_label=function_definition];
1251 [label="175_ require(tx.origin == owner_txorigin8);\n1251-expression_statement-176-176", method="bug_txorigin8(address owner_txorigin8)", type_label=expression_statement];
1260 [label="177_ function withdraw(uint8 type_,address tokenaddr,uint256 amount) dexstatuscheck public returns(bool) {\n        require(type_ ==0 || type_ == 1);\n         if(type_==0){  \n         require(tokenaddr == address(0));\n         require(amount>0 && amount <= userDetails[msg.sender][address(0)] && withdrawfee[address(0)]<amount);\n         require(amount<=address(this).balance);\n                msg.sender.transfer(amount.sub(withdrawfee[address(0)]));    \n                userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].sub(amount);\n                feeAmount[admin][address(0)] = feeAmount[admin][address(0)].add(withdrawfee[address(0)]);\n        }\n        else{  \n        require(tokenaddr != address(0) && tokendetails[tokenaddr].status==true);\n        require(amount>0 && amount <= userDetails[msg.sender][tokenaddr] && withdrawfee[tokenaddr]<amount);\n              Token(tokenaddr).transfer(msg.sender, (amount.sub(withdrawfee[tokenaddr])));\n              userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].sub(amount);\n              feeAmount[admin][tokenaddr] = feeAmount[admin][tokenaddr].add(withdrawfee[tokenaddr]);\n        }\n        emit DepositandWithdraw( msg.sender,tokenaddr,amount,1);\n        return true;\n    }\n1260-function_definition-178-197", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=function_definition];
1274 [label="177_ dexstatuscheck\n1274-expression_statement-178-178", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1282 [label="178_ require(type_ ==0 || type_ == 1);\n1282-expression_statement-179-179", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1293 [label="179_ if_type_==0\n1293-if-180-194", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=if];
4505 [label="179_ end_if", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=end_if];
1298 [label="180_ require(tokenaddr == address(0));\n1298-expression_statement-181-181", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1307 [label="181_ require(amount>0 && amount <= userDetails[msg.sender][address(0)] && withdrawfee[address(0)]<amount);\n1307-expression_statement-182-182", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1334 [label="182_ require(amount<=address(this).balance);\n1334-expression_statement-183-183", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1345 [label="183_ msg.sender.transfer(amount.sub(withdrawfee[address(0)]));\n1345-expression_statement-184-184", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1363 [label="184_ userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].sub(amount);\n1363-expression_statement-185-185", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1388 [label="185_ feeAmount[admin][address(0)] = feeAmount[admin][address(0)].add(withdrawfee[address(0)]);\n1388-expression_statement-186-186", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1414 [label="188_ require(tokenaddr != address(0) && tokendetails[tokenaddr].status==true);\n1414-expression_statement-189-189", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1432 [label="189_ require(amount>0 && amount <= userDetails[msg.sender][tokenaddr] && withdrawfee[tokenaddr]<amount);\n1432-expression_statement-190-190", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1455 [label="190_ Token(tokenaddr).transfer(msg.sender, (amount.sub(withdrawfee[tokenaddr])));\n1455-expression_statement-191-191", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1477 [label="191_ userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].sub(amount);\n1477-expression_statement-192-192", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1498 [label="192_ feeAmount[admin][tokenaddr] = feeAmount[admin][tokenaddr].add(withdrawfee[tokenaddr]);\n1498-expression_statement-193-193", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1529 [label="195_ return true;\n1529-return-196-196", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=return];
1532 [label="197_ function transferTo_txorigin39(address to, uint amount,address owner_txorigin39) public {\n  require(tx.origin == owner_txorigin39);\n  to.call.value(amount);\n}\n1532-function_definition-198-201", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=function_definition];
1548 [label="198_ require(tx.origin == owner_txorigin39);\n1548-expression_statement-199-199", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
1557 [label="199_ to.call.value(amount);\n1557-expression_statement-200-200", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
1566 [label="201_ function adminProfitWithdraw(uint8 type_,address tokenAddr)public returns(bool){  \n       require(msg.sender == admin);\n       require(type_ ==0 || type_ == 1);\n         if(type_==0){  \n            admin.transfer(feeAmount[admin][address(0)]);\n            feeAmount[admin][address(0)]=0;\n        }\n        else{  \n            require(tokenAddr != address(0)) ;\n            Token(tokenAddr).transfer(admin, feeAmount[admin][tokenAddr]);\n            feeAmount[admin][tokenAddr]=0;\n        }\n            return true;\n        }\n1566-function_definition-202-215", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=function_definition];
1582 [label="202_ require(msg.sender == admin);\n1582-expression_statement-203-203", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1591 [label="203_ require(type_ ==0 || type_ == 1);\n1591-expression_statement-204-204", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1602 [label="204_ if_type_==0\n1602-if-205-213", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=if];
4814 [label="204_ end_if", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=end_if];
1607 [label="205_ admin.transfer(feeAmount[admin][address(0)]);\n1607-expression_statement-206-206", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1620 [label="206_ feeAmount[admin][address(0)]=0;\n1620-expression_statement-207-207", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1631 [label="209_ require(tokenAddr != address(0)) ;\n1631-expression_statement-210-210", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1640 [label="210_ Token(tokenAddr).transfer(admin, feeAmount[admin][tokenAddr]);\n1640-expression_statement-211-211", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1656 [label="211_ feeAmount[admin][tokenAddr]=0;\n1656-expression_statement-212-212", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1664 [label="213_ return true;\n1664-return-214-214", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=return];
1667 [label="215_ function bug_txorigin36(  address owner_txorigin36) public{\n        require(tx.origin == owner_txorigin36);\n    }\n1667-function_definition-216-218", method="bug_txorigin36(address owner_txorigin36)", type_label=function_definition];
1675 [label="216_ require(tx.origin == owner_txorigin36);\n1675-expression_statement-217-217", method="bug_txorigin36(address owner_txorigin36)", type_label=expression_statement];
1684 [label="218_ function setwithdrawfee(address[] memory addr,uint256[] memory feeamount)public returns(bool)\n        {\n          require(msg.sender==admin);\n          require(addr.length <10 && feeamount.length < 10 && addr.length==feeamount.length);\n          for(uint8 i=0;i<addr.length;i++){\n            withdrawfee[addr[i]]=feeamount[i];    \n          }\n           return true;\n        }\n1684-function_definition-219-227", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=function_definition];
1702 [label="220_ require(msg.sender==admin);\n1702-expression_statement-221-221", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
1711 [label="221_ require(addr.length <10 && feeamount.length < 10 && addr.length==feeamount.length);\n1711-expression_statement-222-222", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
1734 [label="222_ for(i<addr.length;;i++)\n1734-for-223-225", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=for];
4946 [label="222_ end_loop", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=end_loop];
1747 [label="222_ i++\n1747-expression_statement-223-223", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
1750 [label="223_ withdrawfee[addr[i]]=feeamount[i];\n1750-expression_statement-224-224", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
1760 [label="225_ return true;\n1760-return-226-226", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=return];
1763 [label="227_ function transferTo_txorigin35(address to, uint amount,address owner_txorigin35) public {\n  require(tx.origin == owner_txorigin35);\n  to.call.value(amount);\n}\n1763-function_definition-228-231", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=function_definition];
1779 [label="228_ require(tx.origin == owner_txorigin35);\n1779-expression_statement-229-229", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
1788 [label="229_ to.call.value(amount);\n1788-expression_statement-230-230", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
1797 [label="231_ function verify(string memory  message, uint8 v, bytes32 r, bytes32 s) private pure returns (address signer) {\n        string memory header = \"\x19Ethereum Signed Message:\n000000\";\n        uint256 lengthOffset;\n        uint256 length;\n        assembly {\n            length := mload(message)\n            lengthOffset := add(header, 57)\n        }\n        require(length <= 999999);\n        uint256 lengthLength = 0;\n        uint256 divisor = 100000; \n        while (divisor != 0) {\n            uint256 digit = length.div(divisor);\n            if (digit == 0) {\n                if (lengthLength == 0) {\n                      divisor = divisor.div(10);\n                      continue;\n                    }\n            }\n            lengthLength++;\n            length = length.sub(digit.mul(divisor));\n            divisor = divisor.div(10);\n            digit = digit.add(0x30);\n            lengthOffset++;\n            assembly {\n                mstore8(lengthOffset, digit)\n            }\n        }  \n        if (lengthLength == 0) {\n            lengthLength = 1 + 0x19 + 1;\n        } else {\n            lengthLength = lengthLength.add(1 + 0x19);\n        }\n        assembly {\n            mstore(header, lengthLength)\n        }\n        bytes32 check = keccak256(abi.encodePacked(header, message));\n        return ecrecover(check, v, r, s);\n    }\n1797-function_definition-232-270", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
1823 [label="232_ string memory header = \"\x19Ethereum Signed Message:\n000000\";\n1823-new_variable-233-233", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1830 [label="233_ uint256 lengthOffset;\n1830-new_variable-234-234", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1835 [label="234_ uint256 length;\n1835-new_variable-235-235", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1860 [label="239_ require(length <= 999999);\n1860-expression_statement-240-240", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1867 [label="240_ uint256 lengthLength = 0;\n1867-new_variable-241-241", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1873 [label="241_ uint256 divisor = 100000;\n1873-new_variable-242-242", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1879 [label="242_ while\n1879-while-243-259", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=while];
5091 [label="242_ end_loop", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_loop];
1884 [label="243_ uint256 digit = length.div(divisor);\n1884-new_variable-244-244", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1895 [label="244_ if_digit == 0\n1895-if-245-250", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=if];
5107 [label="244_ end_if", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
1900 [label="245_ if_lengthLength == 0\n1900-if-246-249", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=if];
5112 [label="245_ end_if", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
1905 [label="246_ divisor = divisor.div(10);\n1905-expression_statement-247-247", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1914 [label="247_ continue;\n1914-expression_statement-248-248", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1915 [label="250_ lengthLength++;\n1915-expression_statement-251-251", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1916 [label="250_ lengthLength++\n1916-expression_statement-251-251", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1918 [label="251_ length = length.sub(digit.mul(divisor));\n1918-expression_statement-252-252", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1932 [label="252_ divisor = divisor.div(10);\n1932-expression_statement-253-253", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1941 [label="253_ digit = digit.add(0x30);\n1941-expression_statement-254-254", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1950 [label="254_ lengthOffset++;\n1950-expression_statement-255-255", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1951 [label="254_ lengthOffset++\n1951-expression_statement-255-255", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1962 [label="259_ if_lengthLength == 0\n1962-if-260-264", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=if];
5174 [label="259_ end_if", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
1967 [label="260_ lengthLength = 1 + 0x19 + 1;\n1967-expression_statement-261-261", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1976 [label="262_ lengthLength = lengthLength.add(1 + 0x19);\n1976-expression_statement-263-263", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1996 [label="267_ bytes32 check = keccak256(abi.encodePacked(header, message));\n1996-new_variable-268-268", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2012 [label="268_ return ecrecover(check, v, r, s);\n2012-return-269-269", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=return];
2023 [label="270_ function makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s) dexstatuscheck public returns(bool){\n      require(msg.sender == feeAddress);\n       require(verify((message),v,r,s)==traderAddresses[1]);\n      uint256 amount__;\n        uint256 orderiD = tradeDetails[0];\n        if(Order[orderiD].status==0){    \n            if(tradeDetails[6] == 0){\n                amount__ = tradeDetails[3];\n            }\n            else if(tradeDetails[6] ==1){\n                amount__ = tradeDetails[1];\n            }\n            require(amount__ > 0 && amount__ <= userDetails[traderAddresses[1]][traderAddresses[0]]);\n                Order[orderiD].userAddress = traderAddresses[1];\n                Order[orderiD].type_ = tradeDetails[6];\n                Order[orderiD].price = tradeDetails[2];\n                Order[orderiD].amount  = tradeDetails[1];\n                Order[orderiD].total  = tradeDetails[3];\n                Order[orderiD].tradeTotal  = tradeDetails[3];\n                Order[orderiD]._decimal  = tradeDetails[7];\n                Order[orderiD].tokenAddress = traderAddresses[0];       \n                userDetails[traderAddresses[1]][traderAddresses[0]]=userDetails[traderAddresses[1]][traderAddresses[0]].sub(amount__);\n                Order[orderiD].tradeAmount=tradeDetails[1];\n                Order[orderiD].status=1;\n        }\n        else if(Order[orderiD].status==1 && tradeDetails[8]==0){  \n            cancelOrder(orderiD);\n        }\n        if(Order[orderiD].status==1 && tradeDetails[1] > 0 && tradeDetails[8]>0 && Order[tradeDetails[8]].status==1 && tradeDetails[3]>0){  \n                Order[orderiD].tradeAmount =Order[orderiD].tradeAmount.sub(tradeDetails[1]);\n                Order[tradeDetails[8]].tradeAmount =Order[tradeDetails[8]].tradeAmount.sub(tradeDetails[1]);\n                if(tradeDetails[2]>0){\n                    userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[2]);\n                }\n                Order[orderiD].tradeTotal =Order[orderiD].tradeTotal.sub(((tradeDetails[1].mul(Order[orderiD].price)).div(Order[orderiD]._decimal)));\n                Order[tradeDetails[8]].tradeTotal =Order[tradeDetails[8]].tradeTotal.sub(((tradeDetails[1].mul(Order[tradeDetails[8]].price)).div(Order[tradeDetails[8]]._decimal)));\n                    if(tradeDetails[6] == 1 || tradeDetails[6]==3)\n                    {\n                        userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1]);\n                        userDetails[Order[orderiD].userAddress][traderAddresses[0]]= userDetails[Order[orderiD].userAddress][traderAddresses[0]].sub(tradeDetails[4]);    \n                        feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[4]);\n                    }\n                    else\n                    {\n                         userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1].sub(tradeDetails[4]));\n                            feeAmount[admin][Order[tradeDetails[8]].tokenAddress]= feeAmount[admin][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[4]);\n                    }\n                    if(tradeDetails[6] == 2 || tradeDetails[6]==3)\n                    {\n                        userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3]);\n                        userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]]= userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]].sub(tradeDetails[5]);\n                        feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[5]);\n                    }\n                    else\n                    {\n                         userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3].sub(tradeDetails[5]));\n                         feeAmount[admin][Order[orderiD].tokenAddress]= feeAmount[admin][Order[orderiD].tokenAddress].add(tradeDetails[5]);\n                    }\n                if(Order[tradeDetails[8]].tradeAmount==0){\n                    Order[tradeDetails[8]].status=2;    \n                }\n                if(Order[orderiD].tradeAmount==0){\n                    Order[orderiD].status=2;    \n                }\n                orderPairStatus[orderiD][tradeDetails[8]] = true;\n            }\n        return true; \n    }\n2023-function_definition-271-338", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=function_definition];
2053 [label="270_ dexstatuscheck\n2053-expression_statement-271-271", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2061 [label="271_ require(msg.sender == feeAddress);\n2061-expression_statement-272-272", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2070 [label="272_ require(verify((message),v,r,s)==traderAddresses[1]);\n2070-expression_statement-273-273", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2089 [label="273_ uint256 amount__;\n2089-new_variable-274-274", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=new_variable];
2094 [label="274_ uint256 orderiD = tradeDetails[0];\n2094-new_variable-275-275", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=new_variable];
2102 [label="275_ if_Order[orderiD].status==0\n2102-if-276-298", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5314 [label="275_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2111 [label="276_ if_tradeDetails[6] == 0\n2111-if-277-282", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5323 [label="276_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2118 [label="277_ amount__ = tradeDetails[3];\n2118-expression_statement-278-278", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2124 [label="279_ if_tradeDetails[6] ==1\n2124-if-280-282", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
2131 [label="280_ amount__ = tradeDetails[1];\n2131-expression_statement-281-281", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2137 [label="282_ require(amount__ > 0 && amount__ <= userDetails[traderAddresses[1]][traderAddresses[0]]);\n2137-expression_statement-283-283", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2156 [label="283_ Order[orderiD].userAddress = traderAddresses[1];\n2156-expression_statement-284-284", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2166 [label="284_ Order[orderiD].type_ = tradeDetails[6];\n2166-expression_statement-285-285", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2176 [label="285_ Order[orderiD].price = tradeDetails[2];\n2176-expression_statement-286-286", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2186 [label="286_ Order[orderiD].amount  = tradeDetails[1];\n2186-expression_statement-287-287", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2196 [label="287_ Order[orderiD].total  = tradeDetails[3];\n2196-expression_statement-288-288", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2206 [label="288_ Order[orderiD].tradeTotal  = tradeDetails[3];\n2206-expression_statement-289-289", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2216 [label="289_ Order[orderiD]._decimal  = tradeDetails[7];\n2216-expression_statement-290-290", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2226 [label="290_ Order[orderiD].tokenAddress = traderAddresses[0];\n2226-expression_statement-291-291", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2236 [label="291_ userDetails[traderAddresses[1]][traderAddresses[0]]=userDetails[traderAddresses[1]][traderAddresses[0]].sub(amount__);\n2236-expression_statement-292-292", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2261 [label="292_ Order[orderiD].tradeAmount=tradeDetails[1];\n2261-expression_statement-293-293", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2271 [label="293_ Order[orderiD].status=1;\n2271-expression_statement-294-294", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2279 [label="295_ if_Order[orderiD].status==1 && tradeDetails[8]==0\n2279-if-296-298", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
2294 [label="296_ cancelOrder(orderiD);\n2294-expression_statement-297-297", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2299 [label="298_ if_Order[orderiD].status==1 && tradeDetails[1] > 0 && tradeDetails[8]>0 && Order[tradeDetails[8]].status==1 && tradeDetails[3]>0\n2299-if-299-336", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5511 [label="298_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2336 [label="299_ Order[orderiD].tradeAmount =Order[orderiD].tradeAmount.sub(tradeDetails[1]);\n2336-expression_statement-300-300", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2355 [label="300_ Order[tradeDetails[8]].tradeAmount =Order[tradeDetails[8]].tradeAmount.sub(tradeDetails[1]);\n2355-expression_statement-301-301", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2378 [label="301_ if_tradeDetails[2]>0\n2378-if-302-304", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5590 [label="301_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2385 [label="302_ userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[2]);\n2385-expression_statement-303-303", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2420 [label="304_ Order[orderiD].tradeTotal =Order[orderiD].tradeTotal.sub(((tradeDetails[1].mul(Order[orderiD].price)).div(Order[orderiD]._decimal)));\n2420-expression_statement-305-305", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2459 [label="305_ Order[tradeDetails[8]].tradeTotal =Order[tradeDetails[8]].tradeTotal.sub(((tradeDetails[1].mul(Order[tradeDetails[8]].price)).div(Order[tradeDetails[8]]._decimal)));\n2459-expression_statement-306-306", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2506 [label="306_ if_tradeDetails[6] == 1 || tradeDetails[6]==3\n2506-if-307-317", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5718 [label="306_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2519 [label="308_ userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1]);\n2519-expression_statement-309-309", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2558 [label="309_ userDetails[Order[orderiD].userAddress][traderAddresses[0]]= userDetails[Order[orderiD].userAddress][traderAddresses[0]].sub(tradeDetails[4]);\n2558-expression_statement-310-310", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2589 [label="310_ feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[4]);\n2589-expression_statement-311-311", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2613 [label="314_ userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1].sub(tradeDetails[4]));\n2613-expression_statement-315-315", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2659 [label="315_ feeAmount[admin][Order[tradeDetails[8]].tokenAddress]= feeAmount[admin][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[4]);\n2659-expression_statement-316-316", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2690 [label="317_ if_tradeDetails[6] == 2 || tradeDetails[6]==3\n2690-if-318-328", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5902 [label="317_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2703 [label="319_ userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3]);\n2703-expression_statement-320-320", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2742 [label="320_ userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]]= userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]].sub(tradeDetails[5]);\n2742-expression_statement-321-321", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2777 [label="321_ feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[5]);\n2777-expression_statement-322-322", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2801 [label="325_ userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3].sub(tradeDetails[5]));\n2801-expression_statement-326-326", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2847 [label="326_ feeAmount[admin][Order[orderiD].tokenAddress]= feeAmount[admin][Order[orderiD].tokenAddress].add(tradeDetails[5]);\n2847-expression_statement-327-327", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2874 [label="328_ if_Order[tradeDetails[8]].tradeAmount==0\n2874-if-329-331", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
6086 [label="328_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2885 [label="329_ Order[tradeDetails[8]].status=2;\n2885-expression_statement-330-330", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2895 [label="331_ if_Order[orderiD].tradeAmount==0\n2895-if-332-334", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
6107 [label="331_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2904 [label="332_ Order[orderiD].status=2;\n2904-expression_statement-333-333", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2912 [label="334_ orderPairStatus[orderiD][tradeDetails[8]] = true;\n2912-expression_statement-335-335", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2923 [label="336_ return true;\n2923-return-337-337", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=return];
2926 [label="338_ function bug_txorigin40(address owner_txorigin40) public{\n        require(tx.origin == owner_txorigin40);\n    }\n2926-function_definition-339-341", method="bug_txorigin40(address owner_txorigin40)", type_label=function_definition];
2934 [label="339_ require(tx.origin == owner_txorigin40);\n2934-expression_statement-340-340", method="bug_txorigin40(address owner_txorigin40)", type_label=expression_statement];
2943 [label="341_ function cancelOrder(uint256 orderid)internal returns(bool){\n        if(Order[orderid].status==1){\n            if(Order[orderid].type_ == 0){\n            userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeTotal);        \n            }\n            else{\n                userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeAmount);\n            }\n            Order[orderid].status=3;     \n        }\n        return true;\n}\n2943-function_definition-342-353", method="cancelOrder(uint256 orderid)", type_label=function_definition];
2955 [label="342_ if_Order[orderid].status==1\n2955-if-343-351", method="cancelOrder(uint256 orderid)", type_label=if];
6167 [label="342_ end_if", method="cancelOrder(uint256 orderid)", type_label=end_if];
2964 [label="343_ if_Order[orderid].type_ == 0\n2964-if-344-349", method="cancelOrder(uint256 orderid)", type_label=if];
6176 [label="343_ end_if", method="cancelOrder(uint256 orderid)", type_label=end_if];
2973 [label="344_ userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeTotal);\n2973-expression_statement-345-345", method="cancelOrder(uint256 orderid)", type_label=expression_statement];
3011 [label="347_ userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeAmount);\n3011-expression_statement-348-348", method="cancelOrder(uint256 orderid)", type_label=expression_statement];
3048 [label="349_ Order[orderid].status=3;\n3048-expression_statement-350-350", method="cancelOrder(uint256 orderid)", type_label=expression_statement];
3056 [label="351_ return true;\n3056-return-352-352", method="cancelOrder(uint256 orderid)", type_label=return];
3059 [label="353_ function sendto_txorigin33(address payable receiver, uint amount,address owner_txorigin33) public {\n	require (tx.origin == owner_txorigin33);\n	receiver.transfer(amount);\n}\n3059-function_definition-354-357", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=function_definition];
3075 [label="354_ require (tx.origin == owner_txorigin33);\n3075-expression_statement-355-355", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
3084 [label="355_ receiver.transfer(amount);\n3084-expression_statement-356-356", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
3091 [label="357_ function viewTokenBalance(address tokenAddr,address baladdr)public view returns(uint256){\n        return Token(tokenAddr).balanceOf(baladdr);\n    }\n3091-function_definition-358-360", method="viewTokenBalance(address tokenAddr,address baladdr)", type_label=function_definition];
3108 [label="358_ return Token(tokenAddr).balanceOf(baladdr);\n3108-return-359-359", method="viewTokenBalance(address tokenAddr,address baladdr)", type_label=return];
3118 [label="360_ function transferTo_txorigin27(address to, uint amount,address owner_txorigin27) public {\n  require(tx.origin == owner_txorigin27);\n  to.call.value(amount);\n}\n3118-function_definition-361-364", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=function_definition];
3134 [label="361_ require(tx.origin == owner_txorigin27);\n3134-expression_statement-362-362", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
3143 [label="362_ to.call.value(amount);\n3143-expression_statement-363-363", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
3152 [label="364_ function tokenallowance(address tokenAddr,address owner) public view returns(uint256){\n        return Token(tokenAddr).allowance(owner,address(this));\n    }\n3152-function_definition-365-367", method="tokenallowance(address tokenAddr,address owner)", type_label=function_definition];
3169 [label="365_ return Token(tokenAddr).allowance(owner,address(this));\n3169-return-366-366", method="tokenallowance(address tokenAddr,address owner)", type_label=return];
3183 [label="367_ function transferTo_txorigin31(address to, uint amount,address owner_txorigin31) public {\n  require(tx.origin == owner_txorigin31);\n  to.call.value(amount);\n}\n3183-function_definition-368-371", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=function_definition];
3199 [label="368_ require(tx.origin == owner_txorigin31);\n3199-expression_statement-369-369", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
3208 [label="369_ to.call.value(amount);\n3208-expression_statement-370-370", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1517;
1987;
29 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
66 -> 74  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
143 -> 151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
163 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 185  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
180 -> 3392  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3392 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
185 -> 3392  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
185 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
187 -> 195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
195 -> 204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
204 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
206 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
233 -> 250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
250 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
257 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
261 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
293 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
303 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
319 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
369 -> 378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
440 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
465 -> 481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
481 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
503 -> 549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
581 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
590 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
624 -> 640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
723 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
748 -> 764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
764 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
830 -> 842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
842 -> 851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
862 -> 870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
873 -> 881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
895 -> 904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
908 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
911 -> 927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
927 -> 936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
945 -> 965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
965 -> 983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
983 -> 991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
991 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1008 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1011 -> 1023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1023 -> 1032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1043 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1109 -> 1121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1121 -> 1130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1141 -> 1159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1159 -> 1175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1175 -> 1189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1189 -> 1210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1240 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1243 -> 1251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1260 -> 1282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1282 -> 1293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1293 -> 1298  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1293 -> 1414  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4505 -> 1517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1298 -> 1307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1307 -> 1334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1334 -> 1345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1345 -> 1363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1363 -> 1388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1388 -> 4505  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1414 -> 1432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1432 -> 1455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1455 -> 1477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1477 -> 1498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1498 -> 4505  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1529 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1532 -> 1548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1548 -> 1557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1566 -> 1582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1582 -> 1591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1591 -> 1602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1602 -> 1607  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1602 -> 1631  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4814 -> 1664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1607 -> 1620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1620 -> 4814  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1631 -> 1640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1640 -> 1656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1656 -> 4814  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1664 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1667 -> 1675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1684 -> 1702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1702 -> 1711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1711 -> 1734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1734 -> 1750  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1734 -> 4946  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4946 -> 1760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1747 -> 1734  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1750 -> 1747  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1760 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1763 -> 1779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1779 -> 1788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1797 -> 1823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1823 -> 1830  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1830 -> 1835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1860 -> 1867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1867 -> 1873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1873 -> 1879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1879 -> 1884  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1879 -> 5091  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5091 -> 1962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1884 -> 1895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1895 -> 1900  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1895 -> 5107  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1900 -> 1905  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1900 -> 5112  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1905 -> 1914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1914 -> 1879  [color=red, controlflow_type=jump_next, edge_type=CFG_edge, key=0, label=jump_next];
1915 -> 1918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1918 -> 1932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1932 -> 1941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1941 -> 1950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1962 -> 1967  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1962 -> 1976  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5174 -> 1987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1967 -> 5174  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1976 -> 5174  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1996 -> 2012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2012 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2023 -> 2061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2061 -> 2070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2070 -> 2089  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2089 -> 2094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2094 -> 2102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2102 -> 2111  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2102 -> 2279  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5314 -> 2299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2111 -> 2118  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2111 -> 2124  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5323 -> 2137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2118 -> 5323  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2124 -> 2131  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2124 -> 5323  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2131 -> 5323  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2137 -> 2156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2156 -> 2166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2166 -> 2176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2176 -> 2186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2186 -> 2196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2196 -> 2206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2206 -> 2216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2216 -> 2226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2226 -> 2236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2236 -> 2261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2261 -> 2271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2271 -> 5314  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2279 -> 2294  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2279 -> 5314  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2294 -> 5314  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2299 -> 2336  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2299 -> 5511  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5511 -> 2923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2336 -> 2355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2355 -> 2378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2378 -> 2385  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2378 -> 5590  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5590 -> 2420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2385 -> 5590  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2420 -> 2459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2459 -> 2506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2506 -> 2519  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2506 -> 2613  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5718 -> 2690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2519 -> 2558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2558 -> 2589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2589 -> 5718  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2613 -> 2659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2659 -> 5718  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2690 -> 2703  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2690 -> 2801  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5902 -> 2874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2703 -> 2742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2742 -> 2777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2777 -> 5902  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2801 -> 2847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2847 -> 5902  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2874 -> 2885  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2874 -> 6086  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6086 -> 2895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2885 -> 6086  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2895 -> 2904  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2895 -> 6107  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6107 -> 2912  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2904 -> 6107  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2912 -> 5511  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2923 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2926 -> 2934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2943 -> 2955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2955 -> 2964  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2955 -> 6167  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6167 -> 3056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2964 -> 2973  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2964 -> 3011  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6176 -> 3048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2973 -> 6176  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3011 -> 6176  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3048 -> 6167  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3056 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3059 -> 3075  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3075 -> 3084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3091 -> 3108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3108 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3118 -> 3134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3134 -> 3143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3152 -> 3169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3169 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3183 -> 3199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3199 -> 3208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
