digraph  {
13 [label="2_ function bug_txorigin24(  address owner_txorigin24) public{\n        require(tx.origin == owner_txorigin24);\n    }\n13-function_definition-3-5", method="bug_txorigin24(address owner_txorigin24)", type_label=function_definition];
21 [label="3_ require(tx.origin == owner_txorigin24);\n21-expression_statement-4-4", method="bug_txorigin24(address owner_txorigin24)", type_label=expression_statement];
30 [label="5_ address payable public owner;\n30-new_variable-6-6", method="", type_label=new_variable];
35 [label="6_ function transferTo_txorigin27(address to, uint amount,address owner_txorigin27) public {\n  require(tx.origin == owner_txorigin27);\n  to.call.value(amount);\n}\n35-function_definition-7-10", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=function_definition];
51 [label="7_ require(tx.origin == owner_txorigin27);\n51-expression_statement-8-8", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
60 [label="8_ to.call.value(amount);\n60-expression_statement-9-9", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
81 [label="12_ owner = msg.sender;\n81-expression_statement-13-13", method="", type_label=expression_statement];
87 [label="14_ function withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2) public {\n        require(tx.origin == owner_txorigin2);\n        _recipient.transfer(address(this).balance);\n    }\n87-function_definition-15-18", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=function_definition];
99 [label="15_ require(tx.origin == owner_txorigin2);\n99-expression_statement-16-16", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=expression_statement];
108 [label="16_ _recipient.transfer(address(this).balance);\n108-expression_statement-17-17", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=expression_statement];
119 [label="18_ modifier onlyOwner {\n       require(msg.sender == owner);\n       _;\n   }\n119-expression_statement-19-22", method="", type_label=expression_statement];
122 [label="19_ require(msg.sender == owner);\n122-expression_statement-20-20", method="", type_label=expression_statement];
131 [label="20_ _;\n131-expression_statement-21-21", method="", type_label=expression_statement];
133 [label="22_ function transferOwnership(address payable _newOwner) public onlyOwner {\n       owner = _newOwner;\n   }\n133-function_definition-23-25", method="transferOwnership(address payable _newOwner)", type_label=function_definition];
140 [label="22_ onlyOwner\n140-expression_statement-23-23", method="transferOwnership(address payable _newOwner)", type_label=expression_statement];
143 [label="23_ owner = _newOwner;\n143-expression_statement-24-24", method="transferOwnership(address payable _newOwner)", type_label=expression_statement];
147 [label="25_ function sendto_txorigin17(address payable receiver, uint amount,address owner_txorigin17) public {\n	require (tx.origin == owner_txorigin17);\n	receiver.transfer(amount);\n}\n147-function_definition-26-29", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=function_definition];
163 [label="26_ require (tx.origin == owner_txorigin17);\n163-expression_statement-27-27", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=expression_statement];
172 [label="27_ receiver.transfer(amount);\n172-expression_statement-28-28", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=expression_statement];
182 [label="31_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n182-function_definition-32-36", method="add(uint256 a,uint256 b)", type_label=function_definition];
199 [label="32_ uint256 c = a + b;\n199-new_variable-33-33", method="add(uint256 a,uint256 b)", type_label=new_variable];
207 [label="33_ require(c >= a, \"SafeMath: addition overflow\");\n207-expression_statement-34-34", method="add(uint256 a,uint256 b)", type_label=expression_statement];
217 [label="34_ return c;\n217-return-35-35", method="add(uint256 a,uint256 b)", type_label=return];
219 [label="36_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n219-function_definition-37-41", method="sub(uint256 a,uint256 b)", type_label=function_definition];
236 [label="37_ require(b <= a, \"SafeMath: subtraction overflow\");\n236-expression_statement-38-38", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
246 [label="38_ uint256 c = a - b;\n246-new_variable-39-39", method="sub(uint256 a,uint256 b)", type_label=new_variable];
254 [label="39_ return c;\n254-return-40-40", method="sub(uint256 a,uint256 b)", type_label=return];
256 [label="41_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n256-function_definition-42-49", method="mul(uint256 a,uint256 b)", type_label=function_definition];
273 [label="42_ if_a == 0\n273-if-43-45", method="mul(uint256 a,uint256 b)", type_label=if];
2549 [label="42_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
278 [label="43_ return 0;\n278-return-44-44", method="mul(uint256 a,uint256 b)", type_label=return];
280 [label="45_ uint256 c = a * b;\n280-new_variable-46-46", method="mul(uint256 a,uint256 b)", type_label=new_variable];
288 [label="46_ require(c / a == b, \"SafeMath: multiplication overflow\");\n288-expression_statement-47-47", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
300 [label="47_ return c;\n300-return-48-48", method="mul(uint256 a,uint256 b)", type_label=return];
302 [label="49_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n302-function_definition-50-54", method="div(uint256 a,uint256 b)", type_label=function_definition];
319 [label="50_ require(b > 0, \"SafeMath: division by zero\");\n319-expression_statement-51-51", method="div(uint256 a,uint256 b)", type_label=expression_statement];
329 [label="51_ uint256 c = a / b;\n329-new_variable-52-52", method="div(uint256 a,uint256 b)", type_label=new_variable];
337 [label="52_ return c;\n337-return-53-53", method="div(uint256 a,uint256 b)", type_label=return];
339 [label="54_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n339-function_definition-55-58", method="mod(uint256 a,uint256 b)", type_label=function_definition];
356 [label="55_ require(b != 0, \"SafeMath: modulo by zero\");\n356-expression_statement-56-56", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
366 [label="56_ return a % b;\n366-return-57-57", method="mod(uint256 a,uint256 b)", type_label=return];
381 [label="61_ function sendto_txorigin5(address payable receiver, uint amount,address owner_txorigin5) public {\n	require (tx.origin == owner_txorigin5);\n	receiver.transfer(amount);\n}\n381-function_definition-62-65", method="sendto_txorigin5(address payable receiver,uint amount,address owner_txorigin5)", type_label=function_definition];
397 [label="62_ require (tx.origin == owner_txorigin5);\n397-expression_statement-63-63", method="sendto_txorigin5(address payable receiver,uint amount,address owner_txorigin5)", type_label=expression_statement];
406 [label="63_ receiver.transfer(amount);\n406-expression_statement-64-64", method="sendto_txorigin5(address payable receiver,uint amount,address owner_txorigin5)", type_label=expression_statement];
413 [label="65_ mapping (address => transferMapping) private _balances;\n413-new_variable-66-66", method="", type_label=new_variable];
421 [label="66_ function transferTo_txorigin15(address to, uint amount,address owner_txorigin15) public {\n  require(tx.origin == owner_txorigin15);\n  to.call.value(amount);\n}\n421-function_definition-67-70", method="transferTo_txorigin15(address to,uint amount,address owner_txorigin15)", type_label=function_definition];
437 [label="67_ require(tx.origin == owner_txorigin15);\n437-expression_statement-68-68", method="transferTo_txorigin15(address to,uint amount,address owner_txorigin15)", type_label=expression_statement];
446 [label="68_ to.call.value(amount);\n446-expression_statement-69-69", method="transferTo_txorigin15(address to,uint amount,address owner_txorigin15)", type_label=expression_statement];
455 [label="70_ mapping (address => mapping (address => uint256)) private _allowances;\n455-new_variable-71-71", method="", type_label=new_variable];
464 [label="71_ function bug_txorigin28(  address owner_txorigin28) public{\n        require(tx.origin == owner_txorigin28);\n    }\n464-function_definition-72-74", method="bug_txorigin28(address owner_txorigin28)", type_label=function_definition];
472 [label="72_ require(tx.origin == owner_txorigin28);\n472-expression_statement-73-73", method="bug_txorigin28(address owner_txorigin28)", type_label=expression_statement];
481 [label="74_ uint256 private _totalSupply;\n481-new_variable-75-75", method="", type_label=new_variable];
486 [label="75_ function withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34) public {\n        require(tx.origin == owner_txorigin34);\n        _recipient.transfer(address(this).balance);\n    }\n486-function_definition-76-79", method="withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34)", type_label=function_definition];
498 [label="76_ require(tx.origin == owner_txorigin34);\n498-expression_statement-77-77", method="withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34)", type_label=expression_statement];
507 [label="77_ _recipient.transfer(address(this).balance);\n507-expression_statement-78-78", method="withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34)", type_label=expression_statement];
518 [label="79_ uint256 public _maxTotalSupply;\n518-new_variable-80-80", method="", type_label=new_variable];
523 [label="80_ function sendto_txorigin21(address payable receiver, uint amount,address owner_txorigin21) public {\n	require (tx.origin == owner_txorigin21);\n	receiver.transfer(amount);\n}\n523-function_definition-81-84", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=function_definition];
539 [label="81_ require (tx.origin == owner_txorigin21);\n539-expression_statement-82-82", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=expression_statement];
548 [label="82_ receiver.transfer(amount);\n548-expression_statement-83-83", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=expression_statement];
555 [label="84_ string private _name = \"Lollypop\";\n555-new_variable-85-85", method="", type_label=new_variable];
562 [label="85_ function withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10) public {\n        require(tx.origin == owner_txorigin10);\n        _recipient.transfer(address(this).balance);\n    }\n562-function_definition-86-89", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=function_definition];
574 [label="86_ require(tx.origin == owner_txorigin10);\n574-expression_statement-87-87", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=expression_statement];
583 [label="87_ _recipient.transfer(address(this).balance);\n583-expression_statement-88-88", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=expression_statement];
594 [label="89_ string private _symbol = \"Lolly\";\n594-new_variable-90-90", method="", type_label=new_variable];
601 [label="90_ function withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22) public {\n        require(tx.origin == owner_txorigin22);\n        _recipient.transfer(address(this).balance);\n    }\n601-function_definition-91-94", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=function_definition];
613 [label="91_ require(tx.origin == owner_txorigin22);\n613-expression_statement-92-92", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=expression_statement];
622 [label="92_ _recipient.transfer(address(this).balance);\n622-expression_statement-93-93", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=expression_statement];
633 [label="94_ uint8 private _decimals= 18;\n633-new_variable-95-95", method="", type_label=new_variable];
639 [label="95_ function bug_txorigin12(address owner_txorigin12) public{\n        require(tx.origin == owner_txorigin12);\n    }\n639-function_definition-96-98", method="bug_txorigin12(address owner_txorigin12)", type_label=function_definition];
647 [label="96_ require(tx.origin == owner_txorigin12);\n647-expression_statement-97-97", method="bug_txorigin12(address owner_txorigin12)", type_label=expression_statement];
656 [label="98_ uint256 public maxAgeOfToken = 365 days;\n656-new_variable-99-99", method="", type_label=new_variable];
663 [label="99_ function transferTo_txorigin11(address to, uint amount,address owner_txorigin11) public {\n  require(tx.origin == owner_txorigin11);\n  to.call.value(amount);\n}\n663-function_definition-100-103", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=function_definition];
679 [label="100_ require(tx.origin == owner_txorigin11);\n679-expression_statement-101-101", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=expression_statement];
688 [label="101_ to.call.value(amount);\n688-expression_statement-102-102", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=expression_statement];
697 [label="103_ uint256  public minAgeOfToken = 1 days;\n697-new_variable-104-104", method="", type_label=new_variable];
704 [label="104_ function sendto_txorigin1(address payable receiver, uint amount,address owner_txorigin1) public {\n	require (tx.origin == owner_txorigin1);\n	receiver.transfer(amount);\n}\n704-function_definition-105-108", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=function_definition];
720 [label="105_ require (tx.origin == owner_txorigin1);\n720-expression_statement-106-106", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=expression_statement];
729 [label="106_ receiver.transfer(amount);\n729-expression_statement-107-107", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=expression_statement];
736 [label="108_ uint256 public perDayBonus = 100;\n736-new_variable-109-109", method="", type_label=new_variable];
742 [label="109_ struct  transferMapping{\n        uint256 amount;\n        uint256 time;\n    }\n742-expression_statement-110-113", method="transferMapping()", type_label=expression_statement];
754 [label="114_ _maxTotalSupply = 1000000000 * 10 ** 18;\n754-expression_statement-115-115", method="", type_label=expression_statement];
762 [label="115_ _totalSupply =  2000000 * 10 ** 18;\n762-expression_statement-116-116", method="", type_label=expression_statement];
770 [label="116_ _balances[msg.sender].amount = _totalSupply;\n770-expression_statement-117-117", method="", type_label=expression_statement];
780 [label="117_ _balances[msg.sender].time = now;\n780-expression_statement-118-118", method="", type_label=expression_statement];
790 [label="119_ function sendto_txorigin37(address payable receiver, uint amount,address owner_txorigin37) public {\n	require (tx.origin == owner_txorigin37);\n	receiver.transfer(amount);\n}\n790-function_definition-120-123", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=function_definition];
806 [label="120_ require (tx.origin == owner_txorigin37);\n806-expression_statement-121-121", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=expression_statement];
815 [label="121_ receiver.transfer(amount);\n815-expression_statement-122-122", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=expression_statement];
822 [label="123_ function calculateBonus(uint256 timeElasped , uint256 amount) public view  returns(uint256){\n        uint256 totalDays = timeElasped.div(minAgeOfToken);\n        if(totalDays > maxAgeOfToken){\n            totalDays = maxAgeOfToken;\n        }\n        uint256 totalBonus = (totalDays *  amount).div(perDayBonus);\n        return totalBonus;\n    }\n822-function_definition-124-131", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=function_definition];
839 [label="124_ uint256 totalDays = timeElasped.div(minAgeOfToken);\n839-new_variable-125-125", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=new_variable];
850 [label="125_ if_totalDays > maxAgeOfToken\n850-if-126-128", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=if];
3126 [label="125_ end_if", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=end_if];
855 [label="126_ totalDays = maxAgeOfToken;\n855-expression_statement-127-127", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=expression_statement];
859 [label="128_ uint256 totalBonus = (totalDays *  amount).div(perDayBonus);\n859-new_variable-129-129", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=new_variable];
873 [label="129_ return totalBonus;\n873-return-130-130", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=return];
875 [label="131_ function transferTo_txorigin3(address to, uint amount,address owner_txorigin3) public {\n  require(tx.origin == owner_txorigin3);\n  to.call.value(amount);\n}\n875-function_definition-132-135", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=function_definition];
891 [label="132_ require(tx.origin == owner_txorigin3);\n891-expression_statement-133-133", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=expression_statement];
900 [label="133_ to.call.value(amount);\n900-expression_statement-134-134", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=expression_statement];
909 [label="135_ function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        uint256 senderTimeElasped = now - (_balances[sender].time);\n        uint256 recipientTimeElasped = now - (_balances[recipient].time);\n        if(senderTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply)){\n            uint256 bonus = calculateBonus(senderTimeElasped , balanceOf(sender));\n            mint(sender , bonus);\n        }\n        if(recipientTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply) && sender!= recipient){\n             uint256 bonus = calculateBonus(recipientTimeElasped , balanceOf(recipient));\n             mint(recipient , bonus);\n        }\n        _balances[sender].amount = _balances[sender].amount.sub(amount);\n        _balances[recipient].amount = _balances[recipient].amount.add(amount);\n        _balances[sender].time = now;\n        _balances[recipient].time = now;\n        emit Transfer(sender, recipient, amount);\n    }\n909-function_definition-136-154", method="_transfer(address sender,address recipient,uint256 amount)", type_label=function_definition];
925 [label="136_ require(sender != address(0), \"ERC20: transfer from the zero address\");\n925-expression_statement-137-137", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
937 [label="137_ require(recipient != address(0), \"ERC20: transfer to the zero address\");\n937-expression_statement-138-138", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
949 [label="138_ uint256 senderTimeElasped = now - (_balances[sender].time);\n949-new_variable-139-139", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
962 [label="139_ uint256 recipientTimeElasped = now - (_balances[recipient].time);\n962-new_variable-140-140", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
975 [label="140_ if_senderTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply)\n975-if-141-144", method="_transfer(address sender,address recipient,uint256 amount)", type_label=if];
3251 [label="140_ end_if", method="_transfer(address sender,address recipient,uint256 amount)", type_label=end_if];
985 [label="141_ uint256 bonus = calculateBonus(senderTimeElasped , balanceOf(sender));\n985-new_variable-142-142", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
999 [label="142_ mint(sender , bonus);\n999-expression_statement-143-143", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1006 [label="144_ if_recipientTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply) && sender!= recipient\n1006-if-145-148", method="_transfer(address sender,address recipient,uint256 amount)", type_label=if];
3282 [label="144_ end_if", method="_transfer(address sender,address recipient,uint256 amount)", type_label=end_if];
1020 [label="145_ uint256 bonus = calculateBonus(recipientTimeElasped , balanceOf(recipient));\n1020-new_variable-146-146", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
1034 [label="146_ mint(recipient , bonus);\n1034-expression_statement-147-147", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1041 [label="148_ _balances[sender].amount = _balances[sender].amount.sub(amount);\n1041-expression_statement-149-149", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1058 [label="149_ _balances[recipient].amount = _balances[recipient].amount.add(amount);\n1058-expression_statement-150-150", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1075 [label="150_ _balances[sender].time = now;\n1075-expression_statement-151-151", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1083 [label="151_ _balances[recipient].time = now;\n1083-expression_statement-152-152", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1099 [label="154_ function sendto_txorigin9(address payable receiver, uint amount,address owner_txorigin9) public {\n	require (tx.origin == owner_txorigin9);\n	receiver.transfer(amount);\n}\n1099-function_definition-155-158", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=function_definition];
1115 [label="155_ require (tx.origin == owner_txorigin9);\n1115-expression_statement-156-156", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
1124 [label="156_ receiver.transfer(amount);\n1124-expression_statement-157-157", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
1131 [label="158_ function name() public view returns (string memory) {\n        return _name;\n    }\n1131-function_definition-159-161", method="name()", type_label=function_definition];
1140 [label="159_ return _name;\n1140-return-160-160", method="name()", type_label=return];
1142 [label="161_ function sendto_txorigin25(address payable receiver, uint amount,address owner_txorigin25) public {\n	require (tx.origin == owner_txorigin25);\n	receiver.transfer(amount);\n}\n1142-function_definition-162-165", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=function_definition];
1158 [label="162_ require (tx.origin == owner_txorigin25);\n1158-expression_statement-163-163", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
1167 [label="163_ receiver.transfer(amount);\n1167-expression_statement-164-164", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
1174 [label="165_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n1174-function_definition-166-168", method="symbol()", type_label=function_definition];
1183 [label="166_ return _symbol;\n1183-return-167-167", method="symbol()", type_label=return];
1185 [label="168_ function transferTo_txorigin19(address to, uint amount,address owner_txorigin19) public {\n  require(tx.origin == owner_txorigin19);\n  to.call.value(amount);\n}\n1185-function_definition-169-172", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=function_definition];
1201 [label="169_ require(tx.origin == owner_txorigin19);\n1201-expression_statement-170-170", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
1210 [label="170_ to.call.value(amount);\n1210-expression_statement-171-171", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
1219 [label="172_ function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n1219-function_definition-173-175", method="decimals()", type_label=function_definition];
1228 [label="173_ return _decimals;\n1228-return-174-174", method="decimals()", type_label=return];
1230 [label="175_ function withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26) public {\n        require(tx.origin == owner_txorigin26);\n        _recipient.transfer(address(this).balance);\n    }\n1230-function_definition-176-179", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=function_definition];
1242 [label="176_ require(tx.origin == owner_txorigin26);\n1242-expression_statement-177-177", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
1251 [label="177_ _recipient.transfer(address(this).balance);\n1251-expression_statement-178-178", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
1262 [label="179_ modifier onlyLollypopAndOwner {\n        require(msg.sender == address(this) || msg.sender == owner);\n        _;\n    }\n1262-expression_statement-180-183", method="", type_label=expression_statement];
1265 [label="180_ require(msg.sender == address(this) || msg.sender == owner);\n1265-expression_statement-181-181", method="", type_label=expression_statement];
1282 [label="181_ _;\n1282-expression_statement-182-182", method="", type_label=expression_statement];
1284 [label="183_ function transferTo_txorigin31(address to, uint amount,address owner_txorigin31) public {\n  require(tx.origin == owner_txorigin31);\n  to.call.value(amount);\n}\n1284-function_definition-184-187", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=function_definition];
1300 [label="184_ require(tx.origin == owner_txorigin31);\n1300-expression_statement-185-185", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
1309 [label="185_ to.call.value(amount);\n1309-expression_statement-186-186", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
1332 [label="188_ function sendto_txorigin13(address payable receiver, uint amount,address owner_txorigin13) public {\n	require (tx.origin == owner_txorigin13);\n	receiver.transfer(amount);\n}\n1332-function_definition-189-192", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=function_definition];
1348 [label="189_ require (tx.origin == owner_txorigin13);\n1348-expression_statement-190-190", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
1357 [label="190_ receiver.transfer(amount);\n1357-expression_statement-191-191", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
1378 [label="193_ function mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account].amount = _balances[account].amount.add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n1378-function_definition-194-199", method="mint(address account,uint256 amount)", type_label=function_definition];
1390 [label="194_ require(account != address(0), \"ERC20: mint to the zero address\");\n1390-expression_statement-195-195", method="mint(address account,uint256 amount)", type_label=expression_statement];
1402 [label="195_ _totalSupply = _totalSupply.add(amount);\n1402-expression_statement-196-196", method="mint(address account,uint256 amount)", type_label=expression_statement];
1411 [label="196_ _balances[account].amount = _balances[account].amount.add(amount);\n1411-expression_statement-197-197", method="mint(address account,uint256 amount)", type_label=expression_statement];
1438 [label="199_ function bug_txorigin20(address owner_txorigin20) public{\n        require(tx.origin == owner_txorigin20);\n    }\n1438-function_definition-200-202", method="bug_txorigin20(address owner_txorigin20)", type_label=function_definition];
1446 [label="200_ require(tx.origin == owner_txorigin20);\n1446-expression_statement-201-201", method="bug_txorigin20(address owner_txorigin20)", type_label=expression_statement];
1455 [label="202_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n1455-function_definition-203-205", method="totalSupply()", type_label=function_definition];
1464 [label="203_ return _totalSupply;\n1464-return-204-204", method="totalSupply()", type_label=return];
1466 [label="205_ function bug_txorigin32(  address owner_txorigin32) public{\n        require(tx.origin == owner_txorigin32);\n    }\n1466-function_definition-206-208", method="bug_txorigin32(address owner_txorigin32)", type_label=function_definition];
1474 [label="206_ require(tx.origin == owner_txorigin32);\n1474-expression_statement-207-207", method="bug_txorigin32(address owner_txorigin32)", type_label=expression_statement];
1483 [label="208_ function balanceOf(address account) public view returns (uint256) {\n        return _balances[account].amount;\n    }\n1483-function_definition-209-211", method="balanceOf(address account)", type_label=function_definition];
1496 [label="209_ return _balances[account].amount;\n1496-return-210-210", method="balanceOf(address account)", type_label=return];
1502 [label="211_ function withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38) public {\n        require(tx.origin == owner_txorigin38);\n        _recipient.transfer(address(this).balance);\n    }\n1502-function_definition-212-215", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=function_definition];
1514 [label="212_ require(tx.origin == owner_txorigin38);\n1514-expression_statement-213-213", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
1523 [label="213_ _recipient.transfer(address(this).balance);\n1523-expression_statement-214-214", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
1534 [label="215_ function timeOf(address account) public view returns (uint256) {\n        return _balances[account].time;\n    }\n1534-function_definition-216-218", method="timeOf(address account)", type_label=function_definition];
1547 [label="216_ return _balances[account].time;\n1547-return-217-217", method="timeOf(address account)", type_label=return];
1553 [label="218_ function bug_txorigin4(address owner_txorigin4) public{\n        require(tx.origin == owner_txorigin4);\n    }\n1553-function_definition-219-221", method="bug_txorigin4(address owner_txorigin4)", type_label=function_definition];
1561 [label="219_ require(tx.origin == owner_txorigin4);\n1561-expression_statement-220-220", method="bug_txorigin4(address owner_txorigin4)", type_label=expression_statement];
1570 [label="221_ function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n1570-function_definition-222-225", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
1586 [label="222_ _transfer(msg.sender, recipient, amount);\n1586-expression_statement-223-223", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1597 [label="223_ return true;\n1597-return-224-224", method="transfer(address recipient,uint256 amount)", type_label=return];
1600 [label="225_ function transferTo_txorigin7(address to, uint amount,address owner_txorigin7) public {\n  require(tx.origin == owner_txorigin7);\n  to.call.value(amount);\n}\n1600-function_definition-226-229", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=function_definition];
1616 [label="226_ require(tx.origin == owner_txorigin7);\n1616-expression_statement-227-227", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
1625 [label="227_ to.call.value(amount);\n1625-expression_statement-228-228", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
1634 [label="229_ function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n    require(receivers.length == amounts.length);\n    for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }\n  }\n1634-function_definition-230-235", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=function_definition];
1648 [label="230_ require(receivers.length == amounts.length);\n1648-expression_statement-231-231", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1659 [label="231_ for(i < receivers.length;;i++)\n1659-for-232-234", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=for];
3935 [label="231_ end_loop", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=end_loop];
1672 [label="231_ i++\n1672-expression_statement-232-232", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1675 [label="232_ transfer(receivers[i], amounts[i]);\n1675-expression_statement-233-233", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1686 [label="235_ function transferTo_txorigin23(address to, uint amount,address owner_txorigin23) public {\n  require(tx.origin == owner_txorigin23);\n  to.call.value(amount);\n}\n1686-function_definition-236-239", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=function_definition];
1702 [label="236_ require(tx.origin == owner_txorigin23);\n1702-expression_statement-237-237", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
1711 [label="237_ to.call.value(amount);\n1711-expression_statement-238-238", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
1720 [label="239_ function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n1720-function_definition-240-242", method="allowance(address owner,address spender)", type_label=function_definition];
1737 [label="240_ return _allowances[owner][spender];\n1737-return-241-241", method="allowance(address owner,address spender)", type_label=return];
1743 [label="242_ function withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14) public {\n        require(tx.origin == owner_txorigin14);\n        _recipient.transfer(address(this).balance);\n    }\n1743-function_definition-243-246", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=function_definition];
1755 [label="243_ require(tx.origin == owner_txorigin14);\n1755-expression_statement-244-244", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
1764 [label="244_ _recipient.transfer(address(this).balance);\n1764-expression_statement-245-245", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
1775 [label="246_ function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n1775-function_definition-247-250", method="approve(address spender,uint256 value)", type_label=function_definition];
1791 [label="247_ _approve(msg.sender, spender, value);\n1791-expression_statement-248-248", method="approve(address spender,uint256 value)", type_label=expression_statement];
1802 [label="248_ return true;\n1802-return-249-249", method="approve(address spender,uint256 value)", type_label=return];
1805 [label="250_ function withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30) public {\n        require(tx.origin == owner_txorigin30);\n        _recipient.transfer(address(this).balance);\n    }\n1805-function_definition-251-254", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=function_definition];
1817 [label="251_ require(tx.origin == owner_txorigin30);\n1817-expression_statement-252-252", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
1826 [label="252_ _recipient.transfer(address(this).balance);\n1826-expression_statement-253-253", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
1837 [label="254_ function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n1837-function_definition-255-259", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
1857 [label="255_ _transfer(sender, recipient, amount);\n1857-expression_statement-256-256", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1866 [label="256_ _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n1866-expression_statement-257-257", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1888 [label="257_ return true;\n1888-return-258-258", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=return];
1891 [label="259_ function bug_txorigin8(address owner_txorigin8) public{\n        require(tx.origin == owner_txorigin8);\n    }\n1891-function_definition-260-262", method="bug_txorigin8(address owner_txorigin8)", type_label=function_definition];
1899 [label="260_ require(tx.origin == owner_txorigin8);\n1899-expression_statement-261-261", method="bug_txorigin8(address owner_txorigin8)", type_label=expression_statement];
1908 [label="262_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n1908-function_definition-263-266", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
1924 [label="263_ _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n1924-expression_statement-264-264", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
1946 [label="264_ return true;\n1946-return-265-265", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
1949 [label="266_ function transferTo_txorigin39(address to, uint amount,address owner_txorigin39) public {\n  require(tx.origin == owner_txorigin39);\n  to.call.value(amount);\n}\n1949-function_definition-267-270", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=function_definition];
1965 [label="267_ require(tx.origin == owner_txorigin39);\n1965-expression_statement-268-268", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
1974 [label="268_ to.call.value(amount);\n1974-expression_statement-269-269", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
1983 [label="270_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n1983-function_definition-271-274", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
1999 [label="271_ _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n1999-expression_statement-272-272", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
2021 [label="272_ return true;\n2021-return-273-273", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
2024 [label="274_ function bug_txorigin36(  address owner_txorigin36) public{\n        require(tx.origin == owner_txorigin36);\n    }\n2024-function_definition-275-277", method="bug_txorigin36(address owner_txorigin36)", type_label=function_definition];
2032 [label="275_ require(tx.origin == owner_txorigin36);\n2032-expression_statement-276-276", method="bug_txorigin36(address owner_txorigin36)", type_label=expression_statement];
2041 [label="277_ function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account].amount = _balances[account].amount.sub(value);\n        emit Transfer(account, address(0), value);\n    }\n2041-function_definition-278-283", method="_burn(address account,uint256 value)", type_label=function_definition];
2053 [label="278_ require(account != address(0), \"ERC20: burn from the zero address\");\n2053-expression_statement-279-279", method="_burn(address account,uint256 value)", type_label=expression_statement];
2065 [label="279_ _totalSupply = _totalSupply.sub(value);\n2065-expression_statement-280-280", method="_burn(address account,uint256 value)", type_label=expression_statement];
2074 [label="280_ _balances[account].amount = _balances[account].amount.sub(value);\n2074-expression_statement-281-281", method="_burn(address account,uint256 value)", type_label=expression_statement];
2101 [label="283_ function transferTo_txorigin35(address to, uint amount,address owner_txorigin35) public {\n  require(tx.origin == owner_txorigin35);\n  to.call.value(amount);\n}\n2101-function_definition-284-287", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=function_definition];
2117 [label="284_ require(tx.origin == owner_txorigin35);\n2117-expression_statement-285-285", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
2126 [label="285_ to.call.value(amount);\n2126-expression_statement-286-286", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
2135 [label="287_ function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n2135-function_definition-288-293", method="_approve(address owner,address spender,uint256 value)", type_label=function_definition];
2151 [label="288_ require(owner != address(0), \"ERC20: approve from the zero address\");\n2151-expression_statement-289-289", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
2163 [label="289_ require(spender != address(0), \"ERC20: approve to the zero address\");\n2163-expression_statement-290-290", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
2175 [label="290_ _allowances[owner][spender] = value;\n2175-expression_statement-291-291", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
2191 [label="293_ function bug_txorigin40(address owner_txorigin40) public{\n        require(tx.origin == owner_txorigin40);\n    }\n2191-function_definition-294-296", method="bug_txorigin40(address owner_txorigin40)", type_label=function_definition];
2199 [label="294_ require(tx.origin == owner_txorigin40);\n2199-expression_statement-295-295", method="bug_txorigin40(address owner_txorigin40)", type_label=expression_statement];
2208 [label="296_ function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n2208-function_definition-297-300", method="_burnFrom(address account,uint256 amount)", type_label=function_definition];
2220 [label="297_ _burn(account, amount);\n2220-expression_statement-298-298", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
2227 [label="298_ _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n2227-expression_statement-299-299", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
2249 [label="300_ function sendto_txorigin33(address payable receiver, uint amount,address owner_txorigin33) public {\n	require (tx.origin == owner_txorigin33);\n	receiver.transfer(amount);\n}\n2249-function_definition-301-304", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=function_definition];
2265 [label="301_ require (tx.origin == owner_txorigin33);\n2265-expression_statement-302-302", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
2274 [label="302_ receiver.transfer(amount);\n2274-expression_statement-303-303", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 21  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 51  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 60  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
133 -> 143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
147 -> 163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
163 -> 172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
217 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
219 -> 236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
246 -> 254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
254 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
256 -> 273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
273 -> 278  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
273 -> 2549  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2549 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 2549  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
278 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
280 -> 288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
288 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
302 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
319 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
337 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
339 -> 356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
356 -> 366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
381 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
562 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
574 -> 583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
704 -> 720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
720 -> 729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
754 -> 762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
762 -> 770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
770 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
790 -> 806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
806 -> 815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
822 -> 839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
839 -> 850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 855  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
850 -> 3126  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3126 -> 859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 3126  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
859 -> 873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
873 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
875 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
909 -> 925  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
925 -> 937  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
937 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
962 -> 975  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
975 -> 985  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
975 -> 3251  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3251 -> 1006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 3251  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1006 -> 1020  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1006 -> 3282  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3282 -> 1041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1020 -> 1034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1034 -> 3282  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1041 -> 1058  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1058 -> 1075  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1075 -> 1083  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1099 -> 1115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1115 -> 1124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1131 -> 1140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1140 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1142 -> 1158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1158 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1174 -> 1183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1183 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1185 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1201 -> 1210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1219 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1230 -> 1242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1242 -> 1251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1265 -> 1282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1284 -> 1300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1300 -> 1309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1332 -> 1348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1348 -> 1357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1378 -> 1390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1390 -> 1402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1402 -> 1411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1438 -> 1446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1455 -> 1464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1464 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1466 -> 1474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1483 -> 1496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1496 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1502 -> 1514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1514 -> 1523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1534 -> 1547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1547 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1553 -> 1561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1570 -> 1586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1586 -> 1597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1597 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1600 -> 1616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1616 -> 1625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1634 -> 1648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1648 -> 1659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1659 -> 1675  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1659 -> 3935  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3935 -> 1686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1672 -> 1659  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1675 -> 1672  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1686 -> 1702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1702 -> 1711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1720 -> 1737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1737 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1743 -> 1755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1755 -> 1764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1775 -> 1791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1791 -> 1802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1802 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1805 -> 1817  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1817 -> 1826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1837 -> 1857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1857 -> 1866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1866 -> 1888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1888 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1891 -> 1899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1908 -> 1924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1924 -> 1946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1946 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1949 -> 1965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1965 -> 1974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1983 -> 1999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1999 -> 2021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2021 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2024 -> 2032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2041 -> 2053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2053 -> 2065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2065 -> 2074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2101 -> 2117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2117 -> 2126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2135 -> 2151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2151 -> 2163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2163 -> 2175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2191 -> 2199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2208 -> 2220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2220 -> 2227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2249 -> 2265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2265 -> 2274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
