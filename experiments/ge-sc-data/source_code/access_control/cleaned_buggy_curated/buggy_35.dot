digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n50-function_definition-8-12", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ require(b <= a, \"SafeMath: subtraction overflow\");\n67-expression_statement-9-9", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
77 [label="9_ uint256 c = a - b;\n77-new_variable-10-10", method="sub(uint256 a,uint256 b)", type_label=new_variable];
85 [label="10_ return c;\n85-return-11-11", method="sub(uint256 a,uint256 b)", type_label=return];
87 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n87-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
104 [label="13_ if_a == 0\n104-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
3079 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
109 [label="14_ return 0;\n109-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
111 [label="16_ uint256 c = a * b;\n111-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
119 [label="17_ require(c / a == b, \"SafeMath: multiplication overflow\");\n119-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
131 [label="18_ return c;\n131-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
133 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n133-function_definition-21-25", method="div(uint256 a,uint256 b)", type_label=function_definition];
150 [label="21_ require(b > 0, \"SafeMath: division by zero\");\n150-expression_statement-22-22", method="div(uint256 a,uint256 b)", type_label=expression_statement];
160 [label="22_ uint256 c = a / b;\n160-new_variable-23-23", method="div(uint256 a,uint256 b)", type_label=new_variable];
168 [label="23_ return c;\n168-return-24-24", method="div(uint256 a,uint256 b)", type_label=return];
170 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n170-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
187 [label="26_ require(b != 0, \"SafeMath: modulo by zero\");\n187-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
197 [label="27_ return a % b;\n197-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
204 [label="31_ function transferTo_txorigin15(address to, uint amount,address owner_txorigin15) public {\n  require(tx.origin == owner_txorigin15);\n  to.call.value(amount);\n}\n204-function_definition-32-35", method="transferTo_txorigin15(address to,uint amount,address owner_txorigin15)", type_label=function_definition];
220 [label="32_ require(tx.origin == owner_txorigin15);\n220-expression_statement-33-33", method="transferTo_txorigin15(address to,uint amount,address owner_txorigin15)", type_label=expression_statement];
229 [label="33_ to.call.value(amount);\n229-expression_statement-34-34", method="transferTo_txorigin15(address to,uint amount,address owner_txorigin15)", type_label=expression_statement];
238 [label="35_ address public owner;\n238-new_variable-36-36", method="", type_label=new_variable];
243 [label="36_ function bug_txorigin28(  address owner_txorigin28) public{\n        require(tx.origin == owner_txorigin28);\n    }\n243-function_definition-37-39", method="bug_txorigin28(address owner_txorigin28)", type_label=function_definition];
251 [label="37_ require(tx.origin == owner_txorigin28);\n251-expression_statement-38-38", method="bug_txorigin28(address owner_txorigin28)", type_label=expression_statement];
260 [label="39_ address private newOwner;\n260-new_variable-40-40", method="", type_label=new_variable];
265 [label="40_ function bug_txorigin36(  address owner_txorigin36) public{\n        require(tx.origin == owner_txorigin36);\n    }\n265-function_definition-41-43", method="bug_txorigin36(address owner_txorigin36)", type_label=function_definition];
273 [label="41_ require(tx.origin == owner_txorigin36);\n273-expression_statement-42-42", method="bug_txorigin36(address owner_txorigin36)", type_label=expression_statement];
298 [label="45_ owner = msg.sender;\n298-expression_statement-46-46", method="", type_label=expression_statement];
304 [label="47_ function sendto_txorigin1(address payable receiver, uint amount,address owner_txorigin1) public {\n	require (tx.origin == owner_txorigin1);\n	receiver.transfer(amount);\n}\n304-function_definition-48-51", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=function_definition];
320 [label="48_ require (tx.origin == owner_txorigin1);\n320-expression_statement-49-49", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=expression_statement];
329 [label="49_ receiver.transfer(amount);\n329-expression_statement-50-50", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=expression_statement];
336 [label="51_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n336-expression_statement-52-55", method="", type_label=expression_statement];
339 [label="52_ require(msg.sender == owner);\n339-expression_statement-53-53", method="", type_label=expression_statement];
348 [label="53_ _;\n348-expression_statement-54-54", method="", type_label=expression_statement];
350 [label="55_ function onlyOwnerTransferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n350-function_definition-56-58", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=function_definition];
357 [label="55_ onlyOwner\n357-expression_statement-56-56", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=expression_statement];
360 [label="56_ newOwner = _newOwner;\n360-expression_statement-57-57", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=expression_statement];
364 [label="58_ function withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2) public {\n        require(tx.origin == owner_txorigin2);\n        _recipient.transfer(address(this).balance);\n    }\n364-function_definition-59-62", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=function_definition];
376 [label="59_ require(tx.origin == owner_txorigin2);\n376-expression_statement-60-60", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=expression_statement];
385 [label="60_ _recipient.transfer(address(this).balance);\n385-expression_statement-61-61", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=expression_statement];
396 [label="62_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(now, owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n396-function_definition-63-68", method="acceptOwnership()", type_label=function_definition];
400 [label="63_ require(msg.sender == newOwner);\n400-expression_statement-64-64", method="acceptOwnership()", type_label=expression_statement];
417 [label="65_ owner = newOwner;\n417-expression_statement-66-66", method="acceptOwnership()", type_label=expression_statement];
421 [label="66_ newOwner = address(0);\n421-expression_statement-67-67", method="acceptOwnership()", type_label=expression_statement];
427 [label="68_ function sendto_txorigin17(address payable receiver, uint amount,address owner_txorigin17) public {\n	require (tx.origin == owner_txorigin17);\n	receiver.transfer(amount);\n}\n427-function_definition-69-72", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=function_definition];
443 [label="69_ require (tx.origin == owner_txorigin17);\n443-expression_statement-70-70", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=expression_statement];
452 [label="70_ receiver.transfer(amount);\n452-expression_statement-71-71", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=expression_statement];
462 [label="75_ function transfer(address _to, uint256 _amount) external returns (bool);\n462-function_definition-76-76", method="transfer(address _to,uint256 _amount)", type_label=function_definition];
477 [label="76_ function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\n477-function_definition-77-77", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=function_definition];
507 [label="80_ function withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34) public {\n        require(tx.origin == owner_txorigin34);\n        _recipient.transfer(address(this).balance);\n    }\n507-function_definition-81-84", method="withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34)", type_label=function_definition];
519 [label="81_ require(tx.origin == owner_txorigin34);\n519-expression_statement-82-82", method="withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34)", type_label=expression_statement];
528 [label="82_ _recipient.transfer(address(this).balance);\n528-expression_statement-83-83", method="withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34)", type_label=expression_statement];
539 [label="84_ bool public safeGuard;\n539-new_variable-85-85", method="", type_label=new_variable];
544 [label="85_ function sendto_txorigin21(address payable receiver, uint amount,address owner_txorigin21) public {\n	require (tx.origin == owner_txorigin21);\n	receiver.transfer(amount);\n}\n544-function_definition-86-89", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=function_definition];
560 [label="86_ require (tx.origin == owner_txorigin21);\n560-expression_statement-87-87", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=expression_statement];
569 [label="87_ receiver.transfer(amount);\n569-expression_statement-88-88", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=expression_statement];
576 [label="89_ address public feeAccount;\n576-new_variable-90-90", method="", type_label=new_variable];
581 [label="90_ function withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10) public {\n        require(tx.origin == owner_txorigin10);\n        _recipient.transfer(address(this).balance);\n    }\n581-function_definition-91-94", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=function_definition];
593 [label="91_ require(tx.origin == owner_txorigin10);\n593-expression_statement-92-92", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=expression_statement];
602 [label="92_ _recipient.transfer(address(this).balance);\n602-expression_statement-93-93", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=expression_statement];
613 [label="94_ uint public tradingFee = 50;\n613-new_variable-95-95", method="", type_label=new_variable];
619 [label="95_ function withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22) public {\n        require(tx.origin == owner_txorigin22);\n        _recipient.transfer(address(this).balance);\n    }\n619-function_definition-96-99", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=function_definition];
631 [label="96_ require(tx.origin == owner_txorigin22);\n631-expression_statement-97-97", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=expression_statement];
640 [label="97_ _recipient.transfer(address(this).balance);\n640-expression_statement-98-98", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=expression_statement];
651 [label="99_ mapping (address => mapping (address => uint)) public tokens;\n651-new_variable-100-100", method="", type_label=new_variable];
660 [label="100_ function bug_txorigin12(address owner_txorigin12) public{\n        require(tx.origin == owner_txorigin12);\n    }\n660-function_definition-101-103", method="bug_txorigin12(address owner_txorigin12)", type_label=function_definition];
668 [label="101_ require(tx.origin == owner_txorigin12);\n668-expression_statement-102-102", method="bug_txorigin12(address owner_txorigin12)", type_label=expression_statement];
677 [label="103_ mapping (address => mapping (bytes32 => bool)) public orders;\n677-new_variable-104-104", method="", type_label=new_variable];
686 [label="104_ function transferTo_txorigin11(address to, uint amount,address owner_txorigin11) public {\n  require(tx.origin == owner_txorigin11);\n  to.call.value(amount);\n}\n686-function_definition-105-108", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=function_definition];
702 [label="105_ require(tx.origin == owner_txorigin11);\n702-expression_statement-106-106", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=expression_statement];
711 [label="106_ to.call.value(amount);\n711-expression_statement-107-107", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=expression_statement];
720 [label="108_ mapping (address => mapping (bytes32 => uint)) public orderFills;\n720-new_variable-109-109", method="", type_label=new_variable];
729 [label="109_ function transferTo_txorigin35(address to, uint amount,address owner_txorigin35) public {\n  require(tx.origin == owner_txorigin35);\n  to.call.value(amount);\n}\n729-function_definition-110-113", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=function_definition];
745 [label="110_ require(tx.origin == owner_txorigin35);\n745-expression_statement-111-111", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
754 [label="111_ to.call.value(amount);\n754-expression_statement-112-112", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
797 [label="114_ function bug_txorigin40(address owner_txorigin40) public{\n        require(tx.origin == owner_txorigin40);\n    }\n797-function_definition-115-117", method="bug_txorigin40(address owner_txorigin40)", type_label=function_definition];
805 [label="115_ require(tx.origin == owner_txorigin40);\n805-expression_statement-116-116", method="bug_txorigin40(address owner_txorigin40)", type_label=expression_statement];
860 [label="118_ function sendto_txorigin33(address payable receiver, uint amount,address owner_txorigin33) public {\n	require (tx.origin == owner_txorigin33);\n	receiver.transfer(amount);\n}\n860-function_definition-119-122", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=function_definition];
876 [label="119_ require (tx.origin == owner_txorigin33);\n876-expression_statement-120-120", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
885 [label="120_ receiver.transfer(amount);\n885-expression_statement-121-121", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
922 [label="123_ function transferTo_txorigin27(address to, uint amount,address owner_txorigin27) public {\n  require(tx.origin == owner_txorigin27);\n  to.call.value(amount);\n}\n922-function_definition-124-127", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=function_definition];
938 [label="124_ require(tx.origin == owner_txorigin27);\n938-expression_statement-125-125", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
947 [label="125_ to.call.value(amount);\n947-expression_statement-126-126", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
978 [label="128_ function transferTo_txorigin31(address to, uint amount,address owner_txorigin31) public {\n  require(tx.origin == owner_txorigin31);\n  to.call.value(amount);\n}\n978-function_definition-129-132", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=function_definition];
994 [label="129_ require(tx.origin == owner_txorigin31);\n994-expression_statement-130-130", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
1003 [label="130_ to.call.value(amount);\n1003-expression_statement-131-131", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
1034 [label="133_ function sendto_txorigin13(address payable receiver, uint amount,address owner_txorigin13) public {\n	require (tx.origin == owner_txorigin13);\n	receiver.transfer(amount);\n}\n1034-function_definition-134-137", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=function_definition];
1050 [label="134_ require (tx.origin == owner_txorigin13);\n1050-expression_statement-135-135", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
1059 [label="135_ receiver.transfer(amount);\n1059-expression_statement-136-136", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
1078 [label="139_ feeAccount = msg.sender;\n1078-expression_statement-140-140", method="", type_label=expression_statement];
1084 [label="141_ function sendto_txorigin37(address payable receiver, uint amount,address owner_txorigin37) public {\n	require (tx.origin == owner_txorigin37);\n	receiver.transfer(amount);\n}\n1084-function_definition-142-145", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=function_definition];
1100 [label="142_ require (tx.origin == owner_txorigin37);\n1100-expression_statement-143-143", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=expression_statement];
1109 [label="143_ receiver.transfer(amount);\n1109-expression_statement-144-144", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=expression_statement];
1116 [label="145_ function changeSafeguardStatus() onlyOwner public\n    {\n        if (safeGuard == false)\n        {\n            safeGuard = true;\n        }\n        else\n        {\n            safeGuard = false;    \n        }\n    }\n1116-function_definition-146-156", method="changeSafeguardStatus()", type_label=function_definition];
1118 [label="145_ onlyOwner\n1118-expression_statement-146-146", method="changeSafeguardStatus()", type_label=expression_statement];
1122 [label="147_ if_safeGuard == false\n1122-if-148-155", method="changeSafeguardStatus()", type_label=if];
4097 [label="147_ end_if", method="changeSafeguardStatus()", type_label=end_if];
1128 [label="149_ safeGuard = true;\n1128-expression_statement-150-150", method="changeSafeguardStatus()", type_label=expression_statement];
1134 [label="153_ safeGuard = false;\n1134-expression_statement-154-154", method="changeSafeguardStatus()", type_label=expression_statement];
1139 [label="156_ function transferTo_txorigin3(address to, uint amount,address owner_txorigin3) public {\n  require(tx.origin == owner_txorigin3);\n  to.call.value(amount);\n}\n1139-function_definition-157-160", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=function_definition];
1155 [label="157_ require(tx.origin == owner_txorigin3);\n1155-expression_statement-158-158", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=expression_statement];
1164 [label="158_ to.call.value(amount);\n1164-expression_statement-159-159", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=expression_statement];
1173 [label="160_ function calculatePercentage(uint256 PercentOf, uint256 percentTo ) internal pure returns (uint256) \n    {\n        uint256 factor = 10000;\n        require(percentTo <= factor);\n        uint256 c = PercentOf.mul(percentTo).div(factor);\n        return c;\n    }\n1173-function_definition-161-167", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=function_definition];
1190 [label="162_ uint256 factor = 10000;\n1190-new_variable-163-163", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=new_variable];
1196 [label="163_ require(percentTo <= factor);\n1196-expression_statement-164-164", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=expression_statement];
1203 [label="164_ uint256 c = PercentOf.mul(percentTo).div(factor);\n1203-new_variable-165-165", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=new_variable];
1219 [label="165_ return c;\n1219-return-166-166", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=return];
1221 [label="167_ function sendto_txorigin9(address payable receiver, uint amount,address owner_txorigin9) public {\n	require (tx.origin == owner_txorigin9);\n	receiver.transfer(amount);\n}\n1221-function_definition-168-171", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=function_definition];
1237 [label="168_ require (tx.origin == owner_txorigin9);\n1237-expression_statement-169-169", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
1246 [label="169_ receiver.transfer(amount);\n1246-expression_statement-170-170", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
1253 [label="171_ function changeFeeAccount(address feeAccount_) public onlyOwner {\n    feeAccount = feeAccount_;\n  }\n1253-function_definition-172-174", method="changeFeeAccount(address feeAccount_)", type_label=function_definition];
1260 [label="171_ onlyOwner\n1260-expression_statement-172-172", method="changeFeeAccount(address feeAccount_)", type_label=expression_statement];
1263 [label="172_ feeAccount = feeAccount_;\n1263-expression_statement-173-173", method="changeFeeAccount(address feeAccount_)", type_label=expression_statement];
1267 [label="174_ function sendto_txorigin25(address payable receiver, uint amount,address owner_txorigin25) public {\n	require (tx.origin == owner_txorigin25);\n	receiver.transfer(amount);\n}\n1267-function_definition-175-178", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=function_definition];
1283 [label="175_ require (tx.origin == owner_txorigin25);\n1283-expression_statement-176-176", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
1292 [label="176_ receiver.transfer(amount);\n1292-expression_statement-177-177", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
1299 [label="178_ function changetradingFee(uint tradingFee_) public onlyOwner{\n    tradingFee = tradingFee_;\n  }\n1299-function_definition-179-181", method="changetradingFee(uint tradingFee_)", type_label=function_definition];
1306 [label="178_ onlyOwner\n1306-expression_statement-179-179", method="changetradingFee(uint tradingFee_)", type_label=expression_statement];
1309 [label="179_ tradingFee = tradingFee_;\n1309-expression_statement-180-180", method="changetradingFee(uint tradingFee_)", type_label=expression_statement];
1313 [label="181_ function transferTo_txorigin19(address to, uint amount,address owner_txorigin19) public {\n  require(tx.origin == owner_txorigin19);\n  to.call.value(amount);\n}\n1313-function_definition-182-185", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=function_definition];
1329 [label="182_ require(tx.origin == owner_txorigin19);\n1329-expression_statement-183-183", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
1338 [label="183_ to.call.value(amount);\n1338-expression_statement-184-184", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
1347 [label="185_ function availableTradingFeeOwner() public view returns(uint256){\n      return tokens[address(0)][feeAccount];\n  }\n1347-function_definition-186-188", method="availableTradingFeeOwner()", type_label=function_definition];
1356 [label="186_ return tokens[address(0)][feeAccount];\n1356-return-187-187", method="availableTradingFeeOwner()", type_label=return];
1364 [label="188_ function withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26) public {\n        require(tx.origin == owner_txorigin26);\n        _recipient.transfer(address(this).balance);\n    }\n1364-function_definition-189-192", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=function_definition];
1376 [label="189_ require(tx.origin == owner_txorigin26);\n1376-expression_statement-190-190", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
1385 [label="190_ _recipient.transfer(address(this).balance);\n1385-expression_statement-191-191", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
1396 [label="192_ function withdrawTradingFeeOwner() public onlyOwner returns (string memory){\n      uint256 amount = availableTradingFeeOwner();\n      require (amount > 0, 'Nothing to withdraw');\n      tokens[address(0)][feeAccount] = 0;\n      msg.sender.transfer(amount);\n      emit OwnerWithdrawTradingFee(owner, amount);\n  }\n1396-function_definition-193-199", method="withdrawTradingFeeOwner()", type_label=function_definition];
1399 [label="192_ onlyOwner\n1399-expression_statement-193-193", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1406 [label="193_ uint256 amount = availableTradingFeeOwner();\n1406-new_variable-194-194", method="withdrawTradingFeeOwner()", type_label=new_variable];
1413 [label="194_ require (amount > 0, 'Nothing to withdraw');\n1413-expression_statement-195-195", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1423 [label="195_ tokens[address(0)][feeAccount] = 0;\n1423-expression_statement-196-196", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1433 [label="196_ msg.sender.transfer(amount);\n1433-expression_statement-197-197", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1448 [label="199_ function bug_txorigin20(address owner_txorigin20) public{\n        require(tx.origin == owner_txorigin20);\n    }\n1448-function_definition-200-202", method="bug_txorigin20(address owner_txorigin20)", type_label=function_definition];
1456 [label="200_ require(tx.origin == owner_txorigin20);\n1456-expression_statement-201-201", method="bug_txorigin20(address owner_txorigin20)", type_label=expression_statement];
1465 [label="202_ function deposit() public payable {\n    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);\n    emit Deposit(now, address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);\n  }\n1465-function_definition-203-206", method="deposit()", type_label=function_definition];
1470 [label="203_ tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);\n1470-expression_statement-204-204", method="deposit()", type_label=expression_statement];
1523 [label="206_ function bug_txorigin32(  address owner_txorigin32) public{\n        require(tx.origin == owner_txorigin32);\n    }\n1523-function_definition-207-209", method="bug_txorigin32(address owner_txorigin32)", type_label=function_definition];
1531 [label="207_ require(tx.origin == owner_txorigin32);\n1531-expression_statement-208-208", method="bug_txorigin32(address owner_txorigin32)", type_label=expression_statement];
1540 [label="209_ function withdraw(uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    require(tokens[address(0)][msg.sender] >= amount);\n    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);\n    msg.sender.transfer(amount);\n    emit Withdraw(now, address(0), msg.sender, amount, tokens[address(0)][msg.sender]);\n  }\n1540-function_definition-210-216", method="withdraw(uint amount)", type_label=function_definition];
1548 [label="210_ require(!safeGuard,\"System Paused by Admin\");\n1548-expression_statement-211-211", method="withdraw(uint amount)", type_label=expression_statement];
1557 [label="211_ require(tokens[address(0)][msg.sender] >= amount);\n1557-expression_statement-212-212", method="withdraw(uint amount)", type_label=expression_statement];
1572 [label="212_ tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);\n1572-expression_statement-213-213", method="withdraw(uint amount)", type_label=expression_statement];
1597 [label="213_ msg.sender.transfer(amount);\n1597-expression_statement-214-214", method="withdraw(uint amount)", type_label=expression_statement];
1630 [label="216_ function withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38) public {\n        require(tx.origin == owner_txorigin38);\n        _recipient.transfer(address(this).balance);\n    }\n1630-function_definition-217-220", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=function_definition];
1642 [label="217_ require(tx.origin == owner_txorigin38);\n1642-expression_statement-218-218", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
1651 [label="218_ _recipient.transfer(address(this).balance);\n1651-expression_statement-219-219", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
1662 [label="220_ function depositToken(address token, uint amount) public {\n    require(token!=address(0));\n    require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount));\n    tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\n    emit Deposit(now, token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n1662-function_definition-221-226", method="depositToken(address token,uint amount)", type_label=function_definition];
1674 [label="221_ require(token!=address(0));\n1674-expression_statement-222-222", method="depositToken(address token,uint amount)", type_label=expression_statement];
1683 [label="222_ require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount));\n1683-expression_statement-223-223", method="depositToken(address token,uint amount)", type_label=expression_statement];
1704 [label="223_ tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\n1704-expression_statement-224-224", method="depositToken(address token,uint amount)", type_label=expression_statement];
1745 [label="226_ function bug_txorigin4(address owner_txorigin4) public{\n        require(tx.origin == owner_txorigin4);\n    }\n1745-function_definition-227-229", method="bug_txorigin4(address owner_txorigin4)", type_label=function_definition];
1753 [label="227_ require(tx.origin == owner_txorigin4);\n1753-expression_statement-228-228", method="bug_txorigin4(address owner_txorigin4)", type_label=expression_statement];
1762 [label="229_ function withdrawToken(address token, uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    require(token!=address(0));\n    require(tokens[token][msg.sender] >= amount);\n    tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\n	  ERC20Essential(token).transfer(msg.sender, amount);\n    emit Withdraw(now, token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n1762-function_definition-230-237", method="withdrawToken(address token,uint amount)", type_label=function_definition];
1774 [label="230_ require(!safeGuard,\"System Paused by Admin\");\n1774-expression_statement-231-231", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1783 [label="231_ require(token!=address(0));\n1783-expression_statement-232-232", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1792 [label="232_ require(tokens[token][msg.sender] >= amount);\n1792-expression_statement-233-233", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1805 [label="233_ tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\n1805-expression_statement-234-234", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1826 [label="234_ ERC20Essential(token).transfer(msg.sender, amount);\n1826-expression_statement-235-235", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1860 [label="237_ function transferTo_txorigin7(address to, uint amount,address owner_txorigin7) public {\n  require(tx.origin == owner_txorigin7);\n  to.call.value(amount);\n}\n1860-function_definition-238-241", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=function_definition];
1876 [label="238_ require(tx.origin == owner_txorigin7);\n1876-expression_statement-239-239", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
1885 [label="239_ to.call.value(amount);\n1885-expression_statement-240-240", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
1894 [label="241_ function balanceOf(address token, address user) public view returns (uint) {\n    return tokens[token][user];\n  }\n1894-function_definition-242-244", method="balanceOf(address token,address user)", type_label=function_definition];
1911 [label="242_ return tokens[token][user];\n1911-return-243-243", method="balanceOf(address token,address user)", type_label=return];
1917 [label="244_ function transferTo_txorigin23(address to, uint amount,address owner_txorigin23) public {\n  require(tx.origin == owner_txorigin23);\n  to.call.value(amount);\n}\n1917-function_definition-245-248", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=function_definition];
1933 [label="245_ require(tx.origin == owner_txorigin23);\n1933-expression_statement-246-246", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
1942 [label="246_ to.call.value(amount);\n1942-expression_statement-247-247", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
1951 [label="248_ function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce) public {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    orders[msg.sender][hash] = true;\n    emit Order(now, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender);\n  }\n1951-function_definition-249-253", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=function_definition];
1979 [label="249_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n1979-new_variable-250-250", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=new_variable];
2005 [label="250_ orders[msg.sender][hash] = true;\n2005-expression_statement-251-251", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=expression_statement];
2036 [label="253_ function withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14) public {\n        require(tx.origin == owner_txorigin14);\n        _recipient.transfer(address(this).balance);\n    }\n2036-function_definition-254-257", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=function_definition];
2048 [label="254_ require(tx.origin == owner_txorigin14);\n2048-expression_statement-255-255", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
2057 [label="255_ _recipient.transfer(address(this).balance);\n2057-expression_statement-256-256", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
2068 [label="257_ function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    require((\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires &&\n      orderFills[user][hash].add(amount) <= amountGet\n    ));\n    tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n    orderFills[user][hash] = orderFills[user][hash].add(amount);\n    emit Trade(now, tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender);\n  }\n2068-function_definition-258-269", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=function_definition];
2116 [label="258_ require(!safeGuard,\"System Paused by Admin\");\n2116-expression_statement-259-259", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
2125 [label="259_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2125-new_variable-260-260", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=new_variable];
2151 [label="260_ require((\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires &&\n      orderFills[user][hash].add(amount) <= amountGet\n    ));\n2151-expression_statement-261-265", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
2205 [label="265_ tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n2205-expression_statement-266-266", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
2220 [label="266_ orderFills[user][hash] = orderFills[user][hash].add(amount);\n2220-expression_statement-267-267", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
2259 [label="269_ function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) internal {\n    uint tradingFeeXfer = calculatePercentage(amount,tradingFee);\n    tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer));\n    tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer));\n    tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer);\n    tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet);\n    tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet);\n  }\n2259-function_definition-270-277", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=function_definition];
2287 [label="270_ uint tradingFeeXfer = calculatePercentage(amount,tradingFee);\n2287-new_variable-271-271", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=new_variable];
2298 [label="271_ tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer));\n2298-expression_statement-272-272", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2324 [label="272_ tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer));\n2324-expression_statement-273-273", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2346 [label="273_ tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer);\n2346-expression_statement-274-274", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2367 [label="274_ tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet);\n2367-expression_statement-275-275", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2391 [label="275_ tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet);\n2391-expression_statement-276-276", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2419 [label="277_ function withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30) public {\n        require(tx.origin == owner_txorigin30);\n        _recipient.transfer(address(this).balance);\n    }\n2419-function_definition-278-281", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=function_definition];
2431 [label="278_ require(tx.origin == owner_txorigin30);\n2431-expression_statement-279-279", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
2440 [label="279_ _recipient.transfer(address(this).balance);\n2440-expression_statement-280-280", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
2451 [label="281_ function testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) public view returns(bool) {\n    if (!(\n      tokens[tokenGet][sender] >= amount &&\n      availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount\n    )) return false;\n    return true;\n  }\n2451-function_definition-282-288", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=function_definition];
2508 [label="282_ if\n2508-if-283-286", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=if];
5483 [label="282_ end_if", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=end_if];
2543 [label="285_ return false;\n2543-return-286-286", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=return];
2546 [label="286_ return true;\n2546-return-287-287", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=return];
2549 [label="288_ function bug_txorigin8(address owner_txorigin8) public{\n        require(tx.origin == owner_txorigin8);\n    }\n2549-function_definition-289-291", method="bug_txorigin8(address owner_txorigin8)", type_label=function_definition];
2557 [label="289_ require(tx.origin == owner_txorigin8);\n2557-expression_statement-290-290", method="bug_txorigin8(address owner_txorigin8)", type_label=expression_statement];
2566 [label="291_ function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) public view returns(uint) {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    uint available1;\n    if (!(\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires\n    )) return 0;\n    available1 = tokens[tokenGive][user].mul(amountGet) / amountGive;\n    if (amountGet.sub(orderFills[user][hash])<available1) return amountGet.sub(orderFills[user][hash]);\n    return available1;\n  }\n2566-function_definition-292-302", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
2615 [label="292_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2615-new_variable-293-293", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2641 [label="293_ uint available1;\n2641-new_variable-294-294", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2646 [label="294_ if\n2646-if-295-298", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=if];
5621 [label="294_ end_if", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
2685 [label="297_ return 0;\n2685-return-298-298", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
2687 [label="298_ available1 = tokens[tokenGive][user].mul(amountGet) / amountGive;\n2687-expression_statement-299-299", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2702 [label="299_ if_amountGet.sub(orderFills[user][hash])<available1\n2702-if-300-300", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=if];
5677 [label="299_ end_if", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
2715 [label="299_ return amountGet.sub(orderFills[user][hash]);\n2715-return-300-300", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
2726 [label="300_ return available1;\n2726-return-301-301", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
2728 [label="302_ function amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user) public view returns(uint) {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    return orderFills[user][hash];\n  }\n2728-function_definition-303-306", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=function_definition];
2765 [label="303_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2765-new_variable-304-304", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=new_variable];
2791 [label="304_ return orderFills[user][hash];\n2791-return-305-305", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=return];
2797 [label="306_ function transferTo_txorigin39(address to, uint amount,address owner_txorigin39) public {\n  require(tx.origin == owner_txorigin39);\n  to.call.value(amount);\n}\n2797-function_definition-307-310", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=function_definition];
2813 [label="307_ require(tx.origin == owner_txorigin39);\n2813-expression_statement-308-308", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
2822 [label="308_ to.call.value(amount);\n2822-expression_statement-309-309", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
2831 [label="310_ function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    require((orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == msg.sender));\n    orderFills[msg.sender][hash] = amountGet;\n    emit Cancel(now, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);\n  }\n2831-function_definition-311-317", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
2871 [label="311_ require(!safeGuard,\"System Paused by Admin\");\n2871-expression_statement-312-312", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2880 [label="312_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2880-new_variable-313-313", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2906 [label="313_ require((orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == msg.sender));\n2906-expression_statement-314-314", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2944 [label="314_ orderFills[msg.sender][hash] = amountGet;\n2944-expression_statement-315-315", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
87 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 109  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
104 -> 3079  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3079 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 3079  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
109 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
204 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
243 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
265 -> 273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
376 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
443 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
507 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
560 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
581 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
619 -> 631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
631 -> 640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
660 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
686 -> 702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
702 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
745 -> 754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
797 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
860 -> 876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
876 -> 885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
938 -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
978 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 1003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1034 -> 1050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1050 -> 1059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1100 -> 1109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1116 -> 1122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1122 -> 1128  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1122 -> 1134  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4097 -> 1139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1128 -> 4097  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1134 -> 4097  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1139 -> 1155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1155 -> 1164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1173 -> 1190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1190 -> 1196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1196 -> 1203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1203 -> 1219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1219 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1221 -> 1237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 1246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1253 -> 1263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1267 -> 1283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 1292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1299 -> 1309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1313 -> 1329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1329 -> 1338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1347 -> 1356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1356 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1364 -> 1376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1376 -> 1385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1396 -> 1406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1406 -> 1413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1413 -> 1423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1423 -> 1433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1448 -> 1456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1465 -> 1470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1523 -> 1531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1540 -> 1548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1548 -> 1557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1557 -> 1572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1572 -> 1597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1630 -> 1642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1642 -> 1651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1662 -> 1674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1674 -> 1683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1683 -> 1704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1745 -> 1753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1762 -> 1774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1774 -> 1783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1783 -> 1792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1792 -> 1805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1805 -> 1826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1860 -> 1876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1876 -> 1885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1894 -> 1911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1911 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1917 -> 1933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1933 -> 1942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1951 -> 1979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1979 -> 2005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2036 -> 2048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2048 -> 2057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2068 -> 2116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2116 -> 2125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2125 -> 2151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2151 -> 2205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2205 -> 2220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2259 -> 2287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2287 -> 2298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2298 -> 2324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2324 -> 2346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2346 -> 2367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2367 -> 2391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2419 -> 2431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2431 -> 2440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2451 -> 2508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2508 -> 2543  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2508 -> 5483  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5483 -> 2546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2543 -> 5483  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2543 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2546 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2549 -> 2557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2566 -> 2615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2615 -> 2641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2641 -> 2646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2646 -> 2685  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2646 -> 5621  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5621 -> 2687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2685 -> 5621  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2685 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2687 -> 2702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2702 -> 2715  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2702 -> 5677  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5677 -> 2726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2715 -> 5677  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2715 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2726 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2728 -> 2765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2765 -> 2791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2791 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2797 -> 2813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2813 -> 2822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2831 -> 2871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2871 -> 2880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2880 -> 2906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2906 -> 2944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
