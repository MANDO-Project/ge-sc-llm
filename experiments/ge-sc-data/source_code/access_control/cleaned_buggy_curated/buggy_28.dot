digraph  {
13 [label="2_ function totalSupply() external view returns (uint256);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ function balanceOf(address who) external view returns (uint256);\n21-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
33 [label="4_ function allowance(address owner, address spender) external view returns (uint256);\n33-function_definition-5-5", method="allowance(address owner,address spender)", type_label=function_definition];
49 [label="5_ function transfer(address to, uint256 value) external returns (bool);\n49-function_definition-6-6", method="transfer(address to,uint256 value)", type_label=function_definition];
64 [label="6_ function approve(address spender, uint256 value) external returns (bool);\n64-function_definition-7-7", method="approve(address spender,uint256 value)", type_label=function_definition];
79 [label="7_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n79-function_definition-8-8", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
129 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n129-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
146 [label="13_ if_a == 0\n146-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
2202 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
151 [label="14_ return 0;\n151-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
153 [label="16_ uint256 c = a * b;\n153-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
161 [label="17_ assert(c / a == b);\n161-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
170 [label="18_ return c;\n170-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
172 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n172-function_definition-21-24", method="div(uint256 a,uint256 b)", type_label=function_definition];
189 [label="21_ uint256 c = a / b;\n189-new_variable-22-22", method="div(uint256 a,uint256 b)", type_label=new_variable];
197 [label="22_ return c;\n197-return-23-23", method="div(uint256 a,uint256 b)", type_label=return];
199 [label="24_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n199-function_definition-25-28", method="sub(uint256 a,uint256 b)", type_label=function_definition];
216 [label="25_ assert(b <= a);\n216-expression_statement-26-26", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
223 [label="26_ return a - b;\n223-return-27-27", method="sub(uint256 a,uint256 b)", type_label=return];
227 [label="28_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n227-function_definition-29-33", method="add(uint256 a,uint256 b)", type_label=function_definition];
244 [label="29_ uint256 c = a + b;\n244-new_variable-30-30", method="add(uint256 a,uint256 b)", type_label=new_variable];
252 [label="30_ assert(c >= a);\n252-expression_statement-31-31", method="add(uint256 a,uint256 b)", type_label=expression_statement];
259 [label="31_ return c;\n259-return-32-32", method="add(uint256 a,uint256 b)", type_label=return];
261 [label="33_ function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n261-function_definition-34-38", method="ceil(uint256 a,uint256 m)", type_label=function_definition];
278 [label="34_ uint256 c = add(a,m);\n278-new_variable-35-35", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
289 [label="35_ uint256 d = sub(c,1);\n289-new_variable-36-36", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
300 [label="36_ return mul(div(d,m),m);\n300-return-37-37", method="ceil(uint256 a,uint256 m)", type_label=return];
318 [label="40_ function withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22) public {\n        require(tx.origin == owner_txorigin22);\n        _recipient.transfer(address(this).balance);\n    }\n318-function_definition-41-44", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=function_definition];
330 [label="41_ require(tx.origin == owner_txorigin22);\n330-expression_statement-42-42", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=expression_statement];
339 [label="42_ _recipient.transfer(address(this).balance);\n339-expression_statement-43-43", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=expression_statement];
350 [label="44_ string private _name;\n350-new_variable-45-45", method="", type_label=new_variable];
355 [label="45_ function bug_txorigin12(address owner_txorigin12) public{\n        require(tx.origin == owner_txorigin12);\n    }\n355-function_definition-46-48", method="bug_txorigin12(address owner_txorigin12)", type_label=function_definition];
363 [label="46_ require(tx.origin == owner_txorigin12);\n363-expression_statement-47-47", method="bug_txorigin12(address owner_txorigin12)", type_label=expression_statement];
372 [label="48_ string private _symbol;\n372-new_variable-49-49", method="", type_label=new_variable];
377 [label="49_ function transferTo_txorigin11(address to, uint amount,address owner_txorigin11) public {\n  require(tx.origin == owner_txorigin11);\n  to.call.value(amount);\n}\n377-function_definition-50-53", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=function_definition];
393 [label="50_ require(tx.origin == owner_txorigin11);\n393-expression_statement-51-51", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=expression_statement];
402 [label="51_ to.call.value(amount);\n402-expression_statement-52-52", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=expression_statement];
411 [label="53_ uint8 private _decimals;\n411-new_variable-54-54", method="", type_label=new_variable];
430 [label="55_ _name = name;\n430-expression_statement-56-56", method="", type_label=expression_statement];
434 [label="56_ _symbol = symbol;\n434-expression_statement-57-57", method="", type_label=expression_statement];
438 [label="57_ _decimals = decimals;\n438-expression_statement-58-58", method="", type_label=expression_statement];
442 [label="59_ function transferTo_txorigin19(address to, uint amount,address owner_txorigin19) public {\n  require(tx.origin == owner_txorigin19);\n  to.call.value(amount);\n}\n442-function_definition-60-63", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=function_definition];
458 [label="60_ require(tx.origin == owner_txorigin19);\n458-expression_statement-61-61", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
467 [label="61_ to.call.value(amount);\n467-expression_statement-62-62", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
476 [label="63_ function name() public view returns(string memory) {\n    return _name;\n  }\n476-function_definition-64-66", method="name()", type_label=function_definition];
485 [label="64_ return _name;\n485-return-65-65", method="name()", type_label=return];
487 [label="66_ function withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26) public {\n        require(tx.origin == owner_txorigin26);\n        _recipient.transfer(address(this).balance);\n    }\n487-function_definition-67-70", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=function_definition];
499 [label="67_ require(tx.origin == owner_txorigin26);\n499-expression_statement-68-68", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
508 [label="68_ _recipient.transfer(address(this).balance);\n508-expression_statement-69-69", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
519 [label="70_ function symbol() public view returns(string memory) {\n    return _symbol;\n  }\n519-function_definition-71-73", method="symbol()", type_label=function_definition];
528 [label="71_ return _symbol;\n528-return-72-72", method="symbol()", type_label=return];
530 [label="73_ function bug_txorigin20(address owner_txorigin20) public{\n        require(tx.origin == owner_txorigin20);\n    }\n530-function_definition-74-76", method="bug_txorigin20(address owner_txorigin20)", type_label=function_definition];
538 [label="74_ require(tx.origin == owner_txorigin20);\n538-expression_statement-75-75", method="bug_txorigin20(address owner_txorigin20)", type_label=expression_statement];
547 [label="76_ function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n547-function_definition-77-79", method="decimals()", type_label=function_definition];
556 [label="77_ return _decimals;\n556-return-78-78", method="decimals()", type_label=return];
558 [label="79_ function bug_txorigin32(  address owner_txorigin32) public{\n        require(tx.origin == owner_txorigin32);\n    }\n558-function_definition-80-82", method="bug_txorigin32(address owner_txorigin32)", type_label=function_definition];
566 [label="80_ require(tx.origin == owner_txorigin32);\n566-expression_statement-81-81", method="bug_txorigin32(address owner_txorigin32)", type_label=expression_statement];
586 [label="85_ function sendto_txorigin1(address payable receiver, uint amount,address owner_txorigin1) public {\n	require (tx.origin == owner_txorigin1);\n	receiver.transfer(amount);\n}\n586-function_definition-86-89", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=function_definition];
602 [label="86_ require (tx.origin == owner_txorigin1);\n602-expression_statement-87-87", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=expression_statement];
611 [label="87_ receiver.transfer(amount);\n611-expression_statement-88-88", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=expression_statement];
618 [label="89_ mapping (address => uint256) private _balances;\n618-new_variable-90-90", method="", type_label=new_variable];
625 [label="90_ function withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2) public {\n        require(tx.origin == owner_txorigin2);\n        _recipient.transfer(address(this).balance);\n    }\n625-function_definition-91-94", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=function_definition];
637 [label="91_ require(tx.origin == owner_txorigin2);\n637-expression_statement-92-92", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=expression_statement];
646 [label="92_ _recipient.transfer(address(this).balance);\n646-expression_statement-93-93", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=expression_statement];
657 [label="94_ mapping (address => mapping (address => uint256)) private _allowed;\n657-new_variable-95-95", method="", type_label=new_variable];
666 [label="95_ function sendto_txorigin17(address payable receiver, uint amount,address owner_txorigin17) public {\n	require (tx.origin == owner_txorigin17);\n	receiver.transfer(amount);\n}\n666-function_definition-96-99", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=function_definition];
682 [label="96_ require (tx.origin == owner_txorigin17);\n682-expression_statement-97-97", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=expression_statement];
691 [label="97_ receiver.transfer(amount);\n691-expression_statement-98-98", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=expression_statement];
698 [label="99_ string constant tokenName = \"HYDROGEN\";\n698-new_variable-100-100", method="", type_label=new_variable];
704 [label="100_ function sendto_txorigin37(address payable receiver, uint amount,address owner_txorigin37) public {\n	require (tx.origin == owner_txorigin37);\n	receiver.transfer(amount);\n}\n704-function_definition-101-104", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=function_definition];
720 [label="101_ require (tx.origin == owner_txorigin37);\n720-expression_statement-102-102", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=expression_statement];
729 [label="102_ receiver.transfer(amount);\n729-expression_statement-103-103", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=expression_statement];
736 [label="104_ string constant tokenSymbol = \"HGN\";\n736-new_variable-105-105", method="", type_label=new_variable];
742 [label="105_ function transferTo_txorigin3(address to, uint amount,address owner_txorigin3) public {\n  require(tx.origin == owner_txorigin3);\n  to.call.value(amount);\n}\n742-function_definition-106-109", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=function_definition];
758 [label="106_ require(tx.origin == owner_txorigin3);\n758-expression_statement-107-107", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=expression_statement];
767 [label="107_ to.call.value(amount);\n767-expression_statement-108-108", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=expression_statement];
776 [label="109_ uint8  constant tokenDecimals = 4;\n776-new_variable-110-110", method="", type_label=new_variable];
781 [label="110_ function sendto_txorigin9(address payable receiver, uint amount,address owner_txorigin9) public {\n	require (tx.origin == owner_txorigin9);\n	receiver.transfer(amount);\n}\n781-function_definition-111-114", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=function_definition];
797 [label="111_ require (tx.origin == owner_txorigin9);\n797-expression_statement-112-112", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
806 [label="112_ receiver.transfer(amount);\n806-expression_statement-113-113", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
813 [label="114_ uint256 _totalSupply =8000000000;\n813-new_variable-115-115", method="", type_label=new_variable];
818 [label="115_ function sendto_txorigin25(address payable receiver, uint amount,address owner_txorigin25) public {\n	require (tx.origin == owner_txorigin25);\n	receiver.transfer(amount);\n}\n818-function_definition-116-119", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=function_definition];
834 [label="116_ require (tx.origin == owner_txorigin25);\n834-expression_statement-117-117", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
843 [label="117_ receiver.transfer(amount);\n843-expression_statement-118-118", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
850 [label="119_ uint256 public basePercent = 100;\n850-new_variable-120-120", method="", type_label=new_variable];
857 [label="120_ ERC20Detailed(tokenName, tokenSymbol, tokenDecimals)\n857-expression_statement-121-121", method="", type_label=expression_statement];
866 [label="121_ _mint(msg.sender, _totalSupply);\n866-expression_statement-122-122", method="", type_label=expression_statement];
875 [label="123_ function withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38) public {\n        require(tx.origin == owner_txorigin38);\n        _recipient.transfer(address(this).balance);\n    }\n875-function_definition-124-127", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=function_definition];
887 [label="124_ require(tx.origin == owner_txorigin38);\n887-expression_statement-125-125", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
896 [label="125_ _recipient.transfer(address(this).balance);\n896-expression_statement-126-126", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
907 [label="127_ function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n907-function_definition-128-130", method="totalSupply()", type_label=function_definition];
916 [label="128_ return _totalSupply;\n916-return-129-129", method="totalSupply()", type_label=return];
918 [label="130_ function bug_txorigin4(address owner_txorigin4) public{\n        require(tx.origin == owner_txorigin4);\n    }\n918-function_definition-131-133", method="bug_txorigin4(address owner_txorigin4)", type_label=function_definition];
926 [label="131_ require(tx.origin == owner_txorigin4);\n926-expression_statement-132-132", method="bug_txorigin4(address owner_txorigin4)", type_label=expression_statement];
935 [label="133_ function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n935-function_definition-134-136", method="balanceOf(address owner)", type_label=function_definition];
948 [label="134_ return _balances[owner];\n948-return-135-135", method="balanceOf(address owner)", type_label=return];
952 [label="136_ function transferTo_txorigin7(address to, uint amount,address owner_txorigin7) public {\n  require(tx.origin == owner_txorigin7);\n  to.call.value(amount);\n}\n952-function_definition-137-140", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=function_definition];
968 [label="137_ require(tx.origin == owner_txorigin7);\n968-expression_statement-138-138", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
977 [label="138_ to.call.value(amount);\n977-expression_statement-139-139", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
986 [label="140_ function allowance(address owner, address spender) public view returns (uint256) {\n    return _allowed[owner][spender];\n  }\n986-function_definition-141-143", method="allowance(address owner,address spender)", type_label=function_definition];
1003 [label="141_ return _allowed[owner][spender];\n1003-return-142-142", method="allowance(address owner,address spender)", type_label=return];
1009 [label="143_ function transferTo_txorigin23(address to, uint amount,address owner_txorigin23) public {\n  require(tx.origin == owner_txorigin23);\n  to.call.value(amount);\n}\n1009-function_definition-144-147", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=function_definition];
1025 [label="144_ require(tx.origin == owner_txorigin23);\n1025-expression_statement-145-145", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
1034 [label="145_ to.call.value(amount);\n1034-expression_statement-146-146", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
1043 [label="147_ function findtwoPercent(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 twoPercent = roundValue.mul(basePercent).div(5000);\n    return twoPercent;\n  }\n1043-function_definition-148-152", method="findtwoPercent(uint256 value)", type_label=function_definition];
1056 [label="148_ uint256 roundValue = value.ceil(basePercent);\n1056-new_variable-149-149", method="findtwoPercent(uint256 value)", type_label=new_variable];
1067 [label="149_ uint256 twoPercent = roundValue.mul(basePercent).div(5000);\n1067-new_variable-150-150", method="findtwoPercent(uint256 value)", type_label=new_variable];
1083 [label="150_ return twoPercent;\n1083-return-151-151", method="findtwoPercent(uint256 value)", type_label=return];
1085 [label="152_ function withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14) public {\n        require(tx.origin == owner_txorigin14);\n        _recipient.transfer(address(this).balance);\n    }\n1085-function_definition-153-156", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=function_definition];
1097 [label="153_ require(tx.origin == owner_txorigin14);\n1097-expression_statement-154-154", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
1106 [label="154_ _recipient.transfer(address(this).balance);\n1106-expression_statement-155-155", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
1117 [label="156_ function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n    uint256 tokensToBurn = findtwoPercent(value);\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\n    _balances[to] = _balances[to].add(tokensToTransfer);\n    _totalSupply = _totalSupply.sub(tokensToBurn);\n    emit Transfer(msg.sender, to, tokensToTransfer);\n    emit Transfer(msg.sender, address(0), tokensToBurn);\n    return true;\n  }\n1117-function_definition-157-168", method="transfer(address to,uint256 value)", type_label=function_definition];
1133 [label="157_ require(value <= _balances[msg.sender]);\n1133-expression_statement-158-158", method="transfer(address to,uint256 value)", type_label=expression_statement];
1144 [label="158_ require(to != address(0));\n1144-expression_statement-159-159", method="transfer(address to,uint256 value)", type_label=expression_statement];
1153 [label="159_ uint256 tokensToBurn = findtwoPercent(value);\n1153-new_variable-160-160", method="transfer(address to,uint256 value)", type_label=new_variable];
1162 [label="160_ uint256 tokensToTransfer = value.sub(tokensToBurn);\n1162-new_variable-161-161", method="transfer(address to,uint256 value)", type_label=new_variable];
1173 [label="161_ _balances[msg.sender] = _balances[msg.sender].sub(value);\n1173-expression_statement-162-162", method="transfer(address to,uint256 value)", type_label=expression_statement];
1190 [label="162_ _balances[to] = _balances[to].add(tokensToTransfer);\n1190-expression_statement-163-163", method="transfer(address to,uint256 value)", type_label=expression_statement];
1203 [label="163_ _totalSupply = _totalSupply.sub(tokensToBurn);\n1203-expression_statement-164-164", method="transfer(address to,uint256 value)", type_label=expression_statement];
1234 [label="166_ return true;\n1234-return-167-167", method="transfer(address to,uint256 value)", type_label=return];
1237 [label="168_ function withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30) public {\n        require(tx.origin == owner_txorigin30);\n        _recipient.transfer(address(this).balance);\n    }\n1237-function_definition-169-172", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=function_definition];
1249 [label="169_ require(tx.origin == owner_txorigin30);\n1249-expression_statement-170-170", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
1258 [label="170_ _recipient.transfer(address(this).balance);\n1258-expression_statement-171-171", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
1269 [label="172_ function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n    for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }\n  }\n1269-function_definition-173-177", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=function_definition];
1283 [label="173_ for(i < receivers.length;;i++)\n1283-for-174-176", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=for];
3339 [label="173_ end_loop", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=end_loop];
1296 [label="173_ i++\n1296-expression_statement-174-174", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1299 [label="174_ transfer(receivers[i], amounts[i]);\n1299-expression_statement-175-175", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1310 [label="177_ function bug_txorigin8(address owner_txorigin8) public{\n        require(tx.origin == owner_txorigin8);\n    }\n1310-function_definition-178-180", method="bug_txorigin8(address owner_txorigin8)", type_label=function_definition];
1318 [label="178_ require(tx.origin == owner_txorigin8);\n1318-expression_statement-179-179", method="bug_txorigin8(address owner_txorigin8)", type_label=expression_statement];
1327 [label="180_ function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n1327-function_definition-181-186", method="approve(address spender,uint256 value)", type_label=function_definition];
1343 [label="181_ require(spender != address(0));\n1343-expression_statement-182-182", method="approve(address spender,uint256 value)", type_label=expression_statement];
1352 [label="182_ _allowed[msg.sender][spender] = value;\n1352-expression_statement-183-183", method="approve(address spender,uint256 value)", type_label=expression_statement];
1372 [label="184_ return true;\n1372-return-185-185", method="approve(address spender,uint256 value)", type_label=return];
1375 [label="186_ function transferTo_txorigin39(address to, uint amount,address owner_txorigin39) public {\n  require(tx.origin == owner_txorigin39);\n  to.call.value(amount);\n}\n1375-function_definition-187-190", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=function_definition];
1391 [label="187_ require(tx.origin == owner_txorigin39);\n1391-expression_statement-188-188", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
1400 [label="188_ to.call.value(amount);\n1400-expression_statement-189-189", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
1409 [label="190_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n    _balances[from] = _balances[from].sub(value);\n    uint256 tokensToBurn = findtwoPercent(value);\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\n    _balances[to] = _balances[to].add(tokensToTransfer);\n    _totalSupply = _totalSupply.sub(tokensToBurn);\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    emit Transfer(from, to, tokensToTransfer);\n    emit Transfer(from, address(0), tokensToBurn);\n    return true;\n  }\n1409-function_definition-191-204", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
1429 [label="191_ require(value <= _balances[from]);\n1429-expression_statement-192-192", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1438 [label="192_ require(value <= _allowed[from][msg.sender]);\n1438-expression_statement-193-193", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1451 [label="193_ require(to != address(0));\n1451-expression_statement-194-194", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1460 [label="194_ _balances[from] = _balances[from].sub(value);\n1460-expression_statement-195-195", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1473 [label="195_ uint256 tokensToBurn = findtwoPercent(value);\n1473-new_variable-196-196", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
1482 [label="196_ uint256 tokensToTransfer = value.sub(tokensToBurn);\n1482-new_variable-197-197", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
1493 [label="197_ _balances[to] = _balances[to].add(tokensToTransfer);\n1493-expression_statement-198-198", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1506 [label="198_ _totalSupply = _totalSupply.sub(tokensToBurn);\n1506-expression_statement-199-199", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1515 [label="199_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n1515-expression_statement-200-200", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1554 [label="202_ return true;\n1554-return-203-203", method="transferFrom(address from,address to,uint256 value)", type_label=return];
1557 [label="204_ function bug_txorigin36(  address owner_txorigin36) public{\n        require(tx.origin == owner_txorigin36);\n    }\n1557-function_definition-205-207", method="bug_txorigin36(address owner_txorigin36)", type_label=function_definition];
1565 [label="205_ require(tx.origin == owner_txorigin36);\n1565-expression_statement-206-206", method="bug_txorigin36(address owner_txorigin36)", type_label=expression_statement];
1574 [label="207_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n1574-function_definition-208-213", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
1590 [label="208_ require(spender != address(0));\n1590-expression_statement-209-209", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
1599 [label="209_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n1599-expression_statement-210-210", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
1637 [label="211_ return true;\n1637-return-212-212", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
1640 [label="213_ function transferTo_txorigin35(address to, uint amount,address owner_txorigin35) public {\n  require(tx.origin == owner_txorigin35);\n  to.call.value(amount);\n}\n1640-function_definition-214-217", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=function_definition];
1656 [label="214_ require(tx.origin == owner_txorigin35);\n1656-expression_statement-215-215", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
1665 [label="215_ to.call.value(amount);\n1665-expression_statement-216-216", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
1674 [label="217_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n1674-function_definition-218-223", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
1690 [label="218_ require(spender != address(0));\n1690-expression_statement-219-219", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
1699 [label="219_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n1699-expression_statement-220-220", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
1737 [label="221_ return true;\n1737-return-222-222", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
1740 [label="223_ function bug_txorigin40(address owner_txorigin40) public{\n        require(tx.origin == owner_txorigin40);\n    }\n1740-function_definition-224-226", method="bug_txorigin40(address owner_txorigin40)", type_label=function_definition];
1748 [label="224_ require(tx.origin == owner_txorigin40);\n1748-expression_statement-225-225", method="bug_txorigin40(address owner_txorigin40)", type_label=expression_statement];
1757 [label="226_ function _mint(address account, uint256 amount) internal {\n    require(amount != 0);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n1757-function_definition-227-231", method="_mint(address account,uint256 amount)", type_label=function_definition];
1769 [label="227_ require(amount != 0);\n1769-expression_statement-228-228", method="_mint(address account,uint256 amount)", type_label=expression_statement];
1776 [label="228_ _balances[account] = _balances[account].add(amount);\n1776-expression_statement-229-229", method="_mint(address account,uint256 amount)", type_label=expression_statement];
1799 [label="231_ function sendto_txorigin33(address payable receiver, uint amount,address owner_txorigin33) public {\n	require (tx.origin == owner_txorigin33);\n	receiver.transfer(amount);\n}\n1799-function_definition-232-235", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=function_definition];
1815 [label="232_ require (tx.origin == owner_txorigin33);\n1815-expression_statement-233-233", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
1824 [label="233_ receiver.transfer(amount);\n1824-expression_statement-234-234", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
1831 [label="235_ function burn(uint256 amount) external {\n    _burn(msg.sender, amount);\n  }\n1831-function_definition-236-238", method="burn(uint256 amount)", type_label=function_definition];
1839 [label="236_ _burn(msg.sender, amount);\n1839-expression_statement-237-237", method="burn(uint256 amount)", type_label=expression_statement];
1848 [label="238_ function transferTo_txorigin27(address to, uint amount,address owner_txorigin27) public {\n  require(tx.origin == owner_txorigin27);\n  to.call.value(amount);\n}\n1848-function_definition-239-242", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=function_definition];
1864 [label="239_ require(tx.origin == owner_txorigin27);\n1864-expression_statement-240-240", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
1873 [label="240_ to.call.value(amount);\n1873-expression_statement-241-241", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
1882 [label="242_ function _burn(address account, uint256 amount) internal {\n    require(amount != 0);\n    require(amount <= _balances[account]);\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n1882-function_definition-243-249", method="_burn(address account,uint256 amount)", type_label=function_definition];
1894 [label="243_ require(amount != 0);\n1894-expression_statement-244-244", method="_burn(address account,uint256 amount)", type_label=expression_statement];
1901 [label="244_ require(amount <= _balances[account]);\n1901-expression_statement-245-245", method="_burn(address account,uint256 amount)", type_label=expression_statement];
1910 [label="245_ _totalSupply = _totalSupply.sub(amount);\n1910-expression_statement-246-246", method="_burn(address account,uint256 amount)", type_label=expression_statement];
1919 [label="246_ _balances[account] = _balances[account].sub(amount);\n1919-expression_statement-247-247", method="_burn(address account,uint256 amount)", type_label=expression_statement];
1942 [label="249_ function transferTo_txorigin31(address to, uint amount,address owner_txorigin31) public {\n  require(tx.origin == owner_txorigin31);\n  to.call.value(amount);\n}\n1942-function_definition-250-253", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=function_definition];
1958 [label="250_ require(tx.origin == owner_txorigin31);\n1958-expression_statement-251-251", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
1967 [label="251_ to.call.value(amount);\n1967-expression_statement-252-252", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
1976 [label="253_ function burnFrom(address account, uint256 amount) external {\n    require(amount <= _allowed[account][msg.sender]);\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n    _burn(account, amount);\n  }\n1976-function_definition-254-258", method="burnFrom(address account,uint256 amount)", type_label=function_definition];
1988 [label="254_ require(amount <= _allowed[account][msg.sender]);\n1988-expression_statement-255-255", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2001 [label="255_ _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n2001-expression_statement-256-256", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2022 [label="256_ _burn(account, amount);\n2022-expression_statement-257-257", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2029 [label="258_ function sendto_txorigin13(address payable receiver, uint amount,address owner_txorigin13) public {\n	require (tx.origin == owner_txorigin13);\n	receiver.transfer(amount);\n}\n2029-function_definition-259-262", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=function_definition];
2045 [label="259_ require (tx.origin == owner_txorigin13);\n2045-expression_statement-260-260", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
2054 [label="260_ receiver.transfer(amount);\n2054-expression_statement-261-261", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
129 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
146 -> 2202  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2202 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 2202  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
153 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
172 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
199 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
227 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
261 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
318 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
442 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
485 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
487 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
499 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
530 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
547 -> 556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
556 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
558 -> 566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
586 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
625 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
637 -> 646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
682 -> 691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
704 -> 720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
720 -> 729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
781 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
797 -> 806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
818 -> 834  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
834 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
875 -> 887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
887 -> 896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
907 -> 916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
916 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
918 -> 926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
952 -> 968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
968 -> 977  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
986 -> 1003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1009 -> 1025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1025 -> 1034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1043 -> 1056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1056 -> 1067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1067 -> 1083  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1083 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1085 -> 1097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1097 -> 1106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1117 -> 1133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1133 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 1153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1153 -> 1162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1162 -> 1173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1173 -> 1190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1190 -> 1203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1234 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1237 -> 1249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1249 -> 1258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1269 -> 1283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 1299  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1283 -> 3339  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3339 -> 1310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1296 -> 1283  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1299 -> 1296  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1310 -> 1318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1327 -> 1343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1343 -> 1352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1372 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1375 -> 1391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1391 -> 1400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1409 -> 1429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1429 -> 1438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1438 -> 1451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1451 -> 1460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1460 -> 1473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1473 -> 1482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1482 -> 1493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1493 -> 1506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1506 -> 1515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1554 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1557 -> 1565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1574 -> 1590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1590 -> 1599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1637 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1640 -> 1656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1656 -> 1665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1674 -> 1690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1690 -> 1699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1737 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1740 -> 1748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1757 -> 1769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1769 -> 1776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1799 -> 1815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1815 -> 1824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1831 -> 1839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1848 -> 1864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1864 -> 1873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1882 -> 1894  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1894 -> 1901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1901 -> 1910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1910 -> 1919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1942 -> 1958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1958 -> 1967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1976 -> 1988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1988 -> 2001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2001 -> 2022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2029 -> 2045  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2045 -> 2054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
