digraph  {
13 [label="2_ function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n13-function_definition-3-6", method="mul(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a * b;\n31-expression_statement-4-4", method="mul(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(a == 0 || c / a == b);\n37-expression_statement-5-5", method="mul(uint a,uint b)", type_label=expression_statement];
50 [label="6_ function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n50-function_definition-7-10", method="div(uint a,uint b)", type_label=function_definition];
68 [label="7_ require(b > 0);\n68-expression_statement-8-8", method="div(uint a,uint b)", type_label=expression_statement];
75 [label="8_ c = a / b;\n75-expression_statement-9-9", method="div(uint a,uint b)", type_label=expression_statement];
81 [label="10_ function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n81-function_definition-11-14", method="sub(uint a,uint b)", type_label=function_definition];
99 [label="11_ require(b <= a);\n99-expression_statement-12-12", method="sub(uint a,uint b)", type_label=expression_statement];
106 [label="12_ c = a - b;\n106-expression_statement-13-13", method="sub(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n112-function_definition-15-18", method="add(uint a,uint b)", type_label=function_definition];
130 [label="15_ c = a + b;\n130-expression_statement-16-16", method="add(uint a,uint b)", type_label=expression_statement];
136 [label="16_ require(c >= a);\n136-expression_statement-17-17", method="add(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function totalSupply() public view returns (uint256);\n146-function_definition-21-21", method="totalSupply()", type_label=function_definition];
154 [label="21_ function bug_txorigin28(  address owner_txorigin28) public{\n        require(tx.origin == owner_txorigin28);\n    }\n154-function_definition-22-24", method="bug_txorigin28(address owner_txorigin28)", type_label=function_definition];
162 [label="22_ require(tx.origin == owner_txorigin28);\n162-expression_statement-23-23", method="bug_txorigin28(address owner_txorigin28)", type_label=expression_statement];
171 [label="24_ function balanceOf(address tokenOwner) public view returns (uint256 balance);\n171-function_definition-25-25", method="balanceOf(address tokenOwner)", type_label=function_definition];
184 [label="25_ function withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34) public {\n        require(tx.origin == owner_txorigin34);\n        _recipient.transfer(address(this).balance);\n    }\n184-function_definition-26-29", method="withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34)", type_label=function_definition];
196 [label="26_ require(tx.origin == owner_txorigin34);\n196-expression_statement-27-27", method="withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34)", type_label=expression_statement];
205 [label="27_ _recipient.transfer(address(this).balance);\n205-expression_statement-28-28", method="withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34)", type_label=expression_statement];
216 [label="29_ function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\n216-function_definition-30-30", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
233 [label="30_ function sendto_txorigin21(address payable receiver, uint amount,address owner_txorigin21) public {\n	require (tx.origin == owner_txorigin21);\n	receiver.transfer(amount);\n}\n233-function_definition-31-34", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=function_definition];
249 [label="31_ require (tx.origin == owner_txorigin21);\n249-expression_statement-32-32", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=expression_statement];
258 [label="32_ receiver.transfer(amount);\n258-expression_statement-33-33", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=expression_statement];
265 [label="34_ function transfer(address to, uint256 tokens) public returns (bool success);\n265-function_definition-35-35", method="transfer(address to,uint256 tokens)", type_label=function_definition];
281 [label="35_ function withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10) public {\n        require(tx.origin == owner_txorigin10);\n        _recipient.transfer(address(this).balance);\n    }\n281-function_definition-36-39", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=function_definition];
293 [label="36_ require(tx.origin == owner_txorigin10);\n293-expression_statement-37-37", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=expression_statement];
302 [label="37_ _recipient.transfer(address(this).balance);\n302-expression_statement-38-38", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=expression_statement];
313 [label="39_ function approve(address spender, uint256 tokens) public returns (bool success);\n313-function_definition-40-40", method="approve(address spender,uint256 tokens)", type_label=function_definition];
329 [label="40_ function withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22) public {\n        require(tx.origin == owner_txorigin22);\n        _recipient.transfer(address(this).balance);\n    }\n329-function_definition-41-44", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=function_definition];
341 [label="41_ require(tx.origin == owner_txorigin22);\n341-expression_statement-42-42", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=expression_statement];
350 [label="42_ _recipient.transfer(address(this).balance);\n350-expression_statement-43-43", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=expression_statement];
361 [label="44_ function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n361-function_definition-45-45", method="transferFrom(address from,address to,uint256 tokens)", type_label=function_definition];
381 [label="45_ function bug_txorigin12(address owner_txorigin12) public{\n        require(tx.origin == owner_txorigin12);\n    }\n381-function_definition-46-48", method="bug_txorigin12(address owner_txorigin12)", type_label=function_definition];
389 [label="46_ require(tx.origin == owner_txorigin12);\n389-expression_statement-47-47", method="bug_txorigin12(address owner_txorigin12)", type_label=expression_statement];
398 [label="48_ function transferTo_txorigin35(address to, uint amount,address owner_txorigin35) public {\n  require(tx.origin == owner_txorigin35);\n  to.call.value(amount);\n}\n398-function_definition-49-52", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=function_definition];
414 [label="49_ require(tx.origin == owner_txorigin35);\n414-expression_statement-50-50", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
423 [label="50_ to.call.value(amount);\n423-expression_statement-51-51", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
446 [label="53_ function bug_txorigin40(address owner_txorigin40) public{\n        require(tx.origin == owner_txorigin40);\n    }\n446-function_definition-54-56", method="bug_txorigin40(address owner_txorigin40)", type_label=function_definition];
454 [label="54_ require(tx.origin == owner_txorigin40);\n454-expression_statement-55-55", method="bug_txorigin40(address owner_txorigin40)", type_label=expression_statement];
480 [label="59_ address payable public owner;\n480-new_variable-60-60", method="", type_label=new_variable];
485 [label="60_ function sendto_txorigin33(address payable receiver, uint amount,address owner_txorigin33) public {\n	require (tx.origin == owner_txorigin33);\n	receiver.transfer(amount);\n}\n485-function_definition-61-64", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=function_definition];
501 [label="61_ require (tx.origin == owner_txorigin33);\n501-expression_statement-62-62", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
510 [label="62_ receiver.transfer(amount);\n510-expression_statement-63-63", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
529 [label="66_ owner = msg.sender;\n529-expression_statement-67-67", method="", type_label=expression_statement];
535 [label="68_ function transferTo_txorigin11(address to, uint amount,address owner_txorigin11) public {\n  require(tx.origin == owner_txorigin11);\n  to.call.value(amount);\n}\n535-function_definition-69-72", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=function_definition];
551 [label="69_ require(tx.origin == owner_txorigin11);\n551-expression_statement-70-70", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=expression_statement];
560 [label="70_ to.call.value(amount);\n560-expression_statement-71-71", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=expression_statement];
569 [label="72_ modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n569-expression_statement-73-76", method="", type_label=expression_statement];
572 [label="73_ require(msg.sender == owner);\n572-expression_statement-74-74", method="", type_label=expression_statement];
581 [label="74_ _;\n581-expression_statement-75-75", method="", type_label=expression_statement];
583 [label="76_ function transferOwnership(address payable newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n583-function_definition-77-81", method="transferOwnership(address payable newOwner)", type_label=function_definition];
590 [label="76_ onlyOwner\n590-expression_statement-77-77", method="transferOwnership(address payable newOwner)", type_label=expression_statement];
593 [label="77_ require(newOwner != address(0));\n593-expression_statement-78-78", method="transferOwnership(address payable newOwner)", type_label=expression_statement];
608 [label="79_ owner = newOwner;\n608-expression_statement-80-80", method="transferOwnership(address payable newOwner)", type_label=expression_statement];
612 [label="81_ function sendto_txorigin1(address payable receiver, uint amount,address owner_txorigin1) public {\n	require (tx.origin == owner_txorigin1);\n	receiver.transfer(amount);\n}\n612-function_definition-82-85", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=function_definition];
628 [label="82_ require (tx.origin == owner_txorigin1);\n628-expression_statement-83-83", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=expression_statement];
637 [label="83_ receiver.transfer(amount);\n637-expression_statement-84-84", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=expression_statement];
658 [label="88_ mapping (address => uint256) balances;\n658-new_variable-89-89", method="", type_label=new_variable];
664 [label="89_ function withdrawAll_txorigin18(address payable _recipient,address owner_txorigin18) public {\n        require(tx.origin == owner_txorigin18);\n        _recipient.transfer(address(this).balance);\n    }\n664-function_definition-90-93", method="withdrawAll_txorigin18(address payable _recipient,address owner_txorigin18)", type_label=function_definition];
676 [label="90_ require(tx.origin == owner_txorigin18);\n676-expression_statement-91-91", method="withdrawAll_txorigin18(address payable _recipient,address owner_txorigin18)", type_label=expression_statement];
685 [label="91_ _recipient.transfer(address(this).balance);\n685-expression_statement-92-92", method="withdrawAll_txorigin18(address payable _recipient,address owner_txorigin18)", type_label=expression_statement];
696 [label="93_ mapping (address => mapping (address => uint256)) allowed;\n696-new_variable-94-94", method="", type_label=new_variable];
704 [label="94_ function sendto_txorigin29(address payable receiver, uint amount,address owner_txorigin29) public {\n	require (tx.origin == owner_txorigin29);\n	receiver.transfer(amount);\n}\n704-function_definition-95-98", method="sendto_txorigin29(address payable receiver,uint amount,address owner_txorigin29)", type_label=function_definition];
720 [label="95_ require (tx.origin == owner_txorigin29);\n720-expression_statement-96-96", method="sendto_txorigin29(address payable receiver,uint amount,address owner_txorigin29)", type_label=expression_statement];
729 [label="96_ receiver.transfer(amount);\n729-expression_statement-97-97", method="sendto_txorigin29(address payable receiver,uint amount,address owner_txorigin29)", type_label=expression_statement];
736 [label="98_ string public name = \"Exclusive Platform\";\n736-new_variable-99-99", method="", type_label=new_variable];
743 [label="99_ function withdrawAll_txorigin6(address payable _recipient,address owner_txorigin6) public {\n        require(tx.origin == owner_txorigin6);\n        _recipient.transfer(address(this).balance);\n    }\n743-function_definition-100-103", method="withdrawAll_txorigin6(address payable _recipient,address owner_txorigin6)", type_label=function_definition];
755 [label="100_ require(tx.origin == owner_txorigin6);\n755-expression_statement-101-101", method="withdrawAll_txorigin6(address payable _recipient,address owner_txorigin6)", type_label=expression_statement];
764 [label="101_ _recipient.transfer(address(this).balance);\n764-expression_statement-102-102", method="withdrawAll_txorigin6(address payable _recipient,address owner_txorigin6)", type_label=expression_statement];
775 [label="103_ string public symbol = \"XPL\";\n775-new_variable-104-104", method="", type_label=new_variable];
782 [label="104_ function bug_txorigin16(address owner_txorigin16) public{\n        require(tx.origin == owner_txorigin16);\n    }\n782-function_definition-105-107", method="bug_txorigin16(address owner_txorigin16)", type_label=function_definition];
790 [label="105_ require(tx.origin == owner_txorigin16);\n790-expression_statement-106-106", method="bug_txorigin16(address owner_txorigin16)", type_label=expression_statement];
799 [label="107_ uint256 public decimals = 8;\n799-new_variable-108-108", method="", type_label=new_variable];
805 [label="108_ function bug_txorigin24(  address owner_txorigin24) public{\n        require(tx.origin == owner_txorigin24);\n    }\n805-function_definition-109-111", method="bug_txorigin24(address owner_txorigin24)", type_label=function_definition];
813 [label="109_ require(tx.origin == owner_txorigin24);\n813-expression_statement-110-110", method="bug_txorigin24(address owner_txorigin24)", type_label=expression_statement];
822 [label="111_ uint256 public _totalSupply;\n822-new_variable-112-112", method="", type_label=new_variable];
827 [label="112_ function sendto_txorigin5(address payable receiver, uint amount,address owner_txorigin5) public {\n	require (tx.origin == owner_txorigin5);\n	receiver.transfer(amount);\n}\n827-function_definition-113-116", method="sendto_txorigin5(address payable receiver,uint amount,address owner_txorigin5)", type_label=function_definition];
843 [label="113_ require (tx.origin == owner_txorigin5);\n843-expression_statement-114-114", method="sendto_txorigin5(address payable receiver,uint amount,address owner_txorigin5)", type_label=expression_statement];
852 [label="114_ receiver.transfer(amount);\n852-expression_statement-115-115", method="sendto_txorigin5(address payable receiver,uint amount,address owner_txorigin5)", type_label=expression_statement];
859 [label="116_ uint256 public XPLPerEther = 8000000e8;\n859-new_variable-117-117", method="", type_label=new_variable];
865 [label="117_ uint256 public minimumBuy = 1 ether / 100;\n865-new_variable-118-118", method="", type_label=new_variable];
874 [label="118_ function transferTo_txorigin15(address to, uint amount,address owner_txorigin15) public {\n  require(tx.origin == owner_txorigin15);\n  to.call.value(amount);\n}\n874-function_definition-119-122", method="transferTo_txorigin15(address to,uint amount,address owner_txorigin15)", type_label=function_definition];
890 [label="119_ require(tx.origin == owner_txorigin15);\n890-expression_statement-120-120", method="transferTo_txorigin15(address to,uint amount,address owner_txorigin15)", type_label=expression_statement];
899 [label="120_ to.call.value(amount);\n899-expression_statement-121-121", method="transferTo_txorigin15(address to,uint amount,address owner_txorigin15)", type_label=expression_statement];
908 [label="122_ bool public crowdsaleIsOn = true;\n908-new_variable-123-123", method="", type_label=new_variable];
915 [label="123_ modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n915-expression_statement-124-127", method="", type_label=expression_statement];
922 [label="124_ assert(msg.data.length >= size + 4);\n922-expression_statement-125-125", method="", type_label=expression_statement];
935 [label="125_ _;\n935-expression_statement-126-126", method="", type_label=expression_statement];
939 [label="128_ _totalSupply = 10000000000e8;\n939-expression_statement-129-129", method="", type_label=expression_statement];
943 [label="129_ balances[owner] = _totalSupply;\n943-expression_statement-130-130", method="", type_label=expression_statement];
959 [label="132_ function withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2) public {\n        require(tx.origin == owner_txorigin2);\n        _recipient.transfer(address(this).balance);\n    }\n959-function_definition-133-136", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=function_definition];
971 [label="133_ require(tx.origin == owner_txorigin2);\n971-expression_statement-134-134", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=expression_statement];
980 [label="134_ _recipient.transfer(address(this).balance);\n980-expression_statement-135-135", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=expression_statement];
991 [label="136_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n991-function_definition-137-139", method="totalSupply()", type_label=function_definition];
1000 [label="137_ return _totalSupply;\n1000-return-138-138", method="totalSupply()", type_label=return];
1002 [label="139_ function sendto_txorigin17(address payable receiver, uint amount,address owner_txorigin17) public {\n	require (tx.origin == owner_txorigin17);\n	receiver.transfer(amount);\n}\n1002-function_definition-140-143", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=function_definition];
1018 [label="140_ require (tx.origin == owner_txorigin17);\n1018-expression_statement-141-141", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=expression_statement];
1027 [label="141_ receiver.transfer(amount);\n1027-expression_statement-142-142", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=expression_statement];
1034 [label="143_ function updateXPLPerEther(uint _XPLPerEther) public onlyOwner {        \n        emit NewPrice(owner, XPLPerEther, _XPLPerEther);\n        XPLPerEther = _XPLPerEther;\n    }\n1034-function_definition-144-147", method="updateXPLPerEther(uint _XPLPerEther)", type_label=function_definition];
1041 [label="143_ onlyOwner\n1041-expression_statement-144-144", method="updateXPLPerEther(uint _XPLPerEther)", type_label=expression_statement];
1052 [label="145_ XPLPerEther = _XPLPerEther;\n1052-expression_statement-146-146", method="updateXPLPerEther(uint _XPLPerEther)", type_label=expression_statement];
1056 [label="147_ function sendto_txorigin37(address payable receiver, uint amount,address owner_txorigin37) public {\n	require (tx.origin == owner_txorigin37);\n	receiver.transfer(amount);\n}\n1056-function_definition-148-151", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=function_definition];
1072 [label="148_ require (tx.origin == owner_txorigin37);\n1072-expression_statement-149-149", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=expression_statement];
1081 [label="149_ receiver.transfer(amount);\n1081-expression_statement-150-150", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=expression_statement];
1088 [label="151_ function switchCrowdsale() public onlyOwner {\n        crowdsaleIsOn = !(crowdsaleIsOn);\n    }\n1088-function_definition-152-154", method="switchCrowdsale()", type_label=function_definition];
1091 [label="151_ onlyOwner\n1091-expression_statement-152-152", method="switchCrowdsale()", type_label=expression_statement];
1094 [label="152_ crowdsaleIsOn = !(crowdsaleIsOn);\n1094-expression_statement-153-153", method="switchCrowdsale()", type_label=expression_statement];
1100 [label="154_ function transferTo_txorigin3(address to, uint amount,address owner_txorigin3) public {\n  require(tx.origin == owner_txorigin3);\n  to.call.value(amount);\n}\n1100-function_definition-155-158", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=function_definition];
1116 [label="155_ require(tx.origin == owner_txorigin3);\n1116-expression_statement-156-156", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=expression_statement];
1125 [label="156_ to.call.value(amount);\n1125-expression_statement-157-157", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=expression_statement];
1134 [label="158_ function getBonus(uint256 _amount) internal view returns (uint256) {\n        if (_amount >= XPLPerEther.mul(5)) {\n            return ((20 * _amount).div(100)).add(_amount);  \n        } else if (_amount >= XPLPerEther) {\n            return ((5 * _amount).div(100)).add(_amount);  \n        }\n        return _amount;\n    }\n1134-function_definition-159-166", method="getBonus(uint256 _amount)", type_label=function_definition];
1147 [label="159_ if\n1147-if-160-164", method="getBonus(uint256 _amount)", type_label=if];
3518 [label="159_ end_if", method="getBonus(uint256 _amount)", type_label=end_if];
1157 [label="160_ return ((20 * _amount).div(100)).add(_amount);\n1157-return-161-161", method="getBonus(uint256 _amount)", type_label=return];
1173 [label="161_ if__amount >= XPLPerEther\n1173-if-162-164", method="getBonus(uint256 _amount)", type_label=if];
1178 [label="162_ return ((5 * _amount).div(100)).add(_amount);\n1178-return-163-163", method="getBonus(uint256 _amount)", type_label=return];
1194 [label="164_ return _amount;\n1194-return-165-165", method="getBonus(uint256 _amount)", type_label=return];
1196 [label="166_ function sendto_txorigin9(address payable receiver, uint amount,address owner_txorigin9) public {\n	require (tx.origin == owner_txorigin9);\n	receiver.transfer(amount);\n}\n1196-function_definition-167-170", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=function_definition];
1212 [label="167_ require (tx.origin == owner_txorigin9);\n1212-expression_statement-168-168", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
1221 [label="168_ receiver.transfer(amount);\n1221-expression_statement-169-169", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
1232 [label="171_ require(crowdsaleIsOn && msg.value >= minimumBuy);\n1232-expression_statement-172-172", method="", type_label=expression_statement];
1243 [label="172_ uint256 totalBuy =  (XPLPerEther.mul(msg.value)).div(1 ether);\n1243-new_variable-173-173", method="", type_label=new_variable];
1263 [label="173_ totalBuy = getBonus(totalBuy);\n1263-expression_statement-174-174", method="", type_label=expression_statement];
1270 [label="174_ doTransfer(owner, msg.sender, totalBuy);\n1270-expression_statement-175-175", method="", type_label=expression_statement];
1281 [label="176_ function sendto_txorigin25(address payable receiver, uint amount,address owner_txorigin25) public {\n	require (tx.origin == owner_txorigin25);\n	receiver.transfer(amount);\n}\n1281-function_definition-177-180", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=function_definition];
1297 [label="177_ require (tx.origin == owner_txorigin25);\n1297-expression_statement-178-178", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
1306 [label="178_ receiver.transfer(amount);\n1306-expression_statement-179-179", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
1313 [label="180_ function distribute(address[] calldata _addresses, uint256 _amount) external {        \n        for (uint i = 0; i < _addresses.length; i++) {transfer(_addresses[i], _amount);}\n    }\n1313-function_definition-181-183", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=function_definition];
1326 [label="181_ for(i < _addresses.length;;i++)\n1326-for-182-182", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=for];
3697 [label="181_ end_loop", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=end_loop];
1339 [label="181_ i++\n1339-expression_statement-182-182", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=expression_statement];
1342 [label="181_ transfer(_addresses[i], _amount);\n1342-expression_statement-182-182", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=expression_statement];
1351 [label="183_ function transferTo_txorigin19(address to, uint amount,address owner_txorigin19) public {\n  require(tx.origin == owner_txorigin19);\n  to.call.value(amount);\n}\n1351-function_definition-184-187", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=function_definition];
1367 [label="184_ require(tx.origin == owner_txorigin19);\n1367-expression_statement-185-185", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
1376 [label="185_ to.call.value(amount);\n1376-expression_statement-186-186", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
1385 [label="187_ function distributeWithAmount(address[] calldata _addresses, uint256[] calldata _amounts) external {\n        require(_addresses.length == _amounts.length);\n        for (uint i = 0; i < _addresses.length; i++) {transfer(_addresses[i], _amounts[i]);}\n    }\n1385-function_definition-188-191", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=function_definition];
1399 [label="188_ require(_addresses.length == _amounts.length);\n1399-expression_statement-189-189", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=expression_statement];
1410 [label="189_ for(i < _addresses.length;;i++)\n1410-for-190-190", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=for];
3781 [label="189_ end_loop", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=end_loop];
1423 [label="189_ i++\n1423-expression_statement-190-190", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=expression_statement];
1426 [label="189_ transfer(_addresses[i], _amounts[i]);\n1426-expression_statement-190-190", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=expression_statement];
1437 [label="191_ function withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26) public {\n        require(tx.origin == owner_txorigin26);\n        _recipient.transfer(address(this).balance);\n    }\n1437-function_definition-192-195", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=function_definition];
1449 [label="192_ require(tx.origin == owner_txorigin26);\n1449-expression_statement-193-193", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
1458 [label="193_ _recipient.transfer(address(this).balance);\n1458-expression_statement-194-194", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
1469 [label="195_ function doTransfer(address _from, address _to, uint _amount) internal {\n        require((_to != address(0)));\n        require(_amount <= balances[_from]);\n        balances[_from] = balances[_from].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n    }\n1469-function_definition-196-202", method="doTransfer(address _from,address _to,uint _amount)", type_label=function_definition];
1485 [label="196_ require((_to != address(0)));\n1485-expression_statement-197-197", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
1495 [label="197_ require(_amount <= balances[_from]);\n1495-expression_statement-198-198", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
1504 [label="198_ balances[_from] = balances[_from].sub(_amount);\n1504-expression_statement-199-199", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
1517 [label="199_ balances[_to] = balances[_to].add(_amount);\n1517-expression_statement-200-200", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
1538 [label="202_ function bug_txorigin20(address owner_txorigin20) public{\n        require(tx.origin == owner_txorigin20);\n    }\n1538-function_definition-203-205", method="bug_txorigin20(address owner_txorigin20)", type_label=function_definition];
1546 [label="203_ require(tx.origin == owner_txorigin20);\n1546-expression_statement-204-204", method="bug_txorigin20(address owner_txorigin20)", type_label=expression_statement];
1555 [label="205_ function balanceOf(address _owner) view public returns (uint256) {\n        return balances[_owner];\n    }\n1555-function_definition-206-208", method="balanceOf(address _owner)", type_label=function_definition];
1568 [label="206_ return balances[_owner];\n1568-return-207-207", method="balanceOf(address _owner)", type_label=return];
1572 [label="208_ function bug_txorigin32(  address owner_txorigin32) public{\n        require(tx.origin == owner_txorigin32);\n    }\n1572-function_definition-209-211", method="bug_txorigin32(address owner_txorigin32)", type_label=function_definition];
1580 [label="209_ require(tx.origin == owner_txorigin32);\n1580-expression_statement-210-210", method="bug_txorigin32(address owner_txorigin32)", type_label=expression_statement];
1589 [label="211_ function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n        doTransfer(msg.sender, _to, _amount);\n        return true;\n    }\n1589-function_definition-212-215", method="transfer(address _to,uint256 _amount)", type_label=function_definition];
1599 [label="211_ onlyPayloadSize(2 * 32)\n1599-expression_statement-212-212", method="transfer(address _to,uint256 _amount)", type_label=expression_statement];
1612 [label="212_ doTransfer(msg.sender, _to, _amount);\n1612-expression_statement-213-213", method="transfer(address _to,uint256 _amount)", type_label=expression_statement];
1623 [label="213_ return true;\n1623-return-214-214", method="transfer(address _to,uint256 _amount)", type_label=return];
1626 [label="215_ function withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38) public {\n        require(tx.origin == owner_txorigin38);\n        _recipient.transfer(address(this).balance);\n    }\n1626-function_definition-216-219", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=function_definition];
1638 [label="216_ require(tx.origin == owner_txorigin38);\n1638-expression_statement-217-217", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
1647 [label="217_ _recipient.transfer(address(this).balance);\n1647-expression_statement-218-218", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
1658 [label="219_ function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n        require(allowed[_from][msg.sender] >= _amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        doTransfer(_from, _to, _amount);\n        return true;\n    }\n1658-function_definition-220-225", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=function_definition];
1672 [label="219_ onlyPayloadSize(3 * 32)\n1672-expression_statement-220-220", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
1685 [label="220_ require(allowed[_from][msg.sender] >= _amount);\n1685-expression_statement-221-221", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
1698 [label="221_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n1698-expression_statement-222-222", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
1719 [label="222_ doTransfer(_from, _to, _amount);\n1719-expression_statement-223-223", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
1728 [label="223_ return true;\n1728-return-224-224", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=return];
1731 [label="225_ function bug_txorigin4(address owner_txorigin4) public{\n        require(tx.origin == owner_txorigin4);\n    }\n1731-function_definition-226-228", method="bug_txorigin4(address owner_txorigin4)", type_label=function_definition];
1739 [label="226_ require(tx.origin == owner_txorigin4);\n1739-expression_statement-227-227", method="bug_txorigin4(address owner_txorigin4)", type_label=expression_statement];
1748 [label="228_ function approve(address _spender, uint256 _amount) public returns (bool success) {\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n1748-function_definition-229-234", method="approve(address _spender,uint256 _amount)", type_label=function_definition];
1765 [label="229_ require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n1765-expression_statement-230-230", method="approve(address _spender,uint256 _amount)", type_label=expression_statement];
1784 [label="230_ allowed[msg.sender][_spender] = _amount;\n1784-expression_statement-231-231", method="approve(address _spender,uint256 _amount)", type_label=expression_statement];
1804 [label="232_ return true;\n1804-return-233-233", method="approve(address _spender,uint256 _amount)", type_label=return];
1807 [label="234_ function transferTo_txorigin7(address to, uint amount,address owner_txorigin7) public {\n  require(tx.origin == owner_txorigin7);\n  to.call.value(amount);\n}\n1807-function_definition-235-238", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=function_definition];
1823 [label="235_ require(tx.origin == owner_txorigin7);\n1823-expression_statement-236-236", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
1832 [label="236_ to.call.value(amount);\n1832-expression_statement-237-237", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
1841 [label="238_ function allowance(address _owner, address _spender) view public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n1841-function_definition-239-241", method="allowance(address _owner,address _spender)", type_label=function_definition];
1858 [label="239_ return allowed[_owner][_spender];\n1858-return-240-240", method="allowance(address _owner,address _spender)", type_label=return];
1864 [label="241_ function transferTo_txorigin23(address to, uint amount,address owner_txorigin23) public {\n  require(tx.origin == owner_txorigin23);\n  to.call.value(amount);\n}\n1864-function_definition-242-245", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=function_definition];
1880 [label="242_ require(tx.origin == owner_txorigin23);\n1880-expression_statement-243-243", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
1889 [label="243_ to.call.value(amount);\n1889-expression_statement-244-244", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
1898 [label="245_ function transferEther(address payable _receiver, uint256 _amount) public onlyOwner {\n        require(_amount <= address(this).balance);\n        emit TransferEther(address(this), _receiver, _amount);\n        _receiver.transfer(_amount);\n    }\n1898-function_definition-246-250", method="transferEther(address payable _receiver,uint256 _amount)", type_label=function_definition];
1909 [label="245_ onlyOwner\n1909-expression_statement-246-246", method="transferEther(address payable _receiver,uint256 _amount)", type_label=expression_statement];
1912 [label="246_ require(_amount <= address(this).balance);\n1912-expression_statement-247-247", method="transferEther(address payable _receiver,uint256 _amount)", type_label=expression_statement];
1933 [label="248_ _receiver.transfer(_amount);\n1933-expression_statement-249-249", method="transferEther(address payable _receiver,uint256 _amount)", type_label=expression_statement];
1940 [label="250_ function withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14) public {\n        require(tx.origin == owner_txorigin14);\n        _recipient.transfer(address(this).balance);\n    }\n1940-function_definition-251-254", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=function_definition];
1952 [label="251_ require(tx.origin == owner_txorigin14);\n1952-expression_statement-252-252", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
1961 [label="252_ _recipient.transfer(address(this).balance);\n1961-expression_statement-253-253", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
1972 [label="254_ function withdrawFund() onlyOwner public {\n        uint256 balance = address(this).balance;\n        owner.transfer(balance);\n    }\n1972-function_definition-255-258", method="withdrawFund()", type_label=function_definition];
1974 [label="254_ onlyOwner\n1974-expression_statement-255-255", method="withdrawFund()", type_label=expression_statement];
1978 [label="255_ uint256 balance = address(this).balance;\n1978-new_variable-256-256", method="withdrawFund()", type_label=new_variable];
1988 [label="256_ owner.transfer(balance);\n1988-expression_statement-257-257", method="withdrawFund()", type_label=expression_statement];
1995 [label="258_ function withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30) public {\n        require(tx.origin == owner_txorigin30);\n        _recipient.transfer(address(this).balance);\n    }\n1995-function_definition-259-262", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=function_definition];
2007 [label="259_ require(tx.origin == owner_txorigin30);\n2007-expression_statement-260-260", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
2016 [label="260_ _recipient.transfer(address(this).balance);\n2016-expression_statement-261-261", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
2027 [label="262_ function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        _totalSupply = _totalSupply.sub(_value);\n        emit Burn(burner, _value);\n    }\n2027-function_definition-263-269", method="burn(uint256 _value)", type_label=function_definition];
2033 [label="262_ onlyOwner\n2033-expression_statement-263-263", method="burn(uint256 _value)", type_label=expression_statement];
2037 [label="263_ require(_value <= balances[msg.sender]);\n2037-expression_statement-264-264", method="burn(uint256 _value)", type_label=expression_statement];
2048 [label="264_ address burner = msg.sender;\n2048-new_variable-265-265", method="burn(uint256 _value)", type_label=new_variable];
2056 [label="265_ balances[burner] = balances[burner].sub(_value);\n2056-expression_statement-266-266", method="burn(uint256 _value)", type_label=expression_statement];
2069 [label="266_ _totalSupply = _totalSupply.sub(_value);\n2069-expression_statement-267-267", method="burn(uint256 _value)", type_label=expression_statement];
2084 [label="269_ function bug_txorigin8(address owner_txorigin8) public{\n        require(tx.origin == owner_txorigin8);\n    }\n2084-function_definition-270-272", method="bug_txorigin8(address owner_txorigin8)", type_label=function_definition];
2092 [label="270_ require(tx.origin == owner_txorigin8);\n2092-expression_statement-271-271", method="bug_txorigin8(address owner_txorigin8)", type_label=expression_statement];
2101 [label="272_ function getForeignTokenBalance(address tokenAddress, address who) view public returns (uint){\n        ERC20Interface token = ERC20Interface(tokenAddress);\n        uint bal = token.balanceOf(who);\n        return bal;\n    }\n2101-function_definition-273-277", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=function_definition];
2118 [label="273_ ERC20Interface token = ERC20Interface(tokenAddress);\n2118-new_variable-274-274", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=new_variable];
2128 [label="274_ uint bal = token.balanceOf(who);\n2128-new_variable-275-275", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=new_variable];
2139 [label="275_ return bal;\n2139-return-276-276", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=return];
2141 [label="277_ function transferTo_txorigin39(address to, uint amount,address owner_txorigin39) public {\n  require(tx.origin == owner_txorigin39);\n  to.call.value(amount);\n}\n2141-function_definition-278-281", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=function_definition];
2157 [label="278_ require(tx.origin == owner_txorigin39);\n2157-expression_statement-279-279", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
2166 [label="279_ to.call.value(amount);\n2166-expression_statement-280-280", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
2175 [label="281_ function withdrawForeignTokens(address tokenAddress) onlyOwner public returns (bool) {\n        ERC20Interface token = ERC20Interface(tokenAddress);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n2175-function_definition-282-286", method="withdrawForeignTokens(address tokenAddress)", type_label=function_definition];
2181 [label="281_ onlyOwner\n2181-expression_statement-282-282", method="withdrawForeignTokens(address tokenAddress)", type_label=expression_statement];
2189 [label="282_ ERC20Interface token = ERC20Interface(tokenAddress);\n2189-new_variable-283-283", method="withdrawForeignTokens(address tokenAddress)", type_label=new_variable];
2199 [label="283_ uint256 amount = token.balanceOf(address(this));\n2199-new_variable-284-284", method="withdrawForeignTokens(address tokenAddress)", type_label=new_variable];
2212 [label="284_ return token.transfer(owner, amount);\n2212-return-285-285", method="withdrawForeignTokens(address tokenAddress)", type_label=return];
2221 [label="286_ function bug_txorigin36(  address owner_txorigin36) public{\n        require(tx.origin == owner_txorigin36);\n    }\n2221-function_definition-287-289", method="bug_txorigin36(address owner_txorigin36)", type_label=function_definition];
2229 [label="287_ require(tx.origin == owner_txorigin36);\n2229-expression_statement-288-288", method="bug_txorigin36(address owner_txorigin36)", type_label=expression_statement];
2238 [label="289_ function transferTo_txorigin27(address to, uint amount,address owner_txorigin27) public {\n  require(tx.origin == owner_txorigin27);\n  to.call.value(amount);\n}\n2238-function_definition-290-293", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=function_definition];
2254 [label="290_ require(tx.origin == owner_txorigin27);\n2254-expression_statement-291-291", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
2263 [label="291_ to.call.value(amount);\n2263-expression_statement-292-292", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
2286 [label="294_ function transferTo_txorigin31(address to, uint amount,address owner_txorigin31) public {\n  require(tx.origin == owner_txorigin31);\n  to.call.value(amount);\n}\n2286-function_definition-295-298", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=function_definition];
2302 [label="295_ require(tx.origin == owner_txorigin31);\n2302-expression_statement-296-296", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
2311 [label="296_ to.call.value(amount);\n2311-expression_statement-297-297", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
2334 [label="299_ function sendto_txorigin13(address payable receiver, uint amount,address owner_txorigin13) public {\n	require (tx.origin == owner_txorigin13);\n	receiver.transfer(amount);\n}\n2334-function_definition-300-303", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=function_definition];
2350 [label="300_ require (tx.origin == owner_txorigin13);\n2350-expression_statement-301-301", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
2359 [label="301_ receiver.transfer(amount);\n2359-expression_statement-302-302", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
50 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
154 -> 162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
184 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
196 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
281 -> 293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
293 -> 302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
341 -> 350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
381 -> 389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
414 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
485 -> 501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
535 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
572 -> 581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
583 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
612 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
628 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
676 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
704 -> 720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
720 -> 729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
743 -> 755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
755 -> 764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
782 -> 790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
805 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
827 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
843 -> 852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
859 -> 865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
874 -> 890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
890 -> 899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
908 -> 915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
939 -> 943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
959 -> 971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
971 -> 980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
991 -> 1000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1002 -> 1018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1018 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1034 -> 1052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1056 -> 1072  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1072 -> 1081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1088 -> 1094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1100 -> 1116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1116 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1134 -> 1147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1147 -> 1157  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1147 -> 1173  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3518 -> 1194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1157 -> 3518  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1157 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1173 -> 1178  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1173 -> 3518  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1178 -> 3518  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1178 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1194 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1196 -> 1212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1212 -> 1221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1232 -> 1243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1243 -> 1263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1263 -> 1270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1281 -> 1297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1297 -> 1306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1313 -> 1326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1326 -> 1342  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1326 -> 3697  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3697 -> 1351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1339 -> 1326  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1342 -> 1339  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1351 -> 1367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1367 -> 1376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1385 -> 1399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1399 -> 1410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1410 -> 1426  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1410 -> 3781  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3781 -> 1437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1423 -> 1410  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1426 -> 1423  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1437 -> 1449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1449 -> 1458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1469 -> 1485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1485 -> 1495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1495 -> 1504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1504 -> 1517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1538 -> 1546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1555 -> 1568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1568 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1572 -> 1580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1589 -> 1612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1612 -> 1623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1623 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1626 -> 1638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1638 -> 1647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1658 -> 1685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1685 -> 1698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1698 -> 1719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1719 -> 1728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1728 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1731 -> 1739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1748 -> 1765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1765 -> 1784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1804 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1807 -> 1823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1823 -> 1832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1841 -> 1858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1858 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1864 -> 1880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1880 -> 1889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1898 -> 1912  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1940 -> 1952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1952 -> 1961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1972 -> 1978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1978 -> 1988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1995 -> 2007  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2007 -> 2016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2027 -> 2037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2037 -> 2048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2048 -> 2056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2056 -> 2069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2084 -> 2092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2101 -> 2118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2118 -> 2128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2128 -> 2139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2139 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2141 -> 2157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2157 -> 2166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2175 -> 2189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2189 -> 2199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2199 -> 2212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2212 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2221 -> 2229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2238 -> 2254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2254 -> 2263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2286 -> 2302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2302 -> 2311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2334 -> 2350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2350 -> 2359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
