digraph  {
144 [label="14_ function revoke(bytes32 _operation) external;\n144-function_definition-15-15", method="revoke(bytes32 _operation)", type_label=function_definition];
151 [label="15_ function changeOwner(address _from, address _to) external;\n151-function_definition-16-16", method="changeOwner(address _from,address _to)", type_label=function_definition];
162 [label="16_ function addOwner(address _owner) external;\n162-function_definition-17-17", method="addOwner(address _owner)", type_label=function_definition];
169 [label="17_ function removeOwner(address _owner) external;\n169-function_definition-18-18", method="removeOwner(address _owner)", type_label=function_definition];
176 [label="18_ function changeRequirement(uint _newRequired) external;\n176-function_definition-19-19", method="changeRequirement(uint _newRequired)", type_label=function_definition];
183 [label="19_ function isOwner(address _addr) constant returns (bool);\n183-function_definition-20-20", method="isOwner(address _addr)", type_label=function_definition];
189 [label="19_ constant\n189-expression_statement-20-20", method="isOwner(address _addr)", type_label=expression_statement];
195 [label="20_ function hasConfirmed(bytes32 _operation, address _owner) external constant returns (bool);\n195-function_definition-21-21", method="hasConfirmed(bytes32 _operation,address _owner)", type_label=function_definition];
206 [label="20_ constant\n206-expression_statement-21-21", method="hasConfirmed(bytes32 _operation,address _owner)", type_label=expression_statement];
212 [label="21_ function setDailyLimit(uint _newLimit) external;\n212-function_definition-22-22", method="setDailyLimit(uint _newLimit)", type_label=function_definition];
219 [label="22_ function execute(address _to, uint _value, bytes _data) external returns (bytes32 o_hash);\n219-function_definition-23-23", method="execute(address _to,uint _value,bytes _data)", type_label=function_definition];
239 [label="23_ function confirm(bytes32 _h) returns (bool o_success);\n239-function_definition-24-24", method="confirm(bytes32 _h)", type_label=function_definition];
256 [label="26_ struct PendingState {\n    uint yetNeeded;\n    uint ownersDone;\n    uint index;\n  }\n256-expression_statement-27-31", method="PendingState()", type_label=expression_statement];
270 [label="31_ struct Transaction {\n    address to;\n    uint value;\n    bytes data;\n  }\n270-expression_statement-32-36", method="Transaction()", type_label=expression_statement];
284 [label="36_ modifier onlyowner {\n    if (isOwner(msg.sender))\n      _;\n  }\n284-expression_statement-37-40", method="", type_label=expression_statement];
287 [label="37_ if\n287-if-38-39", method="", type_label=if];
1957 [label="37_ end_if", method="", type_label=end_if];
294 [label="38_ _;\n294-expression_statement-39-39", method="", type_label=expression_statement];
296 [label="40_ modifier onlymanyowners(bytes32 _operation) {\n    if (confirmAndCheck(_operation))\n      _;\n  }\n296-expression_statement-41-44", method="", type_label=expression_statement];
303 [label="41_ if\n303-if-42-43", method="", type_label=if];
1973 [label="41_ end_if", method="", type_label=end_if];
308 [label="42_ _;\n308-expression_statement-43-43", method="", type_label=expression_statement];
313 [label="45_ if_msg.value > 0\n313-if-46-47", method="", type_label=if];
1983 [label="45_ end_if", method="", type_label=end_if];
319 [label="46_ Deposit(msg.sender, msg.value);\n319-expression_statement-47-47", method="", type_label=expression_statement];
330 [label="48_ function initMultiowned(address[] _owners, uint _required) only_uninitialized {\n    m_numOwners = _owners.length + 1;\n    m_owners[1] = uint(msg.sender);\n    m_ownerIndex[uint(msg.sender)] = 1;\n    for (uint i = 0; i < _owners.length; ++i)\n    {\n      m_owners[2 + i] = uint(_owners[i]);\n      m_ownerIndex[uint(_owners[i])] = 2 + i;\n    }\n    m_required = _required;\n  }\n330-function_definition-49-59", method="initMultiowned(address[] _owners,uint _required)", type_label=function_definition];
341 [label="48_ only_uninitialized\n341-expression_statement-49-49", method="initMultiowned(address[] _owners,uint _required)", type_label=expression_statement];
344 [label="49_ m_numOwners = _owners.length + 1;\n344-expression_statement-50-50", method="initMultiowned(address[] _owners,uint _required)", type_label=expression_statement];
352 [label="50_ m_owners[1] = uint(msg.sender);\n352-expression_statement-51-51", method="initMultiowned(address[] _owners,uint _required)", type_label=expression_statement];
362 [label="51_ m_ownerIndex[uint(msg.sender)] = 1;\n362-expression_statement-52-52", method="initMultiowned(address[] _owners,uint _required)", type_label=expression_statement];
372 [label="52_ for(i < _owners.length;;++i)\n372-for-53-57", method="initMultiowned(address[] _owners,uint _required)", type_label=for];
2042 [label="52_ end_loop", method="initMultiowned(address[] _owners,uint _required)", type_label=end_loop];
385 [label="52_ ++i\n385-expression_statement-53-53", method="initMultiowned(address[] _owners,uint _required)", type_label=expression_statement];
388 [label="54_ m_owners[2 + i] = uint(_owners[i]);\n388-expression_statement-55-55", method="initMultiowned(address[] _owners,uint _required)", type_label=expression_statement];
400 [label="55_ m_ownerIndex[uint(_owners[i])] = 2 + i;\n400-expression_statement-56-56", method="initMultiowned(address[] _owners,uint _required)", type_label=expression_statement];
412 [label="57_ m_required = _required;\n412-expression_statement-58-58", method="initMultiowned(address[] _owners,uint _required)", type_label=expression_statement];
416 [label="59_ function revoke(bytes32 _operation) external {\n    uint ownerIndex = m_ownerIndex[uint(msg.sender)];\n    if (ownerIndex == 0) return;\n    uint ownerIndexBit = 2**ownerIndex;\n    var pending = m_pending[_operation];\n    if (pending.ownersDone & ownerIndexBit > 0) {\n      pending.yetNeeded++;\n      pending.ownersDone -= ownerIndexBit;\n      Revoke(msg.sender, _operation);\n    }\n  }\n416-function_definition-60-70", method="revoke(bytes32 _operation)", type_label=function_definition];
424 [label="60_ uint ownerIndex = m_ownerIndex[uint(msg.sender)];\n424-new_variable-61-61", method="revoke(bytes32 _operation)", type_label=new_variable];
436 [label="61_ if_ownerIndex == 0\n436-if-62-62", method="revoke(bytes32 _operation)", type_label=if];
2106 [label="61_ end_if", method="revoke(bytes32 _operation)", type_label=end_if];
440 [label="61_ return;\n440-return-62-62", method="revoke(bytes32 _operation)", type_label=return];
441 [label="62_ uint ownerIndexBit = 2**ownerIndex;\n441-new_variable-63-63", method="revoke(bytes32 _operation)", type_label=new_variable];
449 [label="63_ var pending = m_pending[_operation];\n449-new_variable-64-64", method="revoke(bytes32 _operation)", type_label=new_variable];
457 [label="64_ if_pending.ownersDone & ownerIndexBit > 0\n457-if-65-69", method="revoke(bytes32 _operation)", type_label=if];
2127 [label="64_ end_if", method="revoke(bytes32 _operation)", type_label=end_if];
466 [label="65_ pending.yetNeeded++;\n466-expression_statement-66-66", method="revoke(bytes32 _operation)", type_label=expression_statement];
467 [label="65_ pending.yetNeeded++\n467-expression_statement-66-66", method="revoke(bytes32 _operation)", type_label=expression_statement];
471 [label="66_ pending.ownersDone -= ownerIndexBit;\n471-expression_statement-67-67", method="revoke(bytes32 _operation)", type_label=expression_statement];
477 [label="67_ Revoke(msg.sender, _operation);\n477-expression_statement-68-68", method="revoke(bytes32 _operation)", type_label=expression_statement];
486 [label="70_ function changeOwner(address _from, address _to) onlymanyowners(sha3(msg.data)) external {\n    if (isOwner(_to)) return;\n    uint ownerIndex = m_ownerIndex[uint(_from)];\n    if (ownerIndex == 0) return;\n    clearPending();\n    m_owners[ownerIndex] = uint(_to);\n    m_ownerIndex[uint(_from)] = 0;\n    m_ownerIndex[uint(_to)] = ownerIndex;\n    OwnerChanged(_from, _to);\n  }\n486-function_definition-71-80", method="changeOwner(address _from,address _to)", type_label=function_definition];
496 [label="70_ onlymanyowners(sha3(msg.data))\n496-expression_statement-71-71", method="changeOwner(address _from,address _to)", type_label=expression_statement];
507 [label="71_ if\n507-if-72-72", method="changeOwner(address _from,address _to)", type_label=if];
2177 [label="71_ end_if", method="changeOwner(address _from,address _to)", type_label=end_if];
512 [label="71_ return;\n512-return-72-72", method="changeOwner(address _from,address _to)", type_label=return];
513 [label="72_ uint ownerIndex = m_ownerIndex[uint(_from)];\n513-new_variable-73-73", method="changeOwner(address _from,address _to)", type_label=new_variable];
523 [label="73_ if_ownerIndex == 0\n523-if-74-74", method="changeOwner(address _from,address _to)", type_label=if];
2193 [label="73_ end_if", method="changeOwner(address _from,address _to)", type_label=end_if];
527 [label="73_ return;\n527-return-74-74", method="changeOwner(address _from,address _to)", type_label=return];
528 [label="74_ clearPending();\n528-expression_statement-75-75", method="changeOwner(address _from,address _to)", type_label=expression_statement];
531 [label="75_ m_owners[ownerIndex] = uint(_to);\n531-expression_statement-76-76", method="changeOwner(address _from,address _to)", type_label=expression_statement];
539 [label="76_ m_ownerIndex[uint(_from)] = 0;\n539-expression_statement-77-77", method="changeOwner(address _from,address _to)", type_label=expression_statement];
547 [label="77_ m_ownerIndex[uint(_to)] = ownerIndex;\n547-expression_statement-78-78", method="changeOwner(address _from,address _to)", type_label=expression_statement];
555 [label="78_ OwnerChanged(_from, _to);\n555-expression_statement-79-79", method="changeOwner(address _from,address _to)", type_label=expression_statement];
562 [label="80_ function addOwner(address _owner) onlymanyowners(sha3(msg.data)) external {\n    if (isOwner(_owner)) return;\n    clearPending();\n    if (m_numOwners >= c_maxOwners)\n      reorganizeOwners();\n    if (m_numOwners >= c_maxOwners)\n      return;\n    m_numOwners++;\n    m_owners[m_numOwners] = uint(_owner);\n    m_ownerIndex[uint(_owner)] = m_numOwners;\n    OwnerAdded(_owner);\n  }\n562-function_definition-81-92", method="addOwner(address _owner)", type_label=function_definition];
568 [label="80_ onlymanyowners(sha3(msg.data))\n568-expression_statement-81-81", method="addOwner(address _owner)", type_label=expression_statement];
579 [label="81_ if\n579-if-82-82", method="addOwner(address _owner)", type_label=if];
2249 [label="81_ end_if", method="addOwner(address _owner)", type_label=end_if];
584 [label="81_ return;\n584-return-82-82", method="addOwner(address _owner)", type_label=return];
585 [label="82_ clearPending();\n585-expression_statement-83-83", method="addOwner(address _owner)", type_label=expression_statement];
588 [label="83_ if_m_numOwners >= c_maxOwners\n588-if-84-85", method="addOwner(address _owner)", type_label=if];
2258 [label="83_ end_if", method="addOwner(address _owner)", type_label=end_if];
592 [label="84_ reorganizeOwners();\n592-expression_statement-85-85", method="addOwner(address _owner)", type_label=expression_statement];
595 [label="85_ if_m_numOwners >= c_maxOwners\n595-if-86-87", method="addOwner(address _owner)", type_label=if];
2265 [label="85_ end_if", method="addOwner(address _owner)", type_label=end_if];
599 [label="86_ return;\n599-return-87-87", method="addOwner(address _owner)", type_label=return];
600 [label="87_ m_numOwners++;\n600-expression_statement-88-88", method="addOwner(address _owner)", type_label=expression_statement];
601 [label="87_ m_numOwners++\n601-expression_statement-88-88", method="addOwner(address _owner)", type_label=expression_statement];
603 [label="88_ m_owners[m_numOwners] = uint(_owner);\n603-expression_statement-89-89", method="addOwner(address _owner)", type_label=expression_statement];
611 [label="89_ m_ownerIndex[uint(_owner)] = m_numOwners;\n611-expression_statement-90-90", method="addOwner(address _owner)", type_label=expression_statement];
619 [label="90_ OwnerAdded(_owner);\n619-expression_statement-91-91", method="addOwner(address _owner)", type_label=expression_statement];
624 [label="92_ function removeOwner(address _owner) onlymanyowners(sha3(msg.data)) external {\n    uint ownerIndex = m_ownerIndex[uint(_owner)];\n    if (ownerIndex == 0) return;\n    if (m_required > m_numOwners - 1) return;\n    m_owners[ownerIndex] = 0;\n    m_ownerIndex[uint(_owner)] = 0;\n    clearPending();\n    reorganizeOwners();  \n    OwnerRemoved(_owner);\n  }\n624-function_definition-93-102", method="removeOwner(address _owner)", type_label=function_definition];
630 [label="92_ onlymanyowners(sha3(msg.data))\n630-expression_statement-93-93", method="removeOwner(address _owner)", type_label=expression_statement];
641 [label="93_ uint ownerIndex = m_ownerIndex[uint(_owner)];\n641-new_variable-94-94", method="removeOwner(address _owner)", type_label=new_variable];
651 [label="94_ if_ownerIndex == 0\n651-if-95-95", method="removeOwner(address _owner)", type_label=if];
2321 [label="94_ end_if", method="removeOwner(address _owner)", type_label=end_if];
655 [label="94_ return;\n655-return-95-95", method="removeOwner(address _owner)", type_label=return];
656 [label="95_ if_m_required > m_numOwners - 1\n656-if-96-96", method="removeOwner(address _owner)", type_label=if];
2326 [label="95_ end_if", method="removeOwner(address _owner)", type_label=end_if];
662 [label="95_ return;\n662-return-96-96", method="removeOwner(address _owner)", type_label=return];
663 [label="96_ m_owners[ownerIndex] = 0;\n663-expression_statement-97-97", method="removeOwner(address _owner)", type_label=expression_statement];
669 [label="97_ m_ownerIndex[uint(_owner)] = 0;\n669-expression_statement-98-98", method="removeOwner(address _owner)", type_label=expression_statement];
677 [label="98_ clearPending();\n677-expression_statement-99-99", method="removeOwner(address _owner)", type_label=expression_statement];
680 [label="99_ reorganizeOwners();\n680-expression_statement-100-100", method="removeOwner(address _owner)", type_label=expression_statement];
683 [label="100_ OwnerRemoved(_owner);\n683-expression_statement-101-101", method="removeOwner(address _owner)", type_label=expression_statement];
688 [label="102_ function changeRequirement(uint _newRequired) onlymanyowners(sha3(msg.data)) external {\n    if (_newRequired > m_numOwners) return;\n    m_required = _newRequired;\n    clearPending();\n    RequirementChanged(_newRequired);\n  }\n688-function_definition-103-108", method="changeRequirement(uint _newRequired)", type_label=function_definition];
694 [label="102_ onlymanyowners(sha3(msg.data))\n694-expression_statement-103-103", method="changeRequirement(uint _newRequired)", type_label=expression_statement];
705 [label="103_ if__newRequired > m_numOwners\n705-if-104-104", method="changeRequirement(uint _newRequired)", type_label=if];
2375 [label="103_ end_if", method="changeRequirement(uint _newRequired)", type_label=end_if];
709 [label="103_ return;\n709-return-104-104", method="changeRequirement(uint _newRequired)", type_label=return];
710 [label="104_ m_required = _newRequired;\n710-expression_statement-105-105", method="changeRequirement(uint _newRequired)", type_label=expression_statement];
714 [label="105_ clearPending();\n714-expression_statement-106-106", method="changeRequirement(uint _newRequired)", type_label=expression_statement];
717 [label="106_ RequirementChanged(_newRequired);\n717-expression_statement-107-107", method="changeRequirement(uint _newRequired)", type_label=expression_statement];
722 [label="108_ function getOwner(uint ownerIndex) external constant returns (address) {\n    return address(m_owners[ownerIndex + 1]);\n  }\n722-function_definition-109-111", method="getOwner(uint ownerIndex)", type_label=function_definition];
729 [label="108_ constant\n729-expression_statement-109-109", method="getOwner(uint ownerIndex)", type_label=expression_statement];
736 [label="109_ return address(m_owners[ownerIndex + 1]);\n736-return-110-110", method="getOwner(uint ownerIndex)", type_label=return];
744 [label="111_ function isOwner(address _addr) constant returns (bool) {\n    return m_ownerIndex[uint(_addr)] > 0;\n  }\n744-function_definition-112-114", method="isOwner(address _addr)", type_label=function_definition];
750 [label="111_ constant\n750-expression_statement-112-112", method="isOwner(address _addr)", type_label=expression_statement];
757 [label="112_ return m_ownerIndex[uint(_addr)] > 0;\n757-return-113-113", method="isOwner(address _addr)", type_label=return];
765 [label="114_ function hasConfirmed(bytes32 _operation, address _owner) external constant returns (bool) {\n    var pending = m_pending[_operation];\n    uint ownerIndex = m_ownerIndex[uint(_owner)];\n    if (ownerIndex == 0) return false;\n    uint ownerIndexBit = 2**ownerIndex;\n    return !(pending.ownersDone & ownerIndexBit == 0);\n  }\n765-function_definition-115-121", method="hasConfirmed(bytes32 _operation,address _owner)", type_label=function_definition];
776 [label="114_ constant\n776-expression_statement-115-115", method="hasConfirmed(bytes32 _operation,address _owner)", type_label=expression_statement];
783 [label="115_ var pending = m_pending[_operation];\n783-new_variable-116-116", method="hasConfirmed(bytes32 _operation,address _owner)", type_label=new_variable];
791 [label="116_ uint ownerIndex = m_ownerIndex[uint(_owner)];\n791-new_variable-117-117", method="hasConfirmed(bytes32 _operation,address _owner)", type_label=new_variable];
801 [label="117_ if_ownerIndex == 0\n801-if-118-118", method="hasConfirmed(bytes32 _operation,address _owner)", type_label=if];
2471 [label="117_ end_if", method="hasConfirmed(bytes32 _operation,address _owner)", type_label=end_if];
805 [label="117_ return false;\n805-return-118-118", method="hasConfirmed(bytes32 _operation,address _owner)", type_label=return];
808 [label="118_ uint ownerIndexBit = 2**ownerIndex;\n808-new_variable-119-119", method="hasConfirmed(bytes32 _operation,address _owner)", type_label=new_variable];
816 [label="119_ return !(pending.ownersDone & ownerIndexBit == 0);\n816-return-120-120", method="hasConfirmed(bytes32 _operation,address _owner)", type_label=return];
826 [label="121_ function initDaylimit(uint _limit) only_uninitialized {\n    m_dailyLimit = _limit;\n    m_lastDay = today();\n  }\n826-function_definition-122-125", method="initDaylimit(uint _limit)", type_label=function_definition];
832 [label="121_ only_uninitialized\n832-expression_statement-122-122", method="initDaylimit(uint _limit)", type_label=expression_statement];
835 [label="122_ m_dailyLimit = _limit;\n835-expression_statement-123-123", method="initDaylimit(uint _limit)", type_label=expression_statement];
839 [label="123_ m_lastDay = today();\n839-expression_statement-124-124", method="initDaylimit(uint _limit)", type_label=expression_statement];
844 [label="125_ function setDailyLimit(uint _newLimit) onlymanyowners(sha3(msg.data)) external {\n    m_dailyLimit = _newLimit;\n  }\n844-function_definition-126-128", method="setDailyLimit(uint _newLimit)", type_label=function_definition];
850 [label="125_ onlymanyowners(sha3(msg.data))\n850-expression_statement-126-126", method="setDailyLimit(uint _newLimit)", type_label=expression_statement];
861 [label="126_ m_dailyLimit = _newLimit;\n861-expression_statement-127-127", method="setDailyLimit(uint _newLimit)", type_label=expression_statement];
865 [label="128_ function resetSpentToday() onlymanyowners(sha3(msg.data)) external {\n    m_spentToday = 0;\n  }\n865-function_definition-129-131", method="resetSpentToday()", type_label=function_definition];
867 [label="128_ onlymanyowners(sha3(msg.data))\n867-expression_statement-129-129", method="resetSpentToday()", type_label=expression_statement];
878 [label="129_ m_spentToday = 0;\n878-expression_statement-130-130", method="resetSpentToday()", type_label=expression_statement];
882 [label="131_ modifier only_uninitialized { if (m_numOwners > 0) throw; _; }\n882-expression_statement-132-132", method="", type_label=expression_statement];
885 [label="131_ if_m_numOwners > 0\n885-if-132-132", method="", type_label=if];
2555 [label="131_ end_if", method="", type_label=end_if];
889 [label="131_ throw;\n889-expression_statement-132-132", method="", type_label=expression_statement];
891 [label="131_ _;\n891-expression_statement-132-132", method="", type_label=expression_statement];
893 [label="132_ function initWallet(address[] _owners, uint _required, uint _daylimit) only_uninitialized {\n    initDaylimit(_daylimit);\n    initMultiowned(_owners, _required);\n  }\n893-function_definition-133-136", method="initWallet(address[] _owners,uint _required,uint _daylimit)", type_label=function_definition];
908 [label="132_ only_uninitialized\n908-expression_statement-133-133", method="initWallet(address[] _owners,uint _required,uint _daylimit)", type_label=expression_statement];
911 [label="133_ initDaylimit(_daylimit);\n911-expression_statement-134-134", method="initWallet(address[] _owners,uint _required,uint _daylimit)", type_label=expression_statement];
916 [label="134_ initMultiowned(_owners, _required);\n916-expression_statement-135-135", method="initWallet(address[] _owners,uint _required,uint _daylimit)", type_label=expression_statement];
923 [label="136_ function kill(address _to) onlymanyowners(sha3(msg.data)) external {\n    suicide(_to);\n  }\n923-function_definition-137-139", method="kill(address _to)", type_label=function_definition];
929 [label="136_ onlymanyowners(sha3(msg.data))\n929-expression_statement-137-137", method="kill(address _to)", type_label=expression_statement];
940 [label="137_ suicide(_to);\n940-expression_statement-138-138", method="kill(address _to)", type_label=expression_statement];
945 [label="139_ function execute(address _to, uint _value, bytes _data) external onlyowner returns (bytes32 o_hash) {\n    if ((_data.length == 0 && underLimit(_value)) || m_required == 1) {\n      address created;\n      if (_to == 0) {\n        created = create(_value, _data);\n      } else {\n        if (!_to.call.value(_value)(_data))\n          throw;\n      }\n      SingleTransact(msg.sender, _value, _to, _data, created);\n    } else {\n      o_hash = sha3(msg.data, block.number);\n      if (m_txs[o_hash].to == 0 && m_txs[o_hash].value == 0 && m_txs[o_hash].data.length == 0) {\n        m_txs[o_hash].to = _to;\n        m_txs[o_hash].value = _value;\n        m_txs[o_hash].data = _data;\n      }\n      if (!confirm(o_hash)) {\n        ConfirmationNeeded(o_hash, msg.sender, _value, _to, _data);\n      }\n    }\n  }\n945-function_definition-140-161", method="execute(address _to,uint _value,bytes _data)", type_label=function_definition];
960 [label="139_ onlyowner\n960-expression_statement-140-140", method="execute(address _to,uint _value,bytes _data)", type_label=expression_statement];
968 [label="140_ if_(_data.length == 0 && underLimit(_value)) || m_required == 1\n968-if-141-160", method="execute(address _to,uint _value,bytes _data)", type_label=if];
2638 [label="140_ end_if", method="execute(address _to,uint _value,bytes _data)", type_label=end_if];
985 [label="141_ address created;\n985-new_variable-142-142", method="execute(address _to,uint _value,bytes _data)", type_label=new_variable];
990 [label="142_ if__to == 0\n990-if-143-148", method="execute(address _to,uint _value,bytes _data)", type_label=if];
2660 [label="142_ end_if", method="execute(address _to,uint _value,bytes _data)", type_label=end_if];
995 [label="143_ created = create(_value, _data);\n995-expression_statement-144-144", method="execute(address _to,uint _value,bytes _data)", type_label=expression_statement];
1005 [label="145_ if\n1005-if-146-147", method="execute(address _to,uint _value,bytes _data)", type_label=if];
2675 [label="145_ end_if", method="execute(address _to,uint _value,bytes _data)", type_label=end_if];
1018 [label="146_ throw;\n1018-expression_statement-147-147", method="execute(address _to,uint _value,bytes _data)", type_label=expression_statement];
1020 [label="148_ SingleTransact(msg.sender, _value, _to, _data, created);\n1020-expression_statement-149-149", method="execute(address _to,uint _value,bytes _data)", type_label=expression_statement];
1036 [label="150_ o_hash = sha3(msg.data, block.number);\n1036-expression_statement-151-151", method="execute(address _to,uint _value,bytes _data)", type_label=expression_statement];
1049 [label="151_ if_m_txs[o_hash].to == 0 && m_txs[o_hash].value == 0 && m_txs[o_hash].data.length == 0\n1049-if-152-156", method="execute(address _to,uint _value,bytes _data)", type_label=if];
2719 [label="151_ end_if", method="execute(address _to,uint _value,bytes _data)", type_label=end_if];
1076 [label="152_ m_txs[o_hash].to = _to;\n1076-expression_statement-153-153", method="execute(address _to,uint _value,bytes _data)", type_label=expression_statement];
1084 [label="153_ m_txs[o_hash].value = _value;\n1084-expression_statement-154-154", method="execute(address _to,uint _value,bytes _data)", type_label=expression_statement];
1092 [label="154_ m_txs[o_hash].data = _data;\n1092-expression_statement-155-155", method="execute(address _to,uint _value,bytes _data)", type_label=expression_statement];
1100 [label="156_ if\n1100-if-157-159", method="execute(address _to,uint _value,bytes _data)", type_label=if];
2770 [label="156_ end_if", method="execute(address _to,uint _value,bytes _data)", type_label=end_if];
1107 [label="157_ ConfirmationNeeded(o_hash, msg.sender, _value, _to, _data);\n1107-expression_statement-158-158", method="execute(address _to,uint _value,bytes _data)", type_label=expression_statement];
1122 [label="161_ function create(uint _value, bytes _code) internal returns (address o_addr) {\n  }\n1122-function_definition-162-163", method="create(uint _value,bytes _code)", type_label=function_definition];
1139 [label="163_ function confirm(bytes32 _h) onlymanyowners(_h) returns (bool o_success) {\n    if (m_txs[_h].to != 0 || m_txs[_h].value != 0 || m_txs[_h].data.length != 0) {\n      address created;\n      if (m_txs[_h].to == 0) {\n        created = create(m_txs[_h].value, m_txs[_h].data);\n      } else {\n        if (!m_txs[_h].to.call.value(m_txs[_h].value)(m_txs[_h].data))\n          throw;\n      }\n      MultiTransact(msg.sender, _h, m_txs[_h].value, m_txs[_h].to, m_txs[_h].data, created);\n      delete m_txs[_h];\n      return true;\n    }\n  }\n1139-function_definition-164-177", method="confirm(bytes32 _h)", type_label=function_definition];
1145 [label="163_ onlymanyowners(_h)\n1145-expression_statement-164-164", method="confirm(bytes32 _h)", type_label=expression_statement];
1155 [label="164_ if_m_txs[_h].to != 0 || m_txs[_h].value != 0 || m_txs[_h].data.length != 0\n1155-if-165-176", method="confirm(bytes32 _h)", type_label=if];
2825 [label="164_ end_if", method="confirm(bytes32 _h)", type_label=end_if];
1182 [label="165_ address created;\n1182-new_variable-166-166", method="confirm(bytes32 _h)", type_label=new_variable];
1187 [label="166_ if_m_txs[_h].to == 0\n1187-if-167-172", method="confirm(bytes32 _h)", type_label=if];
2857 [label="166_ end_if", method="confirm(bytes32 _h)", type_label=end_if];
1196 [label="167_ created = create(m_txs[_h].value, m_txs[_h].data);\n1196-expression_statement-168-168", method="confirm(bytes32 _h)", type_label=expression_statement];
1214 [label="169_ if\n1214-if-170-171", method="confirm(bytes32 _h)", type_label=if];
2884 [label="169_ end_if", method="confirm(bytes32 _h)", type_label=end_if];
1239 [label="170_ throw;\n1239-expression_statement-171-171", method="confirm(bytes32 _h)", type_label=expression_statement];
1241 [label="172_ MultiTransact(msg.sender, _h, m_txs[_h].value, m_txs[_h].to, m_txs[_h].data, created);\n1241-expression_statement-173-173", method="confirm(bytes32 _h)", type_label=expression_statement];
1270 [label="173_ delete m_txs[_h];\n1270-expression_statement-174-174", method="confirm(bytes32 _h)", type_label=expression_statement];
1275 [label="174_ return true;\n1275-return-175-175", method="confirm(bytes32 _h)", type_label=return];
1278 [label="177_ function confirmAndCheck(bytes32 _operation) internal returns (bool) {\n    uint ownerIndex = m_ownerIndex[uint(msg.sender)];\n    if (ownerIndex == 0) return;\n    var pending = m_pending[_operation];\n    if (pending.yetNeeded == 0) {\n      pending.yetNeeded = m_required;\n      pending.ownersDone = 0;\n      pending.index = m_pendingIndex.length++;\n      m_pendingIndex[pending.index] = _operation;\n    }\n    uint ownerIndexBit = 2**ownerIndex;\n    if (pending.ownersDone & ownerIndexBit == 0) {\n      Confirmation(msg.sender, _operation);\n      if (pending.yetNeeded <= 1) {\n        delete m_pendingIndex[m_pending[_operation].index];\n        delete m_pending[_operation];\n        return true;\n      }\n      else\n      {\n        pending.yetNeeded--;\n        pending.ownersDone |= ownerIndexBit;\n      }\n    }\n  }\n1278-function_definition-178-202", method="confirmAndCheck(bytes32 _operation)", type_label=function_definition];
1290 [label="178_ uint ownerIndex = m_ownerIndex[uint(msg.sender)];\n1290-new_variable-179-179", method="confirmAndCheck(bytes32 _operation)", type_label=new_variable];
1302 [label="179_ if_ownerIndex == 0\n1302-if-180-180", method="confirmAndCheck(bytes32 _operation)", type_label=if];
2972 [label="179_ end_if", method="confirmAndCheck(bytes32 _operation)", type_label=end_if];
1306 [label="179_ return;\n1306-return-180-180", method="confirmAndCheck(bytes32 _operation)", type_label=return];
1307 [label="180_ var pending = m_pending[_operation];\n1307-new_variable-181-181", method="confirmAndCheck(bytes32 _operation)", type_label=new_variable];
1315 [label="181_ if_pending.yetNeeded == 0\n1315-if-182-187", method="confirmAndCheck(bytes32 _operation)", type_label=if];
2985 [label="181_ end_if", method="confirmAndCheck(bytes32 _operation)", type_label=end_if];
1322 [label="182_ pending.yetNeeded = m_required;\n1322-expression_statement-183-183", method="confirmAndCheck(bytes32 _operation)", type_label=expression_statement];
1328 [label="183_ pending.ownersDone = 0;\n1328-expression_statement-184-184", method="confirmAndCheck(bytes32 _operation)", type_label=expression_statement];
1334 [label="184_ pending.index = m_pendingIndex.length++;\n1334-expression_statement-185-185", method="confirmAndCheck(bytes32 _operation)", type_label=expression_statement];
1339 [label="184_ m_pendingIndex.length++\n1339-expression_statement-185-185", method="confirmAndCheck(bytes32 _operation)", type_label=expression_statement];
1343 [label="185_ m_pendingIndex[pending.index] = _operation;\n1343-expression_statement-186-186", method="confirmAndCheck(bytes32 _operation)", type_label=expression_statement];
1351 [label="187_ uint ownerIndexBit = 2**ownerIndex;\n1351-new_variable-188-188", method="confirmAndCheck(bytes32 _operation)", type_label=new_variable];
1359 [label="188_ if_pending.ownersDone & ownerIndexBit == 0\n1359-if-189-201", method="confirmAndCheck(bytes32 _operation)", type_label=if];
3029 [label="188_ end_if", method="confirmAndCheck(bytes32 _operation)", type_label=end_if];
1368 [label="189_ Confirmation(msg.sender, _operation);\n1368-expression_statement-190-190", method="confirmAndCheck(bytes32 _operation)", type_label=expression_statement];
1377 [label="190_ if_pending.yetNeeded <= 1\n1377-if-191-200", method="confirmAndCheck(bytes32 _operation)", type_label=if];
3047 [label="190_ end_if", method="confirmAndCheck(bytes32 _operation)", type_label=end_if];
1384 [label="191_ delete m_pendingIndex[m_pending[_operation].index];\n1384-expression_statement-192-192", method="confirmAndCheck(bytes32 _operation)", type_label=expression_statement];
1393 [label="192_ delete m_pending[_operation];\n1393-expression_statement-193-193", method="confirmAndCheck(bytes32 _operation)", type_label=expression_statement];
1398 [label="193_ return true;\n1398-return-194-194", method="confirmAndCheck(bytes32 _operation)", type_label=return];
1402 [label="197_ pending.yetNeeded--;\n1402-expression_statement-198-198", method="confirmAndCheck(bytes32 _operation)", type_label=expression_statement];
1403 [label="197_ pending.yetNeeded--\n1403-expression_statement-198-198", method="confirmAndCheck(bytes32 _operation)", type_label=expression_statement];
1407 [label="198_ pending.ownersDone |= ownerIndexBit;\n1407-expression_statement-199-199", method="confirmAndCheck(bytes32 _operation)", type_label=expression_statement];
1413 [label="202_ function reorganizeOwners() private {\n    uint free = 1;\n    while (free < m_numOwners)\n    {\n      while (free < m_numOwners && m_owners[free] != 0) free++;\n      while (m_numOwners > 1 && m_owners[m_numOwners] == 0) m_numOwners--;\n      if (free < m_numOwners && m_owners[m_numOwners] != 0 && m_owners[free] == 0)\n      {\n        m_owners[free] = m_owners[m_numOwners];\n        m_ownerIndex[m_owners[free]] = free;\n        m_owners[m_numOwners] = 0;\n      }\n    }\n  }\n1413-function_definition-203-216", method="reorganizeOwners()", type_label=function_definition];
1417 [label="203_ uint free = 1;\n1417-new_variable-204-204", method="reorganizeOwners()", type_label=new_variable];
1423 [label="204_ while\n1423-while-205-215", method="reorganizeOwners()", type_label=while];
3093 [label="204_ end_loop", method="reorganizeOwners()", type_label=end_loop];
1428 [label="206_ while\n1428-while-207-207", method="reorganizeOwners()", type_label=while];
3098 [label="206_ end_loop", method="reorganizeOwners()", type_label=end_loop];
1438 [label="206_ free++;\n1438-expression_statement-207-207", method="reorganizeOwners()", type_label=expression_statement];
1439 [label="206_ free++\n1439-expression_statement-207-207", method="reorganizeOwners()", type_label=expression_statement];
1441 [label="207_ while\n1441-while-208-208", method="reorganizeOwners()", type_label=while];
3111 [label="207_ end_loop", method="reorganizeOwners()", type_label=end_loop];
1451 [label="207_ m_numOwners--;\n1451-expression_statement-208-208", method="reorganizeOwners()", type_label=expression_statement];
1452 [label="207_ m_numOwners--\n1452-expression_statement-208-208", method="reorganizeOwners()", type_label=expression_statement];
1454 [label="208_ if_free < m_numOwners && m_owners[m_numOwners] != 0 && m_owners[free] == 0\n1454-if-209-214", method="reorganizeOwners()", type_label=if];
3124 [label="208_ end_if", method="reorganizeOwners()", type_label=end_if];
1471 [label="210_ m_owners[free] = m_owners[m_numOwners];\n1471-expression_statement-211-211", method="reorganizeOwners()", type_label=expression_statement];
1479 [label="211_ m_ownerIndex[m_owners[free]] = free;\n1479-expression_statement-212-212", method="reorganizeOwners()", type_label=expression_statement];
1487 [label="212_ m_owners[m_numOwners] = 0;\n1487-expression_statement-213-213", method="reorganizeOwners()", type_label=expression_statement];
1493 [label="216_ function underLimit(uint _value) internal onlyowner returns (bool) {\n    if (today() > m_lastDay) {\n      m_spentToday = 0;\n      m_lastDay = today();\n    }\n    if (m_spentToday + _value >= m_spentToday && m_spentToday + _value <= m_dailyLimit) {\n      m_spentToday += _value;\n      return true;\n    }\n    return false;\n  }\n1493-function_definition-217-227", method="underLimit(uint _value)", type_label=function_definition];
1500 [label="216_ onlyowner\n1500-expression_statement-217-217", method="underLimit(uint _value)", type_label=expression_statement];
1507 [label="217_ if_today() > m_lastDay\n1507-if-218-221", method="underLimit(uint _value)", type_label=if];
3177 [label="217_ end_if", method="underLimit(uint _value)", type_label=end_if];
1513 [label="218_ m_spentToday = 0;\n1513-expression_statement-219-219", method="underLimit(uint _value)", type_label=expression_statement];
1517 [label="219_ m_lastDay = today();\n1517-expression_statement-220-220", method="underLimit(uint _value)", type_label=expression_statement];
1522 [label="221_ if_m_spentToday + _value >= m_spentToday && m_spentToday + _value <= m_dailyLimit\n1522-if-222-225", method="underLimit(uint _value)", type_label=if];
3192 [label="221_ end_if", method="underLimit(uint _value)", type_label=end_if];
1535 [label="222_ m_spentToday += _value;\n1535-expression_statement-223-223", method="underLimit(uint _value)", type_label=expression_statement];
1539 [label="223_ return true;\n1539-return-224-224", method="underLimit(uint _value)", type_label=return];
1542 [label="225_ return false;\n1542-return-226-226", method="underLimit(uint _value)", type_label=return];
1545 [label="227_ function today() private constant returns (uint) { return now / 1 days; }\n1545-function_definition-228-228", method="today()", type_label=function_definition];
1548 [label="227_ constant\n1548-expression_statement-228-228", method="today()", type_label=expression_statement];
1555 [label="227_ return now / 1 days;\n1555-return-228-228", method="today()", type_label=return];
1560 [label="228_ function clearPending() internal {\n    uint length = m_pendingIndex.length;\n    for (uint i = 0; i < length; ++i) {\n      delete m_txs[m_pendingIndex[i]];\n      if (m_pendingIndex[i] != 0)\n        delete m_pending[m_pendingIndex[i]];\n    }\n    delete m_pendingIndex;\n  }\n1560-function_definition-229-237", method="clearPending()", type_label=function_definition];
1564 [label="229_ uint length = m_pendingIndex.length;\n1564-new_variable-230-230", method="clearPending()", type_label=new_variable];
1572 [label="230_ for(i < length;;++i)\n1572-for-231-235", method="clearPending()", type_label=for];
3242 [label="230_ end_loop", method="clearPending()", type_label=end_loop];
1583 [label="230_ ++i\n1583-expression_statement-231-231", method="clearPending()", type_label=expression_statement];
1586 [label="231_ delete m_txs[m_pendingIndex[i]];\n1586-expression_statement-232-232", method="clearPending()", type_label=expression_statement];
1593 [label="232_ if_m_pendingIndex[i] != 0\n1593-if-233-234", method="clearPending()", type_label=if];
3263 [label="232_ end_if", method="clearPending()", type_label=end_if];
1599 [label="233_ delete m_pending[m_pendingIndex[i]];\n1599-expression_statement-234-234", method="clearPending()", type_label=expression_statement];
1606 [label="235_ delete m_pendingIndex;\n1606-expression_statement-236-236", method="clearPending()", type_label=expression_statement];
1609 [label="237_ address constant _walletLibrary = 0xcafecafecafecafecafecafecafecafecafecafe;\n1609-new_variable-238-238", method="", type_label=new_variable];
1614 [label="238_ uint public m_required;\n1614-new_variable-239-239", method="", type_label=new_variable];
1619 [label="239_ uint public m_numOwners;\n1619-new_variable-240-240", method="", type_label=new_variable];
1624 [label="240_ uint public m_dailyLimit;\n1624-new_variable-241-241", method="", type_label=new_variable];
1629 [label="241_ uint public m_spentToday;\n1629-new_variable-242-242", method="", type_label=new_variable];
1634 [label="242_ uint public m_lastDay;\n1634-new_variable-243-243", method="", type_label=new_variable];
1639 [label="243_ uint[256] m_owners;\n1639-new_variable-244-244", method="", type_label=new_variable];
1645 [label="244_ uint constant c_maxOwners = 250;\n1645-new_variable-245-245", method="", type_label=new_variable];
1650 [label="245_ mapping(uint => uint) m_ownerIndex;\n1650-new_variable-246-246", method="", type_label=new_variable];
1656 [label="246_ mapping(bytes32 => PendingState) m_pending;\n1656-new_variable-247-247", method="", type_label=new_variable];
1663 [label="247_ bytes32[] m_pendingIndex;\n1663-new_variable-248-248", method="", type_label=new_variable];
1668 [label="248_ mapping (bytes32 => Transaction) m_txs;\n1668-new_variable-249-249", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
310;
256 -> 270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
270 -> 284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
284 -> 296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 294  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
287 -> 1957  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1957 -> 296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 1957  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
303 -> 308  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
303 -> 1973  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1973 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
308 -> 1973  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
313 -> 319  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
313 -> 1983  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1983 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
319 -> 1983  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
330 -> 344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
344 -> 352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
352 -> 362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
362 -> 372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
372 -> 388  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
372 -> 2042  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2042 -> 412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 372  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
388 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 385  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
416 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 440  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
436 -> 2106  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2106 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
440 -> 2106  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
440 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
441 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 466  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
457 -> 2127  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2127 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 2127  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
486 -> 507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
507 -> 512  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
507 -> 2177  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2177 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 2177  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
512 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
513 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 527  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
523 -> 2193  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2193 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
527 -> 2193  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
527 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
528 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
547 -> 555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
562 -> 579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 584  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
579 -> 2249  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2249 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
584 -> 2249  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
584 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
585 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 592  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
588 -> 2258  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2258 -> 595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 2258  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
595 -> 599  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
595 -> 2265  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2265 -> 600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
599 -> 2265  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
599 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
600 -> 603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
603 -> 611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
624 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
641 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
651 -> 655  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
651 -> 2321  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2321 -> 656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
655 -> 2321  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
655 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
656 -> 662  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
656 -> 2326  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2326 -> 663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
662 -> 2326  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
662 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
663 -> 669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
669 -> 677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 709  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
705 -> 2375  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2375 -> 710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
709 -> 2375  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
709 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
710 -> 714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
714 -> 717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
722 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
744 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
765 -> 783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
783 -> 791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
791 -> 801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
801 -> 805  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
801 -> 2471  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2471 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
805 -> 2471  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
805 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
808 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
826 -> 835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
835 -> 839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
844 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
865 -> 878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 889  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
885 -> 2555  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2555 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
889 -> 2555  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
893 -> 911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
911 -> 916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
923 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
945 -> 968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
968 -> 985  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
968 -> 1036  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2638 -> 1122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
990 -> 995  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
990 -> 1005  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2660 -> 1020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
995 -> 2660  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1005 -> 2660  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1005 -> 1018  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1005 -> 2675  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2675 -> 1020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1018 -> 2675  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1020 -> 2638  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1036 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 1076  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1049 -> 2719  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2719 -> 1100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1092 -> 2719  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1100 -> 2638  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1100 -> 1107  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1100 -> 2770  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2770 -> 1122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1107 -> 2770  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1139 -> 1155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1155 -> 1182  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1155 -> 2825  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2825 -> 1278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1182 -> 1187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1187 -> 1196  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1187 -> 1214  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2857 -> 1241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1196 -> 2857  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1214 -> 2857  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1214 -> 1239  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1214 -> 2884  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2884 -> 1241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1239 -> 2884  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1241 -> 1270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1270 -> 1275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1275 -> 2825  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1275 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1278 -> 1290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1290 -> 1302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1302 -> 1306  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1302 -> 2972  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2972 -> 1307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1306 -> 2972  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1306 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1307 -> 1315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1315 -> 1322  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1315 -> 2985  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2985 -> 1351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1322 -> 1328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1328 -> 1334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1334 -> 1343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1343 -> 2985  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1351 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1359 -> 1368  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1359 -> 3029  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1368 -> 1377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1377 -> 1384  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1377 -> 1402  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3047 -> 1413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1384 -> 1393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1393 -> 1398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1398 -> 3047  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1398 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1402 -> 1407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1407 -> 3047  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1413 -> 1417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1417 -> 1423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1423 -> 1428  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1423 -> 3093  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3093 -> 1493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1428 -> 1438  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1428 -> 3098  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3098 -> 1441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1438 -> 1428  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1441 -> 1451  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1441 -> 3111  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3111 -> 1454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1451 -> 1441  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1454 -> 1471  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1454 -> 3124  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3124 -> 1423  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3124 -> 1423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
1471 -> 1479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1479 -> 1487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1487 -> 3124  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1493 -> 1507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1507 -> 1513  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1507 -> 3177  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3177 -> 1522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1513 -> 1517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1517 -> 3177  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1522 -> 1535  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1522 -> 3192  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3192 -> 1542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1535 -> 1539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1539 -> 3192  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1539 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1542 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1545 -> 1555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1555 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1560 -> 1564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1564 -> 1572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1572 -> 1586  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1572 -> 3242  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3242 -> 1606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1583 -> 1572  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1586 -> 1593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1593 -> 1599  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1593 -> 3263  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3263 -> 1583  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3263 -> 1583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
1599 -> 3263  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1609 -> 1614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1614 -> 1619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1619 -> 1624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1624 -> 1629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1629 -> 1634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1634 -> 1639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1639 -> 1645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1645 -> 1650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1650 -> 1656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1656 -> 1663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1663 -> 1668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
