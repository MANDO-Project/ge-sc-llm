digraph  {
13 [label="2_ function name() external view returns (string memory);\n13-function_definition-3-3", method="name()", type_label=function_definition];
21 [label="3_ function symbol() external view returns (string memory);\n21-function_definition-4-4", method="symbol()", type_label=function_definition];
29 [label="4_ function granularity() external view returns (uint256);\n29-function_definition-5-5", method="granularity()", type_label=function_definition];
37 [label="5_ function totalSupply() external view returns (uint256);\n37-function_definition-6-6", method="totalSupply()", type_label=function_definition];
45 [label="6_ function balanceOf(address owner) external view returns (uint256);\n45-function_definition-7-7", method="balanceOf(address owner)", type_label=function_definition];
57 [label="7_ function send(address recipient, uint256 amount, bytes calldata data) external;\n57-function_definition-8-8", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=function_definition];
72 [label="8_ function burn(uint256 amount, bytes calldata data) external;\n72-function_definition-9-9", method="burn(uint256 amount,bytes calldata data)", type_label=function_definition];
83 [label="9_ function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n83-function_definition-10-10", method="isOperatorFor(address operator,address tokenHolder)", type_label=function_definition];
99 [label="10_ function authorizeOperator(address operator) external;\n99-function_definition-11-11", method="authorizeOperator(address operator)", type_label=function_definition];
106 [label="11_ function revokeOperator(address operator) external;\n106-function_definition-12-12", method="revokeOperator(address operator)", type_label=function_definition];
113 [label="12_ function defaultOperators() external view returns (address[] memory);\n113-function_definition-13-13", method="defaultOperators()", type_label=function_definition];
122 [label="13_ function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n122-function_definition-14-20", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
145 [label="20_ function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n145-function_definition-21-26", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
257 [label="40_ function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n257-function_definition-41-48", method="tokensReceived(address operator,address from,address to,uint amount,bytes calldata userData,bytes calldata operatorData)", type_label=function_definition];
287 [label="50_ function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n287-function_definition-51-58", method="tokensToSend(address operator,address from,address to,uint amount,bytes calldata userData,bytes calldata operatorData)", type_label=function_definition];
317 [label="60_ function totalSupply() external view returns (uint256);\n317-function_definition-61-61", method="totalSupply()", type_label=function_definition];
325 [label="61_ function balanceOf(address account) external view returns (uint256);\n325-function_definition-62-62", method="balanceOf(address account)", type_label=function_definition];
337 [label="62_ function transfer(address recipient, uint256 amount) external returns (bool);\n337-function_definition-63-63", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
352 [label="63_ function allowance(address owner, address spender) external view returns (uint256);\n352-function_definition-64-64", method="allowance(address owner,address spender)", type_label=function_definition];
368 [label="64_ function approve(address spender, uint256 amount) external returns (bool);\n368-function_definition-65-65", method="approve(address spender,uint256 amount)", type_label=function_definition];
383 [label="65_ function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n383-function_definition-66-66", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
433 [label="70_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n433-function_definition-71-75", method="add(uint256 a,uint256 b)", type_label=function_definition];
450 [label="71_ uint256 c = a + b;\n450-new_variable-72-72", method="add(uint256 a,uint256 b)", type_label=new_variable];
458 [label="72_ require(c >= a, \"SafeMath: addition overflow\");\n458-expression_statement-73-73", method="add(uint256 a,uint256 b)", type_label=expression_statement];
468 [label="73_ return c;\n468-return-74-74", method="add(uint256 a,uint256 b)", type_label=return];
470 [label="75_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n470-function_definition-76-80", method="sub(uint256 a,uint256 b)", type_label=function_definition];
487 [label="76_ require(b <= a, \"SafeMath: subtraction overflow\");\n487-expression_statement-77-77", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
497 [label="77_ uint256 c = a - b;\n497-new_variable-78-78", method="sub(uint256 a,uint256 b)", type_label=new_variable];
505 [label="78_ return c;\n505-return-79-79", method="sub(uint256 a,uint256 b)", type_label=return];
507 [label="80_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n507-function_definition-81-88", method="mul(uint256 a,uint256 b)", type_label=function_definition];
524 [label="81_ if_a == 0\n524-if-82-84", method="mul(uint256 a,uint256 b)", type_label=if];
4519 [label="81_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
529 [label="82_ return 0;\n529-return-83-83", method="mul(uint256 a,uint256 b)", type_label=return];
531 [label="84_ uint256 c = a * b;\n531-new_variable-85-85", method="mul(uint256 a,uint256 b)", type_label=new_variable];
539 [label="85_ require(c / a == b, \"SafeMath: multiplication overflow\");\n539-expression_statement-86-86", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
551 [label="86_ return c;\n551-return-87-87", method="mul(uint256 a,uint256 b)", type_label=return];
553 [label="88_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n553-function_definition-89-93", method="div(uint256 a,uint256 b)", type_label=function_definition];
570 [label="89_ require(b > 0, \"SafeMath: division by zero\");\n570-expression_statement-90-90", method="div(uint256 a,uint256 b)", type_label=expression_statement];
580 [label="90_ uint256 c = a / b;\n580-new_variable-91-91", method="div(uint256 a,uint256 b)", type_label=new_variable];
588 [label="91_ return c;\n588-return-92-92", method="div(uint256 a,uint256 b)", type_label=return];
590 [label="93_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n590-function_definition-94-97", method="mod(uint256 a,uint256 b)", type_label=function_definition];
607 [label="94_ require(b != 0, \"SafeMath: modulo by zero\");\n607-expression_statement-95-95", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
617 [label="95_ return a % b;\n617-return-96-96", method="mod(uint256 a,uint256 b)", type_label=return];
624 [label="99_ function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n624-function_definition-100-104", method="isContract(address account)", type_label=function_definition];
637 [label="100_ uint256 size;\n637-new_variable-101-101", method="isContract(address account)", type_label=new_variable];
652 [label="102_ return size > 0;\n652-return-103-103", method="isContract(address account)", type_label=return];
659 [label="106_ function setManager(address account, address newManager) external;\n659-function_definition-107-107", method="setManager(address account,address newManager)", type_label=function_definition];
670 [label="107_ function getManager(address account) external view returns (address);\n670-function_definition-108-108", method="getManager(address account)", type_label=function_definition];
682 [label="108_ function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\n682-function_definition-109-109", method="setInterfaceImplementer(address account,bytes32 interfaceHash,address implementer)", type_label=function_definition];
697 [label="109_ function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\n697-function_definition-110-110", method="getInterfaceImplementer(address account,bytes32 interfaceHash)", type_label=function_definition];
713 [label="110_ function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n713-function_definition-111-111", method="interfaceHash(string calldata interfaceName)", type_label=function_definition];
725 [label="111_ function updateERC165Cache(address account, bytes4 interfaceId) external;\n725-function_definition-112-112", method="updateERC165Cache(address account,bytes4 interfaceId)", type_label=function_definition];
736 [label="112_ function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n736-function_definition-113-113", method="implementsERC165Interface(address account,bytes4 interfaceId)", type_label=function_definition];
752 [label="113_ function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n752-function_definition-114-114", method="implementsERC165InterfaceNoCache(address account,bytes4 interfaceId)", type_label=function_definition];
811 [label="120_ IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n811-new_variable-121-121", method="", type_label=new_variable];
821 [label="121_ mapping(address => uint256) private _balances;\n821-new_variable-122-122", method="", type_label=new_variable];
828 [label="122_ uint256 private _totalSupply;\n828-new_variable-123-123", method="", type_label=new_variable];
833 [label="123_ string private _name;\n833-new_variable-124-124", method="", type_label=new_variable];
838 [label="124_ string private _symbol;\n838-new_variable-125-125", method="", type_label=new_variable];
843 [label="125_ bytes32 constant private TOKENS_SENDER_INTERFACE_HASH =\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n843-new_variable-126-127", method="", type_label=new_variable];
849 [label="127_ bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH =\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n849-new_variable-128-129", method="", type_label=new_variable];
855 [label="129_ address[] private _defaultOperatorsArray;\n855-new_variable-130-130", method="", type_label=new_variable];
861 [label="130_ mapping(address => bool) private _defaultOperators;\n861-new_variable-131-131", method="", type_label=new_variable];
868 [label="131_ mapping(address => mapping(address => bool)) private _operators;\n868-new_variable-132-132", method="", type_label=new_variable];
877 [label="132_ mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\n877-new_variable-133-133", method="", type_label=new_variable];
886 [label="133_ mapping (address => mapping (address => uint256)) private _allowances;\n886-new_variable-134-134", method="", type_label=new_variable];
910 [label="139_ _name = name;\n910-expression_statement-140-140", method="", type_label=expression_statement];
914 [label="140_ _symbol = symbol;\n914-expression_statement-141-141", method="", type_label=expression_statement];
918 [label="141_ _defaultOperatorsArray = defaultOperators;\n918-expression_statement-142-142", method="", type_label=expression_statement];
922 [label="142_ for(i < _defaultOperatorsArray.length;;i++)\n922-for-143-145", method="", type_label=for];
4917 [label="142_ end_loop", method="", type_label=end_loop];
935 [label="142_ i++\n935-expression_statement-143-143", method="", type_label=expression_statement];
938 [label="143_ _defaultOperators[_defaultOperatorsArray[i]] = true;\n938-expression_statement-144-144", method="", type_label=expression_statement];
947 [label="145_ _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\n947-expression_statement-146-146", method="", type_label=expression_statement];
966 [label="146_ _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\n966-expression_statement-147-147", method="", type_label=expression_statement];
985 [label="148_ function name() public view returns (string memory) {\n        return _name;\n    }\n985-function_definition-149-151", method="name()", type_label=function_definition];
994 [label="149_ return _name;\n994-return-150-150", method="name()", type_label=return];
996 [label="151_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n996-function_definition-152-154", method="symbol()", type_label=function_definition];
1005 [label="152_ return _symbol;\n1005-return-153-153", method="symbol()", type_label=return];
1007 [label="154_ function decimals() public pure returns (uint8) {\n        return 18;\n    }\n1007-function_definition-155-157", method="decimals()", type_label=function_definition];
1016 [label="155_ return 18;\n1016-return-156-156", method="decimals()", type_label=return];
1018 [label="157_ function granularity() public view returns (uint256) {\n        return 1;\n    }\n1018-function_definition-158-160", method="granularity()", type_label=function_definition];
1027 [label="158_ return 1;\n1027-return-159-159", method="granularity()", type_label=return];
1029 [label="160_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n1029-function_definition-161-163", method="totalSupply()", type_label=function_definition];
1038 [label="161_ return _totalSupply;\n1038-return-162-162", method="totalSupply()", type_label=return];
1040 [label="163_ function balanceOf(address tokenHolder) public view returns (uint256) {\n        return _balances[tokenHolder];\n    }\n1040-function_definition-164-166", method="balanceOf(address tokenHolder)", type_label=function_definition];
1053 [label="164_ return _balances[tokenHolder];\n1053-return-165-165", method="balanceOf(address tokenHolder)", type_label=return];
1057 [label="166_ function send(address recipient, uint256 amount, bytes calldata data) external {\n        _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n    }\n1057-function_definition-167-169", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=function_definition];
1073 [label="167_ _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n1073-expression_statement-168-168", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=expression_statement];
1096 [label="169_ function transfer(address recipient, uint256 amount) external returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n        address from = msg.sender;\n        _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n        _move(from, from, recipient, amount, \"\", \"\");\n        _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n        return true;\n    }\n1096-function_definition-170-177", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
1112 [label="170_ require(recipient != address(0), \"ERC777: transfer to the zero address\");\n1112-expression_statement-171-171", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1124 [label="171_ address from = msg.sender;\n1124-new_variable-172-172", method="transfer(address recipient,uint256 amount)", type_label=new_variable];
1132 [label="172_ _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n1132-expression_statement-173-173", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1149 [label="173_ _move(from, from, recipient, amount, \"\", \"\");\n1149-expression_statement-174-174", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1166 [label="174_ _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n1166-expression_statement-175-175", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1186 [label="175_ return true;\n1186-return-176-176", method="transfer(address recipient,uint256 amount)", type_label=return];
1189 [label="177_ function burn(uint256 amount, bytes calldata data) external {\n        _burn(msg.sender, msg.sender, amount, data, \"\");\n    }\n1189-function_definition-178-180", method="burn(uint256 amount,bytes calldata data)", type_label=function_definition];
1201 [label="178_ _burn(msg.sender, msg.sender, amount, data, \"\");\n1201-expression_statement-179-179", method="burn(uint256 amount,bytes calldata data)", type_label=expression_statement];
1219 [label="180_ function isOperatorFor(\n        address operator,\n        address tokenHolder\n    ) public view returns (bool) {\n        return operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n    }\n1219-function_definition-181-188", method="isOperatorFor(address operator,address tokenHolder)", type_label=function_definition];
1236 [label="184_ return operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n1236-return-185-187", method="isOperatorFor(address operator,address tokenHolder)", type_label=return];
1258 [label="188_ function withdrawAll_txorigin18(address payable _recipient,address owner_txorigin18) public {\n        require(tx.origin == owner_txorigin18);\n        _recipient.transfer(address(this).balance);\n    }\n1258-function_definition-189-192", method="withdrawAll_txorigin18(address payable _recipient,address owner_txorigin18)", type_label=function_definition];
1270 [label="189_ require(tx.origin == owner_txorigin18);\n1270-expression_statement-190-190", method="withdrawAll_txorigin18(address payable _recipient,address owner_txorigin18)", type_label=expression_statement];
1279 [label="190_ _recipient.transfer(address(this).balance);\n1279-expression_statement-191-191", method="withdrawAll_txorigin18(address payable _recipient,address owner_txorigin18)", type_label=expression_statement];
1290 [label="192_ function authorizeOperator(address operator) external {\n        require(msg.sender != operator, \"ERC777: authorizing self as operator\");\n        if (_defaultOperators[operator]) {\n            delete _revokedDefaultOperators[msg.sender][operator];\n        } else {\n            _operators[msg.sender][operator] = true;\n        }\n        emit AuthorizedOperator(operator, msg.sender);\n    }\n1290-function_definition-193-201", method="authorizeOperator(address operator)", type_label=function_definition];
1298 [label="193_ require(msg.sender != operator, \"ERC777: authorizing self as operator\");\n1298-expression_statement-194-194", method="authorizeOperator(address operator)", type_label=expression_statement];
1310 [label="194_ if\n1310-if-195-199", method="authorizeOperator(address operator)", type_label=if];
5305 [label="194_ end_if", method="authorizeOperator(address operator)", type_label=end_if];
1315 [label="195_ delete _revokedDefaultOperators[msg.sender][operator];\n1315-expression_statement-196-196", method="authorizeOperator(address operator)", type_label=expression_statement];
1325 [label="197_ _operators[msg.sender][operator] = true;\n1325-expression_statement-198-198", method="authorizeOperator(address operator)", type_label=expression_statement];
1344 [label="201_ function sendto_txorigin29(address payable receiver, uint amount,address owner_txorigin29) public {\n	require (tx.origin == owner_txorigin29);\n	receiver.transfer(amount);\n}\n1344-function_definition-202-205", method="sendto_txorigin29(address payable receiver,uint amount,address owner_txorigin29)", type_label=function_definition];
1360 [label="202_ require (tx.origin == owner_txorigin29);\n1360-expression_statement-203-203", method="sendto_txorigin29(address payable receiver,uint amount,address owner_txorigin29)", type_label=expression_statement];
1369 [label="203_ receiver.transfer(amount);\n1369-expression_statement-204-204", method="sendto_txorigin29(address payable receiver,uint amount,address owner_txorigin29)", type_label=expression_statement];
1376 [label="205_ function revokeOperator(address operator) external {\n        require(operator != msg.sender, \"ERC777: revoking self as operator\");\n        if (_defaultOperators[operator]) {\n            _revokedDefaultOperators[msg.sender][operator] = true;\n        } else {\n            delete _operators[msg.sender][operator];\n        }\n        emit RevokedOperator(operator, msg.sender);\n    }\n1376-function_definition-206-214", method="revokeOperator(address operator)", type_label=function_definition];
1384 [label="206_ require(operator != msg.sender, \"ERC777: revoking self as operator\");\n1384-expression_statement-207-207", method="revokeOperator(address operator)", type_label=expression_statement];
1396 [label="207_ if\n1396-if-208-212", method="revokeOperator(address operator)", type_label=if];
5391 [label="207_ end_if", method="revokeOperator(address operator)", type_label=end_if];
1401 [label="208_ _revokedDefaultOperators[msg.sender][operator] = true;\n1401-expression_statement-209-209", method="revokeOperator(address operator)", type_label=expression_statement];
1413 [label="210_ delete _operators[msg.sender][operator];\n1413-expression_statement-211-211", method="revokeOperator(address operator)", type_label=expression_statement];
1430 [label="214_ function withdrawAll_txorigin6(address payable _recipient,address owner_txorigin6) public {\n        require(tx.origin == owner_txorigin6);\n        _recipient.transfer(address(this).balance);\n    }\n1430-function_definition-215-218", method="withdrawAll_txorigin6(address payable _recipient,address owner_txorigin6)", type_label=function_definition];
1442 [label="215_ require(tx.origin == owner_txorigin6);\n1442-expression_statement-216-216", method="withdrawAll_txorigin6(address payable _recipient,address owner_txorigin6)", type_label=expression_statement];
1451 [label="216_ _recipient.transfer(address(this).balance);\n1451-expression_statement-217-217", method="withdrawAll_txorigin6(address payable _recipient,address owner_txorigin6)", type_label=expression_statement];
1462 [label="218_ function defaultOperators() public view returns (address[] memory) {\n        return _defaultOperatorsArray;\n    }\n1462-function_definition-219-221", method="defaultOperators()", type_label=function_definition];
1472 [label="219_ return _defaultOperatorsArray;\n1472-return-220-220", method="defaultOperators()", type_label=return];
1474 [label="221_ function bug_txorigin16(address owner_txorigin16) public{\n        require(tx.origin == owner_txorigin16);\n    }\n1474-function_definition-222-224", method="bug_txorigin16(address owner_txorigin16)", type_label=function_definition];
1482 [label="222_ require(tx.origin == owner_txorigin16);\n1482-expression_statement-223-223", method="bug_txorigin16(address owner_txorigin16)", type_label=expression_statement];
1491 [label="224_ function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    )\n    external\n    {\n        require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\n        _send(msg.sender, sender, recipient, amount, data, operatorData, true);\n    }\n1491-function_definition-225-236", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
1515 [label="233_ require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\n1515-expression_statement-234-234", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1530 [label="234_ _send(msg.sender, sender, recipient, amount, data, operatorData, true);\n1530-expression_statement-235-235", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1550 [label="236_ function bug_txorigin24(  address owner_txorigin24) public{\n        require(tx.origin == owner_txorigin24);\n    }\n1550-function_definition-237-239", method="bug_txorigin24(address owner_txorigin24)", type_label=function_definition];
1558 [label="237_ require(tx.origin == owner_txorigin24);\n1558-expression_statement-238-238", method="bug_txorigin24(address owner_txorigin24)", type_label=expression_statement];
1567 [label="239_ function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external {\n        require(isOperatorFor(msg.sender, account), \"ERC777: caller is not an operator for holder\");\n        _burn(msg.sender, account, amount, data, operatorData);\n    }\n1567-function_definition-240-243", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
1587 [label="240_ require(isOperatorFor(msg.sender, account), \"ERC777: caller is not an operator for holder\");\n1587-expression_statement-241-241", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1602 [label="241_ _burn(msg.sender, account, amount, data, operatorData);\n1602-expression_statement-242-242", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1617 [label="243_ function sendto_txorigin5(address payable receiver, uint amount,address owner_txorigin5) public {\n	require (tx.origin == owner_txorigin5);\n	receiver.transfer(amount);\n}\n1617-function_definition-244-247", method="sendto_txorigin5(address payable receiver,uint amount,address owner_txorigin5)", type_label=function_definition];
1633 [label="244_ require (tx.origin == owner_txorigin5);\n1633-expression_statement-245-245", method="sendto_txorigin5(address payable receiver,uint amount,address owner_txorigin5)", type_label=expression_statement];
1642 [label="245_ receiver.transfer(amount);\n1642-expression_statement-246-246", method="sendto_txorigin5(address payable receiver,uint amount,address owner_txorigin5)", type_label=expression_statement];
1649 [label="247_ function allowance(address holder, address spender) public view returns (uint256) {\n        return _allowances[holder][spender];\n    }\n1649-function_definition-248-250", method="allowance(address holder,address spender)", type_label=function_definition];
1666 [label="248_ return _allowances[holder][spender];\n1666-return-249-249", method="allowance(address holder,address spender)", type_label=return];
1672 [label="250_ function transferTo_txorigin15(address to, uint amount,address owner_txorigin15) public {\n  require(tx.origin == owner_txorigin15);\n  to.call.value(amount);\n}\n1672-function_definition-251-254", method="transferTo_txorigin15(address to,uint amount,address owner_txorigin15)", type_label=function_definition];
1688 [label="251_ require(tx.origin == owner_txorigin15);\n1688-expression_statement-252-252", method="transferTo_txorigin15(address to,uint amount,address owner_txorigin15)", type_label=expression_statement];
1697 [label="252_ to.call.value(amount);\n1697-expression_statement-253-253", method="transferTo_txorigin15(address to,uint amount,address owner_txorigin15)", type_label=expression_statement];
1706 [label="254_ function approve(address spender, uint256 value) external returns (bool) {\n        address holder = msg.sender;\n        _approve(holder, spender, value);\n        return true;\n    }\n1706-function_definition-255-259", method="approve(address spender,uint256 value)", type_label=function_definition];
1722 [label="255_ address holder = msg.sender;\n1722-new_variable-256-256", method="approve(address spender,uint256 value)", type_label=new_variable];
1730 [label="256_ _approve(holder, spender, value);\n1730-expression_statement-257-257", method="approve(address spender,uint256 value)", type_label=expression_statement];
1739 [label="257_ return true;\n1739-return-258-258", method="approve(address spender,uint256 value)", type_label=return];
1742 [label="259_ function bug_txorigin28(  address owner_txorigin28) public{\n        require(tx.origin == owner_txorigin28);\n    }\n1742-function_definition-260-262", method="bug_txorigin28(address owner_txorigin28)", type_label=function_definition];
1750 [label="260_ require(tx.origin == owner_txorigin28);\n1750-expression_statement-261-261", method="bug_txorigin28(address owner_txorigin28)", type_label=expression_statement];
1759 [label="262_ function transferFrom(address holder, address recipient, uint256 amount) external returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n        require(holder != address(0), \"ERC777: transfer from the zero address\");\n        address spender = msg.sender;\n        _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n        _move(spender, holder, recipient, amount, \"\", \"\");\n        _approve(holder, spender, _allowances[holder][spender].sub(amount));\n        _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n        return true;\n    }\n1759-function_definition-263-272", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=function_definition];
1779 [label="263_ require(recipient != address(0), \"ERC777: transfer to the zero address\");\n1779-expression_statement-264-264", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1791 [label="264_ require(holder != address(0), \"ERC777: transfer from the zero address\");\n1791-expression_statement-265-265", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1803 [label="265_ address spender = msg.sender;\n1803-new_variable-266-266", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=new_variable];
1811 [label="266_ _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n1811-expression_statement-267-267", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1828 [label="267_ _move(spender, holder, recipient, amount, \"\", \"\");\n1828-expression_statement-268-268", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1845 [label="268_ _approve(holder, spender, _allowances[holder][spender].sub(amount));\n1845-expression_statement-269-269", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1863 [label="269_ _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n1863-expression_statement-270-270", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1883 [label="270_ return true;\n1883-return-271-271", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=return];
1886 [label="272_ function withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34) public {\n        require(tx.origin == owner_txorigin34);\n        _recipient.transfer(address(this).balance);\n    }\n1886-function_definition-273-276", method="withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34)", type_label=function_definition];
1898 [label="273_ require(tx.origin == owner_txorigin34);\n1898-expression_statement-274-274", method="withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34)", type_label=expression_statement];
1907 [label="274_ _recipient.transfer(address(this).balance);\n1907-expression_statement-275-275", method="withdrawAll_txorigin34(address payable _recipient,address owner_txorigin34)", type_label=expression_statement];
1918 [label="276_ function _mint(\n        address operator,\n        address account,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n    internal\n    {\n        require(account != address(0), \"ERC777: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n        emit Minted(operator, account, amount, userData, operatorData);\n        emit Transfer(address(0), account, amount);\n    }\n1918-function_definition-277-292", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
1942 [label="285_ require(account != address(0), \"ERC777: mint to the zero address\");\n1942-expression_statement-286-286", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
1954 [label="286_ _totalSupply = _totalSupply.add(amount);\n1954-expression_statement-287-287", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
1963 [label="287_ _balances[account] = _balances[account].add(amount);\n1963-expression_statement-288-288", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
1976 [label="288_ _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n1976-expression_statement-289-289", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2018 [label="292_ function sendto_txorigin21(address payable receiver, uint amount,address owner_txorigin21) public {\n	require (tx.origin == owner_txorigin21);\n	receiver.transfer(amount);\n}\n2018-function_definition-293-296", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=function_definition];
2034 [label="293_ require (tx.origin == owner_txorigin21);\n2034-expression_statement-294-294", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=expression_statement];
2043 [label="294_ receiver.transfer(amount);\n2043-expression_statement-295-295", method="sendto_txorigin21(address payable receiver,uint amount,address owner_txorigin21)", type_label=expression_statement];
2050 [label="296_ function _send(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        require(from != address(0), \"ERC777: send from the zero address\");\n        require(to != address(0), \"ERC777: send to the zero address\");\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n        _move(operator, from, to, amount, userData, operatorData);\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n    }\n2050-function_definition-297-313", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=function_definition];
2082 [label="307_ require(from != address(0), \"ERC777: send from the zero address\");\n2082-expression_statement-308-308", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2094 [label="308_ require(to != address(0), \"ERC777: send to the zero address\");\n2094-expression_statement-309-309", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2106 [label="309_ _callTokensToSend(operator, from, to, amount, userData, operatorData);\n2106-expression_statement-310-310", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2121 [label="310_ _move(operator, from, to, amount, userData, operatorData);\n2121-expression_statement-311-311", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2136 [label="311_ _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n2136-expression_statement-312-312", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2153 [label="313_ function withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10) public {\n        require(tx.origin == owner_txorigin10);\n        _recipient.transfer(address(this).balance);\n    }\n2153-function_definition-314-317", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=function_definition];
2165 [label="314_ require(tx.origin == owner_txorigin10);\n2165-expression_statement-315-315", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=expression_statement];
2174 [label="315_ _recipient.transfer(address(this).balance);\n2174-expression_statement-316-316", method="withdrawAll_txorigin10(address payable _recipient,address owner_txorigin10)", type_label=expression_statement];
2185 [label="317_ function _burn(\n        address operator,\n        address from,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    )\n        private\n    {\n        require(from != address(0), \"ERC777: burn from the zero address\");\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[from] = _balances[from].sub(amount);\n        emit Burned(operator, from, amount, data, operatorData);\n        emit Transfer(from, address(0), amount);\n    }\n2185-function_definition-318-333", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=function_definition];
2209 [label="326_ require(from != address(0), \"ERC777: burn from the zero address\");\n2209-expression_statement-327-327", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2221 [label="327_ _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n2221-expression_statement-328-328", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2238 [label="328_ _totalSupply = _totalSupply.sub(amount);\n2238-expression_statement-329-329", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2247 [label="329_ _balances[from] = _balances[from].sub(amount);\n2247-expression_statement-330-330", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2282 [label="333_ function withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22) public {\n        require(tx.origin == owner_txorigin22);\n        _recipient.transfer(address(this).balance);\n    }\n2282-function_definition-334-337", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=function_definition];
2294 [label="334_ require(tx.origin == owner_txorigin22);\n2294-expression_statement-335-335", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=expression_statement];
2303 [label="335_ _recipient.transfer(address(this).balance);\n2303-expression_statement-336-336", method="withdrawAll_txorigin22(address payable _recipient,address owner_txorigin22)", type_label=expression_statement];
2314 [label="337_ function _move(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        _balances[from] = _balances[from].sub(amount);\n        _balances[to] = _balances[to].add(amount);\n        emit Sent(operator, from, to, amount, userData, operatorData);\n        emit Transfer(from, to, amount);\n    }\n2314-function_definition-338-352", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
2342 [label="347_ _balances[from] = _balances[from].sub(amount);\n2342-expression_statement-348-348", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2355 [label="348_ _balances[to] = _balances[to].add(amount);\n2355-expression_statement-349-349", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2390 [label="352_ function bug_txorigin12(address owner_txorigin12) public{\n        require(tx.origin == owner_txorigin12);\n    }\n2390-function_definition-353-355", method="bug_txorigin12(address owner_txorigin12)", type_label=function_definition];
2398 [label="353_ require(tx.origin == owner_txorigin12);\n2398-expression_statement-354-354", method="bug_txorigin12(address owner_txorigin12)", type_label=expression_statement];
2407 [label="355_ function _approve(address holder, address spender, uint256 value) private {\n        require(spender != address(0), \"ERC777: approve to the zero address\");\n        _allowances[holder][spender] = value;\n        emit Approval(holder, spender, value);\n    }\n2407-function_definition-356-360", method="_approve(address holder,address spender,uint256 value)", type_label=function_definition];
2423 [label="356_ require(spender != address(0), \"ERC777: approve to the zero address\");\n2423-expression_statement-357-357", method="_approve(address holder,address spender,uint256 value)", type_label=expression_statement];
2435 [label="357_ _allowances[holder][spender] = value;\n2435-expression_statement-358-358", method="_approve(address holder,address spender,uint256 value)", type_label=expression_statement];
2451 [label="360_ function transferTo_txorigin11(address to, uint amount,address owner_txorigin11) public {\n  require(tx.origin == owner_txorigin11);\n  to.call.value(amount);\n}\n2451-function_definition-361-364", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=function_definition];
2467 [label="361_ require(tx.origin == owner_txorigin11);\n2467-expression_statement-362-362", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=expression_statement];
2476 [label="362_ to.call.value(amount);\n2476-expression_statement-363-363", method="transferTo_txorigin11(address to,uint amount,address owner_txorigin11)", type_label=expression_statement];
2485 [label="364_ function _callTokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n        }\n    }\n2485-function_definition-365-379", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
2513 [label="374_ address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\n2513-new_variable-375-375", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=new_variable];
2526 [label="375_ if_implementer != address(0)\n2526-if-376-378", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=if];
6521 [label="375_ end_if", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=end_if];
2533 [label="376_ IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n2533-expression_statement-377-377", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2553 [label="379_ function sendto_txorigin1(address payable receiver, uint amount,address owner_txorigin1) public {\n	require (tx.origin == owner_txorigin1);\n	receiver.transfer(amount);\n}\n2553-function_definition-380-383", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=function_definition];
2569 [label="380_ require (tx.origin == owner_txorigin1);\n2569-expression_statement-381-381", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=expression_statement];
2578 [label="381_ receiver.transfer(amount);\n2578-expression_statement-382-382", method="sendto_txorigin1(address payable receiver,uint amount,address owner_txorigin1)", type_label=expression_statement];
2585 [label="383_ function _callTokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n        } else if (requireReceptionAck) {\n            require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n        }\n    }\n2585-function_definition-384-401", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=function_definition];
2617 [label="394_ address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\n2617-new_variable-395-395", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=new_variable];
2630 [label="395_ if_implementer != address(0)\n2630-if-396-400", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=if];
6625 [label="395_ end_if", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=end_if];
2637 [label="396_ IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n2637-expression_statement-397-397", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2657 [label="397_ if\n2657-if-398-400", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=if];
2660 [label="398_ require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n2660-expression_statement-399-399", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2672 [label="401_ function withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2) public {\n        require(tx.origin == owner_txorigin2);\n        _recipient.transfer(address(this).balance);\n    }\n2672-function_definition-402-405", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=function_definition];
2684 [label="402_ require(tx.origin == owner_txorigin2);\n2684-expression_statement-403-403", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=expression_statement];
2693 [label="403_ _recipient.transfer(address(this).balance);\n2693-expression_statement-404-404", method="withdrawAll_txorigin2(address payable _recipient,address owner_txorigin2)", type_label=expression_statement];
2707 [label="407_ struct Role {\n        mapping (address => bool) bearer;\n    }\n2707-expression_statement-408-410", method="Role()", type_label=expression_statement];
2715 [label="410_ function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n2715-function_definition-411-414", method="add(Role storage role,address account)", type_label=function_definition];
2728 [label="411_ require(!has(role, account), \"Roles: account already has role\");\n2728-expression_statement-412-412", method="add(Role storage role,address account)", type_label=expression_statement];
2742 [label="412_ role.bearer[account] = true;\n2742-expression_statement-413-413", method="add(Role storage role,address account)", type_label=expression_statement];
2751 [label="414_ function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n2751-function_definition-415-418", method="remove(Role storage role,address account)", type_label=function_definition];
2764 [label="415_ require(has(role, account), \"Roles: account does not have role\");\n2764-expression_statement-416-416", method="remove(Role storage role,address account)", type_label=expression_statement];
2777 [label="416_ role.bearer[account] = false;\n2777-expression_statement-417-417", method="remove(Role storage role,address account)", type_label=expression_statement];
2786 [label="418_ function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n2786-function_definition-419-422", method="has(Role storage role,address account)", type_label=function_definition];
2804 [label="419_ require(account != address(0), \"Roles: account is the zero address\");\n2804-expression_statement-420-420", method="has(Role storage role,address account)", type_label=expression_statement];
2816 [label="420_ return role.bearer[account];\n2816-return-421-421", method="has(Role storage role,address account)", type_label=return];
2832 [label="425_ function transferTo_txorigin35(address to, uint amount,address owner_txorigin35) public {\n  require(tx.origin == owner_txorigin35);\n  to.call.value(amount);\n}\n2832-function_definition-426-429", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=function_definition];
2848 [label="426_ require(tx.origin == owner_txorigin35);\n2848-expression_statement-427-427", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
2857 [label="427_ to.call.value(amount);\n2857-expression_statement-428-428", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
2872 [label="430_ function bug_txorigin40(address owner_txorigin40) public{\n        require(tx.origin == owner_txorigin40);\n    }\n2872-function_definition-431-433", method="bug_txorigin40(address owner_txorigin40)", type_label=function_definition];
2880 [label="431_ require(tx.origin == owner_txorigin40);\n2880-expression_statement-432-432", method="bug_txorigin40(address owner_txorigin40)", type_label=expression_statement];
2895 [label="434_ Roles.Role private _minters;\n2895-new_variable-435-435", method="", type_label=new_variable];
2904 [label="436_ _addMinter(msg.sender);\n2904-expression_statement-437-437", method="", type_label=expression_statement];
2911 [label="438_ function sendto_txorigin17(address payable receiver, uint amount,address owner_txorigin17) public {\n	require (tx.origin == owner_txorigin17);\n	receiver.transfer(amount);\n}\n2911-function_definition-439-442", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=function_definition];
2927 [label="439_ require (tx.origin == owner_txorigin17);\n2927-expression_statement-440-440", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=expression_statement];
2936 [label="440_ receiver.transfer(amount);\n2936-expression_statement-441-441", method="sendto_txorigin17(address payable receiver,uint amount,address owner_txorigin17)", type_label=expression_statement];
2943 [label="442_ modifier onlyMinter() {\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n        _;\n    }\n2943-expression_statement-443-446", method="", type_label=expression_statement];
2946 [label="443_ require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n2946-expression_statement-444-444", method="", type_label=expression_statement];
2959 [label="444_ _;\n2959-expression_statement-445-445", method="", type_label=expression_statement];
2961 [label="446_ function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n2961-function_definition-447-449", method="isMinter(address account)", type_label=function_definition];
2974 [label="447_ return _minters.has(account);\n2974-return-448-448", method="isMinter(address account)", type_label=return];
2981 [label="449_ function sendto_txorigin37(address payable receiver, uint amount,address owner_txorigin37) public {\n	require (tx.origin == owner_txorigin37);\n	receiver.transfer(amount);\n}\n2981-function_definition-450-453", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=function_definition];
2997 [label="450_ require (tx.origin == owner_txorigin37);\n2997-expression_statement-451-451", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=expression_statement];
3006 [label="451_ receiver.transfer(amount);\n3006-expression_statement-452-452", method="sendto_txorigin37(address payable receiver,uint amount,address owner_txorigin37)", type_label=expression_statement];
3013 [label="453_ function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n3013-function_definition-454-456", method="addMinter(address account)", type_label=function_definition];
3020 [label="453_ onlyMinter\n3020-expression_statement-454-454", method="addMinter(address account)", type_label=expression_statement];
3023 [label="454_ _addMinter(account);\n3023-expression_statement-455-455", method="addMinter(address account)", type_label=expression_statement];
3028 [label="456_ function transferTo_txorigin3(address to, uint amount,address owner_txorigin3) public {\n  require(tx.origin == owner_txorigin3);\n  to.call.value(amount);\n}\n3028-function_definition-457-460", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=function_definition];
3044 [label="457_ require(tx.origin == owner_txorigin3);\n3044-expression_statement-458-458", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=expression_statement];
3053 [label="458_ to.call.value(amount);\n3053-expression_statement-459-459", method="transferTo_txorigin3(address to,uint amount,address owner_txorigin3)", type_label=expression_statement];
3062 [label="460_ function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n3062-function_definition-461-463", method="renounceMinter()", type_label=function_definition];
3066 [label="461_ _removeMinter(msg.sender);\n3066-expression_statement-462-462", method="renounceMinter()", type_label=expression_statement];
3073 [label="463_ function sendto_txorigin9(address payable receiver, uint amount,address owner_txorigin9) public {\n	require (tx.origin == owner_txorigin9);\n	receiver.transfer(amount);\n}\n3073-function_definition-464-467", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=function_definition];
3089 [label="464_ require (tx.origin == owner_txorigin9);\n3089-expression_statement-465-465", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
3098 [label="465_ receiver.transfer(amount);\n3098-expression_statement-466-466", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
3105 [label="467_ function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n3105-function_definition-468-471", method="_addMinter(address account)", type_label=function_definition];
3113 [label="468_ _minters.add(account);\n3113-expression_statement-469-469", method="_addMinter(address account)", type_label=expression_statement];
3124 [label="471_ function sendto_txorigin25(address payable receiver, uint amount,address owner_txorigin25) public {\n	require (tx.origin == owner_txorigin25);\n	receiver.transfer(amount);\n}\n3124-function_definition-472-475", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=function_definition];
3140 [label="472_ require (tx.origin == owner_txorigin25);\n3140-expression_statement-473-473", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
3149 [label="473_ receiver.transfer(amount);\n3149-expression_statement-474-474", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
3156 [label="475_ function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n3156-function_definition-476-479", method="_removeMinter(address account)", type_label=function_definition];
3164 [label="476_ _minters.remove(account);\n3164-expression_statement-477-477", method="_removeMinter(address account)", type_label=expression_statement];
3175 [label="479_ function transferTo_txorigin19(address to, uint amount,address owner_txorigin19) public {\n  require(tx.origin == owner_txorigin19);\n  to.call.value(amount);\n}\n3175-function_definition-480-483", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=function_definition];
3191 [label="480_ require(tx.origin == owner_txorigin19);\n3191-expression_statement-481-481", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
3200 [label="481_ to.call.value(amount);\n3200-expression_statement-482-482", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
3219 [label="486_ function sendto_txorigin33(address payable receiver, uint amount,address owner_txorigin33) public {\n	require (tx.origin == owner_txorigin33);\n	receiver.transfer(amount);\n}\n3219-function_definition-487-490", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=function_definition];
3235 [label="487_ require (tx.origin == owner_txorigin33);\n3235-expression_statement-488-488", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
3244 [label="488_ receiver.transfer(amount);\n3244-expression_statement-489-489", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
3257 [label="491_ function transferTo_txorigin27(address to, uint amount,address owner_txorigin27) public {\n  require(tx.origin == owner_txorigin27);\n  to.call.value(amount);\n}\n3257-function_definition-492-495", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=function_definition];
3273 [label="492_ require(tx.origin == owner_txorigin27);\n3273-expression_statement-493-493", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
3282 [label="493_ to.call.value(amount);\n3282-expression_statement-494-494", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
3297 [label="496_ Roles.Role private _pausers;\n3297-new_variable-497-497", method="", type_label=new_variable];
3306 [label="498_ _addPauser(msg.sender);\n3306-expression_statement-499-499", method="", type_label=expression_statement];
3313 [label="500_ function withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26) public {\n        require(tx.origin == owner_txorigin26);\n        _recipient.transfer(address(this).balance);\n    }\n3313-function_definition-501-504", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=function_definition];
3325 [label="501_ require(tx.origin == owner_txorigin26);\n3325-expression_statement-502-502", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
3334 [label="502_ _recipient.transfer(address(this).balance);\n3334-expression_statement-503-503", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
3345 [label="504_ modifier onlyPauser() {\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n3345-expression_statement-505-508", method="", type_label=expression_statement];
3348 [label="505_ require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n3348-expression_statement-506-506", method="", type_label=expression_statement];
3361 [label="506_ _;\n3361-expression_statement-507-507", method="", type_label=expression_statement];
3363 [label="508_ function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n3363-function_definition-509-511", method="isPauser(address account)", type_label=function_definition];
3376 [label="509_ return _pausers.has(account);\n3376-return-510-510", method="isPauser(address account)", type_label=return];
3383 [label="511_ function bug_txorigin20(address owner_txorigin20) public{\n        require(tx.origin == owner_txorigin20);\n    }\n3383-function_definition-512-514", method="bug_txorigin20(address owner_txorigin20)", type_label=function_definition];
3391 [label="512_ require(tx.origin == owner_txorigin20);\n3391-expression_statement-513-513", method="bug_txorigin20(address owner_txorigin20)", type_label=expression_statement];
3400 [label="514_ function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n3400-function_definition-515-517", method="addPauser(address account)", type_label=function_definition];
3407 [label="514_ onlyPauser\n3407-expression_statement-515-515", method="addPauser(address account)", type_label=expression_statement];
3410 [label="515_ _addPauser(account);\n3410-expression_statement-516-516", method="addPauser(address account)", type_label=expression_statement];
3415 [label="517_ function bug_txorigin32(  address owner_txorigin32) public{\n        require(tx.origin == owner_txorigin32);\n    }\n3415-function_definition-518-520", method="bug_txorigin32(address owner_txorigin32)", type_label=function_definition];
3423 [label="518_ require(tx.origin == owner_txorigin32);\n3423-expression_statement-519-519", method="bug_txorigin32(address owner_txorigin32)", type_label=expression_statement];
3432 [label="520_ function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n3432-function_definition-521-523", method="renouncePauser()", type_label=function_definition];
3436 [label="521_ _removePauser(msg.sender);\n3436-expression_statement-522-522", method="renouncePauser()", type_label=expression_statement];
3443 [label="523_ function withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38) public {\n        require(tx.origin == owner_txorigin38);\n        _recipient.transfer(address(this).balance);\n    }\n3443-function_definition-524-527", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=function_definition];
3455 [label="524_ require(tx.origin == owner_txorigin38);\n3455-expression_statement-525-525", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
3464 [label="525_ _recipient.transfer(address(this).balance);\n3464-expression_statement-526-526", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
3475 [label="527_ function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n3475-function_definition-528-531", method="_addPauser(address account)", type_label=function_definition];
3483 [label="528_ _pausers.add(account);\n3483-expression_statement-529-529", method="_addPauser(address account)", type_label=expression_statement];
3494 [label="531_ function bug_txorigin4(address owner_txorigin4) public{\n        require(tx.origin == owner_txorigin4);\n    }\n3494-function_definition-532-534", method="bug_txorigin4(address owner_txorigin4)", type_label=function_definition];
3502 [label="532_ require(tx.origin == owner_txorigin4);\n3502-expression_statement-533-533", method="bug_txorigin4(address owner_txorigin4)", type_label=expression_statement];
3511 [label="534_ function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n3511-function_definition-535-538", method="_removePauser(address account)", type_label=function_definition];
3519 [label="535_ _pausers.remove(account);\n3519-expression_statement-536-536", method="_removePauser(address account)", type_label=expression_statement];
3530 [label="538_ function transferTo_txorigin7(address to, uint amount,address owner_txorigin7) public {\n  require(tx.origin == owner_txorigin7);\n  to.call.value(amount);\n}\n3530-function_definition-539-542", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=function_definition];
3546 [label="539_ require(tx.origin == owner_txorigin7);\n3546-expression_statement-540-540", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
3555 [label="540_ to.call.value(amount);\n3555-expression_statement-541-541", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
3570 [label="544_ function transferTo_txorigin31(address to, uint amount,address owner_txorigin31) public {\n  require(tx.origin == owner_txorigin31);\n  to.call.value(amount);\n}\n3570-function_definition-545-548", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=function_definition];
3586 [label="545_ require(tx.origin == owner_txorigin31);\n3586-expression_statement-546-546", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
3595 [label="546_ to.call.value(amount);\n3595-expression_statement-547-547", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
3610 [label="549_ function sendto_txorigin13(address payable receiver, uint amount,address owner_txorigin13) public {\n	require (tx.origin == owner_txorigin13);\n	receiver.transfer(amount);\n}\n3610-function_definition-550-553", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=function_definition];
3626 [label="550_ require (tx.origin == owner_txorigin13);\n3626-expression_statement-551-551", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
3635 [label="551_ receiver.transfer(amount);\n3635-expression_statement-552-552", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
3648 [label="554_ bool private _paused;\n3648-new_variable-555-555", method="", type_label=new_variable];
3655 [label="556_ _paused = false;\n3655-expression_statement-557-557", method="", type_label=expression_statement];
3660 [label="558_ function transferTo_txorigin23(address to, uint amount,address owner_txorigin23) public {\n  require(tx.origin == owner_txorigin23);\n  to.call.value(amount);\n}\n3660-function_definition-559-562", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=function_definition];
3676 [label="559_ require(tx.origin == owner_txorigin23);\n3676-expression_statement-560-560", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
3685 [label="560_ to.call.value(amount);\n3685-expression_statement-561-561", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
3694 [label="562_ function paused() public view returns (bool) {\n        return _paused;\n    }\n3694-function_definition-563-565", method="paused()", type_label=function_definition];
3703 [label="563_ return _paused;\n3703-return-564-564", method="paused()", type_label=return];
3705 [label="565_ function withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14) public {\n        require(tx.origin == owner_txorigin14);\n        _recipient.transfer(address(this).balance);\n    }\n3705-function_definition-566-569", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=function_definition];
3717 [label="566_ require(tx.origin == owner_txorigin14);\n3717-expression_statement-567-567", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
3726 [label="567_ _recipient.transfer(address(this).balance);\n3726-expression_statement-568-568", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
3737 [label="569_ modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n3737-expression_statement-570-573", method="", type_label=expression_statement];
3740 [label="570_ require(!_paused, \"Pausable: paused\");\n3740-expression_statement-571-571", method="", type_label=expression_statement];
3749 [label="571_ _;\n3749-expression_statement-572-572", method="", type_label=expression_statement];
3751 [label="573_ modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n3751-expression_statement-574-577", method="", type_label=expression_statement];
3754 [label="574_ require(_paused, \"Pausable: not paused\");\n3754-expression_statement-575-575", method="", type_label=expression_statement];
3762 [label="575_ _;\n3762-expression_statement-576-576", method="", type_label=expression_statement];
3764 [label="577_ function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n3764-function_definition-578-581", method="pause()", type_label=function_definition];
3767 [label="577_ onlyPauser\n3767-expression_statement-578-578", method="pause()", type_label=expression_statement];
3769 [label="577_ whenNotPaused\n3769-expression_statement-578-578", method="pause()", type_label=expression_statement];
3772 [label="578_ _paused = true;\n3772-expression_statement-579-579", method="pause()", type_label=expression_statement];
3783 [label="581_ function withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30) public {\n        require(tx.origin == owner_txorigin30);\n        _recipient.transfer(address(this).balance);\n    }\n3783-function_definition-582-585", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=function_definition];
3795 [label="582_ require(tx.origin == owner_txorigin30);\n3795-expression_statement-583-583", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
3804 [label="583_ _recipient.transfer(address(this).balance);\n3804-expression_statement-584-584", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
3815 [label="585_ function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n3815-function_definition-586-589", method="unpause()", type_label=function_definition];
3818 [label="585_ onlyPauser\n3818-expression_statement-586-586", method="unpause()", type_label=expression_statement];
3820 [label="585_ whenPaused\n3820-expression_statement-586-586", method="unpause()", type_label=expression_statement];
3823 [label="586_ _paused = false;\n3823-expression_statement-587-587", method="unpause()", type_label=expression_statement];
3834 [label="589_ function bug_txorigin8(address owner_txorigin8) public{\n        require(tx.origin == owner_txorigin8);\n    }\n3834-function_definition-590-592", method="bug_txorigin8(address owner_txorigin8)", type_label=function_definition];
3842 [label="590_ require(tx.origin == owner_txorigin8);\n3842-expression_statement-591-591", method="bug_txorigin8(address owner_txorigin8)", type_label=expression_statement];
3873 [label="598_ ERC777(\"SKYBIT\", \"SKYBIT\", defaultOperators)\n3873-expression_statement-599-599", method="", type_label=expression_statement];
3884 [label="600_ _mint(msg.sender, msg.sender, initialSupply, \"\", \"\");\n3884-expression_statement-601-601", method="", type_label=expression_statement];
3903 [label="602_ function transferTo_txorigin39(address to, uint amount,address owner_txorigin39) public {\n  require(tx.origin == owner_txorigin39);\n  to.call.value(amount);\n}\n3903-function_definition-603-606", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=function_definition];
3919 [label="603_ require(tx.origin == owner_txorigin39);\n3919-expression_statement-604-604", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
3928 [label="604_ to.call.value(amount);\n3928-expression_statement-605-605", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
3937 [label="606_ function mint(address operator, address account, uint256 amount, bytes memory userData, bytes memory operatorData) public onlyMinter returns (bool) {\n        _mint(operator, account, amount, userData, operatorData);\n        return true;\n    }\n3937-function_definition-607-610", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
3960 [label="606_ onlyMinter\n3960-expression_statement-607-607", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
3967 [label="607_ _mint(operator, account, amount, userData, operatorData);\n3967-expression_statement-608-608", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
3980 [label="608_ return true;\n3980-return-609-609", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=return];
3983 [label="610_ function bug_txorigin36(  address owner_txorigin36) public{\n        require(tx.origin == owner_txorigin36);\n    }\n3983-function_definition-611-613", method="bug_txorigin36(address owner_txorigin36)", type_label=function_definition];
3991 [label="611_ require(tx.origin == owner_txorigin36);\n3991-expression_statement-612-612", method="bug_txorigin36(address owner_txorigin36)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1336;
1422;
433 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
470 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
507 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 529  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
524 -> 4519  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4519 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 4519  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
529 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
531 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
553 -> 570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
590 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
624 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
811 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
843 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 938  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
922 -> 4917  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4917 -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 922  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
938 -> 935  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
947 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
996 -> 1005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1007 -> 1016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1016 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1018 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1029 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1040 -> 1053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1053 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1057 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1096 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 1124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1124 -> 1132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1132 -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1149 -> 1166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1166 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1189 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1219 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1236 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1258 -> 1270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1270 -> 1279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1290 -> 1298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1298 -> 1310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1310 -> 1315  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1310 -> 1325  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5305 -> 1336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1315 -> 5305  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1325 -> 5305  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1344 -> 1360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1360 -> 1369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1376 -> 1384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1384 -> 1396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1396 -> 1401  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1396 -> 1413  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5391 -> 1422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1401 -> 5391  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1413 -> 5391  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1430 -> 1442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1442 -> 1451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1462 -> 1472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1472 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1474 -> 1482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1491 -> 1515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1515 -> 1530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1550 -> 1558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1567 -> 1587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1587 -> 1602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1617 -> 1633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1633 -> 1642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1649 -> 1666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1666 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1672 -> 1688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1688 -> 1697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1706 -> 1722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1722 -> 1730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1730 -> 1739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1739 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1742 -> 1750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1759 -> 1779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1779 -> 1791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1791 -> 1803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1803 -> 1811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1811 -> 1828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1828 -> 1845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1845 -> 1863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1863 -> 1883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1883 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1886 -> 1898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1898 -> 1907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1918 -> 1942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1942 -> 1954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1954 -> 1963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1963 -> 1976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2018 -> 2034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2034 -> 2043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2050 -> 2082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2082 -> 2094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2094 -> 2106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2106 -> 2121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2121 -> 2136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2153 -> 2165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2165 -> 2174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2185 -> 2209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2209 -> 2221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2221 -> 2238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2238 -> 2247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2282 -> 2294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2294 -> 2303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2314 -> 2342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2342 -> 2355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2390 -> 2398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2407 -> 2423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2423 -> 2435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2451 -> 2467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2467 -> 2476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2485 -> 2513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2513 -> 2526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2526 -> 2533  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2526 -> 6521  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6521 -> 2553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2533 -> 6521  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2553 -> 2569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2569 -> 2578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2585 -> 2617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2617 -> 2630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2630 -> 2637  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2630 -> 2657  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6625 -> 2672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2637 -> 6625  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2657 -> 2660  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2657 -> 6625  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2660 -> 6625  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2672 -> 2684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2684 -> 2693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2715 -> 2728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2728 -> 2742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2751 -> 2764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2764 -> 2777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2786 -> 2804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2804 -> 2816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2816 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2832 -> 2848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2848 -> 2857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2872 -> 2880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2911 -> 2927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2927 -> 2936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2946 -> 2959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2961 -> 2974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2974 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2981 -> 2997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2997 -> 3006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3013 -> 3023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3028 -> 3044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3044 -> 3053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3062 -> 3066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3073 -> 3089  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3089 -> 3098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3105 -> 3113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3124 -> 3140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3140 -> 3149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3156 -> 3164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3175 -> 3191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3191 -> 3200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3219 -> 3235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3235 -> 3244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3257 -> 3273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3273 -> 3282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3313 -> 3325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3325 -> 3334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3348 -> 3361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3363 -> 3376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3376 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3383 -> 3391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3400 -> 3410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3415 -> 3423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3432 -> 3436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3443 -> 3455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3455 -> 3464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3475 -> 3483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3494 -> 3502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3511 -> 3519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3530 -> 3546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3546 -> 3555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3570 -> 3586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3586 -> 3595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3610 -> 3626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3626 -> 3635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3660 -> 3676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3676 -> 3685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3694 -> 3703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3703 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3705 -> 3717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3717 -> 3726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3737 -> 3751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3740 -> 3749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3754 -> 3762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3764 -> 3772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3767 -> 3769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3783 -> 3795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3795 -> 3804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3815 -> 3823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3818 -> 3820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3834 -> 3842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3903 -> 3919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3919 -> 3928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3937 -> 3967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3967 -> 3980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3980 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3983 -> 3991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
