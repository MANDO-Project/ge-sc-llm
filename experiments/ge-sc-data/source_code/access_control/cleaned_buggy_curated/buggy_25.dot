digraph  {
13 [label="2_ function sendto_txorigin9(address payable receiver, uint amount,address owner_txorigin9) public {\n	require (tx.origin == owner_txorigin9);\n	receiver.transfer(amount);\n}\n13-function_definition-3-6", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=function_definition];
29 [label="3_ require (tx.origin == owner_txorigin9);\n29-expression_statement-4-4", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
38 [label="4_ receiver.transfer(amount);\n38-expression_statement-5-5", method="sendto_txorigin9(address payable receiver,uint amount,address owner_txorigin9)", type_label=expression_statement];
45 [label="6_ address payable public owner;\n45-new_variable-7-7", method="", type_label=new_variable];
50 [label="7_ struct GameInfo {\n    uint256 timestamp;\n    uint32 odd_homeTeam;\n    uint32 odd_drawTeam; \n    uint32 odd_awayTeam;\n    uint32 odd_over;\n    uint32 odd_under;\n    uint32 odd_homeTeamAndDraw;\n    uint32 odd_homeAndAwayTeam;\n    uint32 odd_awayTeamAndDraw;\n    uint8  open_status;\n    bool   isDone;\n  }\n50-expression_statement-8-20", method="GameInfo()", type_label=expression_statement];
96 [label="20_ function sendto_txorigin25(address payable receiver, uint amount,address owner_txorigin25) public {\n	require (tx.origin == owner_txorigin25);\n	receiver.transfer(amount);\n}\n96-function_definition-21-24", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=function_definition];
112 [label="21_ require (tx.origin == owner_txorigin25);\n112-expression_statement-22-22", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
121 [label="22_ receiver.transfer(amount);\n121-expression_statement-23-23", method="sendto_txorigin25(address payable receiver,uint amount,address owner_txorigin25)", type_label=expression_statement];
128 [label="24_ mapping(uint64 => GameInfo) public gameList;\n128-new_variable-25-25", method="", type_label=new_variable];
136 [label="25_ struct BetFixture {\n    address payable player;\n    uint256 stake;\n    uint32  odd;\n    uint16  selectedTeam;\n  }\n136-expression_statement-26-31", method="BetFixture()", type_label=expression_statement];
154 [label="31_ function transferTo_txorigin19(address to, uint amount,address owner_txorigin19) public {\n  require(tx.origin == owner_txorigin19);\n  to.call.value(amount);\n}\n154-function_definition-32-35", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=function_definition];
170 [label="32_ require(tx.origin == owner_txorigin19);\n170-expression_statement-33-33", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
179 [label="33_ to.call.value(amount);\n179-expression_statement-34-34", method="transferTo_txorigin19(address to,uint amount,address owner_txorigin19)", type_label=expression_statement];
188 [label="35_ mapping(uint64 => BetFixture[]) public betList;\n188-new_variable-36-36", method="", type_label=new_variable];
197 [label="36_ function bug_txorigin36(  address owner_txorigin36) public{\n        require(tx.origin == owner_txorigin36);\n    }\n197-function_definition-37-39", method="bug_txorigin36(address owner_txorigin36)", type_label=function_definition];
205 [label="37_ require(tx.origin == owner_txorigin36);\n205-expression_statement-38-38", method="bug_txorigin36(address owner_txorigin36)", type_label=expression_statement];
220 [label="40_ function transferTo_txorigin35(address to, uint amount,address owner_txorigin35) public {\n  require(tx.origin == owner_txorigin35);\n  to.call.value(amount);\n}\n220-function_definition-41-44", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=function_definition];
236 [label="41_ require(tx.origin == owner_txorigin35);\n236-expression_statement-42-42", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
245 [label="42_ to.call.value(amount);\n245-expression_statement-43-43", method="transferTo_txorigin35(address to,uint amount,address owner_txorigin35)", type_label=expression_statement];
264 [label="45_ function bug_txorigin40(address owner_txorigin40) public{\n        require(tx.origin == owner_txorigin40);\n    }\n264-function_definition-46-48", method="bug_txorigin40(address owner_txorigin40)", type_label=function_definition];
272 [label="46_ require(tx.origin == owner_txorigin40);\n272-expression_statement-47-47", method="bug_txorigin40(address owner_txorigin40)", type_label=expression_statement];
291 [label="49_ function sendto_txorigin33(address payable receiver, uint amount,address owner_txorigin33) public {\n	require (tx.origin == owner_txorigin33);\n	receiver.transfer(amount);\n}\n291-function_definition-50-53", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=function_definition];
307 [label="50_ require (tx.origin == owner_txorigin33);\n307-expression_statement-51-51", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
316 [label="51_ receiver.transfer(amount);\n316-expression_statement-52-52", method="sendto_txorigin33(address payable receiver,uint amount,address owner_txorigin33)", type_label=expression_statement];
345 [label="54_ function transferTo_txorigin27(address to, uint amount,address owner_txorigin27) public {\n  require(tx.origin == owner_txorigin27);\n  to.call.value(amount);\n}\n345-function_definition-55-58", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=function_definition];
361 [label="55_ require(tx.origin == owner_txorigin27);\n361-expression_statement-56-56", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
370 [label="56_ to.call.value(amount);\n370-expression_statement-57-57", method="transferTo_txorigin27(address to,uint amount,address owner_txorigin27)", type_label=expression_statement];
425 [label="59_ function transferTo_txorigin31(address to, uint amount,address owner_txorigin31) public {\n  require(tx.origin == owner_txorigin31);\n  to.call.value(amount);\n}\n425-function_definition-60-63", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=function_definition];
441 [label="60_ require(tx.origin == owner_txorigin31);\n441-expression_statement-61-61", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
450 [label="61_ to.call.value(amount);\n450-expression_statement-62-62", method="transferTo_txorigin31(address to,uint amount,address owner_txorigin31)", type_label=expression_statement];
497 [label="64_ function sendto_txorigin13(address payable receiver, uint amount,address owner_txorigin13) public {\n	require (tx.origin == owner_txorigin13);\n	receiver.transfer(amount);\n}\n497-function_definition-65-68", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=function_definition];
513 [label="65_ require (tx.origin == owner_txorigin13);\n513-expression_statement-66-66", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
522 [label="66_ receiver.transfer(amount);\n522-expression_statement-67-67", method="sendto_txorigin13(address payable receiver,uint amount,address owner_txorigin13)", type_label=expression_statement];
545 [label="70_ owner   = msg.sender;\n545-expression_statement-71-71", method="", type_label=expression_statement];
551 [label="72_ function withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26) public {\n        require(tx.origin == owner_txorigin26);\n        _recipient.transfer(address(this).balance);\n    }\n551-function_definition-73-76", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=function_definition];
563 [label="73_ require(tx.origin == owner_txorigin26);\n563-expression_statement-74-74", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
572 [label="74_ _recipient.transfer(address(this).balance);\n572-expression_statement-75-75", method="withdrawAll_txorigin26(address payable _recipient,address owner_txorigin26)", type_label=expression_statement];
583 [label="76_ function setOpenStatus(uint64 _fixtureId, uint8 _open_status) external onlyOwner {\n    gameList[_fixtureId].open_status = _open_status;\n  }\n583-function_definition-77-79", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=function_definition];
594 [label="76_ onlyOwner\n594-expression_statement-77-77", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=expression_statement];
597 [label="77_ gameList[_fixtureId].open_status = _open_status;\n597-expression_statement-78-78", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=expression_statement];
605 [label="79_ function bug_txorigin20(address owner_txorigin20) public{\n        require(tx.origin == owner_txorigin20);\n    }\n605-function_definition-80-82", method="bug_txorigin20(address owner_txorigin20)", type_label=function_definition];
613 [label="80_ require(tx.origin == owner_txorigin20);\n613-expression_statement-81-81", method="bug_txorigin20(address owner_txorigin20)", type_label=expression_statement];
622 [label="82_ function changeOdd (uint64 _fixtureId, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw ) external onlyOwner {\n    gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n    gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n    gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n    gameList[_fixtureId].odd_over            = _odd_over;\n    gameList[_fixtureId].odd_under           = _odd_under;\n    gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n    gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n    gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n    emit ChangeOdd (_fixtureId, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw);\n  }\n622-function_definition-83-93", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=function_definition];
661 [label="82_ onlyOwner\n661-expression_statement-83-83", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
664 [label="83_ gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n664-expression_statement-84-84", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
672 [label="84_ gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n672-expression_statement-85-85", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
680 [label="85_ gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n680-expression_statement-86-86", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
688 [label="86_ gameList[_fixtureId].odd_over            = _odd_over;\n688-expression_statement-87-87", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
696 [label="87_ gameList[_fixtureId].odd_under           = _odd_under;\n696-expression_statement-88-88", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
704 [label="88_ gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n704-expression_statement-89-89", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
712 [label="89_ gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n712-expression_statement-90-90", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
720 [label="90_ gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n720-expression_statement-91-91", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
748 [label="93_ function bug_txorigin32(  address owner_txorigin32) public{\n        require(tx.origin == owner_txorigin32);\n    }\n748-function_definition-94-96", method="bug_txorigin32(address owner_txorigin32)", type_label=function_definition];
756 [label="94_ require(tx.origin == owner_txorigin32);\n756-expression_statement-95-95", method="bug_txorigin32(address owner_txorigin32)", type_label=expression_statement];
765 [label="96_ function setGameInfo (uint64 _fixtureId, uint256 _timestamp, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw, uint8 _open_status ) external onlyOwner {\n    gameList[_fixtureId].timestamp           = _timestamp;\n    gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n    gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n    gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n    gameList[_fixtureId].odd_over            = _odd_over;\n    gameList[_fixtureId].odd_under           = _odd_under;\n    gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n    gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n    gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n    gameList[_fixtureId].open_status         = _open_status;\n    gameList[_fixtureId].isDone              = false;\n    emit SetGame(_fixtureId, _timestamp, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw, _open_status);\n  }\n765-function_definition-97-110", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=function_definition];
812 [label="96_ onlyOwner\n812-expression_statement-97-97", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
815 [label="97_ gameList[_fixtureId].timestamp           = _timestamp;\n815-expression_statement-98-98", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
823 [label="98_ gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n823-expression_statement-99-99", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
831 [label="99_ gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n831-expression_statement-100-100", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
839 [label="100_ gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n839-expression_statement-101-101", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
847 [label="101_ gameList[_fixtureId].odd_over            = _odd_over;\n847-expression_statement-102-102", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
855 [label="102_ gameList[_fixtureId].odd_under           = _odd_under;\n855-expression_statement-103-103", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
863 [label="103_ gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n863-expression_statement-104-104", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
871 [label="104_ gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n871-expression_statement-105-105", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
879 [label="105_ gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n879-expression_statement-106-106", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
887 [label="106_ gameList[_fixtureId].open_status         = _open_status;\n887-expression_statement-107-107", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
895 [label="107_ gameList[_fixtureId].isDone              = false;\n895-expression_statement-108-108", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
928 [label="110_ function withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38) public {\n        require(tx.origin == owner_txorigin38);\n        _recipient.transfer(address(this).balance);\n    }\n928-function_definition-111-114", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=function_definition];
940 [label="111_ require(tx.origin == owner_txorigin38);\n940-expression_statement-112-112", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
949 [label="112_ _recipient.transfer(address(this).balance);\n949-expression_statement-113-113", method="withdrawAll_txorigin38(address payable _recipient,address owner_txorigin38)", type_label=expression_statement];
960 [label="114_ function placeBet(uint64 _fixtureId, uint16 _selectedTeam, uint32 _odd) external payable  {\n    uint stake = msg.value;\n    require(stake >= .001 ether);\n    require(_odd != 0 );\n    if (_selectedTeam == 1 ) {\n      require(gameList[_fixtureId].odd_homeTeam == _odd);\n    } else if ( _selectedTeam == 2) {\n      require(gameList[_fixtureId].odd_drawTeam == _odd);\n    } else if ( _selectedTeam == 3) {\n      require(gameList[_fixtureId].odd_awayTeam == _odd);\n    } else if ( _selectedTeam == 4) {\n      require(gameList[_fixtureId].odd_over == _odd);\n    } else if ( _selectedTeam == 5) {\n      require(gameList[_fixtureId].odd_under == _odd);\n    } else if ( _selectedTeam == 6) {\n      require(gameList[_fixtureId].odd_homeTeamAndDraw == _odd);\n    } else if ( _selectedTeam == 7) {\n      require(gameList[_fixtureId].odd_homeAndAwayTeam == _odd);\n    } else if ( _selectedTeam == 8) {\n      require(gameList[_fixtureId].odd_awayTeamAndDraw == _odd);\n    } else {\n      revert();\n    }\n    require(gameList[_fixtureId].open_status == 3);\n    require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) );\n    betList[_fixtureId].push(BetFixture( msg.sender, stake,  _odd, _selectedTeam));\n    emit NewStake(msg.sender, _fixtureId, _selectedTeam, stake, _odd );\n  }\n960-function_definition-115-142", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=function_definition];
977 [label="115_ uint stake = msg.value;\n977-new_variable-116-116", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=new_variable];
985 [label="116_ require(stake >= .001 ether);\n985-expression_statement-117-117", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
993 [label="117_ require(_odd != 0 );\n993-expression_statement-118-118", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1000 [label="118_ if__selectedTeam == 1\n1000-if-119-137", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
2737 [label="118_ end_if", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=end_if];
1005 [label="119_ require(gameList[_fixtureId].odd_homeTeam == _odd);\n1005-expression_statement-120-120", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1016 [label="120_ if__selectedTeam == 2\n1016-if-121-137", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1021 [label="121_ require(gameList[_fixtureId].odd_drawTeam == _odd);\n1021-expression_statement-122-122", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1032 [label="122_ if__selectedTeam == 3\n1032-if-123-137", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1037 [label="123_ require(gameList[_fixtureId].odd_awayTeam == _odd);\n1037-expression_statement-124-124", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1048 [label="124_ if__selectedTeam == 4\n1048-if-125-137", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1053 [label="125_ require(gameList[_fixtureId].odd_over == _odd);\n1053-expression_statement-126-126", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1064 [label="126_ if__selectedTeam == 5\n1064-if-127-137", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1069 [label="127_ require(gameList[_fixtureId].odd_under == _odd);\n1069-expression_statement-128-128", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1080 [label="128_ if__selectedTeam == 6\n1080-if-129-137", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1085 [label="129_ require(gameList[_fixtureId].odd_homeTeamAndDraw == _odd);\n1085-expression_statement-130-130", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1096 [label="130_ if__selectedTeam == 7\n1096-if-131-137", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1101 [label="131_ require(gameList[_fixtureId].odd_homeAndAwayTeam == _odd);\n1101-expression_statement-132-132", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1112 [label="132_ if__selectedTeam == 8\n1112-if-133-137", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1117 [label="133_ require(gameList[_fixtureId].odd_awayTeamAndDraw == _odd);\n1117-expression_statement-134-134", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1131 [label="137_ require(gameList[_fixtureId].open_status == 3);\n1131-expression_statement-138-138", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1142 [label="138_ require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) );\n1142-expression_statement-139-139", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1157 [label="139_ betList[_fixtureId].push(BetFixture( msg.sender, stake,  _odd, _selectedTeam));\n1157-expression_statement-140-140", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1191 [label="142_ function bug_txorigin4(address owner_txorigin4) public{\n        require(tx.origin == owner_txorigin4);\n    }\n1191-function_definition-143-145", method="bug_txorigin4(address owner_txorigin4)", type_label=function_definition];
1199 [label="143_ require(tx.origin == owner_txorigin4);\n1199-expression_statement-144-144", method="bug_txorigin4(address owner_txorigin4)", type_label=expression_statement];
1208 [label="145_ function givePrizeMoney(uint64 _fixtureId, uint8 _homeDrawAway, uint8 _overUnder) external onlyOwner payable {\n    require(gameList[_fixtureId].open_status == 3);\n    require(gameList[_fixtureId].isDone == false);\n    require(betList[_fixtureId][0].player != address(0) );\n    for (uint i= 0 ; i < betList[_fixtureId].length; i++){\n      uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;\n      uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;\n      if ( (selectedTeam == 1 && _homeDrawAway == 1) \n        || (selectedTeam == 2 && _homeDrawAway == 2) \n        || (selectedTeam == 3 && _homeDrawAway == 3) \n        || (selectedTeam == 4 && _overUnder == 1) \n        || (selectedTeam == 5 && _overUnder == 2) \n        || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )\n        || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )\n        || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) ) \n        ){ \n        betList[_fixtureId][i].player.transfer(returnEth);\n      }\n    }\n    gameList[_fixtureId].open_status = 5;\n    gameList[_fixtureId].isDone = true;  \n    emit GivePrizeMoney( _fixtureId,  _homeDrawAway,  _overUnder);\n  }\n1208-function_definition-146-168", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=function_definition];
1223 [label="145_ onlyOwner\n1223-expression_statement-146-146", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1227 [label="146_ require(gameList[_fixtureId].open_status == 3);\n1227-expression_statement-147-147", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1238 [label="147_ require(gameList[_fixtureId].isDone == false);\n1238-expression_statement-148-148", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1250 [label="148_ require(betList[_fixtureId][0].player != address(0) );\n1250-expression_statement-149-149", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1265 [label="149_ for(i < betList[_fixtureId].length;;i++)\n1265-for-150-164", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=for];
3002 [label="149_ end_loop", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=end_loop];
1280 [label="149_ i++\n1280-expression_statement-150-150", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1283 [label="150_ uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;\n1283-new_variable-151-151", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=new_variable];
1295 [label="151_ uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;\n1295-new_variable-152-152", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=new_variable];
1318 [label="152_ if_(selectedTeam == 1 && _homeDrawAway == 1) \n        || (selectedTeam == 2 && _homeDrawAway == 2) \n        || (selectedTeam == 3 && _homeDrawAway == 3) \n        || (selectedTeam == 4 && _overUnder == 1) \n        || (selectedTeam == 5 && _overUnder == 2) \n        || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )\n        || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )\n        || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) )\n1318-if-153-163", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=if];
3055 [label="152_ end_if", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=end_if];
1406 [label="161_ betList[_fixtureId][i].player.transfer(returnEth);\n1406-expression_statement-162-162", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1419 [label="164_ gameList[_fixtureId].open_status = 5;\n1419-expression_statement-165-165", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1427 [label="165_ gameList[_fixtureId].isDone = true;\n1427-expression_statement-166-166", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1444 [label="168_ function transferTo_txorigin7(address to, uint amount,address owner_txorigin7) public {\n  require(tx.origin == owner_txorigin7);\n  to.call.value(amount);\n}\n1444-function_definition-169-172", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=function_definition];
1460 [label="169_ require(tx.origin == owner_txorigin7);\n1460-expression_statement-170-170", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
1469 [label="170_ to.call.value(amount);\n1469-expression_statement-171-171", method="transferTo_txorigin7(address to,uint amount,address owner_txorigin7)", type_label=expression_statement];
1478 [label="172_ modifier onlyOwner {\n    require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n    _;\n  }\n1478-expression_statement-173-176", method="", type_label=expression_statement];
1481 [label="173_ require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n1481-expression_statement-174-174", method="", type_label=expression_statement];
1493 [label="174_ _;\n1493-expression_statement-175-175", method="", type_label=expression_statement];
1495 [label="176_ function getBalance() external view returns(uint){\n    return address(this).balance;\n  }\n1495-function_definition-177-179", method="getBalance()", type_label=function_definition];
1504 [label="177_ return address(this).balance;\n1504-return-178-178", method="getBalance()", type_label=return];
1510 [label="179_ function transferTo_txorigin23(address to, uint amount,address owner_txorigin23) public {\n  require(tx.origin == owner_txorigin23);\n  to.call.value(amount);\n}\n1510-function_definition-180-183", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=function_definition];
1526 [label="180_ require(tx.origin == owner_txorigin23);\n1526-expression_statement-181-181", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
1535 [label="181_ to.call.value(amount);\n1535-expression_statement-182-182", method="transferTo_txorigin23(address to,uint amount,address owner_txorigin23)", type_label=expression_statement];
1544 [label="183_ function deposit(uint256 _eth) external payable{\n    emit Deposit(msg.sender, _eth);\n  }\n1544-function_definition-184-186", method="deposit(uint256 _eth)", type_label=function_definition];
1561 [label="186_ function withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14) public {\n        require(tx.origin == owner_txorigin14);\n        _recipient.transfer(address(this).balance);\n    }\n1561-function_definition-187-190", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=function_definition];
1573 [label="187_ require(tx.origin == owner_txorigin14);\n1573-expression_statement-188-188", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
1582 [label="188_ _recipient.transfer(address(this).balance);\n1582-expression_statement-189-189", method="withdrawAll_txorigin14(address payable _recipient,address owner_txorigin14)", type_label=expression_statement];
1593 [label="190_ function changeOwner(address payable _newOwner ) external onlyOwner {\n    owner = _newOwner;\n  }\n1593-function_definition-191-193", method="changeOwner(address payable _newOwner)", type_label=function_definition];
1600 [label="190_ onlyOwner\n1600-expression_statement-191-191", method="changeOwner(address payable _newOwner)", type_label=expression_statement];
1603 [label="191_ owner = _newOwner;\n1603-expression_statement-192-192", method="changeOwner(address payable _newOwner)", type_label=expression_statement];
1607 [label="193_ function withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30) public {\n        require(tx.origin == owner_txorigin30);\n        _recipient.transfer(address(this).balance);\n    }\n1607-function_definition-194-197", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=function_definition];
1619 [label="194_ require(tx.origin == owner_txorigin30);\n1619-expression_statement-195-195", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
1628 [label="195_ _recipient.transfer(address(this).balance);\n1628-expression_statement-196-196", method="withdrawAll_txorigin30(address payable _recipient,address owner_txorigin30)", type_label=expression_statement];
1643 [label="198_ owner.transfer(msg.value);\n1643-expression_statement-199-199", method="", type_label=expression_statement];
1652 [label="200_ function bug_txorigin8(address owner_txorigin8) public{\n        require(tx.origin == owner_txorigin8);\n    }\n1652-function_definition-201-203", method="bug_txorigin8(address owner_txorigin8)", type_label=function_definition];
1660 [label="201_ require(tx.origin == owner_txorigin8);\n1660-expression_statement-202-202", method="bug_txorigin8(address owner_txorigin8)", type_label=expression_statement];
1669 [label="203_ function withdraw(uint256 _amount) external payable onlyOwner {\n    require(_amount > 0 && _amount <= address(this).balance );\n    owner.transfer(_amount);\n    emit Withdraw(owner, _amount);\n  }\n1669-function_definition-204-208", method="withdraw(uint256 _amount)", type_label=function_definition];
1677 [label="203_ onlyOwner\n1677-expression_statement-204-204", method="withdraw(uint256 _amount)", type_label=expression_statement];
1680 [label="204_ require(_amount > 0 && _amount <= address(this).balance );\n1680-expression_statement-205-205", method="withdraw(uint256 _amount)", type_label=expression_statement];
1695 [label="205_ owner.transfer(_amount);\n1695-expression_statement-206-206", method="withdraw(uint256 _amount)", type_label=expression_statement];
1708 [label="208_ function transferTo_txorigin39(address to, uint amount,address owner_txorigin39) public {\n  require(tx.origin == owner_txorigin39);\n  to.call.value(amount);\n}\n1708-function_definition-209-212", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=function_definition];
1724 [label="209_ require(tx.origin == owner_txorigin39);\n1724-expression_statement-210-210", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
1733 [label="210_ to.call.value(amount);\n1733-expression_statement-211-211", method="transferTo_txorigin39(address to,uint amount,address owner_txorigin39)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1129;
13 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 50  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
96 -> 112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
154 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
264 -> 272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
291 -> 307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
307 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
425 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
441 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
583 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
605 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
622 -> 664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
672 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
696 -> 704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
704 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
748 -> 756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
765 -> 815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
823 -> 831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
831 -> 839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
839 -> 847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
847 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
863 -> 871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
879 -> 887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
887 -> 895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
928 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
960 -> 977  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
977 -> 985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 1000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 1005  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1000 -> 1016  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2737 -> 1131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 2737  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1016 -> 1021  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1016 -> 1032  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1021 -> 2737  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1032 -> 1037  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1032 -> 1048  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1037 -> 2737  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1048 -> 1053  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1048 -> 1064  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1053 -> 2737  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1064 -> 1069  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1064 -> 1080  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1069 -> 2737  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1080 -> 1085  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1080 -> 1096  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1085 -> 2737  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1096 -> 1101  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1096 -> 1112  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1101 -> 2737  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1112 -> 1117  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1117 -> 2737  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1131 -> 1142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1142 -> 1157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1191 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1208 -> 1227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1227 -> 1238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1238 -> 1250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1250 -> 1265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1265 -> 1283  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1265 -> 3002  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3002 -> 1419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1280 -> 1265  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1283 -> 1295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1295 -> 1318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1318 -> 1406  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1318 -> 3055  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3055 -> 1280  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3055 -> 1280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
1406 -> 3055  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1419 -> 1427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1444 -> 1460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1460 -> 1469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1481 -> 1493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1495 -> 1504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1504 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1510 -> 1526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1526 -> 1535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1561 -> 1573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1573 -> 1582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1593 -> 1603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1607 -> 1619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1619 -> 1628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1652 -> 1660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1669 -> 1680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1680 -> 1695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1708 -> 1724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1724 -> 1733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 2737  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
