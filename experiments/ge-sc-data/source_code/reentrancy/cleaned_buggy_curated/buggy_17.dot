digraph  {
13 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    require(c / a == b);\n    return c;\n  }\n13-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
2378 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
45 [label="7_ require(c / a == b);\n45-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
56 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0);\n    uint256 c = a / b;\n    return c;\n  }\n56-function_definition-11-15", method="div(uint256 a,uint256 b)", type_label=function_definition];
73 [label="11_ require(b > 0);\n73-expression_statement-12-12", method="div(uint256 a,uint256 b)", type_label=expression_statement];
80 [label="12_ uint256 c = a / b;\n80-new_variable-13-13", method="div(uint256 a,uint256 b)", type_label=new_variable];
88 [label="13_ return c;\n88-return-14-14", method="div(uint256 a,uint256 b)", type_label=return];
90 [label="15_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n    return c;\n  }\n90-function_definition-16-20", method="sub(uint256 a,uint256 b)", type_label=function_definition];
107 [label="16_ require(b <= a);\n107-expression_statement-17-17", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
114 [label="17_ uint256 c = a - b;\n114-new_variable-18-18", method="sub(uint256 a,uint256 b)", type_label=new_variable];
122 [label="18_ return c;\n122-return-19-19", method="sub(uint256 a,uint256 b)", type_label=return];
124 [label="20_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a && c >= b);\n    return c;\n  }\n124-function_definition-21-25", method="add(uint256 a,uint256 b)", type_label=function_definition];
141 [label="21_ uint256 c = a + b;\n141-new_variable-22-22", method="add(uint256 a,uint256 b)", type_label=new_variable];
149 [label="22_ require(c >= a && c >= b);\n149-expression_statement-23-23", method="add(uint256 a,uint256 b)", type_label=expression_statement];
160 [label="23_ return c;\n160-return-24-24", method="add(uint256 a,uint256 b)", type_label=return];
162 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n162-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
179 [label="26_ require(b != 0);\n179-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
186 [label="27_ return a % b;\n186-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
190 [label="29_ function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n190-function_definition-30-32", method="max256(uint256 a,uint256 b)", type_label=function_definition];
207 [label="30_ return a >= b ? a : b;\n207-return-31-31", method="max256(uint256 a,uint256 b)", type_label=return];
214 [label="32_ function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n214-function_definition-33-35", method="min256(uint256 a,uint256 b)", type_label=function_definition];
231 [label="33_ return a < b ? a : b;\n231-return-34-34", method="min256(uint256 a,uint256 b)", type_label=return];
241 [label="37_ mapping(address => uint) userBalance_re_ent12;\n241-new_variable-38-38", method="", type_label=new_variable];
247 [label="38_ function withdrawBalance_re_ent12() public{\n        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent12[msg.sender] = 0;\n    }\n247-function_definition-39-44", method="withdrawBalance_re_ent12()", type_label=function_definition];
251 [label="39_ if\n251-if-40-42", method="withdrawBalance_re_ent12()", type_label=if];
2599 [label="39_ end_if", method="withdrawBalance_re_ent12()", type_label=end_if];
269 [label="42_ userBalance_re_ent12[msg.sender] = 0;\n269-expression_statement-43-43", method="withdrawBalance_re_ent12()", type_label=expression_statement];
277 [label="44_ address public owner;\n277-new_variable-45-45", method="", type_label=new_variable];
284 [label="46_ owner = msg.sender;\n284-expression_statement-47-47", method="", type_label=expression_statement];
290 [label="48_ bool not_called_re_ent20 = true;\n290-new_variable-49-49", method="", type_label=new_variable];
296 [label="49_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n296-function_definition-50-56", method="bug_re_ent20()", type_label=function_definition];
300 [label="50_ require(not_called_re_ent20);\n300-expression_statement-51-51", method="bug_re_ent20()", type_label=expression_statement];
305 [label="51_ if\n305-if-52-54", method="bug_re_ent20()", type_label=if];
2653 [label="51_ end_if", method="bug_re_ent20()", type_label=end_if];
320 [label="54_ not_called_re_ent20 = false;\n320-expression_statement-55-55", method="bug_re_ent20()", type_label=expression_statement];
325 [label="56_ modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n325-expression_statement-57-60", method="", type_label=expression_statement];
328 [label="57_ require(msg.sender == owner);\n328-expression_statement-58-58", method="", type_label=expression_statement];
337 [label="58_ _;\n337-expression_statement-59-59", method="", type_label=expression_statement];
339 [label="60_ function transferOwnership(address newOwner) onlyOwner public {\n    owner = newOwner;\n  }\n339-function_definition-61-63", method="transferOwnership(address newOwner)", type_label=function_definition];
345 [label="60_ onlyOwner\n345-expression_statement-61-61", method="transferOwnership(address newOwner)", type_label=expression_statement];
349 [label="61_ owner = newOwner;\n349-expression_statement-62-62", method="transferOwnership(address newOwner)", type_label=expression_statement];
353 [label="63_ mapping(address => uint) redeemableEther_re_ent32;\n353-new_variable-64-64", method="", type_label=new_variable];
359 [label="64_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n359-function_definition-65-70", method="claimReward_re_ent32()", type_label=function_definition];
363 [label="65_ require(redeemableEther_re_ent32[msg.sender] > 0);\n363-expression_statement-66-66", method="claimReward_re_ent32()", type_label=expression_statement];
374 [label="66_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n374-new_variable-67-67", method="claimReward_re_ent32()", type_label=new_variable];
384 [label="67_ msg.sender.transfer(transferValue_re_ent32);\n384-expression_statement-68-68", method="claimReward_re_ent32()", type_label=expression_statement];
393 [label="68_ redeemableEther_re_ent32[msg.sender] = 0;\n393-expression_statement-69-69", method="claimReward_re_ent32()", type_label=expression_statement];
404 [label="72_ function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\n404-function_definition-73-73", method="receiveApproval(address _from,uint256 _value,address _token,bytes calldata _extraData)", type_label=function_definition];
431 [label="76_ mapping(address => uint) redeemableEther_re_ent11;\n431-new_variable-77-77", method="", type_label=new_variable];
437 [label="77_ function claimReward_re_ent11() public {        \n        require(redeemableEther_re_ent11[msg.sender] > 0);\n        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n        msg.sender.transfer(transferValue_re_ent11);    \n        redeemableEther_re_ent11[msg.sender] = 0;\n    }\n437-function_definition-78-83", method="claimReward_re_ent11()", type_label=function_definition];
441 [label="78_ require(redeemableEther_re_ent11[msg.sender] > 0);\n441-expression_statement-79-79", method="claimReward_re_ent11()", type_label=expression_statement];
452 [label="79_ uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n452-new_variable-80-80", method="claimReward_re_ent11()", type_label=new_variable];
462 [label="80_ msg.sender.transfer(transferValue_re_ent11);\n462-expression_statement-81-81", method="claimReward_re_ent11()", type_label=expression_statement];
471 [label="81_ redeemableEther_re_ent11[msg.sender] = 0;\n471-expression_statement-82-82", method="claimReward_re_ent11()", type_label=expression_statement];
479 [label="83_ string public name;\n479-new_variable-84-84", method="", type_label=new_variable];
484 [label="84_ mapping(address => uint) balances_re_ent1;\n484-new_variable-85-85", method="", type_label=new_variable];
490 [label="85_ function withdraw_balances_re_ent1 () public {\n       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent1[msg.sender] = 0;\n      }\n490-function_definition-86-90", method="withdraw_balances_re_ent1()", type_label=function_definition];
494 [label="86_ (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n494-new_variable-87-87", method="withdraw_balances_re_ent1()", type_label=new_variable];
518 [label="87_ if\n518-if-88-89", method="withdraw_balances_re_ent1()", type_label=if];
2866 [label="87_ end_if", method="withdraw_balances_re_ent1()", type_label=end_if];
520 [label="88_ balances_re_ent1[msg.sender] = 0;\n520-expression_statement-89-89", method="withdraw_balances_re_ent1()", type_label=expression_statement];
528 [label="90_ string public symbol;\n528-new_variable-91-91", method="", type_label=new_variable];
533 [label="91_ bool not_called_re_ent41 = true;\n533-new_variable-92-92", method="", type_label=new_variable];
539 [label="92_ function bug_re_ent41() public{\n        require(not_called_re_ent41);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent41 = false;\n    }\n539-function_definition-93-99", method="bug_re_ent41()", type_label=function_definition];
543 [label="93_ require(not_called_re_ent41);\n543-expression_statement-94-94", method="bug_re_ent41()", type_label=expression_statement];
548 [label="94_ if\n548-if-95-97", method="bug_re_ent41()", type_label=if];
2896 [label="94_ end_if", method="bug_re_ent41()", type_label=end_if];
563 [label="97_ not_called_re_ent41 = false;\n563-expression_statement-98-98", method="bug_re_ent41()", type_label=expression_statement];
568 [label="99_ uint8 public decimals;\n568-new_variable-100-100", method="", type_label=new_variable];
573 [label="100_ uint256 counter_re_ent42 =0;\n573-new_variable-101-101", method="", type_label=new_variable];
578 [label="101_ function callme_re_ent42() public{\n        require(counter_re_ent42<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent42 += 1;\n    }\n578-function_definition-102-108", method="callme_re_ent42()", type_label=function_definition];
582 [label="102_ require(counter_re_ent42<=5);\n582-expression_statement-103-103", method="callme_re_ent42()", type_label=expression_statement];
589 [label="103_ if\n589-if-104-106", method="callme_re_ent42()", type_label=if];
2937 [label="103_ end_if", method="callme_re_ent42()", type_label=end_if];
604 [label="106_ counter_re_ent42 += 1;\n604-expression_statement-107-107", method="callme_re_ent42()", type_label=expression_statement];
608 [label="108_ uint256 public totalSupply;\n608-new_variable-109-109", method="", type_label=new_variable];
613 [label="109_ address payable lastPlayer_re_ent2;\n613-new_variable-110-110", method="", type_label=new_variable];
617 [label="110_ uint jackpot_re_ent2;\n617-new_variable-111-111", method="", type_label=new_variable];
621 [label="111_ function buyTicket_re_ent2() public{\n	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))\n        revert();\n      lastPlayer_re_ent2 = msg.sender;\n      jackpot_re_ent2    = address(this).balance;\n    }\n621-function_definition-112-117", method="buyTicket_re_ent2()", type_label=function_definition];
625 [label="112_ if\n625-if-113-114", method="buyTicket_re_ent2()", type_label=if];
2973 [label="112_ end_if", method="buyTicket_re_ent2()", type_label=end_if];
636 [label="114_ lastPlayer_re_ent2 = msg.sender;\n636-expression_statement-115-115", method="buyTicket_re_ent2()", type_label=expression_statement];
642 [label="115_ jackpot_re_ent2    = address(this).balance;\n642-expression_statement-116-116", method="buyTicket_re_ent2()", type_label=expression_statement];
650 [label="117_ mapping (address => uint256) public balanceOf;\n650-new_variable-118-118", method="", type_label=new_variable];
657 [label="118_ mapping(address => uint) balances_re_ent17;\n657-new_variable-119-119", method="", type_label=new_variable];
663 [label="119_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n663-function_definition-120-125", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
671 [label="120_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n671-expression_statement-121-121", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
682 [label="121_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n682-new_variable-122-122", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
702 [label="122_ require(success);\n702-expression_statement-123-123", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
707 [label="123_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n707-expression_statement-124-124", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
715 [label="125_ mapping (address => mapping (address => uint256)) public allowance;\n715-new_variable-126-126", method="", type_label=new_variable];
724 [label="126_ bool not_called_re_ent27 = true;\n724-new_variable-127-127", method="", type_label=new_variable];
730 [label="127_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n730-function_definition-128-134", method="bug_re_ent27()", type_label=function_definition];
734 [label="128_ require(not_called_re_ent27);\n734-expression_statement-129-129", method="bug_re_ent27()", type_label=expression_statement];
739 [label="129_ if\n739-if-130-132", method="bug_re_ent27()", type_label=if];
3087 [label="129_ end_if", method="bug_re_ent27()", type_label=end_if];
754 [label="132_ not_called_re_ent27 = false;\n754-expression_statement-133-133", method="bug_re_ent27()", type_label=expression_statement];
773 [label="135_ mapping(address => uint) balances_re_ent31;\n773-new_variable-136-136", method="", type_label=new_variable];
779 [label="136_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n779-function_definition-137-141", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
787 [label="137_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n787-expression_statement-138-138", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
798 [label="138_ require(msg.sender.send(_weiToWithdraw));\n798-expression_statement-139-139", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
810 [label="139_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n810-expression_statement-140-140", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
832 [label="142_ bool not_called_re_ent13 = true;\n832-new_variable-143-143", method="", type_label=new_variable];
838 [label="143_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n838-function_definition-144-151", method="bug_re_ent13()", type_label=function_definition];
842 [label="144_ require(not_called_re_ent13);\n842-expression_statement-145-145", method="bug_re_ent13()", type_label=expression_statement];
847 [label="145_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n847-new_variable-146-146", method="bug_re_ent13()", type_label=new_variable];
868 [label="146_ if\n868-if-147-149", method="bug_re_ent13()", type_label=if];
3216 [label="146_ end_if", method="bug_re_ent13()", type_label=end_if];
874 [label="149_ not_called_re_ent13 = false;\n874-expression_statement-150-150", method="bug_re_ent13()", type_label=expression_statement];
903 [label="153_ decimals = dec;\n903-expression_statement-154-154", method="", type_label=expression_statement];
907 [label="154_ name = tokenName;\n907-expression_statement-155-155", method="", type_label=expression_statement];
911 [label="155_ symbol = tokenSymbol;\n911-expression_statement-156-156", method="", type_label=expression_statement];
915 [label="157_ mapping(address => uint) balances_re_ent38;\n915-new_variable-158-158", method="", type_label=new_variable];
921 [label="158_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n921-function_definition-159-163", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
929 [label="159_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n929-expression_statement-160-160", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
940 [label="160_ require(msg.sender.send(_weiToWithdraw));\n940-expression_statement-161-161", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
952 [label="161_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n952-expression_statement-162-162", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
960 [label="163_ function _transfer(address _from, address _to, uint _value) internal {\n    require(_to != address(0x0));\n    balanceOf[_from] = balanceOf[_from].sub(_value);\n    balanceOf[_to] = balanceOf[_to].add(_value);\n    emit Transfer(_from, _to, _value);\n  }\n960-function_definition-164-169", method="_transfer(address _from,address _to,uint _value)", type_label=function_definition];
976 [label="164_ require(_to != address(0x0));\n976-expression_statement-165-165", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
985 [label="165_ balanceOf[_from] = balanceOf[_from].sub(_value);\n985-expression_statement-166-166", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
998 [label="166_ balanceOf[_to] = balanceOf[_to].add(_value);\n998-expression_statement-167-167", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1019 [label="169_ mapping(address => uint) redeemableEther_re_ent4;\n1019-new_variable-170-170", method="", type_label=new_variable];
1025 [label="170_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n1025-function_definition-171-176", method="claimReward_re_ent4()", type_label=function_definition];
1029 [label="171_ require(redeemableEther_re_ent4[msg.sender] > 0);\n1029-expression_statement-172-172", method="claimReward_re_ent4()", type_label=expression_statement];
1040 [label="172_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n1040-new_variable-173-173", method="claimReward_re_ent4()", type_label=new_variable];
1050 [label="173_ msg.sender.transfer(transferValue_re_ent4);\n1050-expression_statement-174-174", method="claimReward_re_ent4()", type_label=expression_statement];
1059 [label="174_ redeemableEther_re_ent4[msg.sender] = 0;\n1059-expression_statement-175-175", method="claimReward_re_ent4()", type_label=expression_statement];
1067 [label="176_ function transfer(address _to, uint256 _value) public returns (bool success) {\n    _transfer(msg.sender, _to, _value);\n    return true;\n  }\n1067-function_definition-177-180", method="transfer(address _to,uint256 _value)", type_label=function_definition];
1084 [label="177_ _transfer(msg.sender, _to, _value);\n1084-expression_statement-178-178", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
1095 [label="178_ return true;\n1095-return-179-179", method="transfer(address _to,uint256 _value)", type_label=return];
1098 [label="180_ uint256 counter_re_ent7 =0;\n1098-new_variable-181-181", method="", type_label=new_variable];
1103 [label="181_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n1103-function_definition-182-188", method="callme_re_ent7()", type_label=function_definition];
1107 [label="182_ require(counter_re_ent7<=5);\n1107-expression_statement-183-183", method="callme_re_ent7()", type_label=expression_statement];
1114 [label="183_ if\n1114-if-184-186", method="callme_re_ent7()", type_label=if];
3462 [label="183_ end_if", method="callme_re_ent7()", type_label=end_if];
1129 [label="186_ counter_re_ent7 += 1;\n1129-expression_statement-187-187", method="callme_re_ent7()", type_label=expression_statement];
1133 [label="188_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n		_transfer(_from, _to, _value);\n		return true;\n  }\n1133-function_definition-189-193", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
1154 [label="189_ allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n1154-expression_statement-190-190", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1175 [label="190_ _transfer(_from, _to, _value);\n1175-expression_statement-191-191", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1184 [label="191_ return true;\n1184-return-192-192", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
1187 [label="193_ address payable lastPlayer_re_ent23;\n1187-new_variable-194-194", method="", type_label=new_variable];
1191 [label="194_ uint jackpot_re_ent23;\n1191-new_variable-195-195", method="", type_label=new_variable];
1195 [label="195_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n1195-function_definition-196-201", method="buyTicket_re_ent23()", type_label=function_definition];
1199 [label="196_ if\n1199-if-197-198", method="buyTicket_re_ent23()", type_label=if];
3547 [label="196_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
1210 [label="198_ lastPlayer_re_ent23 = msg.sender;\n1210-expression_statement-199-199", method="buyTicket_re_ent23()", type_label=expression_statement];
1216 [label="199_ jackpot_re_ent23    = address(this).balance;\n1216-expression_statement-200-200", method="buyTicket_re_ent23()", type_label=expression_statement];
1224 [label="201_ function approve(address _spender, uint256 _value) public returns (bool success) {\n    allowance[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n1224-function_definition-202-206", method="approve(address _spender,uint256 _value)", type_label=function_definition];
1241 [label="202_ allowance[msg.sender][_spender] = _value;\n1241-expression_statement-203-203", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
1261 [label="204_ return true;\n1261-return-205-205", method="approve(address _spender,uint256 _value)", type_label=return];
1264 [label="206_ uint256 counter_re_ent14 =0;\n1264-new_variable-207-207", method="", type_label=new_variable];
1269 [label="207_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n1269-function_definition-208-214", method="callme_re_ent14()", type_label=function_definition];
1273 [label="208_ require(counter_re_ent14<=5);\n1273-expression_statement-209-209", method="callme_re_ent14()", type_label=expression_statement];
1280 [label="209_ if\n1280-if-210-212", method="callme_re_ent14()", type_label=if];
3628 [label="209_ end_if", method="callme_re_ent14()", type_label=end_if];
1295 [label="212_ counter_re_ent14 += 1;\n1295-expression_statement-213-213", method="callme_re_ent14()", type_label=expression_statement];
1299 [label="214_ function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n    tokenRecipient spender = tokenRecipient(_spender);\n    if (approve(_spender, _value)) {\n      spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n      return true;\n    }\n  }\n1299-function_definition-215-221", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=function_definition];
1320 [label="215_ tokenRecipient spender = tokenRecipient(_spender);\n1320-new_variable-216-216", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=new_variable];
1330 [label="216_ if\n1330-if-217-220", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=if];
3678 [label="216_ end_if", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=end_if];
1338 [label="217_ spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n1338-expression_statement-218-218", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=expression_statement];
1355 [label="218_ return true;\n1355-return-219-219", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=return];
1358 [label="221_ address payable lastPlayer_re_ent30;\n1358-new_variable-222-222", method="", type_label=new_variable];
1362 [label="222_ uint jackpot_re_ent30;\n1362-new_variable-223-223", method="", type_label=new_variable];
1366 [label="223_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n1366-function_definition-224-229", method="buyTicket_re_ent30()", type_label=function_definition];
1370 [label="224_ if\n1370-if-225-226", method="buyTicket_re_ent30()", type_label=if];
3718 [label="224_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
1381 [label="226_ lastPlayer_re_ent30 = msg.sender;\n1381-expression_statement-227-227", method="buyTicket_re_ent30()", type_label=expression_statement];
1387 [label="227_ jackpot_re_ent30    = address(this).balance;\n1387-expression_statement-228-228", method="buyTicket_re_ent30()", type_label=expression_statement];
1404 [label="231_ address payable lastPlayer_re_ent37;\n1404-new_variable-232-232", method="", type_label=new_variable];
1408 [label="232_ uint jackpot_re_ent37;\n1408-new_variable-233-233", method="", type_label=new_variable];
1412 [label="233_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n1412-function_definition-234-239", method="buyTicket_re_ent37()", type_label=function_definition];
1416 [label="234_ if\n1416-if-235-236", method="buyTicket_re_ent37()", type_label=if];
3764 [label="234_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
1427 [label="236_ lastPlayer_re_ent37 = msg.sender;\n1427-expression_statement-237-237", method="buyTicket_re_ent37()", type_label=expression_statement];
1433 [label="237_ jackpot_re_ent37    = address(this).balance;\n1433-expression_statement-238-238", method="buyTicket_re_ent37()", type_label=expression_statement];
1441 [label="239_ string _tokenName = \"AZ FundChain\";\n1441-new_variable-240-240", method="", type_label=new_variable];
1447 [label="239_ mapping(address => uint) balances_re_ent3;\n1447-new_variable-240-240", method="", type_label=new_variable];
1453 [label="240_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n1453-function_definition-241-246", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
1461 [label="241_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n1461-expression_statement-242-242", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1472 [label="242_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n1472-new_variable-243-243", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
1492 [label="243_ require(success);\n1492-expression_statement-244-244", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1497 [label="244_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n1497-expression_statement-245-245", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1505 [label="246_ string _tokenSymbol = \"AZT\";\n1505-new_variable-247-247", method="", type_label=new_variable];
1511 [label="247_ address payable lastPlayer_re_ent9;\n1511-new_variable-248-248", method="", type_label=new_variable];
1515 [label="248_ uint jackpot_re_ent9;\n1515-new_variable-249-249", method="", type_label=new_variable];
1519 [label="249_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n1519-function_definition-250-256", method="buyTicket_re_ent9()", type_label=function_definition];
1523 [label="250_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n1523-new_variable-251-251", method="buyTicket_re_ent9()", type_label=new_variable];
1541 [label="251_ if\n1541-if-252-253", method="buyTicket_re_ent9()", type_label=if];
3889 [label="251_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
1546 [label="253_ lastPlayer_re_ent9 = msg.sender;\n1546-expression_statement-254-254", method="buyTicket_re_ent9()", type_label=expression_statement];
1552 [label="254_ jackpot_re_ent9    = address(this).balance;\n1552-expression_statement-255-255", method="buyTicket_re_ent9()", type_label=expression_statement];
1560 [label="256_ uint8 _decimals = 18;\n1560-new_variable-257-257", method="", type_label=new_variable];
1565 [label="257_ mapping(address => uint) redeemableEther_re_ent25;\n1565-new_variable-258-258", method="", type_label=new_variable];
1571 [label="258_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n1571-function_definition-259-264", method="claimReward_re_ent25()", type_label=function_definition];
1575 [label="259_ require(redeemableEther_re_ent25[msg.sender] > 0);\n1575-expression_statement-260-260", method="claimReward_re_ent25()", type_label=expression_statement];
1586 [label="260_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n1586-new_variable-261-261", method="claimReward_re_ent25()", type_label=new_variable];
1596 [label="261_ msg.sender.transfer(transferValue_re_ent25);\n1596-expression_statement-262-262", method="claimReward_re_ent25()", type_label=expression_statement];
1605 [label="262_ redeemableEther_re_ent25[msg.sender] = 0;\n1605-expression_statement-263-263", method="claimReward_re_ent25()", type_label=expression_statement];
1613 [label="264_ address[] public frozenAddresses;\n1613-new_variable-265-265", method="", type_label=new_variable];
1619 [label="265_ mapping(address => uint) userBalance_re_ent19;\n1619-new_variable-266-266", method="", type_label=new_variable];
1625 [label="266_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n1625-function_definition-267-272", method="withdrawBalance_re_ent19()", type_label=function_definition];
1629 [label="267_ if\n1629-if-268-270", method="withdrawBalance_re_ent19()", type_label=if];
3977 [label="267_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
1647 [label="270_ userBalance_re_ent19[msg.sender] = 0;\n1647-expression_statement-271-271", method="withdrawBalance_re_ent19()", type_label=expression_statement];
1655 [label="272_ bool public tokenFrozen;\n1655-new_variable-273-273", method="", type_label=new_variable];
1660 [label="273_ struct frozenWallet {\n    bool isFrozen;  \n    uint256 rewardedAmount;  \n    uint256 frozenAmount;  \n    uint256 frozenTime;  \n  }\n1660-expression_statement-274-279", method="frozenWallet()", type_label=expression_statement];
1678 [label="279_ mapping(address => uint) userBalance_re_ent26;\n1678-new_variable-280-280", method="", type_label=new_variable];
1684 [label="280_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n1684-function_definition-281-287", method="withdrawBalance_re_ent26()", type_label=function_definition];
1688 [label="281_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n1688-new_variable-282-282", method="withdrawBalance_re_ent26()", type_label=new_variable];
1712 [label="282_ if\n1712-if-283-285", method="withdrawBalance_re_ent26()", type_label=if];
4060 [label="282_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
1718 [label="285_ userBalance_re_ent26[msg.sender] = 0;\n1718-expression_statement-286-286", method="withdrawBalance_re_ent26()", type_label=expression_statement];
1726 [label="287_ mapping (address => frozenWallet) public frozenWallets;\n1726-new_variable-288-288", method="", type_label=new_variable];
1735 [label="288_ TokenERC20(_tokenName, _tokenSymbol, _decimals)\n1735-expression_statement-289-289", method="", type_label=expression_statement];
1744 [label="289_ frozenAddresses.push(address(0x9fd50776F133751E8Ae6abE1Be124638Bb917E05));\n1744-expression_statement-290-290", method="", type_label=expression_statement];
1753 [label="290_ frozenWallets[frozenAddresses[0]] = frozenWallet({\n      isFrozen: true,\n      rewardedAmount: 30000000 * 10 ** uint256(decimals),\n      frozenAmount: 0 * 10 ** uint256(decimals),\n      frozenTime: now + 1 * 1 hours  \n    });\n1753-expression_statement-291-296", method="", type_label=expression_statement];
1793 [label="296_ for(i < frozenAddresses.length;;i++)\n1793-for-297-300", method="", type_label=for];
4141 [label="296_ end_loop", method="", type_label=end_loop];
1806 [label="296_ i++\n1806-expression_statement-297-297", method="", type_label=expression_statement];
1809 [label="297_ balanceOf[frozenAddresses[i]] = frozenWallets[frozenAddresses[i]].rewardedAmount;\n1809-expression_statement-298-298", method="", type_label=expression_statement];
1823 [label="298_ totalSupply = totalSupply.add(frozenWallets[frozenAddresses[i]].rewardedAmount);\n1823-expression_statement-299-299", method="", type_label=expression_statement];
1838 [label="301_ mapping(address => uint) balances_re_ent8;\n1838-new_variable-302-302", method="", type_label=new_variable];
1844 [label="302_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n1844-function_definition-303-307", method="withdraw_balances_re_ent8()", type_label=function_definition];
1848 [label="303_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n1848-new_variable-304-304", method="withdraw_balances_re_ent8()", type_label=new_variable];
1872 [label="304_ if\n1872-if-305-306", method="withdraw_balances_re_ent8()", type_label=if];
4220 [label="304_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
1874 [label="305_ balances_re_ent8[msg.sender] = 0;\n1874-expression_statement-306-306", method="withdraw_balances_re_ent8()", type_label=expression_statement];
1882 [label="307_ function _transfer(address _from, address _to, uint _value) internal {\n    require(_to != address(0x0));\n    require(checkFrozenWallet(_from, _value));\n    balanceOf[_from] = balanceOf[_from].sub(_value);      \n    balanceOf[_to] = balanceOf[_to].add(_value);     \n    emit Transfer(_from, _to, _value);\n  }\n1882-function_definition-308-314", method="_transfer(address _from,address _to,uint _value)", type_label=function_definition];
1898 [label="308_ require(_to != address(0x0));\n1898-expression_statement-309-309", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1907 [label="309_ require(checkFrozenWallet(_from, _value));\n1907-expression_statement-310-310", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1917 [label="310_ balanceOf[_from] = balanceOf[_from].sub(_value);\n1917-expression_statement-311-311", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1930 [label="311_ balanceOf[_to] = balanceOf[_to].add(_value);\n1930-expression_statement-312-312", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1951 [label="314_ mapping(address => uint) redeemableEther_re_ent39;\n1951-new_variable-315-315", method="", type_label=new_variable];
1957 [label="315_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n1957-function_definition-316-321", method="claimReward_re_ent39()", type_label=function_definition];
1961 [label="316_ require(redeemableEther_re_ent39[msg.sender] > 0);\n1961-expression_statement-317-317", method="claimReward_re_ent39()", type_label=expression_statement];
1972 [label="317_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n1972-new_variable-318-318", method="claimReward_re_ent39()", type_label=new_variable];
1982 [label="318_ msg.sender.transfer(transferValue_re_ent39);\n1982-expression_statement-319-319", method="claimReward_re_ent39()", type_label=expression_statement];
1991 [label="319_ redeemableEther_re_ent39[msg.sender] = 0;\n1991-expression_statement-320-320", method="claimReward_re_ent39()", type_label=expression_statement];
1999 [label="321_ function checkFrozenWallet(address _from, uint _value) public view returns (bool) {\n    return(\n      _from==owner || \n      (!tokenFrozen && \n      (!frozenWallets[_from].isFrozen || \n       now>=frozenWallets[_from].frozenTime || \n       balanceOf[_from].sub(_value)>=frozenWallets[_from].frozenAmount))\n    );\n  }\n1999-function_definition-322-330", method="checkFrozenWallet(address _from,uint _value)", type_label=function_definition];
2016 [label="322_ return(\n      _from==owner || \n      (!tokenFrozen && \n      (!frozenWallets[_from].isFrozen || \n       now>=frozenWallets[_from].frozenTime || \n       balanceOf[_from].sub(_value)>=frozenWallets[_from].frozenAmount))\n    );\n2016-return-323-329", method="checkFrozenWallet(address _from,uint _value)", type_label=return];
2056 [label="330_ mapping(address => uint) balances_re_ent36;\n2056-new_variable-331-331", method="", type_label=new_variable];
2062 [label="331_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n2062-function_definition-332-335", method="withdraw_balances_re_ent36()", type_label=function_definition];
2066 [label="332_ if\n2066-if-333-334", method="withdraw_balances_re_ent36()", type_label=if];
4414 [label="332_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
2079 [label="333_ balances_re_ent36[msg.sender] = 0;\n2079-expression_statement-334-334", method="withdraw_balances_re_ent36()", type_label=expression_statement];
2087 [label="335_ function burn(uint256 _value) onlyOwner public returns (bool success) {\n    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);    \n    totalSupply = totalSupply.sub(_value);                       \n    emit Burn(msg.sender, _value);\n    return true;\n  }\n2087-function_definition-336-341", method="burn(uint256 _value)", type_label=function_definition];
2093 [label="335_ onlyOwner\n2093-expression_statement-336-336", method="burn(uint256 _value)", type_label=expression_statement];
2102 [label="336_ balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n2102-expression_statement-337-337", method="burn(uint256 _value)", type_label=expression_statement];
2119 [label="337_ totalSupply = totalSupply.sub(_value);\n2119-expression_statement-338-338", method="burn(uint256 _value)", type_label=expression_statement];
2136 [label="339_ return true;\n2136-return-340-340", method="burn(uint256 _value)", type_label=return];
2139 [label="341_ uint256 counter_re_ent35 =0;\n2139-new_variable-342-342", method="", type_label=new_variable];
2144 [label="342_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n2144-function_definition-343-349", method="callme_re_ent35()", type_label=function_definition];
2148 [label="343_ require(counter_re_ent35<=5);\n2148-expression_statement-344-344", method="callme_re_ent35()", type_label=expression_statement];
2155 [label="344_ if\n2155-if-345-347", method="callme_re_ent35()", type_label=if];
4503 [label="344_ end_if", method="callme_re_ent35()", type_label=end_if];
2170 [label="347_ counter_re_ent35 += 1;\n2170-expression_statement-348-348", method="callme_re_ent35()", type_label=expression_statement];
2174 [label="349_ function burnFrom(address _from, uint256 _value) public returns (bool success) {\n    balanceOf[_from] = balanceOf[_from].sub(_value);                           \n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);    \n    totalSupply = totalSupply.sub(_value);                               \n    emit Burn(_from, _value);\n    return true;\n  }\n2174-function_definition-350-356", method="burnFrom(address _from,uint256 _value)", type_label=function_definition];
2191 [label="350_ balanceOf[_from] = balanceOf[_from].sub(_value);\n2191-expression_statement-351-351", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
2204 [label="351_ allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n2204-expression_statement-352-352", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
2225 [label="352_ totalSupply = totalSupply.sub(_value);\n2225-expression_statement-353-353", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
2240 [label="354_ return true;\n2240-return-355-355", method="burnFrom(address _from,uint256 _value)", type_label=return];
2243 [label="356_ mapping(address => uint) userBalance_re_ent40;\n2243-new_variable-357-357", method="", type_label=new_variable];
2249 [label="357_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n2249-function_definition-358-364", method="withdrawBalance_re_ent40()", type_label=function_definition];
2253 [label="358_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n2253-new_variable-359-359", method="withdrawBalance_re_ent40()", type_label=new_variable];
2277 [label="359_ if\n2277-if-360-362", method="withdrawBalance_re_ent40()", type_label=if];
4625 [label="359_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
2283 [label="362_ userBalance_re_ent40[msg.sender] = 0;\n2283-expression_statement-363-363", method="withdrawBalance_re_ent40()", type_label=expression_statement];
2291 [label="364_ function freezeToken(bool freeze) onlyOwner public {\n    tokenFrozen = freeze;\n  }\n2291-function_definition-365-367", method="freezeToken(bool freeze)", type_label=function_definition];
2297 [label="364_ onlyOwner\n2297-expression_statement-365-365", method="freezeToken(bool freeze)", type_label=expression_statement];
2301 [label="365_ tokenFrozen = freeze;\n2301-expression_statement-366-366", method="freezeToken(bool freeze)", type_label=expression_statement];
2305 [label="367_ mapping(address => uint) userBalance_re_ent33;\n2305-new_variable-368-368", method="", type_label=new_variable];
2311 [label="368_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n2311-function_definition-369-375", method="withdrawBalance_re_ent33()", type_label=function_definition];
2315 [label="369_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n2315-new_variable-370-370", method="withdrawBalance_re_ent33()", type_label=new_variable];
2339 [label="370_ if\n2339-if-371-373", method="withdrawBalance_re_ent33()", type_label=if];
4687 [label="370_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
2345 [label="373_ userBalance_re_ent33[msg.sender] = 0;\n2345-expression_statement-374-374", method="withdrawBalance_re_ent33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 2378  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2378 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 2378  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
90 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
124 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
162 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
186 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
190 -> 207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
214 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
247 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 2599  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
296 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
305 -> 2653  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
328 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
359 -> 363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
374 -> 384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
441 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
452 -> 462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
462 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 520  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
518 -> 2866  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2866 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
520 -> 2866  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
528 -> 533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
543 -> 548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
548 -> 2896  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
568 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
578 -> 582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
589 -> 2937  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
608 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
625 -> 2973  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
636 -> 642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
650 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
671 -> 682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
682 -> 702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
702 -> 707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
715 -> 724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
730 -> 734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
734 -> 739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
739 -> 3087  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
779 -> 787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
798 -> 810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
842 -> 847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
847 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 3216  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
903 -> 907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
907 -> 911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
921 -> 929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
960 -> 976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
976 -> 985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 998  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1025 -> 1029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 1040  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1040 -> 1050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1050 -> 1059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1067 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1095 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1103 -> 1107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1107 -> 1114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1114 -> 3462  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1133 -> 1154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1154 -> 1175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1175 -> 1184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1184 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1187 -> 1191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1195 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1199 -> 3547  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1210 -> 1216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1224 -> 1241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1261 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1269 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1273 -> 1280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1280 -> 3628  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1299 -> 1320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1320 -> 1330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1330 -> 1338  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1330 -> 3678  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3678 -> 1358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1338 -> 1355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1355 -> 3678  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1355 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1358 -> 1362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1366 -> 1370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1370 -> 3718  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1381 -> 1387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1404 -> 1408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1412 -> 1416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1416 -> 3764  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1427 -> 1433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1441 -> 1447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1453 -> 1461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1461 -> 1472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1472 -> 1492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1492 -> 1497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1505 -> 1511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1511 -> 1515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1519 -> 1523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1523 -> 1541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1541 -> 3889  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1546 -> 1552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1560 -> 1565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1571 -> 1575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1575 -> 1586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1586 -> 1596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1596 -> 1605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1613 -> 1619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1625 -> 1629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1629 -> 3977  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1655 -> 1660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1660 -> 1678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1684 -> 1688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1688 -> 1712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1712 -> 4060  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1744 -> 1753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1753 -> 1793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1793 -> 1809  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1793 -> 4141  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4141 -> 1838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1806 -> 1793  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1809 -> 1823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1823 -> 1806  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1844 -> 1848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1848 -> 1872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1872 -> 1874  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1872 -> 4220  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4220 -> 1882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1874 -> 4220  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1882 -> 1898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1898 -> 1907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1907 -> 1917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1917 -> 1930  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1957 -> 1961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1961 -> 1972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1972 -> 1982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1982 -> 1991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1999 -> 2016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2016 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2062 -> 2066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2066 -> 2079  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2066 -> 4414  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4414 -> 2087  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2079 -> 4414  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2087 -> 2102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2102 -> 2119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2136 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2144 -> 2148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2148 -> 2155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2155 -> 4503  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2174 -> 2191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2191 -> 2204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2204 -> 2225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2240 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2249 -> 2253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2253 -> 2277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2277 -> 4625  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2291 -> 2301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2311 -> 2315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2315 -> 2339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2339 -> 4687  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
