digraph  {
13 [label="2_ mapping(address => uint) balances_re_ent21;\n13-new_variable-3-3", method="", type_label=new_variable];
19 [label="3_ function withdraw_balances_re_ent21 () public {\n       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent21[msg.sender] = 0;\n      }\n19-function_definition-4-8", method="withdraw_balances_re_ent21()", type_label=function_definition];
23 [label="4_ (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n23-new_variable-5-5", method="withdraw_balances_re_ent21()", type_label=new_variable];
47 [label="5_ if\n47-if-6-7", method="withdraw_balances_re_ent21()", type_label=if];
2172 [label="5_ end_if", method="withdraw_balances_re_ent21()", type_label=end_if];
49 [label="6_ balances_re_ent21[msg.sender] = 0;\n49-expression_statement-7-7", method="withdraw_balances_re_ent21()", type_label=expression_statement];
57 [label="8_ address public owner;\n57-new_variable-9-9", method="", type_label=new_variable];
62 [label="9_ mapping(address => uint) userBalance_re_ent40;\n62-new_variable-10-10", method="", type_label=new_variable];
68 [label="10_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n68-function_definition-11-17", method="withdrawBalance_re_ent40()", type_label=function_definition];
72 [label="11_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n72-new_variable-12-12", method="withdrawBalance_re_ent40()", type_label=new_variable];
96 [label="12_ if\n96-if-13-15", method="withdrawBalance_re_ent40()", type_label=if];
2221 [label="12_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
102 [label="15_ userBalance_re_ent40[msg.sender] = 0;\n102-expression_statement-16-16", method="withdrawBalance_re_ent40()", type_label=expression_statement];
122 [label="19_ owner = msg.sender;\n122-expression_statement-20-20", method="", type_label=expression_statement];
128 [label="21_ mapping(address => uint) balances_re_ent17;\n128-new_variable-22-22", method="", type_label=new_variable];
134 [label="22_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n134-function_definition-23-28", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
142 [label="23_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n142-expression_statement-24-24", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
153 [label="24_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n153-new_variable-25-25", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
173 [label="25_ require(success);\n173-expression_statement-26-26", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
178 [label="26_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n178-expression_statement-27-27", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
186 [label="28_ modifier onlyOwner() {\n        require(msg.sender == owner, \"only the owner can call this\");\n        _;\n    }\n186-expression_statement-29-32", method="", type_label=expression_statement];
189 [label="29_ require(msg.sender == owner, \"only the owner can call this\");\n189-expression_statement-30-30", method="", type_label=expression_statement];
201 [label="30_ _;\n201-expression_statement-31-31", method="", type_label=expression_statement];
203 [label="32_ function changeOwner(address _newOwner) external onlyOwner {\n        owner = _newOwner;\n        emit OwnerChanged(msg.sender, _newOwner);\n    }\n203-function_definition-33-36", method="changeOwner(address _newOwner)", type_label=function_definition];
210 [label="32_ onlyOwner\n210-expression_statement-33-33", method="changeOwner(address _newOwner)", type_label=expression_statement];
213 [label="33_ owner = _newOwner;\n213-expression_statement-34-34", method="changeOwner(address _newOwner)", type_label=expression_statement];
225 [label="36_ address payable lastPlayer_re_ent37;\n225-new_variable-37-37", method="", type_label=new_variable];
229 [label="37_ uint jackpot_re_ent37;\n229-new_variable-38-38", method="", type_label=new_variable];
233 [label="38_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n233-function_definition-39-44", method="buyTicket_re_ent37()", type_label=function_definition];
237 [label="39_ if\n237-if-40-41", method="buyTicket_re_ent37()", type_label=if];
2362 [label="39_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
248 [label="41_ lastPlayer_re_ent37 = msg.sender;\n248-expression_statement-42-42", method="buyTicket_re_ent37()", type_label=expression_statement];
254 [label="42_ jackpot_re_ent37    = address(this).balance;\n254-expression_statement-43-43", method="buyTicket_re_ent37()", type_label=expression_statement];
268 [label="46_ mapping(address => uint) userBalance_re_ent12;\n268-new_variable-47-47", method="", type_label=new_variable];
274 [label="47_ function withdrawBalance_re_ent12() public{\n        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent12[msg.sender] = 0;\n    }\n274-function_definition-48-53", method="withdrawBalance_re_ent12()", type_label=function_definition];
278 [label="48_ if\n278-if-49-51", method="withdrawBalance_re_ent12()", type_label=if];
2403 [label="48_ end_if", method="withdrawBalance_re_ent12()", type_label=end_if];
296 [label="51_ userBalance_re_ent12[msg.sender] = 0;\n296-expression_statement-52-52", method="withdrawBalance_re_ent12()", type_label=expression_statement];
304 [label="53_ bool public isActive = true;\n304-new_variable-54-54", method="", type_label=new_variable];
311 [label="54_ mapping(address => uint) userBalance_re_ent33;\n311-new_variable-55-55", method="", type_label=new_variable];
317 [label="55_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n317-function_definition-56-62", method="withdrawBalance_re_ent33()", type_label=function_definition];
321 [label="56_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n321-new_variable-57-57", method="withdrawBalance_re_ent33()", type_label=new_variable];
345 [label="57_ if\n345-if-58-60", method="withdrawBalance_re_ent33()", type_label=if];
2470 [label="57_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
351 [label="60_ userBalance_re_ent33[msg.sender] = 0;\n351-expression_statement-61-61", method="withdrawBalance_re_ent33()", type_label=expression_statement];
365 [label="63_ modifier onlyActive() {\n        require(isActive, \"contract is stopped\");\n        _;\n    }\n365-expression_statement-64-67", method="", type_label=expression_statement];
368 [label="64_ require(isActive, \"contract is stopped\");\n368-expression_statement-65-65", method="", type_label=expression_statement];
376 [label="65_ _;\n376-expression_statement-66-66", method="", type_label=expression_statement];
378 [label="67_ function setIsActive(bool _isActive) external onlyOwner {\n        if (_isActive == isActive) return;\n        isActive = _isActive;\n        emit IsActiveChanged(_isActive);\n    }\n378-function_definition-68-72", method="setIsActive(bool _isActive)", type_label=function_definition];
385 [label="67_ onlyOwner\n385-expression_statement-68-68", method="setIsActive(bool _isActive)", type_label=expression_statement];
388 [label="68_ if__isActive == isActive\n388-if-69-69", method="setIsActive(bool _isActive)", type_label=if];
2513 [label="68_ end_if", method="setIsActive(bool _isActive)", type_label=end_if];
392 [label="68_ return;\n392-return-69-69", method="setIsActive(bool _isActive)", type_label=return];
393 [label="69_ isActive = _isActive;\n393-expression_statement-70-70", method="setIsActive(bool _isActive)", type_label=expression_statement];
401 [label="72_ mapping(address => uint) balances_re_ent3;\n401-new_variable-73-73", method="", type_label=new_variable];
407 [label="73_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n407-function_definition-74-79", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
415 [label="74_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n415-expression_statement-75-75", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
426 [label="75_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n426-new_variable-76-76", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
446 [label="76_ require(success);\n446-expression_statement-77-77", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
451 [label="77_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n451-expression_statement-78-78", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
462 [label="81_ uint16 public ASSET_TYPE;\n462-new_variable-82-82", method="", type_label=new_variable];
467 [label="82_ function sendFundsToSwap(uint256 _amount)\n        public   returns(bool success);\n467-function_definition-83-84", method="sendFundsToSwap(uint256 _amount)", type_label=function_definition];
482 [label="86_ uint16 public ASSET_TYPE;\n482-new_variable-87-87", method="", type_label=new_variable];
487 [label="87_ function release(\n        address _pool,\n        address payable _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    )\n        external;\n487-function_definition-88-95", method="release(address _pool,address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
510 [label="95_ address payable lastPlayer_re_ent9;\n510-new_variable-96-96", method="", type_label=new_variable];
514 [label="96_ uint jackpot_re_ent9;\n514-new_variable-97-97", method="", type_label=new_variable];
518 [label="97_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n518-function_definition-98-104", method="buyTicket_re_ent9()", type_label=function_definition];
522 [label="98_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n522-new_variable-99-99", method="buyTicket_re_ent9()", type_label=new_variable];
540 [label="99_ if\n540-if-100-101", method="buyTicket_re_ent9()", type_label=if];
2665 [label="99_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
545 [label="101_ lastPlayer_re_ent9 = msg.sender;\n545-expression_statement-102-102", method="buyTicket_re_ent9()", type_label=expression_statement];
551 [label="102_ jackpot_re_ent9    = address(this).balance;\n551-expression_statement-103-103", method="buyTicket_re_ent9()", type_label=expression_statement];
559 [label="104_ function returnFunds(\n        address payable _pool,\n        address _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    )\n        external;\n559-function_definition-105-112", method="returnFunds(address payable _pool,address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
582 [label="112_ mapping(address => uint) redeemableEther_re_ent25;\n582-new_variable-113-113", method="", type_label=new_variable];
588 [label="113_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n588-function_definition-114-119", method="claimReward_re_ent25()", type_label=function_definition];
592 [label="114_ require(redeemableEther_re_ent25[msg.sender] > 0);\n592-expression_statement-115-115", method="claimReward_re_ent25()", type_label=expression_statement];
603 [label="115_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n603-new_variable-116-116", method="claimReward_re_ent25()", type_label=new_variable];
613 [label="116_ msg.sender.transfer(transferValue_re_ent25);\n613-expression_statement-117-117", method="claimReward_re_ent25()", type_label=expression_statement];
622 [label="117_ redeemableEther_re_ent25[msg.sender] = 0;\n622-expression_statement-118-118", method="claimReward_re_ent25()", type_label=expression_statement];
642 [label="121_ uint256 constant private MAX_SWAP_AMOUNT_LIMIT = 1 << 240;\n642-new_variable-122-122", method="", type_label=new_variable];
650 [label="122_ uint16 public ASSET_TYPE;\n650-new_variable-123-123", method="", type_label=new_variable];
655 [label="123_ mapping(address => uint) redeemableEther_re_ent11;\n655-new_variable-124-124", method="", type_label=new_variable];
661 [label="124_ function claimReward_re_ent11() public {        \n        require(redeemableEther_re_ent11[msg.sender] > 0);\n        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n        msg.sender.transfer(transferValue_re_ent11);    \n        redeemableEther_re_ent11[msg.sender] = 0;\n    }\n661-function_definition-125-130", method="claimReward_re_ent11()", type_label=function_definition];
665 [label="125_ require(redeemableEther_re_ent11[msg.sender] > 0);\n665-expression_statement-126-126", method="claimReward_re_ent11()", type_label=expression_statement];
676 [label="126_ uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n676-new_variable-127-127", method="claimReward_re_ent11()", type_label=new_variable];
686 [label="127_ msg.sender.transfer(transferValue_re_ent11);\n686-expression_statement-128-128", method="claimReward_re_ent11()", type_label=expression_statement];
695 [label="128_ redeemableEther_re_ent11[msg.sender] = 0;\n695-expression_statement-129-129", method="claimReward_re_ent11()", type_label=expression_statement];
703 [label="130_ address payable public swapsContract;\n703-new_variable-131-131", method="", type_label=new_variable];
708 [label="131_ mapping(address => uint) balances_re_ent1;\n708-new_variable-132-132", method="", type_label=new_variable];
714 [label="132_ function withdraw_balances_re_ent1 () public {\n       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent1[msg.sender] = 0;\n      }\n714-function_definition-133-137", method="withdraw_balances_re_ent1()", type_label=function_definition];
718 [label="133_ (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n718-new_variable-134-134", method="withdraw_balances_re_ent1()", type_label=new_variable];
742 [label="134_ if\n742-if-135-136", method="withdraw_balances_re_ent1()", type_label=if];
2867 [label="134_ end_if", method="withdraw_balances_re_ent1()", type_label=end_if];
744 [label="135_ balances_re_ent1[msg.sender] = 0;\n744-expression_statement-136-136", method="withdraw_balances_re_ent1()", type_label=expression_statement];
752 [label="137_ uint256 public minSwapAmount;\n752-new_variable-138-138", method="", type_label=new_variable];
757 [label="138_ bool not_called_re_ent41 = true;\n757-new_variable-139-139", method="", type_label=new_variable];
763 [label="139_ function bug_re_ent41() public{\n        require(not_called_re_ent41);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent41 = false;\n    }\n763-function_definition-140-146", method="bug_re_ent41()", type_label=function_definition];
767 [label="140_ require(not_called_re_ent41);\n767-expression_statement-141-141", method="bug_re_ent41()", type_label=expression_statement];
772 [label="141_ if\n772-if-142-144", method="bug_re_ent41()", type_label=if];
2897 [label="141_ end_if", method="bug_re_ent41()", type_label=end_if];
787 [label="144_ not_called_re_ent41 = false;\n787-expression_statement-145-145", method="bug_re_ent41()", type_label=expression_statement];
792 [label="146_ uint256 public maxSwapAmount;\n792-new_variable-147-147", method="", type_label=new_variable];
797 [label="147_ uint256 counter_re_ent42 =0;\n797-new_variable-148-148", method="", type_label=new_variable];
802 [label="148_ function callme_re_ent42() public{\n        require(counter_re_ent42<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent42 += 1;\n    }\n802-function_definition-149-155", method="callme_re_ent42()", type_label=function_definition];
806 [label="149_ require(counter_re_ent42<=5);\n806-expression_statement-150-150", method="callme_re_ent42()", type_label=expression_statement];
813 [label="150_ if\n813-if-151-153", method="callme_re_ent42()", type_label=if];
2938 [label="150_ end_if", method="callme_re_ent42()", type_label=end_if];
828 [label="153_ counter_re_ent42 += 1;\n828-expression_statement-154-154", method="callme_re_ent42()", type_label=expression_statement];
832 [label="155_ bytes32 public paymentDetailsHash;\n832-new_variable-156-156", method="", type_label=new_variable];
837 [label="156_ bool not_called_re_ent27 = true;\n837-new_variable-157-157", method="", type_label=new_variable];
843 [label="157_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n843-function_definition-158-164", method="bug_re_ent27()", type_label=function_definition];
847 [label="158_ require(not_called_re_ent27);\n847-expression_statement-159-159", method="bug_re_ent27()", type_label=expression_statement];
852 [label="159_ if\n852-if-160-162", method="bug_re_ent27()", type_label=if];
2977 [label="159_ end_if", method="bug_re_ent27()", type_label=end_if];
867 [label="162_ not_called_re_ent27 = false;\n867-expression_statement-163-163", method="bug_re_ent27()", type_label=expression_statement];
882 [label="165_ mapping(address => uint) balances_re_ent31;\n882-new_variable-166-166", method="", type_label=new_variable];
888 [label="166_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n888-function_definition-167-171", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
896 [label="167_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n896-expression_statement-168-168", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
907 [label="168_ require(msg.sender.send(_weiToWithdraw));\n907-expression_statement-169-169", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
919 [label="169_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n919-expression_statement-170-170", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
937 [label="172_ bool not_called_re_ent13 = true;\n937-new_variable-173-173", method="", type_label=new_variable];
943 [label="173_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n943-function_definition-174-181", method="bug_re_ent13()", type_label=function_definition];
947 [label="174_ require(not_called_re_ent13);\n947-expression_statement-175-175", method="bug_re_ent13()", type_label=expression_statement];
952 [label="175_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n952-new_variable-176-176", method="bug_re_ent13()", type_label=new_variable];
973 [label="176_ if\n973-if-177-179", method="bug_re_ent13()", type_label=if];
3098 [label="176_ end_if", method="bug_re_ent13()", type_label=end_if];
979 [label="179_ not_called_re_ent13 = false;\n979-expression_statement-180-180", method="bug_re_ent13()", type_label=expression_statement];
1015 [label="190_ validateLimits(_minSwapAmount, _maxSwapAmount)\n1015-expression_statement-191-191", method="", type_label=expression_statement];
1021 [label="191_ validateSwapsContract(_swapsContract, _assetType)\n1021-expression_statement-192-192", method="", type_label=expression_statement];
1028 [label="193_ swapsContract = _swapsContract;\n1028-expression_statement-194-194", method="", type_label=expression_statement];
1032 [label="194_ paymentDetailsHash = _paymentDetailsHash;\n1032-expression_statement-195-195", method="", type_label=expression_statement];
1036 [label="195_ minSwapAmount = _minSwapAmount;\n1036-expression_statement-196-196", method="", type_label=expression_statement];
1040 [label="196_ maxSwapAmount = _maxSwapAmount;\n1040-expression_statement-197-197", method="", type_label=expression_statement];
1044 [label="197_ ASSET_TYPE = _assetType;\n1044-expression_statement-198-198", method="", type_label=expression_statement];
1048 [label="199_ mapping(address => uint) userBalance_re_ent19;\n1048-new_variable-200-200", method="", type_label=new_variable];
1054 [label="200_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n1054-function_definition-201-206", method="withdrawBalance_re_ent19()", type_label=function_definition];
1058 [label="201_ if\n1058-if-202-204", method="withdrawBalance_re_ent19()", type_label=if];
3183 [label="201_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
1076 [label="204_ userBalance_re_ent19[msg.sender] = 0;\n1076-expression_statement-205-205", method="withdrawBalance_re_ent19()", type_label=expression_statement];
1084 [label="206_ function availableFunds() public view returns (uint256);\n1084-function_definition-207-207", method="availableFunds()", type_label=function_definition];
1092 [label="207_ mapping(address => uint) userBalance_re_ent26;\n1092-new_variable-208-208", method="", type_label=new_variable];
1098 [label="208_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n1098-function_definition-209-215", method="withdrawBalance_re_ent26()", type_label=function_definition];
1102 [label="209_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n1102-new_variable-210-210", method="withdrawBalance_re_ent26()", type_label=new_variable];
1126 [label="210_ if\n1126-if-211-213", method="withdrawBalance_re_ent26()", type_label=if];
3251 [label="210_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
1132 [label="213_ userBalance_re_ent26[msg.sender] = 0;\n1132-expression_statement-214-214", method="withdrawBalance_re_ent26()", type_label=expression_statement];
1140 [label="215_ function withdrawFunds(address payable _to, uint256 _amount)\n        public   returns (bool success);\n1140-function_definition-216-217", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=function_definition];
1156 [label="217_ bool not_called_re_ent20 = true;\n1156-new_variable-218-218", method="", type_label=new_variable];
1162 [label="218_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n1162-function_definition-219-225", method="bug_re_ent20()", type_label=function_definition];
1166 [label="219_ require(not_called_re_ent20);\n1166-expression_statement-220-220", method="bug_re_ent20()", type_label=expression_statement];
1171 [label="220_ if\n1171-if-221-223", method="bug_re_ent20()", type_label=if];
3296 [label="220_ end_if", method="bug_re_ent20()", type_label=end_if];
1186 [label="223_ not_called_re_ent20 = false;\n1186-expression_statement-224-224", method="bug_re_ent20()", type_label=expression_statement];
1191 [label="225_ function withdrawAllFunds(address payable _to) public onlyOwner returns (bool success) {\n        return withdrawFunds(_to, availableFunds());\n    }\n1191-function_definition-226-228", method="withdrawAllFunds(address payable _to)", type_label=function_definition];
1198 [label="225_ onlyOwner\n1198-expression_statement-226-226", method="withdrawAllFunds(address payable _to)", type_label=expression_statement];
1206 [label="226_ return withdrawFunds(_to, availableFunds());\n1206-return-227-227", method="withdrawAllFunds(address payable _to)", type_label=return];
1214 [label="228_ mapping(address => uint) redeemableEther_re_ent32;\n1214-new_variable-229-229", method="", type_label=new_variable];
1220 [label="229_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n1220-function_definition-230-235", method="claimReward_re_ent32()", type_label=function_definition];
1224 [label="230_ require(redeemableEther_re_ent32[msg.sender] > 0);\n1224-expression_statement-231-231", method="claimReward_re_ent32()", type_label=expression_statement];
1235 [label="231_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n1235-new_variable-232-232", method="claimReward_re_ent32()", type_label=new_variable];
1245 [label="232_ msg.sender.transfer(transferValue_re_ent32);\n1245-expression_statement-233-233", method="claimReward_re_ent32()", type_label=expression_statement];
1254 [label="233_ redeemableEther_re_ent32[msg.sender] = 0;\n1254-expression_statement-234-234", method="claimReward_re_ent32()", type_label=expression_statement];
1262 [label="235_ function setLimits(\n        uint256 _minAmount,\n        uint256 _maxAmount\n    ) public onlyOwner validateLimits(_minAmount, _maxAmount) {\n        minSwapAmount = _minAmount;\n        maxSwapAmount = _maxAmount;\n        emit LimitsChanged(_minAmount, _maxAmount);\n    }\n1262-function_definition-236-243", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=function_definition];
1273 [label="238_ onlyOwner\n1273-expression_statement-239-239", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
1275 [label="238_ validateLimits(_minAmount, _maxAmount)\n1275-expression_statement-239-239", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
1282 [label="239_ minSwapAmount = _minAmount;\n1282-expression_statement-240-240", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
1286 [label="240_ maxSwapAmount = _maxAmount;\n1286-expression_statement-241-241", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
1296 [label="243_ mapping(address => uint) balances_re_ent38;\n1296-new_variable-244-244", method="", type_label=new_variable];
1302 [label="244_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n1302-function_definition-245-249", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
1310 [label="245_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n1310-expression_statement-246-246", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1321 [label="246_ require(msg.sender.send(_weiToWithdraw));\n1321-expression_statement-247-247", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1333 [label="247_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n1333-expression_statement-248-248", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1341 [label="249_ function setSwapsContract(\n        address payable _swapsContract\n    ) public onlyOwner validateSwapsContract(_swapsContract, ASSET_TYPE) {\n        address oldSwapsContract = swapsContract;\n        swapsContract = _swapsContract;\n        emit SwapsContractChanged(oldSwapsContract, _swapsContract);\n    }\n1341-function_definition-250-256", method="setSwapsContract(address payable _swapsContract)", type_label=function_definition];
1348 [label="251_ onlyOwner\n1348-expression_statement-252-252", method="setSwapsContract(address payable _swapsContract)", type_label=expression_statement];
1350 [label="251_ validateSwapsContract(_swapsContract, ASSET_TYPE)\n1350-expression_statement-252-252", method="setSwapsContract(address payable _swapsContract)", type_label=expression_statement];
1357 [label="252_ address oldSwapsContract = swapsContract;\n1357-new_variable-253-253", method="setSwapsContract(address payable _swapsContract)", type_label=new_variable];
1363 [label="253_ swapsContract = _swapsContract;\n1363-expression_statement-254-254", method="setSwapsContract(address payable _swapsContract)", type_label=expression_statement];
1373 [label="256_ mapping(address => uint) redeemableEther_re_ent4;\n1373-new_variable-257-257", method="", type_label=new_variable];
1379 [label="257_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n1379-function_definition-258-263", method="claimReward_re_ent4()", type_label=function_definition];
1383 [label="258_ require(redeemableEther_re_ent4[msg.sender] > 0);\n1383-expression_statement-259-259", method="claimReward_re_ent4()", type_label=expression_statement];
1394 [label="259_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n1394-new_variable-260-260", method="claimReward_re_ent4()", type_label=new_variable];
1404 [label="260_ msg.sender.transfer(transferValue_re_ent4);\n1404-expression_statement-261-261", method="claimReward_re_ent4()", type_label=expression_statement];
1413 [label="261_ redeemableEther_re_ent4[msg.sender] = 0;\n1413-expression_statement-262-262", method="claimReward_re_ent4()", type_label=expression_statement];
1421 [label="263_ function sendFundsToSwap(uint256 _amount)\n        public   returns(bool success);\n1421-function_definition-264-265", method="sendFundsToSwap(uint256 _amount)", type_label=function_definition];
1433 [label="265_ function releaseSwap(\n        address payable _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    ) external onlyOwner {\n        RampInstantEscrowsPoolInterface(swapsContract).release(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n    }\n1433-function_definition-266-279", method="releaseSwap(address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
1452 [label="270_ onlyOwner\n1452-expression_statement-271-271", method="releaseSwap(address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1455 [label="271_ RampInstantEscrowsPoolInterface(swapsContract).release(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n1455-expression_statement-272-278", method="releaseSwap(address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1475 [label="279_ uint256 counter_re_ent7 =0;\n1475-new_variable-280-280", method="", type_label=new_variable];
1480 [label="280_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n1480-function_definition-281-287", method="callme_re_ent7()", type_label=function_definition];
1484 [label="281_ require(counter_re_ent7<=5);\n1484-expression_statement-282-282", method="callme_re_ent7()", type_label=expression_statement];
1491 [label="282_ if\n1491-if-283-285", method="callme_re_ent7()", type_label=if];
3616 [label="282_ end_if", method="callme_re_ent7()", type_label=end_if];
1506 [label="285_ counter_re_ent7 += 1;\n1506-expression_statement-286-286", method="callme_re_ent7()", type_label=expression_statement];
1510 [label="287_ function returnSwap(\n        address _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    ) external onlyOwner {\n        RampInstantEscrowsPoolInterface(swapsContract).returnFunds(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n    }\n1510-function_definition-288-301", method="returnSwap(address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
1529 [label="292_ onlyOwner\n1529-expression_statement-293-293", method="returnSwap(address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1532 [label="293_ RampInstantEscrowsPoolInterface(swapsContract).returnFunds(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n1532-expression_statement-294-300", method="returnSwap(address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1552 [label="301_ address payable lastPlayer_re_ent23;\n1552-new_variable-302-302", method="", type_label=new_variable];
1556 [label="302_ uint jackpot_re_ent23;\n1556-new_variable-303-303", method="", type_label=new_variable];
1560 [label="303_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n1560-function_definition-304-309", method="buyTicket_re_ent23()", type_label=function_definition];
1564 [label="304_ if\n1564-if-305-306", method="buyTicket_re_ent23()", type_label=if];
3689 [label="304_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
1575 [label="306_ lastPlayer_re_ent23 = msg.sender;\n1575-expression_statement-307-307", method="buyTicket_re_ent23()", type_label=expression_statement];
1581 [label="307_ jackpot_re_ent23    = address(this).balance;\n1581-expression_statement-308-308", method="buyTicket_re_ent23()", type_label=expression_statement];
1597 [label="312_ uint256 counter_re_ent14 =0;\n1597-new_variable-313-313", method="", type_label=new_variable];
1602 [label="313_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n1602-function_definition-314-320", method="callme_re_ent14()", type_label=function_definition];
1606 [label="314_ require(counter_re_ent14<=5);\n1606-expression_statement-315-315", method="callme_re_ent14()", type_label=expression_statement];
1613 [label="315_ if\n1613-if-316-318", method="callme_re_ent14()", type_label=if];
3738 [label="315_ end_if", method="callme_re_ent14()", type_label=end_if];
1628 [label="318_ counter_re_ent14 += 1;\n1628-expression_statement-319-319", method="callme_re_ent14()", type_label=expression_statement];
1632 [label="320_ modifier onlySwapsContract() {\n        require(msg.sender == swapsContract, \"only the swaps contract can call this\");\n        _;\n    }\n1632-expression_statement-321-324", method="", type_label=expression_statement];
1635 [label="321_ require(msg.sender == swapsContract, \"only the swaps contract can call this\");\n1635-expression_statement-322-322", method="", type_label=expression_statement];
1647 [label="322_ _;\n1647-expression_statement-323-323", method="", type_label=expression_statement];
1649 [label="324_ modifier isWithinLimits(uint256 _amount) {\n        require(_amount >= minSwapAmount && _amount <= maxSwapAmount, \"amount outside swap limits\");\n        _;\n    }\n1649-expression_statement-325-328", method="", type_label=expression_statement];
1656 [label="325_ require(_amount >= minSwapAmount && _amount <= maxSwapAmount, \"amount outside swap limits\");\n1656-expression_statement-326-326", method="", type_label=expression_statement];
1670 [label="326_ _;\n1670-expression_statement-327-327", method="", type_label=expression_statement];
1672 [label="328_ modifier validateLimits(uint256 _minAmount, uint256 _maxAmount) {\n        require(_minAmount <= _maxAmount, \"min limit over max limit\");\n        require(_maxAmount <= MAX_SWAP_AMOUNT_LIMIT, \"maxAmount too high\");\n        _;\n    }\n1672-expression_statement-329-333", method="", type_label=expression_statement];
1683 [label="329_ require(_minAmount <= _maxAmount, \"min limit over max limit\");\n1683-expression_statement-330-330", method="", type_label=expression_statement];
1693 [label="330_ require(_maxAmount <= MAX_SWAP_AMOUNT_LIMIT, \"maxAmount too high\");\n1693-expression_statement-331-331", method="", type_label=expression_statement];
1703 [label="331_ _;\n1703-expression_statement-332-332", method="", type_label=expression_statement];
1705 [label="333_ modifier validateSwapsContract(address payable _swapsContract, uint16 _assetType) {\n        require(_swapsContract != address(0), \"null swaps contract address\");\n        require(\n            RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE() == _assetType,\n            \"pool asset type doesn't match swap contract\"\n        );\n        _;\n    }\n1705-expression_statement-334-341", method="", type_label=expression_statement];
1716 [label="334_ require(_swapsContract != address(0), \"null swaps contract address\");\n1716-expression_statement-335-335", method="", type_label=expression_statement];
1728 [label="335_ require(\n            RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE() == _assetType,\n            \"pool asset type doesn't match swap contract\"\n        );\n1728-expression_statement-336-339", method="", type_label=expression_statement];
1744 [label="339_ _;\n1744-expression_statement-340-340", method="", type_label=expression_statement];
1752 [label="343_ address payable lastPlayer_re_ent2;\n1752-new_variable-344-344", method="", type_label=new_variable];
1756 [label="344_ uint jackpot_re_ent2;\n1756-new_variable-345-345", method="", type_label=new_variable];
1760 [label="345_ function buyTicket_re_ent2() public{\n	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))\n        revert();\n      lastPlayer_re_ent2 = msg.sender;\n      jackpot_re_ent2    = address(this).balance;\n    }\n1760-function_definition-346-351", method="buyTicket_re_ent2()", type_label=function_definition];
1764 [label="346_ if\n1764-if-347-348", method="buyTicket_re_ent2()", type_label=if];
3889 [label="346_ end_if", method="buyTicket_re_ent2()", type_label=end_if];
1775 [label="348_ lastPlayer_re_ent2 = msg.sender;\n1775-expression_statement-349-349", method="buyTicket_re_ent2()", type_label=expression_statement];
1781 [label="349_ jackpot_re_ent2    = address(this).balance;\n1781-expression_statement-350-350", method="buyTicket_re_ent2()", type_label=expression_statement];
1789 [label="351_ uint16 internal constant ETH_TYPE_ID = 1;\n1789-new_variable-352-352", method="", type_label=new_variable];
1812 [label="359_ RampInstantPool(\n            _swapsContract, _minSwapAmount, _maxSwapAmount, _paymentDetailsHash, ETH_TYPE_ID\n        )\n1812-expression_statement-360-362", method="", type_label=expression_statement];
1825 [label="363_ address payable lastPlayer_re_ent30;\n1825-new_variable-364-364", method="", type_label=new_variable];
1829 [label="364_ uint jackpot_re_ent30;\n1829-new_variable-365-365", method="", type_label=new_variable];
1833 [label="365_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n1833-function_definition-366-371", method="buyTicket_re_ent30()", type_label=function_definition];
1837 [label="366_ if\n1837-if-367-368", method="buyTicket_re_ent30()", type_label=if];
3962 [label="366_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
1848 [label="368_ lastPlayer_re_ent30 = msg.sender;\n1848-expression_statement-369-369", method="buyTicket_re_ent30()", type_label=expression_statement];
1854 [label="369_ jackpot_re_ent30    = address(this).balance;\n1854-expression_statement-370-370", method="buyTicket_re_ent30()", type_label=expression_statement];
1862 [label="371_ function availableFunds() public view returns(uint256) {\n        return address(this).balance;\n    }\n1862-function_definition-372-374", method="availableFunds()", type_label=function_definition];
1871 [label="372_ return address(this).balance;\n1871-return-373-373", method="availableFunds()", type_label=return];
1877 [label="374_ mapping(address => uint) balances_re_ent8;\n1877-new_variable-375-375", method="", type_label=new_variable];
1883 [label="375_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n1883-function_definition-376-380", method="withdraw_balances_re_ent8()", type_label=function_definition];
1887 [label="376_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n1887-new_variable-377-377", method="withdraw_balances_re_ent8()", type_label=new_variable];
1911 [label="377_ if\n1911-if-378-379", method="withdraw_balances_re_ent8()", type_label=if];
4036 [label="377_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
1913 [label="378_ balances_re_ent8[msg.sender] = 0;\n1913-expression_statement-379-379", method="withdraw_balances_re_ent8()", type_label=expression_statement];
1921 [label="380_ function withdrawFunds(\n        address payable _to,\n        uint256 _amount\n    ) public onlyOwner returns (bool success) {\n        _to.transfer(_amount);   \n        return true;\n    }\n1921-function_definition-381-387", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=function_definition];
1932 [label="383_ onlyOwner\n1932-expression_statement-384-384", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=expression_statement];
1940 [label="384_ _to.transfer(_amount);\n1940-expression_statement-385-385", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=expression_statement];
1947 [label="385_ return true;\n1947-return-386-386", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=return];
1950 [label="387_ mapping(address => uint) redeemableEther_re_ent39;\n1950-new_variable-388-388", method="", type_label=new_variable];
1956 [label="388_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n1956-function_definition-389-394", method="claimReward_re_ent39()", type_label=function_definition];
1960 [label="389_ require(redeemableEther_re_ent39[msg.sender] > 0);\n1960-expression_statement-390-390", method="claimReward_re_ent39()", type_label=expression_statement];
1971 [label="390_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n1971-new_variable-391-391", method="claimReward_re_ent39()", type_label=new_variable];
1981 [label="391_ msg.sender.transfer(transferValue_re_ent39);\n1981-expression_statement-392-392", method="claimReward_re_ent39()", type_label=expression_statement];
1990 [label="392_ redeemableEther_re_ent39[msg.sender] = 0;\n1990-expression_statement-393-393", method="claimReward_re_ent39()", type_label=expression_statement];
1998 [label="394_ function sendFundsToSwap(\n        uint256 _amount\n    ) public onlyActive onlySwapsContract isWithinLimits(_amount) returns(bool success) {\n        swapsContract.transfer(_amount);   \n        return true;\n    }\n1998-function_definition-395-400", method="sendFundsToSwap(uint256 _amount)", type_label=function_definition];
2005 [label="396_ onlyActive\n2005-expression_statement-397-397", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
2007 [label="396_ onlySwapsContract\n2007-expression_statement-397-397", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
2009 [label="396_ isWithinLimits(_amount)\n2009-expression_statement-397-397", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
2019 [label="397_ swapsContract.transfer(_amount);\n2019-expression_statement-398-398", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
2026 [label="398_ return true;\n2026-return-399-399", method="sendFundsToSwap(uint256 _amount)", type_label=return];
2029 [label="400_ mapping(address => uint) balances_re_ent36;\n2029-new_variable-401-401", method="", type_label=new_variable];
2035 [label="401_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n2035-function_definition-402-405", method="withdraw_balances_re_ent36()", type_label=function_definition];
2039 [label="402_ if\n2039-if-403-404", method="withdraw_balances_re_ent36()", type_label=if];
4164 [label="402_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
2052 [label="403_ balances_re_ent36[msg.sender] = 0;\n2052-expression_statement-404-404", method="withdraw_balances_re_ent36()", type_label=expression_statement];
2064 [label="406_ require(msg.data.length == 0, \"invalid pool function called\");\n2064-expression_statement-407-407", method="", type_label=expression_statement];
2078 [label="407_ if_msg.sender != swapsContract\n2078-if-408-410", method="", type_label=if];
4203 [label="407_ end_if", method="", type_label=end_if];
2095 [label="411_ uint256 counter_re_ent35 =0;\n2095-new_variable-412-412", method="", type_label=new_variable];
2100 [label="412_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n2100-function_definition-413-419", method="callme_re_ent35()", type_label=function_definition];
2104 [label="413_ require(counter_re_ent35<=5);\n2104-expression_statement-414-414", method="callme_re_ent35()", type_label=expression_statement];
2111 [label="414_ if\n2111-if-415-417", method="callme_re_ent35()", type_label=if];
4236 [label="414_ end_if", method="callme_re_ent35()", type_label=end_if];
2126 [label="417_ counter_re_ent35 += 1;\n2126-expression_statement-418-418", method="callme_re_ent35()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
2060;
19 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
23 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 49  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
47 -> 2172  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2172 -> 57  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
49 -> 2172  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
57 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 96  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
96 -> 2221  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
134 -> 142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
142 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
153 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
203 -> 213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
237 -> 2362  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
248 -> 254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
274 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 2403  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
304 -> 311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
317 -> 321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 2470  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
368 -> 376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
388 -> 392  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
388 -> 2513  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2513 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
392 -> 2513  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
392 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
407 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
426 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
522 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 2665  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
545 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
603 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
642 -> 650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
650 -> 655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
661 -> 665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
676 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
686 -> 695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
714 -> 718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
718 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 744  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
742 -> 2867  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2867 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
744 -> 2867  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
752 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
767 -> 772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
772 -> 2897  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
792 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
806 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
813 -> 2938  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
832 -> 837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
843 -> 847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
847 -> 852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
852 -> 2977  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
888 -> 896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
896 -> 907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
907 -> 919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
947 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
952 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
973 -> 3098  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1015 -> 1021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1028 -> 1032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1032 -> 1036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1036 -> 1040  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1040 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1058  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1058 -> 3183  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1098 -> 1102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1102 -> 1126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1126 -> 3251  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1162 -> 1166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1166 -> 1171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1171 -> 3296  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1191 -> 1206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1206 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1220 -> 1224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1224 -> 1235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1235 -> 1245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1245 -> 1254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1262 -> 1282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1273 -> 1275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1282 -> 1286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1302 -> 1310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1310 -> 1321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1321 -> 1333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1341 -> 1357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1348 -> 1350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1357 -> 1363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1379 -> 1383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1383 -> 1394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1394 -> 1404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1404 -> 1413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1433 -> 1455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1480 -> 1484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1484 -> 1491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1491 -> 3616  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1510 -> 1532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1552 -> 1556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1560 -> 1564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1564 -> 3689  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1575 -> 1581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1602 -> 1606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1606 -> 1613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1613 -> 3738  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1632 -> 1649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1635 -> 1647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1649 -> 1672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1656 -> 1670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1672 -> 1705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1683 -> 1693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1693 -> 1703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1716 -> 1728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1728 -> 1744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1752 -> 1756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1760 -> 1764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1764 -> 3889  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1775 -> 1781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1825 -> 1829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1833 -> 1837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1837 -> 3962  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1848 -> 1854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1862 -> 1871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1871 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1883 -> 1887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1887 -> 1911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1911 -> 1913  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1911 -> 4036  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4036 -> 1921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1913 -> 4036  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1921 -> 1940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1940 -> 1947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1947 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1956 -> 1960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1960 -> 1971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1971 -> 1981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1981 -> 1990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1998 -> 2019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2005 -> 2007  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2007 -> 2009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2019 -> 2026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2026 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2035 -> 2039  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2039 -> 2052  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2039 -> 4164  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4164 -> 2060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2052 -> 4164  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2064 -> 2078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2078 -> 4203  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2100 -> 2104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2104 -> 2111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2111 -> 4236  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
