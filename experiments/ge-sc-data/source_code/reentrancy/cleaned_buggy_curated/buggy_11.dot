digraph  {
13 [label="2_ function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n13-function_definition-3-6", method="add(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a + b;\n31-expression_statement-4-4", method="add(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(c >= a);\n37-expression_statement-5-5", method="add(uint a,uint b)", type_label=expression_statement];
44 [label="6_ function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n44-function_definition-7-10", method="sub(uint a,uint b)", type_label=function_definition];
62 [label="7_ require(b <= a);\n62-expression_statement-8-8", method="sub(uint a,uint b)", type_label=expression_statement];
69 [label="8_ c = a - b;\n69-expression_statement-9-9", method="sub(uint a,uint b)", type_label=expression_statement];
75 [label="10_ function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n75-function_definition-11-14", method="mul(uint a,uint b)", type_label=function_definition];
93 [label="11_ c = a * b;\n93-expression_statement-12-12", method="mul(uint a,uint b)", type_label=expression_statement];
99 [label="12_ require(a == 0 || c / a == b);\n99-expression_statement-13-13", method="mul(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n112-function_definition-15-18", method="div(uint a,uint b)", type_label=function_definition];
130 [label="15_ require(b > 0);\n130-expression_statement-16-16", method="div(uint a,uint b)", type_label=expression_statement];
137 [label="16_ c = a / b;\n137-expression_statement-17-17", method="div(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function totalSupply() public view returns (uint);\n146-function_definition-21-21", method="totalSupply()", type_label=function_definition];
154 [label="21_ address payable lastPlayer_re_ent37;\n154-new_variable-22-22", method="", type_label=new_variable];
158 [label="22_ uint jackpot_re_ent37;\n158-new_variable-23-23", method="", type_label=new_variable];
162 [label="23_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n162-function_definition-24-29", method="buyTicket_re_ent37()", type_label=function_definition];
166 [label="24_ if\n166-if-25-26", method="buyTicket_re_ent37()", type_label=if];
2235 [label="24_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
177 [label="26_ lastPlayer_re_ent37 = msg.sender;\n177-expression_statement-27-27", method="buyTicket_re_ent37()", type_label=expression_statement];
183 [label="27_ jackpot_re_ent37    = address(this).balance;\n183-expression_statement-28-28", method="buyTicket_re_ent37()", type_label=expression_statement];
191 [label="29_ function balanceOf(address tokenOwner) public view returns (uint balance);\n191-function_definition-30-30", method="balanceOf(address tokenOwner)", type_label=function_definition];
204 [label="30_ mapping(address => uint) balances_re_ent3;\n204-new_variable-31-31", method="", type_label=new_variable];
210 [label="31_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n210-function_definition-32-37", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
218 [label="32_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n218-expression_statement-33-33", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
229 [label="33_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n229-new_variable-34-34", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
249 [label="34_ require(success);\n249-expression_statement-35-35", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
254 [label="35_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n254-expression_statement-36-36", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
262 [label="37_ function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n262-function_definition-38-38", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
279 [label="38_ address payable lastPlayer_re_ent9;\n279-new_variable-39-39", method="", type_label=new_variable];
283 [label="39_ uint jackpot_re_ent9;\n283-new_variable-40-40", method="", type_label=new_variable];
287 [label="40_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n287-function_definition-41-47", method="buyTicket_re_ent9()", type_label=function_definition];
291 [label="41_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n291-new_variable-42-42", method="buyTicket_re_ent9()", type_label=new_variable];
309 [label="42_ if\n309-if-43-44", method="buyTicket_re_ent9()", type_label=if];
2378 [label="42_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
314 [label="44_ lastPlayer_re_ent9 = msg.sender;\n314-expression_statement-45-45", method="buyTicket_re_ent9()", type_label=expression_statement];
320 [label="45_ jackpot_re_ent9    = address(this).balance;\n320-expression_statement-46-46", method="buyTicket_re_ent9()", type_label=expression_statement];
328 [label="47_ function transfer(address to, uint tokens) public returns (bool success);\n328-function_definition-48-48", method="transfer(address to,uint tokens)", type_label=function_definition];
344 [label="48_ mapping(address => uint) redeemableEther_re_ent25;\n344-new_variable-49-49", method="", type_label=new_variable];
350 [label="49_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n350-function_definition-50-55", method="claimReward_re_ent25()", type_label=function_definition];
354 [label="50_ require(redeemableEther_re_ent25[msg.sender] > 0);\n354-expression_statement-51-51", method="claimReward_re_ent25()", type_label=expression_statement];
365 [label="51_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n365-new_variable-52-52", method="claimReward_re_ent25()", type_label=new_variable];
375 [label="52_ msg.sender.transfer(transferValue_re_ent25);\n375-expression_statement-53-53", method="claimReward_re_ent25()", type_label=expression_statement];
384 [label="53_ redeemableEther_re_ent25[msg.sender] = 0;\n384-expression_statement-54-54", method="claimReward_re_ent25()", type_label=expression_statement];
392 [label="55_ function approve(address spender, uint tokens) public returns (bool success);\n392-function_definition-56-56", method="approve(address spender,uint tokens)", type_label=function_definition];
408 [label="56_ mapping(address => uint) userBalance_re_ent19;\n408-new_variable-57-57", method="", type_label=new_variable];
414 [label="57_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n414-function_definition-58-63", method="withdrawBalance_re_ent19()", type_label=function_definition];
418 [label="58_ if\n418-if-59-61", method="withdrawBalance_re_ent19()", type_label=if];
2487 [label="58_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
436 [label="61_ userBalance_re_ent19[msg.sender] = 0;\n436-expression_statement-62-62", method="withdrawBalance_re_ent19()", type_label=expression_statement];
444 [label="63_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n444-function_definition-64-64", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
464 [label="64_ mapping(address => uint) userBalance_re_ent26;\n464-new_variable-65-65", method="", type_label=new_variable];
470 [label="65_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n470-function_definition-66-72", method="withdrawBalance_re_ent26()", type_label=function_definition];
474 [label="66_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n474-new_variable-67-67", method="withdrawBalance_re_ent26()", type_label=new_variable];
498 [label="67_ if\n498-if-68-70", method="withdrawBalance_re_ent26()", type_label=if];
2567 [label="67_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
504 [label="70_ userBalance_re_ent26[msg.sender] = 0;\n504-expression_statement-71-71", method="withdrawBalance_re_ent26()", type_label=expression_statement];
512 [label="72_ bool not_called_re_ent27 = true;\n512-new_variable-73-73", method="", type_label=new_variable];
518 [label="73_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n518-function_definition-74-80", method="bug_re_ent27()", type_label=function_definition];
522 [label="74_ require(not_called_re_ent27);\n522-expression_statement-75-75", method="bug_re_ent27()", type_label=expression_statement];
527 [label="75_ if\n527-if-76-78", method="bug_re_ent27()", type_label=if];
2596 [label="75_ end_if", method="bug_re_ent27()", type_label=end_if];
542 [label="78_ not_called_re_ent27 = false;\n542-expression_statement-79-79", method="bug_re_ent27()", type_label=expression_statement];
561 [label="81_ mapping(address => uint) balances_re_ent31;\n561-new_variable-82-82", method="", type_label=new_variable];
567 [label="82_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n567-function_definition-83-87", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
575 [label="83_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n575-expression_statement-84-84", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
586 [label="84_ require(msg.sender.send(_weiToWithdraw));\n586-expression_statement-85-85", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
598 [label="85_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n598-expression_statement-86-86", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
623 [label="90_ function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n623-function_definition-91-91", method="receiveApproval(address from,uint256 tokens,address token,bytes memory data)", type_label=function_definition];
642 [label="91_ bool not_called_re_ent20 = true;\n642-new_variable-92-92", method="", type_label=new_variable];
648 [label="92_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n648-function_definition-93-99", method="bug_re_ent20()", type_label=function_definition];
652 [label="93_ require(not_called_re_ent20);\n652-expression_statement-94-94", method="bug_re_ent20()", type_label=expression_statement];
657 [label="94_ if\n657-if-95-97", method="bug_re_ent20()", type_label=if];
2726 [label="94_ end_if", method="bug_re_ent20()", type_label=end_if];
672 [label="97_ not_called_re_ent20 = false;\n672-expression_statement-98-98", method="bug_re_ent20()", type_label=expression_statement];
680 [label="101_ mapping(address => uint) userBalance_re_ent12;\n680-new_variable-102-102", method="", type_label=new_variable];
686 [label="102_ function withdrawBalance_re_ent12() public{\n        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent12[msg.sender] = 0;\n    }\n686-function_definition-103-108", method="withdrawBalance_re_ent12()", type_label=function_definition];
690 [label="103_ if\n690-if-104-106", method="withdrawBalance_re_ent12()", type_label=if];
2759 [label="103_ end_if", method="withdrawBalance_re_ent12()", type_label=end_if];
708 [label="106_ userBalance_re_ent12[msg.sender] = 0;\n708-expression_statement-107-107", method="withdrawBalance_re_ent12()", type_label=expression_statement];
716 [label="108_ address public owner;\n716-new_variable-109-109", method="", type_label=new_variable];
721 [label="109_ mapping(address => uint) redeemableEther_re_ent11;\n721-new_variable-110-110", method="", type_label=new_variable];
727 [label="110_ function claimReward_re_ent11() public {        \n        require(redeemableEther_re_ent11[msg.sender] > 0);\n        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n        msg.sender.transfer(transferValue_re_ent11);    \n        redeemableEther_re_ent11[msg.sender] = 0;\n    }\n727-function_definition-111-116", method="claimReward_re_ent11()", type_label=function_definition];
731 [label="111_ require(redeemableEther_re_ent11[msg.sender] > 0);\n731-expression_statement-112-112", method="claimReward_re_ent11()", type_label=expression_statement];
742 [label="112_ uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n742-new_variable-113-113", method="claimReward_re_ent11()", type_label=new_variable];
752 [label="113_ msg.sender.transfer(transferValue_re_ent11);\n752-expression_statement-114-114", method="claimReward_re_ent11()", type_label=expression_statement];
761 [label="114_ redeemableEther_re_ent11[msg.sender] = 0;\n761-expression_statement-115-115", method="claimReward_re_ent11()", type_label=expression_statement];
769 [label="116_ address public newOwner;\n769-new_variable-117-117", method="", type_label=new_variable];
774 [label="117_ bool not_called_re_ent13 = true;\n774-new_variable-118-118", method="", type_label=new_variable];
780 [label="118_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n780-function_definition-119-126", method="bug_re_ent13()", type_label=function_definition];
784 [label="119_ require(not_called_re_ent13);\n784-expression_statement-120-120", method="bug_re_ent13()", type_label=expression_statement];
789 [label="120_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n789-new_variable-121-121", method="bug_re_ent13()", type_label=new_variable];
810 [label="121_ if\n810-if-122-124", method="bug_re_ent13()", type_label=if];
2879 [label="121_ end_if", method="bug_re_ent13()", type_label=end_if];
816 [label="124_ not_called_re_ent13 = false;\n816-expression_statement-125-125", method="bug_re_ent13()", type_label=expression_statement];
833 [label="128_ owner = msg.sender;\n833-expression_statement-129-129", method="", type_label=expression_statement];
839 [label="130_ mapping(address => uint) redeemableEther_re_ent32;\n839-new_variable-131-131", method="", type_label=new_variable];
845 [label="131_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n845-function_definition-132-137", method="claimReward_re_ent32()", type_label=function_definition];
849 [label="132_ require(redeemableEther_re_ent32[msg.sender] > 0);\n849-expression_statement-133-133", method="claimReward_re_ent32()", type_label=expression_statement];
860 [label="133_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n860-new_variable-134-134", method="claimReward_re_ent32()", type_label=new_variable];
870 [label="134_ msg.sender.transfer(transferValue_re_ent32);\n870-expression_statement-135-135", method="claimReward_re_ent32()", type_label=expression_statement];
879 [label="135_ redeemableEther_re_ent32[msg.sender] = 0;\n879-expression_statement-136-136", method="claimReward_re_ent32()", type_label=expression_statement];
887 [label="137_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n887-expression_statement-138-141", method="", type_label=expression_statement];
890 [label="138_ require(msg.sender == owner);\n890-expression_statement-139-139", method="", type_label=expression_statement];
899 [label="139_ _;\n899-expression_statement-140-140", method="", type_label=expression_statement];
901 [label="141_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n901-function_definition-142-144", method="transferOwnership(address _newOwner)", type_label=function_definition];
908 [label="141_ onlyOwner\n908-expression_statement-142-142", method="transferOwnership(address _newOwner)", type_label=expression_statement];
911 [label="142_ newOwner = _newOwner;\n911-expression_statement-143-143", method="transferOwnership(address _newOwner)", type_label=expression_statement];
915 [label="144_ mapping(address => uint) balances_re_ent38;\n915-new_variable-145-145", method="", type_label=new_variable];
921 [label="145_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n921-function_definition-146-150", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
929 [label="146_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n929-expression_statement-147-147", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
940 [label="147_ require(msg.sender.send(_weiToWithdraw));\n940-expression_statement-148-148", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
952 [label="148_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n952-expression_statement-149-149", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
960 [label="150_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n960-function_definition-151-156", method="acceptOwnership()", type_label=function_definition];
964 [label="151_ require(msg.sender == newOwner);\n964-expression_statement-152-152", method="acceptOwnership()", type_label=expression_statement];
979 [label="153_ owner = newOwner;\n979-expression_statement-154-154", method="acceptOwnership()", type_label=expression_statement];
983 [label="154_ newOwner = address(0);\n983-expression_statement-155-155", method="acceptOwnership()", type_label=expression_statement];
989 [label="156_ mapping(address => uint) redeemableEther_re_ent4;\n989-new_variable-157-157", method="", type_label=new_variable];
995 [label="157_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n995-function_definition-158-163", method="claimReward_re_ent4()", type_label=function_definition];
999 [label="158_ require(redeemableEther_re_ent4[msg.sender] > 0);\n999-expression_statement-159-159", method="claimReward_re_ent4()", type_label=expression_statement];
1010 [label="159_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n1010-new_variable-160-160", method="claimReward_re_ent4()", type_label=new_variable];
1020 [label="160_ msg.sender.transfer(transferValue_re_ent4);\n1020-expression_statement-161-161", method="claimReward_re_ent4()", type_label=expression_statement];
1029 [label="161_ redeemableEther_re_ent4[msg.sender] = 0;\n1029-expression_statement-162-162", method="claimReward_re_ent4()", type_label=expression_statement];
1051 [label="166_ mapping(address => uint) balances_re_ent1;\n1051-new_variable-167-167", method="", type_label=new_variable];
1057 [label="167_ function withdraw_balances_re_ent1 () public {\n       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent1[msg.sender] = 0;\n      }\n1057-function_definition-168-172", method="withdraw_balances_re_ent1()", type_label=function_definition];
1061 [label="168_ (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n1061-new_variable-169-169", method="withdraw_balances_re_ent1()", type_label=new_variable];
1085 [label="169_ if\n1085-if-170-171", method="withdraw_balances_re_ent1()", type_label=if];
3154 [label="169_ end_if", method="withdraw_balances_re_ent1()", type_label=end_if];
1087 [label="170_ balances_re_ent1[msg.sender] = 0;\n1087-expression_statement-171-171", method="withdraw_balances_re_ent1()", type_label=expression_statement];
1095 [label="172_ string public symbol;\n1095-new_variable-173-173", method="", type_label=new_variable];
1100 [label="173_ bool not_called_re_ent41 = true;\n1100-new_variable-174-174", method="", type_label=new_variable];
1106 [label="174_ function bug_re_ent41() public{\n        require(not_called_re_ent41);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent41 = false;\n    }\n1106-function_definition-175-181", method="bug_re_ent41()", type_label=function_definition];
1110 [label="175_ require(not_called_re_ent41);\n1110-expression_statement-176-176", method="bug_re_ent41()", type_label=expression_statement];
1115 [label="176_ if\n1115-if-177-179", method="bug_re_ent41()", type_label=if];
3184 [label="176_ end_if", method="bug_re_ent41()", type_label=end_if];
1130 [label="179_ not_called_re_ent41 = false;\n1130-expression_statement-180-180", method="bug_re_ent41()", type_label=expression_statement];
1135 [label="181_ uint public decimals;\n1135-new_variable-182-182", method="", type_label=new_variable];
1140 [label="182_ uint256 counter_re_ent42 =0;\n1140-new_variable-183-183", method="", type_label=new_variable];
1145 [label="183_ function callme_re_ent42() public{\n        require(counter_re_ent42<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent42 += 1;\n    }\n1145-function_definition-184-190", method="callme_re_ent42()", type_label=function_definition];
1149 [label="184_ require(counter_re_ent42<=5);\n1149-expression_statement-185-185", method="callme_re_ent42()", type_label=expression_statement];
1156 [label="185_ if\n1156-if-186-188", method="callme_re_ent42()", type_label=if];
3225 [label="185_ end_if", method="callme_re_ent42()", type_label=end_if];
1171 [label="188_ counter_re_ent42 += 1;\n1171-expression_statement-189-189", method="callme_re_ent42()", type_label=expression_statement];
1175 [label="190_ string public  name;\n1175-new_variable-191-191", method="", type_label=new_variable];
1180 [label="191_ address payable lastPlayer_re_ent2;\n1180-new_variable-192-192", method="", type_label=new_variable];
1184 [label="192_ uint jackpot_re_ent2;\n1184-new_variable-193-193", method="", type_label=new_variable];
1188 [label="193_ function buyTicket_re_ent2() public{\n	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))\n        revert();\n      lastPlayer_re_ent2 = msg.sender;\n      jackpot_re_ent2    = address(this).balance;\n    }\n1188-function_definition-194-199", method="buyTicket_re_ent2()", type_label=function_definition];
1192 [label="194_ if\n1192-if-195-196", method="buyTicket_re_ent2()", type_label=if];
3261 [label="194_ end_if", method="buyTicket_re_ent2()", type_label=end_if];
1203 [label="196_ lastPlayer_re_ent2 = msg.sender;\n1203-expression_statement-197-197", method="buyTicket_re_ent2()", type_label=expression_statement];
1209 [label="197_ jackpot_re_ent2    = address(this).balance;\n1209-expression_statement-198-198", method="buyTicket_re_ent2()", type_label=expression_statement];
1217 [label="199_ uint _totalSupply;\n1217-new_variable-200-200", method="", type_label=new_variable];
1221 [label="200_ mapping(address => uint) balances;\n1221-new_variable-201-201", method="", type_label=new_variable];
1227 [label="201_ mapping(address => uint) balances_re_ent17;\n1227-new_variable-202-202", method="", type_label=new_variable];
1233 [label="202_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n1233-function_definition-203-208", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
1241 [label="203_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n1241-expression_statement-204-204", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
1252 [label="204_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n1252-new_variable-205-205", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
1272 [label="205_ require(success);\n1272-expression_statement-206-206", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
1277 [label="206_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n1277-expression_statement-207-207", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
1285 [label="208_ mapping(address => mapping(address => uint)) allowed;\n1285-new_variable-209-209", method="", type_label=new_variable];
1295 [label="210_ symbol = \"FTB\";\n1295-expression_statement-211-211", method="", type_label=expression_statement];
1300 [label="211_ name = \"ForTheBlockchain\";\n1300-expression_statement-212-212", method="", type_label=expression_statement];
1305 [label="212_ decimals = 8;\n1305-expression_statement-213-213", method="", type_label=expression_statement];
1309 [label="213_ _totalSupply =100000000 * 10**(decimals);\n1309-expression_statement-214-214", method="", type_label=expression_statement];
1318 [label="214_ balances[owner] = _totalSupply;\n1318-expression_statement-215-215", method="", type_label=expression_statement];
1334 [label="217_ uint256 counter_re_ent7 =0;\n1334-new_variable-218-218", method="", type_label=new_variable];
1339 [label="218_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n1339-function_definition-219-225", method="callme_re_ent7()", type_label=function_definition];
1343 [label="219_ require(counter_re_ent7<=5);\n1343-expression_statement-220-220", method="callme_re_ent7()", type_label=expression_statement];
1350 [label="220_ if\n1350-if-221-223", method="callme_re_ent7()", type_label=if];
3419 [label="220_ end_if", method="callme_re_ent7()", type_label=end_if];
1365 [label="223_ counter_re_ent7 += 1;\n1365-expression_statement-224-224", method="callme_re_ent7()", type_label=expression_statement];
1369 [label="225_ function totalSupply() public view returns (uint) {\n        return _totalSupply.sub(balances[address(0)]);\n    }\n1369-function_definition-226-228", method="totalSupply()", type_label=function_definition];
1378 [label="226_ return _totalSupply.sub(balances[address(0)]);\n1378-return-227-227", method="totalSupply()", type_label=return];
1389 [label="228_ address payable lastPlayer_re_ent23;\n1389-new_variable-229-229", method="", type_label=new_variable];
1393 [label="229_ uint jackpot_re_ent23;\n1393-new_variable-230-230", method="", type_label=new_variable];
1397 [label="230_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n1397-function_definition-231-236", method="buyTicket_re_ent23()", type_label=function_definition];
1401 [label="231_ if\n1401-if-232-233", method="buyTicket_re_ent23()", type_label=if];
3470 [label="231_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
1412 [label="233_ lastPlayer_re_ent23 = msg.sender;\n1412-expression_statement-234-234", method="buyTicket_re_ent23()", type_label=expression_statement];
1418 [label="234_ jackpot_re_ent23    = address(this).balance;\n1418-expression_statement-235-235", method="buyTicket_re_ent23()", type_label=expression_statement];
1426 [label="236_ function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n1426-function_definition-237-239", method="balanceOf(address tokenOwner)", type_label=function_definition];
1440 [label="237_ return balances[tokenOwner];\n1440-return-238-238", method="balanceOf(address tokenOwner)", type_label=return];
1444 [label="239_ uint256 counter_re_ent14 =0;\n1444-new_variable-240-240", method="", type_label=new_variable];
1449 [label="240_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n1449-function_definition-241-247", method="callme_re_ent14()", type_label=function_definition];
1453 [label="241_ require(counter_re_ent14<=5);\n1453-expression_statement-242-242", method="callme_re_ent14()", type_label=expression_statement];
1460 [label="242_ if\n1460-if-243-245", method="callme_re_ent14()", type_label=if];
3529 [label="242_ end_if", method="callme_re_ent14()", type_label=end_if];
1475 [label="245_ counter_re_ent14 += 1;\n1475-expression_statement-246-246", method="callme_re_ent14()", type_label=expression_statement];
1479 [label="247_ function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n1479-function_definition-248-253", method="transfer(address to,uint tokens)", type_label=function_definition];
1496 [label="248_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n1496-expression_statement-249-249", method="transfer(address to,uint tokens)", type_label=expression_statement];
1513 [label="249_ balances[to] = balances[to].add(tokens);\n1513-expression_statement-250-250", method="transfer(address to,uint tokens)", type_label=expression_statement];
1536 [label="251_ return true;\n1536-return-252-252", method="transfer(address to,uint tokens)", type_label=return];
1539 [label="253_ address payable lastPlayer_re_ent30;\n1539-new_variable-254-254", method="", type_label=new_variable];
1543 [label="254_ uint jackpot_re_ent30;\n1543-new_variable-255-255", method="", type_label=new_variable];
1547 [label="255_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n1547-function_definition-256-261", method="buyTicket_re_ent30()", type_label=function_definition];
1551 [label="256_ if\n1551-if-257-258", method="buyTicket_re_ent30()", type_label=if];
3620 [label="256_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
1562 [label="258_ lastPlayer_re_ent30 = msg.sender;\n1562-expression_statement-259-259", method="buyTicket_re_ent30()", type_label=expression_statement];
1568 [label="259_ jackpot_re_ent30    = address(this).balance;\n1568-expression_statement-260-260", method="buyTicket_re_ent30()", type_label=expression_statement];
1576 [label="261_ function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n1576-function_definition-262-266", method="approve(address spender,uint tokens)", type_label=function_definition];
1593 [label="262_ allowed[msg.sender][spender] = tokens;\n1593-expression_statement-263-263", method="approve(address spender,uint tokens)", type_label=expression_statement];
1613 [label="264_ return true;\n1613-return-265-265", method="approve(address spender,uint tokens)", type_label=return];
1616 [label="266_ mapping(address => uint) balances_re_ent8;\n1616-new_variable-267-267", method="", type_label=new_variable];
1622 [label="267_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n1622-function_definition-268-272", method="withdraw_balances_re_ent8()", type_label=function_definition];
1626 [label="268_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n1626-new_variable-269-269", method="withdraw_balances_re_ent8()", type_label=new_variable];
1650 [label="269_ if\n1650-if-270-271", method="withdraw_balances_re_ent8()", type_label=if];
3719 [label="269_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
1652 [label="270_ balances_re_ent8[msg.sender] = 0;\n1652-expression_statement-271-271", method="withdraw_balances_re_ent8()", type_label=expression_statement];
1660 [label="272_ function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n1660-function_definition-273-279", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
1681 [label="273_ balances[from] = balances[from].sub(tokens);\n1681-expression_statement-274-274", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1694 [label="274_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n1694-expression_statement-275-275", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1715 [label="275_ balances[to] = balances[to].add(tokens);\n1715-expression_statement-276-276", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1736 [label="277_ return true;\n1736-return-278-278", method="transferFrom(address from,address to,uint tokens)", type_label=return];
1739 [label="279_ mapping(address => uint) redeemableEther_re_ent39;\n1739-new_variable-280-280", method="", type_label=new_variable];
1745 [label="280_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n1745-function_definition-281-286", method="claimReward_re_ent39()", type_label=function_definition];
1749 [label="281_ require(redeemableEther_re_ent39[msg.sender] > 0);\n1749-expression_statement-282-282", method="claimReward_re_ent39()", type_label=expression_statement];
1760 [label="282_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n1760-new_variable-283-283", method="claimReward_re_ent39()", type_label=new_variable];
1770 [label="283_ msg.sender.transfer(transferValue_re_ent39);\n1770-expression_statement-284-284", method="claimReward_re_ent39()", type_label=expression_statement];
1779 [label="284_ redeemableEther_re_ent39[msg.sender] = 0;\n1779-expression_statement-285-285", method="claimReward_re_ent39()", type_label=expression_statement];
1787 [label="286_ function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n1787-function_definition-287-289", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
1805 [label="287_ return allowed[tokenOwner][spender];\n1805-return-288-288", method="allowance(address tokenOwner,address spender)", type_label=return];
1811 [label="289_ mapping(address => uint) balances_re_ent36;\n1811-new_variable-290-290", method="", type_label=new_variable];
1817 [label="290_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n1817-function_definition-291-294", method="withdraw_balances_re_ent36()", type_label=function_definition];
1821 [label="291_ if\n1821-if-292-293", method="withdraw_balances_re_ent36()", type_label=if];
3890 [label="291_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
1834 [label="292_ balances_re_ent36[msg.sender] = 0;\n1834-expression_statement-293-293", method="withdraw_balances_re_ent36()", type_label=expression_statement];
1842 [label="294_ function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n1842-function_definition-295-300", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=function_definition];
1863 [label="295_ allowed[msg.sender][spender] = tokens;\n1863-expression_statement-296-296", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
1883 [label="297_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n1883-expression_statement-298-298", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
1903 [label="298_ return true;\n1903-return-299-299", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=return];
1906 [label="300_ uint256 counter_re_ent35 =0;\n1906-new_variable-301-301", method="", type_label=new_variable];
1911 [label="301_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n1911-function_definition-302-308", method="callme_re_ent35()", type_label=function_definition];
1915 [label="302_ require(counter_re_ent35<=5);\n1915-expression_statement-303-303", method="callme_re_ent35()", type_label=expression_statement];
1922 [label="303_ if\n1922-if-304-306", method="callme_re_ent35()", type_label=if];
3991 [label="303_ end_if", method="callme_re_ent35()", type_label=end_if];
1937 [label="306_ counter_re_ent35 += 1;\n1937-expression_statement-307-307", method="callme_re_ent35()", type_label=expression_statement];
1947 [label="311_ mapping(address => uint) userBalance_re_ent40;\n1947-new_variable-312-312", method="", type_label=new_variable];
1953 [label="312_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n1953-function_definition-313-319", method="withdrawBalance_re_ent40()", type_label=function_definition];
1957 [label="313_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n1957-new_variable-314-314", method="withdrawBalance_re_ent40()", type_label=new_variable];
1981 [label="314_ if\n1981-if-315-317", method="withdrawBalance_re_ent40()", type_label=if];
4050 [label="314_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
1987 [label="317_ userBalance_re_ent40[msg.sender] = 0;\n1987-expression_statement-318-318", method="withdrawBalance_re_ent40()", type_label=expression_statement];
1995 [label="319_ function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n1995-function_definition-320-322", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=function_definition];
2006 [label="319_ onlyOwner\n2006-expression_statement-320-320", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=expression_statement];
2014 [label="320_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n2014-return-321-321", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=return];
2026 [label="322_ mapping(address => uint) userBalance_re_ent33;\n2026-new_variable-323-323", method="", type_label=new_variable];
2032 [label="323_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n2032-function_definition-324-330", method="withdrawBalance_re_ent33()", type_label=function_definition];
2036 [label="324_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n2036-new_variable-325-325", method="withdrawBalance_re_ent33()", type_label=new_variable];
2060 [label="325_ if\n2060-if-326-328", method="withdrawBalance_re_ent33()", type_label=if];
4129 [label="325_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
2066 [label="328_ userBalance_re_ent33[msg.sender] = 0;\n2066-expression_statement-329-329", method="withdrawBalance_re_ent33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
154 -> 158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
162 -> 166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
166 -> 2235  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
177 -> 183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
210 -> 218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
218 -> 229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
229 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
279 -> 283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
291 -> 309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
309 -> 2378  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
314 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
354 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
375 -> 384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
414 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 2487  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
470 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
474 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 2567  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
518 -> 522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
522 -> 527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
527 -> 2596  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
567 -> 575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
575 -> 586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
586 -> 598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
648 -> 652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 2726  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
686 -> 690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
690 -> 2759  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
716 -> 721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
769 -> 774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
784 -> 789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
789 -> 810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
810 -> 2879  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
845 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
860 -> 870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
870 -> 879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
890 -> 899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
901 -> 911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
921 -> 929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
960 -> 964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
979 -> 983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
995 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 1010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1010 -> 1020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1020 -> 1029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1057 -> 1061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1061 -> 1085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1085 -> 1087  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1085 -> 3154  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3154 -> 1095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1087 -> 3154  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1095 -> 1100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1110 -> 1115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1115 -> 3184  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1135 -> 1140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1145 -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1149 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1156 -> 3225  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1175 -> 1180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1180 -> 1184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1188 -> 1192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1192 -> 3261  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1203 -> 1209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1217 -> 1221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1221 -> 1227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1233 -> 1241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1241 -> 1252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1252 -> 1272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1272 -> 1277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1295 -> 1300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1300 -> 1305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1305 -> 1309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1309 -> 1318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1339 -> 1343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1343 -> 1350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1350 -> 3419  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1369 -> 1378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1378 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1389 -> 1393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1397 -> 1401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1401 -> 3470  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1412 -> 1418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1426 -> 1440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1440 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1449 -> 1453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1453 -> 1460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1460 -> 3529  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1479 -> 1496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1496 -> 1513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1536 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1539 -> 1543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1547 -> 1551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1551 -> 3620  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1562 -> 1568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1576 -> 1593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1613 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1622 -> 1626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1626 -> 1650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1650 -> 1652  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1650 -> 3719  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3719 -> 1660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1652 -> 3719  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1660 -> 1681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1681 -> 1694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1694 -> 1715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1736 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1745 -> 1749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1749 -> 1760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1760 -> 1770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1770 -> 1779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1787 -> 1805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1805 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1817 -> 1821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1821 -> 1834  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1821 -> 3890  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3890 -> 1842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1834 -> 3890  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1842 -> 1863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1883 -> 1903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1903 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1911 -> 1915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1915 -> 1922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1922 -> 3991  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1953 -> 1957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1957 -> 1981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1981 -> 4050  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1995 -> 2014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2014 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2032 -> 2036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2036 -> 2060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2060 -> 4129  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
