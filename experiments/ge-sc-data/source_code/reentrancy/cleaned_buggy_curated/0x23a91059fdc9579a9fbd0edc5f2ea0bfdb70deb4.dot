digraph  {
13 [label="3_ mapping (address => uint) public balances;\n13-new_variable-4-4", method="", type_label=new_variable];
20 [label="4_ uint public MinDeposit = 1 ether;\n20-new_variable-5-5", method="", type_label=new_variable];
27 [label="5_ Log TransferLog;\n27-new_variable-6-6", method="", type_label=new_variable];
32 [label="6_ function PrivateBank(address _log)\n    {\n        TransferLog = Log(_log);\n    }\n32-function_definition-7-10", method="PrivateBank(address _log)", type_label=function_definition];
39 [label="8_ TransferLog = Log(_log);\n39-expression_statement-9-9", method="PrivateBank(address _log)", type_label=expression_statement];
46 [label="10_ function Deposit()\n    public\n    payable\n    {\n        if(msg.value >= MinDeposit)\n        {\n            balances[msg.sender]+=msg.value;\n            TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\n        }\n    }\n46-function_definition-11-20", method="Deposit()", type_label=function_definition];
51 [label="14_ if_msg.value >= MinDeposit\n51-if-15-19", method="Deposit()", type_label=if];
265 [label="14_ end_if", method="Deposit()", type_label=end_if];
58 [label="16_ balances[msg.sender]+=msg.value;\n58-expression_statement-17-17", method="Deposit()", type_label=expression_statement];
68 [label="17_ TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\n68-expression_statement-18-18", method="Deposit()", type_label=expression_statement];
84 [label="20_ function CashOut(uint _am)\n    {\n        if(_am<=balances[msg.sender])\n        {            \n            if(msg.sender.call.value(_am)())\n            {\n                balances[msg.sender]-=_am;\n                TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\n            }\n        }\n    }\n84-function_definition-21-31", method="CashOut(uint _am)", type_label=function_definition];
91 [label="22_ if\n91-if-23-30", method="CashOut(uint _am)", type_label=if];
305 [label="22_ end_if", method="CashOut(uint _am)", type_label=end_if];
100 [label="24_ if\n100-if-25-29", method="CashOut(uint _am)", type_label=if];
314 [label="24_ end_if", method="CashOut(uint _am)", type_label=end_if];
113 [label="26_ balances[msg.sender]-=_am;\n113-expression_statement-27-27", method="CashOut(uint _am)", type_label=expression_statement];
121 [label="27_ TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\n121-expression_statement-28-28", method="CashOut(uint _am)", type_label=expression_statement];
142 [label="35_ struct Message\n    {\n        address Sender;\n        string  Data;\n        uint Val;\n        uint  Time;\n    }\n142-expression_statement-36-42", method="Message()", type_label=expression_statement];
160 [label="42_ Message[] public History;\n160-new_variable-43-43", method="", type_label=new_variable];
167 [label="43_ Message LastMsg;\n167-new_variable-44-44", method="", type_label=new_variable];
172 [label="44_ function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n172-function_definition-45-53", method="AddMessage(address _adr,uint _val,string _data)", type_label=function_definition];
188 [label="47_ LastMsg.Sender = _adr;\n188-expression_statement-48-48", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
194 [label="48_ LastMsg.Time = now;\n194-expression_statement-49-49", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
200 [label="49_ LastMsg.Val = _val;\n200-expression_statement-50-50", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
206 [label="50_ LastMsg.Data = _data;\n206-expression_statement-51-51", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
212 [label="51_ History.push(LastMsg);\n212-expression_statement-52-52", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
135;
13 -> 20  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
20 -> 27  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
32 -> 39  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
46 -> 51  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 58  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
51 -> 265  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
265 -> 84  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
58 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 265  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
84 -> 91  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
91 -> 100  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
91 -> 305  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
100 -> 113  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
100 -> 314  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
314 -> 135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 314  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
142 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
172 -> 188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
194 -> 200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
200 -> 206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
