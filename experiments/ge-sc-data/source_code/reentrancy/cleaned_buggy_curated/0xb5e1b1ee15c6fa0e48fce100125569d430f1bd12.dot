digraph  {
13 [label="3_ mapping (address => uint) public balances;\n13-new_variable-4-4", method="", type_label=new_variable];
20 [label="4_ uint public MinDeposit = 1 ether;\n20-new_variable-5-5", method="", type_label=new_variable];
27 [label="5_ Log TransferLog;\n27-new_variable-6-6", method="", type_label=new_variable];
32 [label="6_ function Private_Bank(address _log)\n    {\n        TransferLog = Log(_log);\n    }\n32-function_definition-7-10", method="Private_Bank(address _log)", type_label=function_definition];
39 [label="8_ TransferLog = Log(_log);\n39-expression_statement-9-9", method="Private_Bank(address _log)", type_label=expression_statement];
46 [label="10_ function Deposit()\n    public\n    payable\n    {\n        if(msg.value > MinDeposit)\n        {\n            balances[msg.sender]+=msg.value;\n            TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\n        }\n    }\n46-function_definition-11-20", method="Deposit()", type_label=function_definition];
51 [label="14_ if_msg.value > MinDeposit\n51-if-15-19", method="Deposit()", type_label=if];
267 [label="14_ end_if", method="Deposit()", type_label=end_if];
58 [label="16_ balances[msg.sender]+=msg.value;\n58-expression_statement-17-17", method="Deposit()", type_label=expression_statement];
68 [label="17_ TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\n68-expression_statement-18-18", method="Deposit()", type_label=expression_statement];
84 [label="20_ function CashOut(uint _am)\n    public\n    payable\n    {\n        if(_am<=balances[msg.sender])\n        {\n            if(msg.sender.call.value(_am)())\n            {\n                balances[msg.sender]-=_am;\n                TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\n            }\n        }\n    }\n84-function_definition-21-33", method="CashOut(uint _am)", type_label=function_definition];
93 [label="24_ if\n93-if-25-32", method="CashOut(uint _am)", type_label=if];
309 [label="24_ end_if", method="CashOut(uint _am)", type_label=end_if];
102 [label="26_ if\n102-if-27-31", method="CashOut(uint _am)", type_label=if];
318 [label="26_ end_if", method="CashOut(uint _am)", type_label=end_if];
115 [label="28_ balances[msg.sender]-=_am;\n115-expression_statement-29-29", method="CashOut(uint _am)", type_label=expression_statement];
123 [label="29_ TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\n123-expression_statement-30-30", method="CashOut(uint _am)", type_label=expression_statement];
144 [label="37_ struct Message\n    {\n        address Sender;\n        string  Data;\n        uint Val;\n        uint  Time;\n    }\n144-expression_statement-38-44", method="Message()", type_label=expression_statement];
162 [label="44_ Message[] public History;\n162-new_variable-45-45", method="", type_label=new_variable];
169 [label="45_ Message LastMsg;\n169-new_variable-46-46", method="", type_label=new_variable];
174 [label="46_ function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n174-function_definition-47-55", method="AddMessage(address _adr,uint _val,string _data)", type_label=function_definition];
190 [label="49_ LastMsg.Sender = _adr;\n190-expression_statement-50-50", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
196 [label="50_ LastMsg.Time = now;\n196-expression_statement-51-51", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
202 [label="51_ LastMsg.Val = _val;\n202-expression_statement-52-52", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
208 [label="52_ LastMsg.Data = _data;\n208-expression_statement-53-53", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
214 [label="53_ History.push(LastMsg);\n214-expression_statement-54-54", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
137;
13 -> 20  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
20 -> 27  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
32 -> 39  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
46 -> 51  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 58  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
51 -> 267  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
267 -> 84  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
58 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 267  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
84 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 102  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
93 -> 309  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
102 -> 115  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
102 -> 318  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
318 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
115 -> 123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
123 -> 318  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
144 -> 162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
162 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
190 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
196 -> 202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
202 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
