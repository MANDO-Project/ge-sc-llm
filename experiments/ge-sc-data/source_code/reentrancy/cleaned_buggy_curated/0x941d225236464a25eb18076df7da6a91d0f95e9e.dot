digraph  {
13 [label="3_ mapping (address => uint) public balances;\n13-new_variable-4-4", method="", type_label=new_variable];
20 [label="4_ uint public MinDeposit = 1 ether;\n20-new_variable-5-5", method="", type_label=new_variable];
27 [label="5_ Log TransferLog;\n27-new_variable-6-6", method="", type_label=new_variable];
32 [label="6_ uint lastBlock;\n32-new_variable-7-7", method="", type_label=new_variable];
36 [label="7_ function ETH_FUND(address _log)\n    public \n    {\n        TransferLog = Log(_log);\n    }\n36-function_definition-8-12", method="ETH_FUND(address _log)", type_label=function_definition];
44 [label="10_ TransferLog = Log(_log);\n44-expression_statement-11-11", method="ETH_FUND(address _log)", type_label=expression_statement];
51 [label="12_ function Deposit()\n    public\n    payable\n    {\n        if(msg.value > MinDeposit)\n        {\n            balances[msg.sender]+=msg.value;\n            TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\n            lastBlock = block.number;\n        }\n    }\n51-function_definition-13-23", method="Deposit()", type_label=function_definition];
56 [label="16_ if_msg.value > MinDeposit\n56-if-17-22", method="Deposit()", type_label=if];
289 [label="16_ end_if", method="Deposit()", type_label=end_if];
63 [label="18_ balances[msg.sender]+=msg.value;\n63-expression_statement-19-19", method="Deposit()", type_label=expression_statement];
73 [label="19_ TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\n73-expression_statement-20-20", method="Deposit()", type_label=expression_statement];
89 [label="20_ lastBlock = block.number;\n89-expression_statement-21-21", method="Deposit()", type_label=expression_statement];
95 [label="23_ function CashOut(uint _am)\n    public\n    payable\n    {\n        if(_am<=balances[msg.sender]&&block.number>lastBlock)\n        {\n            if(msg.sender.call.value(_am)())\n            {\n                balances[msg.sender]-=_am;\n                TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\n            }\n        }\n    }\n95-function_definition-24-36", method="CashOut(uint _am)", type_label=function_definition];
104 [label="27_ if__am<=balances[msg.sender]&&block.number>lastBlock\n104-if-28-35", method="CashOut(uint _am)", type_label=if];
337 [label="27_ end_if", method="CashOut(uint _am)", type_label=end_if];
119 [label="29_ if\n119-if-30-34", method="CashOut(uint _am)", type_label=if];
352 [label="29_ end_if", method="CashOut(uint _am)", type_label=end_if];
132 [label="31_ balances[msg.sender]-=_am;\n132-expression_statement-32-32", method="CashOut(uint _am)", type_label=expression_statement];
140 [label="32_ TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\n140-expression_statement-33-33", method="CashOut(uint _am)", type_label=expression_statement];
161 [label="40_ struct Message\n    {\n        address Sender;\n        string  Data;\n        uint Val;\n        uint  Time;\n    }\n161-expression_statement-41-47", method="Message()", type_label=expression_statement];
179 [label="47_ Message[] public History;\n179-new_variable-48-48", method="", type_label=new_variable];
186 [label="48_ Message LastMsg;\n186-new_variable-49-49", method="", type_label=new_variable];
191 [label="49_ function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n191-function_definition-50-58", method="AddMessage(address _adr,uint _val,string _data)", type_label=function_definition];
207 [label="52_ LastMsg.Sender = _adr;\n207-expression_statement-53-53", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
213 [label="53_ LastMsg.Time = now;\n213-expression_statement-54-54", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
219 [label="54_ LastMsg.Val = _val;\n219-expression_statement-55-55", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
225 [label="55_ LastMsg.Data = _data;\n225-expression_statement-56-56", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
231 [label="56_ History.push(LastMsg);\n231-expression_statement-57-57", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
154;
13 -> 20  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
20 -> 27  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
27 -> 32  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
36 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 56  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
56 -> 63  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
56 -> 289  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
289 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
63 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 89  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
89 -> 289  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
95 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 119  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
104 -> 337  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
119 -> 132  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
119 -> 352  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
352 -> 154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
132 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 352  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
161 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
191 -> 207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
213 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
219 -> 225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
