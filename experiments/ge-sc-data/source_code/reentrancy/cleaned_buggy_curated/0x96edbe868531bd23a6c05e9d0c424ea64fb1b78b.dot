digraph  {
13 [label="3_ struct Holder   \n    {\n        uint unlockTime;\n        uint balance;\n    }\n13-expression_statement-4-8", method="Holder()", type_label=expression_statement];
23 [label="8_ mapping (address => Holder) public Acc;\n23-new_variable-9-9", method="", type_label=new_variable];
31 [label="9_ uint public MinSum;\n31-new_variable-10-10", method="", type_label=new_variable];
36 [label="10_ LogFile Log;\n36-new_variable-11-11", method="", type_label=new_variable];
41 [label="11_ bool intitalized;\n41-new_variable-12-12", method="", type_label=new_variable];
45 [label="12_ function SetMinSum(uint _val)\n    public\n    {\n        if(intitalized)throw;\n        MinSum = _val;\n    }\n45-function_definition-13-18", method="SetMinSum(uint _val)", type_label=function_definition];
53 [label="15_ if\n53-if-16-16", method="SetMinSum(uint _val)", type_label=if];
356 [label="15_ end_if", method="SetMinSum(uint _val)", type_label=end_if];
55 [label="15_ throw;\n55-expression_statement-16-16", method="SetMinSum(uint _val)", type_label=expression_statement];
57 [label="16_ MinSum = _val;\n57-expression_statement-17-17", method="SetMinSum(uint _val)", type_label=expression_statement];
61 [label="18_ function SetLogFile(address _log)\n    public\n    {\n        if(intitalized)throw;\n        Log = LogFile(_log);\n    }\n61-function_definition-19-24", method="SetLogFile(address _log)", type_label=function_definition];
69 [label="21_ if\n69-if-22-22", method="SetLogFile(address _log)", type_label=if];
372 [label="21_ end_if", method="SetLogFile(address _log)", type_label=end_if];
71 [label="21_ throw;\n71-expression_statement-22-22", method="SetLogFile(address _log)", type_label=expression_statement];
73 [label="22_ Log = LogFile(_log);\n73-expression_statement-23-23", method="SetLogFile(address _log)", type_label=expression_statement];
80 [label="24_ function Initialized()\n    public\n    {\n        intitalized = true;\n    }\n80-function_definition-25-29", method="Initialized()", type_label=function_definition];
84 [label="27_ intitalized = true;\n84-expression_statement-28-28", method="Initialized()", type_label=expression_statement];
89 [label="29_ function Put(uint _lockTime)\n    public\n    payable\n    {\n        var acc = Acc[msg.sender];\n        acc.balance += msg.value;\n        if(now+_lockTime>acc.unlockTime)acc.unlockTime=now+_lockTime;\n        Log.AddMessage(msg.sender,msg.value,\"Put\");\n    }\n89-function_definition-30-38", method="Put(uint _lockTime)", type_label=function_definition];
98 [label="33_ var acc = Acc[msg.sender];\n98-new_variable-34-34", method="Put(uint _lockTime)", type_label=new_variable];
108 [label="34_ acc.balance += msg.value;\n108-expression_statement-35-35", method="Put(uint _lockTime)", type_label=expression_statement];
116 [label="35_ if_now+_lockTime>acc.unlockTime\n116-if-36-36", method="Put(uint _lockTime)", type_label=if];
419 [label="35_ end_if", method="Put(uint _lockTime)", type_label=end_if];
124 [label="35_ acc.unlockTime=now+_lockTime;\n124-expression_statement-36-36", method="Put(uint _lockTime)", type_label=expression_statement];
132 [label="36_ Log.AddMessage(msg.sender,msg.value,\"Put\");\n132-expression_statement-37-37", method="Put(uint _lockTime)", type_label=expression_statement];
148 [label="38_ function Collect(uint _am)\n    public\n    payable\n    {\n        var acc = Acc[msg.sender];\n        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)\n        {\n            if(msg.sender.call.value(_am)())\n            {\n                acc.balance-=_am;\n                Log.AddMessage(msg.sender,_am,\"Collect\");\n            }\n        }\n    }\n148-function_definition-39-52", method="Collect(uint _am)", type_label=function_definition];
157 [label="42_ var acc = Acc[msg.sender];\n157-new_variable-43-43", method="Collect(uint _am)", type_label=new_variable];
167 [label="43_ if_acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime\n167-if-44-51", method="Collect(uint _am)", type_label=if];
470 [label="43_ end_if", method="Collect(uint _am)", type_label=end_if];
186 [label="45_ if\n186-if-46-50", method="Collect(uint _am)", type_label=if];
489 [label="45_ end_if", method="Collect(uint _am)", type_label=end_if];
199 [label="47_ acc.balance-=_am;\n199-expression_statement-48-48", method="Collect(uint _am)", type_label=expression_statement];
205 [label="48_ Log.AddMessage(msg.sender,_am,\"Collect\");\n205-expression_statement-49-49", method="Collect(uint _am)", type_label=expression_statement];
223 [label="56_ Put(0);\n223-expression_statement-57-57", method="", type_label=expression_statement];
231 [label="61_ struct Message\n    {\n        address Sender;\n        string  Data;\n        uint Val;\n        uint  Time;\n    }\n231-expression_statement-62-68", method="Message()", type_label=expression_statement];
249 [label="68_ Message[] public History;\n249-new_variable-69-69", method="", type_label=new_variable];
256 [label="69_ Message LastMsg;\n256-new_variable-70-70", method="", type_label=new_variable];
261 [label="70_ function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n261-function_definition-71-79", method="AddMessage(address _adr,uint _val,string _data)", type_label=function_definition];
277 [label="73_ LastMsg.Sender = _adr;\n277-expression_statement-74-74", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
283 [label="74_ LastMsg.Time = now;\n283-expression_statement-75-75", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
289 [label="75_ LastMsg.Val = _val;\n289-expression_statement-76-76", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
295 [label="76_ LastMsg.Data = _data;\n295-expression_statement-77-77", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
301 [label="77_ History.push(LastMsg);\n301-expression_statement-78-78", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
219;
13 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
23 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
36 -> 41  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 55  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
53 -> 356  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
356 -> 57  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
55 -> 356  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
61 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
69 -> 71  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
69 -> 372  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
372 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
71 -> 372  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
80 -> 84  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
89 -> 98  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
98 -> 108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
108 -> 116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
116 -> 124  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
116 -> 419  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
419 -> 132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
124 -> 419  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
148 -> 157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
157 -> 167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
167 -> 186  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
167 -> 470  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
186 -> 199  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
186 -> 489  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
489 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
205 -> 489  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
231 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
283 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
