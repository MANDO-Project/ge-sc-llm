digraph  {
13 [label="2_ uint256 public totalSupply;\n13-new_variable-3-3", method="", type_label=new_variable];
18 [label="3_ function balanceOf(address _owner) public constant returns (uint256 balance);\n18-function_definition-4-4", method="balanceOf(address _owner)", type_label=function_definition];
25 [label="3_ constant\n25-expression_statement-4-4", method="balanceOf(address _owner)", type_label=expression_statement];
32 [label="4_ function transfer(address _to, uint256 _value) public returns (bool success);\n32-function_definition-5-5", method="transfer(address _to,uint256 _value)", type_label=function_definition];
48 [label="5_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n48-function_definition-6-6", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
68 [label="6_ function approve(address _spender, uint256 _value) public returns (bool success);\n68-function_definition-7-7", method="approve(address _spender,uint256 _value)", type_label=function_definition];
84 [label="7_ function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n84-function_definition-8-8", method="allowance(address _owner,address _spender)", type_label=function_definition];
95 [label="7_ constant\n95-expression_statement-8-8", method="allowance(address _owner,address _spender)", type_label=expression_statement];
133 [label="12_ function recoverSigner(bytes32 _hashedMsg, string _sig) public pure returns (address) {\n         require(_hashedMsg != 0x00);\n         bytes memory prefix = \"\x19Ethereum Signed Message:\n32\";\n         bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, _hashedMsg));\n         if (bytes(_sig).length != 132) {\n             return 0x0;\n         }\n         bytes32 r;\n         bytes32 s;\n         uint8 v;\n         bytes memory sig = hexstrToBytes(substring(_sig, 2, 132));\n         assembly {\n             r := mload(add(sig, 32))\n             s := mload(add(sig, 64))\n             v := byte(0, mload(add(sig, 96)))\n         }\n         if (v < 27) {\n             v += 27;\n         }\n         if (v < 27 || v > 28) {\n             return 0x0;\n         }\n         return ecrecover(prefixedHash, v, r, s);\n     }\n133-function_definition-13-36", method="recoverSigner(bytes32 _hashedMsg,string _sig)", type_label=function_definition];
150 [label="13_ require(_hashedMsg != 0x00);\n150-expression_statement-14-14", method="recoverSigner(bytes32 _hashedMsg,string _sig)", type_label=expression_statement];
157 [label="14_ bytes memory prefix = \"\x19Ethereum Signed Message:\n32\";\n157-new_variable-15-15", method="recoverSigner(bytes32 _hashedMsg,string _sig)", type_label=new_variable];
164 [label="15_ bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, _hashedMsg));\n164-new_variable-16-16", method="recoverSigner(bytes32 _hashedMsg,string _sig)", type_label=new_variable];
180 [label="16_ if_bytes(_sig).length != 132\n180-if-17-19", method="recoverSigner(bytes32 _hashedMsg,string _sig)", type_label=if];
4773 [label="16_ end_if", method="recoverSigner(bytes32 _hashedMsg,string _sig)", type_label=end_if];
189 [label="17_ return 0x0;\n189-return-18-18", method="recoverSigner(bytes32 _hashedMsg,string _sig)", type_label=return];
191 [label="19_ bytes32 r;\n191-new_variable-20-20", method="recoverSigner(bytes32 _hashedMsg,string _sig)", type_label=new_variable];
196 [label="20_ bytes32 s;\n196-new_variable-21-21", method="recoverSigner(bytes32 _hashedMsg,string _sig)", type_label=new_variable];
201 [label="21_ uint8 v;\n201-new_variable-22-22", method="recoverSigner(bytes32 _hashedMsg,string _sig)", type_label=new_variable];
206 [label="22_ bytes memory sig = hexstrToBytes(substring(_sig, 2, 132));\n206-new_variable-23-23", method="recoverSigner(bytes32 _hashedMsg,string _sig)", type_label=new_variable];
262 [label="28_ if_v < 27\n262-if-29-31", method="recoverSigner(bytes32 _hashedMsg,string _sig)", type_label=if];
4855 [label="28_ end_if", method="recoverSigner(bytes32 _hashedMsg,string _sig)", type_label=end_if];
267 [label="29_ v += 27;\n267-expression_statement-30-30", method="recoverSigner(bytes32 _hashedMsg,string _sig)", type_label=expression_statement];
271 [label="31_ if_v < 27 || v > 28\n271-if-32-34", method="recoverSigner(bytes32 _hashedMsg,string _sig)", type_label=if];
4864 [label="31_ end_if", method="recoverSigner(bytes32 _hashedMsg,string _sig)", type_label=end_if];
280 [label="32_ return 0x0;\n280-return-33-33", method="recoverSigner(bytes32 _hashedMsg,string _sig)", type_label=return];
282 [label="34_ return ecrecover(prefixedHash, v, r, s);\n282-return-35-35", method="recoverSigner(bytes32 _hashedMsg,string _sig)", type_label=return];
293 [label="36_ function isSignedBy(bytes32 _hashedMsg, string _sig, address _addr) public pure returns (bool) {\n         require(_addr != 0x0);\n         return _addr == recoverSigner(_hashedMsg, _sig);\n     }\n293-function_definition-37-40", method="isSignedBy(bytes32 _hashedMsg,string _sig,address _addr)", type_label=function_definition];
314 [label="37_ require(_addr != 0x0);\n314-expression_statement-38-38", method="isSignedBy(bytes32 _hashedMsg,string _sig,address _addr)", type_label=expression_statement];
321 [label="38_ return _addr == recoverSigner(_hashedMsg, _sig);\n321-return-39-39", method="isSignedBy(bytes32 _hashedMsg,string _sig,address _addr)", type_label=return];
330 [label="40_ function hexstrToBytes(string _hexstr) public pure returns (bytes) {\n         uint len = bytes(_hexstr).length;\n         require(len % 2 == 0);\n         bytes memory bstr = bytes(new string(len / 2));\n         uint k = 0;\n         string memory s;\n         string memory r;\n         for (uint i = 0; i < len; i += 2) {\n             s = substring(_hexstr, i, i + 1);\n             r = substring(_hexstr, i + 1, i + 2);\n             uint p = parseInt16Char(s) * 16 + parseInt16Char(r);\n             bstr[k++] = uintToBytes32(p)[31];\n         }\n         return bstr;\n     }\n330-function_definition-41-55", method="hexstrToBytes(string _hexstr)", type_label=function_definition];
343 [label="41_ uint len = bytes(_hexstr).length;\n343-new_variable-42-42", method="hexstrToBytes(string _hexstr)", type_label=new_variable];
353 [label="42_ require(len % 2 == 0);\n353-expression_statement-43-43", method="hexstrToBytes(string _hexstr)", type_label=expression_statement];
362 [label="43_ bytes memory bstr = bytes(new string(len / 2));\n362-new_variable-44-44", method="hexstrToBytes(string _hexstr)", type_label=new_variable];
377 [label="44_ uint k = 0;\n377-new_variable-45-45", method="hexstrToBytes(string _hexstr)", type_label=new_variable];
383 [label="45_ string memory s;\n383-new_variable-46-46", method="hexstrToBytes(string _hexstr)", type_label=new_variable];
388 [label="46_ string memory r;\n388-new_variable-47-47", method="hexstrToBytes(string _hexstr)", type_label=new_variable];
393 [label="47_ for(i < len;;i += 2)\n393-for-48-53", method="hexstrToBytes(string _hexstr)", type_label=for];
4986 [label="47_ end_loop", method="hexstrToBytes(string _hexstr)", type_label=end_loop];
408 [label="48_ s = substring(_hexstr, i, i + 1);\n408-expression_statement-49-49", method="hexstrToBytes(string _hexstr)", type_label=expression_statement];
421 [label="49_ r = substring(_hexstr, i + 1, i + 2);\n421-expression_statement-50-50", method="hexstrToBytes(string _hexstr)", type_label=expression_statement];
436 [label="50_ uint p = parseInt16Char(s) * 16 + parseInt16Char(r);\n436-new_variable-51-51", method="hexstrToBytes(string _hexstr)", type_label=new_variable];
452 [label="51_ bstr[k++] = uintToBytes32(p)[31];\n452-expression_statement-52-52", method="hexstrToBytes(string _hexstr)", type_label=expression_statement];
456 [label="51_ k++\n456-expression_statement-52-52", method="hexstrToBytes(string _hexstr)", type_label=expression_statement];
464 [label="53_ return bstr;\n464-return-54-54", method="hexstrToBytes(string _hexstr)", type_label=return];
466 [label="55_ function parseInt16Char(string _char) public pure returns (uint) {\n         bytes memory bresult = bytes(_char);\n         if ((bresult[0] >= 48) && (bresult[0] <= 57)) {\n             return uint(bresult[0]) - 48;\n         } else if ((bresult[0] >= 65) && (bresult[0] <= 70)) {\n             return uint(bresult[0]) - 55;\n         } else if ((bresult[0] >= 97) && (bresult[0] <= 102)) {\n             return uint(bresult[0]) - 87;\n         } else {\n             revert();\n         }\n     }\n466-function_definition-56-67", method="parseInt16Char(string _char)", type_label=function_definition];
479 [label="56_ bytes memory bresult = bytes(_char);\n479-new_variable-57-57", method="parseInt16Char(string _char)", type_label=new_variable];
487 [label="57_ if_(bresult[0] >= 48) && (bresult[0] <= 57)\n487-if-58-66", method="parseInt16Char(string _char)", type_label=if];
5080 [label="57_ end_if", method="parseInt16Char(string _char)", type_label=end_if];
502 [label="58_ return uint(bresult[0]) - 48;\n502-return-59-59", method="parseInt16Char(string _char)", type_label=return];
510 [label="59_ if_(bresult[0] >= 65) && (bresult[0] <= 70)\n510-if-60-66", method="parseInt16Char(string _char)", type_label=if];
525 [label="60_ return uint(bresult[0]) - 55;\n525-return-61-61", method="parseInt16Char(string _char)", type_label=return];
533 [label="61_ if_(bresult[0] >= 97) && (bresult[0] <= 102)\n533-if-62-66", method="parseInt16Char(string _char)", type_label=if];
548 [label="62_ return uint(bresult[0]) - 87;\n548-return-63-63", method="parseInt16Char(string _char)", type_label=return];
559 [label="67_ function uintToBytes32(uint _uint) public pure returns (bytes b) {\n         b = new bytes(32);\n         assembly {mstore(add(b, 32), _uint)}\n     }\n559-function_definition-68-71", method="uintToBytes32(uint _uint)", type_label=function_definition];
573 [label="68_ b = new bytes(32);\n573-expression_statement-69-69", method="uintToBytes32(uint _uint)", type_label=expression_statement];
594 [label="71_ function toEthereumSignedMessage(string _msg) public pure returns (bytes32) {\n         uint len = bytes(_msg).length;\n         require(len > 0);\n         bytes memory prefix = \"\x19Ethereum Signed Message:\n\";\n         return keccak256(abi.encodePacked(prefix, uintToString(len), _msg));\n     }\n594-function_definition-72-77", method="toEthereumSignedMessage(string _msg)", type_label=function_definition];
607 [label="72_ uint len = bytes(_msg).length;\n607-new_variable-73-73", method="toEthereumSignedMessage(string _msg)", type_label=new_variable];
617 [label="73_ require(len > 0);\n617-expression_statement-74-74", method="toEthereumSignedMessage(string _msg)", type_label=expression_statement];
624 [label="74_ bytes memory prefix = \"\x19Ethereum Signed Message:\n\";\n624-new_variable-75-75", method="toEthereumSignedMessage(string _msg)", type_label=new_variable];
631 [label="75_ return keccak256(abi.encodePacked(prefix, uintToString(len), _msg));\n631-return-76-76", method="toEthereumSignedMessage(string _msg)", type_label=return];
648 [label="77_ function uintToString(uint _uint) public pure returns (string str) {\n         uint len = 0;\n         uint m = _uint + 0;\n         while (m != 0) {\n             len++;\n             m /= 10;\n         }\n         bytes memory b = new bytes(len);\n         uint i = len - 1;\n         while (_uint != 0) {\n             uint remainder = _uint % 10;\n             _uint = _uint / 10;\n             b[i--] = byte(48 + remainder);\n         }\n         str = string(b);\n     }\n648-function_definition-78-93", method="uintToString(uint _uint)", type_label=function_definition];
662 [label="78_ uint len = 0;\n662-new_variable-79-79", method="uintToString(uint _uint)", type_label=new_variable];
668 [label="79_ uint m = _uint + 0;\n668-new_variable-80-80", method="uintToString(uint _uint)", type_label=new_variable];
676 [label="80_ while\n676-while-81-84", method="uintToString(uint _uint)", type_label=while];
5269 [label="80_ end_loop", method="uintToString(uint _uint)", type_label=end_loop];
681 [label="81_ len++;\n681-expression_statement-82-82", method="uintToString(uint _uint)", type_label=expression_statement];
682 [label="81_ len++\n682-expression_statement-82-82", method="uintToString(uint _uint)", type_label=expression_statement];
684 [label="82_ m /= 10;\n684-expression_statement-83-83", method="uintToString(uint _uint)", type_label=expression_statement];
688 [label="84_ bytes memory b = new bytes(len);\n688-new_variable-85-85", method="uintToString(uint _uint)", type_label=new_variable];
699 [label="85_ uint i = len - 1;\n699-new_variable-86-86", method="uintToString(uint _uint)", type_label=new_variable];
707 [label="86_ while\n707-while-87-91", method="uintToString(uint _uint)", type_label=while];
5300 [label="86_ end_loop", method="uintToString(uint _uint)", type_label=end_loop];
712 [label="87_ uint remainder = _uint % 10;\n712-new_variable-88-88", method="uintToString(uint _uint)", type_label=new_variable];
720 [label="88_ _uint = _uint / 10;\n720-expression_statement-89-89", method="uintToString(uint _uint)", type_label=expression_statement];
726 [label="89_ b[i--] = byte(48 + remainder);\n726-expression_statement-90-90", method="uintToString(uint _uint)", type_label=expression_statement];
730 [label="89_ i--\n730-expression_statement-90-90", method="uintToString(uint _uint)", type_label=expression_statement];
737 [label="91_ str = string(b);\n737-expression_statement-92-92", method="uintToString(uint _uint)", type_label=expression_statement];
743 [label="93_ function substring(string _str, uint _startIndex, uint _endIndex) public pure returns (string) {\n         bytes memory strBytes = bytes(_str);\n         require(_startIndex <= _endIndex);\n         require(_startIndex >= 0);\n         require(_endIndex <= strBytes.length);\n         bytes memory result = new bytes(_endIndex - _startIndex);\n         for (uint i = _startIndex; i < _endIndex; i++) {\n             result[i - _startIndex] = strBytes[i];\n         }\n         return string(result);\n     }\n743-function_definition-94-104", method="substring(string _str,uint _startIndex,uint _endIndex)", type_label=function_definition];
764 [label="94_ bytes memory strBytes = bytes(_str);\n764-new_variable-95-95", method="substring(string _str,uint _startIndex,uint _endIndex)", type_label=new_variable];
772 [label="95_ require(_startIndex <= _endIndex);\n772-expression_statement-96-96", method="substring(string _str,uint _startIndex,uint _endIndex)", type_label=expression_statement];
779 [label="96_ require(_startIndex >= 0);\n779-expression_statement-97-97", method="substring(string _str,uint _startIndex,uint _endIndex)", type_label=expression_statement];
786 [label="97_ require(_endIndex <= strBytes.length);\n786-expression_statement-98-98", method="substring(string _str,uint _startIndex,uint _endIndex)", type_label=expression_statement];
795 [label="98_ bytes memory result = new bytes(_endIndex - _startIndex);\n795-new_variable-99-99", method="substring(string _str,uint _startIndex,uint _endIndex)", type_label=new_variable];
808 [label="99_ for(i < _endIndex;;i++)\n808-for-100-102", method="substring(string _str,uint _startIndex,uint _endIndex)", type_label=for];
5401 [label="99_ end_loop", method="substring(string _str,uint _startIndex,uint _endIndex)", type_label=end_loop];
819 [label="99_ i++\n819-expression_statement-100-100", method="substring(string _str,uint _startIndex,uint _endIndex)", type_label=expression_statement];
822 [label="100_ result[i - _startIndex] = strBytes[i];\n822-expression_statement-101-101", method="substring(string _str,uint _startIndex,uint _endIndex)", type_label=expression_statement];
832 [label="102_ return string(result);\n832-return-103-103", method="substring(string _str,uint _startIndex,uint _endIndex)", type_label=return];
842 [label="106_ function transfer(address _to, uint256 _value) public returns (bool success) {\n         require(balances[msg.sender] >= _value);\n         balances[msg.sender] -= _value;\n         balances[_to] += _value;\n         emit Transfer(msg.sender, _to, _value);\n         return true;\n     }\n842-function_definition-107-113", method="transfer(address _to,uint256 _value)", type_label=function_definition];
859 [label="107_ require(balances[msg.sender] >= _value);\n859-expression_statement-108-108", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
870 [label="108_ balances[msg.sender] -= _value;\n870-expression_statement-109-109", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
878 [label="109_ balances[_to] += _value;\n878-expression_statement-110-110", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
894 [label="111_ return true;\n894-return-112-112", method="transfer(address _to,uint256 _value)", type_label=return];
897 [label="113_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n         require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n         balances[_to] += _value;\n         balances[_from] -= _value;\n         allowed[_from][msg.sender] -= _value;\n         emit Transfer(_from, _to, _value);\n         return true;\n     }\n897-function_definition-114-121", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
918 [label="114_ require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n918-expression_statement-115-115", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
937 [label="115_ balances[_to] += _value;\n937-expression_statement-116-116", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
943 [label="116_ balances[_from] -= _value;\n943-expression_statement-117-117", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
949 [label="117_ allowed[_from][msg.sender] -= _value;\n949-expression_statement-118-118", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
967 [label="119_ return true;\n967-return-120-120", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
970 [label="121_ function balanceOf(address _owner) public constant returns (uint256 balance) {\n         return balances[_owner];\n     }\n970-function_definition-122-124", method="balanceOf(address _owner)", type_label=function_definition];
977 [label="121_ constant\n977-expression_statement-122-122", method="balanceOf(address _owner)", type_label=expression_statement];
985 [label="122_ return balances[_owner];\n985-return-123-123", method="balanceOf(address _owner)", type_label=return];
989 [label="124_ function approve(address _spender, uint256 _value) public returns (bool success) {\n         allowed[msg.sender][_spender] = _value;\n         emit Approval(msg.sender, _spender, _value);\n         return true;\n     }\n989-function_definition-125-129", method="approve(address _spender,uint256 _value)", type_label=function_definition];
1006 [label="125_ allowed[msg.sender][_spender] = _value;\n1006-expression_statement-126-126", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
1026 [label="127_ return true;\n1026-return-128-128", method="approve(address _spender,uint256 _value)", type_label=return];
1029 [label="129_ function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n       return allowed[_owner][_spender];\n     }\n1029-function_definition-130-132", method="allowance(address _owner,address _spender)", type_label=function_definition];
1040 [label="129_ constant\n1040-expression_statement-130-130", method="allowance(address _owner,address _spender)", type_label=expression_statement];
1048 [label="130_ return allowed[_owner][_spender];\n1048-return-131-131", method="allowance(address _owner,address _spender)", type_label=return];
1054 [label="132_ mapping (address => uint256) balances;\n1054-new_variable-133-133", method="", type_label=new_variable];
1060 [label="133_ mapping (address => mapping (address => uint256)) allowed;\n1060-new_variable-134-134", method="", type_label=new_variable];
1074 [label="136_ string public name;\n1074-new_variable-137-137", method="", type_label=new_variable];
1079 [label="137_ uint8 public decimals;\n1079-new_variable-138-138", method="", type_label=new_variable];
1084 [label="138_ string public symbol;\n1084-new_variable-139-139", method="", type_label=new_variable];
1089 [label="139_ string public version = 'H0.1';\n1089-new_variable-140-140", method="", type_label=new_variable];
1114 [label="146_ balances[msg.sender] = _initialAmount;\n1114-expression_statement-147-147", method="", type_label=expression_statement];
1122 [label="147_ totalSupply = _initialAmount;\n1122-expression_statement-148-148", method="", type_label=expression_statement];
1126 [label="148_ name = _tokenName;\n1126-expression_statement-149-149", method="", type_label=expression_statement];
1130 [label="149_ decimals = _decimalUnits;\n1130-expression_statement-150-150", method="", type_label=expression_statement];
1134 [label="150_ symbol = _tokenSymbol;\n1134-expression_statement-151-151", method="", type_label=expression_statement];
1138 [label="152_ function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n         allowed[msg.sender][_spender] = _value;\n         emit Approval(msg.sender, _spender, _value);\n         require(_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\n         return true;\n     }\n1138-function_definition-153-158", method="approveAndCall(address _spender,uint256 _value,bytes _extraData)", type_label=function_definition];
1159 [label="153_ allowed[msg.sender][_spender] = _value;\n1159-expression_statement-154-154", method="approveAndCall(address _spender,uint256 _value,bytes _extraData)", type_label=expression_statement];
1179 [label="155_ require(_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\n1179-expression_statement-156-156", method="approveAndCall(address _spender,uint256 _value,bytes _extraData)", type_label=expression_statement];
1207 [label="156_ return true;\n1207-return-157-157", method="approveAndCall(address _spender,uint256 _value,bytes _extraData)", type_label=return];
1213 [label="160_ string public constant NAME = \"Ledger Channel\";\n1213-new_variable-161-161", method="", type_label=new_variable];
1220 [label="161_ string public constant VERSION = \"0.0.1\";\n1220-new_variable-162-162", method="", type_label=new_variable];
1227 [label="162_ uint256 public numChannels = 0;\n1227-new_variable-163-163", method="", type_label=new_variable];
1441 [label="227_ struct Channel {\n         address[2] partyAddresses;  \n         uint256[4] ethBalances;  \n         uint256[4] erc20Balances;  \n         uint256[2] initialDeposit;  \n         uint256 sequence;\n         uint256 confirmTime;\n         bytes32 VCrootHash;\n         uint256 LCopenTimeout;\n         uint256 updateLCtimeout;  \n         bool isOpen;  \n         bool isUpdateLCSettling;\n         uint256 numOpenVC;\n         HumanStandardToken token;\n     }\n1441-expression_statement-228-242", method="Channel()", type_label=expression_statement];
1504 [label="242_ struct VirtualChannel {\n         bool isClose;\n         bool isInSettlementState;\n         uint256 sequence;\n         address challenger;  \n         uint256 updateVCtimeout;  \n         address partyA;  \n         address partyB;  \n         address partyI;  \n         uint256[2] ethBalances;\n         uint256[2] erc20Balances;\n         uint256[2] bond;\n         HumanStandardToken token;\n     }\n1504-expression_statement-243-256", method="VirtualChannel()", type_label=expression_statement];
1561 [label="256_ mapping(bytes32 => VirtualChannel) public virtualChannels;\n1561-new_variable-257-257", method="", type_label=new_variable];
1569 [label="257_ mapping(bytes32 => Channel) public Channels;\n1569-new_variable-258-258", method="", type_label=new_variable];
1577 [label="258_ function createChannel(\n         bytes32 _lcID,\n         address _partyI,\n         uint256 _confirmTime,\n         address _token,\n         uint256[2] _balances  \n     )\n         public\n         payable\n     {\n         require(Channels[_lcID].partyAddresses[0] == address(0), \"Channel has already been created.\");\n         require(_partyI != 0x0, \"No partyI address provided to LC creation\");\n         require(_balances[0] >= 0 && _balances[1] >= 0, \"Balances cannot be negative\");\n         Channels[_lcID].partyAddresses[0] = msg.sender;\n         Channels[_lcID].partyAddresses[1] = _partyI;\n         if(_balances[0] != 0) {\n             require(msg.value == _balances[0], \"Eth balance does not match sent value\");\n             Channels[_lcID].ethBalances[0] = msg.value;\n         }\n         if(_balances[1] != 0) {\n             Channels[_lcID].token = HumanStandardToken(_token);\n             require(Channels[_lcID].token.transferFrom(msg.sender, this, _balances[1]),\"CreateChannel: token transfer failure\");\n             Channels[_lcID].erc20Balances[0] = _balances[1];\n         }\n         Channels[_lcID].sequence = 0;\n         Channels[_lcID].confirmTime = _confirmTime;\n         Channels[_lcID].LCopenTimeout = now + _confirmTime;\n         Channels[_lcID].initialDeposit = _balances;\n         emit DidLCOpen(_lcID, msg.sender, _partyI, _balances[0], _token, _balances[1], Channels[_lcID].LCopenTimeout);\n     }\n1577-function_definition-259-288", method="createChannel(bytes32 _lcID,address _partyI,uint256 _confirmTime,address _token,uint256[2] _balances)", type_label=function_definition];
1604 [label="268_ require(Channels[_lcID].partyAddresses[0] == address(0), \"Channel has already been created.\");\n1604-expression_statement-269-269", method="createChannel(bytes32 _lcID,address _partyI,uint256 _confirmTime,address _token,uint256[2] _balances)", type_label=expression_statement];
1622 [label="269_ require(_partyI != 0x0, \"No partyI address provided to LC creation\");\n1622-expression_statement-270-270", method="createChannel(bytes32 _lcID,address _partyI,uint256 _confirmTime,address _token,uint256[2] _balances)", type_label=expression_statement];
1632 [label="270_ require(_balances[0] >= 0 && _balances[1] >= 0, \"Balances cannot be negative\");\n1632-expression_statement-271-271", method="createChannel(bytes32 _lcID,address _partyI,uint256 _confirmTime,address _token,uint256[2] _balances)", type_label=expression_statement];
1650 [label="271_ Channels[_lcID].partyAddresses[0] = msg.sender;\n1650-expression_statement-272-272", method="createChannel(bytes32 _lcID,address _partyI,uint256 _confirmTime,address _token,uint256[2] _balances)", type_label=expression_statement];
1662 [label="272_ Channels[_lcID].partyAddresses[1] = _partyI;\n1662-expression_statement-273-273", method="createChannel(bytes32 _lcID,address _partyI,uint256 _confirmTime,address _token,uint256[2] _balances)", type_label=expression_statement];
1672 [label="273_ if__balances[0] != 0\n1672-if-274-277", method="createChannel(bytes32 _lcID,address _partyI,uint256 _confirmTime,address _token,uint256[2] _balances)", type_label=if];
6265 [label="273_ end_if", method="createChannel(bytes32 _lcID,address _partyI,uint256 _confirmTime,address _token,uint256[2] _balances)", type_label=end_if];
1679 [label="274_ require(msg.value == _balances[0], \"Eth balance does not match sent value\");\n1679-expression_statement-275-275", method="createChannel(bytes32 _lcID,address _partyI,uint256 _confirmTime,address _token,uint256[2] _balances)", type_label=expression_statement];
1693 [label="275_ Channels[_lcID].ethBalances[0] = msg.value;\n1693-expression_statement-276-276", method="createChannel(bytes32 _lcID,address _partyI,uint256 _confirmTime,address _token,uint256[2] _balances)", type_label=expression_statement];
1705 [label="277_ if__balances[1] != 0\n1705-if-278-282", method="createChannel(bytes32 _lcID,address _partyI,uint256 _confirmTime,address _token,uint256[2] _balances)", type_label=if];
6298 [label="277_ end_if", method="createChannel(bytes32 _lcID,address _partyI,uint256 _confirmTime,address _token,uint256[2] _balances)", type_label=end_if];
1712 [label="278_ Channels[_lcID].token = HumanStandardToken(_token);\n1712-expression_statement-279-279", method="createChannel(bytes32 _lcID,address _partyI,uint256 _confirmTime,address _token,uint256[2] _balances)", type_label=expression_statement];
1723 [label="279_ require(Channels[_lcID].token.transferFrom(msg.sender, this, _balances[1]),\"CreateChannel: token transfer failure\");\n1723-expression_statement-280-280", method="createChannel(bytes32 _lcID,address _partyI,uint256 _confirmTime,address _token,uint256[2] _balances)", type_label=expression_statement];
1748 [label="280_ Channels[_lcID].erc20Balances[0] = _balances[1];\n1748-expression_statement-281-281", method="createChannel(bytes32 _lcID,address _partyI,uint256 _confirmTime,address _token,uint256[2] _balances)", type_label=expression_statement];
1760 [label="282_ Channels[_lcID].sequence = 0;\n1760-expression_statement-283-283", method="createChannel(bytes32 _lcID,address _partyI,uint256 _confirmTime,address _token,uint256[2] _balances)", type_label=expression_statement];
1768 [label="283_ Channels[_lcID].confirmTime = _confirmTime;\n1768-expression_statement-284-284", method="createChannel(bytes32 _lcID,address _partyI,uint256 _confirmTime,address _token,uint256[2] _balances)", type_label=expression_statement];
1776 [label="284_ Channels[_lcID].LCopenTimeout = now + _confirmTime;\n1776-expression_statement-285-285", method="createChannel(bytes32 _lcID,address _partyI,uint256 _confirmTime,address _token,uint256[2] _balances)", type_label=expression_statement];
1786 [label="285_ Channels[_lcID].initialDeposit = _balances;\n1786-expression_statement-286-286", method="createChannel(bytes32 _lcID,address _partyI,uint256 _confirmTime,address _token,uint256[2] _balances)", type_label=expression_statement];
1820 [label="288_ function LCOpenTimeout(bytes32 _lcID) public {\n         require(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false);\n         require(now > Channels[_lcID].LCopenTimeout);\n         if(Channels[_lcID].initialDeposit[0] != 0) {\n             Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]);\n         }\n         if(Channels[_lcID].initialDeposit[1] != 0) {\n             require(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0], Channels[_lcID].erc20Balances[0]),\"CreateChannel: token transfer failure\");\n         }\n         emit DidLCClose(_lcID, 0, Channels[_lcID].ethBalances[0], Channels[_lcID].erc20Balances[0], 0, 0);\n         delete Channels[_lcID];\n     }\n1820-function_definition-289-300", method="LCOpenTimeout(bytes32 _lcID)", type_label=function_definition];
1828 [label="289_ require(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false);\n1828-expression_statement-290-290", method="LCOpenTimeout(bytes32 _lcID)", type_label=expression_statement];
1852 [label="290_ require(now > Channels[_lcID].LCopenTimeout);\n1852-expression_statement-291-291", method="LCOpenTimeout(bytes32 _lcID)", type_label=expression_statement];
1863 [label="291_ if_Channels[_lcID].initialDeposit[0] != 0\n1863-if-292-294", method="LCOpenTimeout(bytes32 _lcID)", type_label=if];
6456 [label="291_ end_if", method="LCOpenTimeout(bytes32 _lcID)", type_label=end_if];
1874 [label="292_ Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]);\n1874-expression_statement-293-293", method="LCOpenTimeout(bytes32 _lcID)", type_label=expression_statement];
1893 [label="294_ if_Channels[_lcID].initialDeposit[1] != 0\n1893-if-295-297", method="LCOpenTimeout(bytes32 _lcID)", type_label=if];
6486 [label="294_ end_if", method="LCOpenTimeout(bytes32 _lcID)", type_label=end_if];
1904 [label="295_ require(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0], Channels[_lcID].erc20Balances[0]),\"CreateChannel: token transfer failure\");\n1904-expression_statement-296-296", method="LCOpenTimeout(bytes32 _lcID)", type_label=expression_statement];
1961 [label="298_ delete Channels[_lcID];\n1961-expression_statement-299-299", method="LCOpenTimeout(bytes32 _lcID)", type_label=expression_statement];
1966 [label="300_ function joinChannel(bytes32 _lcID, uint256[2] _balances) public payable {\n         require(Channels[_lcID].isOpen == false);\n         require(msg.sender == Channels[_lcID].partyAddresses[1]);\n         if(_balances[0] != 0) {\n             require(msg.value == _balances[0], \"state balance does not match sent value\");\n             Channels[_lcID].ethBalances[1] = msg.value;\n         }\n         if(_balances[1] != 0) {\n             require(Channels[_lcID].token.transferFrom(msg.sender, this, _balances[1]),\"joinChannel: token transfer failure\");\n             Channels[_lcID].erc20Balances[1] = _balances[1];\n         }\n         Channels[_lcID].initialDeposit[0]+=_balances[0];\n         Channels[_lcID].initialDeposit[1]+=_balances[1];\n         Channels[_lcID].isOpen = true;\n         numChannels++;\n         emit DidLCJoin(_lcID, _balances[0], _balances[1]);\n     }\n1966-function_definition-301-317", method="joinChannel(bytes32 _lcID,uint256[2] _balances)", type_label=function_definition];
1981 [label="301_ require(Channels[_lcID].isOpen == false);\n1981-expression_statement-302-302", method="joinChannel(bytes32 _lcID,uint256[2] _balances)", type_label=expression_statement];
1993 [label="302_ require(msg.sender == Channels[_lcID].partyAddresses[1]);\n1993-expression_statement-303-303", method="joinChannel(bytes32 _lcID,uint256[2] _balances)", type_label=expression_statement];
2008 [label="303_ if__balances[0] != 0\n2008-if-304-307", method="joinChannel(bytes32 _lcID,uint256[2] _balances)", type_label=if];
6601 [label="303_ end_if", method="joinChannel(bytes32 _lcID,uint256[2] _balances)", type_label=end_if];
2015 [label="304_ require(msg.value == _balances[0], \"state balance does not match sent value\");\n2015-expression_statement-305-305", method="joinChannel(bytes32 _lcID,uint256[2] _balances)", type_label=expression_statement];
2029 [label="305_ Channels[_lcID].ethBalances[1] = msg.value;\n2029-expression_statement-306-306", method="joinChannel(bytes32 _lcID,uint256[2] _balances)", type_label=expression_statement];
2041 [label="307_ if__balances[1] != 0\n2041-if-308-311", method="joinChannel(bytes32 _lcID,uint256[2] _balances)", type_label=if];
6634 [label="307_ end_if", method="joinChannel(bytes32 _lcID,uint256[2] _balances)", type_label=end_if];
2048 [label="308_ require(Channels[_lcID].token.transferFrom(msg.sender, this, _balances[1]),\"joinChannel: token transfer failure\");\n2048-expression_statement-309-309", method="joinChannel(bytes32 _lcID,uint256[2] _balances)", type_label=expression_statement];
2073 [label="309_ Channels[_lcID].erc20Balances[1] = _balances[1];\n2073-expression_statement-310-310", method="joinChannel(bytes32 _lcID,uint256[2] _balances)", type_label=expression_statement];
2085 [label="311_ Channels[_lcID].initialDeposit[0]+=_balances[0];\n2085-expression_statement-312-312", method="joinChannel(bytes32 _lcID,uint256[2] _balances)", type_label=expression_statement];
2097 [label="312_ Channels[_lcID].initialDeposit[1]+=_balances[1];\n2097-expression_statement-313-313", method="joinChannel(bytes32 _lcID,uint256[2] _balances)", type_label=expression_statement];
2109 [label="313_ Channels[_lcID].isOpen = true;\n2109-expression_statement-314-314", method="joinChannel(bytes32 _lcID,uint256[2] _balances)", type_label=expression_statement];
2118 [label="314_ numChannels++;\n2118-expression_statement-315-315", method="joinChannel(bytes32 _lcID,uint256[2] _balances)", type_label=expression_statement];
2119 [label="314_ numChannels++\n2119-expression_statement-315-315", method="joinChannel(bytes32 _lcID,uint256[2] _balances)", type_label=expression_statement];
2133 [label="317_ function deposit(bytes32 _lcID, address recipient, uint256 _balance, bool isToken) public payable {\n         require(Channels[_lcID].isOpen == true, \"Tried adding funds to a closed channel\");\n         require(recipient == Channels[_lcID].partyAddresses[0] || recipient == Channels[_lcID].partyAddresses[1]);\n         if (Channels[_lcID].partyAddresses[0] == recipient) {\n             if(isToken) {\n                 require(Channels[_lcID].token.transferFrom(msg.sender, this, _balance),\"deposit: token transfer failure\");\n                 Channels[_lcID].erc20Balances[2] += _balance;\n             } else {\n                 require(msg.value == _balance, \"state balance does not match sent value\");\n                 Channels[_lcID].ethBalances[2] += msg.value;\n             }\n         }\n         if (Channels[_lcID].partyAddresses[1] == recipient) {\n             if(isToken) {\n                 require(Channels[_lcID].token.transferFrom(msg.sender, this, _balance),\"deposit: token transfer failure\");\n                 Channels[_lcID].erc20Balances[3] += _balance;\n             } else {\n                 require(msg.value == _balance, \"state balance does not match sent value\");\n                 Channels[_lcID].ethBalances[3] += msg.value;\n             }\n         }\n         emit DidLCDeposit(_lcID, recipient, _balance, isToken);\n     }\n2133-function_definition-318-340", method="deposit(bytes32 _lcID,address recipient,uint256 _balance,bool isToken)", type_label=function_definition];
2154 [label="318_ require(Channels[_lcID].isOpen == true, \"Tried adding funds to a closed channel\");\n2154-expression_statement-319-319", method="deposit(bytes32 _lcID,address recipient,uint256 _balance,bool isToken)", type_label=expression_statement];
2169 [label="319_ require(recipient == Channels[_lcID].partyAddresses[0] || recipient == Channels[_lcID].partyAddresses[1]);\n2169-expression_statement-320-320", method="deposit(bytes32 _lcID,address recipient,uint256 _balance,bool isToken)", type_label=expression_statement];
2192 [label="320_ if_Channels[_lcID].partyAddresses[0] == recipient\n2192-if-321-329", method="deposit(bytes32 _lcID,address recipient,uint256 _balance,bool isToken)", type_label=if];
6785 [label="320_ end_if", method="deposit(bytes32 _lcID,address recipient,uint256 _balance,bool isToken)", type_label=end_if];
2203 [label="321_ if\n2203-if-322-328", method="deposit(bytes32 _lcID,address recipient,uint256 _balance,bool isToken)", type_label=if];
6796 [label="321_ end_if", method="deposit(bytes32 _lcID,address recipient,uint256 _balance,bool isToken)", type_label=end_if];
2206 [label="322_ require(Channels[_lcID].token.transferFrom(msg.sender, this, _balance),\"deposit: token transfer failure\");\n2206-expression_statement-323-323", method="deposit(bytes32 _lcID,address recipient,uint256 _balance,bool isToken)", type_label=expression_statement];
2229 [label="323_ Channels[_lcID].erc20Balances[2] += _balance;\n2229-expression_statement-324-324", method="deposit(bytes32 _lcID,address recipient,uint256 _balance,bool isToken)", type_label=expression_statement];
2240 [label="325_ require(msg.value == _balance, \"state balance does not match sent value\");\n2240-expression_statement-326-326", method="deposit(bytes32 _lcID,address recipient,uint256 _balance,bool isToken)", type_label=expression_statement];
2252 [label="326_ Channels[_lcID].ethBalances[2] += msg.value;\n2252-expression_statement-327-327", method="deposit(bytes32 _lcID,address recipient,uint256 _balance,bool isToken)", type_label=expression_statement];
2264 [label="329_ if_Channels[_lcID].partyAddresses[1] == recipient\n2264-if-330-338", method="deposit(bytes32 _lcID,address recipient,uint256 _balance,bool isToken)", type_label=if];
6857 [label="329_ end_if", method="deposit(bytes32 _lcID,address recipient,uint256 _balance,bool isToken)", type_label=end_if];
2275 [label="330_ if\n2275-if-331-337", method="deposit(bytes32 _lcID,address recipient,uint256 _balance,bool isToken)", type_label=if];
6868 [label="330_ end_if", method="deposit(bytes32 _lcID,address recipient,uint256 _balance,bool isToken)", type_label=end_if];
2278 [label="331_ require(Channels[_lcID].token.transferFrom(msg.sender, this, _balance),\"deposit: token transfer failure\");\n2278-expression_statement-332-332", method="deposit(bytes32 _lcID,address recipient,uint256 _balance,bool isToken)", type_label=expression_statement];
2301 [label="332_ Channels[_lcID].erc20Balances[3] += _balance;\n2301-expression_statement-333-333", method="deposit(bytes32 _lcID,address recipient,uint256 _balance,bool isToken)", type_label=expression_statement];
2312 [label="334_ require(msg.value == _balance, \"state balance does not match sent value\");\n2312-expression_statement-335-335", method="deposit(bytes32 _lcID,address recipient,uint256 _balance,bool isToken)", type_label=expression_statement];
2324 [label="335_ Channels[_lcID].ethBalances[3] += msg.value;\n2324-expression_statement-336-336", method="deposit(bytes32 _lcID,address recipient,uint256 _balance,bool isToken)", type_label=expression_statement];
2346 [label="340_ function consensusCloseChannel(\n         bytes32 _lcID,\n         uint256 _sequence,\n         uint256[4] _balances,  \n         string _sigA,\n         string _sigI\n     )\n         public\n     {\n         require(Channels[_lcID].isOpen == true);\n         uint256 totalEthDeposit = Channels[_lcID].initialDeposit[0] + Channels[_lcID].ethBalances[2] + Channels[_lcID].ethBalances[3];\n         uint256 totalTokenDeposit = Channels[_lcID].initialDeposit[1] + Channels[_lcID].erc20Balances[2] + Channels[_lcID].erc20Balances[3];\n         require(totalEthDeposit == _balances[0] + _balances[1]);\n         require(totalTokenDeposit == _balances[2] + _balances[3]);\n         bytes32 _state = keccak256(\n             abi.encodePacked(\n                 _lcID,\n                 true,\n                 _sequence,\n                 uint256(0),\n                 bytes32(0x0),\n                 Channels[_lcID].partyAddresses[0],\n                 Channels[_lcID].partyAddresses[1],\n                 _balances[0],\n                 _balances[1],\n                 _balances[2],\n                 _balances[3]\n             )\n         );\n         require(Channels[_lcID].partyAddresses[0] == ECTools.recoverSigner(_state, _sigA));\n         require(Channels[_lcID].partyAddresses[1] == ECTools.recoverSigner(_state, _sigI));\n         Channels[_lcID].isOpen = false;\n         if(_balances[0] != 0 || _balances[1] != 0) {\n             Channels[_lcID].partyAddresses[0].transfer(_balances[0]);\n             Channels[_lcID].partyAddresses[1].transfer(_balances[1]);\n         }\n         if(_balances[2] != 0 || _balances[3] != 0) {\n             require(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0], _balances[2]),\"happyCloseChannel: token transfer failure\");\n             require(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[1], _balances[3]),\"happyCloseChannel: token transfer failure\");\n         }\n         numChannels--;\n         emit DidLCClose(_lcID, _sequence, _balances[0], _balances[1], _balances[2], _balances[3]);\n     }\n2346-function_definition-341-383", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=function_definition];
2372 [label="349_ require(Channels[_lcID].isOpen == true);\n2372-expression_statement-350-350", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=expression_statement];
2384 [label="350_ uint256 totalEthDeposit = Channels[_lcID].initialDeposit[0] + Channels[_lcID].ethBalances[2] + Channels[_lcID].ethBalances[3];\n2384-new_variable-351-351", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=new_variable];
2412 [label="351_ uint256 totalTokenDeposit = Channels[_lcID].initialDeposit[1] + Channels[_lcID].erc20Balances[2] + Channels[_lcID].erc20Balances[3];\n2412-new_variable-352-352", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=new_variable];
2440 [label="352_ require(totalEthDeposit == _balances[0] + _balances[1]);\n2440-expression_statement-353-353", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=expression_statement];
2453 [label="353_ require(totalTokenDeposit == _balances[2] + _balances[3]);\n2453-expression_statement-354-354", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=expression_statement];
2466 [label="354_ bytes32 _state = keccak256(\n             abi.encodePacked(\n                 _lcID,\n                 true,\n                 _sequence,\n                 uint256(0),\n                 bytes32(0x0),\n                 Channels[_lcID].partyAddresses[0],\n                 Channels[_lcID].partyAddresses[1],\n                 _balances[0],\n                 _balances[1],\n                 _balances[2],\n                 _balances[3]\n             )\n         );\n2466-new_variable-355-369", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=new_variable];
2525 [label="369_ require(Channels[_lcID].partyAddresses[0] == ECTools.recoverSigner(_state, _sigA));\n2525-expression_statement-370-370", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=expression_statement];
2545 [label="370_ require(Channels[_lcID].partyAddresses[1] == ECTools.recoverSigner(_state, _sigI));\n2545-expression_statement-371-371", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=expression_statement];
2565 [label="371_ Channels[_lcID].isOpen = false;\n2565-expression_statement-372-372", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=expression_statement];
2574 [label="372_ if__balances[0] != 0 || _balances[1] != 0\n2574-if-373-376", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=if];
7167 [label="372_ end_if", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=end_if];
2587 [label="373_ Channels[_lcID].partyAddresses[0].transfer(_balances[0]);\n2587-expression_statement-374-374", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=expression_statement];
2602 [label="374_ Channels[_lcID].partyAddresses[1].transfer(_balances[1]);\n2602-expression_statement-375-375", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=expression_statement];
2617 [label="376_ if__balances[2] != 0 || _balances[3] != 0\n2617-if-377-380", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=if];
7210 [label="376_ end_if", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=end_if];
2630 [label="377_ require(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0], _balances[2]),\"happyCloseChannel: token transfer failure\");\n2630-expression_statement-378-378", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=expression_statement];
2657 [label="378_ require(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[1], _balances[3]),\"happyCloseChannel: token transfer failure\");\n2657-expression_statement-379-379", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=expression_statement];
2684 [label="380_ numChannels--;\n2684-expression_statement-381-381", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=expression_statement];
2685 [label="380_ numChannels--\n2685-expression_statement-381-381", method="consensusCloseChannel(bytes32 _lcID,uint256 _sequence,uint256[4] _balances,string _sigA,string _sigI)", type_label=expression_statement];
2709 [label="383_ function updateLCstate(\n         bytes32 _lcID,\n         uint256[6] updateParams,  \n         bytes32 _VCroot,\n         string _sigA,\n         string _sigI\n     )\n         public\n     {\n         Channel storage channel = Channels[_lcID];\n         require(channel.isOpen);\n         require(channel.sequence < updateParams[0]);  \n         require(channel.ethBalances[0] + channel.ethBalances[1] >= updateParams[2] + updateParams[3]);\n         require(channel.erc20Balances[0] + channel.erc20Balances[1] >= updateParams[4] + updateParams[5]);\n         if(channel.isUpdateLCSettling == true) {\n             require(channel.updateLCtimeout > now);\n         }\n         bytes32 _state = keccak256(\n             abi.encodePacked(\n                 _lcID,\n                 false,\n                 updateParams[0],\n                 updateParams[1],\n                 _VCroot,\n                 channel.partyAddresses[0],\n                 channel.partyAddresses[1],\n                 updateParams[2],\n                 updateParams[3],\n                 updateParams[4],\n                 updateParams[5]\n             )\n         );\n         require(channel.partyAddresses[0] == ECTools.recoverSigner(_state, _sigA));\n         require(channel.partyAddresses[1] == ECTools.recoverSigner(_state, _sigI));\n         channel.sequence = updateParams[0];\n         channel.numOpenVC = updateParams[1];\n         channel.ethBalances[0] = updateParams[2];\n         channel.ethBalances[1] = updateParams[3];\n         channel.erc20Balances[0] = updateParams[4];\n         channel.erc20Balances[1] = updateParams[5];\n         channel.VCrootHash = _VCroot;\n         channel.isUpdateLCSettling = true;\n         channel.updateLCtimeout = now + channel.confirmTime;\n         emit DidLCUpdateState (\n             _lcID,\n             updateParams[0],\n             updateParams[1],\n             updateParams[2],\n             updateParams[3],\n             updateParams[4],\n             updateParams[5],\n             _VCroot,\n             channel.updateLCtimeout\n         );\n     }\n2709-function_definition-384-438", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=function_definition];
2735 [label="392_ Channel storage channel = Channels[_lcID];\n2735-new_variable-393-393", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=new_variable];
2744 [label="393_ require(channel.isOpen);\n2744-expression_statement-394-394", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=expression_statement];
2751 [label="394_ require(channel.sequence < updateParams[0]);\n2751-expression_statement-395-395", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=expression_statement];
2762 [label="395_ require(channel.ethBalances[0] + channel.ethBalances[1] >= updateParams[2] + updateParams[3]);\n2762-expression_statement-396-396", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=expression_statement];
2785 [label="396_ require(channel.erc20Balances[0] + channel.erc20Balances[1] >= updateParams[4] + updateParams[5]);\n2785-expression_statement-397-397", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=expression_statement];
2808 [label="397_ if_channel.isUpdateLCSettling == true\n2808-if-398-400", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=if];
7401 [label="397_ end_if", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=end_if];
2816 [label="398_ require(channel.updateLCtimeout > now);\n2816-expression_statement-399-399", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=expression_statement];
2825 [label="400_ bytes32 _state = keccak256(\n             abi.encodePacked(\n                 _lcID,\n                 false,\n                 updateParams[0],\n                 updateParams[1],\n                 _VCroot,\n                 channel.partyAddresses[0],\n                 channel.partyAddresses[1],\n                 updateParams[2],\n                 updateParams[3],\n                 updateParams[4],\n                 updateParams[5]\n             )\n         );\n2825-new_variable-401-415", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=new_variable];
2880 [label="415_ require(channel.partyAddresses[0] == ECTools.recoverSigner(_state, _sigA));\n2880-expression_statement-416-416", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=expression_statement];
2898 [label="416_ require(channel.partyAddresses[1] == ECTools.recoverSigner(_state, _sigI));\n2898-expression_statement-417-417", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=expression_statement];
2916 [label="417_ channel.sequence = updateParams[0];\n2916-expression_statement-418-418", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=expression_statement];
2924 [label="418_ channel.numOpenVC = updateParams[1];\n2924-expression_statement-419-419", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=expression_statement];
2932 [label="419_ channel.ethBalances[0] = updateParams[2];\n2932-expression_statement-420-420", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=expression_statement];
2942 [label="420_ channel.ethBalances[1] = updateParams[3];\n2942-expression_statement-421-421", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=expression_statement];
2952 [label="421_ channel.erc20Balances[0] = updateParams[4];\n2952-expression_statement-422-422", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=expression_statement];
2962 [label="422_ channel.erc20Balances[1] = updateParams[5];\n2962-expression_statement-423-423", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=expression_statement];
2972 [label="423_ channel.VCrootHash = _VCroot;\n2972-expression_statement-424-424", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=expression_statement];
2978 [label="424_ channel.isUpdateLCSettling = true;\n2978-expression_statement-425-425", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=expression_statement];
2985 [label="425_ channel.updateLCtimeout = now + channel.confirmTime;\n2985-expression_statement-426-426", method="updateLCstate(bytes32 _lcID,uint256[6] updateParams,bytes32 _VCroot,string _sigA,string _sigI)", type_label=expression_statement];
3029 [label="438_ function initVCstate(\n         bytes32 _lcID,\n         bytes32 _vcID,\n         bytes _proof,\n         address _partyA,\n         address _partyB,\n         uint256[2] _bond,\n         uint256[4] _balances,  \n         string sigA\n     )\n         public\n     {\n         require(Channels[_lcID].isOpen, \"LC is closed.\");\n         require(!virtualChannels[_vcID].isClose, \"VC is closed.\");\n         require(Channels[_lcID].updateLCtimeout < now, \"LC timeout not over.\");\n         require(virtualChannels[_vcID].updateVCtimeout == 0);\n         bytes32 _initState = keccak256(\n             abi.encodePacked(_vcID, uint256(0), _partyA, _partyB, _bond[0], _bond[1], _balances[0], _balances[1], _balances[2], _balances[3])\n         );\n         require(_partyA == ECTools.recoverSigner(_initState, sigA));\n         require(_isContained(_initState, _proof, Channels[_lcID].VCrootHash) == true);\n         virtualChannels[_vcID].partyA = _partyA;  \n         virtualChannels[_vcID].partyB = _partyB;  \n         virtualChannels[_vcID].sequence = uint256(0);\n         virtualChannels[_vcID].ethBalances[0] = _balances[0];\n         virtualChannels[_vcID].ethBalances[1] = _balances[1];\n         virtualChannels[_vcID].erc20Balances[0] = _balances[2];\n         virtualChannels[_vcID].erc20Balances[1] = _balances[3];\n         virtualChannels[_vcID].bond = _bond;\n         virtualChannels[_vcID].updateVCtimeout = now + Channels[_lcID].confirmTime;\n         virtualChannels[_vcID].isInSettlementState = true;\n         emit DidVCInit(_lcID, _vcID, _proof, uint256(0), _partyA, _partyB, _balances[0], _balances[1]);\n     }\n3029-function_definition-439-471", method="initVCstate(bytes32 _lcID,bytes32 _vcID,bytes _proof,address _partyA,address _partyB,uint256[2] _bond,uint256[4] _balances,string sigA)", type_label=function_definition];
3069 [label="450_ require(Channels[_lcID].isOpen, \"LC is closed.\");\n3069-expression_statement-451-451", method="initVCstate(bytes32 _lcID,bytes32 _vcID,bytes _proof,address _partyA,address _partyB,uint256[2] _bond,uint256[4] _balances,string sigA)", type_label=expression_statement];
3081 [label="451_ require(!virtualChannels[_vcID].isClose, \"VC is closed.\");\n3081-expression_statement-452-452", method="initVCstate(bytes32 _lcID,bytes32 _vcID,bytes _proof,address _partyA,address _partyB,uint256[2] _bond,uint256[4] _balances,string sigA)", type_label=expression_statement];
3094 [label="452_ require(Channels[_lcID].updateLCtimeout < now, \"LC timeout not over.\");\n3094-expression_statement-453-453", method="initVCstate(bytes32 _lcID,bytes32 _vcID,bytes _proof,address _partyA,address _partyB,uint256[2] _bond,uint256[4] _balances,string sigA)", type_label=expression_statement];
3108 [label="453_ require(virtualChannels[_vcID].updateVCtimeout == 0);\n3108-expression_statement-454-454", method="initVCstate(bytes32 _lcID,bytes32 _vcID,bytes _proof,address _partyA,address _partyB,uint256[2] _bond,uint256[4] _balances,string sigA)", type_label=expression_statement];
3119 [label="454_ bytes32 _initState = keccak256(\n             abi.encodePacked(_vcID, uint256(0), _partyA, _partyB, _bond[0], _bond[1], _balances[0], _balances[1], _balances[2], _balances[3])\n         );\n3119-new_variable-455-457", method="initVCstate(bytes32 _lcID,bytes32 _vcID,bytes _proof,address _partyA,address _partyB,uint256[2] _bond,uint256[4] _balances,string sigA)", type_label=new_variable];
3165 [label="457_ require(_partyA == ECTools.recoverSigner(_initState, sigA));\n3165-expression_statement-458-458", method="initVCstate(bytes32 _lcID,bytes32 _vcID,bytes _proof,address _partyA,address _partyB,uint256[2] _bond,uint256[4] _balances,string sigA)", type_label=expression_statement];
3179 [label="458_ require(_isContained(_initState, _proof, Channels[_lcID].VCrootHash) == true);\n3179-expression_statement-459-459", method="initVCstate(bytes32 _lcID,bytes32 _vcID,bytes _proof,address _partyA,address _partyB,uint256[2] _bond,uint256[4] _balances,string sigA)", type_label=expression_statement];
3198 [label="459_ virtualChannels[_vcID].partyA = _partyA;\n3198-expression_statement-460-460", method="initVCstate(bytes32 _lcID,bytes32 _vcID,bytes _proof,address _partyA,address _partyB,uint256[2] _bond,uint256[4] _balances,string sigA)", type_label=expression_statement];
3206 [label="460_ virtualChannels[_vcID].partyB = _partyB;\n3206-expression_statement-461-461", method="initVCstate(bytes32 _lcID,bytes32 _vcID,bytes _proof,address _partyA,address _partyB,uint256[2] _bond,uint256[4] _balances,string sigA)", type_label=expression_statement];
3214 [label="461_ virtualChannels[_vcID].sequence = uint256(0);\n3214-expression_statement-462-462", method="initVCstate(bytes32 _lcID,bytes32 _vcID,bytes _proof,address _partyA,address _partyB,uint256[2] _bond,uint256[4] _balances,string sigA)", type_label=expression_statement];
3224 [label="462_ virtualChannels[_vcID].ethBalances[0] = _balances[0];\n3224-expression_statement-463-463", method="initVCstate(bytes32 _lcID,bytes32 _vcID,bytes _proof,address _partyA,address _partyB,uint256[2] _bond,uint256[4] _balances,string sigA)", type_label=expression_statement];
3236 [label="463_ virtualChannels[_vcID].ethBalances[1] = _balances[1];\n3236-expression_statement-464-464", method="initVCstate(bytes32 _lcID,bytes32 _vcID,bytes _proof,address _partyA,address _partyB,uint256[2] _bond,uint256[4] _balances,string sigA)", type_label=expression_statement];
3248 [label="464_ virtualChannels[_vcID].erc20Balances[0] = _balances[2];\n3248-expression_statement-465-465", method="initVCstate(bytes32 _lcID,bytes32 _vcID,bytes _proof,address _partyA,address _partyB,uint256[2] _bond,uint256[4] _balances,string sigA)", type_label=expression_statement];
3260 [label="465_ virtualChannels[_vcID].erc20Balances[1] = _balances[3];\n3260-expression_statement-466-466", method="initVCstate(bytes32 _lcID,bytes32 _vcID,bytes _proof,address _partyA,address _partyB,uint256[2] _bond,uint256[4] _balances,string sigA)", type_label=expression_statement];
3272 [label="466_ virtualChannels[_vcID].bond = _bond;\n3272-expression_statement-467-467", method="initVCstate(bytes32 _lcID,bytes32 _vcID,bytes _proof,address _partyA,address _partyB,uint256[2] _bond,uint256[4] _balances,string sigA)", type_label=expression_statement];
3280 [label="467_ virtualChannels[_vcID].updateVCtimeout = now + Channels[_lcID].confirmTime;\n3280-expression_statement-468-468", method="initVCstate(bytes32 _lcID,bytes32 _vcID,bytes _proof,address _partyA,address _partyB,uint256[2] _bond,uint256[4] _balances,string sigA)", type_label=expression_statement];
3294 [label="468_ virtualChannels[_vcID].isInSettlementState = true;\n3294-expression_statement-469-469", method="initVCstate(bytes32 _lcID,bytes32 _vcID,bytes _proof,address _partyA,address _partyB,uint256[2] _bond,uint256[4] _balances,string sigA)", type_label=expression_statement];
3327 [label="471_ function settleVC(\n         bytes32 _lcID,\n         bytes32 _vcID,\n         uint256 updateSeq,\n         address _partyA,\n         address _partyB,\n         uint256[4] updateBal,  \n         string sigA\n     )\n         public\n     {\n         require(Channels[_lcID].isOpen, \"LC is closed.\");\n         require(!virtualChannels[_vcID].isClose, \"VC is closed.\");\n         require(virtualChannels[_vcID].sequence < updateSeq, \"VC sequence is higher than update sequence.\");\n         require(\n             virtualChannels[_vcID].ethBalances[1] < updateBal[1] && virtualChannels[_vcID].erc20Balances[1] < updateBal[3],\n             \"State updates may only increase recipient balance.\"\n         );\n         require(\n             virtualChannels[_vcID].bond[0] == updateBal[0] + updateBal[1] &&\n             virtualChannels[_vcID].bond[1] == updateBal[2] + updateBal[3],\n             \"Incorrect balances for bonded amount\");\n         require(Channels[_lcID].updateLCtimeout < now);  \n         bytes32 _updateState = keccak256(\n             abi.encodePacked(\n                 _vcID,\n                 updateSeq,\n                 _partyA,\n                 _partyB,\n                 virtualChannels[_vcID].bond[0],\n                 virtualChannels[_vcID].bond[1],\n                 updateBal[0],\n                 updateBal[1],\n                 updateBal[2],\n                 updateBal[3]\n             )\n         );\n         require(virtualChannels[_vcID].partyA == ECTools.recoverSigner(_updateState, sigA));\n         virtualChannels[_vcID].challenger = msg.sender;\n         virtualChannels[_vcID].sequence = updateSeq;\n         virtualChannels[_vcID].ethBalances[0] = updateBal[0];\n         virtualChannels[_vcID].ethBalances[1] = updateBal[1];\n         virtualChannels[_vcID].erc20Balances[0] = updateBal[2];\n         virtualChannels[_vcID].erc20Balances[1] = updateBal[3];\n         virtualChannels[_vcID].updateVCtimeout = now + Channels[_lcID].confirmTime;\n         emit DidVCSettle(_lcID, _vcID, updateSeq, updateBal[0], updateBal[1], msg.sender, virtualChannels[_vcID].updateVCtimeout);\n     }\n3327-function_definition-472-518", method="settleVC(bytes32 _lcID,bytes32 _vcID,uint256 updateSeq,address _partyA,address _partyB,uint256[4] updateBal,string sigA)", type_label=function_definition];
3361 [label="482_ require(Channels[_lcID].isOpen, \"LC is closed.\");\n3361-expression_statement-483-483", method="settleVC(bytes32 _lcID,bytes32 _vcID,uint256 updateSeq,address _partyA,address _partyB,uint256[4] updateBal,string sigA)", type_label=expression_statement];
3373 [label="483_ require(!virtualChannels[_vcID].isClose, \"VC is closed.\");\n3373-expression_statement-484-484", method="settleVC(bytes32 _lcID,bytes32 _vcID,uint256 updateSeq,address _partyA,address _partyB,uint256[4] updateBal,string sigA)", type_label=expression_statement];
3386 [label="484_ require(virtualChannels[_vcID].sequence < updateSeq, \"VC sequence is higher than update sequence.\");\n3386-expression_statement-485-485", method="settleVC(bytes32 _lcID,bytes32 _vcID,uint256 updateSeq,address _partyA,address _partyB,uint256[4] updateBal,string sigA)", type_label=expression_statement];
3400 [label="485_ require(\n             virtualChannels[_vcID].ethBalances[1] < updateBal[1] && virtualChannels[_vcID].erc20Balances[1] < updateBal[3],\n             \"State updates may only increase recipient balance.\"\n         );\n3400-expression_statement-486-489", method="settleVC(bytes32 _lcID,bytes32 _vcID,uint256 updateSeq,address _partyA,address _partyB,uint256[4] updateBal,string sigA)", type_label=expression_statement];
3430 [label="489_ require(\n             virtualChannels[_vcID].bond[0] == updateBal[0] + updateBal[1] &&\n             virtualChannels[_vcID].bond[1] == updateBal[2] + updateBal[3],\n             \"Incorrect balances for bonded amount\");\n3430-expression_statement-490-493", method="settleVC(bytes32 _lcID,bytes32 _vcID,uint256 updateSeq,address _partyA,address _partyB,uint256[4] updateBal,string sigA)", type_label=expression_statement];
3468 [label="493_ require(Channels[_lcID].updateLCtimeout < now);\n3468-expression_statement-494-494", method="settleVC(bytes32 _lcID,bytes32 _vcID,uint256 updateSeq,address _partyA,address _partyB,uint256[4] updateBal,string sigA)", type_label=expression_statement];
3479 [label="494_ bytes32 _updateState = keccak256(\n             abi.encodePacked(\n                 _vcID,\n                 updateSeq,\n                 _partyA,\n                 _partyB,\n                 virtualChannels[_vcID].bond[0],\n                 virtualChannels[_vcID].bond[1],\n                 updateBal[0],\n                 updateBal[1],\n                 updateBal[2],\n                 updateBal[3]\n             )\n         );\n3479-new_variable-495-508", method="settleVC(bytes32 _lcID,bytes32 _vcID,uint256 updateSeq,address _partyA,address _partyB,uint256[4] updateBal,string sigA)", type_label=new_variable];
3531 [label="508_ require(virtualChannels[_vcID].partyA == ECTools.recoverSigner(_updateState, sigA));\n3531-expression_statement-509-509", method="settleVC(bytes32 _lcID,bytes32 _vcID,uint256 updateSeq,address _partyA,address _partyB,uint256[4] updateBal,string sigA)", type_label=expression_statement];
3549 [label="509_ virtualChannels[_vcID].challenger = msg.sender;\n3549-expression_statement-510-510", method="settleVC(bytes32 _lcID,bytes32 _vcID,uint256 updateSeq,address _partyA,address _partyB,uint256[4] updateBal,string sigA)", type_label=expression_statement];
3559 [label="510_ virtualChannels[_vcID].sequence = updateSeq;\n3559-expression_statement-511-511", method="settleVC(bytes32 _lcID,bytes32 _vcID,uint256 updateSeq,address _partyA,address _partyB,uint256[4] updateBal,string sigA)", type_label=expression_statement];
3567 [label="511_ virtualChannels[_vcID].ethBalances[0] = updateBal[0];\n3567-expression_statement-512-512", method="settleVC(bytes32 _lcID,bytes32 _vcID,uint256 updateSeq,address _partyA,address _partyB,uint256[4] updateBal,string sigA)", type_label=expression_statement];
3579 [label="512_ virtualChannels[_vcID].ethBalances[1] = updateBal[1];\n3579-expression_statement-513-513", method="settleVC(bytes32 _lcID,bytes32 _vcID,uint256 updateSeq,address _partyA,address _partyB,uint256[4] updateBal,string sigA)", type_label=expression_statement];
3591 [label="513_ virtualChannels[_vcID].erc20Balances[0] = updateBal[2];\n3591-expression_statement-514-514", method="settleVC(bytes32 _lcID,bytes32 _vcID,uint256 updateSeq,address _partyA,address _partyB,uint256[4] updateBal,string sigA)", type_label=expression_statement];
3603 [label="514_ virtualChannels[_vcID].erc20Balances[1] = updateBal[3];\n3603-expression_statement-515-515", method="settleVC(bytes32 _lcID,bytes32 _vcID,uint256 updateSeq,address _partyA,address _partyB,uint256[4] updateBal,string sigA)", type_label=expression_statement];
3615 [label="515_ virtualChannels[_vcID].updateVCtimeout = now + Channels[_lcID].confirmTime;\n3615-expression_statement-516-516", method="settleVC(bytes32 _lcID,bytes32 _vcID,uint256 updateSeq,address _partyA,address _partyB,uint256[4] updateBal,string sigA)", type_label=expression_statement];
3655 [label="518_ function closeVirtualChannel(bytes32 _lcID, bytes32 _vcID) public {\n         require(Channels[_lcID].isOpen, \"LC is closed.\");\n         require(virtualChannels[_vcID].isInSettlementState, \"VC is not in settlement state.\");\n         require(virtualChannels[_vcID].updateVCtimeout < now, \"Update vc timeout has not elapsed.\");\n         require(!virtualChannels[_vcID].isClose, \"VC is already closed\");\n         Channels[_lcID].numOpenVC--;\n         virtualChannels[_vcID].isClose = true;\n         if(virtualChannels[_vcID].partyA == Channels[_lcID].partyAddresses[0]) {\n             Channels[_lcID].ethBalances[0] += virtualChannels[_vcID].ethBalances[0];\n             Channels[_lcID].ethBalances[1] += virtualChannels[_vcID].ethBalances[1];\n             Channels[_lcID].erc20Balances[0] += virtualChannels[_vcID].erc20Balances[0];\n             Channels[_lcID].erc20Balances[1] += virtualChannels[_vcID].erc20Balances[1];\n         } else if (virtualChannels[_vcID].partyB == Channels[_lcID].partyAddresses[0]) {\n             Channels[_lcID].ethBalances[0] += virtualChannels[_vcID].ethBalances[1];\n             Channels[_lcID].ethBalances[1] += virtualChannels[_vcID].ethBalances[0];\n             Channels[_lcID].erc20Balances[0] += virtualChannels[_vcID].erc20Balances[1];\n             Channels[_lcID].erc20Balances[1] += virtualChannels[_vcID].erc20Balances[0];\n         }\n         emit DidVCClose(_lcID, _vcID, virtualChannels[_vcID].erc20Balances[0], virtualChannels[_vcID].erc20Balances[1]);\n     }\n3655-function_definition-519-538", method="closeVirtualChannel(bytes32 _lcID,bytes32 _vcID)", type_label=function_definition];
3667 [label="519_ require(Channels[_lcID].isOpen, \"LC is closed.\");\n3667-expression_statement-520-520", method="closeVirtualChannel(bytes32 _lcID,bytes32 _vcID)", type_label=expression_statement];
3679 [label="520_ require(virtualChannels[_vcID].isInSettlementState, \"VC is not in settlement state.\");\n3679-expression_statement-521-521", method="closeVirtualChannel(bytes32 _lcID,bytes32 _vcID)", type_label=expression_statement];
3691 [label="521_ require(virtualChannels[_vcID].updateVCtimeout < now, \"Update vc timeout has not elapsed.\");\n3691-expression_statement-522-522", method="closeVirtualChannel(bytes32 _lcID,bytes32 _vcID)", type_label=expression_statement];
3705 [label="522_ require(!virtualChannels[_vcID].isClose, \"VC is already closed\");\n3705-expression_statement-523-523", method="closeVirtualChannel(bytes32 _lcID,bytes32 _vcID)", type_label=expression_statement];
3718 [label="523_ Channels[_lcID].numOpenVC--;\n3718-expression_statement-524-524", method="closeVirtualChannel(bytes32 _lcID,bytes32 _vcID)", type_label=expression_statement];
3719 [label="523_ Channels[_lcID].numOpenVC--\n3719-expression_statement-524-524", method="closeVirtualChannel(bytes32 _lcID,bytes32 _vcID)", type_label=expression_statement];
3725 [label="524_ virtualChannels[_vcID].isClose = true;\n3725-expression_statement-525-525", method="closeVirtualChannel(bytes32 _lcID,bytes32 _vcID)", type_label=expression_statement];
3734 [label="525_ if\n3734-if-526-536", method="closeVirtualChannel(bytes32 _lcID,bytes32 _vcID)", type_label=if];
8327 [label="525_ end_if", method="closeVirtualChannel(bytes32 _lcID,bytes32 _vcID)", type_label=end_if];
3749 [label="526_ Channels[_lcID].ethBalances[0] += virtualChannels[_vcID].ethBalances[0];\n3749-expression_statement-527-527", method="closeVirtualChannel(bytes32 _lcID,bytes32 _vcID)", type_label=expression_statement];
3765 [label="527_ Channels[_lcID].ethBalances[1] += virtualChannels[_vcID].ethBalances[1];\n3765-expression_statement-528-528", method="closeVirtualChannel(bytes32 _lcID,bytes32 _vcID)", type_label=expression_statement];
3781 [label="528_ Channels[_lcID].erc20Balances[0] += virtualChannels[_vcID].erc20Balances[0];\n3781-expression_statement-529-529", method="closeVirtualChannel(bytes32 _lcID,bytes32 _vcID)", type_label=expression_statement];
3797 [label="529_ Channels[_lcID].erc20Balances[1] += virtualChannels[_vcID].erc20Balances[1];\n3797-expression_statement-530-530", method="closeVirtualChannel(bytes32 _lcID,bytes32 _vcID)", type_label=expression_statement];
3813 [label="530_ if\n3813-if-531-536", method="closeVirtualChannel(bytes32 _lcID,bytes32 _vcID)", type_label=if];
3828 [label="531_ Channels[_lcID].ethBalances[0] += virtualChannels[_vcID].ethBalances[1];\n3828-expression_statement-532-532", method="closeVirtualChannel(bytes32 _lcID,bytes32 _vcID)", type_label=expression_statement];
3844 [label="532_ Channels[_lcID].ethBalances[1] += virtualChannels[_vcID].ethBalances[0];\n3844-expression_statement-533-533", method="closeVirtualChannel(bytes32 _lcID,bytes32 _vcID)", type_label=expression_statement];
3860 [label="533_ Channels[_lcID].erc20Balances[0] += virtualChannels[_vcID].erc20Balances[1];\n3860-expression_statement-534-534", method="closeVirtualChannel(bytes32 _lcID,bytes32 _vcID)", type_label=expression_statement];
3876 [label="534_ Channels[_lcID].erc20Balances[1] += virtualChannels[_vcID].erc20Balances[0];\n3876-expression_statement-535-535", method="closeVirtualChannel(bytes32 _lcID,bytes32 _vcID)", type_label=expression_statement];
3914 [label="538_ function byzantineCloseChannel(bytes32 _lcID) public {\n         Channel storage channel = Channels[_lcID];\n         require(channel.isOpen, \"Channel is not open\");\n         require(channel.isUpdateLCSettling == true);\n         require(channel.numOpenVC == 0);\n         require(channel.updateLCtimeout < now, \"LC timeout over.\");\n         uint256 totalEthDeposit = channel.initialDeposit[0] + channel.ethBalances[2] + channel.ethBalances[3];\n         uint256 totalTokenDeposit = channel.initialDeposit[1] + channel.erc20Balances[2] + channel.erc20Balances[3];\n         uint256 possibleTotalEthBeforeDeposit = channel.ethBalances[0] + channel.ethBalances[1];\n         uint256 possibleTotalTokenBeforeDeposit = channel.erc20Balances[0] + channel.erc20Balances[1];\n         if(possibleTotalEthBeforeDeposit < totalEthDeposit) {\n             channel.ethBalances[0]+=channel.ethBalances[2];\n             channel.ethBalances[1]+=channel.ethBalances[3];\n         } else {\n             require(possibleTotalEthBeforeDeposit == totalEthDeposit);\n         }\n         if(possibleTotalTokenBeforeDeposit < totalTokenDeposit) {\n             channel.erc20Balances[0]+=channel.erc20Balances[2];\n             channel.erc20Balances[1]+=channel.erc20Balances[3];\n         } else {\n             require(possibleTotalTokenBeforeDeposit == totalTokenDeposit);\n         }\n         uint256 ethbalanceA = channel.ethBalances[0];\n         uint256 ethbalanceI = channel.ethBalances[1];\n         uint256 tokenbalanceA = channel.erc20Balances[0];\n         uint256 tokenbalanceI = channel.erc20Balances[1];\n         channel.ethBalances[0] = 0;\n         channel.ethBalances[1] = 0;\n         channel.erc20Balances[0] = 0;\n         channel.erc20Balances[1] = 0;\n         if(ethbalanceA != 0 || ethbalanceI != 0) {\n             channel.partyAddresses[0].transfer(ethbalanceA);\n             channel.partyAddresses[1].transfer(ethbalanceI);\n         }\n         if(tokenbalanceA != 0 || tokenbalanceI != 0) {\n             require(\n                 channel.token.transfer(channel.partyAddresses[0], tokenbalanceA),\n                 \"byzantineCloseChannel: token transfer failure\"\n             );\n             require(\n                 channel.token.transfer(channel.partyAddresses[1], tokenbalanceI),\n                 \"byzantineCloseChannel: token transfer failure\"\n             );\n         }\n         channel.isOpen = false;\n         numChannels--;\n         emit DidLCClose(_lcID, channel.sequence, ethbalanceA, ethbalanceI, tokenbalanceA, tokenbalanceI);\n     }\n3914-function_definition-539-586", method="byzantineCloseChannel(bytes32 _lcID)", type_label=function_definition];
3922 [label="539_ Channel storage channel = Channels[_lcID];\n3922-new_variable-540-540", method="byzantineCloseChannel(bytes32 _lcID)", type_label=new_variable];
3931 [label="540_ require(channel.isOpen, \"Channel is not open\");\n3931-expression_statement-541-541", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
3941 [label="541_ require(channel.isUpdateLCSettling == true);\n3941-expression_statement-542-542", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
3951 [label="542_ require(channel.numOpenVC == 0);\n3951-expression_statement-543-543", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
3960 [label="543_ require(channel.updateLCtimeout < now, \"LC timeout over.\");\n3960-expression_statement-544-544", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
3972 [label="544_ uint256 totalEthDeposit = channel.initialDeposit[0] + channel.ethBalances[2] + channel.ethBalances[3];\n3972-new_variable-545-545", method="byzantineCloseChannel(bytes32 _lcID)", type_label=new_variable];
3994 [label="545_ uint256 totalTokenDeposit = channel.initialDeposit[1] + channel.erc20Balances[2] + channel.erc20Balances[3];\n3994-new_variable-546-546", method="byzantineCloseChannel(bytes32 _lcID)", type_label=new_variable];
4016 [label="546_ uint256 possibleTotalEthBeforeDeposit = channel.ethBalances[0] + channel.ethBalances[1];\n4016-new_variable-547-547", method="byzantineCloseChannel(bytes32 _lcID)", type_label=new_variable];
4032 [label="547_ uint256 possibleTotalTokenBeforeDeposit = channel.erc20Balances[0] + channel.erc20Balances[1];\n4032-new_variable-548-548", method="byzantineCloseChannel(bytes32 _lcID)", type_label=new_variable];
4048 [label="548_ if_possibleTotalEthBeforeDeposit < totalEthDeposit\n4048-if-549-554", method="byzantineCloseChannel(bytes32 _lcID)", type_label=if];
8641 [label="548_ end_if", method="byzantineCloseChannel(bytes32 _lcID)", type_label=end_if];
4053 [label="549_ channel.ethBalances[0]+=channel.ethBalances[2];\n4053-expression_statement-550-550", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
4065 [label="550_ channel.ethBalances[1]+=channel.ethBalances[3];\n4065-expression_statement-551-551", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
4078 [label="552_ require(possibleTotalEthBeforeDeposit == totalEthDeposit);\n4078-expression_statement-553-553", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
4085 [label="554_ if_possibleTotalTokenBeforeDeposit < totalTokenDeposit\n4085-if-555-560", method="byzantineCloseChannel(bytes32 _lcID)", type_label=if];
8678 [label="554_ end_if", method="byzantineCloseChannel(bytes32 _lcID)", type_label=end_if];
4090 [label="555_ channel.erc20Balances[0]+=channel.erc20Balances[2];\n4090-expression_statement-556-556", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
4102 [label="556_ channel.erc20Balances[1]+=channel.erc20Balances[3];\n4102-expression_statement-557-557", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
4115 [label="558_ require(possibleTotalTokenBeforeDeposit == totalTokenDeposit);\n4115-expression_statement-559-559", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
4122 [label="560_ uint256 ethbalanceA = channel.ethBalances[0];\n4122-new_variable-561-561", method="byzantineCloseChannel(bytes32 _lcID)", type_label=new_variable];
4132 [label="561_ uint256 ethbalanceI = channel.ethBalances[1];\n4132-new_variable-562-562", method="byzantineCloseChannel(bytes32 _lcID)", type_label=new_variable];
4142 [label="562_ uint256 tokenbalanceA = channel.erc20Balances[0];\n4142-new_variable-563-563", method="byzantineCloseChannel(bytes32 _lcID)", type_label=new_variable];
4152 [label="563_ uint256 tokenbalanceI = channel.erc20Balances[1];\n4152-new_variable-564-564", method="byzantineCloseChannel(bytes32 _lcID)", type_label=new_variable];
4162 [label="564_ channel.ethBalances[0] = 0;\n4162-expression_statement-565-565", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
4170 [label="565_ channel.ethBalances[1] = 0;\n4170-expression_statement-566-566", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
4178 [label="566_ channel.erc20Balances[0] = 0;\n4178-expression_statement-567-567", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
4186 [label="567_ channel.erc20Balances[1] = 0;\n4186-expression_statement-568-568", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
4194 [label="568_ if_ethbalanceA != 0 || ethbalanceI != 0\n4194-if-569-572", method="byzantineCloseChannel(bytes32 _lcID)", type_label=if];
8787 [label="568_ end_if", method="byzantineCloseChannel(bytes32 _lcID)", type_label=end_if];
4203 [label="569_ channel.partyAddresses[0].transfer(ethbalanceA);\n4203-expression_statement-570-570", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
4214 [label="570_ channel.partyAddresses[1].transfer(ethbalanceI);\n4214-expression_statement-571-571", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
4225 [label="572_ if_tokenbalanceA != 0 || tokenbalanceI != 0\n4225-if-573-582", method="byzantineCloseChannel(bytes32 _lcID)", type_label=if];
8818 [label="572_ end_if", method="byzantineCloseChannel(bytes32 _lcID)", type_label=end_if];
4234 [label="573_ require(\n                 channel.token.transfer(channel.partyAddresses[0], tokenbalanceA),\n                 \"byzantineCloseChannel: token transfer failure\"\n             );\n4234-expression_statement-574-577", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
4255 [label="577_ require(\n                 channel.token.transfer(channel.partyAddresses[1], tokenbalanceI),\n                 \"byzantineCloseChannel: token transfer failure\"\n             );\n4255-expression_statement-578-581", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
4276 [label="582_ channel.isOpen = false;\n4276-expression_statement-583-583", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
4283 [label="583_ numChannels--;\n4283-expression_statement-584-584", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
4284 [label="583_ numChannels--\n4284-expression_statement-584-584", method="byzantineCloseChannel(bytes32 _lcID)", type_label=expression_statement];
4302 [label="586_ function _isContained(bytes32 _hash, bytes _proof, bytes32 _root) internal pure returns (bool) {\n         bytes32 cursor = _hash;\n         bytes32 proofElem;\n         for (uint256 i = 64; i <= _proof.length; i += 32) {\n             assembly { proofElem := mload(add(_proof, i)) }\n             if (cursor < proofElem) {\n                 cursor = keccak256(abi.encodePacked(cursor, proofElem));\n             } else {\n                 cursor = keccak256(abi.encodePacked(proofElem, cursor));\n             }\n         }\n         return cursor == _root;\n     }\n4302-function_definition-587-599", method="_isContained(bytes32 _hash,bytes _proof,bytes32 _root)", type_label=function_definition];
4323 [label="587_ bytes32 cursor = _hash;\n4323-new_variable-588-588", method="_isContained(bytes32 _hash,bytes _proof,bytes32 _root)", type_label=new_variable];
4329 [label="588_ bytes32 proofElem;\n4329-new_variable-589-589", method="_isContained(bytes32 _hash,bytes _proof,bytes32 _root)", type_label=new_variable];
4334 [label="589_ for(i <= _proof.length;;i += 32)\n4334-for-590-597", method="_isContained(bytes32 _hash,bytes _proof,bytes32 _root)", type_label=for];
8927 [label="589_ end_loop", method="_isContained(bytes32 _hash,bytes _proof,bytes32 _root)", type_label=end_loop];
4366 [label="591_ if_cursor < proofElem\n4366-if-592-596", method="_isContained(bytes32 _hash,bytes _proof,bytes32 _root)", type_label=if];
8959 [label="591_ end_if", method="_isContained(bytes32 _hash,bytes _proof,bytes32 _root)", type_label=end_if];
4371 [label="592_ cursor = keccak256(abi.encodePacked(cursor, proofElem));\n4371-expression_statement-593-593", method="_isContained(bytes32 _hash,bytes _proof,bytes32 _root)", type_label=expression_statement];
4386 [label="594_ cursor = keccak256(abi.encodePacked(proofElem, cursor));\n4386-expression_statement-595-595", method="_isContained(bytes32 _hash,bytes _proof,bytes32 _root)", type_label=expression_statement];
4400 [label="597_ return cursor == _root;\n4400-return-598-598", method="_isContained(bytes32 _hash,bytes _proof,bytes32 _root)", type_label=return];
4404 [label="599_ function getChannel(bytes32 id) public view returns (\n         address[2],\n         uint256[4],\n         uint256[4],\n         uint256[2],\n         uint256,\n         uint256,\n         bytes32,\n         uint256,\n         uint256,\n         bool,\n         bool,\n         uint256\n     ) {\n         Channel memory channel = Channels[id];\n         return (\n             channel.partyAddresses,\n             channel.ethBalances,\n             channel.erc20Balances,\n             channel.initialDeposit,\n             channel.sequence,\n             channel.confirmTime,\n             channel.VCrootHash,\n             channel.LCopenTimeout,\n             channel.updateLCtimeout,\n             channel.isOpen,\n             channel.isUpdateLCSettling,\n             channel.numOpenVC\n         );\n     }\n4404-function_definition-600-629", method="getChannel(bytes32 id)", type_label=function_definition];
4458 [label="613_ Channel memory channel = Channels[id];\n4458-new_variable-614-614", method="getChannel(bytes32 id)", type_label=new_variable];
4467 [label="614_ return (\n             channel.partyAddresses,\n             channel.ethBalances,\n             channel.erc20Balances,\n             channel.initialDeposit,\n             channel.sequence,\n             channel.confirmTime,\n             channel.VCrootHash,\n             channel.LCopenTimeout,\n             channel.updateLCtimeout,\n             channel.isOpen,\n             channel.isUpdateLCSettling,\n             channel.numOpenVC\n         );\n4467-return-615-628", method="getChannel(bytes32 id)", type_label=return];
4505 [label="629_ function getVirtualChannel(bytes32 id) public view returns(\n         bool,\n         bool,\n         uint256,\n         address,\n         uint256,\n         address,\n         address,\n         address,\n         uint256[2],\n         uint256[2],\n         uint256[2]\n     ) {\n         VirtualChannel memory virtualChannel = virtualChannels[id];\n         return(\n             virtualChannel.isClose,\n             virtualChannel.isInSettlementState,\n             virtualChannel.sequence,\n             virtualChannel.challenger,\n             virtualChannel.updateVCtimeout,\n             virtualChannel.partyA,\n             virtualChannel.partyB,\n             virtualChannel.partyI,\n             virtualChannel.ethBalances,\n             virtualChannel.erc20Balances,\n             virtualChannel.bond\n         );\n     }\n4505-function_definition-630-657", method="getVirtualChannel(bytes32 id)", type_label=function_definition];
4554 [label="642_ VirtualChannel memory virtualChannel = virtualChannels[id];\n4554-new_variable-643-643", method="getVirtualChannel(bytes32 id)", type_label=new_variable];
4563 [label="643_ return(\n             virtualChannel.isClose,\n             virtualChannel.isInSettlementState,\n             virtualChannel.sequence,\n             virtualChannel.challenger,\n             virtualChannel.updateVCtimeout,\n             virtualChannel.partyA,\n             virtualChannel.partyB,\n             virtualChannel.partyI,\n             virtualChannel.ethBalances,\n             virtualChannel.erc20Balances,\n             virtualChannel.bond\n         );\n4563-return-644-656", method="getVirtualChannel(bytes32 id)", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
404;
557;
1935;
2336;
3892;
4347;
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
157 -> 164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 189  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
180 -> 4773  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4773 -> 191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 4773  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
189 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
191 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
196 -> 201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
201 -> 206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 267  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
262 -> 4855  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4855 -> 271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
267 -> 4855  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
271 -> 280  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
271 -> 4864  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4864 -> 282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 4864  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
280 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
282 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
293 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
330 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
362 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
383 -> 388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
388 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 408  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
393 -> 4986  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4986 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
452 -> 404  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
464 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
466 -> 479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 502  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
487 -> 510  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5080 -> 559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 5080  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
502 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
510 -> 525  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
510 -> 533  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
525 -> 5080  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
525 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
533 -> 548  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
548 -> 5080  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
548 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
559 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
594 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
624 -> 631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
631 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
648 -> 662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
662 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
668 -> 676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
676 -> 681  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
676 -> 5269  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5269 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
681 -> 684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
684 -> 676  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
688 -> 699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
699 -> 707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 712  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
707 -> 5300  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5300 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
720 -> 726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
726 -> 707  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
743 -> 764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
764 -> 772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
772 -> 779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
779 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
795 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 822  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
808 -> 5401  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5401 -> 832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
819 -> 808  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
822 -> 819  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
832 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
842 -> 859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
859 -> 870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
870 -> 878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
894 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
897 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 937  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
937 -> 943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
967 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
970 -> 985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
989 -> 1006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1026 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1029 -> 1048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1048 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1054 -> 1060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1074 -> 1079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1079 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1089  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1114 -> 1122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1122 -> 1126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1126 -> 1130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1130 -> 1134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1138 -> 1159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1179 -> 1207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1207 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1213 -> 1220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1220 -> 1227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1441 -> 1504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1504 -> 1561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1561 -> 1569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1577 -> 1604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1604 -> 1622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1622 -> 1632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1632 -> 1650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1650 -> 1662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1662 -> 1672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1672 -> 1679  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1672 -> 6265  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6265 -> 1705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1679 -> 1693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1693 -> 6265  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1705 -> 1712  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1705 -> 6298  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6298 -> 1760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1712 -> 1723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1723 -> 1748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1748 -> 6298  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1760 -> 1768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1768 -> 1776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1776 -> 1786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1820 -> 1828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1828 -> 1852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1852 -> 1863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1863 -> 1874  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1863 -> 6456  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6456 -> 1893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1874 -> 6456  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1893 -> 1904  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1893 -> 6486  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6486 -> 1935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1904 -> 6486  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1966 -> 1981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1981 -> 1993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1993 -> 2008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2008 -> 2015  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2008 -> 6601  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6601 -> 2041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2015 -> 2029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2029 -> 6601  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2041 -> 2048  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2041 -> 6634  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6634 -> 2085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2048 -> 2073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2073 -> 6634  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2085 -> 2097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2097 -> 2109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2109 -> 2118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2133 -> 2154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2154 -> 2169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2169 -> 2192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2192 -> 2203  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2192 -> 6785  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2203 -> 2206  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2203 -> 2240  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6796 -> 2264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2206 -> 2229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2229 -> 6796  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2240 -> 2252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2252 -> 6796  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2264 -> 2275  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2264 -> 6857  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2275 -> 2278  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2275 -> 2312  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6868 -> 2336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2278 -> 2301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2301 -> 6868  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2312 -> 2324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2324 -> 6868  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2346 -> 2372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2372 -> 2384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2384 -> 2412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2412 -> 2440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2440 -> 2453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2453 -> 2466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2466 -> 2525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2525 -> 2545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2545 -> 2565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2565 -> 2574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2574 -> 2587  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2574 -> 7167  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7167 -> 2617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2587 -> 2602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2602 -> 7167  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2617 -> 2630  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2617 -> 7210  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7210 -> 2684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2630 -> 2657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2657 -> 7210  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2709 -> 2735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2735 -> 2744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2744 -> 2751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2751 -> 2762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2762 -> 2785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2785 -> 2808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2808 -> 2816  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2808 -> 7401  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7401 -> 2825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2816 -> 7401  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2825 -> 2880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2880 -> 2898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2898 -> 2916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2916 -> 2924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2924 -> 2932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2932 -> 2942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2942 -> 2952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2952 -> 2962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2962 -> 2972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2972 -> 2978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2978 -> 2985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3029 -> 3069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3069 -> 3081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3081 -> 3094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3094 -> 3108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3108 -> 3119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3119 -> 3165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3165 -> 3179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3179 -> 3198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3198 -> 3206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3206 -> 3214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3214 -> 3224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3224 -> 3236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3236 -> 3248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3248 -> 3260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3260 -> 3272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3272 -> 3280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3280 -> 3294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3327 -> 3361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3361 -> 3373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3373 -> 3386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3386 -> 3400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3400 -> 3430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3430 -> 3468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3468 -> 3479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3479 -> 3531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3531 -> 3549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3549 -> 3559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3559 -> 3567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3567 -> 3579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3579 -> 3591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3591 -> 3603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3603 -> 3615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3655 -> 3667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3667 -> 3679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3679 -> 3691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3691 -> 3705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3705 -> 3718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3718 -> 3725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3725 -> 3734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3734 -> 3749  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3734 -> 3813  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8327 -> 3892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3749 -> 3765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3765 -> 3781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3781 -> 3797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3797 -> 8327  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3813 -> 3828  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3813 -> 8327  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3828 -> 3844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3844 -> 3860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3860 -> 3876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3876 -> 8327  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3914 -> 3922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3922 -> 3931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3931 -> 3941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3941 -> 3951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3951 -> 3960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3960 -> 3972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3972 -> 3994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3994 -> 4016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4016 -> 4032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4032 -> 4048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4048 -> 4053  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4048 -> 4078  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8641 -> 4085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4053 -> 4065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4065 -> 8641  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4078 -> 8641  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4085 -> 4090  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4085 -> 4115  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8678 -> 4122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4090 -> 4102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4102 -> 8678  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4115 -> 8678  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4122 -> 4132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4132 -> 4142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4142 -> 4152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4152 -> 4162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4162 -> 4170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4170 -> 4178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4178 -> 4186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4186 -> 4194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4194 -> 4203  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4194 -> 8787  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8787 -> 4225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4203 -> 4214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4214 -> 8787  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4225 -> 4234  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4225 -> 8818  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8818 -> 4276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4234 -> 4255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4255 -> 8818  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4276 -> 4283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4302 -> 4323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4323 -> 4329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4329 -> 4334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4334 -> 8927  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8927 -> 4400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4366 -> 4371  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4366 -> 4386  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8959 -> 4347  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
8959 -> 4347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
4371 -> 8959  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4386 -> 8959  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4400 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4404 -> 4458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4458 -> 4467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4467 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4505 -> 4554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4554 -> 4563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4563 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
404 -> 393  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
557 -> 5080  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4347 -> 4334  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
}
