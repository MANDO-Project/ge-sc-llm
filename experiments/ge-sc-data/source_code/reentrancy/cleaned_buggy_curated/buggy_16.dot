digraph  {
13 [label="2_ function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n13-function_definition-3-6", method="mul(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a * b;\n31-expression_statement-4-4", method="mul(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(a == 0 || c / a == b);\n37-expression_statement-5-5", method="mul(uint a,uint b)", type_label=expression_statement];
50 [label="6_ function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n50-function_definition-7-10", method="div(uint a,uint b)", type_label=function_definition];
68 [label="7_ require(b > 0);\n68-expression_statement-8-8", method="div(uint a,uint b)", type_label=expression_statement];
75 [label="8_ c = a / b;\n75-expression_statement-9-9", method="div(uint a,uint b)", type_label=expression_statement];
81 [label="10_ function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n81-function_definition-11-14", method="sub(uint a,uint b)", type_label=function_definition];
99 [label="11_ require(b <= a);\n99-expression_statement-12-12", method="sub(uint a,uint b)", type_label=expression_statement];
106 [label="12_ c = a - b;\n106-expression_statement-13-13", method="sub(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n112-function_definition-15-18", method="add(uint a,uint b)", type_label=function_definition];
130 [label="15_ c = a + b;\n130-expression_statement-16-16", method="add(uint a,uint b)", type_label=expression_statement];
136 [label="16_ require(c >= a);\n136-expression_statement-17-17", method="add(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function totalSupply() public view returns (uint256);\n146-function_definition-21-21", method="totalSupply()", type_label=function_definition];
154 [label="21_ uint256 counter_re_ent21 =0;\n154-new_variable-22-22", method="", type_label=new_variable];
159 [label="22_ function callme_re_ent21() public{\n        require(counter_re_ent21<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent21 += 1;\n    }\n159-function_definition-23-29", method="callme_re_ent21()", type_label=function_definition];
163 [label="23_ require(counter_re_ent21<=5);\n163-expression_statement-24-24", method="callme_re_ent21()", type_label=expression_statement];
170 [label="24_ if\n170-if-25-27", method="callme_re_ent21()", type_label=if];
3118 [label="24_ end_if", method="callme_re_ent21()", type_label=end_if];
185 [label="27_ counter_re_ent21 += 1;\n185-expression_statement-28-28", method="callme_re_ent21()", type_label=expression_statement];
189 [label="29_ function balanceOf(address tokenOwner) public view returns (uint256 balance);\n189-function_definition-30-30", method="balanceOf(address tokenOwner)", type_label=function_definition];
202 [label="30_ mapping(address => uint) balances_re_ent10;\n202-new_variable-31-31", method="", type_label=new_variable];
208 [label="31_ function withdrawFunds_re_ent10 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent10[msg.sender] -= _weiToWithdraw;\n    }\n208-function_definition-32-36", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=function_definition];
216 [label="32_ require(balances_re_ent10[msg.sender] >= _weiToWithdraw);\n216-expression_statement-33-33", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
227 [label="33_ require(msg.sender.send(_weiToWithdraw));\n227-expression_statement-34-34", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
239 [label="34_ balances_re_ent10[msg.sender] -= _weiToWithdraw;\n239-expression_statement-35-35", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
247 [label="36_ function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\n247-function_definition-37-37", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
264 [label="37_ mapping(address => uint) balances_re_ent21;\n264-new_variable-38-38", method="", type_label=new_variable];
270 [label="38_ function withdraw_balances_re_ent21 () public {\n       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent21[msg.sender] = 0;\n      }\n270-function_definition-39-43", method="withdraw_balances_re_ent21()", type_label=function_definition];
274 [label="39_ (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n274-new_variable-40-40", method="withdraw_balances_re_ent21()", type_label=new_variable];
298 [label="40_ if\n298-if-41-42", method="withdraw_balances_re_ent21()", type_label=if];
3246 [label="40_ end_if", method="withdraw_balances_re_ent21()", type_label=end_if];
300 [label="41_ balances_re_ent21[msg.sender] = 0;\n300-expression_statement-42-42", method="withdraw_balances_re_ent21()", type_label=expression_statement];
308 [label="43_ function transfer(address to, uint256 tokens) public returns (bool success);\n308-function_definition-44-44", method="transfer(address to,uint256 tokens)", type_label=function_definition];
324 [label="44_ mapping(address => uint) userBalance_re_ent12;\n324-new_variable-45-45", method="", type_label=new_variable];
330 [label="45_ function withdrawBalance_re_ent12() public{\n        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent12[msg.sender] = 0;\n    }\n330-function_definition-46-51", method="withdrawBalance_re_ent12()", type_label=function_definition];
334 [label="46_ if\n334-if-47-49", method="withdrawBalance_re_ent12()", type_label=if];
3282 [label="46_ end_if", method="withdrawBalance_re_ent12()", type_label=end_if];
352 [label="49_ userBalance_re_ent12[msg.sender] = 0;\n352-expression_statement-50-50", method="withdrawBalance_re_ent12()", type_label=expression_statement];
360 [label="51_ function approve(address spender, uint256 tokens) public returns (bool success);\n360-function_definition-52-52", method="approve(address spender,uint256 tokens)", type_label=function_definition];
376 [label="52_ mapping(address => uint) redeemableEther_re_ent11;\n376-new_variable-53-53", method="", type_label=new_variable];
382 [label="53_ function claimReward_re_ent11() public {        \n        require(redeemableEther_re_ent11[msg.sender] > 0);\n        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n        msg.sender.transfer(transferValue_re_ent11);    \n        redeemableEther_re_ent11[msg.sender] = 0;\n    }\n382-function_definition-54-59", method="claimReward_re_ent11()", type_label=function_definition];
386 [label="54_ require(redeemableEther_re_ent11[msg.sender] > 0);\n386-expression_statement-55-55", method="claimReward_re_ent11()", type_label=expression_statement];
397 [label="55_ uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n397-new_variable-56-56", method="claimReward_re_ent11()", type_label=new_variable];
407 [label="56_ msg.sender.transfer(transferValue_re_ent11);\n407-expression_statement-57-57", method="claimReward_re_ent11()", type_label=expression_statement];
416 [label="57_ redeemableEther_re_ent11[msg.sender] = 0;\n416-expression_statement-58-58", method="claimReward_re_ent11()", type_label=expression_statement];
424 [label="59_ function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n424-function_definition-60-60", method="transferFrom(address from,address to,uint256 tokens)", type_label=function_definition];
444 [label="60_ mapping(address => uint) balances_re_ent1;\n444-new_variable-61-61", method="", type_label=new_variable];
450 [label="61_ function withdraw_balances_re_ent1 () public {\n       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent1[msg.sender] = 0;\n      }\n450-function_definition-62-66", method="withdraw_balances_re_ent1()", type_label=function_definition];
454 [label="62_ (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n454-new_variable-63-63", method="withdraw_balances_re_ent1()", type_label=new_variable];
478 [label="63_ if\n478-if-64-65", method="withdraw_balances_re_ent1()", type_label=if];
3426 [label="63_ end_if", method="withdraw_balances_re_ent1()", type_label=end_if];
480 [label="64_ balances_re_ent1[msg.sender] = 0;\n480-expression_statement-65-65", method="withdraw_balances_re_ent1()", type_label=expression_statement];
488 [label="66_ uint256 counter_re_ent35 =0;\n488-new_variable-67-67", method="", type_label=new_variable];
493 [label="67_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n493-function_definition-68-74", method="callme_re_ent35()", type_label=function_definition];
497 [label="68_ require(counter_re_ent35<=5);\n497-expression_statement-69-69", method="callme_re_ent35()", type_label=expression_statement];
504 [label="69_ if\n504-if-70-72", method="callme_re_ent35()", type_label=if];
3452 [label="69_ end_if", method="callme_re_ent35()", type_label=end_if];
519 [label="72_ counter_re_ent35 += 1;\n519-expression_statement-73-73", method="callme_re_ent35()", type_label=expression_statement];
537 [label="75_ mapping(address => uint) userBalance_re_ent40;\n537-new_variable-76-76", method="", type_label=new_variable];
543 [label="76_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n543-function_definition-77-83", method="withdrawBalance_re_ent40()", type_label=function_definition];
547 [label="77_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n547-new_variable-78-78", method="withdrawBalance_re_ent40()", type_label=new_variable];
571 [label="78_ if\n571-if-79-81", method="withdrawBalance_re_ent40()", type_label=if];
3519 [label="78_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
577 [label="81_ userBalance_re_ent40[msg.sender] = 0;\n577-expression_statement-82-82", method="withdrawBalance_re_ent40()", type_label=expression_statement];
602 [label="86_ mapping(address => uint) redeemableEther_re_ent18;\n602-new_variable-87-87", method="", type_label=new_variable];
608 [label="87_ function claimReward_re_ent18() public {        \n        require(redeemableEther_re_ent18[msg.sender] > 0);\n        uint transferValue_re_ent18 = redeemableEther_re_ent18[msg.sender];\n        msg.sender.transfer(transferValue_re_ent18);    \n        redeemableEther_re_ent18[msg.sender] = 0;\n    }\n608-function_definition-88-93", method="claimReward_re_ent18()", type_label=function_definition];
612 [label="88_ require(redeemableEther_re_ent18[msg.sender] > 0);\n612-expression_statement-89-89", method="claimReward_re_ent18()", type_label=expression_statement];
623 [label="89_ uint transferValue_re_ent18 = redeemableEther_re_ent18[msg.sender];\n623-new_variable-90-90", method="claimReward_re_ent18()", type_label=new_variable];
633 [label="90_ msg.sender.transfer(transferValue_re_ent18);\n633-expression_statement-91-91", method="claimReward_re_ent18()", type_label=expression_statement];
642 [label="91_ redeemableEther_re_ent18[msg.sender] = 0;\n642-expression_statement-92-92", method="claimReward_re_ent18()", type_label=expression_statement];
650 [label="93_ address payable public owner;\n650-new_variable-94-94", method="", type_label=new_variable];
655 [label="94_ mapping(address => uint) userBalance_re_ent33;\n655-new_variable-95-95", method="", type_label=new_variable];
661 [label="95_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n661-function_definition-96-102", method="withdrawBalance_re_ent33()", type_label=function_definition];
665 [label="96_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n665-new_variable-97-97", method="withdrawBalance_re_ent33()", type_label=new_variable];
689 [label="97_ if\n689-if-98-100", method="withdrawBalance_re_ent33()", type_label=if];
3637 [label="97_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
695 [label="100_ userBalance_re_ent33[msg.sender] = 0;\n695-expression_statement-101-101", method="withdrawBalance_re_ent33()", type_label=expression_statement];
715 [label="104_ owner = msg.sender;\n715-expression_statement-105-105", method="", type_label=expression_statement];
721 [label="106_ bool not_called_re_ent41 = true;\n721-new_variable-107-107", method="", type_label=new_variable];
727 [label="107_ function bug_re_ent41() public{\n        require(not_called_re_ent41);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent41 = false;\n    }\n727-function_definition-108-114", method="bug_re_ent41()", type_label=function_definition];
731 [label="108_ require(not_called_re_ent41);\n731-expression_statement-109-109", method="bug_re_ent41()", type_label=expression_statement];
736 [label="109_ if\n736-if-110-112", method="bug_re_ent41()", type_label=if];
3684 [label="109_ end_if", method="bug_re_ent41()", type_label=end_if];
751 [label="112_ not_called_re_ent41 = false;\n751-expression_statement-113-113", method="bug_re_ent41()", type_label=expression_statement];
756 [label="114_ modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n756-expression_statement-115-118", method="", type_label=expression_statement];
759 [label="115_ require(msg.sender == owner);\n759-expression_statement-116-116", method="", type_label=expression_statement];
768 [label="116_ _;\n768-expression_statement-117-117", method="", type_label=expression_statement];
770 [label="118_ function transferOwnership(address payable newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n770-function_definition-119-123", method="transferOwnership(address payable newOwner)", type_label=function_definition];
777 [label="118_ onlyOwner\n777-expression_statement-119-119", method="transferOwnership(address payable newOwner)", type_label=expression_statement];
780 [label="119_ require(newOwner != address(0));\n780-expression_statement-120-120", method="transferOwnership(address payable newOwner)", type_label=expression_statement];
795 [label="121_ owner = newOwner;\n795-expression_statement-122-122", method="transferOwnership(address payable newOwner)", type_label=expression_statement];
799 [label="123_ uint256 counter_re_ent42 =0;\n799-new_variable-124-124", method="", type_label=new_variable];
804 [label="124_ function callme_re_ent42() public{\n        require(counter_re_ent42<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent42 += 1;\n    }\n804-function_definition-125-131", method="callme_re_ent42()", type_label=function_definition];
808 [label="125_ require(counter_re_ent42<=5);\n808-expression_statement-126-126", method="callme_re_ent42()", type_label=expression_statement];
815 [label="126_ if\n815-if-127-129", method="callme_re_ent42()", type_label=if];
3763 [label="126_ end_if", method="callme_re_ent42()", type_label=end_if];
830 [label="129_ counter_re_ent42 += 1;\n830-expression_statement-130-130", method="callme_re_ent42()", type_label=expression_statement];
848 [label="134_ mapping(address => uint) balances_re_ent29;\n848-new_variable-135-135", method="", type_label=new_variable];
854 [label="135_ function withdraw_balances_re_ent29 () public {\n       if (msg.sender.send(balances_re_ent29[msg.sender ]))\n          balances_re_ent29[msg.sender] = 0;\n      }\n854-function_definition-136-139", method="withdraw_balances_re_ent29()", type_label=function_definition];
858 [label="136_ if\n858-if-137-138", method="withdraw_balances_re_ent29()", type_label=if];
3806 [label="136_ end_if", method="withdraw_balances_re_ent29()", type_label=end_if];
871 [label="137_ balances_re_ent29[msg.sender] = 0;\n871-expression_statement-138-138", method="withdraw_balances_re_ent29()", type_label=expression_statement];
879 [label="139_ mapping (address => uint256) balances;\n879-new_variable-140-140", method="", type_label=new_variable];
885 [label="140_ bool not_called_re_ent6 = true;\n885-new_variable-141-141", method="", type_label=new_variable];
891 [label="141_ function bug_re_ent6() public{\n        require(not_called_re_ent6);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent6 = false;\n    }\n891-function_definition-142-148", method="bug_re_ent6()", type_label=function_definition];
895 [label="142_ require(not_called_re_ent6);\n895-expression_statement-143-143", method="bug_re_ent6()", type_label=expression_statement];
900 [label="143_ if\n900-if-144-146", method="bug_re_ent6()", type_label=if];
3848 [label="143_ end_if", method="bug_re_ent6()", type_label=end_if];
915 [label="146_ not_called_re_ent6 = false;\n915-expression_statement-147-147", method="bug_re_ent6()", type_label=expression_statement];
920 [label="148_ mapping (address => mapping (address => uint256)) allowed;\n920-new_variable-149-149", method="", type_label=new_variable];
928 [label="149_ address payable lastPlayer_re_ent16;\n928-new_variable-150-150", method="", type_label=new_variable];
932 [label="150_ uint jackpot_re_ent16;\n932-new_variable-151-151", method="", type_label=new_variable];
936 [label="151_ function buyTicket_re_ent16() public{\n	    if (!(lastPlayer_re_ent16.send(jackpot_re_ent16)))\n        revert();\n      lastPlayer_re_ent16 = msg.sender;\n      jackpot_re_ent16    = address(this).balance;\n    }\n936-function_definition-152-157", method="buyTicket_re_ent16()", type_label=function_definition];
940 [label="152_ if\n940-if-153-154", method="buyTicket_re_ent16()", type_label=if];
3888 [label="152_ end_if", method="buyTicket_re_ent16()", type_label=end_if];
951 [label="154_ lastPlayer_re_ent16 = msg.sender;\n951-expression_statement-155-155", method="buyTicket_re_ent16()", type_label=expression_statement];
957 [label="155_ jackpot_re_ent16    = address(this).balance;\n957-expression_statement-156-156", method="buyTicket_re_ent16()", type_label=expression_statement];
965 [label="157_ string public name = \"Exclusive Platform\";\n965-new_variable-158-158", method="", type_label=new_variable];
972 [label="158_ mapping(address => uint) balances_re_ent24;\n972-new_variable-159-159", method="", type_label=new_variable];
978 [label="159_ function withdrawFunds_re_ent24 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent24[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent24[msg.sender] -= _weiToWithdraw;\n    }\n978-function_definition-160-164", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=function_definition];
986 [label="160_ require(balances_re_ent24[msg.sender] >= _weiToWithdraw);\n986-expression_statement-161-161", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=expression_statement];
997 [label="161_ require(msg.sender.send(_weiToWithdraw));\n997-expression_statement-162-162", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=expression_statement];
1009 [label="162_ balances_re_ent24[msg.sender] -= _weiToWithdraw;\n1009-expression_statement-163-163", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=expression_statement];
1017 [label="164_ string public symbol = \"XPL\";\n1017-new_variable-165-165", method="", type_label=new_variable];
1024 [label="165_ mapping(address => uint) userBalance_re_ent5;\n1024-new_variable-166-166", method="", type_label=new_variable];
1030 [label="166_ function withdrawBalance_re_ent5() public{\n        if( ! (msg.sender.send(userBalance_re_ent5[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent5[msg.sender] = 0;\n    }\n1030-function_definition-167-172", method="withdrawBalance_re_ent5()", type_label=function_definition];
1034 [label="167_ if\n1034-if-168-170", method="withdrawBalance_re_ent5()", type_label=if];
3982 [label="167_ end_if", method="withdrawBalance_re_ent5()", type_label=end_if];
1052 [label="170_ userBalance_re_ent5[msg.sender] = 0;\n1052-expression_statement-171-171", method="withdrawBalance_re_ent5()", type_label=expression_statement];
1060 [label="172_ uint256 public decimals = 8;\n1060-new_variable-173-173", method="", type_label=new_variable];
1066 [label="173_ mapping(address => uint) balances_re_ent15;\n1066-new_variable-174-174", method="", type_label=new_variable];
1072 [label="174_ function withdraw_balances_re_ent15 () public {\n       if (msg.sender.send(balances_re_ent15[msg.sender ]))\n          balances_re_ent15[msg.sender] = 0;\n      }\n1072-function_definition-175-178", method="withdraw_balances_re_ent15()", type_label=function_definition];
1076 [label="175_ if\n1076-if-176-177", method="withdraw_balances_re_ent15()", type_label=if];
4024 [label="175_ end_if", method="withdraw_balances_re_ent15()", type_label=end_if];
1089 [label="176_ balances_re_ent15[msg.sender] = 0;\n1089-expression_statement-177-177", method="withdraw_balances_re_ent15()", type_label=expression_statement];
1097 [label="178_ uint256 public _totalSupply;\n1097-new_variable-179-179", method="", type_label=new_variable];
1102 [label="179_ uint256 counter_re_ent28 =0;\n1102-new_variable-180-180", method="", type_label=new_variable];
1107 [label="180_ function callme_re_ent28() public{\n        require(counter_re_ent28<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent28 += 1;\n    }\n1107-function_definition-181-187", method="callme_re_ent28()", type_label=function_definition];
1111 [label="181_ require(counter_re_ent28<=5);\n1111-expression_statement-182-182", method="callme_re_ent28()", type_label=expression_statement];
1118 [label="182_ if\n1118-if-183-185", method="callme_re_ent28()", type_label=if];
4066 [label="182_ end_if", method="callme_re_ent28()", type_label=end_if];
1133 [label="185_ counter_re_ent28 += 1;\n1133-expression_statement-186-186", method="callme_re_ent28()", type_label=expression_statement];
1137 [label="187_ uint256 public XPLPerEther = 8000000e8;\n1137-new_variable-188-188", method="", type_label=new_variable];
1143 [label="188_ uint256 public minimumBuy = 1 ether / 100;\n1143-new_variable-189-189", method="", type_label=new_variable];
1152 [label="189_ bool not_called_re_ent34 = true;\n1152-new_variable-190-190", method="", type_label=new_variable];
1158 [label="190_ function bug_re_ent34() public{\n        require(not_called_re_ent34);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent34 = false;\n    }\n1158-function_definition-191-197", method="bug_re_ent34()", type_label=function_definition];
1162 [label="191_ require(not_called_re_ent34);\n1162-expression_statement-192-192", method="bug_re_ent34()", type_label=expression_statement];
1167 [label="192_ if\n1167-if-193-195", method="bug_re_ent34()", type_label=if];
4115 [label="192_ end_if", method="bug_re_ent34()", type_label=end_if];
1182 [label="195_ not_called_re_ent34 = false;\n1182-expression_statement-196-196", method="bug_re_ent34()", type_label=expression_statement];
1187 [label="197_ bool public crowdsaleIsOn = true;\n1187-new_variable-198-198", method="", type_label=new_variable];
1194 [label="198_ modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n1194-expression_statement-199-202", method="", type_label=expression_statement];
1201 [label="199_ assert(msg.data.length >= size + 4);\n1201-expression_statement-200-200", method="", type_label=expression_statement];
1214 [label="200_ _;\n1214-expression_statement-201-201", method="", type_label=expression_statement];
1218 [label="203_ _totalSupply = 10000000000e8;\n1218-expression_statement-204-204", method="", type_label=expression_statement];
1222 [label="204_ balances[owner] = _totalSupply;\n1222-expression_statement-205-205", method="", type_label=expression_statement];
1238 [label="207_ address payable lastPlayer_re_ent2;\n1238-new_variable-208-208", method="", type_label=new_variable];
1242 [label="208_ uint jackpot_re_ent2;\n1242-new_variable-209-209", method="", type_label=new_variable];
1246 [label="209_ function buyTicket_re_ent2() public{\n	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))\n        revert();\n      lastPlayer_re_ent2 = msg.sender;\n      jackpot_re_ent2    = address(this).balance;\n    }\n1246-function_definition-210-215", method="buyTicket_re_ent2()", type_label=function_definition];
1250 [label="210_ if\n1250-if-211-212", method="buyTicket_re_ent2()", type_label=if];
4198 [label="210_ end_if", method="buyTicket_re_ent2()", type_label=end_if];
1261 [label="212_ lastPlayer_re_ent2 = msg.sender;\n1261-expression_statement-213-213", method="buyTicket_re_ent2()", type_label=expression_statement];
1267 [label="213_ jackpot_re_ent2    = address(this).balance;\n1267-expression_statement-214-214", method="buyTicket_re_ent2()", type_label=expression_statement];
1275 [label="215_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n1275-function_definition-216-218", method="totalSupply()", type_label=function_definition];
1284 [label="216_ return _totalSupply;\n1284-return-217-217", method="totalSupply()", type_label=return];
1286 [label="218_ mapping(address => uint) balances_re_ent17;\n1286-new_variable-219-219", method="", type_label=new_variable];
1292 [label="219_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n1292-function_definition-220-225", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
1300 [label="220_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n1300-expression_statement-221-221", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
1311 [label="221_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n1311-new_variable-222-222", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
1331 [label="222_ require(success);\n1331-expression_statement-223-223", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
1336 [label="223_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n1336-expression_statement-224-224", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
1344 [label="225_ function updateXPLPerEther(uint _XPLPerEther) public onlyOwner {        \n        emit NewPrice(owner, XPLPerEther, _XPLPerEther);\n        XPLPerEther = _XPLPerEther;\n    }\n1344-function_definition-226-229", method="updateXPLPerEther(uint _XPLPerEther)", type_label=function_definition];
1351 [label="225_ onlyOwner\n1351-expression_statement-226-226", method="updateXPLPerEther(uint _XPLPerEther)", type_label=expression_statement];
1362 [label="227_ XPLPerEther = _XPLPerEther;\n1362-expression_statement-228-228", method="updateXPLPerEther(uint _XPLPerEther)", type_label=expression_statement];
1366 [label="229_ address payable lastPlayer_re_ent37;\n1366-new_variable-230-230", method="", type_label=new_variable];
1370 [label="230_ uint jackpot_re_ent37;\n1370-new_variable-231-231", method="", type_label=new_variable];
1374 [label="231_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n1374-function_definition-232-237", method="buyTicket_re_ent37()", type_label=function_definition];
1378 [label="232_ if\n1378-if-233-234", method="buyTicket_re_ent37()", type_label=if];
4326 [label="232_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
1389 [label="234_ lastPlayer_re_ent37 = msg.sender;\n1389-expression_statement-235-235", method="buyTicket_re_ent37()", type_label=expression_statement];
1395 [label="235_ jackpot_re_ent37    = address(this).balance;\n1395-expression_statement-236-236", method="buyTicket_re_ent37()", type_label=expression_statement];
1403 [label="237_ function switchCrowdsale() public onlyOwner {\n        crowdsaleIsOn = !(crowdsaleIsOn);\n    }\n1403-function_definition-238-240", method="switchCrowdsale()", type_label=function_definition];
1406 [label="237_ onlyOwner\n1406-expression_statement-238-238", method="switchCrowdsale()", type_label=expression_statement];
1409 [label="238_ crowdsaleIsOn = !(crowdsaleIsOn);\n1409-expression_statement-239-239", method="switchCrowdsale()", type_label=expression_statement];
1415 [label="240_ mapping(address => uint) balances_re_ent3;\n1415-new_variable-241-241", method="", type_label=new_variable];
1421 [label="241_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n1421-function_definition-242-247", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
1429 [label="242_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n1429-expression_statement-243-243", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1440 [label="243_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n1440-new_variable-244-244", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
1460 [label="244_ require(success);\n1460-expression_statement-245-245", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1465 [label="245_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n1465-expression_statement-246-246", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1473 [label="247_ function getBonus(uint256 _amount) internal view returns (uint256) {\n        if (_amount >= XPLPerEther.mul(5)) {\n            return ((20 * _amount).div(100)).add(_amount);  \n        } else if (_amount >= XPLPerEther) {\n            return ((5 * _amount).div(100)).add(_amount);  \n        }\n        return _amount;\n    }\n1473-function_definition-248-255", method="getBonus(uint256 _amount)", type_label=function_definition];
1486 [label="248_ if\n1486-if-249-253", method="getBonus(uint256 _amount)", type_label=if];
4434 [label="248_ end_if", method="getBonus(uint256 _amount)", type_label=end_if];
1496 [label="249_ return ((20 * _amount).div(100)).add(_amount);\n1496-return-250-250", method="getBonus(uint256 _amount)", type_label=return];
1512 [label="250_ if__amount >= XPLPerEther\n1512-if-251-253", method="getBonus(uint256 _amount)", type_label=if];
1517 [label="251_ return ((5 * _amount).div(100)).add(_amount);\n1517-return-252-252", method="getBonus(uint256 _amount)", type_label=return];
1533 [label="253_ return _amount;\n1533-return-254-254", method="getBonus(uint256 _amount)", type_label=return];
1535 [label="255_ address payable lastPlayer_re_ent9;\n1535-new_variable-256-256", method="", type_label=new_variable];
1539 [label="256_ uint jackpot_re_ent9;\n1539-new_variable-257-257", method="", type_label=new_variable];
1543 [label="257_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n1543-function_definition-258-264", method="buyTicket_re_ent9()", type_label=function_definition];
1547 [label="258_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n1547-new_variable-259-259", method="buyTicket_re_ent9()", type_label=new_variable];
1565 [label="259_ if\n1565-if-260-261", method="buyTicket_re_ent9()", type_label=if];
4513 [label="259_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
1570 [label="261_ lastPlayer_re_ent9 = msg.sender;\n1570-expression_statement-262-262", method="buyTicket_re_ent9()", type_label=expression_statement];
1576 [label="262_ jackpot_re_ent9    = address(this).balance;\n1576-expression_statement-263-263", method="buyTicket_re_ent9()", type_label=expression_statement];
1588 [label="265_ require(crowdsaleIsOn && msg.value >= minimumBuy);\n1588-expression_statement-266-266", method="", type_label=expression_statement];
1599 [label="266_ uint256 totalBuy =  (XPLPerEther.mul(msg.value)).div(1 ether);\n1599-new_variable-267-267", method="", type_label=new_variable];
1619 [label="267_ totalBuy = getBonus(totalBuy);\n1619-expression_statement-268-268", method="", type_label=expression_statement];
1626 [label="268_ doTransfer(owner, msg.sender, totalBuy);\n1626-expression_statement-269-269", method="", type_label=expression_statement];
1637 [label="270_ mapping(address => uint) redeemableEther_re_ent25;\n1637-new_variable-271-271", method="", type_label=new_variable];
1643 [label="271_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n1643-function_definition-272-277", method="claimReward_re_ent25()", type_label=function_definition];
1647 [label="272_ require(redeemableEther_re_ent25[msg.sender] > 0);\n1647-expression_statement-273-273", method="claimReward_re_ent25()", type_label=expression_statement];
1658 [label="273_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n1658-new_variable-274-274", method="claimReward_re_ent25()", type_label=new_variable];
1668 [label="274_ msg.sender.transfer(transferValue_re_ent25);\n1668-expression_statement-275-275", method="claimReward_re_ent25()", type_label=expression_statement];
1677 [label="275_ redeemableEther_re_ent25[msg.sender] = 0;\n1677-expression_statement-276-276", method="claimReward_re_ent25()", type_label=expression_statement];
1685 [label="277_ function distribute(address[] calldata _addresses, uint256 _amount) external {        \n        for (uint i = 0; i < _addresses.length; i++) {transfer(_addresses[i], _amount);}\n    }\n1685-function_definition-278-280", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=function_definition];
1698 [label="278_ for(i < _addresses.length;;i++)\n1698-for-279-279", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=for];
4646 [label="278_ end_loop", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=end_loop];
1711 [label="278_ i++\n1711-expression_statement-279-279", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=expression_statement];
1714 [label="278_ transfer(_addresses[i], _amount);\n1714-expression_statement-279-279", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=expression_statement];
1723 [label="280_ mapping(address => uint) userBalance_re_ent19;\n1723-new_variable-281-281", method="", type_label=new_variable];
1729 [label="281_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n1729-function_definition-282-287", method="withdrawBalance_re_ent19()", type_label=function_definition];
1733 [label="282_ if\n1733-if-283-285", method="withdrawBalance_re_ent19()", type_label=if];
4681 [label="282_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
1751 [label="285_ userBalance_re_ent19[msg.sender] = 0;\n1751-expression_statement-286-286", method="withdrawBalance_re_ent19()", type_label=expression_statement];
1759 [label="287_ function distributeWithAmount(address[] calldata _addresses, uint256[] calldata _amounts) external {\n        require(_addresses.length == _amounts.length);\n        for (uint i = 0; i < _addresses.length; i++) {transfer(_addresses[i], _amounts[i]);}\n    }\n1759-function_definition-288-291", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=function_definition];
1773 [label="288_ require(_addresses.length == _amounts.length);\n1773-expression_statement-289-289", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=expression_statement];
1784 [label="289_ for(i < _addresses.length;;i++)\n1784-for-290-290", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=for];
4732 [label="289_ end_loop", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=end_loop];
1797 [label="289_ i++\n1797-expression_statement-290-290", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=expression_statement];
1800 [label="289_ transfer(_addresses[i], _amounts[i]);\n1800-expression_statement-290-290", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=expression_statement];
1811 [label="291_ mapping(address => uint) userBalance_re_ent26;\n1811-new_variable-292-292", method="", type_label=new_variable];
1817 [label="292_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n1817-function_definition-293-299", method="withdrawBalance_re_ent26()", type_label=function_definition];
1821 [label="293_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n1821-new_variable-294-294", method="withdrawBalance_re_ent26()", type_label=new_variable];
1845 [label="294_ if\n1845-if-295-297", method="withdrawBalance_re_ent26()", type_label=if];
4793 [label="294_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
1851 [label="297_ userBalance_re_ent26[msg.sender] = 0;\n1851-expression_statement-298-298", method="withdrawBalance_re_ent26()", type_label=expression_statement];
1859 [label="299_ function doTransfer(address _from, address _to, uint _amount) internal {\n        require((_to != address(0)));\n        require(_amount <= balances[_from]);\n        balances[_from] = balances[_from].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n    }\n1859-function_definition-300-306", method="doTransfer(address _from,address _to,uint _amount)", type_label=function_definition];
1875 [label="300_ require((_to != address(0)));\n1875-expression_statement-301-301", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
1885 [label="301_ require(_amount <= balances[_from]);\n1885-expression_statement-302-302", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
1894 [label="302_ balances[_from] = balances[_from].sub(_amount);\n1894-expression_statement-303-303", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
1907 [label="303_ balances[_to] = balances[_to].add(_amount);\n1907-expression_statement-304-304", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
1928 [label="306_ bool not_called_re_ent20 = true;\n1928-new_variable-307-307", method="", type_label=new_variable];
1934 [label="307_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n1934-function_definition-308-314", method="bug_re_ent20()", type_label=function_definition];
1938 [label="308_ require(not_called_re_ent20);\n1938-expression_statement-309-309", method="bug_re_ent20()", type_label=expression_statement];
1943 [label="309_ if\n1943-if-310-312", method="bug_re_ent20()", type_label=if];
4891 [label="309_ end_if", method="bug_re_ent20()", type_label=end_if];
1958 [label="312_ not_called_re_ent20 = false;\n1958-expression_statement-313-313", method="bug_re_ent20()", type_label=expression_statement];
1963 [label="314_ function balanceOf(address _owner) view public returns (uint256) {\n        return balances[_owner];\n    }\n1963-function_definition-315-317", method="balanceOf(address _owner)", type_label=function_definition];
1976 [label="315_ return balances[_owner];\n1976-return-316-316", method="balanceOf(address _owner)", type_label=return];
1980 [label="317_ mapping(address => uint) redeemableEther_re_ent32;\n1980-new_variable-318-318", method="", type_label=new_variable];
1986 [label="318_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n1986-function_definition-319-324", method="claimReward_re_ent32()", type_label=function_definition];
1990 [label="319_ require(redeemableEther_re_ent32[msg.sender] > 0);\n1990-expression_statement-320-320", method="claimReward_re_ent32()", type_label=expression_statement];
2001 [label="320_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n2001-new_variable-321-321", method="claimReward_re_ent32()", type_label=new_variable];
2011 [label="321_ msg.sender.transfer(transferValue_re_ent32);\n2011-expression_statement-322-322", method="claimReward_re_ent32()", type_label=expression_statement];
2020 [label="322_ redeemableEther_re_ent32[msg.sender] = 0;\n2020-expression_statement-323-323", method="claimReward_re_ent32()", type_label=expression_statement];
2028 [label="324_ function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n        doTransfer(msg.sender, _to, _amount);\n        return true;\n    }\n2028-function_definition-325-328", method="transfer(address _to,uint256 _amount)", type_label=function_definition];
2038 [label="324_ onlyPayloadSize(2 * 32)\n2038-expression_statement-325-325", method="transfer(address _to,uint256 _amount)", type_label=expression_statement];
2051 [label="325_ doTransfer(msg.sender, _to, _amount);\n2051-expression_statement-326-326", method="transfer(address _to,uint256 _amount)", type_label=expression_statement];
2062 [label="326_ return true;\n2062-return-327-327", method="transfer(address _to,uint256 _amount)", type_label=return];
2065 [label="328_ mapping(address => uint) balances_re_ent38;\n2065-new_variable-329-329", method="", type_label=new_variable];
2071 [label="329_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n2071-function_definition-330-334", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
2079 [label="330_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n2079-expression_statement-331-331", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
2090 [label="331_ require(msg.sender.send(_weiToWithdraw));\n2090-expression_statement-332-332", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
2102 [label="332_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n2102-expression_statement-333-333", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
2110 [label="334_ function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n        require(allowed[_from][msg.sender] >= _amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        doTransfer(_from, _to, _amount);\n        return true;\n    }\n2110-function_definition-335-340", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=function_definition];
2124 [label="334_ onlyPayloadSize(3 * 32)\n2124-expression_statement-335-335", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
2137 [label="335_ require(allowed[_from][msg.sender] >= _amount);\n2137-expression_statement-336-336", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
2150 [label="336_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n2150-expression_statement-337-337", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
2171 [label="337_ doTransfer(_from, _to, _amount);\n2171-expression_statement-338-338", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
2180 [label="338_ return true;\n2180-return-339-339", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=return];
2183 [label="340_ mapping(address => uint) redeemableEther_re_ent4;\n2183-new_variable-341-341", method="", type_label=new_variable];
2189 [label="341_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n2189-function_definition-342-347", method="claimReward_re_ent4()", type_label=function_definition];
2193 [label="342_ require(redeemableEther_re_ent4[msg.sender] > 0);\n2193-expression_statement-343-343", method="claimReward_re_ent4()", type_label=expression_statement];
2204 [label="343_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n2204-new_variable-344-344", method="claimReward_re_ent4()", type_label=new_variable];
2214 [label="344_ msg.sender.transfer(transferValue_re_ent4);\n2214-expression_statement-345-345", method="claimReward_re_ent4()", type_label=expression_statement];
2223 [label="345_ redeemableEther_re_ent4[msg.sender] = 0;\n2223-expression_statement-346-346", method="claimReward_re_ent4()", type_label=expression_statement];
2231 [label="347_ function approve(address _spender, uint256 _amount) public returns (bool success) {\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n2231-function_definition-348-353", method="approve(address _spender,uint256 _amount)", type_label=function_definition];
2248 [label="348_ require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n2248-expression_statement-349-349", method="approve(address _spender,uint256 _amount)", type_label=expression_statement];
2267 [label="349_ allowed[msg.sender][_spender] = _amount;\n2267-expression_statement-350-350", method="approve(address _spender,uint256 _amount)", type_label=expression_statement];
2287 [label="351_ return true;\n2287-return-352-352", method="approve(address _spender,uint256 _amount)", type_label=return];
2290 [label="353_ uint256 counter_re_ent7 =0;\n2290-new_variable-354-354", method="", type_label=new_variable];
2295 [label="354_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n2295-function_definition-355-361", method="callme_re_ent7()", type_label=function_definition];
2299 [label="355_ require(counter_re_ent7<=5);\n2299-expression_statement-356-356", method="callme_re_ent7()", type_label=expression_statement];
2306 [label="356_ if\n2306-if-357-359", method="callme_re_ent7()", type_label=if];
5254 [label="356_ end_if", method="callme_re_ent7()", type_label=end_if];
2321 [label="359_ counter_re_ent7 += 1;\n2321-expression_statement-360-360", method="callme_re_ent7()", type_label=expression_statement];
2325 [label="361_ function allowance(address _owner, address _spender) view public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n2325-function_definition-362-364", method="allowance(address _owner,address _spender)", type_label=function_definition];
2342 [label="362_ return allowed[_owner][_spender];\n2342-return-363-363", method="allowance(address _owner,address _spender)", type_label=return];
2348 [label="364_ address payable lastPlayer_re_ent23;\n2348-new_variable-365-365", method="", type_label=new_variable];
2352 [label="365_ uint jackpot_re_ent23;\n2352-new_variable-366-366", method="", type_label=new_variable];
2356 [label="366_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n2356-function_definition-367-372", method="buyTicket_re_ent23()", type_label=function_definition];
2360 [label="367_ if\n2360-if-368-369", method="buyTicket_re_ent23()", type_label=if];
5308 [label="367_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
2371 [label="369_ lastPlayer_re_ent23 = msg.sender;\n2371-expression_statement-370-370", method="buyTicket_re_ent23()", type_label=expression_statement];
2377 [label="370_ jackpot_re_ent23    = address(this).balance;\n2377-expression_statement-371-371", method="buyTicket_re_ent23()", type_label=expression_statement];
2385 [label="372_ function transferEther(address payable _receiver, uint256 _amount) public onlyOwner {\n        require(_amount <= address(this).balance);\n        emit TransferEther(address(this), _receiver, _amount);\n        _receiver.transfer(_amount);\n    }\n2385-function_definition-373-377", method="transferEther(address payable _receiver,uint256 _amount)", type_label=function_definition];
2396 [label="372_ onlyOwner\n2396-expression_statement-373-373", method="transferEther(address payable _receiver,uint256 _amount)", type_label=expression_statement];
2399 [label="373_ require(_amount <= address(this).balance);\n2399-expression_statement-374-374", method="transferEther(address payable _receiver,uint256 _amount)", type_label=expression_statement];
2420 [label="375_ _receiver.transfer(_amount);\n2420-expression_statement-376-376", method="transferEther(address payable _receiver,uint256 _amount)", type_label=expression_statement];
2427 [label="377_ uint256 counter_re_ent14 =0;\n2427-new_variable-378-378", method="", type_label=new_variable];
2432 [label="378_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n2432-function_definition-379-385", method="callme_re_ent14()", type_label=function_definition];
2436 [label="379_ require(counter_re_ent14<=5);\n2436-expression_statement-380-380", method="callme_re_ent14()", type_label=expression_statement];
2443 [label="380_ if\n2443-if-381-383", method="callme_re_ent14()", type_label=if];
5391 [label="380_ end_if", method="callme_re_ent14()", type_label=end_if];
2458 [label="383_ counter_re_ent14 += 1;\n2458-expression_statement-384-384", method="callme_re_ent14()", type_label=expression_statement];
2462 [label="385_ function withdrawFund() onlyOwner public {\n        uint256 balance = address(this).balance;\n        owner.transfer(balance);\n    }\n2462-function_definition-386-389", method="withdrawFund()", type_label=function_definition];
2464 [label="385_ onlyOwner\n2464-expression_statement-386-386", method="withdrawFund()", type_label=expression_statement];
2468 [label="386_ uint256 balance = address(this).balance;\n2468-new_variable-387-387", method="withdrawFund()", type_label=new_variable];
2478 [label="387_ owner.transfer(balance);\n2478-expression_statement-388-388", method="withdrawFund()", type_label=expression_statement];
2485 [label="389_ address payable lastPlayer_re_ent30;\n2485-new_variable-390-390", method="", type_label=new_variable];
2489 [label="390_ uint jackpot_re_ent30;\n2489-new_variable-391-391", method="", type_label=new_variable];
2493 [label="391_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n2493-function_definition-392-397", method="buyTicket_re_ent30()", type_label=function_definition];
2497 [label="392_ if\n2497-if-393-394", method="buyTicket_re_ent30()", type_label=if];
5445 [label="392_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
2508 [label="394_ lastPlayer_re_ent30 = msg.sender;\n2508-expression_statement-395-395", method="buyTicket_re_ent30()", type_label=expression_statement];
2514 [label="395_ jackpot_re_ent30    = address(this).balance;\n2514-expression_statement-396-396", method="buyTicket_re_ent30()", type_label=expression_statement];
2522 [label="397_ function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        _totalSupply = _totalSupply.sub(_value);\n        emit Burn(burner, _value);\n    }\n2522-function_definition-398-404", method="burn(uint256 _value)", type_label=function_definition];
2528 [label="397_ onlyOwner\n2528-expression_statement-398-398", method="burn(uint256 _value)", type_label=expression_statement];
2532 [label="398_ require(_value <= balances[msg.sender]);\n2532-expression_statement-399-399", method="burn(uint256 _value)", type_label=expression_statement];
2543 [label="399_ address burner = msg.sender;\n2543-new_variable-400-400", method="burn(uint256 _value)", type_label=new_variable];
2551 [label="400_ balances[burner] = balances[burner].sub(_value);\n2551-expression_statement-401-401", method="burn(uint256 _value)", type_label=expression_statement];
2564 [label="401_ _totalSupply = _totalSupply.sub(_value);\n2564-expression_statement-402-402", method="burn(uint256 _value)", type_label=expression_statement];
2579 [label="404_ mapping(address => uint) balances_re_ent8;\n2579-new_variable-405-405", method="", type_label=new_variable];
2585 [label="405_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n2585-function_definition-406-410", method="withdraw_balances_re_ent8()", type_label=function_definition];
2589 [label="406_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n2589-new_variable-407-407", method="withdraw_balances_re_ent8()", type_label=new_variable];
2613 [label="407_ if\n2613-if-408-409", method="withdraw_balances_re_ent8()", type_label=if];
5561 [label="407_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
2615 [label="408_ balances_re_ent8[msg.sender] = 0;\n2615-expression_statement-409-409", method="withdraw_balances_re_ent8()", type_label=expression_statement];
2623 [label="410_ function getForeignTokenBalance(address tokenAddress, address who) view public returns (uint){\n        ERC20Interface token = ERC20Interface(tokenAddress);\n        uint bal = token.balanceOf(who);\n        return bal;\n    }\n2623-function_definition-411-415", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=function_definition];
2640 [label="411_ ERC20Interface token = ERC20Interface(tokenAddress);\n2640-new_variable-412-412", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=new_variable];
2650 [label="412_ uint bal = token.balanceOf(who);\n2650-new_variable-413-413", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=new_variable];
2661 [label="413_ return bal;\n2661-return-414-414", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=return];
2663 [label="415_ mapping(address => uint) redeemableEther_re_ent39;\n2663-new_variable-416-416", method="", type_label=new_variable];
2669 [label="416_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n2669-function_definition-417-422", method="claimReward_re_ent39()", type_label=function_definition];
2673 [label="417_ require(redeemableEther_re_ent39[msg.sender] > 0);\n2673-expression_statement-418-418", method="claimReward_re_ent39()", type_label=expression_statement];
2684 [label="418_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n2684-new_variable-419-419", method="claimReward_re_ent39()", type_label=new_variable];
2694 [label="419_ msg.sender.transfer(transferValue_re_ent39);\n2694-expression_statement-420-420", method="claimReward_re_ent39()", type_label=expression_statement];
2703 [label="420_ redeemableEther_re_ent39[msg.sender] = 0;\n2703-expression_statement-421-421", method="claimReward_re_ent39()", type_label=expression_statement];
2711 [label="422_ function withdrawForeignTokens(address tokenAddress) onlyOwner public returns (bool) {\n        ERC20Interface token = ERC20Interface(tokenAddress);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n2711-function_definition-423-427", method="withdrawForeignTokens(address tokenAddress)", type_label=function_definition];
2717 [label="422_ onlyOwner\n2717-expression_statement-423-423", method="withdrawForeignTokens(address tokenAddress)", type_label=expression_statement];
2725 [label="423_ ERC20Interface token = ERC20Interface(tokenAddress);\n2725-new_variable-424-424", method="withdrawForeignTokens(address tokenAddress)", type_label=new_variable];
2735 [label="424_ uint256 amount = token.balanceOf(address(this));\n2735-new_variable-425-425", method="withdrawForeignTokens(address tokenAddress)", type_label=new_variable];
2748 [label="425_ return token.transfer(owner, amount);\n2748-return-426-426", method="withdrawForeignTokens(address tokenAddress)", type_label=return];
2757 [label="427_ mapping(address => uint) balances_re_ent36;\n2757-new_variable-428-428", method="", type_label=new_variable];
2763 [label="428_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n2763-function_definition-429-432", method="withdraw_balances_re_ent36()", type_label=function_definition];
2767 [label="429_ if\n2767-if-430-431", method="withdraw_balances_re_ent36()", type_label=if];
5715 [label="429_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
2780 [label="430_ balances_re_ent36[msg.sender] = 0;\n2780-expression_statement-431-431", method="withdraw_balances_re_ent36()", type_label=expression_statement];
2788 [label="432_ bool not_called_re_ent27 = true;\n2788-new_variable-433-433", method="", type_label=new_variable];
2794 [label="433_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n2794-function_definition-434-440", method="bug_re_ent27()", type_label=function_definition];
2798 [label="434_ require(not_called_re_ent27);\n2798-expression_statement-435-435", method="bug_re_ent27()", type_label=expression_statement];
2803 [label="435_ if\n2803-if-436-438", method="bug_re_ent27()", type_label=if];
5751 [label="435_ end_if", method="bug_re_ent27()", type_label=end_if];
2818 [label="438_ not_called_re_ent27 = false;\n2818-expression_statement-439-439", method="bug_re_ent27()", type_label=expression_statement];
2837 [label="441_ mapping(address => uint) balances_re_ent31;\n2837-new_variable-442-442", method="", type_label=new_variable];
2843 [label="442_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n2843-function_definition-443-447", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
2851 [label="443_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n2851-expression_statement-444-444", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
2862 [label="444_ require(msg.sender.send(_weiToWithdraw));\n2862-expression_statement-445-445", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
2874 [label="445_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n2874-expression_statement-446-446", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
2896 [label="448_ bool not_called_re_ent13 = true;\n2896-new_variable-449-449", method="", type_label=new_variable];
2902 [label="449_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n2902-function_definition-450-457", method="bug_re_ent13()", type_label=function_definition];
2906 [label="450_ require(not_called_re_ent13);\n2906-expression_statement-451-451", method="bug_re_ent13()", type_label=expression_statement];
2911 [label="451_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n2911-new_variable-452-452", method="bug_re_ent13()", type_label=new_variable];
2932 [label="452_ if\n2932-if-453-455", method="bug_re_ent13()", type_label=if];
5880 [label="452_ end_if", method="bug_re_ent13()", type_label=end_if];
2938 [label="455_ not_called_re_ent13 = false;\n2938-expression_statement-456-456", method="bug_re_ent13()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
50 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
159 -> 163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
163 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 3118  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
208 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
270 -> 274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
274 -> 298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 300  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
298 -> 3246  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3246 -> 308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 3246  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
330 -> 334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
334 -> 3282  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
382 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
454 -> 478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
478 -> 480  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
478 -> 3426  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3426 -> 488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 3426  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
493 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
504 -> 3452  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
543 -> 547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
547 -> 571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
571 -> 3519  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
608 -> 612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
612 -> 623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
623 -> 633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
633 -> 642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
650 -> 655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
661 -> 665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
689 -> 3637  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
727 -> 731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 3684  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
759 -> 768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
770 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
804 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 3763  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
854 -> 858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
858 -> 871  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
858 -> 3806  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3806 -> 879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 3806  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
879 -> 885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
895 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 3848  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
920 -> 928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
928 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
936 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 3888  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
951 -> 957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
965 -> 972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
978 -> 986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
986 -> 997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
997 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 1024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1030 -> 1034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1034 -> 3982  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1060 -> 1066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1072 -> 1076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 1089  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1076 -> 4024  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4024 -> 1097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1089 -> 4024  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1097 -> 1102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1107 -> 1111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1111 -> 1118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1118 -> 4066  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1137 -> 1143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1143 -> 1152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1158 -> 1162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1162 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1167 -> 4115  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1187 -> 1194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1201 -> 1214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1218 -> 1222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1238 -> 1242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1246 -> 1250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1250 -> 4198  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1261 -> 1267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1275 -> 1284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1284 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1292 -> 1300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1300 -> 1311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1311 -> 1331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 1336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1344 -> 1362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1366 -> 1370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1374 -> 1378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1378 -> 4326  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1389 -> 1395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1403 -> 1409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1421 -> 1429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1429 -> 1440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1440 -> 1460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1460 -> 1465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1473 -> 1486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1486 -> 1496  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1486 -> 1512  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4434 -> 1533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1496 -> 4434  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1496 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1512 -> 1517  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1512 -> 4434  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1517 -> 4434  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1517 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1533 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1535 -> 1539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1543 -> 1547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1547 -> 1565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1565 -> 4513  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1570 -> 1576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1588 -> 1599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1599 -> 1619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1619 -> 1626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1643 -> 1647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1647 -> 1658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1658 -> 1668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1668 -> 1677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1685 -> 1698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1698 -> 1714  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1698 -> 4646  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4646 -> 1723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1711 -> 1698  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1714 -> 1711  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1729 -> 1733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1733 -> 4681  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1759 -> 1773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1773 -> 1784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1784 -> 1800  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1784 -> 4732  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4732 -> 1811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1797 -> 1784  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1800 -> 1797  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1817 -> 1821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1821 -> 1845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1845 -> 4793  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1859 -> 1875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1875 -> 1885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1885 -> 1894  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1894 -> 1907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1934 -> 1938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1938 -> 1943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1943 -> 4891  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1963 -> 1976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1976 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1986 -> 1990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1990 -> 2001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2001 -> 2011  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2011 -> 2020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2028 -> 2051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2051 -> 2062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2062 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2071 -> 2079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2079 -> 2090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2090 -> 2102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2110 -> 2137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2137 -> 2150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2150 -> 2171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2171 -> 2180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2180 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2189 -> 2193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2193 -> 2204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2204 -> 2214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2214 -> 2223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2231 -> 2248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2248 -> 2267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2287 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2295 -> 2299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2299 -> 2306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2306 -> 5254  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2325 -> 2342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2342 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2348 -> 2352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2356 -> 2360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2360 -> 5308  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2371 -> 2377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2385 -> 2399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2432 -> 2436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2436 -> 2443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2443 -> 5391  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2462 -> 2468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2468 -> 2478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2485 -> 2489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2493 -> 2497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2497 -> 5445  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2508 -> 2514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2522 -> 2532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2532 -> 2543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2543 -> 2551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2551 -> 2564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2585 -> 2589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2589 -> 2613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2613 -> 2615  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2613 -> 5561  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5561 -> 2623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2615 -> 5561  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2623 -> 2640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2640 -> 2650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2650 -> 2661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2661 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2669 -> 2673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2673 -> 2684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2684 -> 2694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2694 -> 2703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2711 -> 2725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2725 -> 2735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2735 -> 2748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2748 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2763 -> 2767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2767 -> 2780  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2767 -> 5715  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5715 -> 2788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2780 -> 5715  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2794 -> 2798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2798 -> 2803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2803 -> 5751  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2843 -> 2851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2851 -> 2862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2862 -> 2874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2902 -> 2906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2906 -> 2911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2911 -> 2932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2932 -> 5880  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
