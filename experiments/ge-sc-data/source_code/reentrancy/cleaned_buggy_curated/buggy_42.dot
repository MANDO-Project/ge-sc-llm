digraph  {
13 [label="2_ address payable lastPlayer_re_ent2;\n13-new_variable-3-3", method="", type_label=new_variable];
17 [label="3_ uint jackpot_re_ent2;\n17-new_variable-4-4", method="", type_label=new_variable];
21 [label="4_ function buyTicket_re_ent2() public{\n	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))\n        revert();\n      lastPlayer_re_ent2 = msg.sender;\n      jackpot_re_ent2    = address(this).balance;\n    }\n21-function_definition-5-10", method="buyTicket_re_ent2()", type_label=function_definition];
25 [label="5_ if\n25-if-6-7", method="buyTicket_re_ent2()", type_label=if];
1857 [label="5_ end_if", method="buyTicket_re_ent2()", type_label=end_if];
36 [label="7_ lastPlayer_re_ent2 = msg.sender;\n36-expression_statement-8-8", method="buyTicket_re_ent2()", type_label=expression_statement];
42 [label="8_ jackpot_re_ent2    = address(this).balance;\n42-expression_statement-9-9", method="buyTicket_re_ent2()", type_label=expression_statement];
50 [label="10_ address public owner;\n50-new_variable-11-11", method="", type_label=new_variable];
55 [label="11_ mapping(address => uint) balances_re_ent17;\n55-new_variable-12-12", method="", type_label=new_variable];
61 [label="12_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n61-function_definition-13-18", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
69 [label="13_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n69-expression_statement-14-14", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
80 [label="14_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n80-new_variable-15-15", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
100 [label="15_ require(success);\n100-expression_statement-16-16", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
105 [label="16_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n105-expression_statement-17-17", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
113 [label="18_ address public newOwner;\n113-new_variable-19-19", method="", type_label=new_variable];
118 [label="19_ bool not_called_re_ent27 = true;\n118-new_variable-20-20", method="", type_label=new_variable];
124 [label="20_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n124-function_definition-21-27", method="bug_re_ent27()", type_label=function_definition];
128 [label="21_ require(not_called_re_ent27);\n128-expression_statement-22-22", method="bug_re_ent27()", type_label=expression_statement];
133 [label="22_ if\n133-if-23-25", method="bug_re_ent27()", type_label=if];
1965 [label="22_ end_if", method="bug_re_ent27()", type_label=end_if];
148 [label="25_ not_called_re_ent27 = false;\n148-expression_statement-26-26", method="bug_re_ent27()", type_label=expression_statement];
165 [label="29_ owner = msg.sender;\n165-expression_statement-30-30", method="", type_label=expression_statement];
171 [label="31_ mapping(address => uint) redeemableEther_re_ent32;\n171-new_variable-32-32", method="", type_label=new_variable];
177 [label="32_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n177-function_definition-33-38", method="claimReward_re_ent32()", type_label=function_definition];
181 [label="33_ require(redeemableEther_re_ent32[msg.sender] > 0);\n181-expression_statement-34-34", method="claimReward_re_ent32()", type_label=expression_statement];
192 [label="34_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n192-new_variable-35-35", method="claimReward_re_ent32()", type_label=new_variable];
202 [label="35_ msg.sender.transfer(transferValue_re_ent32);\n202-expression_statement-36-36", method="claimReward_re_ent32()", type_label=expression_statement];
211 [label="36_ redeemableEther_re_ent32[msg.sender] = 0;\n211-expression_statement-37-37", method="claimReward_re_ent32()", type_label=expression_statement];
219 [label="38_ modifier onlyOwner {\n        require(msg.sender == owner || msg.sender == address(this));\n        _;\n    }\n219-expression_statement-39-42", method="", type_label=expression_statement];
222 [label="39_ require(msg.sender == owner || msg.sender == address(this));\n222-expression_statement-40-40", method="", type_label=expression_statement];
239 [label="40_ _;\n239-expression_statement-41-41", method="", type_label=expression_statement];
241 [label="42_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n241-function_definition-43-45", method="transferOwnership(address _newOwner)", type_label=function_definition];
248 [label="42_ onlyOwner\n248-expression_statement-43-43", method="transferOwnership(address _newOwner)", type_label=expression_statement];
251 [label="43_ newOwner = _newOwner;\n251-expression_statement-44-44", method="transferOwnership(address _newOwner)", type_label=expression_statement];
255 [label="45_ mapping(address => uint) balances_re_ent38;\n255-new_variable-46-46", method="", type_label=new_variable];
261 [label="46_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n261-function_definition-47-51", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
269 [label="47_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n269-expression_statement-48-48", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
280 [label="48_ require(msg.sender.send(_weiToWithdraw));\n280-expression_statement-49-49", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
292 [label="49_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n292-expression_statement-50-50", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
303 [label="53_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n303-function_definition-54-61", method="mul(uint256 a,uint256 b)", type_label=function_definition];
320 [label="54_ if_a == 0\n320-if-55-57", method="mul(uint256 a,uint256 b)", type_label=if];
2152 [label="54_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
325 [label="55_ return 0;\n325-return-56-56", method="mul(uint256 a,uint256 b)", type_label=return];
327 [label="57_ uint256 c = a * b;\n327-new_variable-58-58", method="mul(uint256 a,uint256 b)", type_label=new_variable];
335 [label="58_ assert(c / a == b);\n335-expression_statement-59-59", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
344 [label="59_ return c;\n344-return-60-60", method="mul(uint256 a,uint256 b)", type_label=return];
346 [label="61_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n346-function_definition-62-65", method="div(uint256 a,uint256 b)", type_label=function_definition];
363 [label="62_ uint256 c = a / b;\n363-new_variable-63-63", method="div(uint256 a,uint256 b)", type_label=new_variable];
371 [label="63_ return c;\n371-return-64-64", method="div(uint256 a,uint256 b)", type_label=return];
373 [label="65_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n373-function_definition-66-69", method="sub(uint256 a,uint256 b)", type_label=function_definition];
390 [label="66_ assert(b <= a);\n390-expression_statement-67-67", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
397 [label="67_ return a - b;\n397-return-68-68", method="sub(uint256 a,uint256 b)", type_label=return];
401 [label="69_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n401-function_definition-70-74", method="add(uint256 a,uint256 b)", type_label=function_definition];
418 [label="70_ uint256 c = a + b;\n418-new_variable-71-71", method="add(uint256 a,uint256 b)", type_label=new_variable];
426 [label="71_ assert(c >= a);\n426-expression_statement-72-72", method="add(uint256 a,uint256 b)", type_label=expression_statement];
433 [label="72_ return c;\n433-return-73-73", method="add(uint256 a,uint256 b)", type_label=return];
435 [label="74_ function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n435-function_definition-75-79", method="ceil(uint256 a,uint256 m)", type_label=function_definition];
452 [label="75_ uint256 c = add(a,m);\n452-new_variable-76-76", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
463 [label="76_ uint256 d = sub(c,1);\n463-new_variable-77-77", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
474 [label="77_ return mul(div(d,m),m);\n474-return-78-78", method="ceil(uint256 a,uint256 m)", type_label=return];
489 [label="81_ function balanceOf(address who) external view returns (uint256);\n489-function_definition-82-82", method="balanceOf(address who)", type_label=function_definition];
501 [label="82_ mapping(address => uint) redeemableEther_re_ent4;\n501-new_variable-83-83", method="", type_label=new_variable];
507 [label="83_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n507-function_definition-84-89", method="claimReward_re_ent4()", type_label=function_definition];
511 [label="84_ require(redeemableEther_re_ent4[msg.sender] > 0);\n511-expression_statement-85-85", method="claimReward_re_ent4()", type_label=expression_statement];
522 [label="85_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n522-new_variable-86-86", method="claimReward_re_ent4()", type_label=new_variable];
532 [label="86_ msg.sender.transfer(transferValue_re_ent4);\n532-expression_statement-87-87", method="claimReward_re_ent4()", type_label=expression_statement];
541 [label="87_ redeemableEther_re_ent4[msg.sender] = 0;\n541-expression_statement-88-88", method="claimReward_re_ent4()", type_label=expression_statement];
549 [label="89_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n549-function_definition-90-90", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
568 [label="90_ uint256 counter_re_ent7 =0;\n568-new_variable-91-91", method="", type_label=new_variable];
573 [label="91_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n573-function_definition-92-98", method="callme_re_ent7()", type_label=function_definition];
577 [label="92_ require(counter_re_ent7<=5);\n577-expression_statement-93-93", method="callme_re_ent7()", type_label=expression_statement];
584 [label="93_ if\n584-if-94-96", method="callme_re_ent7()", type_label=if];
2416 [label="93_ end_if", method="callme_re_ent7()", type_label=end_if];
599 [label="96_ counter_re_ent7 += 1;\n599-expression_statement-97-97", method="callme_re_ent7()", type_label=expression_statement];
603 [label="98_ function transfer(address to, uint256 value) external returns (bool);\n603-function_definition-99-99", method="transfer(address to,uint256 value)", type_label=function_definition];
618 [label="99_ address payable lastPlayer_re_ent23;\n618-new_variable-100-100", method="", type_label=new_variable];
622 [label="100_ uint jackpot_re_ent23;\n622-new_variable-101-101", method="", type_label=new_variable];
626 [label="101_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n626-function_definition-102-107", method="buyTicket_re_ent23()", type_label=function_definition];
630 [label="102_ if\n630-if-103-104", method="buyTicket_re_ent23()", type_label=if];
2462 [label="102_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
641 [label="104_ lastPlayer_re_ent23 = msg.sender;\n641-expression_statement-105-105", method="buyTicket_re_ent23()", type_label=expression_statement];
647 [label="105_ jackpot_re_ent23    = address(this).balance;\n647-expression_statement-106-106", method="buyTicket_re_ent23()", type_label=expression_statement];
661 [label="109_ address payable lastPlayer_re_ent37;\n661-new_variable-110-110", method="", type_label=new_variable];
665 [label="110_ uint jackpot_re_ent37;\n665-new_variable-111-111", method="", type_label=new_variable];
669 [label="111_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n669-function_definition-112-117", method="buyTicket_re_ent37()", type_label=function_definition];
673 [label="112_ if\n673-if-113-114", method="buyTicket_re_ent37()", type_label=if];
2505 [label="112_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
684 [label="114_ lastPlayer_re_ent37 = msg.sender;\n684-expression_statement-115-115", method="buyTicket_re_ent37()", type_label=expression_statement];
690 [label="115_ jackpot_re_ent37    = address(this).balance;\n690-expression_statement-116-116", method="buyTicket_re_ent37()", type_label=expression_statement];
698 [label="117_ Token public token;\n698-new_variable-118-118", method="", type_label=new_variable];
704 [label="118_ mapping(address => uint) balances_re_ent3;\n704-new_variable-119-119", method="", type_label=new_variable];
710 [label="119_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n710-function_definition-120-125", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
718 [label="120_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n718-expression_statement-121-121", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
729 [label="121_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n729-new_variable-122-122", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
749 [label="122_ require(success);\n749-expression_statement-123-123", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
754 [label="123_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n754-expression_statement-124-124", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
762 [label="125_ bool lock;\n762-new_variable-126-126", method="", type_label=new_variable];
766 [label="126_ address payable lastPlayer_re_ent9;\n766-new_variable-127-127", method="", type_label=new_variable];
770 [label="127_ uint jackpot_re_ent9;\n770-new_variable-128-128", method="", type_label=new_variable];
774 [label="128_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n774-function_definition-129-135", method="buyTicket_re_ent9()", type_label=function_definition];
778 [label="129_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n778-new_variable-130-130", method="buyTicket_re_ent9()", type_label=new_variable];
796 [label="130_ if\n796-if-131-132", method="buyTicket_re_ent9()", type_label=if];
2628 [label="130_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
801 [label="132_ lastPlayer_re_ent9 = msg.sender;\n801-expression_statement-133-133", method="buyTicket_re_ent9()", type_label=expression_statement];
807 [label="133_ jackpot_re_ent9    = address(this).balance;\n807-expression_statement-134-134", method="buyTicket_re_ent9()", type_label=expression_statement];
815 [label="135_ uint256 public stakeTokens;\n815-new_variable-136-136", method="", type_label=new_variable];
820 [label="136_ mapping(address => uint) redeemableEther_re_ent25;\n820-new_variable-137-137", method="", type_label=new_variable];
826 [label="137_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n826-function_definition-138-143", method="claimReward_re_ent25()", type_label=function_definition];
830 [label="138_ require(redeemableEther_re_ent25[msg.sender] > 0);\n830-expression_statement-139-139", method="claimReward_re_ent25()", type_label=expression_statement];
841 [label="139_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n841-new_variable-140-140", method="claimReward_re_ent25()", type_label=new_variable];
851 [label="140_ msg.sender.transfer(transferValue_re_ent25);\n851-expression_statement-141-141", method="claimReward_re_ent25()", type_label=expression_statement];
860 [label="141_ redeemableEther_re_ent25[msg.sender] = 0;\n860-expression_statement-142-142", method="claimReward_re_ent25()", type_label=expression_statement];
868 [label="143_ uint256 private basePercent = 200;\n868-new_variable-144-144", method="", type_label=new_variable];
879 [label="145_ mapping(address => uint) userBalance_re_ent19;\n879-new_variable-146-146", method="", type_label=new_variable];
885 [label="146_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n885-function_definition-147-152", method="withdrawBalance_re_ent19()", type_label=function_definition];
889 [label="147_ if\n889-if-148-150", method="withdrawBalance_re_ent19()", type_label=if];
2721 [label="147_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
907 [label="150_ userBalance_re_ent19[msg.sender] = 0;\n907-expression_statement-151-151", method="withdrawBalance_re_ent19()", type_label=expression_statement];
915 [label="152_ uint256 public stakeTime = 1814400;\n915-new_variable-153-153", method="", type_label=new_variable];
921 [label="153_ mapping(address => uint) userBalance_re_ent26;\n921-new_variable-154-154", method="", type_label=new_variable];
927 [label="154_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n927-function_definition-155-161", method="withdrawBalance_re_ent26()", type_label=function_definition];
931 [label="155_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n931-new_variable-156-156", method="withdrawBalance_re_ent26()", type_label=new_variable];
955 [label="156_ if\n955-if-157-159", method="withdrawBalance_re_ent26()", type_label=if];
2787 [label="156_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
961 [label="159_ userBalance_re_ent26[msg.sender] = 0;\n961-expression_statement-160-160", method="withdrawBalance_re_ent26()", type_label=expression_statement];
969 [label="161_ uint public stakePercentage = 30;\n969-new_variable-162-162", method="", type_label=new_variable];
975 [label="162_ mapping(address => uint) balances_re_ent31;\n975-new_variable-163-163", method="", type_label=new_variable];
981 [label="163_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n981-function_definition-164-168", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
989 [label="164_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n989-expression_statement-165-165", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1000 [label="165_ require(msg.sender.send(_weiToWithdraw));\n1000-expression_statement-166-166", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1012 [label="166_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n1012-expression_statement-167-167", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1034 [label="169_ bool not_called_re_ent13 = true;\n1034-new_variable-170-170", method="", type_label=new_variable];
1040 [label="170_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n1040-function_definition-171-178", method="bug_re_ent13()", type_label=function_definition];
1044 [label="171_ require(not_called_re_ent13);\n1044-expression_statement-172-172", method="bug_re_ent13()", type_label=expression_statement];
1049 [label="172_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n1049-new_variable-173-173", method="bug_re_ent13()", type_label=new_variable];
1070 [label="173_ if\n1070-if-174-176", method="bug_re_ent13()", type_label=if];
2902 [label="173_ end_if", method="bug_re_ent13()", type_label=end_if];
1076 [label="176_ not_called_re_ent13 = false;\n1076-expression_statement-177-177", method="bug_re_ent13()", type_label=expression_statement];
1095 [label="179_ struct stake{\n        uint256 time;\n        bool redeem;\n        uint256 tokens;\n    }\n1095-expression_statement-180-184", method="stake()", type_label=expression_statement];
1109 [label="184_ bool not_called_re_ent20 = true;\n1109-new_variable-185-185", method="", type_label=new_variable];
1115 [label="185_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n1115-function_definition-186-192", method="bug_re_ent20()", type_label=function_definition];
1119 [label="186_ require(not_called_re_ent20);\n1119-expression_statement-187-187", method="bug_re_ent20()", type_label=expression_statement];
1124 [label="187_ if\n1124-if-188-190", method="bug_re_ent20()", type_label=if];
2956 [label="187_ end_if", method="bug_re_ent20()", type_label=end_if];
1139 [label="190_ not_called_re_ent20 = false;\n1139-expression_statement-191-191", method="bug_re_ent20()", type_label=expression_statement];
1144 [label="192_ mapping(address => stake) staker;\n1144-new_variable-193-193", method="", type_label=new_variable];
1157 [label="194_ token = Token(tokenContractAddress);\n1157-expression_statement-195-195", method="", type_label=expression_statement];
1164 [label="195_ owner = msg.sender;\n1164-expression_statement-196-196", method="", type_label=expression_statement];
1170 [label="196_ stakeTokens = 500 * 10 ** uint(10);\n1170-expression_statement-197-197", method="", type_label=expression_statement];
1180 [label="198_ uint256 counter_re_ent14 =0;\n1180-new_variable-199-199", method="", type_label=new_variable];
1185 [label="199_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n1185-function_definition-200-206", method="callme_re_ent14()", type_label=function_definition];
1189 [label="200_ require(counter_re_ent14<=5);\n1189-expression_statement-201-201", method="callme_re_ent14()", type_label=expression_statement];
1196 [label="201_ if\n1196-if-202-204", method="callme_re_ent14()", type_label=if];
3028 [label="201_ end_if", method="callme_re_ent14()", type_label=end_if];
1211 [label="204_ counter_re_ent14 += 1;\n1211-expression_statement-205-205", method="callme_re_ent14()", type_label=expression_statement];
1215 [label="206_ function startStaking() public{\n        require(token.balanceOf(msg.sender) >= stakeTokens + findOnePercent(stakeTokens));\n        require(token.transferFrom(msg.sender, address(this), stakeTokens  + findOnePercent(stakeTokens)));\n        staker[msg.sender].time = now;\n        staker[msg.sender].tokens =  staker[msg.sender].tokens + stakeTokens;\n        emit stakingstarted(msg.sender, staker[msg.sender].tokens, staker[msg.sender].time);\n    }\n1215-function_definition-207-213", method="startStaking()", type_label=function_definition];
1219 [label="207_ require(token.balanceOf(msg.sender) >= stakeTokens + findOnePercent(stakeTokens));\n1219-expression_statement-208-208", method="startStaking()", type_label=expression_statement];
1238 [label="208_ require(token.transferFrom(msg.sender, address(this), stakeTokens  + findOnePercent(stakeTokens)));\n1238-expression_statement-209-209", method="startStaking()", type_label=expression_statement];
1261 [label="209_ staker[msg.sender].time = now;\n1261-expression_statement-210-210", method="startStaking()", type_label=expression_statement];
1271 [label="210_ staker[msg.sender].tokens =  staker[msg.sender].tokens + stakeTokens;\n1271-expression_statement-211-211", method="startStaking()", type_label=expression_statement];
1311 [label="213_ address payable lastPlayer_re_ent30;\n1311-new_variable-214-214", method="", type_label=new_variable];
1315 [label="214_ uint jackpot_re_ent30;\n1315-new_variable-215-215", method="", type_label=new_variable];
1319 [label="215_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n1319-function_definition-216-221", method="buyTicket_re_ent30()", type_label=function_definition];
1323 [label="216_ if\n1323-if-217-218", method="buyTicket_re_ent30()", type_label=if];
3155 [label="216_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
1334 [label="218_ lastPlayer_re_ent30 = msg.sender;\n1334-expression_statement-219-219", method="buyTicket_re_ent30()", type_label=expression_statement];
1340 [label="219_ jackpot_re_ent30    = address(this).balance;\n1340-expression_statement-220-220", method="buyTicket_re_ent30()", type_label=expression_statement];
1348 [label="221_ function redeem() public{\n        require(!lock);\n        require(!staker[msg.sender].redeem);\n        require(staker[msg.sender].time + stakeTime <= now);\n        require(token.transfer(msg.sender,staker[msg.sender].tokens));\n        require(token.transferFrom(owner, msg.sender ,staker[msg.sender].tokens * stakePercentage * 100 / 10000));\n        emit tokensRedeemed(msg.sender, staker[msg.sender].tokens, staker[msg.sender].tokens * stakePercentage * 100 / 10000);\n        staker[msg.sender].redeem = true;\n        staker[msg.sender].tokens = 0;\n    }\n1348-function_definition-222-231", method="redeem()", type_label=function_definition];
1352 [label="222_ require(!lock);\n1352-expression_statement-223-223", method="redeem()", type_label=expression_statement];
1358 [label="223_ require(!staker[msg.sender].redeem);\n1358-expression_statement-224-224", method="redeem()", type_label=expression_statement];
1370 [label="224_ require(staker[msg.sender].time + stakeTime <= now);\n1370-expression_statement-225-225", method="redeem()", type_label=expression_statement];
1385 [label="225_ require(token.transfer(msg.sender,staker[msg.sender].tokens));\n1385-expression_statement-226-226", method="redeem()", type_label=expression_statement];
1405 [label="226_ require(token.transferFrom(owner, msg.sender ,staker[msg.sender].tokens * stakePercentage * 100 / 10000));\n1405-expression_statement-227-227", method="redeem()", type_label=expression_statement];
1461 [label="228_ staker[msg.sender].redeem = true;\n1461-expression_statement-229-229", method="redeem()", type_label=expression_statement];
1472 [label="229_ staker[msg.sender].tokens = 0;\n1472-expression_statement-230-230", method="redeem()", type_label=expression_statement];
1482 [label="231_ mapping(address => uint) balances_re_ent8;\n1482-new_variable-232-232", method="", type_label=new_variable];
1488 [label="232_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n1488-function_definition-233-237", method="withdraw_balances_re_ent8()", type_label=function_definition];
1492 [label="233_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n1492-new_variable-234-234", method="withdraw_balances_re_ent8()", type_label=new_variable];
1516 [label="234_ if\n1516-if-235-236", method="withdraw_balances_re_ent8()", type_label=if];
3348 [label="234_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
1518 [label="235_ balances_re_ent8[msg.sender] = 0;\n1518-expression_statement-236-236", method="withdraw_balances_re_ent8()", type_label=expression_statement];
1526 [label="237_ function changeStakeTokens(uint256 _NewTokensThreshold) public onlyOwner{\n        stakeTokens = _NewTokensThreshold * 10 ** uint(10);\n    }\n1526-function_definition-238-240", method="changeStakeTokens(uint256 _NewTokensThreshold)", type_label=function_definition];
1533 [label="237_ onlyOwner\n1533-expression_statement-238-238", method="changeStakeTokens(uint256 _NewTokensThreshold)", type_label=expression_statement];
1536 [label="238_ stakeTokens = _NewTokensThreshold * 10 ** uint(10);\n1536-expression_statement-239-239", method="changeStakeTokens(uint256 _NewTokensThreshold)", type_label=expression_statement];
1546 [label="240_ mapping(address => uint) redeemableEther_re_ent39;\n1546-new_variable-241-241", method="", type_label=new_variable];
1552 [label="241_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n1552-function_definition-242-247", method="claimReward_re_ent39()", type_label=function_definition];
1556 [label="242_ require(redeemableEther_re_ent39[msg.sender] > 0);\n1556-expression_statement-243-243", method="claimReward_re_ent39()", type_label=expression_statement];
1567 [label="243_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n1567-new_variable-244-244", method="claimReward_re_ent39()", type_label=new_variable];
1577 [label="244_ msg.sender.transfer(transferValue_re_ent39);\n1577-expression_statement-245-245", method="claimReward_re_ent39()", type_label=expression_statement];
1586 [label="245_ redeemableEther_re_ent39[msg.sender] = 0;\n1586-expression_statement-246-246", method="claimReward_re_ent39()", type_label=expression_statement];
1594 [label="247_ function changeStakeTime(uint256 _newStakeTime) public onlyOwner{\n        stakeTime = _newStakeTime;\n    }\n1594-function_definition-248-250", method="changeStakeTime(uint256 _newStakeTime)", type_label=function_definition];
1601 [label="247_ onlyOwner\n1601-expression_statement-248-248", method="changeStakeTime(uint256 _newStakeTime)", type_label=expression_statement];
1604 [label="248_ stakeTime = _newStakeTime;\n1604-expression_statement-249-249", method="changeStakeTime(uint256 _newStakeTime)", type_label=expression_statement];
1608 [label="250_ mapping(address => uint) balances_re_ent36;\n1608-new_variable-251-251", method="", type_label=new_variable];
1614 [label="251_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n1614-function_definition-252-255", method="withdraw_balances_re_ent36()", type_label=function_definition];
1618 [label="252_ if\n1618-if-253-254", method="withdraw_balances_re_ent36()", type_label=if];
3450 [label="252_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
1631 [label="253_ balances_re_ent36[msg.sender] = 0;\n1631-expression_statement-254-254", method="withdraw_balances_re_ent36()", type_label=expression_statement];
1639 [label="255_ function changeStakingPercentage(uint _newStakePercentage) public onlyOwner{\n        stakePercentage = _newStakePercentage;\n    }\n1639-function_definition-256-258", method="changeStakingPercentage(uint _newStakePercentage)", type_label=function_definition];
1646 [label="255_ onlyOwner\n1646-expression_statement-256-256", method="changeStakingPercentage(uint _newStakePercentage)", type_label=expression_statement];
1649 [label="256_ stakePercentage = _newStakePercentage;\n1649-expression_statement-257-257", method="changeStakingPercentage(uint _newStakePercentage)", type_label=expression_statement];
1653 [label="258_ uint256 counter_re_ent35 =0;\n1653-new_variable-259-259", method="", type_label=new_variable];
1658 [label="259_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n1658-function_definition-260-266", method="callme_re_ent35()", type_label=function_definition];
1662 [label="260_ require(counter_re_ent35<=5);\n1662-expression_statement-261-261", method="callme_re_ent35()", type_label=expression_statement];
1669 [label="261_ if\n1669-if-262-264", method="callme_re_ent35()", type_label=if];
3501 [label="261_ end_if", method="callme_re_ent35()", type_label=end_if];
1684 [label="264_ counter_re_ent35 += 1;\n1684-expression_statement-265-265", method="callme_re_ent35()", type_label=expression_statement];
1688 [label="266_ function lockWithdrawals() public onlyOwner{\n        lock = true;\n    }\n1688-function_definition-267-269", method="lockWithdrawals()", type_label=function_definition];
1691 [label="266_ onlyOwner\n1691-expression_statement-267-267", method="lockWithdrawals()", type_label=expression_statement];
1694 [label="267_ lock = true;\n1694-expression_statement-268-268", method="lockWithdrawals()", type_label=expression_statement];
1699 [label="269_ mapping(address => uint) userBalance_re_ent40;\n1699-new_variable-270-270", method="", type_label=new_variable];
1705 [label="270_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n1705-function_definition-271-277", method="withdrawBalance_re_ent40()", type_label=function_definition];
1709 [label="271_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n1709-new_variable-272-272", method="withdrawBalance_re_ent40()", type_label=new_variable];
1733 [label="272_ if\n1733-if-273-275", method="withdrawBalance_re_ent40()", type_label=if];
3565 [label="272_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
1739 [label="275_ userBalance_re_ent40[msg.sender] = 0;\n1739-expression_statement-276-276", method="withdrawBalance_re_ent40()", type_label=expression_statement];
1747 [label="277_ function findOnePercent(uint256 value) private view returns (uint256)  {\n        uint256 roundValue = value.ceil(basePercent);\n        uint256 onePercent = roundValue.mul(basePercent).div(10000);\n        return onePercent;\n    }\n1747-function_definition-278-282", method="findOnePercent(uint256 value)", type_label=function_definition];
1760 [label="278_ uint256 roundValue = value.ceil(basePercent);\n1760-new_variable-279-279", method="findOnePercent(uint256 value)", type_label=new_variable];
1771 [label="279_ uint256 onePercent = roundValue.mul(basePercent).div(10000);\n1771-new_variable-280-280", method="findOnePercent(uint256 value)", type_label=new_variable];
1787 [label="280_ return onePercent;\n1787-return-281-281", method="findOnePercent(uint256 value)", type_label=return];
1789 [label="282_ mapping(address => uint) userBalance_re_ent33;\n1789-new_variable-283-283", method="", type_label=new_variable];
1795 [label="283_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n1795-function_definition-284-290", method="withdrawBalance_re_ent33()", type_label=function_definition];
1799 [label="284_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n1799-new_variable-285-285", method="withdrawBalance_re_ent33()", type_label=new_variable];
1823 [label="285_ if\n1823-if-286-288", method="withdrawBalance_re_ent33()", type_label=if];
3655 [label="285_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
1829 [label="288_ userBalance_re_ent33[msg.sender] = 0;\n1829-expression_statement-289-289", method="withdrawBalance_re_ent33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 17  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
21 -> 25  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
25 -> 1857  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
36 -> 42  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
50 -> 55  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
61 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
69 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
124 -> 128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
133 -> 1965  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
177 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
192 -> 202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
202 -> 211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
222 -> 239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
241 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 325  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
320 -> 2152  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2152 -> 327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
325 -> 2152  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
325 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
327 -> 335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
335 -> 344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
344 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
346 -> 363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
373 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
390 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
401 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
426 -> 433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
435 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
452 -> 463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
463 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
474 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
507 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
511 -> 522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
522 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
532 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
573 -> 577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
584 -> 2416  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
618 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
626 -> 630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 2462  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
641 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
661 -> 665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
669 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
673 -> 2505  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
684 -> 690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
698 -> 704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
710 -> 718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
718 -> 729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
749 -> 754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
762 -> 766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
766 -> 770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
774 -> 778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
778 -> 796  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
796 -> 2628  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
801 -> 807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
826 -> 830  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
830 -> 841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
841 -> 851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
851 -> 860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
889 -> 2721  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
915 -> 921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
927 -> 931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
931 -> 955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
955 -> 2787  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
969 -> 975  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
981 -> 989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
989 -> 1000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 1012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1040 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1044 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 1070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1070 -> 2902  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1095 -> 1109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1115 -> 1119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1119 -> 1124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1124 -> 2956  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1157 -> 1164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1164 -> 1170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1185 -> 1189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1189 -> 1196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1196 -> 3028  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1215 -> 1219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1219 -> 1238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1238 -> 1261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1261 -> 1271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1311 -> 1315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1319 -> 1323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1323 -> 3155  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1334 -> 1340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1348 -> 1352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1352 -> 1358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1358 -> 1370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1370 -> 1385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1385 -> 1405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1461 -> 1472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1488 -> 1492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1492 -> 1516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1516 -> 1518  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1516 -> 3348  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3348 -> 1526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1518 -> 3348  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1526 -> 1536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1552 -> 1556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1556 -> 1567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1567 -> 1577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1577 -> 1586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1594 -> 1604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1614 -> 1618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1618 -> 1631  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1618 -> 3450  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3450 -> 1639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1631 -> 3450  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1639 -> 1649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1658 -> 1662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1662 -> 1669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1669 -> 3501  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1688 -> 1694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1705 -> 1709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1709 -> 1733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1733 -> 3565  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1747 -> 1760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1760 -> 1771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1771 -> 1787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1787 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1795 -> 1799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1799 -> 1823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1823 -> 3655  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
