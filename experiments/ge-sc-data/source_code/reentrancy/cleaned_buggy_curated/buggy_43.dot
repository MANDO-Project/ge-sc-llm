digraph  {
13 [label="2_ mapping(address => uint) userBalance_re_ent33;\n13-new_variable-3-3", method="", type_label=new_variable];
19 [label="3_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n19-function_definition-4-10", method="withdrawBalance_re_ent33()", type_label=function_definition];
23 [label="4_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n23-new_variable-5-5", method="withdrawBalance_re_ent33()", type_label=new_variable];
47 [label="5_ if\n47-if-6-8", method="withdrawBalance_re_ent33()", type_label=if];
2248 [label="5_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
53 [label="8_ userBalance_re_ent33[msg.sender] = 0;\n53-expression_statement-9-9", method="withdrawBalance_re_ent33()", type_label=expression_statement];
67 [label="11_ function _setMetadata(bytes memory metadata) internal {\n        emit MetadataSet(metadata);\n    }\n67-function_definition-12-14", method="_setMetadata(bytes memory metadata)", type_label=function_definition];
79 [label="14_ address payable lastPlayer_re_ent2;\n79-new_variable-15-15", method="", type_label=new_variable];
83 [label="15_ uint jackpot_re_ent2;\n83-new_variable-16-16", method="", type_label=new_variable];
87 [label="16_ function buyTicket_re_ent2() public{\n	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))\n        revert();\n      lastPlayer_re_ent2 = msg.sender;\n      jackpot_re_ent2    = address(this).balance;\n    }\n87-function_definition-17-22", method="buyTicket_re_ent2()", type_label=function_definition];
91 [label="17_ if\n91-if-18-19", method="buyTicket_re_ent2()", type_label=if];
2292 [label="17_ end_if", method="buyTicket_re_ent2()", type_label=end_if];
102 [label="19_ lastPlayer_re_ent2 = msg.sender;\n102-expression_statement-20-20", method="buyTicket_re_ent2()", type_label=expression_statement];
108 [label="20_ jackpot_re_ent2    = address(this).balance;\n108-expression_statement-21-21", method="buyTicket_re_ent2()", type_label=expression_statement];
119 [label="24_ mapping(address => uint) redeemableEther_re_ent11;\n119-new_variable-25-25", method="", type_label=new_variable];
125 [label="25_ function claimReward_re_ent11() public {        \n        require(redeemableEther_re_ent11[msg.sender] > 0);\n        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n        msg.sender.transfer(transferValue_re_ent11);    \n        redeemableEther_re_ent11[msg.sender] = 0;\n    }\n125-function_definition-26-31", method="claimReward_re_ent11()", type_label=function_definition];
129 [label="26_ require(redeemableEther_re_ent11[msg.sender] > 0);\n129-expression_statement-27-27", method="claimReward_re_ent11()", type_label=expression_statement];
140 [label="27_ uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n140-new_variable-28-28", method="claimReward_re_ent11()", type_label=new_variable];
150 [label="28_ msg.sender.transfer(transferValue_re_ent11);\n150-expression_statement-29-29", method="claimReward_re_ent11()", type_label=expression_statement];
159 [label="29_ redeemableEther_re_ent11[msg.sender] = 0;\n159-expression_statement-30-30", method="claimReward_re_ent11()", type_label=expression_statement];
167 [label="31_ address private _operator;\n167-new_variable-32-32", method="", type_label=new_variable];
172 [label="32_ mapping(address => uint) balances_re_ent1;\n172-new_variable-33-33", method="", type_label=new_variable];
178 [label="33_ function withdraw_balances_re_ent1 () public {\n       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent1[msg.sender] = 0;\n      }\n178-function_definition-34-38", method="withdraw_balances_re_ent1()", type_label=function_definition];
182 [label="34_ (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n182-new_variable-35-35", method="withdraw_balances_re_ent1()", type_label=new_variable];
206 [label="35_ if\n206-if-36-37", method="withdraw_balances_re_ent1()", type_label=if];
2407 [label="35_ end_if", method="withdraw_balances_re_ent1()", type_label=end_if];
208 [label="36_ balances_re_ent1[msg.sender] = 0;\n208-expression_statement-37-37", method="withdraw_balances_re_ent1()", type_label=expression_statement];
216 [label="38_ bool private _status;\n216-new_variable-39-39", method="", type_label=new_variable];
221 [label="39_ bool not_called_re_ent27 = true;\n221-new_variable-40-40", method="", type_label=new_variable];
227 [label="40_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n227-function_definition-41-47", method="bug_re_ent27()", type_label=function_definition];
231 [label="41_ require(not_called_re_ent27);\n231-expression_statement-42-42", method="bug_re_ent27()", type_label=expression_statement];
236 [label="42_ if\n236-if-43-45", method="bug_re_ent27()", type_label=if];
2437 [label="42_ end_if", method="bug_re_ent27()", type_label=end_if];
251 [label="45_ not_called_re_ent27 = false;\n251-expression_statement-46-46", method="bug_re_ent27()", type_label=expression_statement];
266 [label="48_ function _setOperator(address operator) internal {\n        require(_operator != operator, \"cannot set same operator\");\n        _operator = operator;\n        emit OperatorUpdated(operator, hasActiveOperator());\n    }\n266-function_definition-49-53", method="_setOperator(address operator)", type_label=function_definition];
274 [label="49_ require(_operator != operator, \"cannot set same operator\");\n274-expression_statement-50-50", method="_setOperator(address operator)", type_label=expression_statement];
284 [label="50_ _operator = operator;\n284-expression_statement-51-51", method="_setOperator(address operator)", type_label=expression_statement];
295 [label="53_ mapping(address => uint) balances_re_ent17;\n295-new_variable-54-54", method="", type_label=new_variable];
301 [label="54_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n301-function_definition-55-60", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
309 [label="55_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n309-expression_statement-56-56", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
320 [label="56_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n320-new_variable-57-57", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
340 [label="57_ require(success);\n340-expression_statement-58-58", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
345 [label="58_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n345-expression_statement-59-59", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
353 [label="60_ function _transferOperator(address operator) internal {\n        require(_operator != address(0), \"operator not set\");\n        _setOperator(operator);\n    }\n353-function_definition-61-64", method="_transferOperator(address operator)", type_label=function_definition];
361 [label="61_ require(_operator != address(0), \"operator not set\");\n361-expression_statement-62-62", method="_transferOperator(address operator)", type_label=expression_statement];
373 [label="62_ _setOperator(operator);\n373-expression_statement-63-63", method="_transferOperator(address operator)", type_label=expression_statement];
378 [label="64_ address payable lastPlayer_re_ent37;\n378-new_variable-65-65", method="", type_label=new_variable];
382 [label="65_ uint jackpot_re_ent37;\n382-new_variable-66-66", method="", type_label=new_variable];
386 [label="66_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n386-function_definition-67-72", method="buyTicket_re_ent37()", type_label=function_definition];
390 [label="67_ if\n390-if-68-69", method="buyTicket_re_ent37()", type_label=if];
2591 [label="67_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
401 [label="69_ lastPlayer_re_ent37 = msg.sender;\n401-expression_statement-70-70", method="buyTicket_re_ent37()", type_label=expression_statement];
407 [label="70_ jackpot_re_ent37    = address(this).balance;\n407-expression_statement-71-71", method="buyTicket_re_ent37()", type_label=expression_statement];
415 [label="72_ function _renounceOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _operator = address(0);\n        _status = false;\n        emit OperatorUpdated(address(0), false);\n    }\n415-function_definition-73-78", method="_renounceOperator()", type_label=function_definition];
419 [label="73_ require(hasActiveOperator(), \"only when operator active\");\n419-expression_statement-74-74", method="_renounceOperator()", type_label=expression_statement];
428 [label="74_ _operator = address(0);\n428-expression_statement-75-75", method="_renounceOperator()", type_label=expression_statement];
434 [label="75_ _status = false;\n434-expression_statement-76-76", method="_renounceOperator()", type_label=expression_statement];
448 [label="78_ mapping(address => uint) balances_re_ent3;\n448-new_variable-79-79", method="", type_label=new_variable];
454 [label="79_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n454-function_definition-80-85", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
462 [label="80_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n462-expression_statement-81-81", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
473 [label="81_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n473-new_variable-82-82", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
493 [label="82_ require(success);\n493-expression_statement-83-83", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
498 [label="83_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n498-expression_statement-84-84", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
506 [label="85_ function _activateOperator() internal {\n        require(!hasActiveOperator(), \"only when operator not active\");\n        _status = true;\n        emit OperatorUpdated(_operator, true);\n    }\n506-function_definition-86-90", method="_activateOperator()", type_label=function_definition];
510 [label="86_ require(!hasActiveOperator(), \"only when operator not active\");\n510-expression_statement-87-87", method="_activateOperator()", type_label=expression_statement];
520 [label="87_ _status = true;\n520-expression_statement-88-88", method="_activateOperator()", type_label=expression_statement];
532 [label="90_ address payable lastPlayer_re_ent9;\n532-new_variable-91-91", method="", type_label=new_variable];
536 [label="91_ uint jackpot_re_ent9;\n536-new_variable-92-92", method="", type_label=new_variable];
540 [label="92_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n540-function_definition-93-99", method="buyTicket_re_ent9()", type_label=function_definition];
544 [label="93_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n544-new_variable-94-94", method="buyTicket_re_ent9()", type_label=new_variable];
562 [label="94_ if\n562-if-95-96", method="buyTicket_re_ent9()", type_label=if];
2763 [label="94_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
567 [label="96_ lastPlayer_re_ent9 = msg.sender;\n567-expression_statement-97-97", method="buyTicket_re_ent9()", type_label=expression_statement];
573 [label="97_ jackpot_re_ent9    = address(this).balance;\n573-expression_statement-98-98", method="buyTicket_re_ent9()", type_label=expression_statement];
581 [label="99_ function _deactivateOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _status = false;\n        emit OperatorUpdated(_operator, false);\n    }\n581-function_definition-100-104", method="_deactivateOperator()", type_label=function_definition];
585 [label="100_ require(hasActiveOperator(), \"only when operator active\");\n585-expression_statement-101-101", method="_deactivateOperator()", type_label=expression_statement];
594 [label="101_ _status = false;\n594-expression_statement-102-102", method="_deactivateOperator()", type_label=expression_statement];
606 [label="104_ mapping(address => uint) redeemableEther_re_ent25;\n606-new_variable-105-105", method="", type_label=new_variable];
612 [label="105_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n612-function_definition-106-111", method="claimReward_re_ent25()", type_label=function_definition];
616 [label="106_ require(redeemableEther_re_ent25[msg.sender] > 0);\n616-expression_statement-107-107", method="claimReward_re_ent25()", type_label=expression_statement];
627 [label="107_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n627-new_variable-108-108", method="claimReward_re_ent25()", type_label=new_variable];
637 [label="108_ msg.sender.transfer(transferValue_re_ent25);\n637-expression_statement-109-109", method="claimReward_re_ent25()", type_label=expression_statement];
646 [label="109_ redeemableEther_re_ent25[msg.sender] = 0;\n646-expression_statement-110-110", method="claimReward_re_ent25()", type_label=expression_statement];
654 [label="111_ function getOperator() public view returns (address operator) {\n        operator = _operator;\n    }\n654-function_definition-112-114", method="getOperator()", type_label=function_definition];
664 [label="112_ operator = _operator;\n664-expression_statement-113-113", method="getOperator()", type_label=expression_statement];
668 [label="114_ mapping(address => uint) userBalance_re_ent19;\n668-new_variable-115-115", method="", type_label=new_variable];
674 [label="115_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n674-function_definition-116-121", method="withdrawBalance_re_ent19()", type_label=function_definition];
678 [label="116_ if\n678-if-117-119", method="withdrawBalance_re_ent19()", type_label=if];
2879 [label="116_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
696 [label="119_ userBalance_re_ent19[msg.sender] = 0;\n696-expression_statement-120-120", method="withdrawBalance_re_ent19()", type_label=expression_statement];
704 [label="121_ function isOperator(address caller) public view returns (bool ok) {\n        return (caller == getOperator());\n    }\n704-function_definition-122-124", method="isOperator(address caller)", type_label=function_definition];
718 [label="122_ return (caller == getOperator());\n718-return-123-123", method="isOperator(address caller)", type_label=return];
724 [label="124_ mapping(address => uint) userBalance_re_ent26;\n724-new_variable-125-125", method="", type_label=new_variable];
730 [label="125_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n730-function_definition-126-132", method="withdrawBalance_re_ent26()", type_label=function_definition];
734 [label="126_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n734-new_variable-127-127", method="withdrawBalance_re_ent26()", type_label=new_variable];
758 [label="127_ if\n758-if-128-130", method="withdrawBalance_re_ent26()", type_label=if];
2959 [label="127_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
764 [label="130_ userBalance_re_ent26[msg.sender] = 0;\n764-expression_statement-131-131", method="withdrawBalance_re_ent26()", type_label=expression_statement];
772 [label="132_ function hasActiveOperator() public view returns (bool ok) {\n        return _status;\n    }\n772-function_definition-133-135", method="hasActiveOperator()", type_label=function_definition];
782 [label="133_ return _status;\n782-return-134-134", method="hasActiveOperator()", type_label=return];
784 [label="135_ bool not_called_re_ent20 = true;\n784-new_variable-136-136", method="", type_label=new_variable];
790 [label="136_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n790-function_definition-137-143", method="bug_re_ent20()", type_label=function_definition];
794 [label="137_ require(not_called_re_ent20);\n794-expression_statement-138-138", method="bug_re_ent20()", type_label=expression_statement];
799 [label="138_ if\n799-if-139-141", method="bug_re_ent20()", type_label=if];
3000 [label="138_ end_if", method="bug_re_ent20()", type_label=end_if];
814 [label="141_ not_called_re_ent20 = false;\n814-expression_statement-142-142", method="bug_re_ent20()", type_label=expression_statement];
819 [label="143_ function isActiveOperator(address caller) public view returns (bool ok) {\n        return (isOperator(caller) && hasActiveOperator());\n    }\n819-function_definition-144-146", method="isActiveOperator(address caller)", type_label=function_definition];
833 [label="144_ return (isOperator(caller) && hasActiveOperator());\n833-return-145-145", method="isActiveOperator(address caller)", type_label=return];
842 [label="146_ mapping(address => uint) redeemableEther_re_ent32;\n842-new_variable-147-147", method="", type_label=new_variable];
848 [label="147_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n848-function_definition-148-153", method="claimReward_re_ent32()", type_label=function_definition];
852 [label="148_ require(redeemableEther_re_ent32[msg.sender] > 0);\n852-expression_statement-149-149", method="claimReward_re_ent32()", type_label=expression_statement];
863 [label="149_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n863-new_variable-150-150", method="claimReward_re_ent32()", type_label=new_variable];
873 [label="150_ msg.sender.transfer(transferValue_re_ent32);\n873-expression_statement-151-151", method="claimReward_re_ent32()", type_label=expression_statement];
882 [label="151_ redeemableEther_re_ent32[msg.sender] = 0;\n882-expression_statement-152-152", method="claimReward_re_ent32()", type_label=expression_statement];
893 [label="155_ struct MultiHash {\n        bytes32 hash;\n        uint8 hashFunction;\n        uint8 digestSize;\n    }\n893-expression_statement-156-160", method="MultiHash()", type_label=expression_statement];
907 [label="160_ function _combineMultiHash(MultiHash memory multihash) internal pure returns (bytes memory) {\n        bytes memory out = new bytes(34);\n        out[0] = byte(multihash.hashFunction);\n        out[1] = byte(multihash.digestSize);\n        uint8 i;\n        for (i = 0; i < 32; i++) {\n          out[i+2] = multihash.hash[i];\n        }\n        return out;\n    }\n907-function_definition-161-170", method="_combineMultiHash(MultiHash memory multihash)", type_label=function_definition];
921 [label="161_ bytes memory out = new bytes(34);\n921-new_variable-162-162", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
932 [label="162_ out[0] = byte(multihash.hashFunction);\n932-expression_statement-163-163", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
942 [label="163_ out[1] = byte(multihash.digestSize);\n942-expression_statement-164-164", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
952 [label="164_ uint8 i;\n952-new_variable-165-165", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
957 [label="165_ for(i < 32;;i++)\n957-for-166-168", method="_combineMultiHash(MultiHash memory multihash)", type_label=for];
3158 [label="165_ end_loop", method="_combineMultiHash(MultiHash memory multihash)", type_label=end_loop];
966 [label="165_ i++\n966-expression_statement-166-166", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
969 [label="166_ out[i+2] = multihash.hash[i];\n969-expression_statement-167-167", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
981 [label="168_ return out;\n981-return-169-169", method="_combineMultiHash(MultiHash memory multihash)", type_label=return];
983 [label="170_ mapping(address => uint) balances_re_ent38;\n983-new_variable-171-171", method="", type_label=new_variable];
989 [label="171_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n989-function_definition-172-176", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
997 [label="172_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n997-expression_statement-173-173", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1008 [label="173_ require(msg.sender.send(_weiToWithdraw));\n1008-expression_statement-174-174", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1020 [label="174_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n1020-expression_statement-175-175", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1028 [label="176_ function _splitMultiHash(bytes memory source) internal pure returns (MultiHash memory) {\n        require(source.length == 34, \"length of source must be 34\");\n        uint8 hashFunction = uint8(source[0]);\n        uint8 digestSize = uint8(source[1]);\n        bytes32 hash;\n        assembly {\n          hash := mload(add(source, 34))\n        }\n        return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n    }\n1028-function_definition-177-190", method="_splitMultiHash(bytes memory source)", type_label=function_definition];
1042 [label="177_ require(source.length == 34, \"length of source must be 34\");\n1042-expression_statement-178-178", method="_splitMultiHash(bytes memory source)", type_label=expression_statement];
1054 [label="178_ uint8 hashFunction = uint8(source[0]);\n1054-new_variable-179-179", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
1064 [label="179_ uint8 digestSize = uint8(source[1]);\n1064-new_variable-180-180", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
1074 [label="180_ bytes32 hash;\n1074-new_variable-181-181", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
1092 [label="184_ return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n1092-return-185-189", method="_splitMultiHash(bytes memory source)", type_label=return];
1106 [label="190_ mapping(address => uint) redeemableEther_re_ent4;\n1106-new_variable-191-191", method="", type_label=new_variable];
1112 [label="191_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n1112-function_definition-192-197", method="claimReward_re_ent4()", type_label=function_definition];
1116 [label="192_ require(redeemableEther_re_ent4[msg.sender] > 0);\n1116-expression_statement-193-193", method="claimReward_re_ent4()", type_label=expression_statement];
1127 [label="193_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n1127-new_variable-194-194", method="claimReward_re_ent4()", type_label=new_variable];
1137 [label="194_ msg.sender.transfer(transferValue_re_ent4);\n1137-expression_statement-195-195", method="claimReward_re_ent4()", type_label=expression_statement];
1146 [label="195_ redeemableEther_re_ent4[msg.sender] = 0;\n1146-expression_statement-196-196", method="claimReward_re_ent4()", type_label=expression_statement];
1175 [label="200_ function create(bytes calldata initData) external returns (address instance);\n1175-function_definition-201-201", method="create(bytes calldata initData)", type_label=function_definition];
1187 [label="201_ function createSalty(bytes calldata initData, bytes32 salt) external returns (address instance);\n1187-function_definition-202-202", method="createSalty(bytes calldata initData,bytes32 salt)", type_label=function_definition];
1203 [label="202_ function getInitSelector() external view returns (bytes4 initSelector);\n1203-function_definition-203-203", method="getInitSelector()", type_label=function_definition];
1212 [label="203_ function getInstanceRegistry() external view returns (address instanceRegistry);\n1212-function_definition-204-204", method="getInstanceRegistry()", type_label=function_definition];
1221 [label="204_ function getTemplate() external view returns (address template);\n1221-function_definition-205-205", method="getTemplate()", type_label=function_definition];
1230 [label="205_ function getSaltyInstance(bytes calldata, bytes32 salt) external view returns (address instance);\n1230-function_definition-206-206", method="getSaltyInstance(bytes calldata,bytes32 salt)", type_label=function_definition];
1246 [label="206_ function getNextInstance(bytes calldata) external view returns (address instance);\n1246-function_definition-207-207", method="getNextInstance(bytes calldata)", type_label=function_definition];
1258 [label="207_ function getInstanceCreator(address instance) external view returns (address creator);\n1258-function_definition-208-208", method="getInstanceCreator(address instance)", type_label=function_definition];
1271 [label="208_ function getInstanceType() external view returns (bytes4 instanceType);\n1271-function_definition-209-209", method="getInstanceType()", type_label=function_definition];
1280 [label="209_ function getInstanceCount() external view returns (uint256 count);\n1280-function_definition-210-210", method="getInstanceCount()", type_label=function_definition];
1289 [label="210_ function getInstance(uint256 index) external view returns (address instance);\n1289-function_definition-211-211", method="getInstance(uint256 index)", type_label=function_definition];
1302 [label="211_ function getInstances() external view returns (address[] memory instances);\n1302-function_definition-212-212", method="getInstances()", type_label=function_definition];
1312 [label="212_ function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);\n1312-function_definition-213-213", method="getPaginatedInstances(uint256 startIndex,uint256 endIndex)", type_label=function_definition];
1336 [label="215_ bool not_called_re_ent41 = true;\n1336-new_variable-216-216", method="", type_label=new_variable];
1342 [label="216_ function bug_re_ent41() public{\n        require(not_called_re_ent41);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent41 = false;\n    }\n1342-function_definition-217-223", method="bug_re_ent41()", type_label=function_definition];
1346 [label="217_ require(not_called_re_ent41);\n1346-expression_statement-218-218", method="bug_re_ent41()", type_label=expression_statement];
1351 [label="218_ if\n1351-if-219-221", method="bug_re_ent41()", type_label=if];
3552 [label="218_ end_if", method="bug_re_ent41()", type_label=end_if];
1366 [label="221_ not_called_re_ent41 = false;\n1366-expression_statement-222-222", method="bug_re_ent41()", type_label=expression_statement];
1371 [label="223_ MultiHash private _proofHash;\n1371-new_variable-224-224", method="", type_label=new_variable];
1377 [label="224_ mapping(address => uint) balances_re_ent31;\n1377-new_variable-225-225", method="", type_label=new_variable];
1383 [label="225_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n1383-function_definition-226-230", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
1391 [label="226_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n1391-expression_statement-227-227", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1402 [label="227_ require(msg.sender.send(_weiToWithdraw));\n1402-expression_statement-228-228", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1414 [label="228_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n1414-expression_statement-229-229", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1432 [label="231_ function _setProofHash(bytes memory proofHash) internal {\n        _proofHash = MultiHashWrapper._splitMultiHash(proofHash);\n        emit ProofHashSet(msg.sender, proofHash);\n    }\n1432-function_definition-232-235", method="_setProofHash(bytes memory proofHash)", type_label=function_definition];
1440 [label="232_ _proofHash = MultiHashWrapper._splitMultiHash(proofHash);\n1440-expression_statement-233-233", method="_setProofHash(bytes memory proofHash)", type_label=expression_statement];
1457 [label="235_ uint256 counter_re_ent7 =0;\n1457-new_variable-236-236", method="", type_label=new_variable];
1462 [label="236_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n1462-function_definition-237-243", method="callme_re_ent7()", type_label=function_definition];
1466 [label="237_ require(counter_re_ent7<=5);\n1466-expression_statement-238-238", method="callme_re_ent7()", type_label=expression_statement];
1473 [label="238_ if\n1473-if-239-241", method="callme_re_ent7()", type_label=if];
3674 [label="238_ end_if", method="callme_re_ent7()", type_label=end_if];
1488 [label="241_ counter_re_ent7 += 1;\n1488-expression_statement-242-242", method="callme_re_ent7()", type_label=expression_statement];
1492 [label="243_ function getProofHash() public view returns (bytes memory proofHash) {\n        proofHash = MultiHashWrapper._combineMultiHash(_proofHash);\n    }\n1492-function_definition-244-246", method="getProofHash()", type_label=function_definition];
1502 [label="244_ proofHash = MultiHashWrapper._combineMultiHash(_proofHash);\n1502-expression_statement-245-245", method="getProofHash()", type_label=expression_statement];
1511 [label="246_ address payable lastPlayer_re_ent23;\n1511-new_variable-247-247", method="", type_label=new_variable];
1515 [label="247_ uint jackpot_re_ent23;\n1515-new_variable-248-248", method="", type_label=new_variable];
1519 [label="248_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n1519-function_definition-249-254", method="buyTicket_re_ent23()", type_label=function_definition];
1523 [label="249_ if\n1523-if-250-251", method="buyTicket_re_ent23()", type_label=if];
3724 [label="249_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
1534 [label="251_ lastPlayer_re_ent23 = msg.sender;\n1534-expression_statement-252-252", method="buyTicket_re_ent23()", type_label=expression_statement];
1540 [label="252_ jackpot_re_ent23    = address(this).balance;\n1540-expression_statement-253-253", method="buyTicket_re_ent23()", type_label=expression_statement];
1551 [label="256_ uint256 counter_re_ent42 =0;\n1551-new_variable-257-257", method="", type_label=new_variable];
1556 [label="257_ function callme_re_ent42() public{\n        require(counter_re_ent42<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent42 += 1;\n    }\n1556-function_definition-258-264", method="callme_re_ent42()", type_label=function_definition];
1560 [label="258_ require(counter_re_ent42<=5);\n1560-expression_statement-259-259", method="callme_re_ent42()", type_label=expression_statement];
1567 [label="259_ if\n1567-if-260-262", method="callme_re_ent42()", type_label=if];
3768 [label="259_ end_if", method="callme_re_ent42()", type_label=end_if];
1582 [label="262_ counter_re_ent42 += 1;\n1582-expression_statement-263-263", method="callme_re_ent42()", type_label=expression_statement];
1586 [label="264_ address private _factory;\n1586-new_variable-265-265", method="", type_label=new_variable];
1591 [label="265_ modifier initializeTemplate() {\n        _factory = msg.sender;\n        uint32 codeSize;\n        assembly { codeSize := extcodesize(address) }\n        require(codeSize == 0, \"must be called within contract constructor\");\n        _;\n    }\n1591-expression_statement-266-272", method="", type_label=expression_statement];
1594 [label="266_ _factory = msg.sender;\n1594-expression_statement-267-267", method="", type_label=expression_statement];
1600 [label="267_ uint32 codeSize;\n1600-new_variable-268-268", method="", type_label=new_variable];
1614 [label="269_ require(codeSize == 0, \"must be called within contract constructor\");\n1614-expression_statement-270-270", method="", type_label=expression_statement];
1624 [label="270_ _;\n1624-expression_statement-271-271", method="", type_label=expression_statement];
1626 [label="272_ function getCreator() public view returns (address creator) {\n        creator = iFactory(_factory).getInstanceCreator(address(this));\n    }\n1626-function_definition-273-275", method="getCreator()", type_label=function_definition];
1636 [label="273_ creator = iFactory(_factory).getInstanceCreator(address(this));\n1636-expression_statement-274-274", method="getCreator()", type_label=expression_statement];
1650 [label="275_ uint256 counter_re_ent14 =0;\n1650-new_variable-276-276", method="", type_label=new_variable];
1655 [label="276_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n1655-function_definition-277-283", method="callme_re_ent14()", type_label=function_definition];
1659 [label="277_ require(counter_re_ent14<=5);\n1659-expression_statement-278-278", method="callme_re_ent14()", type_label=expression_statement];
1666 [label="278_ if\n1666-if-279-281", method="callme_re_ent14()", type_label=if];
3867 [label="278_ end_if", method="callme_re_ent14()", type_label=end_if];
1681 [label="281_ counter_re_ent14 += 1;\n1681-expression_statement-282-282", method="callme_re_ent14()", type_label=expression_statement];
1685 [label="283_ function isCreator(address caller) public view returns (bool ok) {\n        ok = (caller == getCreator());\n    }\n1685-function_definition-284-286", method="isCreator(address caller)", type_label=function_definition];
1699 [label="284_ ok = (caller == getCreator());\n1699-expression_statement-285-285", method="isCreator(address caller)", type_label=expression_statement];
1707 [label="286_ address payable lastPlayer_re_ent30;\n1707-new_variable-287-287", method="", type_label=new_variable];
1711 [label="287_ uint jackpot_re_ent30;\n1711-new_variable-288-288", method="", type_label=new_variable];
1715 [label="288_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n1715-function_definition-289-294", method="buyTicket_re_ent30()", type_label=function_definition];
1719 [label="289_ if\n1719-if-290-291", method="buyTicket_re_ent30()", type_label=if];
3920 [label="289_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
1730 [label="291_ lastPlayer_re_ent30 = msg.sender;\n1730-expression_statement-292-292", method="buyTicket_re_ent30()", type_label=expression_statement];
1736 [label="292_ jackpot_re_ent30    = address(this).balance;\n1736-expression_statement-293-293", method="buyTicket_re_ent30()", type_label=expression_statement];
1744 [label="294_ function getFactory() public view returns (address factory) {\n        factory = _factory;\n    }\n1744-function_definition-295-297", method="getFactory()", type_label=function_definition];
1754 [label="295_ factory = _factory;\n1754-expression_statement-296-296", method="getFactory()", type_label=expression_statement];
1758 [label="297_ mapping(address => uint) balances_re_ent8;\n1758-new_variable-298-298", method="", type_label=new_variable];
1764 [label="298_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n1764-function_definition-299-303", method="withdraw_balances_re_ent8()", type_label=function_definition];
1768 [label="299_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n1768-new_variable-300-300", method="withdraw_balances_re_ent8()", type_label=new_variable];
1792 [label="300_ if\n1792-if-301-302", method="withdraw_balances_re_ent8()", type_label=if];
3993 [label="300_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
1794 [label="301_ balances_re_ent8[msg.sender] = 0;\n1794-expression_statement-302-302", method="withdraw_balances_re_ent8()", type_label=expression_statement];
1817 [label="305_ bool not_called_re_ent13 = true;\n1817-new_variable-306-306", method="", type_label=new_variable];
1823 [label="306_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n1823-function_definition-307-314", method="bug_re_ent13()", type_label=function_definition];
1827 [label="307_ require(not_called_re_ent13);\n1827-expression_statement-308-308", method="bug_re_ent13()", type_label=expression_statement];
1832 [label="308_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n1832-new_variable-309-309", method="bug_re_ent13()", type_label=new_variable];
1853 [label="309_ if\n1853-if-310-312", method="bug_re_ent13()", type_label=if];
4054 [label="309_ end_if", method="bug_re_ent13()", type_label=end_if];
1859 [label="312_ not_called_re_ent13 = false;\n1859-expression_statement-313-313", method="bug_re_ent13()", type_label=expression_statement];
1878 [label="315_ function initialize(\n        address operator,\n        bytes memory multihash,\n        bytes memory metadata\n    ) public initializeTemplate() {\n        if (multihash.length != 0) {\n            ProofHash._setProofHash(multihash);\n        }\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n            Operated._activateOperator();\n        }\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n        emit Initialized(operator, multihash, metadata);\n    }\n1878-function_definition-316-332", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=function_definition];
1893 [label="319_ initializeTemplate()\n1893-expression_statement-320-320", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1896 [label="320_ if_multihash.length != 0\n1896-if-321-323", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
4097 [label="320_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1903 [label="321_ ProofHash._setProofHash(multihash);\n1903-expression_statement-322-322", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1910 [label="323_ if_operator != address(0)\n1910-if-324-327", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
4111 [label="323_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1917 [label="324_ Operated._setOperator(operator);\n1917-expression_statement-325-325", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1924 [label="325_ Operated._activateOperator();\n1924-expression_statement-326-326", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1929 [label="327_ if_metadata.length != 0\n1929-if-328-330", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
4130 [label="327_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1936 [label="328_ EventMetadata._setMetadata(metadata);\n1936-expression_statement-329-329", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1951 [label="332_ mapping(address => uint) redeemableEther_re_ent39;\n1951-new_variable-333-333", method="", type_label=new_variable];
1957 [label="333_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n1957-function_definition-334-339", method="claimReward_re_ent39()", type_label=function_definition];
1961 [label="334_ require(redeemableEther_re_ent39[msg.sender] > 0);\n1961-expression_statement-335-335", method="claimReward_re_ent39()", type_label=expression_statement];
1972 [label="335_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n1972-new_variable-336-336", method="claimReward_re_ent39()", type_label=new_variable];
1982 [label="336_ msg.sender.transfer(transferValue_re_ent39);\n1982-expression_statement-337-337", method="claimReward_re_ent39()", type_label=expression_statement];
1991 [label="337_ redeemableEther_re_ent39[msg.sender] = 0;\n1991-expression_statement-338-338", method="claimReward_re_ent39()", type_label=expression_statement];
1999 [label="339_ function setMetadata(bytes memory metadata) public {\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n        EventMetadata._setMetadata(metadata);\n    }\n1999-function_definition-340-343", method="setMetadata(bytes memory metadata)", type_label=function_definition];
2007 [label="340_ require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n2007-expression_statement-341-341", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
2031 [label="341_ EventMetadata._setMetadata(metadata);\n2031-expression_statement-342-342", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
2038 [label="343_ mapping(address => uint) balances_re_ent36;\n2038-new_variable-344-344", method="", type_label=new_variable];
2044 [label="344_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n2044-function_definition-345-348", method="withdraw_balances_re_ent36()", type_label=function_definition];
2048 [label="345_ if\n2048-if-346-347", method="withdraw_balances_re_ent36()", type_label=if];
4249 [label="345_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
2061 [label="346_ balances_re_ent36[msg.sender] = 0;\n2061-expression_statement-347-347", method="withdraw_balances_re_ent36()", type_label=expression_statement];
2069 [label="348_ function transferOperator(address operator) public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._transferOperator(operator);\n    }\n2069-function_definition-349-352", method="transferOperator(address operator)", type_label=function_definition];
2077 [label="349_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n2077-expression_statement-350-350", method="transferOperator(address operator)", type_label=expression_statement];
2092 [label="350_ Operated._transferOperator(operator);\n2092-expression_statement-351-351", method="transferOperator(address operator)", type_label=expression_statement];
2099 [label="352_ uint256 counter_re_ent35 =0;\n2099-new_variable-353-353", method="", type_label=new_variable];
2104 [label="353_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n2104-function_definition-354-360", method="callme_re_ent35()", type_label=function_definition];
2108 [label="354_ require(counter_re_ent35<=5);\n2108-expression_statement-355-355", method="callme_re_ent35()", type_label=expression_statement];
2115 [label="355_ if\n2115-if-356-358", method="callme_re_ent35()", type_label=if];
4316 [label="355_ end_if", method="callme_re_ent35()", type_label=end_if];
2130 [label="358_ counter_re_ent35 += 1;\n2130-expression_statement-359-359", method="callme_re_ent35()", type_label=expression_statement];
2134 [label="360_ function renounceOperator() public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._renounceOperator();\n    }\n2134-function_definition-361-364", method="renounceOperator()", type_label=function_definition];
2138 [label="361_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n2138-expression_statement-362-362", method="renounceOperator()", type_label=expression_statement];
2153 [label="362_ Operated._renounceOperator();\n2153-expression_statement-363-363", method="renounceOperator()", type_label=expression_statement];
2158 [label="364_ mapping(address => uint) userBalance_re_ent40;\n2158-new_variable-365-365", method="", type_label=new_variable];
2164 [label="365_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n2164-function_definition-366-372", method="withdrawBalance_re_ent40()", type_label=function_definition];
2168 [label="366_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n2168-new_variable-367-367", method="withdrawBalance_re_ent40()", type_label=new_variable];
2192 [label="367_ if\n2192-if-368-370", method="withdrawBalance_re_ent40()", type_label=if];
4393 [label="367_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
2198 [label="370_ userBalance_re_ent40[msg.sender] = 0;\n2198-expression_statement-371-371", method="withdrawBalance_re_ent40()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1802;
1943;
19 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
23 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 2248  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
79 -> 83  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 91  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
91 -> 2292  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
102 -> 108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
125 -> 129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
167 -> 172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 208  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
206 -> 2407  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2407 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 2407  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
216 -> 221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 2437  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
266 -> 274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
274 -> 284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
301 -> 309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
309 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
340 -> 345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
390 -> 2591  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
401 -> 407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
454 -> 462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
462 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
506 -> 510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
532 -> 536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
562 -> 2763  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
567 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
581 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
612 -> 616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
616 -> 627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
627 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
637 -> 646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
654 -> 664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
674 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 2879  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
704 -> 718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
718 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
730 -> 734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
734 -> 758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 2959  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
772 -> 782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
782 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
790 -> 794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
794 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 3000  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
819 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
848 -> 852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
852 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
863 -> 873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
873 -> 882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
907 -> 921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
921 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
942 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
952 -> 957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
957 -> 969  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
957 -> 3158  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3158 -> 981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
966 -> 957  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
969 -> 966  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
981 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
989 -> 997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
997 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1008 -> 1020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1028 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1064 -> 1074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1092 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1112 -> 1116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1116 -> 1127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1127 -> 1137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1137 -> 1146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1342 -> 1346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1346 -> 1351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1351 -> 3552  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1371 -> 1377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1383 -> 1391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1391 -> 1402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1402 -> 1414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1432 -> 1440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1462 -> 1466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1466 -> 1473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1473 -> 3674  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1492 -> 1502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1511 -> 1515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1519 -> 1523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1523 -> 3724  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1534 -> 1540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1556 -> 1560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1560 -> 1567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1567 -> 3768  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1586 -> 1591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1594 -> 1600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1614 -> 1624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1626 -> 1636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1655 -> 1659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1659 -> 1666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1666 -> 3867  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1685 -> 1699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1707 -> 1711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1715 -> 1719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1719 -> 3920  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1730 -> 1736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1744 -> 1754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1764 -> 1768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1768 -> 1792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1792 -> 1794  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1792 -> 3993  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3993 -> 1802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1794 -> 3993  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1823 -> 1827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1827 -> 1832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1832 -> 1853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1853 -> 4054  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1878 -> 1896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1896 -> 1903  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1896 -> 4097  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4097 -> 1910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1903 -> 4097  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1910 -> 1917  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1910 -> 4111  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4111 -> 1929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1917 -> 1924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1924 -> 4111  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1929 -> 1936  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1929 -> 4130  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4130 -> 1943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1936 -> 4130  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1957 -> 1961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1961 -> 1972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1972 -> 1982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1982 -> 1991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1999 -> 2007  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2007 -> 2031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2044 -> 2048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2048 -> 2061  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2048 -> 4249  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4249 -> 2069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2061 -> 4249  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2069 -> 2077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2077 -> 2092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2104 -> 2108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2108 -> 2115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2115 -> 4316  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2134 -> 2138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2138 -> 2153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2164 -> 2168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2168 -> 2192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2192 -> 4393  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
