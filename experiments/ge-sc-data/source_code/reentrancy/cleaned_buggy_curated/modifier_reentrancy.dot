digraph  {
13 [label="2_ mapping (address => uint) public tokenBalance;\n13-new_variable-3-3", method="", type_label=new_variable];
20 [label="3_ string constant name = \"Nu Token\";\n20-new_variable-4-4", method="", type_label=new_variable];
26 [label="4_ function airDrop() hasNoBalance supportsToken  public{\n    tokenBalance[msg.sender] += 20;\n  }\n26-function_definition-5-7", method="airDrop()", type_label=function_definition];
28 [label="4_ hasNoBalance\n28-expression_statement-5-5", method="airDrop()", type_label=expression_statement];
30 [label="4_ supportsToken\n30-expression_statement-5-5", method="airDrop()", type_label=expression_statement];
34 [label="5_ tokenBalance[msg.sender] += 20;\n34-expression_statement-6-6", method="airDrop()", type_label=expression_statement];
42 [label="7_ modifier supportsToken() {\n    require(keccak256(abi.encodePacked(\"Nu Token\")) == Bank(msg.sender).supportsToken());\n    _;\n  }\n42-expression_statement-8-11", method="", type_label=expression_statement];
45 [label="8_ require(keccak256(abi.encodePacked(\"Nu Token\")) == Bank(msg.sender).supportsToken());\n45-expression_statement-9-9", method="", type_label=expression_statement];
69 [label="9_ _;\n69-expression_statement-10-10", method="", type_label=expression_statement];
71 [label="11_ modifier hasNoBalance {\n      require(tokenBalance[msg.sender] == 0);\n      _;\n  }\n71-expression_statement-12-15", method="", type_label=expression_statement];
74 [label="12_ require(tokenBalance[msg.sender] == 0);\n74-expression_statement-13-13", method="", type_label=expression_statement];
85 [label="13_ _;\n85-expression_statement-14-14", method="", type_label=expression_statement];
90 [label="17_ function supportsToken() external pure returns(bytes32){\n        return(keccak256(abi.encodePacked(\"Nu Token\")));\n    }\n90-function_definition-18-20", method="supportsToken()", type_label=function_definition];
99 [label="18_ return(keccak256(abi.encodePacked(\"Nu Token\")));\n99-return-19-19", method="supportsToken()", type_label=return];
114 [label="22_ bool hasBeenCalled;\n114-new_variable-23-23", method="", type_label=new_variable];
118 [label="23_ function supportsToken() external returns(bytes32){\n        if(!hasBeenCalled){\n            hasBeenCalled = true;\n            ModifierEntrancy(msg.sender).airDrop();\n        }\n        return(keccak256(abi.encodePacked(\"Nu Token\")));\n    }\n118-function_definition-24-30", method="supportsToken()", type_label=function_definition];
126 [label="24_ if\n126-if-25-28", method="supportsToken()", type_label=if];
294 [label="24_ end_if", method="supportsToken()", type_label=end_if];
130 [label="25_ hasBeenCalled = true;\n130-expression_statement-26-26", method="supportsToken()", type_label=expression_statement];
135 [label="26_ ModifierEntrancy(msg.sender).airDrop();\n135-expression_statement-27-27", method="supportsToken()", type_label=expression_statement];
145 [label="28_ return(keccak256(abi.encodePacked(\"Nu Token\")));\n145-return-29-29", method="supportsToken()", type_label=return];
157 [label="30_ function call(address token) public{\n        ModifierEntrancy(token).airDrop();\n    }\n157-function_definition-31-33", method="call(address token)", type_label=function_definition];
165 [label="31_ ModifierEntrancy(token).airDrop();\n165-expression_statement-32-32", method="call(address token)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 20  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
26 -> 34  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
28 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
42 -> 71  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
74 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
90 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
118 -> 126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
126 -> 130  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
126 -> 294  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
294 -> 145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
135 -> 294  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
145 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
157 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
