digraph  {
13 [label="3_ mapping (address => uint) public balances;\n13-new_variable-4-4", method="", type_label=new_variable];
20 [label="4_ uint public MinDeposit = 1 ether;\n20-new_variable-5-5", method="", type_label=new_variable];
27 [label="5_ Log TransferLog;\n27-new_variable-6-6", method="", type_label=new_variable];
32 [label="6_ function ETH_VAULT(address _log)\n    public \n    {\n        TransferLog = Log(_log);\n    }\n32-function_definition-7-11", method="ETH_VAULT(address _log)", type_label=function_definition];
40 [label="9_ TransferLog = Log(_log);\n40-expression_statement-10-10", method="ETH_VAULT(address _log)", type_label=expression_statement];
47 [label="11_ function Deposit()\n    public\n    payable\n    {\n        if(msg.value > MinDeposit)\n        {\n            balances[msg.sender]+=msg.value;\n            TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\n        }\n    }\n47-function_definition-12-21", method="Deposit()", type_label=function_definition];
52 [label="15_ if_msg.value > MinDeposit\n52-if-16-20", method="Deposit()", type_label=if];
269 [label="15_ end_if", method="Deposit()", type_label=end_if];
59 [label="17_ balances[msg.sender]+=msg.value;\n59-expression_statement-18-18", method="Deposit()", type_label=expression_statement];
69 [label="18_ TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\n69-expression_statement-19-19", method="Deposit()", type_label=expression_statement];
85 [label="21_ function CashOut(uint _am)\n    public\n    payable\n    {\n        if(_am<=balances[msg.sender])\n        {\n            if(msg.sender.call.value(_am)())\n            {\n                balances[msg.sender]-=_am;\n                TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\n            }\n        }\n    }\n85-function_definition-22-34", method="CashOut(uint _am)", type_label=function_definition];
94 [label="25_ if\n94-if-26-33", method="CashOut(uint _am)", type_label=if];
311 [label="25_ end_if", method="CashOut(uint _am)", type_label=end_if];
103 [label="27_ if\n103-if-28-32", method="CashOut(uint _am)", type_label=if];
320 [label="27_ end_if", method="CashOut(uint _am)", type_label=end_if];
116 [label="29_ balances[msg.sender]-=_am;\n116-expression_statement-30-30", method="CashOut(uint _am)", type_label=expression_statement];
124 [label="30_ TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\n124-expression_statement-31-31", method="CashOut(uint _am)", type_label=expression_statement];
145 [label="38_ struct Message\n    {\n        address Sender;\n        string  Data;\n        uint Val;\n        uint  Time;\n    }\n145-expression_statement-39-45", method="Message()", type_label=expression_statement];
163 [label="45_ Message[] public History;\n163-new_variable-46-46", method="", type_label=new_variable];
170 [label="46_ Message LastMsg;\n170-new_variable-47-47", method="", type_label=new_variable];
175 [label="47_ function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n175-function_definition-48-56", method="AddMessage(address _adr,uint _val,string _data)", type_label=function_definition];
191 [label="50_ LastMsg.Sender = _adr;\n191-expression_statement-51-51", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
197 [label="51_ LastMsg.Time = now;\n197-expression_statement-52-52", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
203 [label="52_ LastMsg.Val = _val;\n203-expression_statement-53-53", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
209 [label="53_ LastMsg.Data = _data;\n209-expression_statement-54-54", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
215 [label="54_ History.push(LastMsg);\n215-expression_statement-55-55", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
138;
13 -> 20  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
20 -> 27  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
32 -> 40  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 52  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
52 -> 59  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
52 -> 269  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
269 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
59 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
69 -> 269  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
85 -> 94  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
94 -> 103  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
94 -> 311  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
103 -> 116  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
103 -> 320  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
320 -> 138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
116 -> 124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
124 -> 320  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
145 -> 163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
163 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
175 -> 191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
191 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
203 -> 209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
209 -> 215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
