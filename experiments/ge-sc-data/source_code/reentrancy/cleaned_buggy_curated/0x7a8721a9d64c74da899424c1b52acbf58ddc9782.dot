digraph  {
13 [label="3_ mapping (address => uint) public balances;\n13-new_variable-4-4", method="", type_label=new_variable];
20 [label="4_ uint public MinDeposit = 1 ether;\n20-new_variable-5-5", method="", type_label=new_variable];
27 [label="5_ address public owner;\n27-new_variable-6-6", method="", type_label=new_variable];
32 [label="6_ Log TransferLog;\n32-new_variable-7-7", method="", type_label=new_variable];
37 [label="7_ modifier onlyOwner() {\n        require(tx.origin == owner);\n        _;\n    }\n37-expression_statement-8-11", method="", type_label=expression_statement];
40 [label="8_ require(tx.origin == owner);\n40-expression_statement-9-9", method="", type_label=expression_statement];
49 [label="9_ _;\n49-expression_statement-10-10", method="", type_label=expression_statement];
51 [label="11_ function PrivateDeposit()\n    {\n        owner = msg.sender;\n        TransferLog = new Log();\n    }\n51-function_definition-12-16", method="PrivateDeposit()", type_label=function_definition];
54 [label="13_ owner = msg.sender;\n54-expression_statement-14-14", method="PrivateDeposit()", type_label=expression_statement];
60 [label="14_ TransferLog = new Log();\n60-expression_statement-15-15", method="PrivateDeposit()", type_label=expression_statement];
68 [label="16_ function setLog(address _lib) onlyOwner\n    {\n        TransferLog = Log(_lib);\n    }\n68-function_definition-17-20", method="setLog(address _lib)", type_label=function_definition];
74 [label="16_ onlyOwner\n74-expression_statement-17-17", method="setLog(address _lib)", type_label=expression_statement];
77 [label="18_ TransferLog = Log(_lib);\n77-expression_statement-19-19", method="setLog(address _lib)", type_label=expression_statement];
84 [label="20_ function Deposit()\n    public\n    payable\n    {\n        if(msg.value >= MinDeposit)\n        {\n            balances[msg.sender]+=msg.value;\n            TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\n        }\n    }\n84-function_definition-21-30", method="Deposit()", type_label=function_definition];
89 [label="24_ if_msg.value >= MinDeposit\n89-if-25-29", method="Deposit()", type_label=if];
341 [label="24_ end_if", method="Deposit()", type_label=end_if];
96 [label="26_ balances[msg.sender]+=msg.value;\n96-expression_statement-27-27", method="Deposit()", type_label=expression_statement];
106 [label="27_ TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\n106-expression_statement-28-28", method="Deposit()", type_label=expression_statement];
122 [label="30_ function CashOut(uint _am)\n    {\n        if(_am<=balances[msg.sender])\n        {            \n            if(msg.sender.call.value(_am)())\n            {\n                balances[msg.sender]-=_am;\n                TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\n            }\n        }\n    }\n122-function_definition-31-41", method="CashOut(uint _am)", type_label=function_definition];
129 [label="32_ if\n129-if-33-40", method="CashOut(uint _am)", type_label=if];
381 [label="32_ end_if", method="CashOut(uint _am)", type_label=end_if];
138 [label="34_ if\n138-if-35-39", method="CashOut(uint _am)", type_label=if];
390 [label="34_ end_if", method="CashOut(uint _am)", type_label=end_if];
151 [label="36_ balances[msg.sender]-=_am;\n151-expression_statement-37-37", method="CashOut(uint _am)", type_label=expression_statement];
159 [label="37_ TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\n159-expression_statement-38-38", method="CashOut(uint _am)", type_label=expression_statement];
180 [label="45_ struct Message\n    {\n        address Sender;\n        string  Data;\n        uint Val;\n        uint  Time;\n    }\n180-expression_statement-46-52", method="Message()", type_label=expression_statement];
198 [label="52_ Message[] public History;\n198-new_variable-53-53", method="", type_label=new_variable];
205 [label="53_ Message LastMsg;\n205-new_variable-54-54", method="", type_label=new_variable];
210 [label="54_ function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n210-function_definition-55-63", method="AddMessage(address _adr,uint _val,string _data)", type_label=function_definition];
226 [label="57_ LastMsg.Sender = _adr;\n226-expression_statement-58-58", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
232 [label="58_ LastMsg.Time = now;\n232-expression_statement-59-59", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
238 [label="59_ LastMsg.Val = _val;\n238-expression_statement-60-60", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
244 [label="60_ LastMsg.Data = _data;\n244-expression_statement-61-61", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
250 [label="61_ History.push(LastMsg);\n250-expression_statement-62-62", method="AddMessage(address _adr,uint _val,string _data)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
173;
13 -> 20  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
20 -> 27  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
27 -> 32  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
32 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
40 -> 49  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 60  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
84 -> 89  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
89 -> 96  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
89 -> 341  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
341 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
96 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 341  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
122 -> 129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 138  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
129 -> 381  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
138 -> 151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
138 -> 390  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
390 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
159 -> 390  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
180 -> 198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
198 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
210 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
226 -> 232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
232 -> 238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
238 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
