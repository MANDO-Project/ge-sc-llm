digraph  {
13 [label="2_ address payable lastPlayer_re_ent9;\n13-new_variable-3-3", method="", type_label=new_variable];
17 [label="3_ uint jackpot_re_ent9;\n17-new_variable-4-4", method="", type_label=new_variable];
21 [label="4_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n21-function_definition-5-11", method="buyTicket_re_ent9()", type_label=function_definition];
25 [label="5_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n25-new_variable-6-6", method="buyTicket_re_ent9()", type_label=new_variable];
43 [label="6_ if\n43-if-7-8", method="buyTicket_re_ent9()", type_label=if];
2066 [label="6_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
48 [label="8_ lastPlayer_re_ent9 = msg.sender;\n48-expression_statement-9-9", method="buyTicket_re_ent9()", type_label=expression_statement];
54 [label="9_ jackpot_re_ent9    = address(this).balance;\n54-expression_statement-10-10", method="buyTicket_re_ent9()", type_label=expression_statement];
62 [label="11_ address payable public owner;\n62-new_variable-12-12", method="", type_label=new_variable];
67 [label="12_ struct GameInfo {\n    uint256 timestamp;\n    uint32 odd_homeTeam;\n    uint32 odd_drawTeam; \n    uint32 odd_awayTeam;\n    uint32 odd_over;\n    uint32 odd_under;\n    uint32 odd_homeTeamAndDraw;\n    uint32 odd_homeAndAwayTeam;\n    uint32 odd_awayTeamAndDraw;\n    uint8  open_status;\n    bool   isDone;\n  }\n67-expression_statement-13-25", method="GameInfo()", type_label=expression_statement];
113 [label="25_ mapping(address => uint) redeemableEther_re_ent25;\n113-new_variable-26-26", method="", type_label=new_variable];
119 [label="26_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n119-function_definition-27-32", method="claimReward_re_ent25()", type_label=function_definition];
123 [label="27_ require(redeemableEther_re_ent25[msg.sender] > 0);\n123-expression_statement-28-28", method="claimReward_re_ent25()", type_label=expression_statement];
134 [label="28_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n134-new_variable-29-29", method="claimReward_re_ent25()", type_label=new_variable];
144 [label="29_ msg.sender.transfer(transferValue_re_ent25);\n144-expression_statement-30-30", method="claimReward_re_ent25()", type_label=expression_statement];
153 [label="30_ redeemableEther_re_ent25[msg.sender] = 0;\n153-expression_statement-31-31", method="claimReward_re_ent25()", type_label=expression_statement];
161 [label="32_ mapping(uint64 => GameInfo) public gameList;\n161-new_variable-33-33", method="", type_label=new_variable];
169 [label="33_ struct BetFixture {\n    address payable player;\n    uint256 stake;\n    uint32  odd;\n    uint16  selectedTeam;\n  }\n169-expression_statement-34-39", method="BetFixture()", type_label=expression_statement];
187 [label="39_ mapping(address => uint) userBalance_re_ent19;\n187-new_variable-40-40", method="", type_label=new_variable];
193 [label="40_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n193-function_definition-41-46", method="withdrawBalance_re_ent19()", type_label=function_definition];
197 [label="41_ if\n197-if-42-44", method="withdrawBalance_re_ent19()", type_label=if];
2220 [label="41_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
215 [label="44_ userBalance_re_ent19[msg.sender] = 0;\n215-expression_statement-45-45", method="withdrawBalance_re_ent19()", type_label=expression_statement];
223 [label="46_ mapping(uint64 => BetFixture[]) public betList;\n223-new_variable-47-47", method="", type_label=new_variable];
232 [label="47_ mapping(address => uint) balances_re_ent36;\n232-new_variable-48-48", method="", type_label=new_variable];
238 [label="48_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n238-function_definition-49-52", method="withdraw_balances_re_ent36()", type_label=function_definition];
242 [label="49_ if\n242-if-50-51", method="withdraw_balances_re_ent36()", type_label=if];
2265 [label="49_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
255 [label="50_ balances_re_ent36[msg.sender] = 0;\n255-expression_statement-51-51", method="withdraw_balances_re_ent36()", type_label=expression_statement];
269 [label="53_ uint256 counter_re_ent35 =0;\n269-new_variable-54-54", method="", type_label=new_variable];
274 [label="54_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n274-function_definition-55-61", method="callme_re_ent35()", type_label=function_definition];
278 [label="55_ require(counter_re_ent35<=5);\n278-expression_statement-56-56", method="callme_re_ent35()", type_label=expression_statement];
285 [label="56_ if\n285-if-57-59", method="callme_re_ent35()", type_label=if];
2308 [label="56_ end_if", method="callme_re_ent35()", type_label=end_if];
300 [label="59_ counter_re_ent35 += 1;\n300-expression_statement-60-60", method="callme_re_ent35()", type_label=expression_statement];
314 [label="62_ mapping(address => uint) userBalance_re_ent40;\n314-new_variable-63-63", method="", type_label=new_variable];
320 [label="63_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n320-function_definition-64-70", method="withdrawBalance_re_ent40()", type_label=function_definition];
324 [label="64_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n324-new_variable-65-65", method="withdrawBalance_re_ent40()", type_label=new_variable];
348 [label="65_ if\n348-if-66-68", method="withdrawBalance_re_ent40()", type_label=if];
2371 [label="65_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
354 [label="68_ userBalance_re_ent40[msg.sender] = 0;\n354-expression_statement-69-69", method="withdrawBalance_re_ent40()", type_label=expression_statement];
372 [label="71_ mapping(address => uint) userBalance_re_ent33;\n372-new_variable-72-72", method="", type_label=new_variable];
378 [label="72_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n378-function_definition-73-79", method="withdrawBalance_re_ent33()", type_label=function_definition];
382 [label="73_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n382-new_variable-74-74", method="withdrawBalance_re_ent33()", type_label=new_variable];
406 [label="74_ if\n406-if-75-77", method="withdrawBalance_re_ent33()", type_label=if];
2429 [label="74_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
412 [label="77_ userBalance_re_ent33[msg.sender] = 0;\n412-expression_statement-78-78", method="withdrawBalance_re_ent33()", type_label=expression_statement];
442 [label="80_ bool not_called_re_ent27 = true;\n442-new_variable-81-81", method="", type_label=new_variable];
448 [label="81_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n448-function_definition-82-88", method="bug_re_ent27()", type_label=function_definition];
452 [label="82_ require(not_called_re_ent27);\n452-expression_statement-83-83", method="bug_re_ent27()", type_label=expression_statement];
457 [label="83_ if\n457-if-84-86", method="bug_re_ent27()", type_label=if];
2480 [label="83_ end_if", method="bug_re_ent27()", type_label=end_if];
472 [label="86_ not_called_re_ent27 = false;\n472-expression_statement-87-87", method="bug_re_ent27()", type_label=expression_statement];
523 [label="89_ mapping(address => uint) balances_re_ent31;\n523-new_variable-90-90", method="", type_label=new_variable];
529 [label="90_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n529-function_definition-91-95", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
537 [label="91_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n537-expression_statement-92-92", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
548 [label="92_ require(msg.sender.send(_weiToWithdraw));\n548-expression_statement-93-93", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
560 [label="93_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n560-expression_statement-94-94", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
606 [label="96_ bool not_called_re_ent13 = true;\n606-new_variable-97-97", method="", type_label=new_variable];
612 [label="97_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n612-function_definition-98-105", method="bug_re_ent13()", type_label=function_definition];
616 [label="98_ require(not_called_re_ent13);\n616-expression_statement-99-99", method="bug_re_ent13()", type_label=expression_statement];
621 [label="99_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n621-new_variable-100-100", method="bug_re_ent13()", type_label=new_variable];
642 [label="100_ if\n642-if-101-103", method="bug_re_ent13()", type_label=if];
2665 [label="100_ end_if", method="bug_re_ent13()", type_label=end_if];
648 [label="103_ not_called_re_ent13 = false;\n648-expression_statement-104-104", method="bug_re_ent13()", type_label=expression_statement];
669 [label="107_ owner   = msg.sender;\n669-expression_statement-108-108", method="", type_label=expression_statement];
675 [label="109_ mapping(address => uint) userBalance_re_ent26;\n675-new_variable-110-110", method="", type_label=new_variable];
681 [label="110_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n681-function_definition-111-117", method="withdrawBalance_re_ent26()", type_label=function_definition];
685 [label="111_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n685-new_variable-112-112", method="withdrawBalance_re_ent26()", type_label=new_variable];
709 [label="112_ if\n709-if-113-115", method="withdrawBalance_re_ent26()", type_label=if];
2732 [label="112_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
715 [label="115_ userBalance_re_ent26[msg.sender] = 0;\n715-expression_statement-116-116", method="withdrawBalance_re_ent26()", type_label=expression_statement];
723 [label="117_ function setOpenStatus(uint64 _fixtureId, uint8 _open_status) external onlyOwner {\n    gameList[_fixtureId].open_status = _open_status;\n  }\n723-function_definition-118-120", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=function_definition];
734 [label="117_ onlyOwner\n734-expression_statement-118-118", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=expression_statement];
737 [label="118_ gameList[_fixtureId].open_status = _open_status;\n737-expression_statement-119-119", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=expression_statement];
745 [label="120_ bool not_called_re_ent20 = true;\n745-new_variable-121-121", method="", type_label=new_variable];
751 [label="121_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n751-function_definition-122-128", method="bug_re_ent20()", type_label=function_definition];
755 [label="122_ require(not_called_re_ent20);\n755-expression_statement-123-123", method="bug_re_ent20()", type_label=expression_statement];
760 [label="123_ if\n760-if-124-126", method="bug_re_ent20()", type_label=if];
2783 [label="123_ end_if", method="bug_re_ent20()", type_label=end_if];
775 [label="126_ not_called_re_ent20 = false;\n775-expression_statement-127-127", method="bug_re_ent20()", type_label=expression_statement];
780 [label="128_ function changeOdd (uint64 _fixtureId, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw ) external onlyOwner {\n    gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n    gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n    gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n    gameList[_fixtureId].odd_over            = _odd_over;\n    gameList[_fixtureId].odd_under           = _odd_under;\n    gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n    gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n    gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n    emit ChangeOdd (_fixtureId, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw);\n  }\n780-function_definition-129-139", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=function_definition];
819 [label="128_ onlyOwner\n819-expression_statement-129-129", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
822 [label="129_ gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n822-expression_statement-130-130", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
830 [label="130_ gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n830-expression_statement-131-131", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
838 [label="131_ gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n838-expression_statement-132-132", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
846 [label="132_ gameList[_fixtureId].odd_over            = _odd_over;\n846-expression_statement-133-133", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
854 [label="133_ gameList[_fixtureId].odd_under           = _odd_under;\n854-expression_statement-134-134", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
862 [label="134_ gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n862-expression_statement-135-135", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
870 [label="135_ gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n870-expression_statement-136-136", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
878 [label="136_ gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n878-expression_statement-137-137", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
906 [label="139_ mapping(address => uint) redeemableEther_re_ent32;\n906-new_variable-140-140", method="", type_label=new_variable];
912 [label="140_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n912-function_definition-141-146", method="claimReward_re_ent32()", type_label=function_definition];
916 [label="141_ require(redeemableEther_re_ent32[msg.sender] > 0);\n916-expression_statement-142-142", method="claimReward_re_ent32()", type_label=expression_statement];
927 [label="142_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n927-new_variable-143-143", method="claimReward_re_ent32()", type_label=new_variable];
937 [label="143_ msg.sender.transfer(transferValue_re_ent32);\n937-expression_statement-144-144", method="claimReward_re_ent32()", type_label=expression_statement];
946 [label="144_ redeemableEther_re_ent32[msg.sender] = 0;\n946-expression_statement-145-145", method="claimReward_re_ent32()", type_label=expression_statement];
954 [label="146_ function setGameInfo (uint64 _fixtureId, uint256 _timestamp, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw, uint8 _open_status ) external onlyOwner {\n    gameList[_fixtureId].timestamp           = _timestamp;\n    gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n    gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n    gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n    gameList[_fixtureId].odd_over            = _odd_over;\n    gameList[_fixtureId].odd_under           = _odd_under;\n    gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n    gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n    gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n    gameList[_fixtureId].open_status         = _open_status;\n    gameList[_fixtureId].isDone              = false;\n    emit SetGame(_fixtureId, _timestamp, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw, _open_status);\n  }\n954-function_definition-147-160", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=function_definition];
1001 [label="146_ onlyOwner\n1001-expression_statement-147-147", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1004 [label="147_ gameList[_fixtureId].timestamp           = _timestamp;\n1004-expression_statement-148-148", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1012 [label="148_ gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n1012-expression_statement-149-149", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1020 [label="149_ gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n1020-expression_statement-150-150", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1028 [label="150_ gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n1028-expression_statement-151-151", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1036 [label="151_ gameList[_fixtureId].odd_over            = _odd_over;\n1036-expression_statement-152-152", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1044 [label="152_ gameList[_fixtureId].odd_under           = _odd_under;\n1044-expression_statement-153-153", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1052 [label="153_ gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n1052-expression_statement-154-154", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1060 [label="154_ gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n1060-expression_statement-155-155", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1068 [label="155_ gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n1068-expression_statement-156-156", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1076 [label="156_ gameList[_fixtureId].open_status         = _open_status;\n1076-expression_statement-157-157", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1084 [label="157_ gameList[_fixtureId].isDone              = false;\n1084-expression_statement-158-158", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1117 [label="160_ mapping(address => uint) balances_re_ent38;\n1117-new_variable-161-161", method="", type_label=new_variable];
1123 [label="161_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n1123-function_definition-162-166", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
1131 [label="162_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n1131-expression_statement-163-163", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1142 [label="163_ require(msg.sender.send(_weiToWithdraw));\n1142-expression_statement-164-164", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1154 [label="164_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n1154-expression_statement-165-165", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1162 [label="166_ function placeBet(uint64 _fixtureId, uint16 _selectedTeam, uint32 _odd) external payable  {\n    uint stake = msg.value;\n    require(stake >= .001 ether);\n    require(_odd != 0 );\n    if (_selectedTeam == 1 ) {\n      require(gameList[_fixtureId].odd_homeTeam == _odd);\n    } else if ( _selectedTeam == 2) {\n      require(gameList[_fixtureId].odd_drawTeam == _odd);\n    } else if ( _selectedTeam == 3) {\n      require(gameList[_fixtureId].odd_awayTeam == _odd);\n    } else if ( _selectedTeam == 4) {\n      require(gameList[_fixtureId].odd_over == _odd);\n    } else if ( _selectedTeam == 5) {\n      require(gameList[_fixtureId].odd_under == _odd);\n    } else if ( _selectedTeam == 6) {\n      require(gameList[_fixtureId].odd_homeTeamAndDraw == _odd);\n    } else if ( _selectedTeam == 7) {\n      require(gameList[_fixtureId].odd_homeAndAwayTeam == _odd);\n    } else if ( _selectedTeam == 8) {\n      require(gameList[_fixtureId].odd_awayTeamAndDraw == _odd);\n    } else {\n      revert();\n    }\n    require(gameList[_fixtureId].open_status == 3);\n    require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) );\n    betList[_fixtureId].push(BetFixture( msg.sender, stake,  _odd, _selectedTeam));\n    emit NewStake(msg.sender, _fixtureId, _selectedTeam, stake, _odd );\n  }\n1162-function_definition-167-194", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=function_definition];
1179 [label="167_ uint stake = msg.value;\n1179-new_variable-168-168", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=new_variable];
1187 [label="168_ require(stake >= .001 ether);\n1187-expression_statement-169-169", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1195 [label="169_ require(_odd != 0 );\n1195-expression_statement-170-170", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1202 [label="170_ if__selectedTeam == 1\n1202-if-171-189", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
3225 [label="170_ end_if", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=end_if];
1207 [label="171_ require(gameList[_fixtureId].odd_homeTeam == _odd);\n1207-expression_statement-172-172", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1218 [label="172_ if__selectedTeam == 2\n1218-if-173-189", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1223 [label="173_ require(gameList[_fixtureId].odd_drawTeam == _odd);\n1223-expression_statement-174-174", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1234 [label="174_ if__selectedTeam == 3\n1234-if-175-189", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1239 [label="175_ require(gameList[_fixtureId].odd_awayTeam == _odd);\n1239-expression_statement-176-176", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1250 [label="176_ if__selectedTeam == 4\n1250-if-177-189", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1255 [label="177_ require(gameList[_fixtureId].odd_over == _odd);\n1255-expression_statement-178-178", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1266 [label="178_ if__selectedTeam == 5\n1266-if-179-189", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1271 [label="179_ require(gameList[_fixtureId].odd_under == _odd);\n1271-expression_statement-180-180", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1282 [label="180_ if__selectedTeam == 6\n1282-if-181-189", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1287 [label="181_ require(gameList[_fixtureId].odd_homeTeamAndDraw == _odd);\n1287-expression_statement-182-182", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1298 [label="182_ if__selectedTeam == 7\n1298-if-183-189", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1303 [label="183_ require(gameList[_fixtureId].odd_homeAndAwayTeam == _odd);\n1303-expression_statement-184-184", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1314 [label="184_ if__selectedTeam == 8\n1314-if-185-189", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1319 [label="185_ require(gameList[_fixtureId].odd_awayTeamAndDraw == _odd);\n1319-expression_statement-186-186", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1333 [label="189_ require(gameList[_fixtureId].open_status == 3);\n1333-expression_statement-190-190", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1344 [label="190_ require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) );\n1344-expression_statement-191-191", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1359 [label="191_ betList[_fixtureId].push(BetFixture( msg.sender, stake,  _odd, _selectedTeam));\n1359-expression_statement-192-192", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1393 [label="194_ mapping(address => uint) redeemableEther_re_ent4;\n1393-new_variable-195-195", method="", type_label=new_variable];
1399 [label="195_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n1399-function_definition-196-201", method="claimReward_re_ent4()", type_label=function_definition];
1403 [label="196_ require(redeemableEther_re_ent4[msg.sender] > 0);\n1403-expression_statement-197-197", method="claimReward_re_ent4()", type_label=expression_statement];
1414 [label="197_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n1414-new_variable-198-198", method="claimReward_re_ent4()", type_label=new_variable];
1424 [label="198_ msg.sender.transfer(transferValue_re_ent4);\n1424-expression_statement-199-199", method="claimReward_re_ent4()", type_label=expression_statement];
1433 [label="199_ redeemableEther_re_ent4[msg.sender] = 0;\n1433-expression_statement-200-200", method="claimReward_re_ent4()", type_label=expression_statement];
1441 [label="201_ function givePrizeMoney(uint64 _fixtureId, uint8 _homeDrawAway, uint8 _overUnder) external onlyOwner payable {\n    require(gameList[_fixtureId].open_status == 3);\n    require(gameList[_fixtureId].isDone == false);\n    require(betList[_fixtureId][0].player != address(0) );\n    for (uint i= 0 ; i < betList[_fixtureId].length; i++){\n      uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;\n      uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;\n      if ( (selectedTeam == 1 && _homeDrawAway == 1) \n        || (selectedTeam == 2 && _homeDrawAway == 2) \n        || (selectedTeam == 3 && _homeDrawAway == 3) \n        || (selectedTeam == 4 && _overUnder == 1) \n        || (selectedTeam == 5 && _overUnder == 2) \n        || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )\n        || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )\n        || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) ) \n        ){ \n        betList[_fixtureId][i].player.transfer(returnEth);\n      }\n    }\n    gameList[_fixtureId].open_status = 5;\n    gameList[_fixtureId].isDone = true;  \n    emit GivePrizeMoney( _fixtureId,  _homeDrawAway,  _overUnder);\n  }\n1441-function_definition-202-224", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=function_definition];
1456 [label="201_ onlyOwner\n1456-expression_statement-202-202", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1460 [label="202_ require(gameList[_fixtureId].open_status == 3);\n1460-expression_statement-203-203", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1471 [label="203_ require(gameList[_fixtureId].isDone == false);\n1471-expression_statement-204-204", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1483 [label="204_ require(betList[_fixtureId][0].player != address(0) );\n1483-expression_statement-205-205", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1498 [label="205_ for(i < betList[_fixtureId].length;;i++)\n1498-for-206-220", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=for];
3521 [label="205_ end_loop", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=end_loop];
1513 [label="205_ i++\n1513-expression_statement-206-206", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1516 [label="206_ uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;\n1516-new_variable-207-207", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=new_variable];
1528 [label="207_ uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;\n1528-new_variable-208-208", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=new_variable];
1551 [label="208_ if_(selectedTeam == 1 && _homeDrawAway == 1) \n        || (selectedTeam == 2 && _homeDrawAway == 2) \n        || (selectedTeam == 3 && _homeDrawAway == 3) \n        || (selectedTeam == 4 && _overUnder == 1) \n        || (selectedTeam == 5 && _overUnder == 2) \n        || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )\n        || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )\n        || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) )\n1551-if-209-219", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=if];
3574 [label="208_ end_if", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=end_if];
1639 [label="217_ betList[_fixtureId][i].player.transfer(returnEth);\n1639-expression_statement-218-218", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1652 [label="220_ gameList[_fixtureId].open_status = 5;\n1652-expression_statement-221-221", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1660 [label="221_ gameList[_fixtureId].isDone = true;\n1660-expression_statement-222-222", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1677 [label="224_ uint256 counter_re_ent7 =0;\n1677-new_variable-225-225", method="", type_label=new_variable];
1682 [label="225_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n1682-function_definition-226-232", method="callme_re_ent7()", type_label=function_definition];
1686 [label="226_ require(counter_re_ent7<=5);\n1686-expression_statement-227-227", method="callme_re_ent7()", type_label=expression_statement];
1693 [label="227_ if\n1693-if-228-230", method="callme_re_ent7()", type_label=if];
3716 [label="227_ end_if", method="callme_re_ent7()", type_label=end_if];
1708 [label="230_ counter_re_ent7 += 1;\n1708-expression_statement-231-231", method="callme_re_ent7()", type_label=expression_statement];
1712 [label="232_ modifier onlyOwner {\n    require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n    _;\n  }\n1712-expression_statement-233-236", method="", type_label=expression_statement];
1715 [label="233_ require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n1715-expression_statement-234-234", method="", type_label=expression_statement];
1727 [label="234_ _;\n1727-expression_statement-235-235", method="", type_label=expression_statement];
1729 [label="236_ function getBalance() external view returns(uint){\n    return address(this).balance;\n  }\n1729-function_definition-237-239", method="getBalance()", type_label=function_definition];
1738 [label="237_ return address(this).balance;\n1738-return-238-238", method="getBalance()", type_label=return];
1744 [label="239_ address payable lastPlayer_re_ent23;\n1744-new_variable-240-240", method="", type_label=new_variable];
1748 [label="240_ uint jackpot_re_ent23;\n1748-new_variable-241-241", method="", type_label=new_variable];
1752 [label="241_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n1752-function_definition-242-247", method="buyTicket_re_ent23()", type_label=function_definition];
1756 [label="242_ if\n1756-if-243-244", method="buyTicket_re_ent23()", type_label=if];
3779 [label="242_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
1767 [label="244_ lastPlayer_re_ent23 = msg.sender;\n1767-expression_statement-245-245", method="buyTicket_re_ent23()", type_label=expression_statement];
1773 [label="245_ jackpot_re_ent23    = address(this).balance;\n1773-expression_statement-246-246", method="buyTicket_re_ent23()", type_label=expression_statement];
1781 [label="247_ function deposit(uint256 _eth) external payable{\n    emit Deposit(msg.sender, _eth);\n  }\n1781-function_definition-248-250", method="deposit(uint256 _eth)", type_label=function_definition];
1798 [label="250_ uint256 counter_re_ent14 =0;\n1798-new_variable-251-251", method="", type_label=new_variable];
1803 [label="251_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n1803-function_definition-252-258", method="callme_re_ent14()", type_label=function_definition];
1807 [label="252_ require(counter_re_ent14<=5);\n1807-expression_statement-253-253", method="callme_re_ent14()", type_label=expression_statement];
1814 [label="253_ if\n1814-if-254-256", method="callme_re_ent14()", type_label=if];
3837 [label="253_ end_if", method="callme_re_ent14()", type_label=end_if];
1829 [label="256_ counter_re_ent14 += 1;\n1829-expression_statement-257-257", method="callme_re_ent14()", type_label=expression_statement];
1833 [label="258_ function changeOwner(address payable _newOwner ) external onlyOwner {\n    owner = _newOwner;\n  }\n1833-function_definition-259-261", method="changeOwner(address payable _newOwner)", type_label=function_definition];
1840 [label="258_ onlyOwner\n1840-expression_statement-259-259", method="changeOwner(address payable _newOwner)", type_label=expression_statement];
1843 [label="259_ owner = _newOwner;\n1843-expression_statement-260-260", method="changeOwner(address payable _newOwner)", type_label=expression_statement];
1847 [label="261_ address payable lastPlayer_re_ent30;\n1847-new_variable-262-262", method="", type_label=new_variable];
1851 [label="262_ uint jackpot_re_ent30;\n1851-new_variable-263-263", method="", type_label=new_variable];
1855 [label="263_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n1855-function_definition-264-269", method="buyTicket_re_ent30()", type_label=function_definition];
1859 [label="264_ if\n1859-if-265-266", method="buyTicket_re_ent30()", type_label=if];
3882 [label="264_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
1870 [label="266_ lastPlayer_re_ent30 = msg.sender;\n1870-expression_statement-267-267", method="buyTicket_re_ent30()", type_label=expression_statement];
1876 [label="267_ jackpot_re_ent30    = address(this).balance;\n1876-expression_statement-268-268", method="buyTicket_re_ent30()", type_label=expression_statement];
1888 [label="270_ owner.transfer(msg.value);\n1888-expression_statement-271-271", method="", type_label=expression_statement];
1897 [label="272_ mapping(address => uint) balances_re_ent8;\n1897-new_variable-273-273", method="", type_label=new_variable];
1903 [label="273_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n1903-function_definition-274-278", method="withdraw_balances_re_ent8()", type_label=function_definition];
1907 [label="274_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n1907-new_variable-275-275", method="withdraw_balances_re_ent8()", type_label=new_variable];
1931 [label="275_ if\n1931-if-276-277", method="withdraw_balances_re_ent8()", type_label=if];
3954 [label="275_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
1933 [label="276_ balances_re_ent8[msg.sender] = 0;\n1933-expression_statement-277-277", method="withdraw_balances_re_ent8()", type_label=expression_statement];
1941 [label="278_ function withdraw(uint256 _amount) external payable onlyOwner {\n    require(_amount > 0 && _amount <= address(this).balance );\n    owner.transfer(_amount);\n    emit Withdraw(owner, _amount);\n  }\n1941-function_definition-279-283", method="withdraw(uint256 _amount)", type_label=function_definition];
1949 [label="278_ onlyOwner\n1949-expression_statement-279-279", method="withdraw(uint256 _amount)", type_label=expression_statement];
1952 [label="279_ require(_amount > 0 && _amount <= address(this).balance );\n1952-expression_statement-280-280", method="withdraw(uint256 _amount)", type_label=expression_statement];
1967 [label="280_ owner.transfer(_amount);\n1967-expression_statement-281-281", method="withdraw(uint256 _amount)", type_label=expression_statement];
1980 [label="283_ mapping(address => uint) redeemableEther_re_ent39;\n1980-new_variable-284-284", method="", type_label=new_variable];
1986 [label="284_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n1986-function_definition-285-290", method="claimReward_re_ent39()", type_label=function_definition];
1990 [label="285_ require(redeemableEther_re_ent39[msg.sender] > 0);\n1990-expression_statement-286-286", method="claimReward_re_ent39()", type_label=expression_statement];
2001 [label="286_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n2001-new_variable-287-287", method="claimReward_re_ent39()", type_label=new_variable];
2011 [label="287_ msg.sender.transfer(transferValue_re_ent39);\n2011-expression_statement-288-288", method="claimReward_re_ent39()", type_label=expression_statement];
2020 [label="288_ redeemableEther_re_ent39[msg.sender] = 0;\n2020-expression_statement-289-289", method="claimReward_re_ent39()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
263;
1331;
13 -> 17  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
21 -> 25  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
25 -> 43  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
43 -> 2066  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
48 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
123 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
144 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
169 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2220  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
223 -> 232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
238 -> 242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 255  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
242 -> 2265  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2265 -> 263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 2265  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
274 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
285 -> 2308  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
320 -> 324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
324 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
348 -> 2371  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
378 -> 382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
382 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 2429  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
448 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
452 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 2480  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
529 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
548 -> 560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
612 -> 616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
616 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
642 -> 2665  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
681 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
709 -> 2732  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
723 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
751 -> 755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
755 -> 760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
760 -> 2783  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
780 -> 822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
822 -> 830  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
830 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
846 -> 854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
862 -> 870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
870 -> 878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
912 -> 916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
916 -> 927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
927 -> 937  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
937 -> 946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
954 -> 1004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 1012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1012 -> 1020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1020 -> 1028  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1028 -> 1036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1036 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1044 -> 1052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1052 -> 1060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1060 -> 1068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1123 -> 1131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1131 -> 1142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1142 -> 1154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1162 -> 1179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1179 -> 1187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1187 -> 1195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1195 -> 1202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1202 -> 1207  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1202 -> 1218  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3225 -> 1333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1207 -> 3225  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1218 -> 1223  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1218 -> 1234  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1223 -> 3225  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1234 -> 1239  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1234 -> 1250  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1239 -> 3225  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1250 -> 1255  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1250 -> 1266  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1255 -> 3225  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1266 -> 1271  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1266 -> 1282  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1271 -> 3225  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1282 -> 1287  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1282 -> 1298  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1287 -> 3225  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1298 -> 1303  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1298 -> 1314  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1303 -> 3225  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1314 -> 1319  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1319 -> 3225  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1333 -> 1344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1344 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1399 -> 1403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1403 -> 1414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1414 -> 1424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1424 -> 1433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1441 -> 1460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1460 -> 1471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1471 -> 1483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1483 -> 1498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1498 -> 1516  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1498 -> 3521  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3521 -> 1652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1513 -> 1498  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1516 -> 1528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1528 -> 1551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1551 -> 1639  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1551 -> 3574  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3574 -> 1513  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3574 -> 1513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
1639 -> 3574  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1652 -> 1660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1682 -> 1686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1686 -> 1693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1693 -> 3716  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1715 -> 1727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1729 -> 1738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1738 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1744 -> 1748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1752 -> 1756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1756 -> 3779  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1767 -> 1773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1803 -> 1807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1807 -> 1814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1814 -> 3837  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1833 -> 1843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1847 -> 1851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1855 -> 1859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1859 -> 3882  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1870 -> 1876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1903 -> 1907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1907 -> 1931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1931 -> 1933  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1931 -> 3954  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3954 -> 1941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1933 -> 3954  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1941 -> 1952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1952 -> 1967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1986 -> 1990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1990 -> 2001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2001 -> 2011  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2011 -> 2020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 3225  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
