digraph  {
13 [label="2_ function transfer(address to, uint256 value) public returns (bool success);\n13-function_definition-3-3", method="transfer(address to,uint256 value)", type_label=function_definition];
29 [label="3_ bool not_called_re_ent20 = true;\n29-new_variable-4-4", method="", type_label=new_variable];
35 [label="4_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n35-function_definition-5-11", method="bug_re_ent20()", type_label=function_definition];
39 [label="5_ require(not_called_re_ent20);\n39-expression_statement-6-6", method="bug_re_ent20()", type_label=expression_statement];
44 [label="6_ if\n44-if-7-9", method="bug_re_ent20()", type_label=if];
3606 [label="6_ end_if", method="bug_re_ent20()", type_label=end_if];
59 [label="9_ not_called_re_ent20 = false;\n59-expression_statement-10-10", method="bug_re_ent20()", type_label=expression_statement];
64 [label="11_ function transferFrom(address from, address to, uint256 value) public returns (bool success);\n64-function_definition-12-12", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
84 [label="12_ mapping(address => uint) redeemableEther_re_ent32;\n84-new_variable-13-13", method="", type_label=new_variable];
90 [label="13_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n90-function_definition-14-19", method="claimReward_re_ent32()", type_label=function_definition];
94 [label="14_ require(redeemableEther_re_ent32[msg.sender] > 0);\n94-expression_statement-15-15", method="claimReward_re_ent32()", type_label=expression_statement];
105 [label="15_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n105-new_variable-16-16", method="claimReward_re_ent32()", type_label=new_variable];
115 [label="16_ msg.sender.transfer(transferValue_re_ent32);\n115-expression_statement-17-17", method="claimReward_re_ent32()", type_label=expression_statement];
124 [label="17_ redeemableEther_re_ent32[msg.sender] = 0;\n124-expression_statement-18-18", method="claimReward_re_ent32()", type_label=expression_statement];
132 [label="19_ function balanceOf(address account) external view returns(uint256);\n132-function_definition-20-20", method="balanceOf(address account)", type_label=function_definition];
144 [label="20_ mapping(address => uint) balances_re_ent38;\n144-new_variable-21-21", method="", type_label=new_variable];
150 [label="21_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n150-function_definition-22-26", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
158 [label="22_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n158-expression_statement-23-23", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
169 [label="23_ require(msg.sender.send(_weiToWithdraw));\n169-expression_statement-24-24", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
181 [label="24_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n181-expression_statement-25-25", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
189 [label="26_ function allowance(address _owner, address _spender)external view returns(uint256);\n189-function_definition-27-27", method="allowance(address _owner,address _spender)", type_label=function_definition];
205 [label="27_ mapping(address => uint) redeemableEther_re_ent4;\n205-new_variable-28-28", method="", type_label=new_variable];
211 [label="28_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n211-function_definition-29-34", method="claimReward_re_ent4()", type_label=function_definition];
215 [label="29_ require(redeemableEther_re_ent4[msg.sender] > 0);\n215-expression_statement-30-30", method="claimReward_re_ent4()", type_label=expression_statement];
226 [label="30_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n226-new_variable-31-31", method="claimReward_re_ent4()", type_label=new_variable];
236 [label="31_ msg.sender.transfer(transferValue_re_ent4);\n236-expression_statement-32-32", method="claimReward_re_ent4()", type_label=expression_statement];
245 [label="32_ redeemableEther_re_ent4[msg.sender] = 0;\n245-expression_statement-33-33", method="claimReward_re_ent4()", type_label=expression_statement];
256 [label="36_ function mul(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        if (a == 0) {\n        return 0;}\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n256-function_definition-37-44", method="mul(uint256 a,uint256 b)", type_label=function_definition];
273 [label="38_ if_a == 0\n273-if-39-40", method="mul(uint256 a,uint256 b)", type_label=if];
3835 [label="38_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
278 [label="39_ return 0;\n278-return-40-40", method="mul(uint256 a,uint256 b)", type_label=return];
280 [label="40_ uint256 c = a * b;\n280-new_variable-41-41", method="mul(uint256 a,uint256 b)", type_label=new_variable];
288 [label="41_ assert(c / a == b);\n288-expression_statement-42-42", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
297 [label="42_ return c;\n297-return-43-43", method="mul(uint256 a,uint256 b)", type_label=return];
299 [label="44_ function div(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        uint256 c = a / b;\n        return c;\n    }\n299-function_definition-45-49", method="div(uint256 a,uint256 b)", type_label=function_definition];
316 [label="46_ uint256 c = a / b;\n316-new_variable-47-47", method="div(uint256 a,uint256 b)", type_label=new_variable];
324 [label="47_ return c;\n324-return-48-48", method="div(uint256 a,uint256 b)", type_label=return];
326 [label="49_ function sub(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        assert(b <= a);\n        return a - b;\n    }\n326-function_definition-50-54", method="sub(uint256 a,uint256 b)", type_label=function_definition];
343 [label="51_ assert(b <= a);\n343-expression_statement-52-52", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
350 [label="52_ return a - b;\n350-return-53-53", method="sub(uint256 a,uint256 b)", type_label=return];
354 [label="54_ function add(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n354-function_definition-55-60", method="add(uint256 a,uint256 b)", type_label=function_definition];
371 [label="56_ uint256 c = a + b;\n371-new_variable-57-57", method="add(uint256 a,uint256 b)", type_label=new_variable];
379 [label="57_ assert(c >= a);\n379-expression_statement-58-58", method="add(uint256 a,uint256 b)", type_label=expression_statement];
386 [label="58_ return c;\n386-return-59-59", method="add(uint256 a,uint256 b)", type_label=return];
396 [label="63_ bool not_called_re_ent13 = true;\n396-new_variable-64-64", method="", type_label=new_variable];
402 [label="64_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n402-function_definition-65-72", method="bug_re_ent13()", type_label=function_definition];
406 [label="65_ require(not_called_re_ent13);\n406-expression_statement-66-66", method="bug_re_ent13()", type_label=expression_statement];
411 [label="66_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n411-new_variable-67-67", method="bug_re_ent13()", type_label=new_variable];
432 [label="67_ if\n432-if-68-70", method="bug_re_ent13()", type_label=if];
3994 [label="67_ end_if", method="bug_re_ent13()", type_label=end_if];
438 [label="70_ not_called_re_ent13 = false;\n438-expression_statement-71-71", method="bug_re_ent13()", type_label=expression_statement];
461 [label="73_ bool not_called_re_ent41 = true;\n461-new_variable-74-74", method="", type_label=new_variable];
467 [label="74_ function bug_re_ent41() public{\n        require(not_called_re_ent41);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent41 = false;\n    }\n467-function_definition-75-81", method="bug_re_ent41()", type_label=function_definition];
471 [label="75_ require(not_called_re_ent41);\n471-expression_statement-76-76", method="bug_re_ent41()", type_label=expression_statement];
476 [label="76_ if\n476-if-77-79", method="bug_re_ent41()", type_label=if];
4038 [label="76_ end_if", method="bug_re_ent41()", type_label=end_if];
491 [label="79_ not_called_re_ent41 = false;\n491-expression_statement-80-80", method="bug_re_ent41()", type_label=expression_statement];
496 [label="81_ address payable admin;\n496-new_variable-82-82", method="", type_label=new_variable];
500 [label="82_ uint256 counter_re_ent42 =0;\n500-new_variable-83-83", method="", type_label=new_variable];
505 [label="83_ function callme_re_ent42() public{\n        require(counter_re_ent42<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent42 += 1;\n    }\n505-function_definition-84-90", method="callme_re_ent42()", type_label=function_definition];
509 [label="84_ require(counter_re_ent42<=5);\n509-expression_statement-85-85", method="callme_re_ent42()", type_label=expression_statement];
516 [label="85_ if\n516-if-86-88", method="callme_re_ent42()", type_label=if];
4078 [label="85_ end_if", method="callme_re_ent42()", type_label=end_if];
531 [label="88_ counter_re_ent42 += 1;\n531-expression_statement-89-89", method="callme_re_ent42()", type_label=expression_statement];
535 [label="90_ address public feeAddress;\n535-new_variable-91-91", method="", type_label=new_variable];
540 [label="91_ address payable lastPlayer_re_ent2;\n540-new_variable-92-92", method="", type_label=new_variable];
544 [label="92_ uint jackpot_re_ent2;\n544-new_variable-93-93", method="", type_label=new_variable];
548 [label="93_ function buyTicket_re_ent2() public{\n	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))\n        revert();\n      lastPlayer_re_ent2 = msg.sender;\n      jackpot_re_ent2    = address(this).balance;\n    }\n548-function_definition-94-99", method="buyTicket_re_ent2()", type_label=function_definition];
552 [label="94_ if\n552-if-95-96", method="buyTicket_re_ent2()", type_label=if];
4114 [label="94_ end_if", method="buyTicket_re_ent2()", type_label=end_if];
563 [label="96_ lastPlayer_re_ent2 = msg.sender;\n563-expression_statement-97-97", method="buyTicket_re_ent2()", type_label=expression_statement];
569 [label="97_ jackpot_re_ent2    = address(this).balance;\n569-expression_statement-98-98", method="buyTicket_re_ent2()", type_label=expression_statement];
577 [label="99_ bool private dexStatus;\n577-new_variable-100-100", method="", type_label=new_variable];
582 [label="100_ mapping(address => uint) balances_re_ent17;\n582-new_variable-101-101", method="", type_label=new_variable];
588 [label="101_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n588-function_definition-102-107", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
596 [label="102_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n596-expression_statement-103-103", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
607 [label="103_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n607-new_variable-104-104", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
627 [label="104_ require(success);\n627-expression_statement-105-105", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
632 [label="105_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n632-expression_statement-106-106", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
640 [label="107_ uint256 public tokenId=0;\n640-new_variable-108-108", method="", type_label=new_variable];
646 [label="108_ struct orders{\n        address userAddress;\n        address tokenAddress;\n        uint256 type_;\n        uint256 price;\n        uint256 total;\n        uint256 _decimal;\n        uint256 tradeTotal;\n        uint256 amount;\n        uint256 tradeAmount;\n        uint256 pairOrderID;\n        uint256 status; \n    }\n646-expression_statement-109-121", method="orders()", type_label=expression_statement];
692 [label="121_ struct tokens{\n        address tokenAddress;\n        string tokenSymbol;\n        uint256 decimals;\n        bool status;\n    }\n692-expression_statement-122-127", method="tokens()", type_label=expression_statement];
720 [label="128_ admin = _admin;\n720-expression_statement-129-129", method="", type_label=expression_statement];
724 [label="129_ feeAddress = feeAddress_;\n724-expression_statement-130-130", method="", type_label=expression_statement];
728 [label="130_ dexStatus = true;\n728-expression_statement-131-131", method="", type_label=expression_statement];
733 [label="132_ uint256 counter_re_ent7 =0;\n733-new_variable-133-133", method="", type_label=new_variable];
738 [label="133_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n738-function_definition-134-140", method="callme_re_ent7()", type_label=function_definition];
742 [label="134_ require(counter_re_ent7<=5);\n742-expression_statement-135-135", method="callme_re_ent7()", type_label=expression_statement];
749 [label="135_ if\n749-if-136-138", method="callme_re_ent7()", type_label=if];
4311 [label="135_ end_if", method="callme_re_ent7()", type_label=end_if];
764 [label="138_ counter_re_ent7 += 1;\n764-expression_statement-139-139", method="callme_re_ent7()", type_label=expression_statement];
768 [label="140_ address payable lastPlayer_re_ent37;\n768-new_variable-141-141", method="", type_label=new_variable];
772 [label="141_ uint jackpot_re_ent37;\n772-new_variable-142-142", method="", type_label=new_variable];
776 [label="142_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n776-function_definition-143-148", method="buyTicket_re_ent37()", type_label=function_definition];
780 [label="143_ if\n780-if-144-145", method="buyTicket_re_ent37()", type_label=if];
4342 [label="143_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
791 [label="145_ lastPlayer_re_ent37 = msg.sender;\n791-expression_statement-146-146", method="buyTicket_re_ent37()", type_label=expression_statement];
797 [label="146_ jackpot_re_ent37    = address(this).balance;\n797-expression_statement-147-147", method="buyTicket_re_ent37()", type_label=expression_statement];
805 [label="148_ mapping(uint256=>orders) public Order;\n805-new_variable-149-149", method="", type_label=new_variable];
813 [label="149_ mapping(address => uint) balances_re_ent3;\n813-new_variable-150-150", method="", type_label=new_variable];
819 [label="150_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n819-function_definition-151-156", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
827 [label="151_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n827-expression_statement-152-152", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
838 [label="152_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n838-new_variable-153-153", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
858 [label="153_ require(success);\n858-expression_statement-154-154", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
863 [label="154_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n863-expression_statement-155-155", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
871 [label="156_ mapping(address=>mapping(address=>uint256))public userDetails;\n871-new_variable-157-157", method="", type_label=new_variable];
880 [label="157_ address payable lastPlayer_re_ent9;\n880-new_variable-158-158", method="", type_label=new_variable];
884 [label="158_ uint jackpot_re_ent9;\n884-new_variable-159-159", method="", type_label=new_variable];
888 [label="159_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n888-function_definition-160-166", method="buyTicket_re_ent9()", type_label=function_definition];
892 [label="160_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n892-new_variable-161-161", method="buyTicket_re_ent9()", type_label=new_variable];
910 [label="161_ if\n910-if-162-163", method="buyTicket_re_ent9()", type_label=if];
4472 [label="161_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
915 [label="163_ lastPlayer_re_ent9 = msg.sender;\n915-expression_statement-164-164", method="buyTicket_re_ent9()", type_label=expression_statement];
921 [label="164_ jackpot_re_ent9    = address(this).balance;\n921-expression_statement-165-165", method="buyTicket_re_ent9()", type_label=expression_statement];
929 [label="166_ mapping(address=>mapping(address=>uint256))public feeAmount;\n929-new_variable-167-167", method="", type_label=new_variable];
938 [label="167_ mapping(address => uint) redeemableEther_re_ent25;\n938-new_variable-168-168", method="", type_label=new_variable];
944 [label="168_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n944-function_definition-169-174", method="claimReward_re_ent25()", type_label=function_definition];
948 [label="169_ require(redeemableEther_re_ent25[msg.sender] > 0);\n948-expression_statement-170-170", method="claimReward_re_ent25()", type_label=expression_statement];
959 [label="170_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n959-new_variable-171-171", method="claimReward_re_ent25()", type_label=new_variable];
969 [label="171_ msg.sender.transfer(transferValue_re_ent25);\n969-expression_statement-172-172", method="claimReward_re_ent25()", type_label=expression_statement];
978 [label="172_ redeemableEther_re_ent25[msg.sender] = 0;\n978-expression_statement-173-173", method="claimReward_re_ent25()", type_label=expression_statement];
986 [label="174_ mapping(address=>uint256) public withdrawfee;\n986-new_variable-175-175", method="", type_label=new_variable];
993 [label="175_ mapping(address => uint) userBalance_re_ent19;\n993-new_variable-176-176", method="", type_label=new_variable];
999 [label="176_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n999-function_definition-177-182", method="withdrawBalance_re_ent19()", type_label=function_definition];
1003 [label="177_ if\n1003-if-178-180", method="withdrawBalance_re_ent19()", type_label=if];
4565 [label="177_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
1021 [label="180_ userBalance_re_ent19[msg.sender] = 0;\n1021-expression_statement-181-181", method="withdrawBalance_re_ent19()", type_label=expression_statement];
1029 [label="182_ mapping(uint256=>mapping(uint256=>bool)) public orderPairStatus;\n1029-new_variable-183-183", method="", type_label=new_variable];
1038 [label="183_ mapping(address => uint) userBalance_re_ent26;\n1038-new_variable-184-184", method="", type_label=new_variable];
1044 [label="184_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n1044-function_definition-185-191", method="withdrawBalance_re_ent26()", type_label=function_definition];
1048 [label="185_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n1048-new_variable-186-186", method="withdrawBalance_re_ent26()", type_label=new_variable];
1072 [label="186_ if\n1072-if-187-189", method="withdrawBalance_re_ent26()", type_label=if];
4634 [label="186_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
1078 [label="189_ userBalance_re_ent26[msg.sender] = 0;\n1078-expression_statement-190-190", method="withdrawBalance_re_ent26()", type_label=expression_statement];
1086 [label="191_ mapping(address=>tokens) public tokendetails;\n1086-new_variable-192-192", method="", type_label=new_variable];
1094 [label="192_ modifier dexstatuscheck(){\n       require(dexStatus==true);\n       _;\n    }\n1094-expression_statement-193-196", method="", type_label=expression_statement];
1097 [label="193_ require(dexStatus==true);\n1097-expression_statement-194-194", method="", type_label=expression_statement];
1105 [label="194_ _;\n1105-expression_statement-195-195", method="", type_label=expression_statement];
1107 [label="196_ function setDexStatus(bool status_) public returns(bool){\n        require(msg.sender == admin);\n        dexStatus = status_;\n        return true;\n    }\n1107-function_definition-197-201", method="setDexStatus(bool status_)", type_label=function_definition];
1119 [label="197_ require(msg.sender == admin);\n1119-expression_statement-198-198", method="setDexStatus(bool status_)", type_label=expression_statement];
1128 [label="198_ dexStatus = status_;\n1128-expression_statement-199-199", method="setDexStatus(bool status_)", type_label=expression_statement];
1132 [label="199_ return true;\n1132-return-200-200", method="setDexStatus(bool status_)", type_label=return];
1135 [label="201_ address payable lastPlayer_re_ent23;\n1135-new_variable-202-202", method="", type_label=new_variable];
1139 [label="202_ uint jackpot_re_ent23;\n1139-new_variable-203-203", method="", type_label=new_variable];
1143 [label="203_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n1143-function_definition-204-209", method="buyTicket_re_ent23()", type_label=function_definition];
1147 [label="204_ if\n1147-if-205-206", method="buyTicket_re_ent23()", type_label=if];
4709 [label="204_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
1158 [label="206_ lastPlayer_re_ent23 = msg.sender;\n1158-expression_statement-207-207", method="buyTicket_re_ent23()", type_label=expression_statement];
1164 [label="207_ jackpot_re_ent23    = address(this).balance;\n1164-expression_statement-208-208", method="buyTicket_re_ent23()", type_label=expression_statement];
1172 [label="209_ function addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_) public returns(bool){\n        require(msg.sender == feeAddress && tokendetails[tokenAddress].status==false);\n        tokendetails[tokenAddress].tokenSymbol=tokenSymbol;\n        tokendetails[tokenAddress].decimals=decimal_;\n        tokendetails[tokenAddress].status=true;\n        return true;\n    }\n1172-function_definition-210-216", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=function_definition];
1192 [label="210_ require(msg.sender == feeAddress && tokendetails[tokenAddress].status==false);\n1192-expression_statement-211-211", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
1210 [label="211_ tokendetails[tokenAddress].tokenSymbol=tokenSymbol;\n1210-expression_statement-212-212", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
1218 [label="212_ tokendetails[tokenAddress].decimals=decimal_;\n1218-expression_statement-213-213", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
1226 [label="213_ tokendetails[tokenAddress].status=true;\n1226-expression_statement-214-214", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
1235 [label="214_ return true;\n1235-return-215-215", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=return];
1238 [label="216_ uint256 counter_re_ent14 =0;\n1238-new_variable-217-217", method="", type_label=new_variable];
1243 [label="217_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n1243-function_definition-218-224", method="callme_re_ent14()", type_label=function_definition];
1247 [label="218_ require(counter_re_ent14<=5);\n1247-expression_statement-219-219", method="callme_re_ent14()", type_label=expression_statement];
1254 [label="219_ if\n1254-if-220-222", method="callme_re_ent14()", type_label=if];
4816 [label="219_ end_if", method="callme_re_ent14()", type_label=end_if];
1269 [label="222_ counter_re_ent14 += 1;\n1269-expression_statement-223-223", method="callme_re_ent14()", type_label=expression_statement];
1273 [label="224_ function deposit() dexstatuscheck public payable returns(bool) {\n        require(msg.value > 0);\n        userDetails[msg.sender][address(0)]=userDetails[msg.sender][address(0)].add(msg.value);\n        emit DepositandWithdraw( msg.sender, address(0),msg.value,0);\n        return true;\n    }\n1273-function_definition-225-230", method="deposit()", type_label=function_definition];
1275 [label="224_ dexstatuscheck\n1275-expression_statement-225-225", method="deposit()", type_label=expression_statement];
1284 [label="225_ require(msg.value > 0);\n1284-expression_statement-226-226", method="deposit()", type_label=expression_statement];
1293 [label="226_ userDetails[msg.sender][address(0)]=userDetails[msg.sender][address(0)].add(msg.value);\n1293-expression_statement-227-227", method="deposit()", type_label=expression_statement];
1336 [label="228_ return true;\n1336-return-229-229", method="deposit()", type_label=return];
1339 [label="230_ address payable lastPlayer_re_ent30;\n1339-new_variable-231-231", method="", type_label=new_variable];
1343 [label="231_ uint jackpot_re_ent30;\n1343-new_variable-232-232", method="", type_label=new_variable];
1347 [label="232_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n1347-function_definition-233-238", method="buyTicket_re_ent30()", type_label=function_definition];
1351 [label="233_ if\n1351-if-234-235", method="buyTicket_re_ent30()", type_label=if];
4913 [label="233_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
1362 [label="235_ lastPlayer_re_ent30 = msg.sender;\n1362-expression_statement-236-236", method="buyTicket_re_ent30()", type_label=expression_statement];
1368 [label="236_ jackpot_re_ent30    = address(this).balance;\n1368-expression_statement-237-237", method="buyTicket_re_ent30()", type_label=expression_statement];
1376 [label="238_ function tokenDeposit(address tokenaddr,uint256 tokenAmount) dexstatuscheck public returns(bool)\n    {\n        require(tokenAmount > 0 && tokendetails[tokenaddr].status==true);\n        require(tokenallowance(tokenaddr,msg.sender) > 0);\n        userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].add(tokenAmount);\n        Token(tokenaddr).transferFrom(msg.sender,address(this), tokenAmount);\n        emit DepositandWithdraw( msg.sender,tokenaddr,tokenAmount,0);\n        return true;\n    }\n1376-function_definition-239-247", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=function_definition];
1386 [label="238_ dexstatuscheck\n1386-expression_statement-239-239", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1394 [label="240_ require(tokenAmount > 0 && tokendetails[tokenaddr].status==true);\n1394-expression_statement-241-241", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1410 [label="241_ require(tokenallowance(tokenaddr,msg.sender) > 0);\n1410-expression_statement-242-242", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1424 [label="242_ userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].add(tokenAmount);\n1424-expression_statement-243-243", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1445 [label="243_ Token(tokenaddr).transferFrom(msg.sender,address(this), tokenAmount);\n1445-expression_statement-244-244", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1475 [label="245_ return true;\n1475-return-246-246", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=return];
1478 [label="247_ mapping(address => uint) balances_re_ent8;\n1478-new_variable-248-248", method="", type_label=new_variable];
1484 [label="248_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n1484-function_definition-249-253", method="withdraw_balances_re_ent8()", type_label=function_definition];
1488 [label="249_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n1488-new_variable-250-250", method="withdraw_balances_re_ent8()", type_label=new_variable];
1512 [label="250_ if\n1512-if-251-252", method="withdraw_balances_re_ent8()", type_label=if];
5074 [label="250_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
1514 [label="251_ balances_re_ent8[msg.sender] = 0;\n1514-expression_statement-252-252", method="withdraw_balances_re_ent8()", type_label=expression_statement];
1522 [label="253_ function withdraw(uint8 type_,address tokenaddr,uint256 amount) dexstatuscheck public returns(bool) {\n        require(type_ ==0 || type_ == 1);\n         if(type_==0){  \n         require(tokenaddr == address(0));\n         require(amount>0 && amount <= userDetails[msg.sender][address(0)] && withdrawfee[address(0)]<amount);\n         require(amount<=address(this).balance);\n                msg.sender.transfer(amount.sub(withdrawfee[address(0)]));    \n                userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].sub(amount);\n                feeAmount[admin][address(0)] = feeAmount[admin][address(0)].add(withdrawfee[address(0)]);\n        }\n        else{  \n        require(tokenaddr != address(0) && tokendetails[tokenaddr].status==true);\n        require(amount>0 && amount <= userDetails[msg.sender][tokenaddr] && withdrawfee[tokenaddr]<amount);\n              Token(tokenaddr).transfer(msg.sender, (amount.sub(withdrawfee[tokenaddr])));\n              userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].sub(amount);\n              feeAmount[admin][tokenaddr] = feeAmount[admin][tokenaddr].add(withdrawfee[tokenaddr]);\n        }\n        emit DepositandWithdraw( msg.sender,tokenaddr,amount,1);\n        return true;\n    }\n1522-function_definition-254-273", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=function_definition];
1536 [label="253_ dexstatuscheck\n1536-expression_statement-254-254", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1544 [label="254_ require(type_ ==0 || type_ == 1);\n1544-expression_statement-255-255", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1555 [label="255_ if_type_==0\n1555-if-256-270", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=if];
5117 [label="255_ end_if", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=end_if];
1560 [label="256_ require(tokenaddr == address(0));\n1560-expression_statement-257-257", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1569 [label="257_ require(amount>0 && amount <= userDetails[msg.sender][address(0)] && withdrawfee[address(0)]<amount);\n1569-expression_statement-258-258", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1596 [label="258_ require(amount<=address(this).balance);\n1596-expression_statement-259-259", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1607 [label="259_ msg.sender.transfer(amount.sub(withdrawfee[address(0)]));\n1607-expression_statement-260-260", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1625 [label="260_ userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].sub(amount);\n1625-expression_statement-261-261", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1650 [label="261_ feeAmount[admin][address(0)] = feeAmount[admin][address(0)].add(withdrawfee[address(0)]);\n1650-expression_statement-262-262", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1676 [label="264_ require(tokenaddr != address(0) && tokendetails[tokenaddr].status==true);\n1676-expression_statement-265-265", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1694 [label="265_ require(amount>0 && amount <= userDetails[msg.sender][tokenaddr] && withdrawfee[tokenaddr]<amount);\n1694-expression_statement-266-266", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1717 [label="266_ Token(tokenaddr).transfer(msg.sender, (amount.sub(withdrawfee[tokenaddr])));\n1717-expression_statement-267-267", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1739 [label="267_ userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].sub(amount);\n1739-expression_statement-268-268", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1760 [label="268_ feeAmount[admin][tokenaddr] = feeAmount[admin][tokenaddr].add(withdrawfee[tokenaddr]);\n1760-expression_statement-269-269", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1791 [label="271_ return true;\n1791-return-272-272", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=return];
1794 [label="273_ mapping(address => uint) redeemableEther_re_ent39;\n1794-new_variable-274-274", method="", type_label=new_variable];
1800 [label="274_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n1800-function_definition-275-280", method="claimReward_re_ent39()", type_label=function_definition];
1804 [label="275_ require(redeemableEther_re_ent39[msg.sender] > 0);\n1804-expression_statement-276-276", method="claimReward_re_ent39()", type_label=expression_statement];
1815 [label="276_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n1815-new_variable-277-277", method="claimReward_re_ent39()", type_label=new_variable];
1825 [label="277_ msg.sender.transfer(transferValue_re_ent39);\n1825-expression_statement-278-278", method="claimReward_re_ent39()", type_label=expression_statement];
1834 [label="278_ redeemableEther_re_ent39[msg.sender] = 0;\n1834-expression_statement-279-279", method="claimReward_re_ent39()", type_label=expression_statement];
1842 [label="280_ function adminProfitWithdraw(uint8 type_,address tokenAddr)public returns(bool){  \n       require(msg.sender == admin);\n       require(type_ ==0 || type_ == 1);\n         if(type_==0){  \n            admin.transfer(feeAmount[admin][address(0)]);\n            feeAmount[admin][address(0)]=0;\n        }\n        else{  \n            require(tokenAddr != address(0)) ;\n            Token(tokenAddr).transfer(admin, feeAmount[admin][tokenAddr]);\n            feeAmount[admin][tokenAddr]=0;\n        }\n            return true;\n        }\n1842-function_definition-281-294", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=function_definition];
1858 [label="281_ require(msg.sender == admin);\n1858-expression_statement-282-282", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1867 [label="282_ require(type_ ==0 || type_ == 1);\n1867-expression_statement-283-283", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1878 [label="283_ if_type_==0\n1878-if-284-292", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=if];
5440 [label="283_ end_if", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=end_if];
1883 [label="284_ admin.transfer(feeAmount[admin][address(0)]);\n1883-expression_statement-285-285", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1896 [label="285_ feeAmount[admin][address(0)]=0;\n1896-expression_statement-286-286", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1907 [label="288_ require(tokenAddr != address(0)) ;\n1907-expression_statement-289-289", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1916 [label="289_ Token(tokenAddr).transfer(admin, feeAmount[admin][tokenAddr]);\n1916-expression_statement-290-290", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1932 [label="290_ feeAmount[admin][tokenAddr]=0;\n1932-expression_statement-291-291", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1940 [label="292_ return true;\n1940-return-293-293", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=return];
1943 [label="294_ mapping(address => uint) balances_re_ent36;\n1943-new_variable-295-295", method="", type_label=new_variable];
1949 [label="295_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n1949-function_definition-296-299", method="withdraw_balances_re_ent36()", type_label=function_definition];
1953 [label="296_ if\n1953-if-297-298", method="withdraw_balances_re_ent36()", type_label=if];
5515 [label="296_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
1966 [label="297_ balances_re_ent36[msg.sender] = 0;\n1966-expression_statement-298-298", method="withdraw_balances_re_ent36()", type_label=expression_statement];
1974 [label="299_ function setwithdrawfee(address[] memory addr,uint256[] memory feeamount)public returns(bool)\n        {\n          require(msg.sender==admin);\n          require(addr.length <10 && feeamount.length < 10 && addr.length==feeamount.length);\n          for(uint8 i=0;i<addr.length;i++){\n            withdrawfee[addr[i]]=feeamount[i];    \n          }\n           return true;\n        }\n1974-function_definition-300-308", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=function_definition];
1992 [label="301_ require(msg.sender==admin);\n1992-expression_statement-302-302", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
2001 [label="302_ require(addr.length <10 && feeamount.length < 10 && addr.length==feeamount.length);\n2001-expression_statement-303-303", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
2024 [label="303_ for(i<addr.length;;i++)\n2024-for-304-306", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=for];
5586 [label="303_ end_loop", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=end_loop];
2037 [label="303_ i++\n2037-expression_statement-304-304", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
2040 [label="304_ withdrawfee[addr[i]]=feeamount[i];\n2040-expression_statement-305-305", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
2050 [label="306_ return true;\n2050-return-307-307", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=return];
2053 [label="308_ uint256 counter_re_ent35 =0;\n2053-new_variable-309-309", method="", type_label=new_variable];
2058 [label="309_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n2058-function_definition-310-316", method="callme_re_ent35()", type_label=function_definition];
2062 [label="310_ require(counter_re_ent35<=5);\n2062-expression_statement-311-311", method="callme_re_ent35()", type_label=expression_statement];
2069 [label="311_ if\n2069-if-312-314", method="callme_re_ent35()", type_label=if];
5631 [label="311_ end_if", method="callme_re_ent35()", type_label=end_if];
2084 [label="314_ counter_re_ent35 += 1;\n2084-expression_statement-315-315", method="callme_re_ent35()", type_label=expression_statement];
2088 [label="316_ function verify(string memory  message, uint8 v, bytes32 r, bytes32 s) private pure returns (address signer) {\n        string memory header = \"\x19Ethereum Signed Message:\n000000\";\n        uint256 lengthOffset;\n        uint256 length;\n        assembly {\n            length := mload(message)\n            lengthOffset := add(header, 57)\n        }\n        require(length <= 999999);\n        uint256 lengthLength = 0;\n        uint256 divisor = 100000; \n        while (divisor != 0) {\n            uint256 digit = length.div(divisor);\n            if (digit == 0) {\n                if (lengthLength == 0) {\n                      divisor = divisor.div(10);\n                      continue;\n                    }\n            }\n            lengthLength++;\n            length = length.sub(digit.mul(divisor));\n            divisor = divisor.div(10);\n            digit = digit.add(0x30);\n            lengthOffset++;\n            assembly {\n                mstore8(lengthOffset, digit)\n            }\n        }  \n        if (lengthLength == 0) {\n            lengthLength = 1 + 0x19 + 1;\n        } else {\n            lengthLength = lengthLength.add(1 + 0x19);\n        }\n        assembly {\n            mstore(header, lengthLength)\n        }\n        bytes32 check = keccak256(abi.encodePacked(header, message));\n        return ecrecover(check, v, r, s);\n    }\n2088-function_definition-317-355", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
2114 [label="317_ string memory header = \"\x19Ethereum Signed Message:\n000000\";\n2114-new_variable-318-318", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2121 [label="318_ uint256 lengthOffset;\n2121-new_variable-319-319", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2126 [label="319_ uint256 length;\n2126-new_variable-320-320", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2151 [label="324_ require(length <= 999999);\n2151-expression_statement-325-325", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2158 [label="325_ uint256 lengthLength = 0;\n2158-new_variable-326-326", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2164 [label="326_ uint256 divisor = 100000;\n2164-new_variable-327-327", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2170 [label="327_ while\n2170-while-328-344", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=while];
5732 [label="327_ end_loop", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_loop];
2175 [label="328_ uint256 digit = length.div(divisor);\n2175-new_variable-329-329", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2186 [label="329_ if_digit == 0\n2186-if-330-335", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=if];
5748 [label="329_ end_if", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
2191 [label="330_ if_lengthLength == 0\n2191-if-331-334", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=if];
5753 [label="330_ end_if", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
2196 [label="331_ divisor = divisor.div(10);\n2196-expression_statement-332-332", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2205 [label="332_ continue;\n2205-expression_statement-333-333", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2206 [label="335_ lengthLength++;\n2206-expression_statement-336-336", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2207 [label="335_ lengthLength++\n2207-expression_statement-336-336", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2209 [label="336_ length = length.sub(digit.mul(divisor));\n2209-expression_statement-337-337", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2223 [label="337_ divisor = divisor.div(10);\n2223-expression_statement-338-338", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2232 [label="338_ digit = digit.add(0x30);\n2232-expression_statement-339-339", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2241 [label="339_ lengthOffset++;\n2241-expression_statement-340-340", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2242 [label="339_ lengthOffset++\n2242-expression_statement-340-340", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2253 [label="344_ if_lengthLength == 0\n2253-if-345-349", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=if];
5815 [label="344_ end_if", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
2258 [label="345_ lengthLength = 1 + 0x19 + 1;\n2258-expression_statement-346-346", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2267 [label="347_ lengthLength = lengthLength.add(1 + 0x19);\n2267-expression_statement-348-348", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2287 [label="352_ bytes32 check = keccak256(abi.encodePacked(header, message));\n2287-new_variable-353-353", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2303 [label="353_ return ecrecover(check, v, r, s);\n2303-return-354-354", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=return];
2314 [label="355_ function makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s) dexstatuscheck public returns(bool){\n      require(msg.sender == feeAddress);\n       require(verify((message),v,r,s)==traderAddresses[1]);\n      uint256 amount__;\n        uint256 orderiD = tradeDetails[0];\n        if(Order[orderiD].status==0){    \n            if(tradeDetails[6] == 0){\n                amount__ = tradeDetails[3];\n            }\n            else if(tradeDetails[6] ==1){\n                amount__ = tradeDetails[1];\n            }\n            require(amount__ > 0 && amount__ <= userDetails[traderAddresses[1]][traderAddresses[0]]);\n                Order[orderiD].userAddress = traderAddresses[1];\n                Order[orderiD].type_ = tradeDetails[6];\n                Order[orderiD].price = tradeDetails[2];\n                Order[orderiD].amount  = tradeDetails[1];\n                Order[orderiD].total  = tradeDetails[3];\n                Order[orderiD].tradeTotal  = tradeDetails[3];\n                Order[orderiD]._decimal  = tradeDetails[7];\n                Order[orderiD].tokenAddress = traderAddresses[0];       \n                userDetails[traderAddresses[1]][traderAddresses[0]]=userDetails[traderAddresses[1]][traderAddresses[0]].sub(amount__);\n                Order[orderiD].tradeAmount=tradeDetails[1];\n                Order[orderiD].status=1;\n        }\n        else if(Order[orderiD].status==1 && tradeDetails[8]==0){  \n            cancelOrder(orderiD);\n        }\n        if(Order[orderiD].status==1 && tradeDetails[1] > 0 && tradeDetails[8]>0 && Order[tradeDetails[8]].status==1 && tradeDetails[3]>0){  \n                Order[orderiD].tradeAmount =Order[orderiD].tradeAmount.sub(tradeDetails[1]);\n                Order[tradeDetails[8]].tradeAmount =Order[tradeDetails[8]].tradeAmount.sub(tradeDetails[1]);\n                if(tradeDetails[2]>0){\n                    userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[2]);\n                }\n                Order[orderiD].tradeTotal =Order[orderiD].tradeTotal.sub(((tradeDetails[1].mul(Order[orderiD].price)).div(Order[orderiD]._decimal)));\n                Order[tradeDetails[8]].tradeTotal =Order[tradeDetails[8]].tradeTotal.sub(((tradeDetails[1].mul(Order[tradeDetails[8]].price)).div(Order[tradeDetails[8]]._decimal)));\n                    if(tradeDetails[6] == 1 || tradeDetails[6]==3)\n                    {\n                        userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1]);\n                        userDetails[Order[orderiD].userAddress][traderAddresses[0]]= userDetails[Order[orderiD].userAddress][traderAddresses[0]].sub(tradeDetails[4]);    \n                        feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[4]);\n                    }\n                    else\n                    {\n                         userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1].sub(tradeDetails[4]));\n                            feeAmount[admin][Order[tradeDetails[8]].tokenAddress]= feeAmount[admin][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[4]);\n                    }\n                    if(tradeDetails[6] == 2 || tradeDetails[6]==3)\n                    {\n                        userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3]);\n                        userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]]= userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]].sub(tradeDetails[5]);\n                        feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[5]);\n                    }\n                    else\n                    {\n                         userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3].sub(tradeDetails[5]));\n                         feeAmount[admin][Order[orderiD].tokenAddress]= feeAmount[admin][Order[orderiD].tokenAddress].add(tradeDetails[5]);\n                    }\n                if(Order[tradeDetails[8]].tradeAmount==0){\n                    Order[tradeDetails[8]].status=2;    \n                }\n                if(Order[orderiD].tradeAmount==0){\n                    Order[orderiD].status=2;    \n                }\n                orderPairStatus[orderiD][tradeDetails[8]] = true;\n            }\n        return true; \n    }\n2314-function_definition-356-423", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=function_definition];
2344 [label="355_ dexstatuscheck\n2344-expression_statement-356-356", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2352 [label="356_ require(msg.sender == feeAddress);\n2352-expression_statement-357-357", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2361 [label="357_ require(verify((message),v,r,s)==traderAddresses[1]);\n2361-expression_statement-358-358", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2380 [label="358_ uint256 amount__;\n2380-new_variable-359-359", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=new_variable];
2385 [label="359_ uint256 orderiD = tradeDetails[0];\n2385-new_variable-360-360", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=new_variable];
2393 [label="360_ if_Order[orderiD].status==0\n2393-if-361-383", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5955 [label="360_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2402 [label="361_ if_tradeDetails[6] == 0\n2402-if-362-367", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5964 [label="361_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2409 [label="362_ amount__ = tradeDetails[3];\n2409-expression_statement-363-363", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2415 [label="364_ if_tradeDetails[6] ==1\n2415-if-365-367", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
2422 [label="365_ amount__ = tradeDetails[1];\n2422-expression_statement-366-366", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2428 [label="367_ require(amount__ > 0 && amount__ <= userDetails[traderAddresses[1]][traderAddresses[0]]);\n2428-expression_statement-368-368", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2447 [label="368_ Order[orderiD].userAddress = traderAddresses[1];\n2447-expression_statement-369-369", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2457 [label="369_ Order[orderiD].type_ = tradeDetails[6];\n2457-expression_statement-370-370", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2467 [label="370_ Order[orderiD].price = tradeDetails[2];\n2467-expression_statement-371-371", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2477 [label="371_ Order[orderiD].amount  = tradeDetails[1];\n2477-expression_statement-372-372", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2487 [label="372_ Order[orderiD].total  = tradeDetails[3];\n2487-expression_statement-373-373", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2497 [label="373_ Order[orderiD].tradeTotal  = tradeDetails[3];\n2497-expression_statement-374-374", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2507 [label="374_ Order[orderiD]._decimal  = tradeDetails[7];\n2507-expression_statement-375-375", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2517 [label="375_ Order[orderiD].tokenAddress = traderAddresses[0];\n2517-expression_statement-376-376", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2527 [label="376_ userDetails[traderAddresses[1]][traderAddresses[0]]=userDetails[traderAddresses[1]][traderAddresses[0]].sub(amount__);\n2527-expression_statement-377-377", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2552 [label="377_ Order[orderiD].tradeAmount=tradeDetails[1];\n2552-expression_statement-378-378", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2562 [label="378_ Order[orderiD].status=1;\n2562-expression_statement-379-379", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2570 [label="380_ if_Order[orderiD].status==1 && tradeDetails[8]==0\n2570-if-381-383", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
2585 [label="381_ cancelOrder(orderiD);\n2585-expression_statement-382-382", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2590 [label="383_ if_Order[orderiD].status==1 && tradeDetails[1] > 0 && tradeDetails[8]>0 && Order[tradeDetails[8]].status==1 && tradeDetails[3]>0\n2590-if-384-421", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
6152 [label="383_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2627 [label="384_ Order[orderiD].tradeAmount =Order[orderiD].tradeAmount.sub(tradeDetails[1]);\n2627-expression_statement-385-385", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2646 [label="385_ Order[tradeDetails[8]].tradeAmount =Order[tradeDetails[8]].tradeAmount.sub(tradeDetails[1]);\n2646-expression_statement-386-386", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2669 [label="386_ if_tradeDetails[2]>0\n2669-if-387-389", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
6231 [label="386_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2676 [label="387_ userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[2]);\n2676-expression_statement-388-388", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2711 [label="389_ Order[orderiD].tradeTotal =Order[orderiD].tradeTotal.sub(((tradeDetails[1].mul(Order[orderiD].price)).div(Order[orderiD]._decimal)));\n2711-expression_statement-390-390", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2750 [label="390_ Order[tradeDetails[8]].tradeTotal =Order[tradeDetails[8]].tradeTotal.sub(((tradeDetails[1].mul(Order[tradeDetails[8]].price)).div(Order[tradeDetails[8]]._decimal)));\n2750-expression_statement-391-391", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2797 [label="391_ if_tradeDetails[6] == 1 || tradeDetails[6]==3\n2797-if-392-402", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
6359 [label="391_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2810 [label="393_ userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1]);\n2810-expression_statement-394-394", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2849 [label="394_ userDetails[Order[orderiD].userAddress][traderAddresses[0]]= userDetails[Order[orderiD].userAddress][traderAddresses[0]].sub(tradeDetails[4]);\n2849-expression_statement-395-395", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2880 [label="395_ feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[4]);\n2880-expression_statement-396-396", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2904 [label="399_ userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1].sub(tradeDetails[4]));\n2904-expression_statement-400-400", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2950 [label="400_ feeAmount[admin][Order[tradeDetails[8]].tokenAddress]= feeAmount[admin][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[4]);\n2950-expression_statement-401-401", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2981 [label="402_ if_tradeDetails[6] == 2 || tradeDetails[6]==3\n2981-if-403-413", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
6543 [label="402_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2994 [label="404_ userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3]);\n2994-expression_statement-405-405", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
3033 [label="405_ userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]]= userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]].sub(tradeDetails[5]);\n3033-expression_statement-406-406", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
3068 [label="406_ feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[5]);\n3068-expression_statement-407-407", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
3092 [label="410_ userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3].sub(tradeDetails[5]));\n3092-expression_statement-411-411", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
3138 [label="411_ feeAmount[admin][Order[orderiD].tokenAddress]= feeAmount[admin][Order[orderiD].tokenAddress].add(tradeDetails[5]);\n3138-expression_statement-412-412", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
3165 [label="413_ if_Order[tradeDetails[8]].tradeAmount==0\n3165-if-414-416", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
6727 [label="413_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
3176 [label="414_ Order[tradeDetails[8]].status=2;\n3176-expression_statement-415-415", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
3186 [label="416_ if_Order[orderiD].tradeAmount==0\n3186-if-417-419", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
6748 [label="416_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
3195 [label="417_ Order[orderiD].status=2;\n3195-expression_statement-418-418", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
3203 [label="419_ orderPairStatus[orderiD][tradeDetails[8]] = true;\n3203-expression_statement-420-420", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
3214 [label="421_ return true;\n3214-return-422-422", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=return];
3217 [label="423_ mapping(address => uint) userBalance_re_ent40;\n3217-new_variable-424-424", method="", type_label=new_variable];
3223 [label="424_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n3223-function_definition-425-431", method="withdrawBalance_re_ent40()", type_label=function_definition];
3227 [label="425_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n3227-new_variable-426-426", method="withdrawBalance_re_ent40()", type_label=new_variable];
3251 [label="426_ if\n3251-if-427-429", method="withdrawBalance_re_ent40()", type_label=if];
6813 [label="426_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
3257 [label="429_ userBalance_re_ent40[msg.sender] = 0;\n3257-expression_statement-430-430", method="withdrawBalance_re_ent40()", type_label=expression_statement];
3265 [label="431_ function cancelOrder(uint256 orderid)internal returns(bool){\n        if(Order[orderid].status==1){\n            if(Order[orderid].type_ == 0){\n            userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeTotal);        \n            }\n            else{\n                userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeAmount);\n            }\n            Order[orderid].status=3;     \n        }\n        return true;\n}\n3265-function_definition-432-443", method="cancelOrder(uint256 orderid)", type_label=function_definition];
3277 [label="432_ if_Order[orderid].status==1\n3277-if-433-441", method="cancelOrder(uint256 orderid)", type_label=if];
6839 [label="432_ end_if", method="cancelOrder(uint256 orderid)", type_label=end_if];
3286 [label="433_ if_Order[orderid].type_ == 0\n3286-if-434-439", method="cancelOrder(uint256 orderid)", type_label=if];
6848 [label="433_ end_if", method="cancelOrder(uint256 orderid)", type_label=end_if];
3295 [label="434_ userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeTotal);\n3295-expression_statement-435-435", method="cancelOrder(uint256 orderid)", type_label=expression_statement];
3333 [label="437_ userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeAmount);\n3333-expression_statement-438-438", method="cancelOrder(uint256 orderid)", type_label=expression_statement];
3370 [label="439_ Order[orderid].status=3;\n3370-expression_statement-440-440", method="cancelOrder(uint256 orderid)", type_label=expression_statement];
3378 [label="441_ return true;\n3378-return-442-442", method="cancelOrder(uint256 orderid)", type_label=return];
3381 [label="443_ mapping(address => uint) userBalance_re_ent33;\n3381-new_variable-444-444", method="", type_label=new_variable];
3387 [label="444_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n3387-function_definition-445-451", method="withdrawBalance_re_ent33()", type_label=function_definition];
3391 [label="445_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n3391-new_variable-446-446", method="withdrawBalance_re_ent33()", type_label=new_variable];
3415 [label="446_ if\n3415-if-447-449", method="withdrawBalance_re_ent33()", type_label=if];
6977 [label="446_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
3421 [label="449_ userBalance_re_ent33[msg.sender] = 0;\n3421-expression_statement-450-450", method="withdrawBalance_re_ent33()", type_label=expression_statement];
3429 [label="451_ function viewTokenBalance(address tokenAddr,address baladdr)public view returns(uint256){\n        return Token(tokenAddr).balanceOf(baladdr);\n    }\n3429-function_definition-452-454", method="viewTokenBalance(address tokenAddr,address baladdr)", type_label=function_definition];
3446 [label="452_ return Token(tokenAddr).balanceOf(baladdr);\n3446-return-453-453", method="viewTokenBalance(address tokenAddr,address baladdr)", type_label=return];
3456 [label="454_ bool not_called_re_ent27 = true;\n3456-new_variable-455-455", method="", type_label=new_variable];
3462 [label="455_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n3462-function_definition-456-462", method="bug_re_ent27()", type_label=function_definition];
3466 [label="456_ require(not_called_re_ent27);\n3466-expression_statement-457-457", method="bug_re_ent27()", type_label=expression_statement];
3471 [label="457_ if\n3471-if-458-460", method="bug_re_ent27()", type_label=if];
7033 [label="457_ end_if", method="bug_re_ent27()", type_label=end_if];
3486 [label="460_ not_called_re_ent27 = false;\n3486-expression_statement-461-461", method="bug_re_ent27()", type_label=expression_statement];
3491 [label="462_ function tokenallowance(address tokenAddr,address owner) public view returns(uint256){\n        return Token(tokenAddr).allowance(owner,address(this));\n    }\n3491-function_definition-463-465", method="tokenallowance(address tokenAddr,address owner)", type_label=function_definition];
3508 [label="463_ return Token(tokenAddr).allowance(owner,address(this));\n3508-return-464-464", method="tokenallowance(address tokenAddr,address owner)", type_label=return];
3522 [label="465_ mapping(address => uint) balances_re_ent31;\n3522-new_variable-466-466", method="", type_label=new_variable];
3528 [label="466_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n3528-function_definition-467-471", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
3536 [label="467_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n3536-expression_statement-468-468", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
3547 [label="468_ require(msg.sender.send(_weiToWithdraw));\n3547-expression_statement-469-469", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
3559 [label="469_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n3559-expression_statement-470-470", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1779;
2278;
35 -> 39  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
39 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 3606  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
90 -> 94  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
94 -> 105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
105 -> 115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
115 -> 124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
158 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
169 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
211 -> 215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
215 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
226 -> 236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
256 -> 273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
273 -> 278  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
273 -> 3835  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3835 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 3835  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
278 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
280 -> 288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
288 -> 297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
297 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
299 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
316 -> 324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
324 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
326 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
354 -> 371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
402 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
432 -> 3994  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
467 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 4038  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
496 -> 500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
516 -> 4078  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
535 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
548 -> 552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
552 -> 4114  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
563 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
627 -> 632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
646 -> 692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
720 -> 724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
724 -> 728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
738 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
749 -> 4311  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
768 -> 772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
776 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 4342  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
791 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
805 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
819 -> 827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
827 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
858 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
880 -> 884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
888 -> 892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
892 -> 910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 4472  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
915 -> 921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
944 -> 948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
959 -> 969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
969 -> 978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
986 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 1003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 4565  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1029 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1044 -> 1048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1048 -> 1072  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1072 -> 4634  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1086 -> 1094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1097 -> 1105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1107 -> 1119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1119 -> 1128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1128 -> 1132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1132 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1135 -> 1139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1143 -> 1147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1147 -> 4709  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1158 -> 1164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1172 -> 1192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1192 -> 1210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1210 -> 1218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1218 -> 1226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1226 -> 1235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1235 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1243 -> 1247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1247 -> 1254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1254 -> 4816  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1273 -> 1284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1284 -> 1293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1336 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1339 -> 1343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1347 -> 1351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1351 -> 4913  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1362 -> 1368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1376 -> 1394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1394 -> 1410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1410 -> 1424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1424 -> 1445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1475 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1484 -> 1488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1488 -> 1512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1512 -> 1514  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1512 -> 5074  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5074 -> 1522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1514 -> 5074  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1522 -> 1544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1544 -> 1555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1555 -> 1560  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1555 -> 1676  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5117 -> 1779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1560 -> 1569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1569 -> 1596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1596 -> 1607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1607 -> 1625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1625 -> 1650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1650 -> 5117  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1676 -> 1694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1694 -> 1717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1717 -> 1739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1739 -> 1760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1760 -> 5117  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1791 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1800 -> 1804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1804 -> 1815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1815 -> 1825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1825 -> 1834  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1842 -> 1858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1858 -> 1867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1867 -> 1878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1878 -> 1883  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1878 -> 1907  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5440 -> 1940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1883 -> 1896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1896 -> 5440  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1907 -> 1916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1916 -> 1932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1932 -> 5440  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1940 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1949 -> 1953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1953 -> 1966  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1953 -> 5515  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5515 -> 1974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1966 -> 5515  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1974 -> 1992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1992 -> 2001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2001 -> 2024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2024 -> 2040  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2024 -> 5586  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5586 -> 2050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2037 -> 2024  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2040 -> 2037  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2050 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2058 -> 2062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2062 -> 2069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2069 -> 5631  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2088 -> 2114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2114 -> 2121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2121 -> 2126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2151 -> 2158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2158 -> 2164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2164 -> 2170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2170 -> 2175  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2170 -> 5732  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5732 -> 2253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2175 -> 2186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2186 -> 2191  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2186 -> 5748  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2191 -> 2196  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2191 -> 5753  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2196 -> 2205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2205 -> 2170  [color=red, controlflow_type=jump_next, edge_type=CFG_edge, key=0, label=jump_next];
2206 -> 2209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2209 -> 2223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2223 -> 2232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2232 -> 2241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2253 -> 2258  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2253 -> 2267  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5815 -> 2278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2258 -> 5815  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2267 -> 5815  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2287 -> 2303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2303 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2314 -> 2352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2352 -> 2361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2361 -> 2380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2380 -> 2385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2385 -> 2393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2393 -> 2402  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2393 -> 2570  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5955 -> 2590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2402 -> 2409  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2402 -> 2415  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5964 -> 2428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2409 -> 5964  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2415 -> 2422  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2415 -> 5964  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2422 -> 5964  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2428 -> 2447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2447 -> 2457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2457 -> 2467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2467 -> 2477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2477 -> 2487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2487 -> 2497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2497 -> 2507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2507 -> 2517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2517 -> 2527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2527 -> 2552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2552 -> 2562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2562 -> 5955  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2570 -> 2585  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2570 -> 5955  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2585 -> 5955  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2590 -> 2627  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2590 -> 6152  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6152 -> 3214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2627 -> 2646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2646 -> 2669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2669 -> 2676  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2669 -> 6231  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6231 -> 2711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2676 -> 6231  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2711 -> 2750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2750 -> 2797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2797 -> 2810  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2797 -> 2904  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6359 -> 2981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2810 -> 2849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2849 -> 2880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2880 -> 6359  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2904 -> 2950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2950 -> 6359  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2981 -> 2994  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2981 -> 3092  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6543 -> 3165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2994 -> 3033  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3033 -> 3068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3068 -> 6543  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3092 -> 3138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3138 -> 6543  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3165 -> 3176  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3165 -> 6727  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6727 -> 3186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3176 -> 6727  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3186 -> 3195  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3186 -> 6748  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6748 -> 3203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3195 -> 6748  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3203 -> 6152  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3214 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3223 -> 3227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3227 -> 3251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3251 -> 6813  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3265 -> 3277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3277 -> 3286  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3277 -> 6839  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6839 -> 3378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3286 -> 3295  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3286 -> 3333  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6848 -> 3370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3295 -> 6848  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3333 -> 6848  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3370 -> 6839  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3378 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3387 -> 3391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3391 -> 3415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3415 -> 6977  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3429 -> 3446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3446 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3462 -> 3466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3466 -> 3471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3471 -> 7033  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3491 -> 3508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3508 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3528 -> 3536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3536 -> 3547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3547 -> 3559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
