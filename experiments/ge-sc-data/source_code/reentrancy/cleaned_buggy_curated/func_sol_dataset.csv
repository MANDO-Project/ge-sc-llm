,func,target,project
0,"    function withdrawReward(address recipient) public {
        uint amountToWithdraw = rewardsForA[recipient];
        rewardsForA[recipient] = 0;
        (bool success, ) = recipient.call.value(amountToWithdraw)("""");
        require(success);
    }",False,reentrancy_bonus.sol
1,"    function getFirstWithdrawalBonus(address recipient) public {
        require(!claimedBonus[recipient]);  
        rewardsForA[recipient] += 100;
        withdrawReward(recipient);  
        claimedBonus[recipient] = true;
    }",True,reentrancy_bonus.sol
2,"  function balanceOf(address _owner) public view returns (uint256 bal) {
    require(active);
    return balances[_owner];
  }",False,0xa5b91fbfec2f9a708592f9cd3c9e20becdfcb816.sol
3,"  function transfer(address _to, uint256 _value) public returns (bool) {
    require(active);
    require(_to != address(0));
    require(_to != msg.sender);
    require(_value <= balances[msg.sender]);
    uint256 bal = balances[_to] + _value;
    require(bal >= balances[_to]);
    balances[msg.sender] = balances[msg.sender] - _value;
    balances[_to] = bal;
    emit Transfer(msg.sender, _to, _value);
    return true;
  }",False,0xa5b91fbfec2f9a708592f9cd3c9e20becdfcb816.sol
4,"  function deactivate() public onlyOwner {
    active = false;
  }",False,0xa5b91fbfec2f9a708592f9cd3c9e20becdfcb816.sol
5,"  function activate() public onlyOwner {
    active = true;
  }",False,0xa5b91fbfec2f9a708592f9cd3c9e20becdfcb816.sol
6,"  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }",False,0xa5b91fbfec2f9a708592f9cd3c9e20becdfcb816.sol
7,"  function kill() public onlyOwner {
    require(!active);
    selfdestruct(msg.sender);
  }",False,0xa5b91fbfec2f9a708592f9cd3c9e20becdfcb816.sol
8,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }",False,buggy_19.sol
9,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }",False,buggy_19.sol
10,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }",False,buggy_19.sol
11,"  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }",False,buggy_19.sol
12,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_19.sol
13,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_19.sol
14,"    function transferOwnership(address newOwner) onlyOwner public {
        require(newOwner != address(0));
        owner = newOwner;
    }",False,buggy_19.sol
15,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_19.sol
16,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_19.sol
17,"    function withdrawForUser(address payable _address,uint amount) onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method"");
        _address.transfer(amount);
    }",False,buggy_19.sol
18,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_19.sol
19,"    function moveBrick(uint amount) onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(amount);
    }",False,buggy_19.sol
20,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_19.sol
21,"    function moveBrickContracts() onlyOwner public
    {
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
22,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_19.sol
23,"    function moveBrickClear() onlyOwner public {
        require(msg.sender == owner, ""only owner can use this method""); 
        selfdestruct(msg.sender);
    }",False,buggy_19.sol
24,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_19.sol
25,"    function joinFlexible() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
26,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_19.sol
27,"    function joinFixed() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
28,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_19.sol
29,"    function staticBonus() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
30,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_19.sol
31,"    function activeBonus() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
32,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_19.sol
33,"    function teamAddBonus() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
34,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_19.sol
35,"    function staticBonusCacl() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
36,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_19.sol
37,"    function activeBonusCacl_1() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
38,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_19.sol
39,"    function activeBonusCacl_2() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
40,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_19.sol
41,"    function activeBonusCacl_3() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
42,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_19.sol
43,"    function activeBonusCacl_4() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
44,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_19.sol
45,"    function activeBonusCacl_5() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
46,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_19.sol
47,"    function activeBonusCacl_6() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
48,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_19.sol
49,"    function activeBonusCacl_7() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
50,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_19.sol
51,"    function activeBonusCacl_8() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
52,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_19.sol
53,"    function activeBonusCacl_9() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
54,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_19.sol
55,"    function teamAddBonusCacl() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
56,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_19.sol
57,"    function caclTeamPerformance() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
58,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_19.sol
59,"    function releaStaticBonus() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
60,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_19.sol
61,"    function releaActiveBonus() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
62,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_19.sol
63,"    function releaTeamAddBonus() onlyOwner public{
        require(msg.sender == owner, ""only owner can use this method""); 
        msg.sender.transfer(address(this).balance);
    }",False,buggy_19.sol
64,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_19.sol
65,"    function transferFrom(address from, address to, uint256 value) external returns (bool);",False,buggy_31.sol
66,    function signer() external view returns (address _signer);,False,buggy_31.sol
67,"    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        if (signature.length != 65) {
            return (address(0));
        }
        bytes32 r;
        bytes32 s;
        uint8 v;
        assembly {
            r := mload(add(signature, 0x20))
            s := mload(add(signature, 0x40))
            v := byte(0, mload(add(signature, 0x60)))
        }
        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
            return address(0);
        }
        if (v != 27 && v != 28) {
            return address(0);
        }
        return ecrecover(hash, v, r, s);
    }",False,buggy_31.sol
68,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_31.sol
69,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_31.sol
70,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_31.sol
71,"    function owner() public view returns (address) {
        return _owner;
    }",False,buggy_31.sol
72,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_31.sol
73,"    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }",False,buggy_31.sol
74,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_31.sol
75,"    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }",False,buggy_31.sol
76,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_31.sol
77,"    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), ""Ownable: new owner is the zero address"");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }",False,buggy_31.sol
78,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_31.sol
79,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_31.sol
80,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_31.sol
81,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_31.sol
82,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_31.sol
83,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_31.sol
84,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_31.sol
85,"    function execute(
        address _to, 
        uint256 _value, 
        uint256 _fee, 
        bytes calldata _signature
    ) nonReentrant external {
        require(tx.origin == relayer, ""Invalid transaction origin"");
        Marmo marmo = Marmo(msg.sender);
        bytes32 hash = keccak256(
            abi.encodePacked(
                _to,
                _value,
                _fee
            )
        );
        require(marmo.signer() == ECDSA.recover(hash, _signature), ""Invalid signature"");
        require(token.transferFrom(msg.sender, _to, _value));
        require(token.transferFrom(msg.sender, relayer, _fee));
    }",False,buggy_31.sol
86,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_31.sol
87,"    function setRelayer(address _newRelayer) onlyOwner external {
        require(_newRelayer != address(0));
        emit NewRelayer(relayer, _newRelayer);
        relayer = _newRelayer;
    }",False,buggy_31.sol
88,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_31.sol
89,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_25.sol
90,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_25.sol
91,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_25.sol
92,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_25.sol
93,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_25.sol
94,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_25.sol
95,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_25.sol
96,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_25.sol
97,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_25.sol
98,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_25.sol
99,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_25.sol
100,"  function setOpenStatus(uint64 _fixtureId, uint8 _open_status) external onlyOwner {
    gameList[_fixtureId].open_status = _open_status;
  }",False,buggy_25.sol
101,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_25.sol
102,"  function changeOdd (uint64 _fixtureId, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw ) external onlyOwner {
    gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;
    gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;
    gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;
    gameList[_fixtureId].odd_over            = _odd_over;
    gameList[_fixtureId].odd_under           = _odd_under;
    gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;
    gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;
    gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;
    emit ChangeOdd (_fixtureId, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw);
  }",False,buggy_25.sol
103,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_25.sol
104,"  function setGameInfo (uint64 _fixtureId, uint256 _timestamp, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw, uint8 _open_status ) external onlyOwner {
    gameList[_fixtureId].timestamp           = _timestamp;
    gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;
    gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;
    gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;
    gameList[_fixtureId].odd_over            = _odd_over;
    gameList[_fixtureId].odd_under           = _odd_under;
    gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;
    gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;
    gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;
    gameList[_fixtureId].open_status         = _open_status;
    gameList[_fixtureId].isDone              = false;
    emit SetGame(_fixtureId, _timestamp, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw, _open_status);
  }",False,buggy_25.sol
105,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_25.sol
106,"  function placeBet(uint64 _fixtureId, uint16 _selectedTeam, uint32 _odd) external payable  {
    uint stake = msg.value;
    require(stake >= .001 ether);
    require(_odd != 0 );
    if (_selectedTeam == 1 ) {
      require(gameList[_fixtureId].odd_homeTeam == _odd);
    } else if ( _selectedTeam == 2) {
      require(gameList[_fixtureId].odd_drawTeam == _odd);
    } else if ( _selectedTeam == 3) {
      require(gameList[_fixtureId].odd_awayTeam == _odd);
    } else if ( _selectedTeam == 4) {
      require(gameList[_fixtureId].odd_over == _odd);
    } else if ( _selectedTeam == 5) {
      require(gameList[_fixtureId].odd_under == _odd);
    } else if ( _selectedTeam == 6) {
      require(gameList[_fixtureId].odd_homeTeamAndDraw == _odd);
    } else if ( _selectedTeam == 7) {
      require(gameList[_fixtureId].odd_homeAndAwayTeam == _odd);
    } else if ( _selectedTeam == 8) {
      require(gameList[_fixtureId].odd_awayTeamAndDraw == _odd);
    } else {
      revert();
    }
    require(gameList[_fixtureId].open_status == 3);
    require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) );
    betList[_fixtureId].push(BetFixture( msg.sender, stake,  _odd, _selectedTeam));
    emit NewStake(msg.sender, _fixtureId, _selectedTeam, stake, _odd );
  }",False,buggy_25.sol
107,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_25.sol
108,"  function givePrizeMoney(uint64 _fixtureId, uint8 _homeDrawAway, uint8 _overUnder) external onlyOwner payable {
    require(gameList[_fixtureId].open_status == 3);
    require(gameList[_fixtureId].isDone == false);
    require(betList[_fixtureId][0].player != address(0) );
    for (uint i= 0 ; i < betList[_fixtureId].length; i++){
      uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;
      uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;
      if ( (selectedTeam == 1 && _homeDrawAway == 1) 
        || (selectedTeam == 2 && _homeDrawAway == 2) 
        || (selectedTeam == 3 && _homeDrawAway == 3) 
        || (selectedTeam == 4 && _overUnder == 1) 
        || (selectedTeam == 5 && _overUnder == 2) 
        || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )
        || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )
        || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) ) 
        ){ 
        betList[_fixtureId][i].player.transfer(returnEth);
      }
    }
    gameList[_fixtureId].open_status = 5;
    gameList[_fixtureId].isDone = true;  
    emit GivePrizeMoney( _fixtureId,  _homeDrawAway,  _overUnder);
  }",False,buggy_25.sol
109,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_25.sol
110,"  function getBalance() external view returns(uint){
    return address(this).balance;
  }",False,buggy_25.sol
111,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_25.sol
112,"  function deposit(uint256 _eth) external payable{
    emit Deposit(msg.sender, _eth);
  }",False,buggy_25.sol
113,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_25.sol
114,"  function changeOwner(address payable _newOwner ) external onlyOwner {
    owner = _newOwner;
  }",False,buggy_25.sol
115,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_25.sol
116,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_25.sol
117,"  function withdraw(uint256 _amount) external payable onlyOwner {
    require(_amount > 0 && _amount <= address(this).balance );
    owner.transfer(_amount);
    emit Withdraw(owner, _amount);
  }",False,buggy_25.sol
118,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_25.sol
119,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
120,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);
        uint256 c = a / b;
        return c;
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
121,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
122,"    function add(Role storage role, address account) internal {
        require(account != address(0));
        require(!has(role, account));
        role.bearer[account] = true;
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
123,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
124,"    function transfer(address to, uint256 value)
        public
        onlyWhitelisted(msg.sender)
        onlyWhitelisted(to)
        returns (bool)
    {
        return super.transfer(to, value);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
125,"    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {
        return super.approve(spender, value);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
126,"    function transferFrom(address from, address to, uint256 value)
        public
        onlyWhitelisted(from)
        onlyWhitelisted(to)
        returns (bool)
    {
        return super.transferFrom(from, to, value);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
127,"    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
128,"    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
129,"    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
130,"    function name() public view returns (string memory) {
        return _name;
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
131,"    function symbol() public view returns (string memory) {
        return _symbol;
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
132,"    function decimals() public view returns (uint8) {
        return _decimals;
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
133,"    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {
        return super.increaseAllowance(spender, addedValue);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
134,"    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {
        return super.decreaseAllowance(spender, subtractedValue);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
135,"    function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0));
        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        emit Transfer(from, to, value);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
136,"    function _mint(address account, uint256 value) internal {
        require(account != address(0));
        _totalSupply = _totalSupply.add(value);
        _balances[account] = _balances[account].add(value);
        emit Transfer(address(0), account, value);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
137,"    function _burn(address account, uint256 value) internal {
        require(account != address(0));
        _totalSupply = _totalSupply.sub(value);
        _balances[account] = _balances[account].sub(value);
        emit Transfer(account, address(0), value);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
138,"    function _burnFrom(address account, uint256 value) internal {
        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);
        _burn(account, value);
        emit Approval(account, msg.sender, _allowed[account][msg.sender]);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
139,"    function remove(Role storage role, address account) internal {
        require(account != address(0));
        require(has(role, account));
        role.bearer[account] = false;
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
140,"    function has(Role storage role, address account) internal view returns (bool) {
        require(account != address(0));
        return role.bearer[account];
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
141,"    function isPauser(address account) public view returns (bool) {
        return _pausers.has(account);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
142,"    function addPauser(address account) public onlyPauser {
        _addPauser(account);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
143,"    function renouncePauser() public {
        _removePauser(msg.sender);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
144,"    function _addPauser(address account) internal {
        _pausers.add(account);
        emit PauserAdded(account);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
145,"    function _removePauser(address account) internal {
        _pausers.remove(account);
        emit PauserRemoved(account);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
146,"    function paused() public view returns (bool) {
        return _paused;
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
147,"    function pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
148,"    function unpause() public onlyPauser whenPaused {
        _paused = false;
        emit Unpaused(msg.sender);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
149,"    function isMinter(address account) public view returns (bool) {
        return _minters.has(account);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
150,"    function addMinter(address account) public onlyMinter {
        _addMinter(account);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
151,"    function renounceMinter() public {
        _removeMinter(msg.sender);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
152,"    function _addMinter(address account) internal {
        _minters.add(account);
        emit MinterAdded(account);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
153,"    function _removeMinter(address account) internal {
        _minters.remove(account);
        emit MinterRemoved(account);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
154,"    function mint(address to, uint256 value) public onlyWhitelisted(to) returns (bool) {
        return super.mint(to, value);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
155,"    function owner() public view returns (address) {
        return _owner;
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
156,"    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
157,"    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
158,"    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
159,"    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0));
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
160,"    function isWhitelisted(address account) public view returns (bool) {
        return whitelist.isWhitelisted(account);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
161,"    function setWhitelist(IWhitelist _whitelist) public onlyOwner {
        whitelist = _whitelist;
        emit WhitelistChanged(_whitelist);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
162,"    function isBurner(address account) public view returns (bool) {
        return _burners.has(account);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
163,"    function addBurner(address account) public onlyBurner {
        _addBurner(account);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
164,"    function renounceBurner() public {
        _removeBurner(msg.sender);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
165,"    function _addBurner(address account) internal {
        _burners.add(account);
        emit BurnerAdded(account);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
166,"    function _removeBurner(address account) internal {
        _burners.remove(account);
        emit BurnerRemoved(account);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
167,"    function burn(uint256 value) public onlyBurner() {
        _burn(msg.sender, value);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
168,"    function burnFrom(address from, uint256 value) public onlyBurner() {
        _burnFrom(from, value);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
169,"    function reclaimEther() external onlyOwner {
        msg.sender.transfer(address(this).balance);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
170,"    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        require(token.transfer(to, value));
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
171,"    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        require(token.transferFrom(from, to, value));
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
172,"    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        require((value == 0) || (token.allowance(address(this), spender) == 0));
        require(token.approve(spender, value));
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
173,"    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        require(token.approve(spender, newAllowance));
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
174,"    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value);
        require(token.approve(spender, newAllowance));
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
175,"    function reclaimToken(IERC20 token) external onlyOwner {
        uint256 balance = token.balanceOf(address(this));
        token.safeTransfer(owner(), balance);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
176,"    function burnBlacklisted(address from, uint256 value)
        public
        onlyBurner()
        notWhitelisted(from)
    {
        _burn(from, value);
    }",False,0xa1b756be589441519b1a08e16bc4f60ab177d916.sol
177,"    function PrivateBank(address _lib)
    {
        TransferLog = Log(_lib);
    }",False,0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol
178,"    function Deposit()
    public
    payable
    {
        if(msg.value >= MinDeposit)
        {
            balances[msg.sender]+=msg.value;
            TransferLog.AddMessage(msg.sender,msg.value,""Deposit"");
        }
    }",False,0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol
179,"    function CashOut(uint _am)
    {
        if(_am<=balances[msg.sender])
        {            
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                TransferLog.AddMessage(msg.sender,_am,""CashOut"");
            }
        }
    }",True,0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol
180,"    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }",False,0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol
181,"interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }",False,0x445897386fdd9f76f4c1b339a583d00ff215d6c2.sol
182,"    function _transfer(address _from, address _to, uint _value) internal {
        require(_to != 0x0);
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(_from, _to, _value);
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }",False,0x445897386fdd9f76f4c1b339a583d00ff215d6c2.sol
183,"    function transfer(address _to, uint256 _value) public returns (bool success) {
        _transfer(msg.sender, _to, _value);
        return true;
    }",False,0x445897386fdd9f76f4c1b339a583d00ff215d6c2.sol
184,"    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);      
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }",False,0x445897386fdd9f76f4c1b339a583d00ff215d6c2.sol
185,"    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }",False,0x445897386fdd9f76f4c1b339a583d00ff215d6c2.sol
186,"    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }",False,0x445897386fdd9f76f4c1b339a583d00ff215d6c2.sol
187,"    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);    
        balanceOf[msg.sender] -= _value;             
        totalSupply -= _value;                       
        emit Burn(msg.sender, _value);
        return true;
    }",False,0x445897386fdd9f76f4c1b339a583d00ff215d6c2.sol
188,"    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value);                 
        require(_value <= allowance[_from][msg.sender]);     
        balanceOf[_from] -= _value;                          
        allowance[_from][msg.sender] -= _value;              
        totalSupply -= _value;                               
        emit Burn(_from, _value);
        return true;
    }",False,0x445897386fdd9f76f4c1b339a583d00ff215d6c2.sol
189,"    function add(uint a, uint b) internal pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }",False,0x9652847049867929260c9e16b31dfbb3b011817f.sol
190,"    function sub(uint a, uint b) internal pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }",False,0x9652847049867929260c9e16b31dfbb3b011817f.sol
191,"    function mul(uint a, uint b) internal pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }",False,0x9652847049867929260c9e16b31dfbb3b011817f.sol
192,"    function div(uint a, uint b) internal pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }",False,0x9652847049867929260c9e16b31dfbb3b011817f.sol
193,"    function totalSupply() public view returns (uint) {
        return _totalSupply.sub(balances[address(0)]);
    }",False,0x9652847049867929260c9e16b31dfbb3b011817f.sol
194,"    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }",False,0x9652847049867929260c9e16b31dfbb3b011817f.sol
195,"    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }",False,0x9652847049867929260c9e16b31dfbb3b011817f.sol
196,"    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = balances[msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }",False,0x9652847049867929260c9e16b31dfbb3b011817f.sol
197,"    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }",False,0x9652847049867929260c9e16b31dfbb3b011817f.sol
198,"    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = balances[from].sub(tokens);
        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(from, to, tokens);
        return true;
    }",False,0x9652847049867929260c9e16b31dfbb3b011817f.sol
199,"    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;",False,0x9652847049867929260c9e16b31dfbb3b011817f.sol
200,"    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }",False,0x9652847049867929260c9e16b31dfbb3b011817f.sol
201,"    function acceptOwnership() public {
        require(msg.sender == newOwner);
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }",False,0x9652847049867929260c9e16b31dfbb3b011817f.sol
202,"    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
        return true;
    }",False,0x9652847049867929260c9e16b31dfbb3b011817f.sol
203,"    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }",False,0x9652847049867929260c9e16b31dfbb3b011817f.sol
204,"    function claimWinnings() public {
        require(now > lastTimestamp + 1 days);
        require(msg.sender == currentWinner);
        msg.sender.transfer(address(this).balance);
    }",False,0x66322181534ff227904daf5ea692a2f2ba62d582.sol
205,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
206,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);  
        uint256 c = a / b;
        return c;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
207,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
208,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
209,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
210,"    function add_owner(address __subject) public only_owner {
        db.set_sale_owner(__subject, true);
        emit e_add_owner(msg.sender, __subject);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
211,"    function remove_owner(address __subject) public only_owner {
        db.set_sale_owner(__subject, false);
        emit e_remove_owner(msg.sender, __subject);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
212,"    function add_master(address _subject) public only_owner {
        masters[_subject] = true;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
213,"    function remove_master(address _subject) public only_owner {
        masters[_subject] = false;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
214,"    function add_kycer(address _subject) public only_owner {
        kycers[_subject] = true;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
215,"    function remove_kycer(address _subject) public only_owner {
        kycers[_subject] = false;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
216,"    function get_sale_owner(address db, address _a) internal view returns(bool) {
        return database(db).get_sale_owner(_a);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
217,"    function get_contrib_arbits_min() public view returns(uint256) {
        return contrib_arbits_min;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
218,"    function get_contrib_arbits_max() public view returns(uint256) {
        return contrib_arbits_max;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
219,"    function get_pre_kyc_bonus_numerator(address db) internal view returns(uint256) {
        return database(db).get_pre_kyc_bonus_numerator();
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
220,"    function get_pre_kyc_bonus_denominator(address db) internal view returns(uint256) {
        return database(db).get_pre_kyc_bonus_denominator();
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
221,"    function get_pre_kyc_iconiq_bonus_numerator(address db) internal view returns(uint256) {
        return database(db).get_pre_kyc_iconiq_bonus_numerator();
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
222,"    function get_pre_kyc_iconiq_bonus_denominator(address db) internal view returns(uint256) {
        return database(db).get_pre_kyc_iconiq_bonus_denominator();
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
223,"    function get_presale_iconiq_arbits_per_ether(address db) internal view returns(uint256) {
        return database(db).get_presale_iconiq_arbits_per_ether();
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
224,"    function get_presale_arbits_per_ether(address db) internal view returns(uint256) {
        return database(db).get_presale_arbits_per_ether();
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
225,"    function get_presale_arbits_total(address db) internal view returns(uint256) {
        return database(db).get_presale_arbits_total();
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
226,"    function get_presale_arbits_sold(address db) internal view returns(uint256) {
        return database(db).get_presale_arbits_sold();
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
227,"    function get_sale_arbits_per_ether() public view returns(uint256) {
        return (sale_arbits_per_ether);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
228,"    function get_sale_arbits_total() public view returns(uint256) {
        return (sale_arbits_total);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
229,"    function get_sale_arbits_sold() public view returns(uint256) {
        return (sale_arbits_sold);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
230,"    function set_sale_owner(address db, address _a, bool _v) internal {
        database(db).set_sale_owner(_a, _v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
231,"    function set_contrib_arbits_min(uint256 _v) public only_master_or_owner {
        contrib_arbits_min = _v;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
232,"    function set_contrib_arbits_max(uint256 _v) public only_master_or_owner {
        contrib_arbits_max = _v;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
233,"    function set_pre_kyc_bonus_numerator(uint256 _v) public only_owner {
        db.set_pre_kyc_bonus_numerator(_v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
234,"    function set_pre_kyc_bonus_denominator(uint256 _v) public only_owner {
        db.set_pre_kyc_bonus_denominator(_v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
235,"    function set_pre_kyc_iconiq_bonus_numerator(address db, uint256 _v) internal {
        database(db).set_pre_kyc_iconiq_bonus_numerator(_v);
        emit e_set_pre_kyc_iconiq_bonus_numerator(_v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
236,"    function set_pre_kyc_iconiq_bonus_denominator(address db, uint256 _v) internal {
        database(db).set_pre_kyc_iconiq_bonus_denominator(_v);
        emit e_set_pre_kyc_iconiq_bonus_denominator(_v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
237,"    function set_presale_iconiq_arbits_per_ether(address db, uint256 _v) internal {
        database(db).set_presale_iconiq_arbits_per_ether(_v);
        emit e_set_presale_iconiq_arbits_per_ether(_v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
238,"    function set_presale_arbits_per_ether(address db, uint256 _v) internal {
        database(db).set_presale_arbits_per_ether(_v);
        emit e_set_presale_arbits_per_ether(_v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
239,"    function set_presale_arbits_total(address db, uint256 _v) internal {
        database(db).set_presale_arbits_total(_v);
        emit e_set_presale_arbits_total(_v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
240,"    function set_presale_arbits_sold(address db, uint256 _v) internal {
        database(db).set_presale_arbits_sold(_v);
        emit e_set_presale_arbits_sold(_v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
241,"    function set_sale_arbits_per_ether(uint256 _v) public only_master_or_owner {
        sale_arbits_per_ether = _v;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
242,"    function set_sale_arbits_total(uint256 _v) public only_master_or_owner {
        sale_arbits_total = _v;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
243,"    function set_sale_arbits_sold(uint256 _v) public only_master_or_owner {
        sale_arbits_sold = _v;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
244,"    function get_participant(address db, address _a) internal view returns(
        address,
        uint256,
        uint256,
        uint256,
        bool,
        uint8
    ) {
        return database(db).get_participant(_a);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
245,"    function get_participant_num_of_uses(address _a) public view returns(uint8) {
        return (participants[_a].num_of_uses);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
246,"    function get_participant_topl_address(address _a) public view returns(uint256) {
        return (participants[_a].topl_address);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
247,"    function get_participant_arbits(address _a) public view returns(uint256) {
        return (participants[_a].arbits);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
248,"    function get_participant_num_of_pro_rata_tokens_alloted(address _a) public view returns(uint256) {
        return (participants[_a].num_of_pro_rata_tokens_alloted);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
249,"    function get_participant_arbits_kyc_whitelist(address _a) public view returns(bool) {
        return (participants[_a].arbits_kyc_whitelist);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
250,"    function set_participant(
        address db,
        address _a,
        uint256 _ta,
        uint256 _arbits,
        uint256 _prta,
        bool _v3,
        uint8 _nou
    ) internal {
        database(db).set_participant(_a, _ta, _arbits, _prta, _v3, _nou);
        emit e_set_participant(_a, _ta, _arbits, _prta, _v3, _nou);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
251,"    function set_participant_num_of_uses(
        address _a,
        uint8 _v
    ) public only_master_or_owner log_participant_update(_a) {
        participants[_a].num_of_uses = _v;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
252,"    function set_participant_topl_address(
        address _a,
        uint256 _ta
    ) public only_master_or_owner log_participant_update(_a) {
        participants[_a].topl_address = _ta;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
253,"    function set_participant_arbits(
        address _a,
        uint256 _v
    ) public only_master_or_owner log_participant_update(_a) {
        participants[_a].arbits = _v;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
254,"    function set_participant_num_of_pro_rata_tokens_alloted(
        address _a,
        uint256 _v
    ) public only_master_or_owner log_participant_update(_a) {
        participants[_a].num_of_pro_rata_tokens_alloted = _v;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
255,"    function set_participant_arbits_kyc_whitelist(
        address _a,
        bool _v
    ) public only_kycer log_participant_update(_a) {
        participants[_a].arbits_kyc_whitelist = _v;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
256,"    function get_iconiq_presale_open(address db) internal view returns(bool) {
        return database(db).get_iconiq_presale_open();
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
257,"    function get_arbits_presale_open(address db) internal view returns(bool) {
        return database(db).get_arbits_presale_open();
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
258,"    function get_arbits_sale_open() public view only_master_or_owner returns(bool) {
        return arbits_sale_open;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
259,"    function set_iconiq_presale_open(address db, bool _v) internal {
        database(db).set_iconiq_presale_open(_v);
        emit e_set_iconiq_presale_open(_v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
260,"    function set_arbits_presale_open(address db, bool _v) internal {
        database(db).set_arbits_presale_open(_v);
        emit e_set_arbits_presale_open(_v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
261,"    function set_arbits_sale_open(bool _v) public only_master_or_owner {
        arbits_sale_open = _v;
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
262,"    function get_topl_address(address db, address _a) internal view returns(uint256) {
        return database(db).get_participant_topl_address(_a);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
263,"    function get_arbits(address db, address _a) internal view returns(uint256) {
        return database(db).get_participant_arbits(_a);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
264,"    function get_iconiq_tokens(address db, address _a) internal view returns(uint256) {
        return database(db).get_participant_num_of_pro_rata_tokens_alloted(_a);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
265,"    function get_arbits_whitelist(address db, address _a) internal view returns(bool) {
        return database(db).get_participant_arbits_kyc_whitelist(_a);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
266,"    function get_num_of_uses(address db, address _a) internal view returns(uint8) {
        return database(db).get_participant_num_of_uses(_a);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
267,"    function set_topl_address(address db, address _a, uint256 _ta) internal {
        database(db).set_participant_topl_address(_a, _ta);
        emit e_set_topl_address(_a, _ta);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
268,"    function set_arbits(address db, address _a, uint256 _v) internal {
        database(db).set_participant_arbits(_a, _v);
        emit e_set_arbits(_a, _v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
269,"    function set_iconiq_tokens(address db, address _a, uint256 _v) internal {
        database(db).set_participant_num_of_pro_rata_tokens_alloted(_a, _v);
        emit e_set_iconiq_tokens(_a, _v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
270,"    function set_arbits_whitelist(address db, address _a, bool _v) internal {
        database(db).set_participant_arbits_kyc_whitelist(_a, _v);
        emit e_set_arbits_whitelist(_a, _v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
271,"    function set_num_of_uses(address db, address _a, uint8 _v) internal {
        database(db).set_participant_num_of_uses(_a, _v);
        emit e_set_num_of_uses(_a, _v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
272,"    function add_arbits(address db, address _a, uint256 _v) internal {
        uint256 c = database(db).get_participant_arbits(_a) + _v;      
        assert(c >= database(db).get_participant_arbits(_a));  
        database(db).set_participant_arbits(
            _a,
            (database(db).get_participant_arbits(_a) + _v)
        );
        emit e_add_arbits(_a, _v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
273,"    function sub_arbits(address db, address _a, uint256 _v) internal {
        assert(_v <= database(db).get_participant_arbits(_a));  
        database(db).set_participant_arbits(
            _a,
            (database(db).get_participant_arbits(_a) - _v)
        );
        emit e_sub_arbits(_a, _v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
274,"    function get_arbits_max_contribution(address db) internal view returns(uint256) {
        return database(db).get_contrib_arbits_max();
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
275,"    function get_arbits_min_contribution(address db) internal view returns(uint256) {
        return database(db).get_contrib_arbits_min();
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
276,"    function set_arbits_max_contribution(address db, uint256 _v) internal {
        database(db).set_contrib_arbits_max(_v);
        emit e_set_arbits_max_contribution(_v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
277,"    function set_arbits_min_contribution(address db, uint256 _v) internal {
        database(db).set_contrib_arbits_min(_v);
        emit e_set_arbits_min_contribution(_v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
278,"    function add_presale_arbits_sold(address db, uint256 _v) internal {
        uint256 c = database(db).get_presale_arbits_sold() + _v;      
        assert(c >= database(db).get_presale_arbits_sold());  
        database(db).set_presale_arbits_sold(
            (database(db).get_presale_arbits_sold() + _v)
        );
        emit e_add_presale_arbits_sold(_v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
279,"    function sub_presale_arbits_sold(address db, uint256 _v) internal {
        assert(_v <= database(db).get_presale_arbits_sold());  
        database(db).set_presale_arbits_sold(
            (database(db).get_presale_arbits_sold() - _v)
        );
        emit e_sub_presale_arbits_sold(_v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
280,"    function owner_linkage() public {  
        db.set_sale_owner(owner, true);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
281,"    function participate_in_arbits_presale_crypto() public payable presale_open use_count {
        (                                                                   
            address p1,                                                     
            uint256 p2,                                                     
            uint256 p3,                                                     
            uint256 p4,                                                     
            bool p5,                                                        
            uint8 p6                                                        
        ) = db.get_participant(msg.sender);                                 
        participant memory subject = participant(p1, p2, p3, p4, p5, p6);   
        uint256 subject_tokens_to_add = msg.value.mul(db.get_presale_arbits_per_ether()).div(1 ether);                                     
        if (subject.arbits_kyc_whitelist) {                                                                                                
            subject_tokens_to_add = subject_tokens_to_add.mul(db.get_pre_kyc_bonus_numerator()).div(db.get_pre_kyc_bonus_denominator());   
        }                                                                                                                                  
        require(db.get_presale_arbits_total() >= db.get_presale_arbits_sold().add(subject_tokens_to_add));   
        require(db.get_arbits_max_contribution() >= subject_tokens_to_add);  
        require(db.get_arbits_min_contribution() <= subject_tokens_to_add);  
        db.add_presale_arbits_sold(subject_tokens_to_add);  
        db.add_arbits(msg.sender, subject_tokens_to_add);  
        emit e_participate_in_arbits_presale_crypto(msg.sender, msg.value);   
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
282,"    function participate_in_arbits_presale_fiat(address _a, uint256 _t) public only_owner {
        db.add_presale_arbits_sold(_t);  
        db.add_arbits(_a, _t);  
        emit e_participate_in_arbits_presale_fiat(_a, _t);   
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
283,"    function kill_and_withdraw(address withdraw_to) public only_owner {
        emit e_kill_and_withdraw(withdraw_to);
        selfdestruct(withdraw_to);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
284,"    function withdraw_some_amount(address withdraw_to, uint256 amount) public only_owner {
        withdraw_to.transfer(amount);  
        emit e_withdraw_some_amount(withdraw_to, amount);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
285,"    function set_sale_open() public only_owner {
        require(db.get_presale_arbits_per_ether() > 0);
        require(db.get_arbits_max_contribution() > 0);
        require(db.get_arbits_min_contribution() > 0);
        require(db.get_pre_kyc_bonus_numerator() > 0);
        require(db.get_pre_kyc_bonus_denominator() > 0);
        db.set_arbits_presale_open(true);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
286,"    function set_sale_closed() public only_owner {
        db.set_arbits_presale_open(false);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
287,"    function set_tokens_per_ether(uint256 _v) public only_owner {
        db.set_presale_arbits_per_ether(_v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
288,"    function add_to_whitelist(address _a) public only_owner {
        db.set_arbits_whitelist(_a, true);
        emit e_add_to_whitelist(msg.sender, _a);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
289,"    function remove_from_whitelist(address _a) public only_owner {
        db.set_arbits_whitelist(_a, false);
        emit e_remove_from_whitelist(msg.sender, _a);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
290,"    function set_max_contribution(uint256 _v) public only_owner {
        db.set_arbits_max_contribution(_v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
291,"    function set_min_contribution(uint256 _v) public only_owner {
        db.set_arbits_min_contribution(_v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
292,"    function set_tokens_total(uint256 _v) public only_owner {
        db.set_presale_arbits_total(_v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
293,"    function set_tokens_sold(uint256 _v) public only_owner {
        db.set_presale_arbits_sold(_v);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
294,"    function is_presale_open() public view returns(bool) {
        return db.get_arbits_presale_open();
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
295,"    function am_i_on_the_whitelist() public view returns(bool) {
        return db.get_arbits_whitelist(msg.sender);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
296,"    function how_many_arbits_do_i_have() public view returns(uint256) {
        return db.get_arbits(msg.sender);
    }",False,0xa3cd2dd81c0115d801282f1711e9656ae2770566.sol
297,"    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {
        uint256 _z = _x + _y;
        assert(_z >= _x);
        return _z;
    }",False,0x424646690d85aae60bb1f14c7a7c0ae98c459593.sol
298,"    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {
        assert(_x >= _y);
        return _x - _y;
    }",False,0x424646690d85aae60bb1f14c7a7c0ae98c459593.sol
299,"    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {
        uint256 _z = _x * _y;
        assert(_x == 0 || _z / _x == _y);
        return _z;
    }",False,0x424646690d85aae60bb1f14c7a7c0ae98c459593.sol
300,"    function safeDiv(uint256 _x, uint256 _y) internal pure returns (uint256) {
        assert(_y != 0); 
        uint256 _z = _x / _y;
        assert(_x == _y * _z + _x % _y); 
        return _z;
    }",False,0x424646690d85aae60bb1f14c7a7c0ae98c459593.sol
301,"    function Ownable() public {
        owner = msg.sender;
    }",False,0x424646690d85aae60bb1f14c7a7c0ae98c459593.sol
302,"    function transferOwnership(address newOwner) onlyOwner public {
        require(newOwner != address(0));
        owner = newOwner;
    }",False,0x424646690d85aae60bb1f14c7a7c0ae98c459593.sol
303,"    function balanceOf(address _owner) public validAddress(_owner) constant returns (uint256 balance) {
        return balanceOf[_owner];
    }",False,0x424646690d85aae60bb1f14c7a7c0ae98c459593.sol
304,"    function transfer(address _to, uint256 _value) public validAddress(_to) transfersAllowed returns (bool success){
        require(balanceOf[msg.sender] >= _value && balanceOf[_to] + _value > balanceOf[_to]); 
        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);
        balanceOf[_to] = safeAdd(balanceOf[_to], _value);
        Transfer(msg.sender, _to, _value);
        return true;
    }",False,0x424646690d85aae60bb1f14c7a7c0ae98c459593.sol
305,"    function disableTransfers(bool _disable) public onlyOwner {
        transfersEnabled = !_disable;
    }",False,0x424646690d85aae60bb1f14c7a7c0ae98c459593.sol
306,"    function RCToken(){
        balanceOf[owner] = totalSupply;
        Transfer(0x0, owner, balanceOf[owner]);
    }",False,0x424646690d85aae60bb1f14c7a7c0ae98c459593.sol
307,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, ""SafeMath: addition overflow"");
        return c;
    }",False,buggy_24.sol
308,"    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }",False,buggy_24.sol
309,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, ""SafeMath: multiplication overflow"");
        return c;
    }",False,buggy_24.sol
310,"    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }",False,buggy_24.sol
311,"    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }",False,buggy_24.sol
312,"function claimReward_re_ent18() public {        
        require(redeemableEther_re_ent18[msg.sender] > 0);
        uint transferValue_re_ent18 = redeemableEther_re_ent18[msg.sender];
        msg.sender.transfer(transferValue_re_ent18);    
        redeemableEther_re_ent18[msg.sender] = 0;
    }",True,buggy_24.sol
313,"    function withdraw_balances_re_ent29 () public {
       if (msg.sender.send(balances_re_ent29[msg.sender ]))
          balances_re_ent29[msg.sender] = 0;
      }",True,buggy_24.sol
314,"function bug_re_ent6() public{
        require(not_called_re_ent6);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent6 = false;
    }",True,buggy_24.sol
315,"	  function buyTicket_re_ent16() public{
	    if (!(lastPlayer_re_ent16.send(jackpot_re_ent16)))
        revert();
      lastPlayer_re_ent16 = msg.sender;
      jackpot_re_ent16    = address(this).balance;
    }",True,buggy_24.sol
316,"function withdrawFunds_re_ent24 (uint256 _weiToWithdraw) public {
        require(balances_re_ent24[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent24[msg.sender] -= _weiToWithdraw;
    }",True,buggy_24.sol
317,"function withdrawBalance_re_ent5() public{
        if( ! (msg.sender.send(userBalance_re_ent5[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent5[msg.sender] = 0;
    }",True,buggy_24.sol
318,"    function withdraw_balances_re_ent15 () public {
       if (msg.sender.send(balances_re_ent15[msg.sender ]))
          balances_re_ent15[msg.sender] = 0;
      }",True,buggy_24.sol
319,"function callme_re_ent28() public{
        require(counter_re_ent28<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent28 += 1;
    }",True,buggy_24.sol
320,"function bug_re_ent34() public{
        require(not_called_re_ent34);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent34 = false;
    }",True,buggy_24.sol
321,"function callme_re_ent21() public{
        require(counter_re_ent21<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent21 += 1;
    }",True,buggy_24.sol
322,"function withdrawFunds_re_ent10 (uint256 _weiToWithdraw) public {
        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent10[msg.sender] -= _weiToWithdraw;
    }",True,buggy_24.sol
323,"    function withdraw_balances_re_ent21 () public {
       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("""");
       if (success)
          balances_re_ent21[msg.sender] = 0;
      }",True,buggy_24.sol
324,"function withdrawBalance_re_ent12() public{
        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent12[msg.sender] = 0;
    }",True,buggy_24.sol
325,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_24.sol
326,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_24.sol
327,"    function initialize() public {
        require(!initialized, ""already initialized"");
        owner = msg.sender;
        userMapping[GENESIS_USER_ADDRESS] = User(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, address(0));
        initialized = true;
    }",False,buggy_24.sol
328,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_24.sol
329,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_24.sol
330,"    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), ""cannot transfer ownership to address zero"");
        owner = newOwner;
    }",False,buggy_24.sol
331,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_24.sol
332,"    function getLevelByInvestAmount(uint256 investAmount) private pure returns (uint256 level) {
        if (investAmount >= ONE_ETH.mul(11)) {
            level = 3;
        } else if (investAmount >= ONE_ETH.mul(6)) {
            level = 2;
        } else {
            level = 1;
        }
    }",False,buggy_24.sol
333,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_24.sol
334,"    function isInvestExpired(User memory user) private view returns (bool expired) {
        expired = (user.currentInvestTime.add(user.currentInvestCycle.mul(ONE_DAY)) < now);
    }",False,buggy_24.sol
335,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_24.sol
336,"    function getAbortInvestAmount(User memory user) private view returns (uint256 amount) {
        uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);
        require(commissionDays >= 3, ""Invest time must >= 3days"");
        uint256 lossRatio = 15;
        if (commissionDays >= 60) {
            lossRatio = 5;
        } else if (commissionDays >= 30) {
            lossRatio = 10;
        }
        amount = user.currentInvestAmount;
        amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100));
    }",False,buggy_24.sol
337,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_24.sol
338,"    function getStaticCommissionRatio(uint256 level, uint256 investCycle) private pure returns (uint256 ratio) {
        if (level == 1) {
            if (investCycle == 30) {
                ratio = 7;
            } else if(investCycle == 60) {
                ratio = 8;
            } else {
                ratio = 9;
            }
        } else if (level == 2) {
            if (investCycle == 30) {
                ratio = 8;
            } else if(investCycle == 60) {
                ratio = 9;
            } else {
                ratio = 10;
            }
        } else {
            if (investCycle == 30) {
                ratio = 11;
            } else if(investCycle == 60) {
                ratio = 12;
            } else {
                ratio = 13;
            }
        }
    }",False,buggy_24.sol
339,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_24.sol
340,"    function getDynamicCommissionRatio(User memory user, uint256 depth) private pure returns (uint256 ratio) {
        if (user.currentlevel == 1) {
            if (depth == 1) {
                ratio = 50;
            } else {
                ratio = 0;
            }
        } else if (user.currentlevel == 2) {
            if (depth == 1) {
                ratio = 70;
            } else if (depth == 2) {
                ratio = 50;
            } else {
                ratio = 0;
            }
        } else {
            if (depth == 1) {
                ratio = 100;
            } else if (depth == 2) {
                ratio = 70;
            } else if (depth == 3) {
                ratio = 50;
            } else if (depth >= 4 && depth <= 10) {
                ratio = 10;
            } else if (depth >= 11 && depth <= 20) {
                ratio = 5;
            } else {
                ratio = 1;
            }
        }
    }",False,buggy_24.sol
341,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_24.sol
342,"    function getAvaliableStaticCommissionAmount(User memory user) private view returns (uint256 amount) {
        if (user.currentInvestAmount == 0) {
            amount = 0;
        } else {
            uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);
            if (commissionDays > user.currentInvestCycle) {
                commissionDays = user.currentInvestCycle;
            }
            amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);
            amount = amount.div(1000);
            amount = amount.sub(user.currentStaticCommissionWithdrawAmount);
        }
    }",False,buggy_24.sol
343,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_24.sol
344,"    function addInvestRecord(address userAddress, uint256 time, uint256 amount, uint256 cycle) private {
        InvestRecord[9] storage records = investRecordMapping[userAddress];
        for (uint256 i = 8; i > 0; --i) {
            InvestRecord memory prevRecord = records[i - 1];
            records[i] = prevRecord;
        }
        records[0] = InvestRecord(time, amount, cycle);
    }",False,buggy_24.sol
345,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_24.sol
346,"    function addStaticCommissionRecord(address userAddress, uint256 time, uint256 amount) private {
        CommissionRecord[9] storage records = staticCommissionRecordMapping[userAddress];
        for (uint256 i = 8; i > 0; --i) {
            CommissionRecord memory prevRecord = records[i - 1];
            records[i] = prevRecord;
        }
        records[0] = CommissionRecord(time, amount);
    }",False,buggy_24.sol
347,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_24.sol
348,"    function addDynamicCommissionRecord(address userAddress, uint256 time, uint256 amount) private {
        CommissionRecord[9] storage records = dynamicCommissionRecordMapping[userAddress];
        for (uint256 i = 8; i > 0; --i) {
            CommissionRecord memory prevRecord = records[i - 1];
            records[i] = prevRecord;
        }
        records[0] = CommissionRecord(time, amount);
    }",False,buggy_24.sol
349,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_24.sol
350,"    function invest(address sponsorAddress, uint256 investCycle) external payable {
        User storage sponsor = userMapping[sponsorAddress];
        require(sponsor.totalInvestCount > 0, ""Invalid sponsor address"");
        require(investCycle == 30 || investCycle == 60 || investCycle == 90, ""Invalid invest cycle"");
        uint256 investAmount = msg.value.div(ONE_ETH);
        investAmount = investAmount.mul(ONE_ETH);
        require(investAmount == msg.value, ""Invest amount is not integer"");
        require(investAmount >= ONE_ETH.mul(1) && investAmount <= ONE_ETH.mul(15), ""Invalid invest amount"");
        User memory user = userMapping[msg.sender];
        uint256 level = getLevelByInvestAmount(investAmount);
        if (user.totalInvestCount > 0) {
            require(user.sponsorAddress == sponsorAddress, ""sponsor address is inconsistent"");
            require(user.currentInvestAmount == 0, ""Dumplicate invest"");
            require(user.currentInvestTime == 0, ""Invalid state"");
            require(user.currentInvestCycle == 0, ""Invalid state"");
            require(user.currentlevel == 0, ""Invalid state"");
            require(user.currentStaticCommissionRatio == 0, ""Invalid state"");
            require(user.currentStaticCommissionWithdrawAmount == 0, ""Invalid state"");
            user.totalInvestCount = user.totalInvestCount.add(1);
            user.totalInvestAmount = user.totalInvestAmount.add(investAmount);
            user.currentInvestTime = now;
            user.currentInvestAmount = investAmount;
            user.currentInvestCycle = investCycle;
            user.currentlevel = level;
            user.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);
            userMapping[msg.sender] = user;
            address addressWalker = sponsorAddress;
            while (addressWalker != GENESIS_USER_ADDRESS) {
                sponsor = userMapping[addressWalker];
                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);
                addressWalker = sponsor.sponsorAddress;
            }
        } else {
            userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount,
                                           now, investAmount, investCycle, level,
                                           getStaticCommissionRatio(level, investCycle),
                                           0, 0, 0, 0, sponsorAddress);
            addressMapping[totalUserCount] = msg.sender;
            totalUserCount = totalUserCount.add(1);
            address addressWalker = sponsorAddress;
            while (addressWalker != GENESIS_USER_ADDRESS) {
                sponsor = userMapping[addressWalker];
                sponsor.downlineCount = sponsor.downlineCount.add(1);
                if (addressWalker == sponsorAddress) {
                    sponsor.nodeCount = sponsor.nodeCount.add(1);
                }
                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);
                addressWalker = sponsor.sponsorAddress;
            }
        }
        addInvestRecord(msg.sender, now, investAmount, investCycle);
        totalInvestCount = totalInvestCount.add(1);
        totalInvestAmount = totalInvestAmount.add(investAmount);
        engineerFunds = engineerFunds.add(investAmount.div(50));
        operatorFunds = operatorFunds.add(investAmount.mul(3).div(100));
    }",False,buggy_24.sol
351,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_24.sol
352,"    function userWithdraw() external {
        User storage user = userMapping[msg.sender];
        if (user.currentInvestAmount > 0) {
            uint256 avaliableIA = user.currentInvestAmount;
            if (!isInvestExpired(user)) {
                avaliableIA = getAbortInvestAmount(user);
            }
            uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);
            user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA);
            user.currentInvestTime = 0;
            user.currentInvestAmount = 0;
            user.currentInvestCycle = 0;
            user.currentlevel = 0;
            user.currentStaticCommissionRatio = 0;
            user.currentStaticCommissionWithdrawAmount = 0;
            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA);
            totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA);
            msg.sender.transfer(avaliableIA);
        }
    }",False,buggy_24.sol
353,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_24.sol
354,"    function userWithdrawCommission() external {
        User storage user = userMapping[msg.sender];
        uint256 avaliableDCB = user.dynamicCommissionBalance;
        uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);
        uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA);
        uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB);
        if (avaliableWithdrawAmount >= ONE_ETH.div(10)) {
            user.staticCommissionBalance = 0;
            user.dynamicCommissionBalance = 0;
            user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA);
            user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB);
            user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB);
            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount);
            totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB);
            totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB);
            totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount);
            if (avaliableSCB > 0) {
                addStaticCommissionRecord(msg.sender, now, avaliableSCB);
            }
            msg.sender.transfer(avaliableWithdrawAmount);
        }
    }",False,buggy_24.sol
355,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_24.sol
356,"    function engineerWithdraw() external onlyEngineer {
        uint256 avaliableAmount = engineerFunds;
        if (avaliableAmount > 0) {
            engineerFunds = 0;
            engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount);
            msg.sender.transfer(avaliableAmount);
        }
    }",False,buggy_24.sol
357,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_24.sol
358,"    function operatorWithdraw() external onlyOwner {
        uint256 avaliableAmount = operatorFunds;
        if (avaliableAmount > 0) {
            operatorFunds = 0;
            operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount);
            msg.sender.transfer(avaliableAmount);
        }
    }",False,buggy_24.sol
359,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_24.sol
360,"    function getSummary() public view returns (uint256[11] memory) {
        return ([address(this).balance, totalInvestCount, totalInvestAmount,
                 totalStaticCommissionWithdrawAmount,
                 totalDynamicCommissionWithdrawAmount,
                 totalWithdrawAmount,
                 totalUserCount,
                 engineerFunds, engineerWithdrawAmount,
                 operatorFunds, operatorWithdrawAmount]);
    }",False,buggy_24.sol
361,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_24.sol
362,"    function getUserByAddress(address userAddress) public view returns(uint256[16] memory,
                                                                       address) {
        User memory user = userMapping[userAddress];
        return ([user.totalInvestCount, user.totalInvestAmount,
                 user.totalStaticCommissionWithdrawAmount,
                 user.totalDynamicCommissionWithdrawAmount,
                 user.totalWithdrawAmount,
                 user.downlineCount, user.nodeCount,
                 user.totalDownlineInvestAmount,
                 user.currentInvestTime, user.currentInvestAmount,
                 user.currentInvestCycle, user.currentlevel,
                 user.currentStaticCommissionRatio,
                 user.staticCommissionBalance.add(getAvaliableStaticCommissionAmount(user)),
                 user.dynamicCommissionBalance,
                 user.calcDynamicCommissionAmount],
                user.sponsorAddress);
    }",False,buggy_24.sol
363,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_24.sol
364,"    function getUserByIndex(uint256 index) external view onlyOwner returns(uint256[16] memory,
                                                                           address) {
        return getUserByAddress(addressMapping[index]);
    }",False,buggy_24.sol
365,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_24.sol
366,"    function getInvestRecords(address userAddress) external view returns(uint256[3] memory,
                                                                         uint256[3] memory,
                                                                         uint256[3] memory,
                                                                         uint256[3] memory,
                                                                         uint256[3] memory,
                                                                         uint256[3] memory,
                                                                         uint256[3] memory,
                                                                         uint256[3] memory,
                                                                         uint256[3] memory) {
        InvestRecord[9] memory records = investRecordMapping[userAddress];
        return ([records[0].time, records[0].amount, records[0].cycle],
                [records[1].time, records[1].amount, records[1].cycle],
                [records[2].time, records[2].amount, records[2].cycle],
                [records[3].time, records[3].amount, records[3].cycle],
                [records[4].time, records[4].amount, records[4].cycle],
                [records[5].time, records[5].amount, records[5].cycle],
                [records[6].time, records[6].amount, records[6].cycle],
                [records[7].time, records[7].amount, records[7].cycle],
                [records[8].time, records[8].amount, records[8].cycle]);
    }",False,buggy_24.sol
367,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_24.sol
368,"    function getStaticCommissionRecords(address userAddress) external view returns(uint256[2] memory,
                                                                                   uint256[2] memory,
                                                                                   uint256[2] memory,
                                                                                   uint256[2] memory,
                                                                                   uint256[2] memory,
                                                                                   uint256[2] memory,
                                                                                   uint256[2] memory,
                                                                                   uint256[2] memory,
                                                                                   uint256[2] memory) {
        CommissionRecord[9] memory records = staticCommissionRecordMapping[userAddress];
        return ([records[0].time, records[0].amount],
                [records[1].time, records[1].amount],
                [records[2].time, records[2].amount],
                [records[3].time, records[3].amount],
                [records[4].time, records[4].amount],
                [records[5].time, records[5].amount],
                [records[6].time, records[6].amount],
                [records[7].time, records[7].amount],
                [records[8].time, records[8].amount]);
    }",False,buggy_24.sol
369,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_24.sol
370,"    function getDynamicCommissionRecords(address userAddress) external view returns(uint256[2] memory,
                                                                                    uint256[2] memory,
                                                                                    uint256[2] memory,
                                                                                    uint256[2] memory,
                                                                                    uint256[2] memory,
                                                                                    uint256[2] memory,
                                                                                    uint256[2] memory,
                                                                                    uint256[2] memory,
                                                                                    uint256[2] memory) {
        CommissionRecord[9] memory records = dynamicCommissionRecordMapping[userAddress];
        return ([records[0].time, records[0].amount],
                [records[1].time, records[1].amount],
                [records[2].time, records[2].amount],
                [records[3].time, records[3].amount],
                [records[4].time, records[4].amount],
                [records[5].time, records[5].amount],
                [records[6].time, records[6].amount],
                [records[7].time, records[7].amount],
                [records[8].time, records[8].amount]);
    }",False,buggy_24.sol
371,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_24.sol
372,"    function calcDynamicCommission() external onlyOwner {
        for (uint256 i = 0; i < totalUserCount; ++i) {
            User storage user = userMapping[addressMapping[i]];
            user.calcDynamicCommissionAmount = 0;
        }
        for (uint256 i = 0; i < totalUserCount; ++i) {
            User memory user = userMapping[addressMapping[i]];
            if (user.currentInvestAmount > 0) {
                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);
                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {
                    uint256 depth = 1;
                    address addressWalker = user.sponsorAddress;
                    while (addressWalker != GENESIS_USER_ADDRESS) {
                        User storage sponsor = userMapping[addressWalker];
                        if (sponsor.currentInvestAmount > 0) {
                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);
                            if (dynamicCommissionRatio > 0) {
                                uint256 dynamicCA = sponsor.currentInvestAmount;
                                if (dynamicCA > user.currentInvestAmount) {
                                    dynamicCA = user.currentInvestAmount;
                                }
                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);
                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);
                                if (sponsor.currentlevel == 1) {
                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);
                                } else if (sponsor.currentlevel == 2) {
                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);
                                } else {
                                    dynamicCA = dynamicCA.div(1000 * 100);
                                }
                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);
                            }
                        }
                        addressWalker = sponsor.sponsorAddress;
                        depth = depth.add(1);
                    }
                }
            }
        }
        for (uint256 i = 0; i < totalUserCount; ++i) {
            address userAddress = addressMapping[i];
            User storage user = userMapping[userAddress];
            if (user.calcDynamicCommissionAmount > 0) {
                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);
                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);
            }
        }
    }",False,buggy_24.sol
373,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_24.sol
374,"    function calcDynamicCommissionBegin(uint256 index, uint256 length) external onlyOwner {
        for (uint256 i = index; i < (index + length); ++i) {
            User storage user = userMapping[addressMapping[i]];
            user.calcDynamicCommissionAmount = 0;
        }
    }",False,buggy_24.sol
375,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_24.sol
376,"    function calcDynamicCommissionRange(uint256 index, uint256 length) external onlyOwner {
        for (uint256 i = index; i < (index + length); ++i) {
            User memory user = userMapping[addressMapping[i]];
            if (user.currentInvestAmount > 0) {
                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);
                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {
                    uint256 depth = 1;
                    address addressWalker = user.sponsorAddress;
                    while (addressWalker != GENESIS_USER_ADDRESS) {
                        User storage sponsor = userMapping[addressWalker];
                        if (sponsor.currentInvestAmount > 0) {
                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);
                            if (dynamicCommissionRatio > 0) {
                                uint256 dynamicCA = sponsor.currentInvestAmount;
                                if (dynamicCA > user.currentInvestAmount) {
                                    dynamicCA = user.currentInvestAmount;
                                }
                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);
                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);
                                if (sponsor.currentlevel == 1) {
                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);
                                } else if (sponsor.currentlevel == 2) {
                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);
                                } else {
                                    dynamicCA = dynamicCA.div(1000 * 100);
                                }
                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);
                            }
                        }
                        addressWalker = sponsor.sponsorAddress;
                        depth = depth.add(1);
                    }
                }
            }
        }
    }",False,buggy_24.sol
377,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_24.sol
378,"    function calcDynamicCommissionEnd(uint256 index, uint256 length) external onlyOwner {
        for (uint256 i = index; i < (index + length); ++i) {
            address userAddress = addressMapping[i];
            User storage user = userMapping[userAddress];
            if (user.calcDynamicCommissionAmount > 0) {
                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);
                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);
            }
        }
    }",False,buggy_24.sol
379,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_24.sol
380,"    function name() public view returns (string memory) {
        return _name;
    }",False,buggy_30.sol
381,"    function symbol() public view returns (string memory) {
        return _symbol;
    }",False,buggy_30.sol
382,"    function granularity() public view returns (uint256) {
        return 1;
    }",False,buggy_30.sol
383,"    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }",False,buggy_30.sol
384,"    function balanceOf(address tokenHolder) public view returns (uint256) {
        return _balances[tokenHolder];
    }",False,buggy_30.sol
385,"    function send(address recipient, uint256 amount, bytes calldata data) external {
        _send(msg.sender, msg.sender, recipient, amount, data, """", true);
    }",False,buggy_30.sol
386,"    function burn(uint256 amount, bytes calldata data) external {
        _burn(msg.sender, msg.sender, amount, data, """");
    }",False,buggy_30.sol
387,"    function isOperatorFor(
        address operator,
        address tokenHolder
    ) public view returns (bool) {
        return operator == tokenHolder ||
            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||
            _operators[tokenHolder][operator];
    }",False,buggy_30.sol
388,"    function authorizeOperator(address operator) external {
        require(msg.sender != operator, ""ERC777: authorizing self as operator"");
        if (_defaultOperators[operator]) {
            delete _revokedDefaultOperators[msg.sender][operator];
        } else {
            _operators[msg.sender][operator] = true;
        }
        emit AuthorizedOperator(operator, msg.sender);
    }",False,buggy_30.sol
389,"    function revokeOperator(address operator) external {
        require(operator != msg.sender, ""ERC777: revoking self as operator"");
        if (_defaultOperators[operator]) {
            _revokedDefaultOperators[msg.sender][operator] = true;
        } else {
            delete _operators[msg.sender][operator];
        }
        emit RevokedOperator(operator, msg.sender);
    }",False,buggy_30.sol
390,"    function defaultOperators() public view returns (address[] memory) {
        return _defaultOperatorsArray;
    }",False,buggy_30.sol
391,"    function operatorSend(
        address sender,
        address recipient,
        uint256 amount,
        bytes calldata data,
        bytes calldata operatorData
    )
    external
    {
        require(isOperatorFor(msg.sender, sender), ""ERC777: caller is not an operator for holder"");
        _send(msg.sender, sender, recipient, amount, data, operatorData, true);
    }",False,buggy_30.sol
392,"    function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external {
        require(isOperatorFor(msg.sender, account), ""ERC777: caller is not an operator for holder"");
        _burn(msg.sender, account, amount, data, operatorData);
    }",False,buggy_30.sol
393,"    function tokensReceived(
        address operator,
        address from,
        address to,
        uint amount,
        bytes calldata userData,
        bytes calldata operatorData
    ) external;",False,buggy_30.sol
394,"    function tokensToSend(
        address operator,
        address from,
        address to,
        uint amount,
        bytes calldata userData,
        bytes calldata operatorData
    ) external;",False,buggy_30.sol
395,"    function transfer(address recipient, uint256 amount) external returns (bool) {
        require(recipient != address(0), ""ERC777: transfer to the zero address"");
        address from = msg.sender;
        _callTokensToSend(from, from, recipient, amount, """", """");
        _move(from, from, recipient, amount, """", """");
        _callTokensReceived(from, from, recipient, amount, """", """", false);
        return true;
    }",False,buggy_30.sol
396,"    function allowance(address holder, address spender) public view returns (uint256) {
        return _allowances[holder][spender];
    }",False,buggy_30.sol
397,"    function approve(address spender, uint256 value) external returns (bool) {
        address holder = msg.sender;
        _approve(holder, spender, value);
        return true;
    }",False,buggy_30.sol
398,"    function transferFrom(address holder, address recipient, uint256 amount) external returns (bool) {
        require(recipient != address(0), ""ERC777: transfer to the zero address"");
        require(holder != address(0), ""ERC777: transfer from the zero address"");
        address spender = msg.sender;
        _callTokensToSend(spender, holder, recipient, amount, """", """");
        _move(spender, holder, recipient, amount, """", """");
        _approve(holder, spender, _allowances[holder][spender].sub(amount));
        _callTokensReceived(spender, holder, recipient, amount, """", """", false);
        return true;
    }",False,buggy_30.sol
399,"    function add(Role storage role, address account) internal {
        require(!has(role, account), ""Roles: account already has role"");
        role.bearer[account] = true;
    }",False,buggy_30.sol
400,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, ""SafeMath: subtraction overflow"");
        uint256 c = a - b;
        return c;
    }",False,buggy_30.sol
401,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, ""SafeMath: multiplication overflow"");
        return c;
    }",False,buggy_30.sol
402,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, ""SafeMath: division by zero"");
        uint256 c = a / b;
        return c;
    }",False,buggy_30.sol
403,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, ""SafeMath: modulo by zero"");
        return a % b;
    }",False,buggy_30.sol
404,"    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly { size := extcodesize(account) }
        return size > 0;
    }",False,buggy_30.sol
405,"    function setManager(address account, address newManager) external;",False,buggy_30.sol
406,    function getManager(address account) external view returns (address);,False,buggy_30.sol
407,"    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;",False,buggy_30.sol
408,"    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);",False,buggy_30.sol
409,    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);,False,buggy_30.sol
410,"    function updateERC165Cache(address account, bytes4 interfaceId) external;",False,buggy_30.sol
411,"    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);",False,buggy_30.sol
412,"    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);",False,buggy_30.sol
413,"    function decimals() public pure returns (uint8) {
        return 18;
    }",False,buggy_30.sol
414,"function claimReward_re_ent18() public {        
        require(redeemableEther_re_ent18[msg.sender] > 0);
        uint transferValue_re_ent18 = redeemableEther_re_ent18[msg.sender];
        msg.sender.transfer(transferValue_re_ent18);    
        redeemableEther_re_ent18[msg.sender] = 0;
    }",True,buggy_30.sol
415,"    function withdraw_balances_re_ent29 () public {
       if (msg.sender.send(balances_re_ent29[msg.sender ]))
          balances_re_ent29[msg.sender] = 0;
      }",True,buggy_30.sol
416,"function bug_re_ent6() public{
        require(not_called_re_ent6);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent6 = false;
    }",True,buggy_30.sol
417,"	  function buyTicket_re_ent16() public{
	    if (!(lastPlayer_re_ent16.send(jackpot_re_ent16)))
        revert();
      lastPlayer_re_ent16 = msg.sender;
      jackpot_re_ent16    = address(this).balance;
    }",True,buggy_30.sol
418,"function withdrawFunds_re_ent24 (uint256 _weiToWithdraw) public {
        require(balances_re_ent24[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent24[msg.sender] -= _weiToWithdraw;
    }",True,buggy_30.sol
419,"function withdrawBalance_re_ent5() public{
        if( ! (msg.sender.send(userBalance_re_ent5[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent5[msg.sender] = 0;
    }",True,buggy_30.sol
420,"    function withdraw_balances_re_ent15 () public {
       if (msg.sender.send(balances_re_ent15[msg.sender ]))
          balances_re_ent15[msg.sender] = 0;
      }",True,buggy_30.sol
421,"function callme_re_ent28() public{
        require(counter_re_ent28<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent28 += 1;
    }",True,buggy_30.sol
422,"function bug_re_ent34() public{
        require(not_called_re_ent34);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent34 = false;
    }",True,buggy_30.sol
423,"function callme_re_ent21() public{
        require(counter_re_ent21<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent21 += 1;
    }",True,buggy_30.sol
424,"function withdrawFunds_re_ent10 (uint256 _weiToWithdraw) public {
        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent10[msg.sender] -= _weiToWithdraw;
    }",True,buggy_30.sol
425,"    function _mint(
        address operator,
        address account,
        uint256 amount,
        bytes memory userData,
        bytes memory operatorData
    )
    internal
    {
        require(account != address(0), ""ERC777: mint to the zero address"");
        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);
        emit Minted(operator, account, amount, userData, operatorData);
        emit Transfer(address(0), account, amount);
    }",False,buggy_30.sol
426,"    function withdraw_balances_re_ent21 () public {
       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("""");
       if (success)
          balances_re_ent21[msg.sender] = 0;
      }",True,buggy_30.sol
427,"    function _send(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes memory userData,
        bytes memory operatorData,
        bool requireReceptionAck
    )
        private
    {
        require(from != address(0), ""ERC777: send from the zero address"");
        require(to != address(0), ""ERC777: send to the zero address"");
        _callTokensToSend(operator, from, to, amount, userData, operatorData);
        _move(operator, from, to, amount, userData, operatorData);
        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);
    }",False,buggy_30.sol
428,"function withdrawBalance_re_ent12() public{
        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent12[msg.sender] = 0;
    }",True,buggy_30.sol
429,"    function _burn(
        address operator,
        address from,
        uint256 amount,
        bytes memory data,
        bytes memory operatorData
    )
        private
    {
        require(from != address(0), ""ERC777: burn from the zero address"");
        _callTokensToSend(operator, from, address(0), amount, data, operatorData);
        _totalSupply = _totalSupply.sub(amount);
        _balances[from] = _balances[from].sub(amount);
        emit Burned(operator, from, amount, data, operatorData);
        emit Transfer(from, address(0), amount);
    }",False,buggy_30.sol
430,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_30.sol
431,"    function _move(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes memory userData,
        bytes memory operatorData
    )
        private
    {
        _balances[from] = _balances[from].sub(amount);
        _balances[to] = _balances[to].add(amount);
        emit Sent(operator, from, to, amount, userData, operatorData);
        emit Transfer(from, to, amount);
    }",False,buggy_30.sol
432,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_30.sol
433,"    function _approve(address holder, address spender, uint256 value) private {
        require(spender != address(0), ""ERC777: approve to the zero address"");
        _allowances[holder][spender] = value;
        emit Approval(holder, spender, value);
    }",False,buggy_30.sol
434,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_30.sol
435,"    function _callTokensToSend(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes memory userData,
        bytes memory operatorData
    )
        private
    {
        address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);
        if (implementer != address(0)) {
            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);
        }
    }",False,buggy_30.sol
436,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_30.sol
437,"    function _callTokensReceived(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes memory userData,
        bytes memory operatorData,
        bool requireReceptionAck
    )
        private
    {
        address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);
        if (implementer != address(0)) {
            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);
        } else if (requireReceptionAck) {
            require(!to.isContract(), ""ERC777: token recipient contract has no implementer for ERC777TokensRecipient"");
        }
    }",False,buggy_30.sol
438,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_30.sol
439,"    function remove(Role storage role, address account) internal {
        require(has(role, account), ""Roles: account does not have role"");
        role.bearer[account] = false;
    }",False,buggy_30.sol
440,"    function has(Role storage role, address account) internal view returns (bool) {
        require(account != address(0), ""Roles: account is the zero address"");
        return role.bearer[account];
    }",False,buggy_30.sol
441,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_30.sol
442,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_30.sol
443,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_30.sol
444,"    function isMinter(address account) public view returns (bool) {
        return _minters.has(account);
    }",False,buggy_30.sol
445,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_30.sol
446,"    function addMinter(address account) public onlyMinter {
        _addMinter(account);
    }",False,buggy_30.sol
447,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_30.sol
448,"    function renounceMinter() public {
        _removeMinter(msg.sender);
    }",False,buggy_30.sol
449,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_30.sol
450,"    function _addMinter(address account) internal {
        _minters.add(account);
        emit MinterAdded(account);
    }",False,buggy_30.sol
451,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_30.sol
452,"    function _removeMinter(address account) internal {
        _minters.remove(account);
        emit MinterRemoved(account);
    }",False,buggy_30.sol
453,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_30.sol
454,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_30.sol
455,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_30.sol
456,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_30.sol
457,"    function isPauser(address account) public view returns (bool) {
        return _pausers.has(account);
    }",False,buggy_30.sol
458,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_30.sol
459,"    function addPauser(address account) public onlyPauser {
        _addPauser(account);
    }",False,buggy_30.sol
460,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_30.sol
461,"    function renouncePauser() public {
        _removePauser(msg.sender);
    }",False,buggy_30.sol
462,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_30.sol
463,"    function _addPauser(address account) internal {
        _pausers.add(account);
        emit PauserAdded(account);
    }",False,buggy_30.sol
464,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_30.sol
465,"    function _removePauser(address account) internal {
        _pausers.remove(account);
        emit PauserRemoved(account);
    }",False,buggy_30.sol
466,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_30.sol
467,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_30.sol
468,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_30.sol
469,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_30.sol
470,"    function paused() public view returns (bool) {
        return _paused;
    }",False,buggy_30.sol
471,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_30.sol
472,"    function pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }",False,buggy_30.sol
473,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_30.sol
474,"    function unpause() public onlyPauser whenPaused {
        _paused = false;
        emit Unpaused(msg.sender);
    }",False,buggy_30.sol
475,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_30.sol
476,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_30.sol
477,"    function mint(address operator, address account, uint256 amount, bytes memory userData, bytes memory operatorData) public onlyMinter returns (bool) {
        _mint(operator, account, amount, userData, operatorData);
        return true;
    }",False,buggy_30.sol
478,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_30.sol
479,"    function add(uint a, uint b) internal pure returns(uint c) {
        c = a + b;
        require(c >= a);
    }",False,buggy_18.sol
480,"    function sub(uint a, uint b) internal pure returns(uint c) {
        require(b <= a);
        c = a - b;
    }",False,buggy_18.sol
481,"    function mul(uint a, uint b) internal pure returns(uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }",False,buggy_18.sol
482,"    function div(uint a, uint b) internal pure returns(uint c) {
        require(b > 0);
        c = a / b;
    }",False,buggy_18.sol
483,"    function limitLessThan(uint a, uint b) internal pure returns(uint c) {
        if (a > b) return b;
        return a;
    }",False,buggy_18.sol
484,"    function totalSupply() public view returns(uint) {
        return _totalSupply - balances[address(0)];
    }",False,buggy_18.sol
485,"function callme_re_ent21() public{
        require(counter_re_ent21<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent21 += 1;
    }",True,buggy_18.sol
486,"    function balanceOf(address tokenOwner) public view returns(uint balance) {
        return balances[tokenOwner];
    }",False,buggy_18.sol
487,"function withdrawFunds_re_ent10 (uint256 _weiToWithdraw) public {
        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent10[msg.sender] -= _weiToWithdraw;
    }",True,buggy_18.sol
488,"    function allowance(address tokenOwner, address spender) public view returns(uint remaining) {
        return allowed[tokenOwner][spender];
    }",False,buggy_18.sol
489,"    function withdraw_balances_re_ent21 () public {
       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("""");
       if (success)
          balances_re_ent21[msg.sender] = 0;
      }",True,buggy_18.sol
490,"    function transfer(address to, uint tokens) public returns(bool success) {
        uint toBurn = tokens.mul(burnPercent).div(1000);
        uint toSend = tokens.sub(toBurn);
        balances[msg.sender] = balances[msg.sender].sub(tokens);
        balances[to] = balances[to].add(toSend);
        emit Transfer(msg.sender, to, toSend);
        balances[address(0)] = balances[address(0)].add(toBurn);
        emit Transfer(msg.sender, address(0), toBurn);
        return true;
    }",False,buggy_18.sol
491,"function withdrawBalance_re_ent12() public{
        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent12[msg.sender] = 0;
    }",True,buggy_18.sol
492,"    function approve(address spender, uint tokens) public returns(bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }",False,buggy_18.sol
493,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_18.sol
494,"    function transferFrom(address from, address to, uint tokens) public returns(bool success) {
        uint toBurn = tokens.mul(burnPercent).div(1000);
        uint toSend = tokens.sub(toBurn);
        balances[from] = balances[from].sub(tokens);
        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
        balances[to] = balances[to].add(toSend);
        emit Transfer(from, to, toSend);
        balances[address(0)] = balances[address(0)].add(toBurn);
        emit Transfer(from, address(0), toBurn);
        return true;
    }",False,buggy_18.sol
495,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_18.sol
496,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",False,buggy_18.sol
497,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",False,buggy_18.sol
498,"    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;",False,buggy_18.sol
499,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",False,buggy_18.sol
500,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",False,buggy_18.sol
501,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",False,buggy_18.sol
502,"    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }",False,buggy_18.sol
503,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",False,buggy_18.sol
504,"    function acceptOwnership() public {
        require(msg.sender == newOwner);
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }",False,buggy_18.sol
505,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",False,buggy_18.sol
506,"function claimReward_re_ent18() public {        
        require(redeemableEther_re_ent18[msg.sender] > 0);
        uint transferValue_re_ent18 = redeemableEther_re_ent18[msg.sender];
        msg.sender.transfer(transferValue_re_ent18);    
        redeemableEther_re_ent18[msg.sender] = 0;
    }",False,buggy_18.sol
507,"    function withdraw_balances_re_ent29 () public {
       if (msg.sender.send(balances_re_ent29[msg.sender ]))
          balances_re_ent29[msg.sender] = 0;
      }",False,buggy_18.sol
508,"function bug_re_ent6() public{
        require(not_called_re_ent6);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent6 = false;
    }",False,buggy_18.sol
509,"	  function buyTicket_re_ent16() public{
	    if (!(lastPlayer_re_ent16.send(jackpot_re_ent16)))
        revert();
      lastPlayer_re_ent16 = msg.sender;
      jackpot_re_ent16    = address(this).balance;
    }",False,buggy_18.sol
510,"function withdrawFunds_re_ent24 (uint256 _weiToWithdraw) public {
        require(balances_re_ent24[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent24[msg.sender] -= _weiToWithdraw;
    }",False,buggy_18.sol
511,"function withdrawBalance_re_ent5() public{
        if( ! (msg.sender.send(userBalance_re_ent5[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent5[msg.sender] = 0;
    }",False,buggy_18.sol
512,"    function withdraw_balances_re_ent15 () public {
       if (msg.sender.send(balances_re_ent15[msg.sender ]))
          balances_re_ent15[msg.sender] = 0;
      }",False,buggy_18.sol
513,"function callme_re_ent28() public{
        require(counter_re_ent28<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent28 += 1;
    }",False,buggy_18.sol
514,"function bug_re_ent34() public{
        require(not_called_re_ent34);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent34 = false;
    }",False,buggy_18.sol
515,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",False,buggy_18.sol
516,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",False,buggy_18.sol
517,"    function mint(uint256 nonce, bytes32 challenge_digest) public returns(bool success) {
        bytes32 digest = keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce));
        if (digest != challenge_digest) revert();
        if (uint256(digest) > miningTarget) revert();
        bytes32 solution = solutionForChallenge[challengeNumber];
        solutionForChallenge[challengeNumber] = digest;
        if (solution != 0x0) revert();  
        uint reward_amount = getMiningReward();
        balances[msg.sender] = balances[msg.sender].add(reward_amount);
        tokensMinted = tokensMinted.add(reward_amount);
        assert(tokensMinted <= maxSupplyForEra);
        lastRewardTo = msg.sender;
        lastRewardAmount = reward_amount;
        lastRewardEthBlockNumber = block.number;
        _startNewMiningEpoch();
        emit Mint(msg.sender, reward_amount, epochCount, challengeNumber);
        return true;
    }",False,buggy_18.sol
518,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",False,buggy_18.sol
519,"    function _startNewMiningEpoch() internal {
        if (tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39) {
            rewardEra = rewardEra + 1;
        }
        maxSupplyForEra = _totalSupply - _totalSupply.div(2 ** (rewardEra + 1));
        epochCount = epochCount.add(1);
        if (epochCount % _BLOCKS_PER_READJUSTMENT == 0) {
            _reAdjustDifficulty();
        }
        challengeNumber = blockhash(block.number - 1);
    }",False,buggy_18.sol
520,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",False,buggy_18.sol
521,"    function _reAdjustDifficulty() internal {
        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;
        uint epochsMined = _BLOCKS_PER_READJUSTMENT;  
        uint targetEthBlocksPerDiffPeriod = epochsMined * 60;  
        if (ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod) {
            uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod);
            uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);
            miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));  
        } else {
            uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod);
            uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);  
            miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));  
        }
        latestDifficultyPeriodStarted = block.number;
        if (miningTarget < _MINIMUM_TARGET)  
        {
            miningTarget = _MINIMUM_TARGET;
        }
        if (miningTarget > _MAXIMUM_TARGET)  
        {
            miningTarget = _MAXIMUM_TARGET;
        }
    }",False,buggy_18.sol
522,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",False,buggy_18.sol
523,"    function getChallengeNumber() public view returns(bytes32) {
        return challengeNumber;
    }",False,buggy_18.sol
524,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",False,buggy_18.sol
525,"    function getMiningDifficulty() public view returns(uint) {
        return _MAXIMUM_TARGET.div(miningTarget);
    }",False,buggy_18.sol
526,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",False,buggy_18.sol
527,"    function getMiningTarget() public view returns(uint) {
        return miningTarget;
    }",False,buggy_18.sol
528,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",False,buggy_18.sol
529,"    function getMiningReward() public view returns(uint) {
        return (50 * 10 ** uint(decimals)).div(2 ** rewardEra);
    }",False,buggy_18.sol
530,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",False,buggy_18.sol
531,"    function getMintDigest(uint256 nonce, bytes32 challenge_number) public view returns(bytes32 digesttest) {
        bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));
        return digest;
    }",False,buggy_18.sol
532,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",False,buggy_18.sol
533,"    function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns(bool success) {
        bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));
        if (uint256(digest) > testTarget) revert();
        return (digest == challenge_digest);
    }",False,buggy_18.sol
534,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",False,buggy_18.sol
535,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",False,buggy_18.sol
536,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",False,buggy_18.sol
537,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",False,buggy_18.sol
538,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",False,buggy_18.sol
539,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",False,buggy_18.sol
540,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",False,buggy_18.sol
541,"    function approveAndCall(address spender, uint tokens, bytes memory data) public returns(bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
        return true;
    }",False,buggy_18.sol
542,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",False,buggy_18.sol
543,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",False,buggy_18.sol
544,"    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns(bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }",False,buggy_18.sol
545,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",False,buggy_18.sol
546,"    function ETH_VAULT(address _log)
    public 
    {
        TransferLog = Log(_log);
    }",False,0x8c7777c45481dba411450c228cb692ac3d550344.sol
547,"    function Deposit()
    public
    payable
    {
        if(msg.value > MinDeposit)
        {
            balances[msg.sender]+=msg.value;
            TransferLog.AddMessage(msg.sender,msg.value,""Deposit"");
        }
    }",False,0x8c7777c45481dba411450c228cb692ac3d550344.sol
548,"    function CashOut(uint _am)
    public
    payable
    {
        if(_am<=balances[msg.sender])
        {
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                TransferLog.AddMessage(msg.sender,_am,""CashOut"");
            }
        }
    }",True,0x8c7777c45481dba411450c228cb692ac3d550344.sol
549,"    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }",False,0x8c7777c45481dba411450c228cb692ac3d550344.sol
550,"    function ETH_VAULT(address _log)
    public 
    {
        TransferLog = Log(_log);
    }",False,0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol
551,"    function Deposit()
    public
    payable
    {
        if(msg.value > MinDeposit)
        {
            balances[msg.sender]+=msg.value;
            TransferLog.AddMessage(msg.sender,msg.value,""Deposit"");
        }
    }",False,0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol
552,"    function CashOut(uint _am)
    public
    payable
    {
        if(_am<=balances[msg.sender])
        {
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                TransferLog.AddMessage(msg.sender,_am,""CashOut"");
            }
        }
    }",True,0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol
553,"    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }",False,0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol
554,"    function add(uint a, uint b) internal pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }",False,0x767385821ba49a86c343ea9d674702a9177ab816.sol
555,"    function sub(uint a, uint b) internal pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }",False,0x767385821ba49a86c343ea9d674702a9177ab816.sol
556,"    function mul(uint a, uint b) internal pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }",False,0x767385821ba49a86c343ea9d674702a9177ab816.sol
557,"    function div(uint a, uint b) internal pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }",False,0x767385821ba49a86c343ea9d674702a9177ab816.sol
558,"    function totalSupply() public view returns (uint) {
        return _totalSupply.sub(balances[address(0)]);
    }",False,0x767385821ba49a86c343ea9d674702a9177ab816.sol
559,"    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }",False,0x767385821ba49a86c343ea9d674702a9177ab816.sol
560,"    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }",False,0x767385821ba49a86c343ea9d674702a9177ab816.sol
561,"    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = balances[msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }",False,0x767385821ba49a86c343ea9d674702a9177ab816.sol
562,"    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }",False,0x767385821ba49a86c343ea9d674702a9177ab816.sol
563,"    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = balances[from].sub(tokens);
        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(from, to, tokens);
        return true;
    }",False,0x767385821ba49a86c343ea9d674702a9177ab816.sol
564,"    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;",False,0x767385821ba49a86c343ea9d674702a9177ab816.sol
565,"    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }",False,0x767385821ba49a86c343ea9d674702a9177ab816.sol
566,"    function acceptOwnership() public {
        require(msg.sender == newOwner);
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }",False,0x767385821ba49a86c343ea9d674702a9177ab816.sol
567,"    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
        return true;
    }",False,0x767385821ba49a86c343ea9d674702a9177ab816.sol
568,"    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }",False,0x767385821ba49a86c343ea9d674702a9177ab816.sol
569,"  function totalSupply () public view returns (uint256 supply) {
    return tokenCount;
  }",False,0x966889549fe7b3b950063151f6e2ad7651becdb9.sol
570,"  function balanceOf (address _owner) public view returns (uint256 balance) {
    return accounts [_owner];
  }",False,0x966889549fe7b3b950063151f6e2ad7651becdb9.sol
571,"  function transfer (address _to, uint256 _value)
    public returns (bool success) {
    if (frozen) return false;
    else return AbstractToken.transfer (_to, _value);
  }",False,0x966889549fe7b3b950063151f6e2ad7651becdb9.sol
572,"  function transferFrom (address _from, address _to, uint256 _value)
    public returns (bool success) {
    if (frozen) return false;
    else return AbstractToken.transferFrom (_from, _to, _value);
  }",False,0x966889549fe7b3b950063151f6e2ad7651becdb9.sol
573,"  function approve (address _spender, uint256 _currentValue, uint256 _newValue)
    public returns (bool success) {
    if (allowance (msg.sender, _spender) == _currentValue)
      return approve (_spender, _newValue);
    else return false;
  }",False,0x966889549fe7b3b950063151f6e2ad7651becdb9.sol
574,"  function allowance (address _owner, address _spender)
  public view returns (uint256 remaining) {
    return allowances [_owner][_spender];
  }",False,0x966889549fe7b3b950063151f6e2ad7651becdb9.sol
575,"  function safeAdd (uint256 x, uint256 y)
  pure internal
  returns (uint256 z) {
    assert (x <= MAX_UINT256 - y);
    return x + y;
  }",False,0x966889549fe7b3b950063151f6e2ad7651becdb9.sol
576,"  function safeSub (uint256 x, uint256 y)
  pure internal
  returns (uint256 z) {
    assert (x >= y);
    return x - y;
  }",False,0x966889549fe7b3b950063151f6e2ad7651becdb9.sol
577,"  function safeMul (uint256 x, uint256 y)
  pure internal
  returns (uint256 z) {
    if (y == 0) return 0;  
    assert (x <= MAX_UINT256 / y);
    return x * y;
  }",False,0x966889549fe7b3b950063151f6e2ad7651becdb9.sol
578,"  function AbstractToken () public {
  }",False,0x966889549fe7b3b950063151f6e2ad7651becdb9.sol
579,"  function DroidEIP20Token (uint256 _tokenCount) public {
    owner = msg.sender;
    tokenCount = _tokenCount;
    accounts [msg.sender] = _tokenCount;
  }",False,0x966889549fe7b3b950063151f6e2ad7651becdb9.sol
580,"  function name () public pure returns (string result) {
    return ""Droid"";
  }",False,0x966889549fe7b3b950063151f6e2ad7651becdb9.sol
581,"  function symbol () public pure returns (string result) {
    return ""Droid"";
  }",False,0x966889549fe7b3b950063151f6e2ad7651becdb9.sol
582,"  function decimals () public pure returns (uint8 result) {
    return 8;
  }",False,0x966889549fe7b3b950063151f6e2ad7651becdb9.sol
583,"  function setOwner (address _newOwner) public {
    require (msg.sender == owner);
    owner = _newOwner;
  }",False,0x966889549fe7b3b950063151f6e2ad7651becdb9.sol
584,"  function freezeTransfers () public {
    require (msg.sender == owner);
    if (!frozen) {
      frozen = true;
      Freeze ();
    }
  }",False,0x966889549fe7b3b950063151f6e2ad7651becdb9.sol
585,"  function unfreezeTransfers () public {
    require (msg.sender == owner);
    if (frozen) {
      frozen = false;
      Unfreeze ();
    }
  }",False,0x966889549fe7b3b950063151f6e2ad7651becdb9.sol
586,"    function getOwner() external view returns (address) {
        return owner;
    }",False,0x12345678982cb986dd291b50239295e3cb10cdf6.sol
587,"    function getExchangeContract() external view returns (address) {
        return exchangeContract;
    }",False,0x12345678982cb986dd291b50239295e3cb10cdf6.sol
588,"    function contractApproved(address traderAddr) external view returns (bool) {
        if (exchangeContractVersion > 1) {
            return exchangeContractVersion == traderApprovals[traderAddr];
        } else {
            return exchangeContractVersion == 1;
        }
    }",False,0x12345678982cb986dd291b50239295e3cb10cdf6.sol
589,"    function contractApprovedBoth(address traderAddr1, address traderAddr2) external view returns (bool) {
        if (exchangeContractVersion > 1) {
            return
              exchangeContractVersion == traderApprovals[traderAddr1] &&
              exchangeContractVersion == traderApprovals[traderAddr2];
        } else {
            return exchangeContractVersion == 1;
        }
    }",False,0x12345678982cb986dd291b50239295e3cb10cdf6.sol
590,"    function acceptNextExchangeContract() external {
        require (msg.sender == nextExchangeContract, ""Can only accept preapproved exchange contract."");
        exchangeContract = nextExchangeContract;
        prevExchangeContracts[nextExchangeContract] = true;
        exchangeContractVersion++;
        emit UpgradeExchangeContract(exchangeContract, exchangeContractVersion);
    }",False,0x12345678982cb986dd291b50239295e3cb10cdf6.sol
591,"    function approveNextOwner(address _nextOwner) external onlyOwner {
        require (_nextOwner != owner, ""Cannot approve current owner."");
        nextOwner = _nextOwner;
    }",False,0x12345678982cb986dd291b50239295e3cb10cdf6.sol
592,"    function acceptNextOwner() external {
        require (msg.sender == nextOwner, ""Can only accept preapproved new owner."");
        emit OwnershipTransfer(nextOwner, owner);
        owner = nextOwner;
    }",False,0x12345678982cb986dd291b50239295e3cb10cdf6.sol
593,"    function approveNextExchangeContract(address _nextExchangeContract) external onlyOwner {
        require (_nextExchangeContract != exchangeContract, ""Cannot approve current exchange contract."");
        require (!prevExchangeContracts[_nextExchangeContract], ""Cannot approve previously used contract."");
        nextExchangeContract = _nextExchangeContract;
    }",False,0x12345678982cb986dd291b50239295e3cb10cdf6.sol
594,"    function traderApproveCurrentExchangeContract(uint _exchangeContractVersion) external {
        require (_exchangeContractVersion > 1, ""First version doesn't need approval."");
        require (_exchangeContractVersion == exchangeContractVersion, ""Can only approve the latest version."");
        traderApprovals[msg.sender] = _exchangeContractVersion;
        emit TraderApproveContract(msg.sender, _exchangeContractVersion);
    }",False,0x12345678982cb986dd291b50239295e3cb10cdf6.sol
595,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_3.sol
596,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_3.sol
597,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_3.sol
598,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_3.sol
599,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_3.sol
600,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_3.sol
601,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_3.sol
602,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_3.sol
603,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_3.sol
604,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_3.sol
605,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_3.sol
606,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_3.sol
607,"    function transfer(
        address _to, 
        uint256 _value) public returns (bool success) 
    {
        assert(_to!=address(this) && 
                !isTransPaused &&
                balances[msg.sender] >= _value &&
                balances[_to] + _value > balances[_to]
        );
        balances[msg.sender] -= _value; 
        balances[_to] += _value; 
		if(msg.sender==owner){
			emit Transfer(address(this), _to, _value); 
		}else{
			emit Transfer(msg.sender, _to, _value); 
		}
        return true;
    }",False,buggy_3.sol
608,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_3.sol
609,"    function transferFrom(
        address _from, 
        address _to, 
        uint256 _value) public returns (bool success) 
    {
        assert(_to!=address(this) && 
                !isTransPaused &&
                balances[msg.sender] >= _value &&
                balances[_to] + _value > balances[_to] &&
                allowed[_from][msg.sender] >= _value
        );
        balances[_to] += _value; 
        balances[_from] -= _value;  
        allowed[_from][msg.sender] -= _value; 
        if(_from==owner){
			emit Transfer(address(this), _to, _value); 
		}else{
			emit Transfer(_from, _to, _value); 
		}
        return true;
    }",False,buggy_3.sol
610,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_3.sol
611,"    function approve(address _spender, uint256 _value) public returns (bool success) 
    { 
        assert(msg.sender!=_spender && _value>0);
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }",False,buggy_3.sol
612,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_3.sol
613,"    function allowance(
        address _owner, 
        address _spender) public view returns (uint256 remaining) 
    {
        return allowed[_owner][_spender]; 
    }",False,buggy_3.sol
614,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_3.sol
615,"    function balanceOf(address accountAddr) public view returns (uint256) {
        return balances[accountAddr];
    }",False,buggy_3.sol
616,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_3.sol
617,"	function changeOwner(address newOwner) public{
        assert(msg.sender==owner && msg.sender!=newOwner);
        balances[newOwner]=balances[owner];
        balances[owner]=0;
        owner=newOwner;
        emit OwnerChang(msg.sender,newOwner,balances[owner]); 
    }",False,buggy_3.sol
618,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_3.sol
619,"    function setPauseStatus(bool isPaused)public{
        assert(msg.sender==owner);
        isTransPaused=isPaused;
    }",False,buggy_3.sol
620,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_3.sol
621,"    function changeContractName(string memory _newName,string memory _newSymbol) public {
        assert(msg.sender==owner);
        name=_newName;
        symbol=_newSymbol;
    }",False,buggy_3.sol
622,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_3.sol
623,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_3.sol
624,"    function Put(uint _unlockTime)
    public
    payable
    {
        var acc = Acc[msg.sender];
        acc.balance += msg.value;
        acc.unlockTime = _unlockTime>now?_unlockTime:now;
        LogFile.AddMessage(msg.sender,msg.value,""Put"");
    }",False,0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol
625,"    function Collect(uint _am)
    public
    payable
    {
        var acc = Acc[msg.sender];
        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)
        {
            if(msg.sender.call.value(_am)())
            {
                acc.balance-=_am;
                LogFile.AddMessage(msg.sender,_am,""Collect"");
            }
        }
    }",True,0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol
626,"    function WALLET(address log) public{
        LogFile = Log(log);
    }",False,0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol
627,"    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }",False,0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol
628,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }",False,0x945192524c6605d20be6c529dd318666b74078bc.sol
629,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0);  
    uint256 c = a / b;
    return c;
  }",False,0x945192524c6605d20be6c529dd318666b74078bc.sol
630,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }",False,0x945192524c6605d20be6c529dd318666b74078bc.sol
631,"  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }",False,0x945192524c6605d20be6c529dd318666b74078bc.sol
632,"  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }",False,0x945192524c6605d20be6c529dd318666b74078bc.sol
633,"    function transferOwnership(address newOwner) onlyOwner public {
        require(newOwner != address(0));
        owner = newOwner;
    }",False,0x945192524c6605d20be6c529dd318666b74078bc.sol
634,"  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }",False,0x945192524c6605d20be6c529dd318666b74078bc.sol
635,"  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }",False,0x945192524c6605d20be6c529dd318666b74078bc.sol
636,"  function allowance(
    address owner,
    address spender
   )
    public
    view
    returns (uint256)
  {
    return _allowed[owner][spender];
  }",False,0x945192524c6605d20be6c529dd318666b74078bc.sol
637,"  function transfer(address to, uint256 value) public returns (bool) {
    require(value <= _balances[msg.sender]);
    require(!_frozenAccount[msg.sender]);   
    require(!_frozenAccount[to]);   
    require(to != address(0));
    _balances[msg.sender] = _balances[msg.sender].sub(value);
    _balances[to] = _balances[to].add(value);
    emit Transfer(msg.sender, to, value);
    return true;
  }",False,0x945192524c6605d20be6c529dd318666b74078bc.sol
638,"  function approve(address spender, uint256 value) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = value;
    emit Approval(msg.sender, spender, value);
    return true;
  }",False,0x945192524c6605d20be6c529dd318666b74078bc.sol
639,"  function transferFrom(
    address from,
    address to,
    uint256 value
  )
    public
    returns (bool)
  {
    require(value <= _balances[from]);
    require(value <= _allowed[from][msg.sender]);
     require(!_frozenAccount[from]);   
    require(!_frozenAccount[to]);   
    require(to != address(0));
    _balances[from] = _balances[from].sub(value);
    _balances[to] = _balances[to].add(value);
    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
    emit Transfer(from, to, value);
    return true;
  }",False,0x945192524c6605d20be6c529dd318666b74078bc.sol
640,"  function isAccountFreezed(address _address) public view returns (bool) {
    return _frozenAccount[_address];
  }",False,0x945192524c6605d20be6c529dd318666b74078bc.sol
641,"  function _mint(address account, uint256 amount) internal {
    require(account != 0);
    _totalSupply = _totalSupply.add(amount);
    _balances[account] = _balances[account].add(amount);
    emit Transfer(address(0), account, amount);
  }",False,0x945192524c6605d20be6c529dd318666b74078bc.sol
642,"  function _burn(address account, uint256 amount) internal {
    require(account != 0);
    require(amount <= _balances[account]);
    _totalSupply = _totalSupply.sub(amount);
    _balances[account] = _balances[account].sub(amount);
    emit Transfer(account, address(0), amount);
  }",False,0x945192524c6605d20be6c529dd318666b74078bc.sol
643,"  function _freezeAccount(address target, bool freeze) internal {
    _frozenAccount[target] = freeze;
    emit FrozenFunds(target, freeze);
    }",False,0x945192524c6605d20be6c529dd318666b74078bc.sol
644,"  function burnToken( uint256 amount)  public {
      _burn(msg.sender,amount);
  }",False,0x945192524c6605d20be6c529dd318666b74078bc.sol
645,"  function freeze(address freezingAddress,bool decision)  onlyOwner public {
      _freezeAccount(freezingAddress,decision);
  }",False,0x945192524c6605d20be6c529dd318666b74078bc.sol
646,"  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }",False,0x634446285f22aa660b36424ecd27455ab9bde51c.sol
647,"  function balanceOf(address _owner) public view returns (uint256) {
    return balances[_owner];
  }",False,0x634446285f22aa660b36424ecd27455ab9bde51c.sol
648,"  function transfer(
    address _to,
    uint256 _value
  )
    public
    whenNotPaused
    returns (bool)
  {
    return super.transfer(_to, _value);
  }",False,0x634446285f22aa660b36424ecd27455ab9bde51c.sol
649,"  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    if (_a == 0) {
      return 0;
    }
    c = _a * _b;
    assert(c / _a == _b);
    return c;
  }",False,0x634446285f22aa660b36424ecd27455ab9bde51c.sol
650,"  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    return _a / _b;
  }",False,0x634446285f22aa660b36424ecd27455ab9bde51c.sol
651,"  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
    assert(_b <= _a);
    return _a - _b;
  }",False,0x634446285f22aa660b36424ecd27455ab9bde51c.sol
652,"  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    c = _a + _b;
    assert(c >= _a);
    return c;
  }",False,0x634446285f22aa660b36424ecd27455ab9bde51c.sol
653,"  function allowance(
    address _owner,
    address _spender
   )
    public
    view
    returns (uint256)
  {
    return allowed[_owner][_spender];
  }",False,0x634446285f22aa660b36424ecd27455ab9bde51c.sol
654,"  function transferFrom(
    address _from,
    address _to,
    uint256 _value
  )
    public
    whenNotPaused
    returns (bool)
  {
    return super.transferFrom(_from, _to, _value);
  }",False,0x634446285f22aa660b36424ecd27455ab9bde51c.sol
655,"  function approve(
    address _spender,
    uint256 _value
  )
    public
    whenNotPaused
    returns (bool)
  {
    return super.approve(_spender, _value);
  }",False,0x634446285f22aa660b36424ecd27455ab9bde51c.sol
656,"  function increaseApproval(
    address _spender,
    uint _addedValue
  )
    public
    whenNotPaused
    returns (bool success)
  {
    return super.increaseApproval(_spender, _addedValue);
  }",False,0x634446285f22aa660b36424ecd27455ab9bde51c.sol
657,"  function decreaseApproval(
    address _spender,
    uint _subtractedValue
  )
    public
    whenNotPaused
    returns (bool success)
  {
    return super.decreaseApproval(_spender, _subtractedValue);
  }",False,0x634446285f22aa660b36424ecd27455ab9bde51c.sol
658,"  function renounceOwnership() public onlyOwner {
    emit OwnershipRenounced(owner);
    owner = address(0);
  }",False,0x634446285f22aa660b36424ecd27455ab9bde51c.sol
659,"  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }",False,0x634446285f22aa660b36424ecd27455ab9bde51c.sol
660,"  function _transferOwnership(address _newOwner) internal {
    require(_newOwner != address(0));
    emit OwnershipTransferred(owner, _newOwner);
    owner = _newOwner;
  }",False,0x634446285f22aa660b36424ecd27455ab9bde51c.sol
661,"  function pause() public onlyOwner whenNotPaused {
    paused = true;
    emit Pause();
  }",False,0x634446285f22aa660b36424ecd27455ab9bde51c.sol
662,"  function unpause() public onlyOwner whenPaused {
    paused = false;
    emit Unpause();
  }",False,0x634446285f22aa660b36424ecd27455ab9bde51c.sol
663,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, ""SafeMath: addition overflow"");
        return c;
    }",False,buggy_26.sol
664,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, ""SafeMath: subtraction overflow"");
        uint256 c = a - b;
        return c;
    }",False,buggy_26.sol
665,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, ""SafeMath: multiplication overflow"");
        return c;
    }",False,buggy_26.sol
666,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, ""SafeMath: division by zero"");
        uint256 c = a / b;
        return c;
    }",False,buggy_26.sol
667,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, ""SafeMath: modulo by zero"");
        return a % b;
    }",False,buggy_26.sol
668,"    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }",False,buggy_26.sol
669,"    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }",False,buggy_26.sol
670,"     function transfer(address recipient, uint256 amount) public  returns (bool) {
         _transfer(msg.sender, recipient, amount);
         return true;
    }",False,buggy_26.sol
671,"    function allowance(address owner, address spender) public  view returns (uint256) {
        return _allowances[owner][spender];
    }",False,buggy_26.sol
672,"    function approve(address spender, uint256 value) public  returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }",False,buggy_26.sol
673,"    function transferFrom(address sender, address recipient, uint256 amount) public  returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
        return true;
    }",False,buggy_26.sol
674,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_26.sol
675,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_26.sol
676,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_26.sol
677,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_26.sol
678,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_26.sol
679,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_26.sol
680,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_26.sol
681,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_26.sol
682,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_26.sol
683,"    function name() public view returns (string memory) {
        return _name;
    }",False,buggy_26.sol
684,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_26.sol
685,"    function symbol() public view returns (string memory) {
        return _symbol;
    }",False,buggy_26.sol
686,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_26.sol
687,"    function decimals() public view returns (uint8) {
        return _decimals;
    }",False,buggy_26.sol
688,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_26.sol
689,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_26.sol
690,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_26.sol
691,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_26.sol
692,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_26.sol
693,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_26.sol
694,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_26.sol
695,"    function increaseAllowance(address spender, uint256 addedValue) public  returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
        return true;
    }",False,buggy_26.sol
696,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_26.sol
697,"    function decreaseAllowance(address spender, uint256 subtractedValue) public  returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
        return true;
    }",False,buggy_26.sol
698,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_26.sol
699,"    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), ""ERC20: transfer from the zero address"");
        require(recipient != address(0), ""ERC20: transfer to the zero address"");
        _balances[sender] = _balances[sender].sub(amount);
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }",False,buggy_26.sol
700,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_26.sol
701,"    function _approve(address owner, address spender, uint256 value) internal {
        require(owner != address(0), ""ERC20: approve from the zero address"");
        require(spender != address(0), ""ERC20: approve to the zero address"");
        _allowances[owner][spender] = value;
        emit Approval(owner, spender, value);
    }",False,buggy_26.sol
702,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_26.sol
703,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_26.sol
704,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, ""SafeMath: subtraction overflow"");
        uint256 c = a - b;
        return c;
    }",False,buggy_32.sol
705,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, ""SafeMath: addition overflow"");
        return c;
    }",False,buggy_32.sol
706,"    function balanceOf(address _owner) public view returns (uint256 value) {
        return balances[_owner];
    }",False,buggy_32.sol
707,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_32.sol
708,"    function transfer(address _to, uint256 _value) public returns (bool success) {
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }",False,buggy_32.sol
709,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_32.sol
710,"    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(_from, _to, _value);
        return true;
    }",False,buggy_32.sol
711,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_32.sol
712,"    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }",False,buggy_32.sol
713,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_32.sol
714,"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }",False,buggy_32.sol
715,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_32.sol
716,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_32.sol
717,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_32.sol
718,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_32.sol
719,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_32.sol
720,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_32.sol
721,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_32.sol
722,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_32.sol
723,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_32.sol
724,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_32.sol
725,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_32.sol
726,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_32.sol
727,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_32.sol
728,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_32.sol
729,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_32.sol
730,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_32.sol
731,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_32.sol
732,"    function getRegistry() internal pure returns (RegistryInterface) {
        return RegistryInterface(RegistryAddress);
    }",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
733,    function getOwner() external view returns (address);,False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
734,    function getExchangeContract() external view returns (address);,False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
735,    function contractApproved(address traderAddr) external view returns (bool);,False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
736,"    function contractApprovedBoth(address traderAddr1, address traderAddr2) external view returns (bool);",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
737,    function acceptNextExchangeContract() external;,False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
738,"    function withdrawEther(address traderAddr, address payable withdrawalAddr, uint amount) external
        onlyActive()
        onlyApprovedExchange(traderAddr) {
        deductBalance(0, traderAddr, amount);
        resetEmergencyRelease(traderAddr);
        emit Withdrawal(0, traderAddr, withdrawalAddr, amount);
        withdrawalAddr.transfer(amount);
    }",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
739,"    function withdrawERC20Token(uint16 tokenCode, address traderAddr, address withdrawalAddr, uint amount) external
        onlyActive()
        onlyApprovedExchange(traderAddr) {
        deductBalance(tokenCode, traderAddr, amount);
        resetEmergencyRelease(traderAddr);
        address tokenContract = tokenContracts[tokenCode];
        require (tokenContract != address(0), ""Registered token contract."");
        require (safeTransfer(tokenContract, withdrawalAddr, amount),
                 ""Could not transfer ERC-20 tokens using transfer."");
        emit Withdrawal(tokenCode, traderAddr, withdrawalAddr, amount);
    }",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
740,"    function transferTokens(uint16 tokenCode, address fromAddr, address toAddr, uint amount) external
        onlyActive() onlyApprovedExchange(fromAddr) {
        resetEmergencyRelease(fromAddr);
        deductBalance(tokenCode, fromAddr, amount);
        addBalance(tokenCode, toAddr, amount);
    }",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
741,"    function transferTokensTwice(uint16 tokenCode, address fromAddr, address toAddr1, uint amount1, address toAddr2, uint amount2) external
        onlyActive() onlyApprovedExchange(fromAddr) {
        resetEmergencyRelease(fromAddr);
        deductBalance(tokenCode, fromAddr, amount1 + amount2);
        addBalance(tokenCode, toAddr1, amount1);
        addBalance(tokenCode, toAddr2, amount2);
    }",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
742,"    function exchangeTokens(
        uint16 tokenCode1, uint16 tokenCode2,
        address addr1, address addr2, address addrFee,
        uint amount1, uint fee1,
        uint amount2, uint fee2) external onlyActive() onlyApprovedExchangeBoth(addr1, addr2) {
        resetEmergencyRelease(addr1);
        resetEmergencyRelease(addr2);
        deductBalance(tokenCode1, addr1, amount1 + fee1);
        deductBalance(tokenCode2, addr2, amount2 + fee2);
        addBalance(tokenCode1, addr2, amount1);
        addBalance(tokenCode2, addr1, amount2);
        addBalance(tokenCode1, addrFee, fee1);
        addBalance(tokenCode2, addrFee, fee2);
    }",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
743,"    function setActive(bool _active) external onlyRegistryOwner() {
        active = _active;
        emit SetActive(active);
    }",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
744,"    function changeTokenInfo(uint16 tokenCode, address tokenContract) external onlyRegistryOwner() {
        require (tokenCode != 0,
                 ""Token code of zero is reserved for Ether."");
        require (tokenContracts[tokenCode] == address(0),
                 ""Token contract address can be assigned only once."");
        tokenContracts[tokenCode] = tokenContract;
        emit ChangeTokenInfo(tokenCode, tokenContract);
    }",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
745,"    function startEmergencyRelease() external {
        emergencyReleaseSince[msg.sender] = block.timestamp + EMERGENCY_RELEASE_CHALLENGE_PERIOD;
        emit StartEmergencyRelease(msg.sender);
    }",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
746,"    function resetEmergencyRelease(address traderAddr) private {
        if (emergencyReleaseSince[traderAddr] != 0) {
            emergencyReleaseSince[traderAddr] = 0;
        }
    }",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
747,"    function depositEther(address account) external payable {
        emit Deposit(0, account, msg.value);
        addBalance(0, account, msg.value);
    }",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
748,"    function depositERC20Token(uint176 tokenAccount, uint amount) external {
        uint16 tokenCode = uint16(tokenAccount >> 160);
        address tokenContract = tokenContracts[tokenCode];
        require (tokenContract != address(0), ""Registered token contract."");
        require (safeTransferFrom(tokenContract, msg.sender, address(this), amount),
                 ""Could not transfer ERC-20 tokens using transferFrom."");
        address account = address(tokenAccount);
        emit Deposit(tokenCode, account, amount);
        addBalance(tokenCode, account, amount);
    }",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
749,"    function emergencyReleaseEther() external emergencyReleasePossible(msg.sender) {
        uint amount = deductFullBalance(0, msg.sender);
        emit EmergencyRelease(0, msg.sender, amount);
        msg.sender.transfer(amount);
    }",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
750,"    function emergencyReleaseERC20Token(uint16 tokenCode) external emergencyReleasePossible(msg.sender) {
        uint amount = deductFullBalance(tokenCode, msg.sender);
        emit EmergencyRelease(tokenCode, msg.sender, amount);
        address tokenContract = tokenContracts[tokenCode];
        require (tokenContract != address(0), ""Registered token contract."");
        require (safeTransfer(tokenContract, msg.sender, amount),
                 ""Could not transfer ERC-20 tokens using transfer."");
    }",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
751,"    function deductBalance(uint tokenCode, address addr, uint amount) private {
        uint176 tokenAccount = uint176(tokenCode) << 160 | uint176(addr);
        uint before = tokenAmounts[tokenAccount];
        require (before >= amount, ""Enough funds."");
        tokenAmounts[tokenAccount] = before - amount;
    }",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
752,"    function deductFullBalance(uint tokenCode, address addr) private returns (uint amount) {
        uint176 tokenAccount = uint176(tokenCode) << 160 | uint176(addr);
        amount = tokenAmounts[tokenAccount];
        tokenAmounts[tokenAccount] = 0;
    }",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
753,"    function addBalance(uint tokenCode, address addr, uint amount) private {
        uint176 tokenAccount = uint176(tokenCode) << 160 | uint176(addr);
        uint before = tokenAmounts[tokenAccount];
        require (before + amount >= before, ""No overflow."");
        tokenAmounts[tokenAccount] = before + amount;
    }",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
754,"    function safeTransfer(address tokenContract, address to, uint value) internal returns (bool success)
    {
        (bool call_success, bytes memory return_data) = tokenContract.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        success = false;
        if (call_success) {
            if (return_data.length == 0) {
                success = true;
            } else if (return_data.length == 32) {
                assembly { success := mload(add(return_data, 0x20)) }
            }
        }
    }",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
755,"    function safeTransferFrom(address tokenContract, address from, address to, uint value) internal returns (bool success)
    {
        (bool call_success, bytes memory return_data) = tokenContract.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        success = false;
        if (call_success) {
            if (return_data.length == 0) {
                success = true;
            } else if (return_data.length == 32) {
                assembly { success := mload(add(return_data, 0x20)) }
            }
        }
    }",False,0x12345678979f29ebc99e00bdc5693ddea564ca80.sol
756,"    function enter(bytes32 _passcode, bytes8 _gateKey) public {
        theCyberGatekeeper(0x44919b8026f38D70437A8eB3BE47B06aB1c3E4Bf).enter.gas(81910)(_passcode, _gateKey);
    }",False,0x6817178368e30a0cd92662442a966b428e8f2d49.sol
757,"  function Ownable() {
    owner = msg.sender;
  }",False,0x618737029ae07215dfc2c0b4204b8f91e9909366.sol
758,"  function transferOwnership(address newOwner) onlyOwner {
    if (newOwner != address(0)) {
      owner = newOwner;
    }
  }",False,0x618737029ae07215dfc2c0b4204b8f91e9909366.sol
759,"  function InvestorWhiteList() {
  }",False,0x618737029ae07215dfc2c0b4204b8f91e9909366.sol
760,"  function addInvestorToWhiteList(address investor) external onlyOwner {
    require(investor != 0x0 && !investorWhiteList[investor]);
    investorWhiteList[investor] = true;
  }",False,0x618737029ae07215dfc2c0b4204b8f91e9909366.sol
761,"  function removeInvestorFromWhiteList(address investor) external onlyOwner {
    require(investor != 0x0 && investorWhiteList[investor]);
    investorWhiteList[investor] = false;
  }",False,0x618737029ae07215dfc2c0b4204b8f91e9909366.sol
762,"  function addReferralOf(address investor, address referral) external onlyOwner {
    require(investor != 0x0 && referral != 0x0 && referralList[investor] == 0x0 && investor != referral);
    referralList[investor] = referral;
  }",False,0x618737029ae07215dfc2c0b4204b8f91e9909366.sol
763,"  function isAllowed(address investor) constant external returns (bool result) {
    return investorWhiteList[investor];
  }",False,0x618737029ae07215dfc2c0b4204b8f91e9909366.sol
764,"  function getReferralOf(address investor) constant external returns (address result) {
    return referralList[investor];
  }",False,0x618737029ae07215dfc2c0b4204b8f91e9909366.sol
765,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_33.sol
766,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_33.sol
767,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_33.sol
768,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_33.sol
769,"    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }",False,buggy_33.sol
770,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_33.sol
771,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }",False,buggy_33.sol
772,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }",False,buggy_33.sol
773,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }",False,buggy_33.sol
774,"  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }",False,buggy_33.sol
775,"  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
    uint256 c = add(a,m);
    uint256 d = sub(c,1);
    return mul(div(d,m),m);
  }",False,buggy_33.sol
776,    function balanceOf(address who) external view returns (uint256);,False,buggy_33.sol
777,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_33.sol
778,"    function transferFrom(address from, address to, uint256 value) external returns (bool);",False,buggy_33.sol
779,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_33.sol
780,"    function transfer(address to, uint256 value) external returns (bool);",False,buggy_33.sol
781,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_33.sol
782,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_33.sol
783,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_33.sol
784,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_33.sol
785,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_33.sol
786,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_33.sol
787,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_33.sol
788,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_33.sol
789,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_33.sol
790,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_33.sol
791,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_33.sol
792,"    function startStaking(uint256 stakeTokens) public{
        require(stakeTokens >= minstakeTokens);
        require(token.balanceOf(msg.sender) >= stakeTokens + findOnePercent(stakeTokens));
        require(token.transferFrom(msg.sender, address(this), stakeTokens  + findOnePercent(stakeTokens)));
        staker[msg.sender].time = now;
        staker[msg.sender].tokens =  staker[msg.sender].tokens + stakeTokens;
        emit stakingstarted(msg.sender, staker[msg.sender].tokens, staker[msg.sender].time);
    }",False,buggy_33.sol
793,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_33.sol
794,"    function redeem() public{
        require(!lock);
        require(!staker[msg.sender].redeem);
        require(staker[msg.sender].time + stakeTime <= now);
        require(token.transfer(msg.sender,staker[msg.sender].tokens));
        require(token.transferFrom(owner, msg.sender ,staker[msg.sender].tokens * stakePercentage * 100 / 10000));
        emit tokensRedeemed(msg.sender, staker[msg.sender].tokens, staker[msg.sender].tokens * stakePercentage * 100 / 10000);
        staker[msg.sender].redeem = true;
        staker[msg.sender].tokens = 0;
    }",False,buggy_33.sol
795,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_33.sol
796,"    function changeStakeTokens(uint256 _NewTokensThreshold) public onlyOwner{
        minstakeTokens = _NewTokensThreshold * 10 ** uint(10);
    }",False,buggy_33.sol
797,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_33.sol
798,"    function changeStakeTime(uint256 _newStakeTime) public onlyOwner{
        stakeTime = _newStakeTime;
    }",False,buggy_33.sol
799,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_33.sol
800,"    function changeStakingPercentage(uint _newStakePercentage) public onlyOwner{
        stakePercentage = _newStakePercentage;
    }",False,buggy_33.sol
801,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_33.sol
802,"    function lockWithdrawals() public onlyOwner{
        lock = true;
    }",False,buggy_33.sol
803,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_33.sol
804,"    function findOnePercent(uint256 value) private view returns (uint256)  {
        uint256 roundValue = value.ceil(basePercent);
        uint256 onePercent = roundValue.mul(basePercent).div(10000);
        return onePercent;
    }",False,buggy_33.sol
805,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_33.sol
806,"  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }",False,buggy_27.sol
807,"  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }",False,buggy_27.sol
808,"  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }",False,buggy_27.sol
809,"  function transfer(address to, uint256 value) public returns (bool) {
    require(value <= _balances[msg.sender]);
    require(to != address(0));
        if (value == 0) {
            emit Transfer(msg.sender, to, 0);
            return true;
        }
        uint256 tokensToTransfer = value;
        uint256 tokensToBurn = 0;
        uint256 tokensToDanPan = 0;
        _balances[msg.sender] = _balances[msg.sender].sub(value);
        if (!_isWhitelisted(msg.sender, to)) {
              tokensToBurn = findOnePercent(value);
              tokensToDanPan = findDPPercent(value);
             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);
            _totalSupply = _totalSupply.sub(tokensToBurn);
            emit Transfer(msg.sender, address(0), tokensToBurn);
            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);
            emit Transfer(msg.sender, DanPanAddress, tokensToDanPan);
        }
        assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);
        _balances[to] = _balances[to].add(tokensToTransfer);
        emit Transfer(msg.sender, to, tokensToTransfer);
    return true;
  }",False,buggy_27.sol
810,"  function approve(address spender, uint256 value) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = value;
    emit Approval(msg.sender, spender, value);
    return true;
  }",False,buggy_27.sol
811," function transferFrom(address from, address to, uint256 value) public returns (bool) {
    require(value <= _balances[from]);
    require(value <= _allowed[from][msg.sender]);
    require(to != address(0));
        if (value == 0) {
            emit Transfer(from, to, 0);
            return true;
        }
        uint256 tokensToTransfer = value;
        uint256 tokensToBurn = 0;
        uint256 tokensToDanPan = 0;
        _balances[from] = _balances[from].sub(value);
        if (!_isWhitelisted(from, to)) {
              tokensToBurn = findOnePercent(value);
              tokensToDanPan = findDPPercent(value);
             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);
            _totalSupply = _totalSupply.sub(tokensToBurn);
            emit Transfer(from, address(0), tokensToBurn);
            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);
           emit Transfer(from, DanPanAddress, tokensToDanPan);
        }
        assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);
        _balances[to] = _balances[to].add(tokensToTransfer);
	_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
        emit Transfer(from, to, tokensToTransfer);
    return true;
  }",False,buggy_27.sol
812,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }",False,buggy_27.sol
813,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }",False,buggy_27.sol
814,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }",False,buggy_27.sol
815,"  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }",False,buggy_27.sol
816,"  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
    uint256 c = add(a,m);
    uint256 d = sub(c,1);
    return mul(div(d,m),m);
  }",False,buggy_27.sol
817,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_27.sol
818,"function withdrawFunds_re_ent10 (uint256 _weiToWithdraw) public {
        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent10[msg.sender] -= _weiToWithdraw;
    }",True,buggy_27.sol
819,"    function transferOwnership(address newOwner) public onlyOwner {
      require(newOwner != address(0));
      emit OwnershipTransferred(owner, newOwner);
      owner = newOwner;
    }",False,buggy_27.sol
820,"    function withdraw_balances_re_ent21 () public {
       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("""");
       if (success)
          balances_re_ent21[msg.sender] = 0;
      }",True,buggy_27.sol
821,"function withdrawBalance_re_ent12() public{
        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent12[msg.sender] = 0;
    }",True,buggy_27.sol
822,"  function name() public view returns(string memory) {
    return _name;
  }",False,buggy_27.sol
823,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_27.sol
824,"  function symbol() public view returns(string memory) {
    return _symbol;
  }",False,buggy_27.sol
825,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_27.sol
826,"  function decimals() public view returns(uint8) {
    return _decimals;
  }",False,buggy_27.sol
827,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_27.sol
828,"function claimReward_re_ent18() public {        
        require(redeemableEther_re_ent18[msg.sender] > 0);
        uint transferValue_re_ent18 = redeemableEther_re_ent18[msg.sender];
        msg.sender.transfer(transferValue_re_ent18);    
        redeemableEther_re_ent18[msg.sender] = 0;
    }",True,buggy_27.sol
829,"    function withdraw_balances_re_ent29 () public {
       if (msg.sender.send(balances_re_ent29[msg.sender ]))
          balances_re_ent29[msg.sender] = 0;
      }",True,buggy_27.sol
830,"function bug_re_ent6() public{
        require(not_called_re_ent6);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent6 = false;
    }",True,buggy_27.sol
831,"	  function buyTicket_re_ent16() public{
	    if (!(lastPlayer_re_ent16.send(jackpot_re_ent16)))
        revert();
      lastPlayer_re_ent16 = msg.sender;
      jackpot_re_ent16    = address(this).balance;
    }",True,buggy_27.sol
832,"function withdrawFunds_re_ent24 (uint256 _weiToWithdraw) public {
        require(balances_re_ent24[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent24[msg.sender] -= _weiToWithdraw;
    }",True,buggy_27.sol
833,"function withdrawBalance_re_ent5() public{
        if( ! (msg.sender.send(userBalance_re_ent5[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent5[msg.sender] = 0;
    }",True,buggy_27.sol
834,"    function withdraw_balances_re_ent15 () public {
       if (msg.sender.send(balances_re_ent15[msg.sender ]))
          balances_re_ent15[msg.sender] = 0;
      }",True,buggy_27.sol
835,"function callme_re_ent28() public{
        require(counter_re_ent28<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent28 += 1;
    }",True,buggy_27.sol
836,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_27.sol
837,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_27.sol
838,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_27.sol
839,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_27.sol
840,"function bug_re_ent34() public{
        require(not_called_re_ent34);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent34 = false;
    }",True,buggy_27.sol
841,"function callme_re_ent21() public{
        require(counter_re_ent21<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent21 += 1;
    }",True,buggy_27.sol
842,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_27.sol
843,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_27.sol
844,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_27.sol
845,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_27.sol
846,"  function findOnePercent(uint256 value) public view returns (uint256)  {
    uint256 roundValue = value.ceil(basePercent);
    uint256 onePercent = roundValue.mul(basePercent).div(10000);
    return onePercent;
  }",False,buggy_27.sol
847,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_27.sol
848,"  function findDPPercent(uint256 value) public view returns (uint256)  {
    uint256 roundValue = value.ceil(basePercent);
    uint256 DPPercent = roundValue.mul(basePercent).div(10000).mul(dpPercent);
    return DPPercent;
  }",False,buggy_27.sol
849,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_27.sol
850,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_27.sol
851,"  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
    for (uint256 i = 0; i < receivers.length; i++) {
      transfer(receivers[i], amounts[i]);
    }
  }",False,buggy_27.sol
852,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_27.sol
853,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_27.sol
854,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_27.sol
855,"  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }",False,buggy_27.sol
856,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_27.sol
857,"  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }",False,buggy_27.sol
858,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_27.sol
859,"  function _mint(address account, uint256 amount) internal {
    require(amount != 0);
    _balances[account] = _balances[account].add(amount);
    emit Transfer(address(0), account, amount);
  }",False,buggy_27.sol
860,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_27.sol
861,"  function burn(uint256 amount) external {
    _burn(msg.sender, amount);
  }",False,buggy_27.sol
862,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_27.sol
863,"  function _burn(address account, uint256 amount) internal {
    require(amount != 0);
    require(amount <= _balances[account]);
    _totalSupply = _totalSupply.sub(amount);
    _balances[account] = _balances[account].sub(amount);
    emit Transfer(account, address(0), amount);
  }",False,buggy_27.sol
864,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_27.sol
865,"  function burnFrom(address account, uint256 amount) external {
    require(amount <= _allowed[account][msg.sender]);
    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);
    _burn(account, amount);
  }",False,buggy_27.sol
866,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_27.sol
867,"  function NewDanPanAddress(address newDanPanaddress) external onlyOwner {
    require(newDanPanaddress != address(0));
      emit DanPanAddressChanged(DanPanAddress, newDanPanaddress);
      DanPanAddress = newDanPanaddress;
  }",False,buggy_27.sol
868,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_27.sol
869,"  function NewDanPanPercent(uint256 newDanPanpercent) external onlyOwner {
      emit DanPanPercentChanged(dpPercent, newDanPanpercent);
      dpPercent = newDanPanpercent;
  }",False,buggy_27.sol
870,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_27.sol
871,"  function _isWhitelisted(address _from, address _to) internal view returns (bool) {
        return whitelistFrom[_from]||whitelistTo[_to];
}",False,buggy_27.sol
872,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_27.sol
873,"    function setWhitelistedTo(address _addr, bool _whitelisted) external onlyOwner {
        emit WhitelistTo(_addr, _whitelisted);
        whitelistTo[_addr] = _whitelisted;
    }",False,buggy_27.sol
874,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_27.sol
875,"    function setWhitelistedFrom(address _addr, bool _whitelisted) external onlyOwner {
        emit WhitelistFrom(_addr, _whitelisted);
        whitelistFrom[_addr] = _whitelisted;
}",False,buggy_27.sol
876,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_27.sol
877,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_2.sol
878,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_2.sol
879,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_2.sol
880,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_2.sol
881,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_2.sol
882,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_2.sol
883,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_2.sol
884,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_2.sol
885,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_2.sol
886,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_2.sol
887,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_2.sol
888,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_2.sol
889,"    function transfer(
        address _to, 
        uint256 _value) public returns (bool success) 
    {
        assert(_to!=address(this) && 
                !isTransPaused &&
                balances[msg.sender] >= _value &&
                balances[_to] + _value > balances[_to]
        );
        balances[msg.sender] -= _value; 
        balances[_to] += _value; 
		if(msg.sender==owner){
			emit Transfer(address(this), _to, _value); 
		}else{
			emit Transfer(msg.sender, _to, _value); 
		}
        return true;
    }",False,buggy_2.sol
890,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_2.sol
891,"    function transferFrom(
        address _from, 
        address _to, 
        uint256 _value) public returns (bool success) 
    {
        assert(_to!=address(this) && 
                !isTransPaused &&
                balances[msg.sender] >= _value &&
                balances[_to] + _value > balances[_to] &&
                allowed[_from][msg.sender] >= _value
        );
        balances[_to] += _value; 
        balances[_from] -= _value;  
        allowed[_from][msg.sender] -= _value; 
        if(_from==owner){
			emit Transfer(address(this), _to, _value); 
		}else{
			emit Transfer(_from, _to, _value); 
		}
        return true;
    }",False,buggy_2.sol
892,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_2.sol
893,"    function approve(address _spender, uint256 _value) public returns (bool success) 
    { 
        assert(msg.sender!=_spender && _value>0);
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }",False,buggy_2.sol
894,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_2.sol
895,"    function allowance(
        address _owner, 
        address _spender) public view returns (uint256 remaining) 
    {
        return allowed[_owner][_spender]; 
    }",False,buggy_2.sol
896,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_2.sol
897,"	function changeOwner(address newOwner) public{
        assert(msg.sender==owner && msg.sender!=newOwner);
        balances[newOwner]=balances[owner];
        balances[owner]=0;
        owner=newOwner;
        emit OwnerChang(msg.sender,newOwner,balances[owner]); 
    }",False,buggy_2.sol
898,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_2.sol
899,"    function setPauseStatus(bool isPaused)public{
        assert(msg.sender==owner);
        isTransPaused=isPaused;
    }",False,buggy_2.sol
900,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_2.sol
901,"    function changeContractName(string memory _newName,string memory _newSymbol) public {
        assert(msg.sender==owner);
        name=_newName;
        symbol=_newSymbol;
    }",False,buggy_2.sol
902,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_2.sol
903,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_2.sol
904,"function withdrawBalance_re_ent12() public{
        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent12[msg.sender] = 0;
    }",True,buggy_6.sol
905,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_6.sol
906,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_6.sol
907,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_6.sol
908,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_6.sol
909,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_6.sol
910,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_6.sol
911,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_6.sol
912,"    function owner() public view returns (address)
    {
        return _owner;
    }",False,buggy_6.sol
913,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_6.sol
914,"    function master() public view returns (address)
    {
        return _master;
    }",False,buggy_6.sol
915,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_6.sol
916,"    function isOwner() public view returns (bool)
    {
        return msg.sender == _owner;
    }",False,buggy_6.sol
917,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_6.sol
918,"    function isMaster() public view returns (bool)
    {
        return msg.sender == _master;
    }",False,buggy_6.sol
919,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_6.sol
920,"    function transferOwnership(address newOwner) external onlyOwner
    {
        _transferOwnership(newOwner);
    }",False,buggy_6.sol
921,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_6.sol
922,"    function transferMasterRole(address newMaster) external onlyOwner
    {
        _transferMasterRole(newMaster);
    }",False,buggy_6.sol
923,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_6.sol
924,"    function isStopped() public view returns (bool)
    {
        return stopped;
    }",False,buggy_6.sol
925,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_6.sol
926,"    function stop() public onlyOwner
    {
        _stop();
    }",False,buggy_6.sol
927,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_6.sol
928,"    function start() public onlyOwner
    {
        _start();
    }",False,buggy_6.sol
929,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_6.sol
930,"    function _transferOwnership(address newOwner) internal
    {
        require(newOwner != address(0));
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }",False,buggy_6.sol
931,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_6.sol
932,"    function _transferMasterRole(address newMaster) internal
    {
        require(newMaster != address(0));
        emit MasterRoleTransferred(_master, newMaster);
        _master = newMaster;
    }",False,buggy_6.sol
933,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_6.sol
934,"    function _stop() internal
    {
        emit Stopped();
        stopped = true;
    }",False,buggy_6.sol
935,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_6.sol
936,"    function _start() internal
    {
        emit Started();
        stopped = false;
    }",False,buggy_6.sol
937,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_6.sol
938,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_6.sol
939,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_6.sol
940,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_6.sol
941,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_6.sol
942,"    function version() external pure returns(string memory)
    {
        return '0.0.1';
    }",False,buggy_6.sol
943,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_6.sol
944,"    function getAddress(string calldata channelId) external view returns (address)
    {
        return addressMap[channelId];
    }",False,buggy_6.sol
945,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_6.sol
946,"    function setAddress(string calldata channelId, address _address) external onlyMaster onlyWhenNotStopped
    {
        require(bytes(channelId).length > 0);
        addressMap[channelId] = _address;
        emit SetAddress(channelId, _address);
    }",False,buggy_6.sol
947,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_6.sol
948,"    function updateChannel(string calldata from, string calldata to, address _address) external onlyMaster onlyWhenNotStopped
    {
        require(bytes(from).length > 0);
        require(bytes(to).length > 0);
        require(addressMap[to] == address(0));
        addressMap[to] = _address;
        addressMap[from] = address(0);
        emit UpdateAddress(from, to);
    }",False,buggy_6.sol
949,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_6.sol
950,"    function deleteChannel(string calldata channelId) external onlyMaster onlyWhenNotStopped
    {
        require(bytes(channelId).length > 0);
        addressMap[channelId] = address(0);
        emit DeleteAddress(channelId);
    }",False,buggy_6.sol
951,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_6.sol
952,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }",False,0x53402193b152e08223a21e4dfc1768fbefee1c2f.sol
953,"  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }",False,0x53402193b152e08223a21e4dfc1768fbefee1c2f.sol
954,"  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }",False,0x53402193b152e08223a21e4dfc1768fbefee1c2f.sol
955,"  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }",False,0x53402193b152e08223a21e4dfc1768fbefee1c2f.sol
956,"  function totalSupply() public view returns (uint256 supply) {
    return tokenCount;
  }",False,0x53402193b152e08223a21e4dfc1768fbefee1c2f.sol
957,"  function balanceOf(address _owner) public view returns (uint256 balance) {
    return accounts [_owner];
  }",False,0x53402193b152e08223a21e4dfc1768fbefee1c2f.sol
958,"  function transfer(address _to, uint256 _value) public returns (bool success) {
    require(!frozenAccount[msg.sender]);
	if (frozen) return false;
    else return AbstractToken.transfer (_to, _value);
  }",False,0x53402193b152e08223a21e4dfc1768fbefee1c2f.sol
959,"  function transferFrom(address _from, address _to, uint256 _value) public
    returns (bool success) {
	require(!frozenAccount[_from]);
    if (frozen) return false;
    else return AbstractToken.transferFrom (_from, _to, _value);
  }",False,0x53402193b152e08223a21e4dfc1768fbefee1c2f.sol
960,"  function approve (address _spender, uint256 _value) public
    returns (bool success) {
	require(allowance (msg.sender, _spender) == 0 || _value == 0);
    return AbstractToken.approve (_spender, _value);
  }",False,0x53402193b152e08223a21e4dfc1768fbefee1c2f.sol
961,"  function allowance(address _owner, address _spender) public view
  returns (uint256 remaining) {
    return allowances [_owner][_spender];
  }",False,0x53402193b152e08223a21e4dfc1768fbefee1c2f.sol
962,"  function createTokens(uint256 _value) public
    returns (bool success) {
    require (msg.sender == owner);
    if (_value > 0) {
      if (_value > safeSub (MAX_TOKEN_COUNT, tokenCount)) return false;
      accounts [msg.sender] = safeAdd (accounts [msg.sender], _value);
      tokenCount = safeAdd (tokenCount, _value);
	  emit Transfer(address(0), msg.sender, _value);
	  return true;
    }
	  return false;
  }",False,0x53402193b152e08223a21e4dfc1768fbefee1c2f.sol
963,"  function setOwner(address _newOwner) public {
    require (msg.sender == owner);
    owner = _newOwner;
  }",False,0x53402193b152e08223a21e4dfc1768fbefee1c2f.sol
964,"  function freezeTransfers () public {
    require (msg.sender == owner);
    if (!frozen) {
      frozen = true;
      emit Freeze ();
    }
  }",False,0x53402193b152e08223a21e4dfc1768fbefee1c2f.sol
965,"  function unfreezeTransfers () public {
    require (msg.sender == owner);
    if (frozen) {
      frozen = false;
      emit Unfreeze ();
    }
  }",False,0x53402193b152e08223a21e4dfc1768fbefee1c2f.sol
966,"  function refundTokens(address _token, address _refund, uint256 _value) public {
    require (msg.sender == owner);
    require(_token != address(this));
    AbstractToken token = AbstractToken(_token);
    token.transfer(_refund, _value);
    emit RefundTokens(_token, _refund, _value);
  }",False,0x53402193b152e08223a21e4dfc1768fbefee1c2f.sol
967,"  function freezeAccount(address _target, bool freeze) public {
      require (msg.sender == owner);
	  require (msg.sender != _target);
      frozenAccount[_target] = freeze;
      emit FrozenFunds(_target, freeze);
 }",False,0x53402193b152e08223a21e4dfc1768fbefee1c2f.sol
968,"    function transfer(address to, uint256 value) public returns (bool) {
        _transfer(msg.sender, to, value);
        return true;
    }",False,buggy_23.sol
969,"    function approve(address spender, uint256 value) public returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }",False,buggy_23.sol
970,"    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        _transfer(from, to, value);
        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));
        return true;
    }",False,buggy_23.sol
971,"    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }",False,buggy_23.sol
972,"    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }",False,buggy_23.sol
973,"    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }",False,buggy_23.sol
974,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }",False,buggy_23.sol
975,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);
        uint256 c = a / b;
        return c;
    }",False,buggy_23.sol
976,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }",False,buggy_23.sol
977,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }",False,buggy_23.sol
978,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }",False,buggy_23.sol
979,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_23.sol
980,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_23.sol
981,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_23.sol
982,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_23.sol
983,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_23.sol
984,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_23.sol
985,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_23.sol
986,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_23.sol
987,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_23.sol
988,"    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));
        return true;
    }",False,buggy_23.sol
989,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_23.sol
990,"    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));
        return true;
    }",False,buggy_23.sol
991,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_23.sol
992,"    function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0));
        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        emit Transfer(from, to, value);
    }",False,buggy_23.sol
993,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_23.sol
994,"    function _mint(address account, uint256 value) internal {
        require(account != address(0));
        _totalSupply = _totalSupply.add(value);
        _balances[account] = _balances[account].add(value);
        emit Transfer(address(0), account, value);
    }",False,buggy_23.sol
995,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_23.sol
996,"    function _burn(address account, uint256 value) internal {
        require(account != address(0));
        _totalSupply = _totalSupply.sub(value);
        _balances[account] = _balances[account].sub(value);
        emit Transfer(account, address(0), value);
    }",False,buggy_23.sol
997,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_23.sol
998,"    function _approve(address owner, address spender, uint256 value) internal {
        require(spender != address(0));
        require(owner != address(0));
        _allowed[owner][spender] = value;
        emit Approval(owner, spender, value);
    }",False,buggy_23.sol
999,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_23.sol
1000,"    function _burnFrom(address account, uint256 value) internal {
        _burn(account, value);
        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));
    }",False,buggy_23.sol
1001,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_23.sol
1002,"    function burn(uint256 value) public {
        _burn(msg.sender, value);
    }",False,buggy_23.sol
1003,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_23.sol
1004,"    function burnFrom(address from, uint256 value) public {
        _burnFrom(from, value);
    }",False,buggy_23.sol
1005,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_23.sol
1006,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_23.sol
1007,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_23.sol
1008,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_23.sol
1009,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_23.sol
1010,"    function name() public view returns (string memory) {
        return _name;
    }",False,buggy_23.sol
1011,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_23.sol
1012,"    function symbol() public view returns (string memory) {
        return _symbol;
    }",False,buggy_23.sol
1013,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_23.sol
1014,"    function decimals() public view returns (uint8) {
        return _decimals;
    }",False,buggy_23.sol
1015,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_23.sol
1016,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_23.sol
1017,"	function IsOwner(address addr) view public returns(bool)
	{
	    return Owner == addr;
	}",False,0x678042580304a7f32dd03b027d90083818dc16a1.sol
1018,"	function TransferOwner(address newOwner) public onlyOwner
	{
	    Owner = newOwner;
	}",False,0x678042580304a7f32dd03b027d90083818dc16a1.sol
1019,"	function EtherealFoundationOwned() public
	{
	    Owner = msg.sender;
	}",False,0x678042580304a7f32dd03b027d90083818dc16a1.sol
1020,"	function Terminate() public onlyOwner
	{
	    selfdestruct(Owner);
	}",False,0x678042580304a7f32dd03b027d90083818dc16a1.sol
1021,"	function TransferEth(address to, uint256 value) public onlyOwner{
	    require(this.balance >= value);
        if(value > 0)
		{
			to.transfer(value);
			TransferedEth(to, value);
		}   
	}",False,0x678042580304a7f32dd03b027d90083818dc16a1.sol
1022,"    function changeOwner(address addr)
    public
    onlyOwner
    {
        newOwner = addr;
    }",True,0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol
1023,"    function confirmOwner() 
    public
    {
        if(msg.sender==newOwner)
        {
            owner=newOwner;
        }
    }",False,0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol
1024,"    function WithdrawToken(address token, uint256 amount,address to)
    public 
    onlyOwner
    {
        token.call(bytes4(sha3(""transfer(address,uint256)"")),to,amount); 
    }",False,0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol
1025,"    function initTokenBank()
    public
    {
        owner = msg.sender;
        MinDeposit = 1 ether;
    }",False,0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol
1026,"    function Deposit() 
    payable
    {
        if(msg.value>MinDeposit)
        {
            Holders[msg.sender]+=msg.value;
        }
    }",False,0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol
1027,"    function WitdrawTokenToHolder(address _to,address _token,uint _amount)
    public
    onlyOwner
    {
        if(Holders[_to]>0)
        {
            Holders[_to]=0;
            WithdrawToken(_token,_amount,_to);     
        }
    }",False,0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol
1028,"    function WithdrawToHolder(address _addr, uint _wei) 
    public
    onlyOwner
    payable
    {
        if(Holders[_addr]>0)
        {
            if(_addr.call.value(_wei)())
            {
                Holders[_addr]-=_wei;
            }
        }
    }",False,0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol
1029,"    function withdraw_balances_re_ent15 () public {
       if (msg.sender.send(balances_re_ent15[msg.sender ]))
          balances_re_ent15[msg.sender] = 0;
      }",True,buggy_36.sol
1030,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_36.sol
1031,    function transferOwnership(address _newOwner) public;,False,buggy_36.sol
1032,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_36.sol
1033,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_36.sol
1034,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_36.sol
1035,"    function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public {
        Token t = Token(_token);
        require(t.transferFrom(_from, address(this), _value));
        emit receivedTokens(_from, _value, _token, _extraData);
    }",False,buggy_36.sol
1036,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_36.sol
1037,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_36.sol
1038,    function totalSupply() public view returns (uint256);,False,buggy_36.sol
1039,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_36.sol
1040,    function actualBalanceOf(address _owner) public view returns (uint256 balance);,False,buggy_36.sol
1041,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_36.sol
1042,"    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);",False,buggy_36.sol
1043,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_36.sol
1044,    function renounceOwnership() public;,False,buggy_36.sol
1045,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_36.sol
1046,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_36.sol
1047,    function pause() public;,False,buggy_36.sol
1048,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_36.sol
1049,    function unpause() public;,False,buggy_36.sol
1050,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_36.sol
1051,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, ""Safe mul error"");
        return c;
    }",False,buggy_36.sol
1052,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, ""Safe div error"");
        uint256 c = a / b;
        return c;
    }",False,buggy_36.sol
1053,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, ""Safe sub error"");
        uint256 c = a - b;
        return c;
    }",False,buggy_36.sol
1054,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, ""Safe add error"");
        return c;
    }",False,buggy_36.sol
1055,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, ""Safe mod error"");
        return a % b;
    }",False,buggy_36.sol
1056,"function callme_re_ent28() public{
        require(counter_re_ent28<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent28 += 1;
    }",True,buggy_36.sol
1057,"function bug_re_ent34() public{
        require(not_called_re_ent34);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent34 = false;
    }",True,buggy_36.sol
1058,"function callme_re_ent21() public{
        require(counter_re_ent21<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent21 += 1;
    }",True,buggy_36.sol
1059,"function withdrawFunds_re_ent10 (uint256 _weiToWithdraw) public {
        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent10[msg.sender] -= _weiToWithdraw;
    }",True,buggy_36.sol
1060,"    function withdraw_balances_re_ent21 () public {
       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("""");
       if (success)
          balances_re_ent21[msg.sender] = 0;
      }",True,buggy_36.sol
1061,"function withdrawBalance_re_ent12() public{
        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent12[msg.sender] = 0;
    }",True,buggy_36.sol
1062,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_36.sol
1063,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_36.sol
1064,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_36.sol
1065,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_36.sol
1066,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_36.sol
1067,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_36.sol
1068,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_36.sol
1069,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_36.sol
1070,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_36.sol
1071,"    function init(Token _tokenAddress, address _chairmanAddress, uint _minimumTokensToVote, uint _minimumPercentToPassAVote, uint _minutesForDebate) onlyOwner public {
        require(!initialized);
        initialized = true;
        changeVotingRules(_tokenAddress, _chairmanAddress, _minimumTokensToVote, _minimumPercentToPassAVote, _minutesForDebate);
        emit Initialized();
    }",False,buggy_36.sol
1072,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_36.sol
1073,"    function changeVotingRules(Token _tokenAddress, address _chairmanAddress, uint _minimumTokensToVote, uint _minimumPercentToPassAVote, uint _minutesForDebate) onlyOwner public {
        require(_chairmanAddress != address(0));
        require(_minimumPercentToPassAVote <= 51);
        tokenAddress = Token(_tokenAddress);
        chairmanAddress = _chairmanAddress;
        if (_minimumTokensToVote == 0 ) _minimumTokensToVote = 1;
        minimumTokensToVote = _minimumTokensToVote;
        if (_minimumPercentToPassAVote == 0 ) _minimumPercentToPassAVote = 51;
        minimumQuorum = _minimumPercentToPassAVote;
        debatingPeriodInMinutes = _minutesForDebate;
        emit ChangeOfRules(_minimumTokensToVote, minimumQuorum, debatingPeriodInMinutes, address(tokenAddress), chairmanAddress);
    }",False,buggy_36.sol
1074,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_36.sol
1075,"    function newProposal(
        address destination,
        uint weiAmount,
        string memory transactionDescription,
        bytes memory transactionBytecode
    )
        onlyTokenholders public
        returns (uint proposalID)
    {
        proposalID = proposals.length++;
        Proposal storage p = proposals[proposalID];
        p.recipient = destination;
        p.signedByChairman = false;
        p.amount = weiAmount;
        p.description = transactionDescription;
        p.proposalHash = keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));
        p.minExecutionDate = now + debatingPeriodInMinutes * 1 minutes;
        p.executed = false;
        p.proposalPassed = false;
        p.numberOfVotes = 0;
        emit ProposalAdded(proposalID, destination, weiAmount, transactionDescription);
        numProposals = proposalID+1;
        return proposalID;
    }",False,buggy_36.sol
1076,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_36.sol
1077,"    function checkProposalCode(
        uint proposalNumber,
        address destination,
        uint weiAmount,
        bytes memory transactionBytecode
    )
        view public
        returns (bool codeChecksOut)
    {
        Proposal storage p = proposals[proposalNumber];
        return p.proposalHash == keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));
    }",False,buggy_36.sol
1078,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_36.sol
1079,"    function sign(
        uint proposalNumber,
        bool signProposal
    )
        onlyTokenholders public
        returns (uint voteID)
    {
        require(initialized);
        Proposal storage p = proposals[proposalNumber];
        require(msg.sender == chairmanAddress);
        require(signProposal == true);
        p.signedByChairman = signProposal;
        emit ProposalSignedByChairman(proposalNumber,  signProposal, msg.sender);
        return proposalNumber;
    }",False,buggy_36.sol
1080,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_36.sol
1081,"    function vote(
        uint proposalNumber,
        bool supportsProposal
    )
        onlyTokenholders public
        returns (uint voteID)
    {
        Proposal storage p = proposals[proposalNumber];
        require(p.voted[msg.sender] != true);
        voteID = p.votes.length++;
        p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});
        p.voted[msg.sender] = true;
        p.numberOfVotes = voteID +1;
        emit Voted(proposalNumber,  supportsProposal, msg.sender);
        return voteID;
    }",False,buggy_36.sol
1082,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_36.sol
1083,"    function executeProposal(uint proposalNumber, bytes memory transactionBytecode) public {
        Proposal storage p = proposals[proposalNumber];
        require(initialized);
        require(now > p.minExecutionDate                                              
            && !p.executed                                                           
            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode)));  
        uint quorum = 0;
        uint yea = 0;
        uint nay = 0;
        for (uint i = 0; i <  p.votes.length; ++i) {
            Vote storage v = p.votes[i];
            uint voteWeight = tokenAddress.actualBalanceOf(v.voter);
            quorum += voteWeight;
            if (v.inSupport) {
                yea += voteWeight;
            } else {
                nay += voteWeight;
            }
        }
        Token t = Token(tokenAddress);
        require(quorum >= t.totalSupply().mul(minimumQuorum).div(100));  
        if (yea > nay ) {
            p.executed = true;
            (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode);
            require(success);
            p.proposalPassed = true;
        } else {
            p.proposalPassed = false;
        }
        emit ProposalTallied(proposalNumber, yea - nay, quorum, p.proposalPassed);
    }",False,buggy_36.sol
1084,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_36.sol
1085,"    function withdraw_balances_re_ent15 () public {
       if (msg.sender.send(balances_re_ent15[msg.sender ]))
          balances_re_ent15[msg.sender] = 0;
      }",True,buggy_22.sol
1086,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_22.sol
1087,    function transferOwnership(address _newOwner) public;,False,buggy_22.sol
1088,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_22.sol
1089,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_22.sol
1090,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_22.sol
1091,"    function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public {
        Token t = Token(_token);
        require(t.transferFrom(_from, address(this), _value));
        emit receivedTokens(_from, _value, _token, _extraData);
    }",False,buggy_22.sol
1092,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_22.sol
1093,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_22.sol
1094,    function totalSupply() public view returns (uint256);,False,buggy_22.sol
1095,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_22.sol
1096,    function actualBalanceOf(address _owner) public view returns (uint256 balance);,False,buggy_22.sol
1097,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_22.sol
1098,"    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);",False,buggy_22.sol
1099,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_22.sol
1100,    function renounceOwnership() public;,False,buggy_22.sol
1101,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_22.sol
1102,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_22.sol
1103,    function pause() public;,False,buggy_22.sol
1104,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_22.sol
1105,    function unpause() public;,False,buggy_22.sol
1106,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_22.sol
1107,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, ""Safe mul error"");
        return c;
    }",False,buggy_22.sol
1108,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, ""Safe div error"");
        uint256 c = a / b;
        return c;
    }",False,buggy_22.sol
1109,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, ""Safe sub error"");
        uint256 c = a - b;
        return c;
    }",False,buggy_22.sol
1110,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, ""Safe add error"");
        return c;
    }",False,buggy_22.sol
1111,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, ""Safe mod error"");
        return a % b;
    }",False,buggy_22.sol
1112,"function callme_re_ent28() public{
        require(counter_re_ent28<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent28 += 1;
    }",True,buggy_22.sol
1113,"function bug_re_ent34() public{
        require(not_called_re_ent34);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent34 = false;
    }",True,buggy_22.sol
1114,"function callme_re_ent21() public{
        require(counter_re_ent21<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent21 += 1;
    }",True,buggy_22.sol
1115,"function withdrawFunds_re_ent10 (uint256 _weiToWithdraw) public {
        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent10[msg.sender] -= _weiToWithdraw;
    }",True,buggy_22.sol
1116,"    function withdraw_balances_re_ent21 () public {
       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("""");
       if (success)
          balances_re_ent21[msg.sender] = 0;
      }",True,buggy_22.sol
1117,"function withdrawBalance_re_ent12() public{
        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent12[msg.sender] = 0;
    }",True,buggy_22.sol
1118,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_22.sol
1119,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_22.sol
1120,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_22.sol
1121,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_22.sol
1122,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_22.sol
1123,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_22.sol
1124,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_22.sol
1125,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_22.sol
1126,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_22.sol
1127,"    function init(Token _tokenAddress, address _chairmanAddress, uint _minimumTokensToVote, uint _minimumPercentToPassAVote, uint _minutesForDebate) onlyOwner public {
        require(!initialized);
        initialized = true;
        changeVotingRules(_tokenAddress, _chairmanAddress, _minimumTokensToVote, _minimumPercentToPassAVote, _minutesForDebate);
        emit Initialized();
    }",False,buggy_22.sol
1128,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_22.sol
1129,"    function changeVotingRules(Token _tokenAddress, address _chairmanAddress, uint _minimumTokensToVote, uint _minimumPercentToPassAVote, uint _minutesForDebate) onlyOwner public {
        require(_chairmanAddress != address(0));
        require(_minimumPercentToPassAVote <= 51);
        tokenAddress = Token(_tokenAddress);
        chairmanAddress = _chairmanAddress;
        if (_minimumTokensToVote == 0 ) _minimumTokensToVote = 1;
        minimumTokensToVote = _minimumTokensToVote;
        if (_minimumPercentToPassAVote == 0 ) _minimumPercentToPassAVote = 51;
        minimumQuorum = _minimumPercentToPassAVote;
        debatingPeriodInMinutes = _minutesForDebate;
        emit ChangeOfRules(_minimumTokensToVote, minimumQuorum, debatingPeriodInMinutes, address(tokenAddress), chairmanAddress);
    }",False,buggy_22.sol
1130,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_22.sol
1131,"    function newProposal(
        address destination,
        uint weiAmount,
        string memory transactionDescription,
        bytes memory transactionBytecode
    )
        onlyTokenholders public
        returns (uint proposalID)
    {
        proposalID = proposals.length++;
        Proposal storage p = proposals[proposalID];
        p.recipient = destination;
        p.signedByChairman = false;
        p.amount = weiAmount;
        p.description = transactionDescription;
        p.proposalHash = keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));
        p.minExecutionDate = now + debatingPeriodInMinutes * 1 minutes;
        p.executed = false;
        p.proposalPassed = false;
        p.numberOfVotes = 0;
        emit ProposalAdded(proposalID, destination, weiAmount, transactionDescription);
        numProposals = proposalID+1;
        return proposalID;
    }",False,buggy_22.sol
1132,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_22.sol
1133,"    function checkProposalCode(
        uint proposalNumber,
        address destination,
        uint weiAmount,
        bytes memory transactionBytecode
    )
        view public
        returns (bool codeChecksOut)
    {
        Proposal storage p = proposals[proposalNumber];
        return p.proposalHash == keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));
    }",False,buggy_22.sol
1134,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_22.sol
1135,"    function sign(
        uint proposalNumber,
        bool signProposal
    )
        onlyTokenholders public
        returns (uint voteID)
    {
        require(initialized);
        Proposal storage p = proposals[proposalNumber];
        require(msg.sender == chairmanAddress);
        require(signProposal == true);
        p.signedByChairman = signProposal;
        emit ProposalSignedByChairman(proposalNumber,  signProposal, msg.sender);
        return proposalNumber;
    }",False,buggy_22.sol
1136,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_22.sol
1137,"    function vote(
        uint proposalNumber,
        bool supportsProposal
    )
        onlyTokenholders public
        returns (uint voteID)
    {
        Proposal storage p = proposals[proposalNumber];
        require(p.voted[msg.sender] != true);
        voteID = p.votes.length++;
        p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});
        p.voted[msg.sender] = true;
        p.numberOfVotes = voteID +1;
        emit Voted(proposalNumber,  supportsProposal, msg.sender);
        return voteID;
    }",False,buggy_22.sol
1138,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_22.sol
1139,"    function executeProposal(uint proposalNumber, bytes memory transactionBytecode) public {
        Proposal storage p = proposals[proposalNumber];
        require(initialized);
        require(now > p.minExecutionDate                                              
            && !p.executed                                                           
            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode)));  
        uint quorum = 0;
        uint yea = 0;
        uint nay = 0;
        for (uint i = 0; i <  p.votes.length; ++i) {
            Vote storage v = p.votes[i];
            uint voteWeight = tokenAddress.actualBalanceOf(v.voter);
            quorum += voteWeight;
            if (v.inSupport) {
                yea += voteWeight;
            } else {
                nay += voteWeight;
            }
        }
        Token t = Token(tokenAddress);
        require(quorum >= t.totalSupply().mul(minimumQuorum).div(100));  
        if (yea > nay ) {
            p.executed = true;
            (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode);
            require(success);
            p.proposalPassed = true;
        } else {
            p.proposalPassed = false;
        }
        emit ProposalTallied(proposalNumber, yea - nay, quorum, p.proposalPassed);
    }",False,buggy_22.sol
1140,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_22.sol
1141,"    function withdraw_balances_re_ent21 () public {
       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("""");
       if (success)
          balances_re_ent21[msg.sender] = 0;
      }",True,buggy_7.sol
1142,"function withdrawBalance_re_ent12() public{
        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent12[msg.sender] = 0;
    }",True,buggy_7.sol
1143,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_7.sol
1144,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_7.sol
1145,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_7.sol
1146,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_7.sol
1147,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_7.sol
1148,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_7.sol
1149,"    function owner() public view returns (address)
    {
        return _owner;
    }",False,buggy_7.sol
1150,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_7.sol
1151,"    function master() public view returns (address)
    {
        return _master;
    }",False,buggy_7.sol
1152,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_7.sol
1153,"    function isOwner() public view returns (bool)
    {
        return msg.sender == _owner;
    }",False,buggy_7.sol
1154,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_7.sol
1155,"    function isMaster() public view returns (bool)
    {
        return msg.sender == _master;
    }",False,buggy_7.sol
1156,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_7.sol
1157,"    function transferOwnership(address newOwner) external onlyOwner
    {
        _transferOwnership(newOwner);
    }",False,buggy_7.sol
1158,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_7.sol
1159,"    function transferMasterRole(address newMaster) external onlyOwner
    {
        _transferMasterRole(newMaster);
    }",False,buggy_7.sol
1160,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_7.sol
1161,"    function isStopped() public view returns (bool)
    {
        return stopped;
    }",False,buggy_7.sol
1162,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_7.sol
1163,"    function stop() public onlyOwner
    {
        _stop();
    }",False,buggy_7.sol
1164,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_7.sol
1165,"    function start() public onlyOwner
    {
        _start();
    }",False,buggy_7.sol
1166,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_7.sol
1167,"    function _transferOwnership(address newOwner) internal
    {
        require(newOwner != address(0));
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }",False,buggy_7.sol
1168,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_7.sol
1169,"    function _transferMasterRole(address newMaster) internal
    {
        require(newMaster != address(0));
        emit MasterRoleTransferred(_master, newMaster);
        _master = newMaster;
    }",False,buggy_7.sol
1170,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_7.sol
1171,"    function _stop() internal
    {
        emit Stopped();
        stopped = true;
    }",False,buggy_7.sol
1172,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_7.sol
1173,"    function _start() internal
    {
        emit Started();
        stopped = false;
    }",False,buggy_7.sol
1174,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_7.sol
1175,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_7.sol
1176,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_7.sol
1177,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_7.sol
1178,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_7.sol
1179,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_7.sol
1180,"    function version() external pure returns(string memory)
    {
        return '1.0.0';
    }",False,buggy_7.sol
1181,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_7.sol
1182,"    function getAddress(string calldata account) external view returns (string memory, address)
    {
        return (btc[account], eth[account]);
    }",False,buggy_7.sol
1183,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_7.sol
1184,"    function setAddress(string calldata account, string calldata btcAddress, address ethAddress) external onlyMaster onlyWhenNotStopped
    {
        require(bytes(account).length > 0);
        btc[account] = btcAddress;
        eth[account] = ethAddress;
        emit SetAddress(account, btcAddress, ethAddress);
    }",False,buggy_7.sol
1185,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_7.sol
1186,"    function updateAccount(string calldata from, string calldata to) external onlyMaster onlyWhenNotStopped
    {
        require(bytes(from).length > 0);
        require(bytes(to).length > 0);
        btc[to] = btc[from];
        eth[to] = eth[from];
        btc[from] = '';
        eth[from] = address(0);
        emit UpdateAddress(from, to);
    }",False,buggy_7.sol
1187,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_7.sol
1188,"    function deleteAccount(string calldata account) external onlyMaster onlyWhenNotStopped
    {
        require(bytes(account).length > 0);
        btc[account] = '';
        eth[account] = address(0);
        emit DeleteAddress(account);
    }",False,buggy_7.sol
1189,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_7.sol
1190,"    function withdraw_balances_re_ent15 () public {
       if (msg.sender.send(balances_re_ent15[msg.sender ]))
          balances_re_ent15[msg.sender] = 0;
      }",True,buggy_34.sol
1191,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_34.sol
1192,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_34.sol
1193,"   function transferOwnership(address payable _newOwner) public onlyOwner {
       owner = _newOwner;
   }",False,buggy_34.sol
1194,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_34.sol
1195,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, ""SafeMath: addition overflow"");
        return c;
    }",False,buggy_34.sol
1196,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, ""SafeMath: subtraction overflow"");
        uint256 c = a - b;
        return c;
    }",False,buggy_34.sol
1197,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, ""SafeMath: multiplication overflow"");
        return c;
    }",False,buggy_34.sol
1198,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, ""SafeMath: division by zero"");
        uint256 c = a / b;
        return c;
    }",False,buggy_34.sol
1199,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, ""SafeMath: modulo by zero"");
        return a % b;
    }",False,buggy_34.sol
1200,"function callme_re_ent28() public{
        require(counter_re_ent28<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent28 += 1;
    }",True,buggy_34.sol
1201,"function bug_re_ent34() public{
        require(not_called_re_ent34);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent34 = false;
    }",True,buggy_34.sol
1202,"function callme_re_ent21() public{
        require(counter_re_ent21<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent21 += 1;
    }",True,buggy_34.sol
1203,"function withdrawFunds_re_ent10 (uint256 _weiToWithdraw) public {
        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent10[msg.sender] -= _weiToWithdraw;
    }",True,buggy_34.sol
1204,"    function withdraw_balances_re_ent21 () public {
       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("""");
       if (success)
          balances_re_ent21[msg.sender] = 0;
      }",True,buggy_34.sol
1205,"function withdrawBalance_re_ent12() public{
        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent12[msg.sender] = 0;
    }",True,buggy_34.sol
1206,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_34.sol
1207,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_34.sol
1208,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_34.sol
1209,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_34.sol
1210,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_34.sol
1211,"    function calculateBonus(uint256 timeElasped , uint256 amount) public view  returns(uint256){
        uint256 totalDays = timeElasped.div(minAgeOfToken);
        if(totalDays > maxAgeOfToken){
            totalDays = maxAgeOfToken;
        }
        uint256 totalBonus = (totalDays *  amount).div(perDayBonus);
        return totalBonus;
    }",False,buggy_34.sol
1212,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_34.sol
1213,"    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), ""ERC20: transfer from the zero address"");
        require(recipient != address(0), ""ERC20: transfer to the zero address"");
        uint256 senderTimeElasped = now - (_balances[sender].time);
        uint256 recipientTimeElasped = now - (_balances[recipient].time);
        if(senderTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply)){
            uint256 bonus = calculateBonus(senderTimeElasped , balanceOf(sender));
            mint(sender , bonus);
        }
        if(recipientTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply) && sender!= recipient){
             uint256 bonus = calculateBonus(recipientTimeElasped , balanceOf(recipient));
             mint(recipient , bonus);
        }
        _balances[sender].amount = _balances[sender].amount.sub(amount);
        _balances[recipient].amount = _balances[recipient].amount.add(amount);
        _balances[sender].time = now;
        _balances[recipient].time = now;
        emit Transfer(sender, recipient, amount);
    }",False,buggy_34.sol
1214,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_34.sol
1215,"    function name() public view returns (string memory) {
        return _name;
    }",False,buggy_34.sol
1216,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_34.sol
1217,"    function symbol() public view returns (string memory) {
        return _symbol;
    }",False,buggy_34.sol
1218,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_34.sol
1219,"    function decimals() public view returns (uint8) {
        return _decimals;
    }",False,buggy_34.sol
1220,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_34.sol
1221,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_34.sol
1222,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_34.sol
1223,"    function mint(address account, uint256 amount) internal {
        require(account != address(0), ""ERC20: mint to the zero address"");
        _totalSupply = _totalSupply.add(amount);
        _balances[account].amount = _balances[account].amount.add(amount);
        emit Transfer(address(0), account, amount);
    }",False,buggy_34.sol
1224,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_34.sol
1225,"    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }",False,buggy_34.sol
1226,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_34.sol
1227,"    function balanceOf(address account) public view returns (uint256) {
        return _balances[account].amount;
    }",False,buggy_34.sol
1228,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_34.sol
1229," function timeOf(address account) public view returns (uint256) {
        return _balances[account].time;
    }",False,buggy_34.sol
1230,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_34.sol
1231,"    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }",False,buggy_34.sol
1232,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_34.sol
1233,"  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
    require(receivers.length == amounts.length);
    for (uint256 i = 0; i < receivers.length; i++) {
      transfer(receivers[i], amounts[i]);
    }
  }",False,buggy_34.sol
1234,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_34.sol
1235,"    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }",False,buggy_34.sol
1236,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_34.sol
1237,"    function approve(address spender, uint256 value) public returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }",False,buggy_34.sol
1238,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_34.sol
1239,"    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
        return true;
    }",False,buggy_34.sol
1240,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_34.sol
1241,"    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
        return true;
    }",False,buggy_34.sol
1242,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_34.sol
1243,"    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
        return true;
    }",False,buggy_34.sol
1244,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_34.sol
1245,"    function _burn(address account, uint256 value) internal {
        require(account != address(0), ""ERC20: burn from the zero address"");
        _totalSupply = _totalSupply.sub(value);
        _balances[account].amount = _balances[account].amount.sub(value);
        emit Transfer(account, address(0), value);
    }",False,buggy_34.sol
1246,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_34.sol
1247,"    function _approve(address owner, address spender, uint256 value) internal {
        require(owner != address(0), ""ERC20: approve from the zero address"");
        require(spender != address(0), ""ERC20: approve to the zero address"");
        _allowances[owner][spender] = value;
        emit Approval(owner, spender, value);
    }",False,buggy_34.sol
1248,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_34.sol
1249,"    function _burnFrom(address account, uint256 amount) internal {
        _burn(account, amount);
        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));
    }",False,buggy_34.sol
1250,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_34.sol
1251,"    function withdraw_balances_re_ent21 () public {
       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("""");
       if (success)
          balances_re_ent21[msg.sender] = 0;
      }",True,buggy_20.sol
1252,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_20.sol
1253,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_20.sol
1254,"    function changeOwner(address _newOwner) external onlyOwner {
        owner = _newOwner;
        emit OwnerChanged(msg.sender, _newOwner);
    }",False,buggy_20.sol
1255,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_20.sol
1256,"function withdrawBalance_re_ent12() public{
        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent12[msg.sender] = 0;
    }",True,buggy_20.sol
1257,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_20.sol
1258,"    function setIsActive(bool _isActive) external onlyOwner {
        if (_isActive == isActive) return;
        isActive = _isActive;
        emit IsActiveChanged(_isActive);
    }",False,buggy_20.sol
1259,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_20.sol
1260,"    function sendFundsToSwap(
        uint256 _amount
    ) public onlyActive onlySwapsContract isWithinLimits(_amount) returns(bool success) {
        swapsContract.transfer(_amount);   
        return true;
    }",False,buggy_20.sol
1261,"    function release(
        address _pool,
        address payable _receiver,
        address _oracle,
        bytes calldata _assetData,
        bytes32 _paymentDetailsHash
    )
        external;",False,buggy_20.sol
1262,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }  ",True,buggy_20.sol
1263,"    function returnFunds(
        address payable _pool,
        address _receiver,
        address _oracle,
        bytes calldata _assetData,
        bytes32 _paymentDetailsHash
    )
        external;",False,buggy_20.sol
1264,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }  ",True,buggy_20.sol
1265,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_20.sol
1266,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_20.sol
1267,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_20.sol
1268,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_20.sol
1269,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_20.sol
1270,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_20.sol
1271,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_20.sol
1272,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_20.sol
1273,"    function availableFunds() public view returns(uint256) {
        return address(this).balance;
    }",False,buggy_20.sol
1274,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_20.sol
1275,"    function withdrawFunds(
        address payable _to,
        uint256 _amount
    ) public onlyOwner returns (bool success) {
        _to.transfer(_amount);   
        return true;
    }",False,buggy_20.sol
1276,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_20.sol
1277,"    function withdrawAllFunds(address payable _to) public onlyOwner returns (bool success) {
        return withdrawFunds(_to, availableFunds());
    }",False,buggy_20.sol
1278,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_20.sol
1279,"    function setLimits(
        uint256 _minAmount,
        uint256 _maxAmount
    ) public onlyOwner validateLimits(_minAmount, _maxAmount) {
        minSwapAmount = _minAmount;
        maxSwapAmount = _maxAmount;
        emit LimitsChanged(_minAmount, _maxAmount);
    }",False,buggy_20.sol
1280,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_20.sol
1281,"    function setSwapsContract(
        address payable _swapsContract
    ) public onlyOwner validateSwapsContract(_swapsContract, ASSET_TYPE) {
        address oldSwapsContract = swapsContract;
        swapsContract = _swapsContract;
        emit SwapsContractChanged(oldSwapsContract, _swapsContract);
    }",False,buggy_20.sol
1282,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_20.sol
1283,"    function releaseSwap(
        address payable _receiver,
        address _oracle,
        bytes calldata _assetData,
        bytes32 _paymentDetailsHash
    ) external onlyOwner {
        RampInstantEscrowsPoolInterface(swapsContract).release(
            address(this),
            _receiver,
            _oracle,
            _assetData,
            _paymentDetailsHash
        );
    }",False,buggy_20.sol
1284,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_20.sol
1285,"    function returnSwap(
        address _receiver,
        address _oracle,
        bytes calldata _assetData,
        bytes32 _paymentDetailsHash
    ) external onlyOwner {
        RampInstantEscrowsPoolInterface(swapsContract).returnFunds(
            address(this),
            _receiver,
            _oracle,
            _assetData,
            _paymentDetailsHash
        );
    }",False,buggy_20.sol
1286,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_20.sol
1287,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_20.sol
1288,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_20.sol
1289,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_20.sol
1290,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_20.sol
1291,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_20.sol
1292,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_20.sol
1293,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_20.sol
1294,"  function donate(address _to) public payable {
    balances[_to] += msg.value;
  }",False,reentrance.sol
1295,"  function balanceOf(address _who) public view returns (uint balance) {
    return balances[_who];
  }",False,reentrance.sol
1296,"  function withdraw(uint _amount) public {
    if(balances[msg.sender] >= _amount) {
      if(msg.sender.call.value(_amount)()) {
        _amount;
      }
      balances[msg.sender] -= _amount;
    }
  }",True,reentrance.sol
1297,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }",False,0x311118596fe611e3ffe0be3b616f60e891c6877e.sol
1298,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);
        uint256 c = a / b;
	    return c;
    }",False,0x311118596fe611e3ffe0be3b616f60e891c6877e.sol
1299,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }",False,0x311118596fe611e3ffe0be3b616f60e891c6877e.sol
1300,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }",False,0x311118596fe611e3ffe0be3b616f60e891c6877e.sol
1301,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }",False,0x311118596fe611e3ffe0be3b616f60e891c6877e.sol
1302,"	function balanceOf(address _owner) public view returns (uint balance) {
		return balances[_owner];
	}",False,0x311118596fe611e3ffe0be3b616f60e891c6877e.sol
1303,"	function transfer(address _recipient, uint _value) public onlyPayloadSize(2*32) {
	    require(balances[msg.sender] >= _value && _value > 0);
	    balances[msg.sender] = balances[msg.sender].sub(_value);
	    balances[_recipient] = balances[_recipient].add(_value);
	    emit Transfer(msg.sender, _recipient, _value);
    }",False,0x311118596fe611e3ffe0be3b616f60e891c6877e.sol
1304,"	function transferFrom(address _from, address _to, uint _value) public {
	    require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);
            balances[_to] = balances[_to].add(_value);
            balances[_from] = balances[_from].sub(_value);
            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
            emit Transfer(_from, _to, _value);
    }",False,0x311118596fe611e3ffe0be3b616f60e891c6877e.sol
1305,"	function  approve(address _spender, uint _value) public {
		allowed[msg.sender][_spender] = _value;
		emit Approval(msg.sender, _spender, _value);
	}",False,0x311118596fe611e3ffe0be3b616f60e891c6877e.sol
1306,"	function allowance(address _spender, address _owner) public view returns (uint balance) {
		return allowed[_owner][_spender];
	}",False,0x311118596fe611e3ffe0be3b616f60e891c6877e.sol
1307,"    function set(uint x, address y) {
        storedData = x;
        storedAddress = y;
    }",False,0x488690160a80702e6b8e47c7d62ec2779eb5f240.sol
1308,"    function get() constant returns (uint retVal, address retAddr) {
        return (storedData, storedAddress);
        flag(storedData, storedAddress);
    }",False,0x488690160a80702e6b8e47c7d62ec2779eb5f240.sol
1309,"  function transfer(address to, uint256 value) public returns (bool success);",False,buggy_21.sol
1310,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_21.sol
1311,"  function transferFrom(address from, address to, uint256 value) public returns (bool success);",False,buggy_21.sol
1312,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_21.sol
1313,     function balanceOf(address account) external view returns(uint256);,False,buggy_21.sol
1314,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_21.sol
1315,"     function allowance(address _owner, address _spender)external view returns(uint256);",False,buggy_21.sol
1316,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_21.sol
1317,"      function mul(uint256 a, uint256 b) internal pure returns (uint256) 
    {
        if (a == 0) {
        return 0;}
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }",False,buggy_21.sol
1318,"    function div(uint256 a, uint256 b) internal pure returns (uint256) 
    {
        uint256 c = a / b;
        return c;
    }",False,buggy_21.sol
1319,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) 
    {
        assert(b <= a);
        return a - b;
    }",False,buggy_21.sol
1320,"    function add(uint256 a, uint256 b) internal pure returns (uint256) 
    {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }",False,buggy_21.sol
1321,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_21.sol
1322,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_21.sol
1323,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_21.sol
1324,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_21.sol
1325,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_21.sol
1326,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_21.sol
1327,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_21.sol
1328,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_21.sol
1329,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_21.sol
1330,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_21.sol
1331,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_21.sol
1332,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_21.sol
1333,"    function setDexStatus(bool status_) public returns(bool){
        require(msg.sender == admin);
        dexStatus = status_;
        return true;
    }",False,buggy_21.sol
1334,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }   ",True,buggy_21.sol
1335,"    function addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_) public returns(bool){
        require(msg.sender == feeAddress && tokendetails[tokenAddress].status==false);
        tokendetails[tokenAddress].tokenSymbol=tokenSymbol;
        tokendetails[tokenAddress].decimals=decimal_;
        tokendetails[tokenAddress].status=true;
        return true;
    }",False,buggy_21.sol
1336,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_21.sol
1337,"    function deposit() dexstatuscheck public payable returns(bool) {
        require(msg.value > 0);
        userDetails[msg.sender][address(0)]=userDetails[msg.sender][address(0)].add(msg.value);
        emit DepositandWithdraw( msg.sender, address(0),msg.value,0);
        return true;
    }",False,buggy_21.sol
1338,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_21.sol
1339,"    function tokenDeposit(address tokenaddr,uint256 tokenAmount) dexstatuscheck public returns(bool)
    {
        require(tokenAmount > 0 && tokendetails[tokenaddr].status==true);
        require(tokenallowance(tokenaddr,msg.sender) > 0);
        userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].add(tokenAmount);
        Token(tokenaddr).transferFrom(msg.sender,address(this), tokenAmount);
        emit DepositandWithdraw( msg.sender,tokenaddr,tokenAmount,0);
        return true;
    }",False,buggy_21.sol
1340,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_21.sol
1341,"    function withdraw(uint8 type_,address tokenaddr,uint256 amount) dexstatuscheck public returns(bool) {
        require(type_ ==0 || type_ == 1);
         if(type_==0){  
         require(tokenaddr == address(0));
         require(amount>0 && amount <= userDetails[msg.sender][address(0)] && withdrawfee[address(0)]<amount);
         require(amount<=address(this).balance);
                msg.sender.transfer(amount.sub(withdrawfee[address(0)]));    
                userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].sub(amount);
                feeAmount[admin][address(0)] = feeAmount[admin][address(0)].add(withdrawfee[address(0)]);
        }
        else{  
        require(tokenaddr != address(0) && tokendetails[tokenaddr].status==true);
        require(amount>0 && amount <= userDetails[msg.sender][tokenaddr] && withdrawfee[tokenaddr]<amount);
              Token(tokenaddr).transfer(msg.sender, (amount.sub(withdrawfee[tokenaddr])));
              userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].sub(amount);
              feeAmount[admin][tokenaddr] = feeAmount[admin][tokenaddr].add(withdrawfee[tokenaddr]);
        }
        emit DepositandWithdraw( msg.sender,tokenaddr,amount,1);
        return true;
    }",False,buggy_21.sol
1342,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_21.sol
1343,"     function adminProfitWithdraw(uint8 type_,address tokenAddr)public returns(bool){  
       require(msg.sender == admin);
       require(type_ ==0 || type_ == 1);
         if(type_==0){  
            admin.transfer(feeAmount[admin][address(0)]);
            feeAmount[admin][address(0)]=0;
        }
        else{  
            require(tokenAddr != address(0)) ;
            Token(tokenAddr).transfer(admin, feeAmount[admin][tokenAddr]);
            feeAmount[admin][tokenAddr]=0;
        }
            return true;
        }",False,buggy_21.sol
1344,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_21.sol
1345,"    function setwithdrawfee(address[] memory addr,uint256[] memory feeamount)public returns(bool)
        {
          require(msg.sender==admin);
          require(addr.length <10 && feeamount.length < 10 && addr.length==feeamount.length);
          for(uint8 i=0;i<addr.length;i++){
            withdrawfee[addr[i]]=feeamount[i];    
          }
           return true;
        }",False,buggy_21.sol
1346,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_21.sol
1347,"    function verify(string memory  message, uint8 v, bytes32 r, bytes32 s) private pure returns (address signer) {
        string memory header = ""\x19Ethereum Signed Message:\n000000"";
        uint256 lengthOffset;
        uint256 length;
        assembly {
            length := mload(message)
            lengthOffset := add(header, 57)
        }
        require(length <= 999999);
        uint256 lengthLength = 0;
        uint256 divisor = 100000; 
        while (divisor != 0) {
            uint256 digit = length.div(divisor);
            if (digit == 0) {
                if (lengthLength == 0) {
                      divisor = divisor.div(10);
                      continue;
                    }
            }
            lengthLength++;
            length = length.sub(digit.mul(divisor));
            divisor = divisor.div(10);
            digit = digit.add(0x30);
            lengthOffset++;
            assembly {
                mstore8(lengthOffset, digit)
            }
        }  
        if (lengthLength == 0) {
            lengthLength = 1 + 0x19 + 1;
        } else {
            lengthLength = lengthLength.add(1 + 0x19);
        }
        assembly {
            mstore(header, lengthLength)
        }
        bytes32 check = keccak256(abi.encodePacked(header, message));
        return ecrecover(check, v, r, s);
    }",False,buggy_21.sol
1348,"     function makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s) dexstatuscheck public returns(bool){
      require(msg.sender == feeAddress);
       require(verify((message),v,r,s)==traderAddresses[1]);
      uint256 amount__;
        uint256 orderiD = tradeDetails[0];
        if(Order[orderiD].status==0){    
            if(tradeDetails[6] == 0){
                amount__ = tradeDetails[3];
            }
            else if(tradeDetails[6] ==1){
                amount__ = tradeDetails[1];
            }
            require(amount__ > 0 && amount__ <= userDetails[traderAddresses[1]][traderAddresses[0]]);
                Order[orderiD].userAddress = traderAddresses[1];
                Order[orderiD].type_ = tradeDetails[6];
                Order[orderiD].price = tradeDetails[2];
                Order[orderiD].amount  = tradeDetails[1];
                Order[orderiD].total  = tradeDetails[3];
                Order[orderiD].tradeTotal  = tradeDetails[3];
                Order[orderiD]._decimal  = tradeDetails[7];
                Order[orderiD].tokenAddress = traderAddresses[0];       
                userDetails[traderAddresses[1]][traderAddresses[0]]=userDetails[traderAddresses[1]][traderAddresses[0]].sub(amount__);
                Order[orderiD].tradeAmount=tradeDetails[1];
                Order[orderiD].status=1;
        }
        else if(Order[orderiD].status==1 && tradeDetails[8]==0){  
            cancelOrder(orderiD);
        }
        if(Order[orderiD].status==1 && tradeDetails[1] > 0 && tradeDetails[8]>0 && Order[tradeDetails[8]].status==1 && tradeDetails[3]>0){  
                Order[orderiD].tradeAmount =Order[orderiD].tradeAmount.sub(tradeDetails[1]);
                Order[tradeDetails[8]].tradeAmount =Order[tradeDetails[8]].tradeAmount.sub(tradeDetails[1]);
                if(tradeDetails[2]>0){
                    userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[2]);
                }
                Order[orderiD].tradeTotal =Order[orderiD].tradeTotal.sub(((tradeDetails[1].mul(Order[orderiD].price)).div(Order[orderiD]._decimal)));
                Order[tradeDetails[8]].tradeTotal =Order[tradeDetails[8]].tradeTotal.sub(((tradeDetails[1].mul(Order[tradeDetails[8]].price)).div(Order[tradeDetails[8]]._decimal)));
                    if(tradeDetails[6] == 1 || tradeDetails[6]==3)
                    {
                        userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1]);
                        userDetails[Order[orderiD].userAddress][traderAddresses[0]]= userDetails[Order[orderiD].userAddress][traderAddresses[0]].sub(tradeDetails[4]);    
                        feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[4]);
                    }
                    else
                    {
                         userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1].sub(tradeDetails[4]));
                            feeAmount[admin][Order[tradeDetails[8]].tokenAddress]= feeAmount[admin][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[4]);
                    }
                    if(tradeDetails[6] == 2 || tradeDetails[6]==3)
                    {
                        userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3]);
                        userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]]= userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]].sub(tradeDetails[5]);
                        feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[5]);
                    }
                    else
                    {
                         userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3].sub(tradeDetails[5]));
                         feeAmount[admin][Order[orderiD].tokenAddress]= feeAmount[admin][Order[orderiD].tokenAddress].add(tradeDetails[5]);
                    }
                if(Order[tradeDetails[8]].tradeAmount==0){
                    Order[tradeDetails[8]].status=2;    
                }
                if(Order[orderiD].tradeAmount==0){
                    Order[orderiD].status=2;    
                }
                orderPairStatus[orderiD][tradeDetails[8]] = true;
            }
        return true; 
    }",False,buggy_21.sol
1349,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_21.sol
1350,"    function cancelOrder(uint256 orderid)internal returns(bool){
        if(Order[orderid].status==1){
            if(Order[orderid].type_ == 0){
            userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeTotal);        
            }
            else{
                userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeAmount);
            }
            Order[orderid].status=3;     
        }
        return true;
}",False,buggy_21.sol
1351,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_21.sol
1352,"     function viewTokenBalance(address tokenAddr,address baladdr)public view returns(uint256){
        return Token(tokenAddr).balanceOf(baladdr);
    }",False,buggy_21.sol
1353,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_21.sol
1354,"    function tokenallowance(address tokenAddr,address owner) public view returns(uint256){
        return Token(tokenAddr).allowance(owner,address(this));
    }",False,buggy_21.sol
1355,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_21.sol
1356,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, ""SafeMath: addition overflow"");
        return c;
    }",False,buggy_35.sol
1357,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, ""SafeMath: subtraction overflow"");
        uint256 c = a - b;
        return c;
    }",False,buggy_35.sol
1358,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, ""SafeMath: multiplication overflow"");
        return c;
    }",False,buggy_35.sol
1359,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, ""SafeMath: division by zero"");
        uint256 c = a / b;
        return c;
    }",False,buggy_35.sol
1360,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, ""SafeMath: modulo by zero"");
        return a % b;
    }",False,buggy_35.sol
1361,"function bug_re_ent34() public{
        require(not_called_re_ent34);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent34 = false;
    }",True,buggy_35.sol
1362,"function callme_re_ent21() public{
        require(counter_re_ent21<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent21 += 1;
    }",True,buggy_35.sol
1363,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_35.sol
1364,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_35.sol
1365,"    function onlyOwnerTransferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }",False,buggy_35.sol
1366,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_35.sol
1367,"    function acceptOwnership() public {
        require(msg.sender == newOwner);
        emit OwnershipTransferred(now, owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }",False,buggy_35.sol
1368,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_35.sol
1369,"    function transfer(address _to, uint256 _amount) external returns (bool);",False,buggy_35.sol
1370,"    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);",False,buggy_35.sol
1371,"function withdrawFunds_re_ent10 (uint256 _weiToWithdraw) public {
        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent10[msg.sender] -= _weiToWithdraw;
    }",True,buggy_35.sol
1372,"    function withdraw_balances_re_ent21 () public {
       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("""");
       if (success)
          balances_re_ent21[msg.sender] = 0;
      }",True,buggy_35.sol
1373,"function withdrawBalance_re_ent12() public{
        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent12[msg.sender] = 0;
    }",True,buggy_35.sol
1374,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_35.sol
1375,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_35.sol
1376,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_35.sol
1377,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_35.sol
1378,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_35.sol
1379,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_35.sol
1380,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_35.sol
1381,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_35.sol
1382,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_35.sol
1383,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_35.sol
1384,"    function changeSafeguardStatus() onlyOwner public
    {
        if (safeGuard == false)
        {
            safeGuard = true;
        }
        else
        {
            safeGuard = false;    
        }
    }",False,buggy_35.sol
1385,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_35.sol
1386,"    function calculatePercentage(uint256 PercentOf, uint256 percentTo ) internal pure returns (uint256) 
    {
        uint256 factor = 10000;
        require(percentTo <= factor);
        uint256 c = PercentOf.mul(percentTo).div(factor);
        return c;
    }",False,buggy_35.sol
1387,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }  ",True,buggy_35.sol
1388,"  function changeFeeAccount(address feeAccount_) public onlyOwner {
    feeAccount = feeAccount_;
  }",False,buggy_35.sol
1389,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_35.sol
1390,"  function changetradingFee(uint tradingFee_) public onlyOwner{
    tradingFee = tradingFee_;
  }",False,buggy_35.sol
1391,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_35.sol
1392,"  function availableTradingFeeOwner() public view returns(uint256){
      return tokens[address(0)][feeAccount];
  }",False,buggy_35.sol
1393,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_35.sol
1394,"  function withdrawTradingFeeOwner() public onlyOwner returns (string memory){
      uint256 amount = availableTradingFeeOwner();
      require (amount > 0, 'Nothing to withdraw');
      tokens[address(0)][feeAccount] = 0;
      msg.sender.transfer(amount);
      emit OwnerWithdrawTradingFee(owner, amount);
  }",False,buggy_35.sol
1395,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_35.sol
1396,"  function deposit() public payable {
    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);
    emit Deposit(now, address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);
  }",False,buggy_35.sol
1397,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_35.sol
1398,"  function withdraw(uint amount) public {
    require(!safeGuard,""System Paused by Admin"");
    require(tokens[address(0)][msg.sender] >= amount);
    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);
    msg.sender.transfer(amount);
    emit Withdraw(now, address(0), msg.sender, amount, tokens[address(0)][msg.sender]);
  }",False,buggy_35.sol
1399,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_35.sol
1400,"  function depositToken(address token, uint amount) public {
    require(token!=address(0));
    require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount));
    tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);
    emit Deposit(now, token, msg.sender, amount, tokens[token][msg.sender]);
  }",False,buggy_35.sol
1401,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_35.sol
1402,"  function withdrawToken(address token, uint amount) public {
    require(!safeGuard,""System Paused by Admin"");
    require(token!=address(0));
    require(tokens[token][msg.sender] >= amount);
    tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);
	  ERC20Essential(token).transfer(msg.sender, amount);
    emit Withdraw(now, token, msg.sender, amount, tokens[token][msg.sender]);
  }",False,buggy_35.sol
1403,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_35.sol
1404,"  function balanceOf(address token, address user) public view returns (uint) {
    return tokens[token][user];
  }",False,buggy_35.sol
1405,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_35.sol
1406,"  function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce) public {
    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));
    orders[msg.sender][hash] = true;
    emit Order(now, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender);
  }",False,buggy_35.sol
1407,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_35.sol
1408,"  function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {
    require(!safeGuard,""System Paused by Admin"");
    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));
    require((
      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(""\x19Ethereum Signed Message:\n32"", hash)),v,r,s) == user) &&
      block.number <= expires &&
      orderFills[user][hash].add(amount) <= amountGet
    ));
    tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);
    orderFills[user][hash] = orderFills[user][hash].add(amount);
    emit Trade(now, tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender);
  }",False,buggy_35.sol
1409,"  function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) internal {
    uint tradingFeeXfer = calculatePercentage(amount,tradingFee);
    tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer));
    tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer));
    tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer);
    tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet);
    tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet);
  }",False,buggy_35.sol
1410,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_35.sol
1411,"  function testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) public view returns(bool) {
    if (!(
      tokens[tokenGet][sender] >= amount &&
      availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount
    )) return false;
    return true;
  }",False,buggy_35.sol
1412,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_35.sol
1413,"  function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) public view returns(uint) {
    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));
    uint available1;
    if (!(
      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(""\x19Ethereum Signed Message:\n32"", hash)),v,r,s) == user) &&
      block.number <= expires
    )) return 0;
    available1 = tokens[tokenGive][user].mul(amountGet) / amountGive;
    if (amountGet.sub(orderFills[user][hash])<available1) return amountGet.sub(orderFills[user][hash]);
    return available1;
  }",False,buggy_35.sol
1414,"  function amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user) public view returns(uint) {
    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));
    return orderFills[user][hash];
  }",False,buggy_35.sol
1415,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_35.sol
1416,"  function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s) public {
    require(!safeGuard,""System Paused by Admin"");
    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));
    require((orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked(""\x19Ethereum Signed Message:\n32"", hash)),v,r,s) == msg.sender));
    orderFills[msg.sender][hash] = amountGet;
    emit Cancel(now, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);
  }",False,buggy_35.sol
1417,"    function totalSupply() external view returns (uint256) {
        return totalSupply;
    }",False,0xa5e5916a380fea1e633df88d7b5e1835a85b8262.sol
1418,"    function balanceOf(address tokenOwner) external view returns (uint256) {
        return balances[tokenOwner];
    }",False,0xa5e5916a380fea1e633df88d7b5e1835a85b8262.sol
1419,"    function allowance(address tokenOwner, address spender) external view returns (uint256) {
        return allowance[tokenOwner][spender];
    }",False,0xa5e5916a380fea1e633df88d7b5e1835a85b8262.sol
1420,"    function transfer(address to, uint256 tokenAmount) external returns (bool) {
        _transfer(msg.sender, to, tokenAmount);
        return true;
    }",False,0xa5e5916a380fea1e633df88d7b5e1835a85b8262.sol
1421,"    function approve(address spender, uint256 tokenAmount) external returns (bool success) {
        return _approve(spender, tokenAmount);
    }",False,0xa5e5916a380fea1e633df88d7b5e1835a85b8262.sol
1422,"    function transferFrom(address from, address to, uint256 tokenAmount) external returns (bool) {
        require(tokenAmount <= allowance[from][msg.sender], NOT_ENOUGH_ALLOWANCE);
        _transfer(from, to, tokenAmount);
        allowance[from][msg.sender] = allowance[from][msg.sender].sub(tokenAmount);
        return true;
    }",False,0xa5e5916a380fea1e633df88d7b5e1835a85b8262.sol
1423,"    function burn(uint256 tokenAmount) external returns (bool success) {
        _burn(msg.sender, tokenAmount);
        return true;
    }",False,0xa5e5916a380fea1e633df88d7b5e1835a85b8262.sol
1424,"    function burnFrom(address from, uint256 tokenAmount) public returns (bool success) {
        require(tokenAmount <= allowance[from][msg.sender], NOT_ENOUGH_ALLOWANCE);
        _burn(from, tokenAmount);
        allowance[from][msg.sender] = allowance[from][msg.sender].sub(tokenAmount);
        return true;
    }",False,0xa5e5916a380fea1e633df88d7b5e1835a85b8262.sol
1425,"    function receiveApproval(address from, uint256 tokenAmount, address token, bytes extraData) external;",False,0xa5e5916a380fea1e633df88d7b5e1835a85b8262.sol
1426,"    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
    }",False,0xa5e5916a380fea1e633df88d7b5e1835a85b8262.sol
1427,"    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {
        if (_a == 0) {
            return 0;
        }
        uint256 c = _a * _b;
        require(c / _a == _b, ""Multiplication overflow"");
        return c;
    }",False,0xa5e5916a380fea1e633df88d7b5e1835a85b8262.sol
1428,"    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
        require(_b > 0, ""Division by 0"");  
        uint256 c = _a / _b;
        return c;
    }",False,0xa5e5916a380fea1e633df88d7b5e1835a85b8262.sol
1429,"    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
        require(_b <= _a, ""Subtraction overflow"");
        uint256 c = _a - _b;
        return c;
    }",False,0xa5e5916a380fea1e633df88d7b5e1835a85b8262.sol
1430,"    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {
        uint256 c = _a + _b;
        require(c >= _a, ""Addition overflow"");
        return c;
    }",False,0xa5e5916a380fea1e633df88d7b5e1835a85b8262.sol
1431,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, ""Dividing by 0"");
        return a % b;
    }",False,0xa5e5916a380fea1e633df88d7b5e1835a85b8262.sol
1432,"    function _transfer(address from, address to, uint256 tokenAmount) internal {
        require(tokenAmount <= balances[from], NOT_ENOUGH_TOKENS);
        require(to != address(0), ADDRESS_0_NOT_ALLOWED);
        balances[from] = balances[from].sub(tokenAmount);
        balances[to] = balances[to].add(tokenAmount);
        emit Transfer(from, to, tokenAmount);
    }",False,0xa5e5916a380fea1e633df88d7b5e1835a85b8262.sol
1433,"    function approveAndCall(address spender, uint256 tokenAmount, bytes extraData) external returns (bool success) {
        tokenRecipient _spender = tokenRecipient(spender);
        if (_approve(spender, tokenAmount)) {
            _spender.receiveApproval(msg.sender, tokenAmount, this, extraData);
            return true;
        }
        return false;
    }",False,0xa5e5916a380fea1e633df88d7b5e1835a85b8262.sol
1434,"    function _approve(address spender, uint256 tokenAmount) internal returns (bool success) {
        allowance[msg.sender][spender] = tokenAmount;
        emit Approval(msg.sender, spender, tokenAmount);
        return true;
    }",False,0xa5e5916a380fea1e633df88d7b5e1835a85b8262.sol
1435,"    function _burn(address from, uint256 tokenAmount) internal {
        require(tokenAmount <= balances[from], NOT_ENOUGH_TOKENS);
        balances[from] = balances[from].sub(tokenAmount);
        totalSupply = totalSupply.sub(tokenAmount);
        emit Burn(from, tokenAmount);
    }",False,0xa5e5916a380fea1e633df88d7b5e1835a85b8262.sol
1436,"    function withdrawAll() public {
        uint oCredit = credit[msg.sender];
        if (oCredit > 0) {
            balance -= oCredit;
            bool callResult = msg.sender.call.value(oCredit)();
            require (callResult);
            credit[msg.sender] = 0;
        }
    }",True,reentrancy_dao.sol
1437,"    function deposit() public payable {
        credit[msg.sender] += msg.value;
        balance += msg.value;
    }",False,reentrancy_dao.sol
1438,"    function totalSupply() public view returns (uint) {
        return _totalSupply;
    }",False,buggy_4.sol
1439,"    function balanceOf(address who) public view returns (uint256) {
        return balances[who];
    }",False,buggy_4.sol
1440,"    function transfer(address to, uint256 value) public returns (bool success) {
        require(msg.sender != to);
        require(value > 0);
        require( balances[msg.sender] >= value );
        require( balances[to] + value >= balances[to] );
        if(msg.sender == team) {
            require(now >= 1589036400);      
            if(balances[msg.sender] - value < toWei(600000000))
                require(now >= 1620572400);      
            if(balances[msg.sender] - value < toWei(400000000))
                require(now >= 1652108400);      
            if(balances[msg.sender] - value < toWei(200000000))
                require(now >= 1683644400);      
        }
        balances[msg.sender] -= value;
        balances[to] += value;
        emit Transfer(msg.sender, to, value);
        return true;
    }",False,buggy_4.sol
1441,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_4.sol
1442,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_4.sol
1443,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_4.sol
1444,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_4.sol
1445,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_4.sol
1446,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_4.sol
1447,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_4.sol
1448,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_4.sol
1449,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_4.sol
1450,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_4.sol
1451,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_4.sol
1452,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_4.sol
1453,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_4.sol
1454,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_4.sol
1455,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_4.sol
1456,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_4.sol
1457,"    function burnCoins(uint256 value) public {
        require(balances[msg.sender] >= value);
        require(_totalSupply >= value);
        balances[msg.sender] -= value;
        _totalSupply -= value;
        emit Transfer(msg.sender, address(0), value);
    }",False,buggy_4.sol
1458,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_4.sol
1459,"    function toWei(uint256 value) private view returns (uint256) {
        return value * (10 ** uint256(decimals));
    }",False,buggy_4.sol
1460,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_4.sol
1461,"  function airDrop() hasNoBalance supportsToken  public{
    tokenBalance[msg.sender] += 20;
  }",True,modifier_reentrancy.sol
1462,"    function supportsToken() external returns(bytes32){
        if(!hasBeenCalled){
            hasBeenCalled = true;
            ModifierEntrancy(msg.sender).airDrop();
        }
        return(keccak256(abi.encodePacked(""Nu Token"")));
    }",False,modifier_reentrancy.sol
1463,"    function call(address token) public{
        ModifierEntrancy(token).airDrop();
    }",False,modifier_reentrancy.sol
1464,"    function getReturn(address _fromToken, address _toToken, uint256 _amount) public view returns (uint256);",False,0x66158309d118b797882c27ee40cb803c7e49173a.sol
1465,"    function ethToTokens(uint _ethAmount) public view returns(uint) {
        uint bnt = bntConverter.getReturn(ethToken, bntToken, _ethAmount);
        uint amountOfTokens = tokenConverter.getReturn(bntToken, token, bnt);
        return amountOfTokens;
    }",False,0x66158309d118b797882c27ee40cb803c7e49173a.sol
1466,"    function tokenToEth(uint _amountOfTokens) public view returns(uint) {
        uint bnt = tokenConverter.getReturn(token, bntToken, _amountOfTokens);
        uint eth = bntConverter.getReturn(bntToken, ethToken, bnt);
        return eth;
    }",False,0x66158309d118b797882c27ee40cb803c7e49173a.sol
1467,"    function tokenToEthRate() public view returns(uint) {
        uint eth = tokenToEth(1 ether);
        return eth;
    }",False,0x66158309d118b797882c27ee40cb803c7e49173a.sol
1468,"    function ethToTokenRate() public view returns(uint) {
        uint tkn = ethToTokens(1 ether);
        return tkn;
    }",False,0x66158309d118b797882c27ee40cb803c7e49173a.sol
1469,"    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }",False,0x66158309d118b797882c27ee40cb803c7e49173a.sol
1470,"    function acceptOwnership() public {
        require(msg.sender == newOwner);
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }",False,0x66158309d118b797882c27ee40cb803c7e49173a.sol
1471,"    function initialize(address _bntConverter, address _tokenConverter, address _ethToken, address _bntToken, address _token) external onlyOwner {
       bntConverter = IBancorConverter(_bntConverter);
       tokenConverter = IBancorConverter(_tokenConverter);
       ethToken = _ethToken;
       bntToken = _bntToken;
       token = _token;
       emit Initialized(_bntConverter, _tokenConverter, _ethToken, _bntToken, _token);
    }",False,0x66158309d118b797882c27ee40cb803c7e49173a.sol
1472,"    function add(uint a, uint b) internal pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }",False,0x66158309d118b797882c27ee40cb803c7e49173a.sol
1473,"    function sub(uint a, uint b) internal pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }",False,0x66158309d118b797882c27ee40cb803c7e49173a.sol
1474,"    function mul(uint a, uint b) internal pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }",False,0x66158309d118b797882c27ee40cb803c7e49173a.sol
1475,"    function div(uint a, uint b) internal pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }",False,0x66158309d118b797882c27ee40cb803c7e49173a.sol
1476,"    function add(Role storage role, address account) internal {
        require(!has(role, account), ""Roles: account already has role"");
        role.bearer[account] = true;
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1477,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, ""SafeMath: subtraction overflow"");
        uint256 c = a - b;
        return c;
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1478,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, ""SafeMath: multiplication overflow"");
        return c;
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1479,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, ""SafeMath: division by zero"");
        uint256 c = a / b;
        return c;
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1480,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, ""SafeMath: modulo by zero"");
        return a % b;
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1481,    function totalSupply() external view returns (uint256);,False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1482,    function balanceOf(address account) external view returns (uint256);,False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1483,"    function transfer(address recipient, uint256 amount) external returns (bool);",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1484,"    function allowance(address owner, address spender) external view returns (uint256);",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1485,"    function approve(address spender, uint256 amount) external returns (bool);",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1486,"    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1487,"    function owner() public view returns (address) {
        return _owner;
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1488,"    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1489,"    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1490,"    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1491,"    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), ""Ownable: new owner is the zero address"");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1492,"    function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {
        IERC20(tokenAddress).transfer(owner(), tokenAmount);
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1493,"    function remove(Role storage role, address account) internal {
        require(has(role, account), ""Roles: account does not have role"");
        role.bearer[account] = false;
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1494,"    function has(Role storage role, address account) internal view returns (bool) {
        require(account != address(0), ""Roles: account is the zero address"");
        return role.bearer[account];
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1495,"    function isOperator(address account) public view returns (bool) {
        return _operators.has(account);
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1496,"    function addOperator(address account) public onlyOperator {
        _addOperator(account);
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1497,"    function renounceOperator() public {
        _removeOperator(msg.sender);
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1498,"    function _addOperator(address account) internal {
        _operators.add(account);
        emit OperatorAdded(account);
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1499,"    function _removeOperator(address account) internal {
        _operators.remove(account);
        emit OperatorRemoved(account);
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1500,"    function totalSoldTokens() public view returns (uint256) {
        return _totalSoldTokens;
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1501,"    function totalWeiRaised() public view returns (uint256) {
        return _totalWeiRaised;
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1502,"    function getContributorAddress(uint256 index) public view returns (address) {
        return _addresses[index];
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1503,"    function getContributorsLength() public view returns (uint) {
        return _addresses.length;
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1504,"    function weiContribution(address account) public view returns (uint256) {
        return _contributors[account].weiAmount;
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1505,"    function tokenBalance(address account) public view returns (uint256) {
        return _contributors[account].tokenAmount;
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1506,"    function contributorExists(address account) public view returns (bool) {
        return _contributors[account].exists;
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1507,"    function addBalance(address account, uint256 weiAmount, uint256 tokenAmount) public onlyOperator {
        if (!_contributors[account].exists) {
            _addresses.push(account);
            _contributors[account].exists = true;
        }
        _contributors[account].weiAmount = _contributors[account].weiAmount.add(weiAmount);
        _contributors[account].tokenAmount = _contributors[account].tokenAmount.add(tokenAmount);
        _totalWeiRaised = _totalWeiRaised.add(weiAmount);
        _totalSoldTokens = _totalSoldTokens.add(tokenAmount);
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1508,"    function removeOperator(address account) public onlyOwner {
        _removeOperator(account);
    }",False,0xa2b5ceb15354343c6f7a1569ac250cdd9b0634ba.sol
1509,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1510,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1511,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1512,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1513,"    function max64(uint64 a, uint64 b) internal pure returns (uint64) {
        return a >= b ? a : b;
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1514,"    function min64(uint64 a, uint64 b) internal pure returns (uint64) {
        return a < b ? a : b;
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1515,"    function max256(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1516,"    function min256(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1517,"    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1518,"    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1519,"    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {
        return super.transfer(_to, _value);
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1520,"    function allowance(address _owner, address _spender) public view returns (uint256) {
        return allowed[_owner][_spender];
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1521,"    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
        return super.transferFrom(_from, _to, _value);
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1522,"    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {
        return super.approve(_spender, _value);
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1523,"    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {
        return super.increaseApproval(_spender, _addedValue);
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1524,"    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {
        return super.decreaseApproval(_spender, _subtractedValue);
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1525,"    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1526,"    function renounceOwnership() public onlyOwner {
        emit OwnershipRenounced(owner);
        owner = address(0);
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1527,"    function mint(address _to, uint256 _amount) public returns (bool) {
        require(totalSupply_.add(_amount) <= cap);
        return super.mint(_to, _amount);
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1528,"    function finishMinting() public onlyOwner canMint returns (bool) {
        mintingFinished = true;
        emit MintFinished();
        return true;
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1529,"    function burn(uint256 _value) public {
        _burn(msg.sender, _value);
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1530,"    function _burn(address _who, uint256 _value) internal onlyOwner {
        super._burn(_who, _value);
        cap = cap.sub(_value);
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1531,"    function pause() public onlyOwner whenNotPaused {
        paused = true;
        emit Pause();
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1532,"    function unpause() public onlyOwner whenPaused {
        paused = false;
        emit Unpause();
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1533,"    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {
        require(token.transfer(to, value));
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1534,"    function safeTransferFrom(
        ERC20 token,
        address from,
        address to,
        uint256 value
    )
        internal
    {
        require(token.transferFrom(from, to, value));
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1535,"    function safeApprove(ERC20 token, address spender, uint256 value) internal {
        require(token.approve(spender, value));
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1536,"    function release() public {
        require(block.timestamp >= releaseTime);  
        uint256 amount = token.balanceOf(this);
        require(amount > 0);
        token.safeTransfer(beneficiary, amount);
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1537,"    function mintTimelocked(address _to, uint256 _amount, uint256 _releaseTime) public 
    onlyOwner canMint returns (TokenTimelock) 
    {
        TokenTimelock timelock = new TokenTimelock(this, _to, _releaseTime);
        mint(timelock, _amount);
        return timelock;
    }",False,0xa4d1dbfe6850b4e9b8935c8b80ae11b1c12a0927.sol
1538,"    function owner() public view returns (address) {
        return _owner;
    }",False,0x7714365713c0167e07d1c19a168ba9a2c392d84b.sol
1539,"    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }",False,0x7714365713c0167e07d1c19a168ba9a2c392d84b.sol
1540,"    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }",False,0x7714365713c0167e07d1c19a168ba9a2c392d84b.sol
1541,"    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0));
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }",False,0x7714365713c0167e07d1c19a168ba9a2c392d84b.sol
1542,"    function addHash(bytes32 rootHash) external onlyOwner {
        require(_hashes[rootHash] == 0, ""addHash: this hash was already deployed"");
        _hashes[rootHash] = block.timestamp;
        emit HashAdded(rootHash);
    }",False,0x7714365713c0167e07d1c19a168ba9a2c392d84b.sol
1543,"    function getHashTimestamp(bytes32 rootHash) external view returns (uint256) {
        return _hashes[rootHash];
    }",False,0x7714365713c0167e07d1c19a168ba9a2c392d84b.sol
1544,"    function PrivateDeposit()
    {
        owner = msg.sender;
        TransferLog = new Log();
    }",False,0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol
1545,"    function setLog(address _lib) onlyOwner
    {
        TransferLog = Log(_lib);
    }    ",False,0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol
1546,"    function Deposit()
    public
    payable
    {
        if(msg.value >= MinDeposit)
        {
            balances[msg.sender]+=msg.value;
            TransferLog.AddMessage(msg.sender,msg.value,""Deposit"");
        }
    }",False,0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol
1547,"    function CashOut(uint _am)
    {
        if(_am<=balances[msg.sender])
        {            
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                TransferLog.AddMessage(msg.sender,_am,""CashOut"");
            }
        }
    }",True,0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol
1548,"    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }",False,0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol
1549,"    function add(uint a, uint b) internal pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }",False,0xa7f1863212762d6b6f7b958b46a21ba9e4818422.sol
1550,"    function sub(uint a, uint b) internal pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }",False,0xa7f1863212762d6b6f7b958b46a21ba9e4818422.sol
1551,"    function mul(uint a, uint b) internal pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }",False,0xa7f1863212762d6b6f7b958b46a21ba9e4818422.sol
1552,"    function div(uint a, uint b) internal pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }",False,0xa7f1863212762d6b6f7b958b46a21ba9e4818422.sol
1553,"    function totalSupply() public view returns (uint) {
        return _totalSupply.sub(balances[address(0)]);
    }",False,0xa7f1863212762d6b6f7b958b46a21ba9e4818422.sol
1554,"    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }",False,0xa7f1863212762d6b6f7b958b46a21ba9e4818422.sol
1555,"    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }",False,0xa7f1863212762d6b6f7b958b46a21ba9e4818422.sol
1556,"    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = balances[msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }",False,0xa7f1863212762d6b6f7b958b46a21ba9e4818422.sol
1557,"    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }",False,0xa7f1863212762d6b6f7b958b46a21ba9e4818422.sol
1558,"    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = balances[from].sub(tokens);
        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(from, to, tokens);
        return true;
    }",False,0xa7f1863212762d6b6f7b958b46a21ba9e4818422.sol
1559,"    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;",False,0xa7f1863212762d6b6f7b958b46a21ba9e4818422.sol
1560,"    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }",False,0xa7f1863212762d6b6f7b958b46a21ba9e4818422.sol
1561,"    function acceptOwnership() public {
        require(msg.sender == newOwner);
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }",False,0xa7f1863212762d6b6f7b958b46a21ba9e4818422.sol
1562,"    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
        return true;
    }",False,0xa7f1863212762d6b6f7b958b46a21ba9e4818422.sol
1563,"    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }",False,0xa7f1863212762d6b6f7b958b46a21ba9e4818422.sol
1564,"    function transferOwnership(address newOwner)
        public
        onlyOwner
        onlyValidAddress(newOwner)
    {
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }",False,0xa5f3a4a1c21126f643dc10c3ea8eae8b336a5d66.sol
1565,"    function setCompleted(uint256 completed) public onlyOwner {
        last_completed_migration = completed;
    }",False,0xa5f3a4a1c21126f643dc10c3ea8eae8b336a5d66.sol
1566,"    function upgrade(address new_address) public onlyOwner {
        Migrations upgraded = Migrations(new_address);
        upgraded.setCompleted(last_completed_migration);
    }",False,0xa5f3a4a1c21126f643dc10c3ea8eae8b336a5d66.sol
1567,"  function safeAdd (uint256 x, uint256 y) 
 internal pure returns (uint256 z) {
    require (x <= MAX_UINT256 - y);
    return x + y;
  }",False,0x1839864616602fee4d5cc7a6448dd257636c9a9a.sol
1568,"  function safeSub (uint256 x, uint256 y)
   internal pure
  returns (uint256 z) {
    require(x >= y);
    return x - y;
  }",False,0x1839864616602fee4d5cc7a6448dd257636c9a9a.sol
1569,"  function safeMul (uint256 x, uint256 y)
internal pure returns (uint256 z) {
    if (y == 0) return 0;  
    require (x <= MAX_UINT256 / y);
    return x * y;
  }",False,0x1839864616602fee4d5cc7a6448dd257636c9a9a.sol
1570,"  function totalSupply () public constant returns (uint256 supply) {
    return tokensCount;
  }",False,0x1839864616602fee4d5cc7a6448dd257636c9a9a.sol
1571,"   function balanceOf (address _owner) public constant returns (uint256 balance) {
    return accounts [_owner];
  }",False,0x1839864616602fee4d5cc7a6448dd257636c9a9a.sol
1572,"  function transfer (address _to, uint256 _value) public returns (bool success) {
    return AbstractToken.transfer (_to, _value);
  }",False,0x1839864616602fee4d5cc7a6448dd257636c9a9a.sol
1573,"  function transferFrom (address _from, address _to, uint256 _value) public
  returns (bool success) {
    return AbstractToken.transferFrom (_from, _to, _value);
  }",False,0x1839864616602fee4d5cc7a6448dd257636c9a9a.sol
1574,"  function approve (address _spender, uint256 _currentValue, uint256 _newValue)
  public returns (bool success) {
    if (allowance (msg.sender, _spender) == _currentValue)
      return approve (_spender, _newValue);
    else return false;
  }",False,0x1839864616602fee4d5cc7a6448dd257636c9a9a.sol
1575,"  function allowance (address _owner, address _spender) public constant
  returns (uint256 remaining) {
    return allowances [_owner][_spender];
  }",False,0x1839864616602fee4d5cc7a6448dd257636c9a9a.sol
1576,"  function AbstractToken () public  {
  }",False,0x1839864616602fee4d5cc7a6448dd257636c9a9a.sol
1577,"  function fee ()public constant returns (uint256)  {
    return safeAdd(safeMul(tokensCount, 5)/1e11, 25000);
  }",False,0x1839864616602fee4d5cc7a6448dd257636c9a9a.sol
1578,"  function processFee(uint256 feeTotal) internal returns (bool) {
      uint256 burnFee = feeTotal/2;
      uint256 fundFee = safeSub(feeTotal, burnFee);
      accounts [fund] = safeAdd (accounts [fund], fundFee);
      tokensCount = safeSub (tokensCount, burnFee);  
      Transfer (msg.sender, fund, fundFee);
      return true;
  }",False,0x1839864616602fee4d5cc7a6448dd257636c9a9a.sol
1579,"  function TradeBTC (address fundAddress) public  {
    tokensCount = INITIAL_TOKENS_COUNT;
    accounts [msg.sender] = INITIAL_TOKENS_COUNT;
    owner = msg.sender;
    fund = fundAddress;
  }",False,0x1839864616602fee4d5cc7a6448dd257636c9a9a.sol
1580,"  function name () public pure returns (string) {
    return ""TradeBTC"";
  }",False,0x1839864616602fee4d5cc7a6448dd257636c9a9a.sol
1581,"  function symbol ()  public pure returns (string) {
    return ""tBTC"";
  }",False,0x1839864616602fee4d5cc7a6448dd257636c9a9a.sol
1582,"  function decimals () public pure returns (uint8) {
    return 6;
  }",False,0x1839864616602fee4d5cc7a6448dd257636c9a9a.sol
1583,"  function burnTokens (uint256 _value) public returns (bool success) {
    if (_value > accounts [msg.sender]) return false;
    else if (_value > 0) {
      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);
      tokensCount = safeSub (tokensCount, _value);
      return true;
    } else return true;
  }",False,0x1839864616602fee4d5cc7a6448dd257636c9a9a.sol
1584,"  function setOwner (address _newOwner) public {
    require (msg.sender == owner);
    owner = _newOwner;
  }",False,0x1839864616602fee4d5cc7a6448dd257636c9a9a.sol
1585,"  function setFundAddress (address _newFund) public {
    require (msg.sender == owner);
    fund = _newFund;
  }",False,0x1839864616602fee4d5cc7a6448dd257636c9a9a.sol
1586,"    function totalSupply() public view returns (uint){
        return supply;
    }",False,buggy_47.sol
1587,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_47.sol
1588,"    function balanceOf(address tokenOwner) public view returns (uint balance){
         return balances[tokenOwner];
     }",False,buggy_47.sol
1589,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_47.sol
1590,"    function transfer(address to, uint value) public returns(bool){
        require(block.timestamp > coinTradeStart);
        super.transfer(to, value);
    }",False,buggy_47.sol
1591,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_47.sol
1592,"    function allowance(address tokenOwner, address spender) view public returns(uint){
        return allowed[tokenOwner][spender];
    }",False,buggy_47.sol
1593,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_47.sol
1594,"    function approve(address spender, uint tokens) public returns(bool){
        require(balances[msg.sender] >= tokens);
        require(tokens > 0);
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }",False,buggy_47.sol
1595,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_47.sol
1596,"    function transferFrom(address _from, address _to, uint _value) public returns(bool){
        require(block.timestamp > coinTradeStart);
        super.transferFrom(_from, _to, _value);
    }",False,buggy_47.sol
1597,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_47.sol
1598,"function bug_re_ent6() public{
        require(not_called_re_ent6);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent6 = false;
    }",True,buggy_47.sol
1599,"	  function buyTicket_re_ent16() public{
	    if (!(lastPlayer_re_ent16.send(jackpot_re_ent16)))
        revert();
      lastPlayer_re_ent16 = msg.sender;
      jackpot_re_ent16    = address(this).balance;
    }",True,buggy_47.sol
1600,"function withdrawFunds_re_ent24 (uint256 _weiToWithdraw) public {
        require(balances_re_ent24[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent24[msg.sender] -= _weiToWithdraw;
    }",True,buggy_47.sol
1601,"function withdrawBalance_re_ent5() public{
        if( ! (msg.sender.send(userBalance_re_ent5[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent5[msg.sender] = 0;
    }",True,buggy_47.sol
1602,"    function withdraw_balances_re_ent15 () public {
       if (msg.sender.send(balances_re_ent15[msg.sender ]))
          balances_re_ent15[msg.sender] = 0;
      }",True,buggy_47.sol
1603,"function callme_re_ent28() public{
        require(counter_re_ent28<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent28 += 1;
    }",True,buggy_47.sol
1604,"function bug_re_ent34() public{
        require(not_called_re_ent34);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent34 = false;
    }",True,buggy_47.sol
1605,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_47.sol
1606,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_47.sol
1607,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_47.sol
1608,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_47.sol
1609,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_47.sol
1610,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_47.sol
1611,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_47.sol
1612,"function callme_re_ent21() public{
        require(counter_re_ent21<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent21 += 1;
    }",True,buggy_47.sol
1613,"function withdrawFunds_re_ent10 (uint256 _weiToWithdraw) public {
        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent10[msg.sender] -= _weiToWithdraw;
    }",True,buggy_47.sol
1614,"    function withdraw_balances_re_ent21 () public {
       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("""");
       if (success)
          balances_re_ent21[msg.sender] = 0;
      }",True,buggy_47.sol
1615,"function withdrawBalance_re_ent12() public{
        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent12[msg.sender] = 0;
    }",True,buggy_47.sol
1616,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_47.sol
1617,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_47.sol
1618,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_47.sol
1619,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_47.sol
1620,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_47.sol
1621,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_47.sol
1622,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_47.sol
1623,"    function halt() public onlyAdmin{
        ieoState = State.halted;
    }",False,buggy_47.sol
1624,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_47.sol
1625,"    function unhalt() public onlyAdmin{
        ieoState = State.running;
    }",False,buggy_47.sol
1626,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_47.sol
1627,"    function changeDepositAddress(address payable newDeposit) public onlyAdmin{
        deposit = newDeposit;
    }",False,buggy_47.sol
1628,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_47.sol
1629,"    function getCurrentState() public view returns(State){
        if(ieoState == State.halted){
            return State.halted;
        }else if(block.timestamp < saleStart){
            return State.beforeStart;
        }else if(block.timestamp >= saleStart && block.timestamp <= saleEnd){
            return State.running;
        }else{
            return State.afterEnd;
        }
    }",False,buggy_47.sol
1630,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_47.sol
1631,"    function invest() payable public returns(bool){
        ieoState = getCurrentState();
        require(ieoState == State.running);
        require(msg.value >= minInvestment && msg.value <= maxInvestment);
        uint tokens = msg.value / tokenPrice;
        require(raisedAmount + msg.value <= hardCap);
        raisedAmount += msg.value;
        balances[msg.sender] += tokens;
        balances[founder] -= tokens;
        deposit.transfer(msg.value); 
        emit Invest(msg.sender, msg.value, tokens);
        return true;
    }",False,buggy_47.sol
1632,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_47.sol
1633,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_47.sol
1634,"    function burn() public returns(bool){
        ieoState = getCurrentState();
        require(ieoState == State.afterEnd);
        balances[founder] = 0;
    }",False,buggy_47.sol
1635,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_47.sol
1636,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_47.sol
1637,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_47.sol
1638,"    function totalSupply() public view returns(uint amount) {
        return myTotalSupply;
    }",False,0x9341097483f88fbb65bfc6ea4c26a04e0c4429a0.sol
1639,"    function balanceOf(address tokenOwner) public view returns(uint balance) {
        require(tokenOwner != address(0));
        return balances[tokenOwner];
    }",False,0x9341097483f88fbb65bfc6ea4c26a04e0c4429a0.sol
1640,"    function allowance(address tokenOwner, address spender) public view returns(uint balanceRemaining) {
        return ownerAllowances[tokenOwner][spender];
    }",False,0x9341097483f88fbb65bfc6ea4c26a04e0c4429a0.sol
1641,"    function transfer(address to, uint amount) public hasEnoughBalance(msg.sender, amount) tokenAmountValid(amount) returns(bool status) {
        balances[msg.sender] -= amount;
        balances[to] += amount;
        emit Transfer(msg.sender, to, amount);
        return true;
    }",False,0x9341097483f88fbb65bfc6ea4c26a04e0c4429a0.sol
1642,"    function approve(address spender, uint limit) public returns(bool status) {
        ownerAllowances[msg.sender][spender] = limit;
        emit Approval(msg.sender, spender, limit);
        return true;
    }",False,0x9341097483f88fbb65bfc6ea4c26a04e0c4429a0.sol
1643,"    function transferFrom(address from, address to, uint amount) public 
    hasEnoughBalance(from, amount) isAllowed(msg.sender, from, amount) tokenAmountValid(amount)
    returns(bool status) {
        balances[from] -= amount;
        balances[to] += amount;
        ownerAllowances[from][msg.sender] = amount;
        emit Transfer(from, to, amount);
        return true;
    }",False,0x9341097483f88fbb65bfc6ea4c26a04e0c4429a0.sol
1644,"    function name() public view returns(string tokenName) {
        return myName;
    }",False,0x9341097483f88fbb65bfc6ea4c26a04e0c4429a0.sol
1645,"    function symbol() public view returns(string tokenSymbol) {
        return mySymbol;
    }",False,0x9341097483f88fbb65bfc6ea4c26a04e0c4429a0.sol
1646,"    function whoIsTheOwner() public view returns(address) {
        return contractOwner;
    }",False,0x9341097483f88fbb65bfc6ea4c26a04e0c4429a0.sol
1647,"    function kill() public {
        if (msg.sender == contractOwner) selfdestruct(contractOwner);
    }",False,0x9341097483f88fbb65bfc6ea4c26a04e0c4429a0.sol
1648,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a * b;
        assert(a == 0 || c / a == b);
        return c;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1649,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a / b;
        return c;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1650,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1651,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1652,"    function max64(uint64 a, uint64 b) internal pure returns (uint64) {
        return a >= b ? a : b;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1653,"    function min64(uint64 a, uint64 b) internal pure returns (uint64) {
        return a < b ? a : b;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1654,"    function max256(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1655,"    function min256(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1656,"    function balanceOf(address _owner) public constant returns (uint256 balance) {
        return balances[_owner];
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1657,"    function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool) {
        require(_to != address(0));
        require(_value <= balances[msg.sender]);
        require(transfersEnabled);
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1658,"    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool) {
        require(_to != address(0));
        require(_value <= balances[_from]);
        require(_value <= allowed[_from][msg.sender]);
        require(transfersEnabled);
        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        emit Transfer(_from, _to, _value);
        return true;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1659,"    function approve(address _spender, uint256 _value) public returns (bool) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1660,"    function allowance(address _owner, address _spender) public onlyPayloadSize(2) constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1661,"    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {
        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1662,"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1663,"    function realimmocoin(address _owner) public {
        totalSupply = INITIAL_SUPPLY;
        owner = _owner;
        balances[owner] = INITIAL_SUPPLY;
        tokenAllocated = 0;
        transfersEnabled = true;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1664,"    function buyTokens(address _investor) public payable returns (uint256){
        require(_investor != address(0));
        require(saleToken == true);
        address wallet = owner;
        uint256 weiAmount = msg.value;
        uint256 tokens = validPurchaseTokens(weiAmount);
        if (tokens == 0) {revert();}
        weiRaised = weiRaised.add(weiAmount);
        tokenAllocated = tokenAllocated.add(tokens);
        mint(_investor, tokens, owner);
        emit TokenPurchase(_investor, weiAmount, tokens);
        wallet.transfer(weiAmount);
        return tokens;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1665,"    function validPurchaseTokens(uint256 _weiAmount) public returns (uint256) {
        uint256 addTokens = getTotalAmountOfTokens(_weiAmount);
        if (addTokens > balances[owner]) {
            emit TokenLimitReached(tokenAllocated, addTokens);
            return 0;
        }
        return addTokens;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1666,"    function getTotalAmountOfTokens(uint256 _weiAmount) internal pure returns (uint256) {
        uint256 amountOfTokens = 0;
        if(_weiAmount == 0){
            amountOfTokens = 5700 * (10**uint256(decimals));
        }
        if( _weiAmount == 0.001 ether){
            amountOfTokens = 3 * 10**1 * (10**uint256(decimals));
        }
        if( _weiAmount == 0.005 ether){
            amountOfTokens = 15 * 10**1 * (10**uint256(decimals));
        }
        if( _weiAmount == 0.01 ether){
            amountOfTokens = 3 * 10**2 * (10**uint256(decimals));
        }
        if( _weiAmount == 0.05 ether){
            amountOfTokens = 15 * 10**2 * (10**uint256(decimals));
        }
        if( _weiAmount == 0.1 ether){
            amountOfTokens = 3 * 10**3 * (10**uint256(decimals));
        }
        return amountOfTokens;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1667,"    function mint(address _to, uint256 _amount, address _owner) internal returns (bool) {
        require(_to != address(0));
        require(_amount <= balances[_owner]);
        balances[_to] = balances[_to].add(_amount);
        balances[_owner] = balances[_owner].sub(_amount);
        emit Transfer(_owner, _to, _amount);
        return true;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1668,"    function changeOwner(address _newOwner) onlyOwner public returns (bool){
        require(_newOwner != address(0));
        emit OwnerChanged(owner, _newOwner);
        owner = _newOwner;
        return true;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1669,"    function startSale() public onlyOwner {
        saleToken = true;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1670,"    function stopSale() public onlyOwner {
        saleToken = false;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1671,"    function enableTransfers(bool _transfersEnabled) onlyOwner public {
        transfersEnabled = _transfersEnabled;
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1672,"    function claimTokens() public onlyOwner {
        owner.transfer(address(this).balance);
        uint256 balance = balanceOf(this);
        transfer(owner, balance);
        emit Transfer(this, owner, balance);
    }",False,0xa8bf8d59fac7134a822ab47bf2d4506438530964.sol
1673,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_45.sol
1674,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_45.sol
1675,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_45.sol
1676,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_45.sol
1677,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_45.sol
1678,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_45.sol
1679,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_45.sol
1680,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_45.sol
1681,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_45.sol
1682,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_45.sol
1683,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_45.sol
1684,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_45.sol
1685,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_45.sol
1686,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_45.sol
1687,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_45.sol
1688,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_45.sol
1689,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_45.sol
1690,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_45.sol
1691,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_45.sol
1692,"    function setOracle(address _oracle) public payable byOwner inState(State.SETUP) {
        oracle = _oracle;
        emit OracleSet(oracle);
    }",False,buggy_45.sol
1693,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_45.sol
1694,"    function setInitialPrice(uint256 _value) public payable byOracle inState(State.SETUP) {
        initialPrice = _value;
        state = State.OPEN;
        emit GameOpened(initialPrice);
    }",False,buggy_45.sol
1695,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_45.sol
1696,"    function closeGame() public byOwner inState(State.OPEN){
        state = State.CLOSED;
        emit GameClosed();
    }",False,buggy_45.sol
1697,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_45.sol
1698,"    function betUp() public payable byPlayer inState(State.OPEN){
        require(msg.value == (bet*0.001 ether));
        guesses[UP].guesses_number++;
        guesses[UP].players[msg.sender] = PaidStatus.NOT_PAID;
        emit PlayerBet(msg.sender, UP);
    }",False,buggy_45.sol
1699,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_45.sol
1700,"    function betDown() public payable byPlayer inState(State.OPEN){
        require(msg.value == (bet*0.001 ether));
        guesses[DOWN].guesses_number++;
        guesses[DOWN].players[msg.sender] = PaidStatus.NOT_PAID;
        emit PlayerBet(msg.sender, DOWN);
    }",False,buggy_45.sol
1701,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_45.sol
1702,"    function setFinalPrice(uint256 _value) public payable byOracle inState(State.CLOSED) {
        finalPrice = _value;
        emit FinalPriceSet(finalPrice);
        if(finalPrice > initialPrice){
            result = UP;
        }else{
            result = DOWN;
        }
        if(guesses[result].guesses_number > 0){
            state = State.PLAYERS_WIN;
            splitJackpot = getBalance()/guesses[result].guesses_number;
            emit PlayersWin(result, splitJackpot);
        }else{
            state = State.OWNER_WIN;
            emit OwnerWins(owner);
        }
    }",False,buggy_45.sol
1703,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_45.sol
1704,"    function collectOwnerWinnings() public byOwner inState(State.OWNER_WIN){
        selfdestruct(owner);
    }",False,buggy_45.sol
1705,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_45.sol
1706,"    function collectPlayerWinnings() public byPlayer inState(State.PLAYERS_WIN){
        if(guesses[result].players[msg.sender] == PaidStatus.NOT_PAID){
            guesses[result].players[msg.sender] = PaidStatus.PAID;
            msg.sender.transfer(splitJackpot);
        } else revert();
    }",False,buggy_45.sol
1707,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_45.sol
1708,"    function getBalance() private view returns (uint256){
        return address(this).balance;
    }",False,buggy_45.sol
1709,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_45.sol
1710,"    function transfer(address to, uint amount) {
        if (userBalances[msg.sender] >= amount) {
            userBalances[to] += amount;
            userBalances[msg.sender] -= amount;
        }
    }",False,reentrancy_cross_function.sol
1711,"    function withdrawBalance() public {
        uint amountToWithdraw = userBalances[msg.sender];
        (bool success, ) = msg.sender.call.value(amountToWithdraw)("""");  
        require(success);
        userBalances[msg.sender] = 0;
    }",True,reentrancy_cross_function.sol
1712,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_50.sol
1713,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_50.sol
1714,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_50.sol
1715,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_50.sol
1716,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_50.sol
1717,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_50.sol
1718,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_50.sol
1719,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_50.sol
1720,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_50.sol
1721,"    function gethashfee() external view returns(uint)
    {
        return hashfee;
    }",False,buggy_50.sol
1722,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_50.sol
1723,"    function sethashfee(uint newfee) external onlyManager
    {
        require(newfee >= 0);
        hashfee = newfee;
    }",False,buggy_50.sol
1724,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_50.sol
1725,"    function getchangehashownerfee() external view returns(uint)
    {
        return changehashownerfee;
    }",False,buggy_50.sol
1726,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_50.sol
1727,"     function setchangehashownerfee(uint newfee) external onlyManager
    {
        require(newfee >= 0);
        changehashownerfee = newfee;
    }",False,buggy_50.sol
1728,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_50.sol
1729,"    function getcontractactive() external view returns (bool)
    {
        return contractactive;
    }",False,buggy_50.sol
1730,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_50.sol
1731,"    function setcontractactive(bool contactive) external onlyManager
    {
        contractactive = contactive;
    }",False,buggy_50.sol
1732,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_50.sol
1733,"     function getmanager() external view returns(address)
    {
        return manager;
    }",False,buggy_50.sol
1734,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_50.sol
1735,"    function setmanager(address payable newmngr) external onlyManager
    {
        require(newmngr.balance > 0);
        manager = newmngr;
    }",False,buggy_50.sol
1736,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_50.sol
1737,"    function getcontractbalance() public view returns(uint)
    {
        return address(this).balance;
    }",False,buggy_50.sol
1738,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_50.sol
1739,"    function transfercontractbalance() external onlyManager
    {
        uint cb = address(this).balance;
        require(cb > 0);
        manager.transfer(cb);
    }",False,buggy_50.sol
1740,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_50.sol
1741,"    function getHashOwnersCount(bytes32 hash) public view returns(uint)
    {
        return HashList[hash].length;
    }",False,buggy_50.sol
1742,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_50.sol
1743,"    function getNumberofHashesRegistered() external view returns(uint)
    {
        return HashListLength;
    }",False,buggy_50.sol
1744,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_50.sol
1745,"     function getHashDetails(bytes32 hash,uint indx) external view returns (address,uint)
    {
        uint owncount = getHashOwnersCount(hash);
        require(owncount > 0);
        require(indx < owncount);
        return (HashList[hash][indx].owner,HashList[hash][indx].registrationtime);
    }",False,buggy_50.sol
1746,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_50.sol
1747,"    function registerHash(bytes32 hash) external payable
    {
        require(contractactive == true);
        require(getHashOwnersCount(hash) == 0);
        require(msg.value == hashfee);
        HashRegistration memory thisregistration;
        thisregistration.owner = msg.sender;
        thisregistration.registrationtime = now;
        HashList[hash].push(thisregistration);
        HashListLength++;
        emit RegisterHashEvent(thisregistration.owner, hash, thisregistration.registrationtime);
    }",False,buggy_50.sol
1748,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_50.sol
1749,"    function changeHashOwnership(bytes32 hash, address newowner) external payable
    {
        require(contractactive == true);
        uint owncount = getHashOwnersCount(hash);
        require(owncount > 0);
        require(msg.sender == HashList[hash][owncount - 1].owner); 
        require(msg.value == changehashownerfee);
        HashRegistration memory thisregistration;
        thisregistration.owner = newowner;
        thisregistration.registrationtime = now;
        HashList[hash].push(thisregistration);
        emit ChangeHashOwnershipEvent(msg.sender, thisregistration.owner, hash, thisregistration.registrationtime);
    }",False,buggy_50.sol
1750,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_50.sol
1751,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_50.sol
1752,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_44.sol
1753,"    function _setMetadata(bytes memory metadata) internal {
        emit MetadataSet(metadata);
    }",False,buggy_44.sol
1754,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_44.sol
1755,"function withdrawBalance_re_ent12() public{
        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent12[msg.sender] = 0;
    }",True,buggy_44.sol
1756,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_44.sol
1757,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_44.sol
1758,"    function _setOperator(address operator) internal {
        require(_operator != operator, ""cannot set same operator"");
        _operator = operator;
        emit OperatorUpdated(operator, hasActiveOperator());
    }",False,buggy_44.sol
1759,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_44.sol
1760,"    function _transferOperator(address operator) internal {
        require(_operator != address(0), ""operator not set"");
        _setOperator(operator);
    }",False,buggy_44.sol
1761,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_44.sol
1762,"    function _renounceOperator() internal {
        require(hasActiveOperator(), ""only when operator active"");
        _operator = address(0);
        _status = false;
        emit OperatorUpdated(address(0), false);
    }",False,buggy_44.sol
1763,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_44.sol
1764,"    function _activateOperator() internal {
        require(!hasActiveOperator(), ""only when operator not active"");
        _status = true;
        emit OperatorUpdated(_operator, true);
    }",False,buggy_44.sol
1765,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_44.sol
1766,"    function _deactivateOperator() internal {
        require(hasActiveOperator(), ""only when operator active"");
        _status = false;
        emit OperatorUpdated(_operator, false);
    }",False,buggy_44.sol
1767,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_44.sol
1768,"    function getOperator() public view returns (address operator) {
        operator = _operator;
    }",False,buggy_44.sol
1769,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_44.sol
1770,"    function isOperator(address caller) public view returns (bool ok) {
        return (caller == getOperator());
    }",False,buggy_44.sol
1771,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_44.sol
1772,"    function hasActiveOperator() public view returns (bool ok) {
        return _status;
    }",False,buggy_44.sol
1773,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_44.sol
1774,"    function isActiveOperator(address caller) public view returns (bool ok) {
        return (isOperator(caller) && hasActiveOperator());
    }",False,buggy_44.sol
1775,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_44.sol
1776,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_44.sol
1777,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_44.sol
1778,"    function _setMultiHashFormat(uint8 hashFunction, uint8 digestSize) internal {
        emit HashFormatSet(hashFunction, digestSize);
    }",False,buggy_44.sol
1779,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_44.sol
1780,"    function _submitHash(bytes32 hash) internal {
        emit HashSubmitted(hash);
    }",False,buggy_44.sol
1781,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_44.sol
1782,"    function _combineMultiHash(MultiHash memory multihash) internal pure returns (bytes memory) {
        bytes memory out = new bytes(34);
        out[0] = byte(multihash.hashFunction);
        out[1] = byte(multihash.digestSize);
        uint8 i;
        for (i = 0; i < 32; i++) {
          out[i+2] = multihash.hash[i];
        }
        return out;
    }",False,buggy_44.sol
1783,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_44.sol
1784,"    function _splitMultiHash(bytes memory source) internal pure returns (MultiHash memory) {
        require(source.length == 34, ""length of source must be 34"");
        uint8 hashFunction = uint8(source[0]);
        uint8 digestSize = uint8(source[1]);
        bytes32 hash;
        assembly {
          hash := mload(add(source, 34))
        }
        return (MultiHash({
          hashFunction: hashFunction,
          digestSize: digestSize,
          hash: hash
        }));
    }",False,buggy_44.sol
1785,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_44.sol
1786,     function create(bytes calldata initData) external returns (address instance);,False,buggy_44.sol
1787,"     function createSalty(bytes calldata initData, bytes32 salt) external returns (address instance);",False,buggy_44.sol
1788,     function getInitSelector() external view returns (bytes4 initSelector);,False,buggy_44.sol
1789,     function getInstanceRegistry() external view returns (address instanceRegistry);,False,buggy_44.sol
1790,     function getTemplate() external view returns (address template);,False,buggy_44.sol
1791,"     function getSaltyInstance(bytes calldata, bytes32 salt) external view returns (address instance);",False,buggy_44.sol
1792,     function getNextInstance(bytes calldata) external view returns (address instance);,False,buggy_44.sol
1793,     function getInstanceCreator(address instance) external view returns (address creator);,False,buggy_44.sol
1794,     function getInstanceType() external view returns (bytes4 instanceType);,False,buggy_44.sol
1795,     function getInstanceCount() external view returns (uint256 count);,False,buggy_44.sol
1796,     function getInstance(uint256 index) external view returns (address instance);,False,buggy_44.sol
1797,     function getInstances() external view returns (address[] memory instances);,False,buggy_44.sol
1798,"     function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);",False,buggy_44.sol
1799,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_44.sol
1800,"    function getCreator() public view returns (address creator) {
        creator = iFactory(_factory).getInstanceCreator(address(this));
    }",False,buggy_44.sol
1801,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_44.sol
1802,"    function isCreator(address caller) public view returns (bool ok) {
        ok = (caller == getCreator());
    }",False,buggy_44.sol
1803,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_44.sol
1804,"    function getFactory() public view returns (address factory) {
        factory = _factory;
    }",False,buggy_44.sol
1805,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_44.sol
1806,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_44.sol
1807,"    function initialize(
        address operator,
        bytes memory multihash,
        bytes memory metadata
    ) public initializeTemplate() {
        if (operator != address(0)) {
            Operated._setOperator(operator);
            Operated._activateOperator();
        }
        if (multihash.length != 0) {
            MultiHashWrapper.MultiHash memory multihashObj = MultiHashWrapper._splitMultiHash(multihash);
            ProofHashes._setMultiHashFormat(multihashObj.hashFunction, multihashObj.digestSize);
            ProofHashes._submitHash(multihashObj.hash);
        }
        if (metadata.length != 0) {
            EventMetadata._setMetadata(metadata);
        }
        emit Initialized(operator, multihash, metadata);
    }",False,buggy_44.sol
1808,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_44.sol
1809,"    function submitHash(bytes32 multihash) public {
        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), ""only active operator or creator"");
        ProofHashes._submitHash(multihash);
    }",False,buggy_44.sol
1810,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_44.sol
1811,"    function setMetadata(bytes memory metadata) public {
        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), ""only active operator or creator"");
        EventMetadata._setMetadata(metadata);
    }",False,buggy_44.sol
1812,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_44.sol
1813,"    function transferOperator(address operator) public {
        require(Operated.isActiveOperator(msg.sender), ""only active operator"");
        Operated._transferOperator(operator);
    }",False,buggy_44.sol
1814,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_44.sol
1815,"    function renounceOperator() public {
        require(Operated.isActiveOperator(msg.sender), ""only active operator"");
        Operated._renounceOperator();
    }",False,buggy_44.sol
1816,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_44.sol
1817,"    function FlightDelayAddressResolver() public {
        owner = msg.sender;
    }",False,0xa2e4fb662ba999a1e1bac839340c4d34e36e5d19.sol
1818,"    function changeOwner(address _owner) public {
        require(msg.sender == owner);
        owner = _owner;
    }",False,0xa2e4fb662ba999a1e1bac839340c4d34e36e5d19.sol
1819,"    function getAddress() public constant returns (address _addr) {
        return addr;
    }",False,0xa2e4fb662ba999a1e1bac839340c4d34e36e5d19.sol
1820,"    function setAddress(address _addr) public {
        require(msg.sender == owner);
        addr = _addr;
    }",False,0xa2e4fb662ba999a1e1bac839340c4d34e36e5d19.sol
1821,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1822,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return a / b;
  }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1823,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1824,"  function add(Role storage role, address addr)
    internal
  {
    role.bearer[addr] = true;
  }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1825,"    function rmul(uint256 amount, R.Rational memory r) internal pure returns (uint256) {
        return amount.mul(r.n).div(r.d);
    }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1826,"  function Ownable() public {
    owner = msg.sender;
  }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1827,"  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1828,"  function pause() onlyOwner whenNotPaused public {
    paused = true;
    emit Pause();
  }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1829,"  function unpause() onlyOwner whenPaused public {
    paused = false;
    emit Unpause();
  }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1830,"  function remove(Role storage role, address addr)
    internal
  {
    role.bearer[addr] = false;
  }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1831,"  function check(Role storage role, address addr)
    view
    internal
  {
    require(has(role, addr));
  }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1832,"  function has(Role storage role, address addr)
    view
    internal
    returns (bool)
  {
    return role.bearer[addr];
  }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1833,"  function checkRole(address addr, string roleName)
    view
    public
  {
    roles[roleName].check(addr);
  }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1834,"  function hasRole(address addr, string roleName)
    view
    public
    returns (bool)
  {
    return roles[roleName].has(addr);
  }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1835,"  function addRole(address addr, string roleName)
    internal
  {
    roles[roleName].add(addr);
    emit RoleAdded(addr, roleName);
  }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1836,"  function removeRole(address addr, string roleName)
    internal
  {
    roles[roleName].remove(addr);
    emit RoleRemoved(addr, roleName);
  }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1837,  function totalSupply() public view returns (uint256);,False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1838,  function balanceOf(address who) public view returns (uint256);,False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1839,"  function transfer(address to, uint256 value) public returns (bool);",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1840,"  function allowance(address owner, address spender) public view returns (uint256);",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1841,"  function transferFrom(address from, address to, uint256 value) public returns (bool);",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1842,"  function approve(address spender, uint256 value) public returns (bool);",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1843,"    function Exchange(
        address _baseToken,
        address _dai,
        address _oracle,
        uint256 _ethRateN,
        uint256 _ethRateD,
        uint256 _daiRateN,
        uint256 _daiRateD
    ) public {
        baseToken = ERC20(_baseToken);
        dai = ERC20(_dai);
        addRole(_oracle, ROLE_ORACLE);
        oracle = _oracle;
        ethRate = R.Rational(_ethRateN, _ethRateD);
        daiRate = R.Rational(_daiRateN, _daiRateD);
    }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1844,"    function tradeETH(uint256 expectedAmountBaseToken) public whenNotPaused() payable {
        uint256 amountBaseToken = calculateAmountForETH(msg.value);
        require(amountBaseToken == expectedAmountBaseToken);
        require(baseToken.transfer(msg.sender, amountBaseToken));
        emit TradeETH(msg.value, amountBaseToken);
    }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1845,"    function tradeDAI(uint256 amountDAI, uint256 expectedAmountBaseToken) public whenNotPaused() {
        uint256 amountBaseToken = calculateAmountForDAI(amountDAI);
        require(amountBaseToken == expectedAmountBaseToken);
        require(dai.transferFrom(msg.sender, address(this), amountDAI));
        require(baseToken.transfer(msg.sender, amountBaseToken));
        emit TradeDAI(amountDAI, amountBaseToken);
    }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1846,"    function calculateAmountForETH(uint256 amountETH) public view returns (uint256) {
        return Rationals.rmul(amountETH, ethRate);
    }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1847,"    function calculateAmountForDAI(uint256 amountDAI) public view returns (uint256) {
        return Rationals.rmul(amountDAI, daiRate);
    }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1848,"    function setETHRate(uint256 n, uint256 d) external onlyRole(ROLE_ORACLE) {
        ethRate = R.Rational(n, d);
        emit RateUpdatedETH(n, d);
    }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1849,"    function setDAIRate(uint256 n, uint256 d) external onlyRole(ROLE_ORACLE) {
        daiRate = R.Rational(n, d);
        emit RateUpdatedDAI(n, d);
    }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1850,"    function withdrawERC20s(address token, uint256 amount) external onlyOwner {
        ERC20 erc20 = ERC20(token);
        require(erc20.transfer(owner, amount));
    }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1851,"    function setOracle(address _oracle) external onlyOwner {
        removeRole(oracle, ROLE_ORACLE);
        addRole(_oracle, ROLE_ORACLE);
        oracle = _oracle;
        emit OracleSet(_oracle);
    }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1852,"    function withdrawEther() external onlyOwner {
        owner.transfer(address(this).balance);
    }",False,0xa2d75fdceb750cc0fd96b3d6c10780ef1a12c58b.sol
1853,"     function getBalance(address u) constant returns(uint){
         return userBalance[u];
     }",False,reentrancy_simple.sol
1854,"     function addToBalance() payable{
         userBalance[msg.sender] += msg.value;
     }",False,reentrancy_simple.sol
1855,"     function withdrawBalance(){
         if( ! (msg.sender.call.value(userBalance[msg.sender])() ) ){
             throw;
         }
         userBalance[msg.sender] = 0;
     }",True,reentrancy_simple.sol
1856,"    function safeAdd(uint256 _x, uint256 _y) pure internal returns (uint256) {
        uint256 z = _x + _y;
        assert(z >= _x);
        return z;
    }",False,0x88088019a2a235f9e7495124d0b0e90f41a777b0.sol
1857,"    function safeSub(uint256 _x, uint256 _y) pure internal returns (uint256) {
        assert(_x >= _y);
        return _x - _y;
    }",False,0x88088019a2a235f9e7495124d0b0e90f41a777b0.sol
1858,"    function safeMul(uint256 _x, uint256 _y) pure internal returns (uint256) {
        uint256 z = _x * _y;
        assert(_x == 0 || z / _x == _y);
        return z;
    }",False,0x88088019a2a235f9e7495124d0b0e90f41a777b0.sol
1859,"  function balanceOf(address _owner) public view returns (uint balance) {
    balance = tokenHolders[_owner].tokens;
  }",False,0x88088019a2a235f9e7495124d0b0e90f41a777b0.sol
1860,"  function allowance(address _owner, address _spender) public view returns (uint remaining) {
    return approvals[_owner][_spender];
  }",False,0x88088019a2a235f9e7495124d0b0e90f41a777b0.sol
1861,"  function transfer(address _to, uint _value) public returns (bool success) {
    _transfer(msg.sender, _to, _value);
    return true;
  }",False,0x88088019a2a235f9e7495124d0b0e90f41a777b0.sol
1862,"  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    _transfer(_from, _to, _value);
    _approve(_from, msg.sender, safeSub(approvals[_from][msg.sender], _value));
    return true;
  }",False,0x88088019a2a235f9e7495124d0b0e90f41a777b0.sol
1863,"  function approve(address _spender, uint256 _value) public returns (bool) {
    _approve(msg.sender, _spender, _value);
    return true;
  }",False,0x88088019a2a235f9e7495124d0b0e90f41a777b0.sol
1864,"  function checkDividends(address _addr) view public returns(uint _ethAmount, uint _daiAmount) {
    uint _currentEthPoints = tokenHolders[_addr].currentEthPoints +
      ((totalEthReceived - tokenHolders[_addr].lastEthSnapshot) * tokenHolders[_addr].tokens);
    _ethAmount = _currentEthPoints / totalSupply;
    uint _currentDaiPoints = tokenHolders[_addr].currentDaiPoints +
      ((totalDaiReceived - tokenHolders[_addr].lastDaiSnapshot) * tokenHolders[_addr].tokens);
    _daiAmount = _currentDaiPoints / totalSupply;
  }",False,0x88088019a2a235f9e7495124d0b0e90f41a777b0.sol
1865,"  function withdrawEthDividends() public returns (uint _amount) {
    calcCurPointsForAcct(msg.sender);
    _amount = tokenHolders[msg.sender].currentEthPoints / totalSupply;
    uint _pointsUsed = safeMul(_amount, totalSupply);
    tokenHolders[msg.sender].currentEthPoints = safeSub(tokenHolders[msg.sender].currentEthPoints, _pointsUsed);
    holdoverEthBalance = safeSub(holdoverEthBalance, _amount);
    msg.sender.transfer(_amount);
  }",False,0x88088019a2a235f9e7495124d0b0e90f41a777b0.sol
1866,"  function withdrawDaiDividends() public returns (uint _amount) {
    calcCurPointsForAcct(msg.sender);
    _amount = tokenHolders[msg.sender].currentDaiPoints / totalSupply;
    uint _pointsUsed = safeMul(_amount, totalSupply);
    tokenHolders[msg.sender].currentDaiPoints = safeSub(tokenHolders[msg.sender].currentDaiPoints, _pointsUsed);
    holdoverDaiBalance = safeSub(holdoverDaiBalance, _amount);
    require(iERC20Token(daiToken).transfer(msg.sender, _amount), ""failed to transfer dai"");
  }",False,0x88088019a2a235f9e7495124d0b0e90f41a777b0.sol
1867,"  function _transfer(address _from, address _to, uint _value) internal {
    require(_to != address(0));
    calcCurPointsForAcct(_from);
    tokenHolders[_from].tokens = safeSub(tokenHolders[_from].tokens, _value);
    if (tokenHolders[_to].lastEthSnapshot == 0)
      tokenHolders[_to].lastEthSnapshot = totalEthReceived;
    if (tokenHolders[_to].lastDaiSnapshot == 0)
      tokenHolders[_to].lastDaiSnapshot = totalDaiReceived;
    calcCurPointsForAcct(_to);
    tokenHolders[_to].tokens = safeAdd(tokenHolders[_to].tokens, _value);
    emit Transfer(_from, _to, _value);
  }",False,0x88088019a2a235f9e7495124d0b0e90f41a777b0.sol
1868,"  function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {
    _approve(msg.sender, _spender, safeAdd(approvals[msg.sender][_spender], _addedValue));
    return true;
  }",False,0x88088019a2a235f9e7495124d0b0e90f41a777b0.sol
1869,"  function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {
    _approve(msg.sender, _spender, safeSub(approvals[msg.sender][_spender], _subtractedValue));
    return true;
  }",False,0x88088019a2a235f9e7495124d0b0e90f41a777b0.sol
1870,"  function _approve(address _owner, address _spender, uint _value) internal {
    require(_owner != address(0));
    require(_spender != address(0));
    approvals[_owner][_spender] = _value;
    emit Approval(_owner, _spender, _value);
  }",False,0x88088019a2a235f9e7495124d0b0e90f41a777b0.sol
1871,"  function calcCurPointsForAcct(address _acct) internal {
    uint256 _newEthPoints = safeMul(safeSub(totalEthReceived, tokenHolders[_acct].lastEthSnapshot), tokenHolders[_acct].tokens);
    tokenHolders[_acct].currentEthPoints = safeAdd(tokenHolders[_acct].currentEthPoints, _newEthPoints);
    tokenHolders[_acct].lastEthSnapshot = totalEthReceived;
    uint256 _newDaiPoints = safeMul(safeSub(totalDaiReceived, tokenHolders[_acct].lastDaiSnapshot), tokenHolders[_acct].tokens);
    tokenHolders[_acct].currentDaiPoints = safeAdd(tokenHolders[_acct].currentDaiPoints, _newDaiPoints);
    tokenHolders[_acct].lastDaiSnapshot = totalDaiReceived;
  }",False,0x88088019a2a235f9e7495124d0b0e90f41a777b0.sol
1872,"  function payDai(uint256 _daiAmount) external {
    require(iERC20Token(daiToken).transferFrom(msg.sender, address(this), _daiAmount), ""failed to transfer dai"");
    holdoverDaiBalance = safeAdd(holdoverDaiBalance, _daiAmount);
    totalDaiReceived = safeAdd(totalDaiReceived, _daiAmount);
  }",False,0x88088019a2a235f9e7495124d0b0e90f41a777b0.sol
1873,"  function updateDaiBalance() public {
    uint256 _actBalance = iERC20Token(daiToken).balanceOf(address(this));
    uint256 _daiAmount = safeSub(_actBalance, holdoverDaiBalance);
    holdoverDaiBalance = safeAdd(holdoverDaiBalance, _daiAmount);
    totalDaiReceived = safeAdd(totalDaiReceived, _daiAmount);
  }",False,0x88088019a2a235f9e7495124d0b0e90f41a777b0.sol
1874,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, ""SafeMath: addition overflow"");
        return c;
    }",False,buggy_40.sol
1875,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, ""SafeMath: subtraction overflow"");
        uint256 c = a - b;
        return c;
    }",False,buggy_40.sol
1876,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, ""SafeMath: multiplication overflow"");
        return c;
    }",False,buggy_40.sol
1877,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, ""SafeMath: division by zero"");
        uint256 c = a / b;
        return c;
    }",False,buggy_40.sol
1878,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, ""SafeMath: modulo by zero"");
        return a % b;
    }",False,buggy_40.sol
1879,"    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }",False,buggy_40.sol
1880,"    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }",False,buggy_40.sol
1881,"    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }",False,buggy_40.sol
1882,"    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }",False,buggy_40.sol
1883,"    function approve(address spender, uint256 value) public returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }",False,buggy_40.sol
1884,"    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
        return true;
    }",False,buggy_40.sol
1885,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_40.sol
1886,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_40.sol
1887,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_40.sol
1888,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_40.sol
1889,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_40.sol
1890,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_40.sol
1891,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_40.sol
1892,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_40.sol
1893,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_40.sol
1894,"    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
        return true;
    }",False,buggy_40.sol
1895,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_40.sol
1896,"    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
        return true;
    }",False,buggy_40.sol
1897,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_40.sol
1898,"    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), ""ERC20: transfer from the zero address"");
        require(recipient != address(0), ""ERC20: transfer to the zero address"");
        _balances[sender] = _balances[sender].sub(amount);
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }",False,buggy_40.sol
1899,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_40.sol
1900,"    function _mint(address account, uint256 amount) internal {
        require(account != address(0), ""ERC20: mint to the zero address"");
        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }",False,buggy_40.sol
1901,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_40.sol
1902,"    function _burn(address account, uint256 value) internal {
        require(account != address(0), ""ERC20: burn from the zero address"");
        _totalSupply = _totalSupply.sub(value);
        _balances[account] = _balances[account].sub(value);
        emit Transfer(account, address(0), value);
    }",False,buggy_40.sol
1903,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_40.sol
1904,"    function _approve(address owner, address spender, uint256 value) internal {
        require(owner != address(0), ""ERC20: approve from the zero address"");
        require(spender != address(0), ""ERC20: approve to the zero address"");
        _allowances[owner][spender] = value;
        emit Approval(owner, spender, value);
    }",False,buggy_40.sol
1905,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_40.sol
1906,"    function _burnFrom(address account, uint256 amount) internal {
        _burn(account, amount);
        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));
    }",False,buggy_40.sol
1907,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_40.sol
1908,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_40.sol
1909,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_40.sol
1910,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_40.sol
1911,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_40.sol
1912,"    function name() public view returns (string memory) {
        return _name;
    }",False,buggy_40.sol
1913,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_40.sol
1914,"    function symbol() public view returns (string memory) {
        return _symbol;
    }",False,buggy_40.sol
1915,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_40.sol
1916,"    function decimals() public view returns (uint8) {
        return _decimals;
    }",False,buggy_40.sol
1917,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_40.sol
1918,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_40.sol
1919,"    function transfer(address receiver, uint amount) public;",False,0x67793426747f8c79332520c1291c4fc6443c8407.sol
1920,"    function CELLCrowdsale() public {
        creator = msg.sender;
        startDate = 1515974400;          
        price = 500;
        tokenReward = Token(0xC42de4250cA009C767818eC6f8fb1eacBa859f38);
    }",False,0x67793426747f8c79332520c1291c4fc6443c8407.sol
1921,"    function setOwner(address _owner) public {
        require(msg.sender == creator);
        owner = _owner;      
    }",False,0x67793426747f8c79332520c1291c4fc6443c8407.sol
1922,"    function setCreator(address _creator) public {
        require(msg.sender == creator);
        creator = _creator;      
    }    ",False,0x67793426747f8c79332520c1291c4fc6443c8407.sol
1923,"    function setStartDate(uint256 _startDate) public {
        require(msg.sender == creator);
        startDate = _startDate;      
    }",False,0x67793426747f8c79332520c1291c4fc6443c8407.sol
1924,"    function setEndDate(uint256 _endDate) public {
        require(msg.sender == creator);
        endDate = _endDate;      
    }",False,0x67793426747f8c79332520c1291c4fc6443c8407.sol
1925,"    function setPrice(uint256 _price) public {
        require(msg.sender == creator);
        price = _price;      
    }",False,0x67793426747f8c79332520c1291c4fc6443c8407.sol
1926,"    function sendToken(address receiver, uint amount) public {
        require(msg.sender == creator);
        tokenReward.transfer(receiver, amount);
        FundTransfer(receiver, amount, true);    
    }",False,0x67793426747f8c79332520c1291c4fc6443c8407.sol
1927,"    function ETH_FUND(address _log)
    public 
    {
        TransferLog = Log(_log);
    }",False,0x941d225236464a25eb18076df7da6a91d0f95e9e.sol
1928,"    function Deposit()
    public
    payable
    {
        if(msg.value > MinDeposit)
        {
            balances[msg.sender]+=msg.value;
            TransferLog.AddMessage(msg.sender,msg.value,""Deposit"");
            lastBlock = block.number;
        }
    }",False,0x941d225236464a25eb18076df7da6a91d0f95e9e.sol
1929,"    function CashOut(uint _am)
    public
    payable
    {
        if(_am<=balances[msg.sender]&&block.number>lastBlock)
        {
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                TransferLog.AddMessage(msg.sender,_am,""CashOut"");
            }
        }
    }",True,0x941d225236464a25eb18076df7da6a91d0f95e9e.sol
1930,"    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }",False,0x941d225236464a25eb18076df7da6a91d0f95e9e.sol
1931,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }",False,0xa4f9fe0ad9b9765dc0364444332fa4c69923a6d3.sol
1932,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }",False,0xa4f9fe0ad9b9765dc0364444332fa4c69923a6d3.sol
1933,"    function balanceOf(address _owner) public constant returns (uint256 value) {
        return balances[_owner];
    }",False,0xa4f9fe0ad9b9765dc0364444332fa4c69923a6d3.sol
1934,"    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0));  
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }",False,0xa4f9fe0ad9b9765dc0364444332fa4c69923a6d3.sol
1935,"    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0));  
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(_from, _to, _value);
        return true;
    }",False,0xa4f9fe0ad9b9765dc0364444332fa4c69923a6d3.sol
1936,"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));  
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }",False,0xa4f9fe0ad9b9765dc0364444332fa4c69923a6d3.sol
1937,"    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }",False,0xa4f9fe0ad9b9765dc0364444332fa4c69923a6d3.sol
1938,"    function transferAdminship(address _newAdmin) onlyAdmin(2) public {  
        require(_newAdmin != address(0));
        admin = _newAdmin;
        level[_newAdmin] = 2;
        emit TransferAdminship(admin);
    }",False,0xa4f9fe0ad9b9765dc0364444332fa4c69923a6d3.sol
1939,"    function setAdminLevel(address _target, uint8 _level) onlyAdmin(2) public {
        level[_target] = _level;
        emit AdminLevelSet(_target,_level);
    }",False,0xa4f9fe0ad9b9765dc0364444332fa4c69923a6d3.sol
1940,"    function setSupplyLock(bool _set) onlyAdmin(2) public {  
        lockSupply = _set;
        emit SetSupplyLock(_set);
    }",False,0xa4f9fe0ad9b9765dc0364444332fa4c69923a6d3.sol
1941,"    function burnToken(address _target, uint256 _burnedAmount) onlyAdmin(2) supplyLock public {
        balances[_target] = SafeMath.sub(balances[_target], _burnedAmount);
        totalSupply = SafeMath.sub(totalSupply, _burnedAmount);
        emit Burned(_target, _burnedAmount);
    }",False,0xa4f9fe0ad9b9765dc0364444332fa4c69923a6d3.sol
1942,"    function depositFunds() public payable {
        balances[msg.sender] += msg.value;
    }",False,etherstore.sol
1943,"    function withdrawFunds (uint256 _weiToWithdraw) public {
        require(balances[msg.sender] >= _weiToWithdraw);
        require(_weiToWithdraw <= withdrawalLimit);
        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);
        require(msg.sender.call.value(_weiToWithdraw)());
        balances[msg.sender] -= _weiToWithdraw;
        lastWithdrawTime[msg.sender] = now;
    }",True,etherstore.sol
1944,"  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
    if (a == 0) {
      return 0;
    }
    c = a * b;
    assert(c / a == b);
    return c;
  }",False,0xa0008f510fe9ee696e7e320c9e5cbf61e27791ee.sol
1945,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return a / b;
  }",False,0xa0008f510fe9ee696e7e320c9e5cbf61e27791ee.sol
1946,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }",False,0xa0008f510fe9ee696e7e320c9e5cbf61e27791ee.sol
1947,"  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
    c = a + b;
    assert(c >= a);
    return c;
  }",False,0xa0008f510fe9ee696e7e320c9e5cbf61e27791ee.sol
1948,"  function renounceOwnership() public onlyOwner {
    emit OwnershipRenounced(owner);
    owner = address(0);
  }",False,0xa0008f510fe9ee696e7e320c9e5cbf61e27791ee.sol
1949,"  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }",False,0xa0008f510fe9ee696e7e320c9e5cbf61e27791ee.sol
1950,"  function _transferOwnership(address _newOwner) internal {
    require(_newOwner != address(0));
    emit OwnershipTransferred(owner, _newOwner);
    owner = _newOwner;
  }",False,0xa0008f510fe9ee696e7e320c9e5cbf61e27791ee.sol
1951,"  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }",False,0xa0008f510fe9ee696e7e320c9e5cbf61e27791ee.sol
1952,"  function balanceOf(address _owner) public view returns (uint256) {
    return balances[_owner];
  }",False,0xa0008f510fe9ee696e7e320c9e5cbf61e27791ee.sol
1953,"  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[msg.sender]);
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    emit Transfer(msg.sender, _to, _value);
    return true;
  }",False,0xa0008f510fe9ee696e7e320c9e5cbf61e27791ee.sol
1954,"  function allowance(
    address _owner,
    address _spender
   )
    public
    view
    returns (uint256)
  {
    return allowed[_owner][_spender];
  }",False,0xa0008f510fe9ee696e7e320c9e5cbf61e27791ee.sol
1955,"  function transferFrom(
    address _from,
    address _to,
    uint256 _value
  )
    public
    returns (bool)
  {
    require(_to != address(0));
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);
    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    emit Transfer(_from, _to, _value);
    return true;
  }",False,0xa0008f510fe9ee696e7e320c9e5cbf61e27791ee.sol
1956,"  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
  }",False,0xa0008f510fe9ee696e7e320c9e5cbf61e27791ee.sol
1957,"  function increaseApproval(
    address _spender,
    uint _addedValue
  )
    public
    returns (bool)
  {
    allowed[msg.sender][_spender] = (
      allowed[msg.sender][_spender].add(_addedValue));
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }",False,0xa0008f510fe9ee696e7e320c9e5cbf61e27791ee.sol
1958,"  function decreaseApproval(
    address _spender,
    uint _subtractedValue
  )
    public
    returns (bool)
  {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }",False,0xa0008f510fe9ee696e7e320c9e5cbf61e27791ee.sol
1959,"  function mint(
    address _to,
    uint256 _amount
  )
    onlyOwner
    canMint
    public
    returns (bool)
  {
    require(totalSupply_.add(_amount) <= cap);
    return super.mint(_to, _amount);
  }",False,0xa0008f510fe9ee696e7e320c9e5cbf61e27791ee.sol
1960,"  function finishMinting() onlyOwner canMint public returns (bool) {
    mintingFinished = true;
    emit MintFinished();
    return true;
  }",False,0xa0008f510fe9ee696e7e320c9e5cbf61e27791ee.sol
1961,"  function transferBurnRole(address newBurner) public onlyBurner {
    require(newBurner != address(0));
    emit BurnTransferred(burnerRole, newBurner);
    burnerRole = newBurner;
  }",False,0xa0008f510fe9ee696e7e320c9e5cbf61e27791ee.sol
1962,"  function burn(uint256 _value) public onlyBurner {
    require(_value <= balances[msg.sender]);
    balances[msg.sender] = balances[msg.sender].sub(_value);
    totalSupply_ = totalSupply_.sub(_value);
    emit Burn(msg.sender, _value);
    emit Transfer(msg.sender, address(0), _value);
  }",False,0xa0008f510fe9ee696e7e320c9e5cbf61e27791ee.sol
1963,"  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1964,"  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1965,"  function allowance(
    address owner,
    address spender
   )
    public
    view
    returns (uint256)
  {
    return _allowed[owner][spender];
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1966,"  function transfer(
    address to,
    uint256 value
  )
    public
    whenNotPaused
    returns (bool)
  {
    return super.transfer(to, value);
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1967,"  function approve(
    address spender,
    uint256 value
  )
    public
    whenNotPaused
    returns (bool)
  {
    return super.approve(spender, value);
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1968,"  function transferFrom(
    address from,
    address to,
    uint256 value
  )
    public
    whenNotPaused
    returns (bool)
  {
    return super.transferFrom(from, to, value);
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1969,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1970,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0);  
    uint256 c = a / b;
    return c;
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1971,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1972,"  function add(Role storage role, address account) internal {
    require(account != address(0));
    require(!has(role, account));
    role.bearer[account] = true;
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1973,"  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1974,"  function increaseAllowance(
    address spender,
    uint addedValue
  )
    public
    whenNotPaused
    returns (bool success)
  {
    return super.increaseAllowance(spender, addedValue);
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1975,"  function decreaseAllowance(
    address spender,
    uint subtractedValue
  )
    public
    whenNotPaused
    returns (bool success)
  {
    return super.decreaseAllowance(spender, subtractedValue);
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1976,"  function _transfer(address from, address to, uint256 value) internal {
    require(value <= _balances[from]);
    require(to != address(0));
    _balances[from] = _balances[from].sub(value);
    _balances[to] = _balances[to].add(value);
    emit Transfer(from, to, value);
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1977,"  function _mint(address account, uint256 value) internal {
    require(account != 0);
    _totalSupply = _totalSupply.add(value);
    _balances[account] = _balances[account].add(value);
    emit Transfer(address(0), account, value);
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1978,"  function _burn(address account, uint256 value) internal {
    require(account != 0);
    require(value <= _balances[account]);
    _totalSupply = _totalSupply.sub(value);
    _balances[account] = _balances[account].sub(value);
    emit Transfer(account, address(0), value);
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1979,"  function _burnFrom(address account, uint256 value) internal {
    require(value <= _allowed[account][msg.sender]);
    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(
      value);
    _burn(account, value);
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1980,"  function remove(Role storage role, address account) internal {
    require(account != address(0));
    require(has(role, account));
    role.bearer[account] = false;
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1981,"  function has(Role storage role, address account)
    internal
    view
    returns (bool)
  {
    require(account != address(0));
    return role.bearer[account];
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1982,"  function isPauser(address account) public view returns (bool) {
    return pausers.has(account);
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1983,"  function addPauser(address account) public onlyPauser {
    _addPauser(account);
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1984,"  function renouncePauser() public {
    _removePauser(msg.sender);
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1985,"  function _addPauser(address account) internal {
    pausers.add(account);
    emit PauserAdded(account);
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1986,"  function _removePauser(address account) internal {
    pausers.remove(account);
    emit PauserRemoved(account);
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1987,"  function paused() public view returns(bool) {
    return _paused;
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1988,"  function pause() public onlyPauser whenNotPaused {
    _paused = true;
    emit Paused(msg.sender);
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1989,"  function unpause() public onlyPauser whenPaused {
    _paused = false;
    emit Unpaused(msg.sender);
  }",False,0xa8eda9d4aee0eb882f8752c6ba7e16d9233c9ad2.sol
1990,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_43.sol
1991,"    function _setMetadata(bytes memory metadata) internal {
        emit MetadataSet(metadata);
    }",False,buggy_43.sol
1992,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_43.sol
1993,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_43.sol
1994,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_43.sol
1995,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_43.sol
1996,"    function _setOperator(address operator) internal {
        require(_operator != operator, ""cannot set same operator"");
        _operator = operator;
        emit OperatorUpdated(operator, hasActiveOperator());
    }",False,buggy_43.sol
1997,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_43.sol
1998,"    function _transferOperator(address operator) internal {
        require(_operator != address(0), ""operator not set"");
        _setOperator(operator);
    }",False,buggy_43.sol
1999,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_43.sol
2000,"    function _renounceOperator() internal {
        require(hasActiveOperator(), ""only when operator active"");
        _operator = address(0);
        _status = false;
        emit OperatorUpdated(address(0), false);
    }",False,buggy_43.sol
2001,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_43.sol
2002,"    function _activateOperator() internal {
        require(!hasActiveOperator(), ""only when operator not active"");
        _status = true;
        emit OperatorUpdated(_operator, true);
    }",False,buggy_43.sol
2003,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_43.sol
2004,"    function _deactivateOperator() internal {
        require(hasActiveOperator(), ""only when operator active"");
        _status = false;
        emit OperatorUpdated(_operator, false);
    }",False,buggy_43.sol
2005,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_43.sol
2006,"    function getOperator() public view returns (address operator) {
        operator = _operator;
    }",False,buggy_43.sol
2007,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_43.sol
2008,"    function isOperator(address caller) public view returns (bool ok) {
        return (caller == getOperator());
    }",False,buggy_43.sol
2009,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_43.sol
2010,"    function hasActiveOperator() public view returns (bool ok) {
        return _status;
    }",False,buggy_43.sol
2011,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_43.sol
2012,"    function isActiveOperator(address caller) public view returns (bool ok) {
        return (isOperator(caller) && hasActiveOperator());
    }",False,buggy_43.sol
2013,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_43.sol
2014,"    function _combineMultiHash(MultiHash memory multihash) internal pure returns (bytes memory) {
        bytes memory out = new bytes(34);
        out[0] = byte(multihash.hashFunction);
        out[1] = byte(multihash.digestSize);
        uint8 i;
        for (i = 0; i < 32; i++) {
          out[i+2] = multihash.hash[i];
        }
        return out;
    }",False,buggy_43.sol
2015,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_43.sol
2016,"    function _splitMultiHash(bytes memory source) internal pure returns (MultiHash memory) {
        require(source.length == 34, ""length of source must be 34"");
        uint8 hashFunction = uint8(source[0]);
        uint8 digestSize = uint8(source[1]);
        bytes32 hash;
        assembly {
          hash := mload(add(source, 34))
        }
        return (MultiHash({
          hashFunction: hashFunction,
          digestSize: digestSize,
          hash: hash
        }));
    }",False,buggy_43.sol
2017,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_43.sol
2018,     function create(bytes calldata initData) external returns (address instance);,False,buggy_43.sol
2019,"     function createSalty(bytes calldata initData, bytes32 salt) external returns (address instance);",False,buggy_43.sol
2020,     function getInitSelector() external view returns (bytes4 initSelector);,False,buggy_43.sol
2021,     function getInstanceRegistry() external view returns (address instanceRegistry);,False,buggy_43.sol
2022,     function getTemplate() external view returns (address template);,False,buggy_43.sol
2023,"     function getSaltyInstance(bytes calldata, bytes32 salt) external view returns (address instance);",False,buggy_43.sol
2024,     function getNextInstance(bytes calldata) external view returns (address instance);,False,buggy_43.sol
2025,     function getInstanceCreator(address instance) external view returns (address creator);,False,buggy_43.sol
2026,     function getInstanceType() external view returns (bytes4 instanceType);,False,buggy_43.sol
2027,     function getInstanceCount() external view returns (uint256 count);,False,buggy_43.sol
2028,     function getInstance(uint256 index) external view returns (address instance);,False,buggy_43.sol
2029,     function getInstances() external view returns (address[] memory instances);,False,buggy_43.sol
2030,"     function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);",False,buggy_43.sol
2031,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_43.sol
2032,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_43.sol
2033,"    function _setProofHash(bytes memory proofHash) internal {
        _proofHash = MultiHashWrapper._splitMultiHash(proofHash);
        emit ProofHashSet(msg.sender, proofHash);
    }",False,buggy_43.sol
2034,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_43.sol
2035,"    function getProofHash() public view returns (bytes memory proofHash) {
        proofHash = MultiHashWrapper._combineMultiHash(_proofHash);
    }",False,buggy_43.sol
2036,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_43.sol
2037,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_43.sol
2038,"    function getCreator() public view returns (address creator) {
        creator = iFactory(_factory).getInstanceCreator(address(this));
    }",False,buggy_43.sol
2039,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_43.sol
2040,"    function isCreator(address caller) public view returns (bool ok) {
        ok = (caller == getCreator());
    }",False,buggy_43.sol
2041,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_43.sol
2042,"    function getFactory() public view returns (address factory) {
        factory = _factory;
    }",False,buggy_43.sol
2043,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_43.sol
2044,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_43.sol
2045,"    function initialize(
        address operator,
        bytes memory multihash,
        bytes memory metadata
    ) public initializeTemplate() {
        if (multihash.length != 0) {
            ProofHash._setProofHash(multihash);
        }
        if (operator != address(0)) {
            Operated._setOperator(operator);
            Operated._activateOperator();
        }
        if (metadata.length != 0) {
            EventMetadata._setMetadata(metadata);
        }
        emit Initialized(operator, multihash, metadata);
    }",False,buggy_43.sol
2046,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_43.sol
2047,"    function setMetadata(bytes memory metadata) public {
        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), ""only active operator or creator"");
        EventMetadata._setMetadata(metadata);
    }",False,buggy_43.sol
2048,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_43.sol
2049,"    function transferOperator(address operator) public {
        require(Operated.isActiveOperator(msg.sender), ""only active operator"");
        Operated._transferOperator(operator);
    }",False,buggy_43.sol
2050,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_43.sol
2051,"    function renounceOperator() public {
        require(Operated.isActiveOperator(msg.sender), ""only active operator"");
        Operated._renounceOperator();
    }",False,buggy_43.sol
2052,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_43.sol
2053,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2054,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);
        uint256 c = a / b;
        return c;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2055,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2056,"    function add(Role storage role, address account) internal {
        require(account != address(0));
        require(!has(role, account));
        role.bearer[account] = true;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2057,"    function transfer(address to, uint256 value) public returns (bool) {
        _transfer(msg.sender, to, value);
        return true;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2058,"    function approve(address spender, uint256 value) public returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2059,"    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        _transfer(from, to, value);
        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));
        return true;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2060,"    function mint(address to, uint256 value) public onlyMinter returns (bool) {
        _mint(to, value);
        return true;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2061,"    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2062,"    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2063,"    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2064,"    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));
        return true;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2065,"    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));
        return true;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2066,"    function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0));
        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        emit Transfer(from, to, value);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2067,"    function _mint(address account, uint256 value) internal {
        require(account != address(0));
        _totalSupply = _totalSupply.add(value);
        _balances[account] = _balances[account].add(value);
        emit Transfer(address(0), account, value);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2068,"    function _burn(address account, uint256 value) internal {
        require(account != address(0));
        _totalSupply = _totalSupply.sub(value);
        _balances[account] = _balances[account].sub(value);
        emit Transfer(account, address(0), value);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2069,"    function _approve(address owner, address spender, uint256 value) internal {
        require(spender != address(0));
        require(owner != address(0));
        _allowed[owner][spender] = value;
        emit Approval(owner, spender, value);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2070,"    function _burnFrom(address account, uint256 value) internal {
        _burn(account, value);
        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2071,"    function remove(Role storage role, address account) internal {
        require(account != address(0));
        require(has(role, account));
        role.bearer[account] = false;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2072,"    function has(Role storage role, address account) internal view returns (bool) {
        require(account != address(0));
        return role.bearer[account];
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2073,"    function isMinter(address account) public view returns (bool) {
        return _minters.has(account);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2074,"    function _addMinter(address account) internal {
        _minters.add(account);
        emit MinterAdded(account);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2075,"    function burn(uint256 value) public {
        _burn(msg.sender, value);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2076,"    function burnFrom(address from, uint256 value) public {
        _burnFrom(from, value);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2077,"    function name() public pure returns (string memory) {
        return _name;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2078,"    function symbol() public pure returns (string memory) {
        return _symbol;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2079,"    function decimals() public pure returns (uint8) {
        return _decimals;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2080,"    function isWhitelistAdmin(address account) public view returns (bool) {
        return _whitelistAdmins.has(account);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2081,"    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
        _addWhitelistAdmin(account);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2082,"    function renounceWhitelistAdmin() public {
        _removeWhitelistAdmin(msg.sender);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2083,"    function _addWhitelistAdmin(address account) internal {
        _whitelistAdmins.add(account);
        emit WhitelistAdminAdded(account);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2084,"    function _removeWhitelistAdmin(address account) internal {
        _whitelistAdmins.remove(account);
        emit WhitelistAdminRemoved(account);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2085,"    function isWhitelisted(address account) public view returns (bool) {
        return _whitelisteds.has(account);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2086,"    function removeWhitelisted(address account) public onlyWhitelistAdmin {
        _removeWhitelisted(account);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2087,"    function renounceWhitelisted() public {
        _removeWhitelisted(msg.sender);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2088,"    function _addWhitelisted(address account) internal {
        _whitelisteds.add(account);
        emit WhitelistedAdded(account);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2089,"    function _removeWhitelisted(address account) internal {
        _whitelisteds.remove(account);
        emit WhitelistedRemoved(account);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2090,"    function isTeamMember(address account) public view returns (bool) {
        return _team.has(account);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2091,"    function _addTeam(address account) internal onlyWhitelistAdmin {
        _team.add(account);
        emit TeamMemberAdded(account);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2092,"    function removeTeam(address account) public onlyWhitelistAdmin {
        _team.remove(account);
        emit TeamMemberRemoved(account);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2093,"    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        require(token.transferFrom(from, to, value));
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2094,"    function approveSwap(address swapper) public onlyWhitelistAdmin {
        require(swapper != address(0), ""approveSwap: invalid swapper address"");
        uint256 balance = _oldToken.balanceOf(swapper);
        require(balance > 0, ""approveSwap: the swapper token balance is zero"");
        require(_infos[swapper].alreadyWhitelisted == false, ""approveSwap: the user already swapped his tokens"");
        _addWhitelisted(swapper);
        _infos[swapper] = SwapInfo({
            alreadyWhitelisted: true,
            availableTokens: balance,
            lastSwapTimestamp: 0
        });
        emit SwapApproved(swapper, balance);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2095,"    function approveTeam(address member) external onlyWhitelistAdmin {
        require(member != address(0), ""approveTeam: invalid team address"");
        _addTeam(member);
        approveSwap(member);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2096,"    function swap() external onlyWhitelisted {
        if (now >= _lastReset + _period) {
            _reset();
        }
        require(_remaining != 0, ""swap: no tokens available"");
        require(_infos[msg.sender].availableTokens != 0, ""swap: no tokens available for swap"");
        require(now >= _infos[msg.sender].lastSwapTimestamp + _period, ""swap: msg.sender can not call this method now"");
        uint256 toSwap = _infos[msg.sender].availableTokens;
        if (toSwap > _publicLimit) {
            toSwap = _publicLimit;
        }
        if (toSwap > _remaining) {
            toSwap = _remaining;
        }
        if (toSwap > _oldToken.balanceOf(msg.sender)) {
            toSwap = _oldToken.balanceOf(msg.sender);
        }
        _swap(toSwap);
        _update(toSwap);
        _remaining = _remaining.sub(toSwap);
        emit TokensSwapped(msg.sender, toSwap);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2097,"    function swapTeam() external onlyTeamMember {
        require(_infos[msg.sender].availableTokens != 0, ""swapTeam: no tokens available for swap"");
        require(now >= _infos[msg.sender].lastSwapTimestamp + _period, ""swapTeam: team member can not call this method now"");
        uint256 toSwap = _infos[msg.sender].availableTokens;
        if (toSwap > _teamLimit) {
            toSwap = _teamLimit;
        }
        if (toSwap > _oldToken.balanceOf(msg.sender)) {
            toSwap = _oldToken.balanceOf(msg.sender);
        }
        _swap(toSwap);
        _update(toSwap);
        emit TeamTokensSwapped(msg.sender, toSwap);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2098,"    function swapMaster(uint256 amount) external {
        require(msg.sender == _swapMaster, ""swapMaster: only swap master can call this methid"");
        _swap(amount);
        emit MasterTokensSwapped(amount);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2099,"    function getSwappableAmount(address swapper) external view returns (uint256) {
        return _infos[swapper].availableTokens;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2100,"    function getTimeOfLastSwap(address swapper) external view returns (uint256) {
        return _infos[swapper].lastSwapTimestamp;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2101,"    function getRemaining() external view returns (uint256) {
        return _remaining;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2102,"    function getLastReset() external view returns (uint256) {
        return _lastReset;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2103,"    function getTokenAddress() external view returns (address) {
        return address(_newToken);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2104,"    function _reset() private {
        _lastReset = now;
        _remaining = _contractLimit;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2105,"    function _update(uint256 amountToSwap) private {
        _infos[msg.sender].availableTokens = _infos[msg.sender].availableTokens.sub(amountToSwap);
        _infos[msg.sender].lastSwapTimestamp = now;
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2106,"    function _swap(uint256 amountToSwap) private {
        _oldToken.safeTransferFrom(msg.sender, address(this), amountToSwap);
        _newToken.mint(msg.sender, amountToSwap);
    }",False,0xa1c32fcbb0a0d4bda9451950b6c5c1a9106b8afc.sol
2107,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2108,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);
        uint256 c = a / b;
        return c;
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2109,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2110,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2111,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2112,"    function transfer(address to, uint256 value) public returns (bool) {
        _transfer(msg.sender, to, value);
        return true;
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2113,"    function approve(address spender, uint256 value) public returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2114,"    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        _transfer(from, to, value);
        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));
        return true;
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2115,"    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2116,"    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2117,"    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2118,"    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));
        return true;
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2119,"    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));
        return true;
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2120,"    function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0));
        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        emit Transfer(from, to, value);
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2121,"    function _mint(address account, uint256 value) internal {
        require(account != address(0));
        _totalSupply = _totalSupply.add(value);
        _balances[account] = _balances[account].add(value);
        emit Transfer(address(0), account, value);
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2122,"    function _burn(address account, uint256 value) internal {
        require(account != address(0));
        _totalSupply = _totalSupply.sub(value);
        _balances[account] = _balances[account].sub(value);
        emit Transfer(account, address(0), value);
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2123,"    function _approve(address owner, address spender, uint256 value) internal {
        require(spender != address(0));
        require(owner != address(0));
        _allowed[owner][spender] = value;
        emit Approval(owner, spender, value);
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2124,"    function _burnFrom(address account, uint256 value) internal {
        _burn(account, value);
        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2125,"    function name() public view returns (string memory) {
        return _name;
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2126,"    function symbol() public view returns (string memory) {
        return _symbol;
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2127,"    function decimals() public view returns (uint8) {
        return _decimals;
    }",False,0xa02d0b6bfce1dbd02b9cbb70e6b480333e8a86ec.sol
2128,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }",False,0x501202610ce02b97fcbd406157431214ca55ec75.sol
2129,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }",False,0x501202610ce02b97fcbd406157431214ca55ec75.sol
2130,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }",False,0x501202610ce02b97fcbd406157431214ca55ec75.sol
2131,"  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }",False,0x501202610ce02b97fcbd406157431214ca55ec75.sol
2132,"  function balanceOf(address _owner) public constant returns (uint256 balance) {
    return balances[_owner];
  }",False,0x501202610ce02b97fcbd406157431214ca55ec75.sol
2133,"  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[msg.sender]);
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    emit Transfer(msg.sender, _to, _value);
    return true;
  }",False,0x501202610ce02b97fcbd406157431214ca55ec75.sol
2134,"  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
    return allowed[_owner][_spender];
  }",False,0x501202610ce02b97fcbd406157431214ca55ec75.sol
2135,"  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);
    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    emit Transfer(_from, _to, _value);
    return true;
  }",False,0x501202610ce02b97fcbd406157431214ca55ec75.sol
2136,"  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
  }",False,0x501202610ce02b97fcbd406157431214ca55ec75.sol
2137,"  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }",False,0x501202610ce02b97fcbd406157431214ca55ec75.sol
2138,"  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }",False,0x501202610ce02b97fcbd406157431214ca55ec75.sol
2139,"  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0)); 
    owner = newOwner;
  }",False,0x501202610ce02b97fcbd406157431214ca55ec75.sol
2140,"    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }",False,0xa3f7871a4b86bcc3b6e97c8fd0745e71c55e1f82.sol
2141,"    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }",False,0xa3f7871a4b86bcc3b6e97c8fd0745e71c55e1f82.sol
2142,"    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }",False,0xa3f7871a4b86bcc3b6e97c8fd0745e71c55e1f82.sol
2143,"    function transfer(address to, uint256 value) public returns (bool) {
        _transfer(msg.sender, to, value);
        return true;
    }",False,0xa3f7871a4b86bcc3b6e97c8fd0745e71c55e1f82.sol
2144,"    function approve(address spender, uint256 value) public returns (bool) {
        require(spender != address(0), ""Cannot approve for 0x0 address"");
        _allowed[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }",False,0xa3f7871a4b86bcc3b6e97c8fd0745e71c55e1f82.sol
2145,"    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
        _transfer(from, to, value);
        emit Approval(from, msg.sender, _allowed[from][msg.sender]);
        return true;
    }",False,0xa3f7871a4b86bcc3b6e97c8fd0745e71c55e1f82.sol
2146,"    function mul(int256 a, int256 b) internal pure returns (int256) {
        if (a == 0) {
            return 0;
        }
        require(!(a == -1 && b == INT256_MIN));  
        int256 c = a * b;
        require(c / a == b);
        return c;
    }",False,0xa3f7871a4b86bcc3b6e97c8fd0745e71c55e1f82.sol
2147,"    function div(int256 a, int256 b) internal pure returns (int256) {
        require(b != 0);  
        require(!(b == -1 && a == INT256_MIN));  
        int256 c = a / b;
        return c;
    }",False,0xa3f7871a4b86bcc3b6e97c8fd0745e71c55e1f82.sol
2148,"    function sub(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a - b;
        require((b >= 0 && c <= a) || (b < 0 && c > a));
        return c;
    }",False,0xa3f7871a4b86bcc3b6e97c8fd0745e71c55e1f82.sol
2149,"    function add(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a + b;
        require((b >= 0 && c >= a) || (b < 0 && c < a));
        return c;
    }",False,0xa3f7871a4b86bcc3b6e97c8fd0745e71c55e1f82.sol
2150,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }",False,0xa3f7871a4b86bcc3b6e97c8fd0745e71c55e1f82.sol
2151,"    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        require(spender != address(0), ""Cannot increaseAllowance for 0x0 address"");
        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }",False,0xa3f7871a4b86bcc3b6e97c8fd0745e71c55e1f82.sol
2152,"    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        require(spender != address(0), ""Cannot decreaseAllowance for 0x0 address"");
        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }",False,0xa3f7871a4b86bcc3b6e97c8fd0745e71c55e1f82.sol
2153,"    function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0), ""Cannot transfer to 0x0 address"");
        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        emit Transfer(from, to, value);
    }",False,0xa3f7871a4b86bcc3b6e97c8fd0745e71c55e1f82.sol
2154,"    function _mint(address account, uint256 value) internal {
        require(account != address(0), ""Cannot mint to 0x0 address"");
        _totalSupply = _totalSupply.add(value);
        _balances[account] = _balances[account].add(value);
        emit Transfer(address(0), account, value);
    }",False,0xa3f7871a4b86bcc3b6e97c8fd0745e71c55e1f82.sol
2155,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_42.sol
2156,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_42.sol
2157,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_42.sol
2158,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_42.sol
2159,"    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }",False,buggy_42.sol
2160,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_42.sol
2161,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }",False,buggy_42.sol
2162,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }",False,buggy_42.sol
2163,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }",False,buggy_42.sol
2164,"  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }",False,buggy_42.sol
2165,"  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
    uint256 c = add(a,m);
    uint256 d = sub(c,1);
    return mul(div(d,m),m);
  }",False,buggy_42.sol
2166,    function balanceOf(address who) external view returns (uint256);,False,buggy_42.sol
2167,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_42.sol
2168,"    function transferFrom(address from, address to, uint256 value) external returns (bool);",False,buggy_42.sol
2169,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_42.sol
2170,"    function transfer(address to, uint256 value) external returns (bool);",False,buggy_42.sol
2171,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_42.sol
2172,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_42.sol
2173,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_42.sol
2174,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_42.sol
2175,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_42.sol
2176,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_42.sol
2177,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_42.sol
2178,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_42.sol
2179,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_42.sol
2180,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_42.sol
2181,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_42.sol
2182,"    function startStaking() public{
        require(token.balanceOf(msg.sender) >= stakeTokens + findOnePercent(stakeTokens));
        require(token.transferFrom(msg.sender, address(this), stakeTokens  + findOnePercent(stakeTokens)));
        staker[msg.sender].time = now;
        staker[msg.sender].tokens =  staker[msg.sender].tokens + stakeTokens;
        emit stakingstarted(msg.sender, staker[msg.sender].tokens, staker[msg.sender].time);
    }",False,buggy_42.sol
2183,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_42.sol
2184,"    function redeem() public{
        require(!lock);
        require(!staker[msg.sender].redeem);
        require(staker[msg.sender].time + stakeTime <= now);
        require(token.transfer(msg.sender,staker[msg.sender].tokens));
        require(token.transferFrom(owner, msg.sender ,staker[msg.sender].tokens * stakePercentage * 100 / 10000));
        emit tokensRedeemed(msg.sender, staker[msg.sender].tokens, staker[msg.sender].tokens * stakePercentage * 100 / 10000);
        staker[msg.sender].redeem = true;
        staker[msg.sender].tokens = 0;
    }",False,buggy_42.sol
2185,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_42.sol
2186,"    function changeStakeTokens(uint256 _NewTokensThreshold) public onlyOwner{
        stakeTokens = _NewTokensThreshold * 10 ** uint(10);
    }",False,buggy_42.sol
2187,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_42.sol
2188,"    function changeStakeTime(uint256 _newStakeTime) public onlyOwner{
        stakeTime = _newStakeTime;
    }",False,buggy_42.sol
2189,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_42.sol
2190,"    function changeStakingPercentage(uint _newStakePercentage) public onlyOwner{
        stakePercentage = _newStakePercentage;
    }",False,buggy_42.sol
2191,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_42.sol
2192,"    function lockWithdrawals() public onlyOwner{
        lock = true;
    }",False,buggy_42.sol
2193,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_42.sol
2194,"    function findOnePercent(uint256 value) private view returns (uint256)  {
        uint256 roundValue = value.ceil(basePercent);
        uint256 onePercent = roundValue.mul(basePercent).div(10000);
        return onePercent;
    }",False,buggy_42.sol
2195,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_42.sol
2196,"    function getPhasePercent() view public returns (uint){
        uint contractBalance = address(this).balance;
        if (contractBalance < 300 ether) {
            return 2;
        }
        if (contractBalance >= 300 ether && contractBalance < 1200 ether) {
            return 3;
        }
        if (contractBalance >= 1200 ether) {
            return 4;
        }
    }",False,0xa5c11e420fd480675302f8e09e40b22ff65e5dfc.sol
2197,"    function getUserBalance(address _address) view public returns (uint256) {
        uint percent = getPhasePercent();
        uint256 differentTime = now.sub(time[_address]).div(1 hours);
        uint256 differentPercent = deposit[_address].mul(percent).div(100);
        uint256 payout = differentPercent.mul(differentTime).div(24);
        return payout;
    }",False,0xa5c11e420fd480675302f8e09e40b22ff65e5dfc.sol
2198,"    function withdraw(address _address) private {
        uint256 balance = getUserBalance(_address);
        if (deposit[_address] > 0 && address(this).balance >= balance && balance > 0) {
            withdrawals[_address] = withdrawals[_address].add(balance);
            time[_address] = now;
            if (withdrawals[_address] >= deposit[_address].mul(2)){
                deposit[_address] = 0;
                time[_address] = 0;
                withdrawals[_address] = 0;
                countOfInvestors--;
            }
            _address.transfer(balance);
        }
    }",False,0xa5c11e420fd480675302f8e09e40b22ff65e5dfc.sol
2199,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }",False,0xa5c11e420fd480675302f8e09e40b22ff65e5dfc.sol
2200,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);  
        uint256 c = a / b;
        return c;
    }",False,0xa5c11e420fd480675302f8e09e40b22ff65e5dfc.sol
2201,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }",False,0xa5c11e420fd480675302f8e09e40b22ff65e5dfc.sol
2202,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }",False,0xa5c11e420fd480675302f8e09e40b22ff65e5dfc.sol
2203,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }",False,0xa5c11e420fd480675302f8e09e40b22ff65e5dfc.sol
2204,"    function hatchEggs(address ref) public {
        require(initialized);
        if(referrals[msg.sender] == 0 && referrals[msg.sender] != msg.sender){
            referrals[msg.sender] = ref;
        }
        uint256 eggsUsed = getMyEggs();
        uint256 newDragons = SafeMath.div(eggsUsed, EGGS_TO_HATCH_1DRAGON);
        hatchery[msg.sender] = SafeMath.add(hatchery[msg.sender], newDragons);
        claimedEggs[msg.sender] = 0;
        lastHatch[msg.sender] = now;
        claimedEggs[referrals[msg.sender]] = SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));
        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));
        emit Hatch(msg.sender, eggsUsed, newDragons);
    }",False,0x416768387836bd8715d127ef9065975325cfad14.sol
2205,"    function sellEggs() public {
        require(initialized);
        uint256 hasEggs = getMyEggs();
        uint256 eggValue = calculateEggSell(hasEggs);
        uint256 fee = calculateDevFee(eggValue);
        claimedEggs[msg.sender] = 0;
        lastHatch[msg.sender] = now;
        marketEggs = SafeMath.add(marketEggs,hasEggs);
        ceoAddress.transfer(fee);
        msg.sender.transfer(SafeMath.sub(eggValue,fee));
        emit Sell(msg.sender, hasEggs);
    }",False,0x416768387836bd8715d127ef9065975325cfad14.sol
2206,"    function buyEggs() public payable {
        require(initialized);
        uint256 eggsBought = calculateEggBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));
        eggsBought = SafeMath.sub(eggsBought, calculateDevFee(eggsBought));
        ceoAddress.transfer(calculateDevFee(msg.value));
        claimedEggs[msg.sender] = SafeMath.add(claimedEggs[msg.sender], eggsBought);
        emit Buy(msg.sender, eggsBought);
    }",False,0x416768387836bd8715d127ef9065975325cfad14.sol
2207,"    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){
        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));
    }",False,0x416768387836bd8715d127ef9065975325cfad14.sol
2208,"    function calculateEggSell(uint256 eggs) public view returns(uint256){
        return calculateTrade(eggs,marketEggs, address(this).balance);
    }",False,0x416768387836bd8715d127ef9065975325cfad14.sol
2209,"    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){
        return calculateTrade(eth,contractBalance,marketEggs);
    }",False,0x416768387836bd8715d127ef9065975325cfad14.sol
2210,"    function calculateEggBuySimple(uint256 eth) public view returns(uint256){
        return calculateEggBuy(eth, address(this).balance);
    }",False,0x416768387836bd8715d127ef9065975325cfad14.sol
2211,"    function calculateDevFee(uint256 amount) public view returns(uint256){
        return SafeMath.div(SafeMath.mul(amount,4),100);
    }",False,0x416768387836bd8715d127ef9065975325cfad14.sol
2212,"    function seedMarket(uint256 eggs) public payable{
        require(marketEggs == 0);
        initialized = true;
        marketEggs = eggs;
    }",False,0x416768387836bd8715d127ef9065975325cfad14.sol
2213,"    function claimFreeDragon() public{
        require(initialized);
        require(hatchery[msg.sender] == 0);
        lastHatch[msg.sender] = now;
        hatchery[msg.sender] = 300;
    }",False,0x416768387836bd8715d127ef9065975325cfad14.sol
2214,"    function getBalance() public view returns(uint256){
        return address(this).balance;
    }",False,0x416768387836bd8715d127ef9065975325cfad14.sol
2215,"    function getMyDragons() public view returns(uint256){
        return hatchery[msg.sender];
    }",False,0x416768387836bd8715d127ef9065975325cfad14.sol
2216,"    function getMyEggs() public view returns(uint256){
        return SafeMath.add(claimedEggs[msg.sender], getEggsSinceLastHatch(msg.sender));
    }",False,0x416768387836bd8715d127ef9065975325cfad14.sol
2217,"    function getEggsSinceLastHatch(address _address) public view returns(uint256){
        uint256 secondsPassed = min(EGGS_TO_HATCH_1DRAGON, SafeMath.sub(now, lastHatch[_address]));
        return SafeMath.mul(secondsPassed, hatchery[_address]);
    }",False,0x416768387836bd8715d127ef9065975325cfad14.sol
2218,"    function min(uint256 a, uint256 b) private pure returns (uint256) {
        return a < b ? a : b;
    }",False,0x416768387836bd8715d127ef9065975325cfad14.sol
2219,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }",False,0x416768387836bd8715d127ef9065975325cfad14.sol
2220,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }",False,0x416768387836bd8715d127ef9065975325cfad14.sol
2221,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }",False,0x416768387836bd8715d127ef9065975325cfad14.sol
2222,"  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }",False,0x416768387836bd8715d127ef9065975325cfad14.sol
2223,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }",False,0x759685437c6d4658b00b5cebdf907dfdeba52357.sol
2224,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0);  
    uint256 c = a / b;
    return c;
  }",False,0x759685437c6d4658b00b5cebdf907dfdeba52357.sol
2225,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }",False,0x759685437c6d4658b00b5cebdf907dfdeba52357.sol
2226,"  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }",False,0x759685437c6d4658b00b5cebdf907dfdeba52357.sol
2227,"  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }",False,0x759685437c6d4658b00b5cebdf907dfdeba52357.sol
2228,"  function name() public view returns(string memory) {
    return _name;
  }",False,0x759685437c6d4658b00b5cebdf907dfdeba52357.sol
2229,"  function symbol() public view returns(string memory) {
    return _symbol;
  }",False,0x759685437c6d4658b00b5cebdf907dfdeba52357.sol
2230,"  function decimals() public view returns(uint8) {
    return _decimals;
  }",False,0x759685437c6d4658b00b5cebdf907dfdeba52357.sol
2231,"  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }",False,0x759685437c6d4658b00b5cebdf907dfdeba52357.sol
2232,"  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }",False,0x759685437c6d4658b00b5cebdf907dfdeba52357.sol
2233,"  function allowance(
    address owner,
    address spender
   )
    public
    view
    returns (uint256)
  {
    return _allowed[owner][spender];
  }",False,0x759685437c6d4658b00b5cebdf907dfdeba52357.sol
2234,"  function transfer(address to, uint256 value) public returns (bool) {
    _transfer(msg.sender, to, value);
    return true;
  }",False,0x759685437c6d4658b00b5cebdf907dfdeba52357.sol
2235,"  function approve(address spender, uint256 value) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = value;
    emit Approval(msg.sender, spender, value);
    return true;
  }",False,0x759685437c6d4658b00b5cebdf907dfdeba52357.sol
2236,"  function transferFrom(
    address from,
    address to,
    uint256 value
  )
    public
    returns (bool)
  {
    require(value <= _allowed[from][msg.sender]);
    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
    _transfer(from, to, value);
    return true;
  }",False,0x759685437c6d4658b00b5cebdf907dfdeba52357.sol
2237,"  function increaseAllowance(
    address spender,
    uint256 addedValue
  )
    public
    returns (bool)
  {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (
      _allowed[msg.sender][spender].add(addedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }",False,0x759685437c6d4658b00b5cebdf907dfdeba52357.sol
2238,"  function decreaseAllowance(
    address spender,
    uint256 subtractedValue
  )
    public
    returns (bool)
  {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (
      _allowed[msg.sender][spender].sub(subtractedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }",False,0x759685437c6d4658b00b5cebdf907dfdeba52357.sol
2239,"  function _transfer(address from, address to, uint256 value) internal {
    require(value <= _balances[from]);
    require(to != address(0));
    _balances[from] = _balances[from].sub(value);
    _balances[to] = _balances[to].add(value);
    emit Transfer(from, to, value);
  }",False,0x759685437c6d4658b00b5cebdf907dfdeba52357.sol
2240,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }  ",False,0xa6fd6f9b44127dbdc02fa1712fbedd21d14b4f20.sol
2241,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a / b;
        return c;
    }",False,0xa6fd6f9b44127dbdc02fa1712fbedd21d14b4f20.sol
2242,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a * b;
        assert(a == 0 || c / a == b);
        return c;
    }",False,0xa6fd6f9b44127dbdc02fa1712fbedd21d14b4f20.sol
2243,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }",False,0xa6fd6f9b44127dbdc02fa1712fbedd21d14b4f20.sol
2244,"    function BCEToken() public {
        balances[msg.sender] = _totalSupply;
    }",False,0xa6fd6f9b44127dbdc02fa1712fbedd21d14b4f20.sol
2245,"    function totalSupply() public pure returns (uint256) {
        return _totalSupply;
    }",False,0xa6fd6f9b44127dbdc02fa1712fbedd21d14b4f20.sol
2246,"    function balanceOf(address _owner) public constant returns (uint256 balance){
        return balances[_owner];
    }",False,0xa6fd6f9b44127dbdc02fa1712fbedd21d14b4f20.sol
2247,"    function transfer(address _to, uint256 _value) internal returns (bool success) {
		require(_to != 0x0);
        require(balances[msg.sender] >= _value && _value > 0);
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        Transfer(msg.sender, _to, _value);
        return true;
    }",False,0xa6fd6f9b44127dbdc02fa1712fbedd21d14b4f20.sol
2248,"    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){
		require(_to != 0x0);
        require(allowed [_from][msg.sender] >= 0 && balances[_from] >= _value && _value > 0);
        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        Transfer(_from, _to, _value);
        return true;
    }",False,0xa6fd6f9b44127dbdc02fa1712fbedd21d14b4f20.sol
2249,"    function approve(address _spender, uint256 _value) public returns (bool success){
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }",False,0xa6fd6f9b44127dbdc02fa1712fbedd21d14b4f20.sol
2250,"    function allowance(address _owner, address _spender) public constant returns (uint256 remaining){
        return allowed[_owner][_spender];
    }",False,0xa6fd6f9b44127dbdc02fa1712fbedd21d14b4f20.sol
2251,"  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }",False,0x892697720ad461f019fd1f4bc4d52447a59c0687.sol
2252,"  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }",False,0x892697720ad461f019fd1f4bc4d52447a59c0687.sol
2253,"  function allowance(
    address owner,
    address spender
   )
    public
    view
    returns (uint256)
  {
    return _allowed[owner][spender];
  }",False,0x892697720ad461f019fd1f4bc4d52447a59c0687.sol
2254,"  function transfer(address to, uint256 value) public returns (bool) {
    require(value <= _balances[msg.sender]);
    require(to != address(0));
    _balances[msg.sender] = _balances[msg.sender].sub(value);
    _balances[to] = _balances[to].add(value);
    emit Transfer(msg.sender, to, value);
    return true;
  }",False,0x892697720ad461f019fd1f4bc4d52447a59c0687.sol
2255,"  function approve(address spender, uint256 value) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = value;
    emit Approval(msg.sender, spender, value);
    return true;
  }",False,0x892697720ad461f019fd1f4bc4d52447a59c0687.sol
2256,"  function transferFrom(
    address from,
    address to,
    uint256 value
  )
    public
    returns (bool)
  {
    require(value <= _balances[from]);
    require(value <= _allowed[from][msg.sender]);
    require(to != address(0));
    _balances[from] = _balances[from].sub(value);
    _balances[to] = _balances[to].add(value);
    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
    emit Transfer(from, to, value);
    return true;
  }",False,0x892697720ad461f019fd1f4bc4d52447a59c0687.sol
2257,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }",False,0x892697720ad461f019fd1f4bc4d52447a59c0687.sol
2258,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0);
    uint256 c = a / b;
    return c;
  }",False,0x892697720ad461f019fd1f4bc4d52447a59c0687.sol
2259,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }",False,0x892697720ad461f019fd1f4bc4d52447a59c0687.sol
2260,"  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }",False,0x892697720ad461f019fd1f4bc4d52447a59c0687.sol
2261,"  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }",False,0x892697720ad461f019fd1f4bc4d52447a59c0687.sol
2262,"  function increaseAllowance(
    address spender,
    uint256 addedValue
  )
    public
    returns (bool)
  {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (
      _allowed[msg.sender][spender].add(addedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }",False,0x892697720ad461f019fd1f4bc4d52447a59c0687.sol
2263,"  function decreaseAllowance(
    address spender,
    uint256 subtractedValue
  )
    public
    returns (bool)
  {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (
      _allowed[msg.sender][spender].sub(subtractedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }",False,0x892697720ad461f019fd1f4bc4d52447a59c0687.sol
2264,"  function _mint(address account, uint256 amount) internal {
    require(account != 0);
    _totalSupply = _totalSupply.add(amount);
    _balances[account] = _balances[account].add(amount);
    emit Transfer(address(0), account, amount);
  }",False,0x892697720ad461f019fd1f4bc4d52447a59c0687.sol
2265,"  function _burn(address account, uint256 amount) internal {
    require(account != 0);
    require(amount <= _balances[account]);
    _totalSupply = _totalSupply.sub(amount);
    _balances[account] = _balances[account].sub(amount);
    emit Transfer(account, address(0), amount);
  }",False,0x892697720ad461f019fd1f4bc4d52447a59c0687.sol
2266,"  function _burnFrom(address account, uint256 amount) internal {
    require(amount <= _allowed[account][msg.sender]);
    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(
      amount);
    _burn(account, amount);
  }",False,0x892697720ad461f019fd1f4bc4d52447a59c0687.sol
2267,"    function Put(uint _unlockTime)
    public
    payable
    {
        var acc = Acc[msg.sender];
        acc.balance += msg.value;
        acc.unlockTime = _unlockTime>now?_unlockTime:now;
        LogFile.AddMessage(msg.sender,msg.value,""Put"");
    }",False,0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol
2268,"    function Collect(uint _am)
    public
    payable
    {
        var acc = Acc[msg.sender];
        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)
        {
            if(msg.sender.call.value(_am)())
            {
                acc.balance-=_am;
                LogFile.AddMessage(msg.sender,_am,""Collect"");
            }
        }
    }",True,0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol
2269,"    function W_WALLET(address log) public{
        LogFile = Log(log);
    }",False,0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol
2270,"    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }",False,0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol
2271,"     function balanceOf(address _owner) public constant returns (uint256 balance) {
         return balances[_owner];
     }",False,spank_chain_payment.sol
2272,"     function transfer(address _to, uint256 _value) public returns (bool success) {
         require(balances[msg.sender] >= _value);
         balances[msg.sender] -= _value;
         balances[_to] += _value;
         emit Transfer(msg.sender, _to, _value);
         return true;
     }",False,spank_chain_payment.sol
2273,"     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
         require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);
         balances[_to] += _value;
         balances[_from] -= _value;
         allowed[_from][msg.sender] -= _value;
         emit Transfer(_from, _to, _value);
         return true;
     }",False,spank_chain_payment.sol
2274,"     function approve(address _spender, uint256 _value) public returns (bool success) {
         allowed[msg.sender][_spender] = _value;
         emit Approval(msg.sender, _spender, _value);
         return true;
     }",False,spank_chain_payment.sol
2275,"     function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
       return allowed[_owner][_spender];
     }",False,spank_chain_payment.sol
2276,"     function recoverSigner(bytes32 _hashedMsg, string _sig) public pure returns (address) {
         require(_hashedMsg != 0x00);
         bytes memory prefix = ""\x19Ethereum Signed Message:\n32"";
         bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, _hashedMsg));
         if (bytes(_sig).length != 132) {
             return 0x0;
         }
         bytes32 r;
         bytes32 s;
         uint8 v;
         bytes memory sig = hexstrToBytes(substring(_sig, 2, 132));
         assembly {
             r := mload(add(sig, 32))
             s := mload(add(sig, 64))
             v := byte(0, mload(add(sig, 96)))
         }
         if (v < 27) {
             v += 27;
         }
         if (v < 27 || v > 28) {
             return 0x0;
         }
         return ecrecover(prefixedHash, v, r, s);
     }",False,spank_chain_payment.sol
2277,"     function isSignedBy(bytes32 _hashedMsg, string _sig, address _addr) public pure returns (bool) {
         require(_addr != 0x0);
         return _addr == recoverSigner(_hashedMsg, _sig);
     }",False,spank_chain_payment.sol
2278,"     function hexstrToBytes(string _hexstr) public pure returns (bytes) {
         uint len = bytes(_hexstr).length;
         require(len % 2 == 0);
         bytes memory bstr = bytes(new string(len / 2));
         uint k = 0;
         string memory s;
         string memory r;
         for (uint i = 0; i < len; i += 2) {
             s = substring(_hexstr, i, i + 1);
             r = substring(_hexstr, i + 1, i + 2);
             uint p = parseInt16Char(s) * 16 + parseInt16Char(r);
             bstr[k++] = uintToBytes32(p)[31];
         }
         return bstr;
     }",False,spank_chain_payment.sol
2279,"     function parseInt16Char(string _char) public pure returns (uint) {
         bytes memory bresult = bytes(_char);
         if ((bresult[0] >= 48) && (bresult[0] <= 57)) {
             return uint(bresult[0]) - 48;
         } else if ((bresult[0] >= 65) && (bresult[0] <= 70)) {
             return uint(bresult[0]) - 55;
         } else if ((bresult[0] >= 97) && (bresult[0] <= 102)) {
             return uint(bresult[0]) - 87;
         } else {
             revert();
         }
     }",False,spank_chain_payment.sol
2280,"     function uintToBytes32(uint _uint) public pure returns (bytes b) {
         b = new bytes(32);
         assembly {mstore(add(b, 32), _uint)}
     }",False,spank_chain_payment.sol
2281,"     function toEthereumSignedMessage(string _msg) public pure returns (bytes32) {
         uint len = bytes(_msg).length;
         require(len > 0);
         bytes memory prefix = ""\x19Ethereum Signed Message:\n"";
         return keccak256(abi.encodePacked(prefix, uintToString(len), _msg));
     }",False,spank_chain_payment.sol
2282,"     function uintToString(uint _uint) public pure returns (string str) {
         uint len = 0;
         uint m = _uint + 0;
         while (m != 0) {
             len++;
             m /= 10;
         }
         bytes memory b = new bytes(len);
         uint i = len - 1;
         while (_uint != 0) {
             uint remainder = _uint % 10;
             _uint = _uint / 10;
             b[i--] = byte(48 + remainder);
         }
         str = string(b);
     }",False,spank_chain_payment.sol
2283,"     function substring(string _str, uint _startIndex, uint _endIndex) public pure returns (string) {
         bytes memory strBytes = bytes(_str);
         require(_startIndex <= _endIndex);
         require(_startIndex >= 0);
         require(_endIndex <= strBytes.length);
         bytes memory result = new bytes(_endIndex - _startIndex);
         for (uint i = _startIndex; i < _endIndex; i++) {
             result[i - _startIndex] = strBytes[i];
         }
         return string(result);
     }",False,spank_chain_payment.sol
2284,"     function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
         allowed[msg.sender][_spender] = _value;
         emit Approval(msg.sender, _spender, _value);
         require(_spender.call(bytes4(bytes32(keccak256(""receiveApproval(address,uint256,address,bytes)""))), msg.sender, _value, this, _extraData));
         return true;
     }",False,spank_chain_payment.sol
2285,"     function createChannel(
         bytes32 _lcID,
         address _partyI,
         uint256 _confirmTime,
         address _token,
         uint256[2] _balances  
     )
         public
         payable
     {
         require(Channels[_lcID].partyAddresses[0] == address(0), ""Channel has already been created."");
         require(_partyI != 0x0, ""No partyI address provided to LC creation"");
         require(_balances[0] >= 0 && _balances[1] >= 0, ""Balances cannot be negative"");
         Channels[_lcID].partyAddresses[0] = msg.sender;
         Channels[_lcID].partyAddresses[1] = _partyI;
         if(_balances[0] != 0) {
             require(msg.value == _balances[0], ""Eth balance does not match sent value"");
             Channels[_lcID].ethBalances[0] = msg.value;
         }
         if(_balances[1] != 0) {
             Channels[_lcID].token = HumanStandardToken(_token);
             require(Channels[_lcID].token.transferFrom(msg.sender, this, _balances[1]),""CreateChannel: token transfer failure"");
             Channels[_lcID].erc20Balances[0] = _balances[1];
         }
         Channels[_lcID].sequence = 0;
         Channels[_lcID].confirmTime = _confirmTime;
         Channels[_lcID].LCopenTimeout = now + _confirmTime;
         Channels[_lcID].initialDeposit = _balances;
         emit DidLCOpen(_lcID, msg.sender, _partyI, _balances[0], _token, _balances[1], Channels[_lcID].LCopenTimeout);
     }",False,spank_chain_payment.sol
2286,"     function LCOpenTimeout(bytes32 _lcID) public {
         require(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false);
         require(now > Channels[_lcID].LCopenTimeout);
         if(Channels[_lcID].initialDeposit[0] != 0) {
             Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]);
         }
         if(Channels[_lcID].initialDeposit[1] != 0) {
             require(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0], Channels[_lcID].erc20Balances[0]),""CreateChannel: token transfer failure"");
         }
         emit DidLCClose(_lcID, 0, Channels[_lcID].ethBalances[0], Channels[_lcID].erc20Balances[0], 0, 0);
         delete Channels[_lcID];
     }",True,spank_chain_payment.sol
2287,"     function joinChannel(bytes32 _lcID, uint256[2] _balances) public payable {
         require(Channels[_lcID].isOpen == false);
         require(msg.sender == Channels[_lcID].partyAddresses[1]);
         if(_balances[0] != 0) {
             require(msg.value == _balances[0], ""state balance does not match sent value"");
             Channels[_lcID].ethBalances[1] = msg.value;
         }
         if(_balances[1] != 0) {
             require(Channels[_lcID].token.transferFrom(msg.sender, this, _balances[1]),""joinChannel: token transfer failure"");
             Channels[_lcID].erc20Balances[1] = _balances[1];
         }
         Channels[_lcID].initialDeposit[0]+=_balances[0];
         Channels[_lcID].initialDeposit[1]+=_balances[1];
         Channels[_lcID].isOpen = true;
         numChannels++;
         emit DidLCJoin(_lcID, _balances[0], _balances[1]);
     }",False,spank_chain_payment.sol
2288,"     function deposit(bytes32 _lcID, address recipient, uint256 _balance, bool isToken) public payable {
         require(Channels[_lcID].isOpen == true, ""Tried adding funds to a closed channel"");
         require(recipient == Channels[_lcID].partyAddresses[0] || recipient == Channels[_lcID].partyAddresses[1]);
         if (Channels[_lcID].partyAddresses[0] == recipient) {
             if(isToken) {
                 require(Channels[_lcID].token.transferFrom(msg.sender, this, _balance),""deposit: token transfer failure"");
                 Channels[_lcID].erc20Balances[2] += _balance;
             } else {
                 require(msg.value == _balance, ""state balance does not match sent value"");
                 Channels[_lcID].ethBalances[2] += msg.value;
             }
         }
         if (Channels[_lcID].partyAddresses[1] == recipient) {
             if(isToken) {
                 require(Channels[_lcID].token.transferFrom(msg.sender, this, _balance),""deposit: token transfer failure"");
                 Channels[_lcID].erc20Balances[3] += _balance;
             } else {
                 require(msg.value == _balance, ""state balance does not match sent value"");
                 Channels[_lcID].ethBalances[3] += msg.value;
             }
         }
         emit DidLCDeposit(_lcID, recipient, _balance, isToken);
     }",False,spank_chain_payment.sol
2289,"     function consensusCloseChannel(
         bytes32 _lcID,
         uint256 _sequence,
         uint256[4] _balances,  
         string _sigA,
         string _sigI
     )
         public
     {
         require(Channels[_lcID].isOpen == true);
         uint256 totalEthDeposit = Channels[_lcID].initialDeposit[0] + Channels[_lcID].ethBalances[2] + Channels[_lcID].ethBalances[3];
         uint256 totalTokenDeposit = Channels[_lcID].initialDeposit[1] + Channels[_lcID].erc20Balances[2] + Channels[_lcID].erc20Balances[3];
         require(totalEthDeposit == _balances[0] + _balances[1]);
         require(totalTokenDeposit == _balances[2] + _balances[3]);
         bytes32 _state = keccak256(
             abi.encodePacked(
                 _lcID,
                 true,
                 _sequence,
                 uint256(0),
                 bytes32(0x0),
                 Channels[_lcID].partyAddresses[0],
                 Channels[_lcID].partyAddresses[1],
                 _balances[0],
                 _balances[1],
                 _balances[2],
                 _balances[3]
             )
         );
         require(Channels[_lcID].partyAddresses[0] == ECTools.recoverSigner(_state, _sigA));
         require(Channels[_lcID].partyAddresses[1] == ECTools.recoverSigner(_state, _sigI));
         Channels[_lcID].isOpen = false;
         if(_balances[0] != 0 || _balances[1] != 0) {
             Channels[_lcID].partyAddresses[0].transfer(_balances[0]);
             Channels[_lcID].partyAddresses[1].transfer(_balances[1]);
         }
         if(_balances[2] != 0 || _balances[3] != 0) {
             require(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0], _balances[2]),""happyCloseChannel: token transfer failure"");
             require(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[1], _balances[3]),""happyCloseChannel: token transfer failure"");
         }
         numChannels--;
         emit DidLCClose(_lcID, _sequence, _balances[0], _balances[1], _balances[2], _balances[3]);
     }",False,spank_chain_payment.sol
2290,"     function updateLCstate(
         bytes32 _lcID,
         uint256[6] updateParams,  
         bytes32 _VCroot,
         string _sigA,
         string _sigI
     )
         public
     {
         Channel storage channel = Channels[_lcID];
         require(channel.isOpen);
         require(channel.sequence < updateParams[0]);  
         require(channel.ethBalances[0] + channel.ethBalances[1] >= updateParams[2] + updateParams[3]);
         require(channel.erc20Balances[0] + channel.erc20Balances[1] >= updateParams[4] + updateParams[5]);
         if(channel.isUpdateLCSettling == true) {
             require(channel.updateLCtimeout > now);
         }
         bytes32 _state = keccak256(
             abi.encodePacked(
                 _lcID,
                 false,
                 updateParams[0],
                 updateParams[1],
                 _VCroot,
                 channel.partyAddresses[0],
                 channel.partyAddresses[1],
                 updateParams[2],
                 updateParams[3],
                 updateParams[4],
                 updateParams[5]
             )
         );
         require(channel.partyAddresses[0] == ECTools.recoverSigner(_state, _sigA));
         require(channel.partyAddresses[1] == ECTools.recoverSigner(_state, _sigI));
         channel.sequence = updateParams[0];
         channel.numOpenVC = updateParams[1];
         channel.ethBalances[0] = updateParams[2];
         channel.ethBalances[1] = updateParams[3];
         channel.erc20Balances[0] = updateParams[4];
         channel.erc20Balances[1] = updateParams[5];
         channel.VCrootHash = _VCroot;
         channel.isUpdateLCSettling = true;
         channel.updateLCtimeout = now + channel.confirmTime;
         emit DidLCUpdateState (
             _lcID,
             updateParams[0],
             updateParams[1],
             updateParams[2],
             updateParams[3],
             updateParams[4],
             updateParams[5],
             _VCroot,
             channel.updateLCtimeout
         );
     }",False,spank_chain_payment.sol
2291,"     function initVCstate(
         bytes32 _lcID,
         bytes32 _vcID,
         bytes _proof,
         address _partyA,
         address _partyB,
         uint256[2] _bond,
         uint256[4] _balances,  
         string sigA
     )
         public
     {
         require(Channels[_lcID].isOpen, ""LC is closed."");
         require(!virtualChannels[_vcID].isClose, ""VC is closed."");
         require(Channels[_lcID].updateLCtimeout < now, ""LC timeout not over."");
         require(virtualChannels[_vcID].updateVCtimeout == 0);
         bytes32 _initState = keccak256(
             abi.encodePacked(_vcID, uint256(0), _partyA, _partyB, _bond[0], _bond[1], _balances[0], _balances[1], _balances[2], _balances[3])
         );
         require(_partyA == ECTools.recoverSigner(_initState, sigA));
         require(_isContained(_initState, _proof, Channels[_lcID].VCrootHash) == true);
         virtualChannels[_vcID].partyA = _partyA;  
         virtualChannels[_vcID].partyB = _partyB;  
         virtualChannels[_vcID].sequence = uint256(0);
         virtualChannels[_vcID].ethBalances[0] = _balances[0];
         virtualChannels[_vcID].ethBalances[1] = _balances[1];
         virtualChannels[_vcID].erc20Balances[0] = _balances[2];
         virtualChannels[_vcID].erc20Balances[1] = _balances[3];
         virtualChannels[_vcID].bond = _bond;
         virtualChannels[_vcID].updateVCtimeout = now + Channels[_lcID].confirmTime;
         virtualChannels[_vcID].isInSettlementState = true;
         emit DidVCInit(_lcID, _vcID, _proof, uint256(0), _partyA, _partyB, _balances[0], _balances[1]);
     }",False,spank_chain_payment.sol
2292,"     function settleVC(
         bytes32 _lcID,
         bytes32 _vcID,
         uint256 updateSeq,
         address _partyA,
         address _partyB,
         uint256[4] updateBal,  
         string sigA
     )
         public
     {
         require(Channels[_lcID].isOpen, ""LC is closed."");
         require(!virtualChannels[_vcID].isClose, ""VC is closed."");
         require(virtualChannels[_vcID].sequence < updateSeq, ""VC sequence is higher than update sequence."");
         require(
             virtualChannels[_vcID].ethBalances[1] < updateBal[1] && virtualChannels[_vcID].erc20Balances[1] < updateBal[3],
             ""State updates may only increase recipient balance.""
         );
         require(
             virtualChannels[_vcID].bond[0] == updateBal[0] + updateBal[1] &&
             virtualChannels[_vcID].bond[1] == updateBal[2] + updateBal[3],
             ""Incorrect balances for bonded amount"");
         require(Channels[_lcID].updateLCtimeout < now);  
         bytes32 _updateState = keccak256(
             abi.encodePacked(
                 _vcID,
                 updateSeq,
                 _partyA,
                 _partyB,
                 virtualChannels[_vcID].bond[0],
                 virtualChannels[_vcID].bond[1],
                 updateBal[0],
                 updateBal[1],
                 updateBal[2],
                 updateBal[3]
             )
         );
         require(virtualChannels[_vcID].partyA == ECTools.recoverSigner(_updateState, sigA));
         virtualChannels[_vcID].challenger = msg.sender;
         virtualChannels[_vcID].sequence = updateSeq;
         virtualChannels[_vcID].ethBalances[0] = updateBal[0];
         virtualChannels[_vcID].ethBalances[1] = updateBal[1];
         virtualChannels[_vcID].erc20Balances[0] = updateBal[2];
         virtualChannels[_vcID].erc20Balances[1] = updateBal[3];
         virtualChannels[_vcID].updateVCtimeout = now + Channels[_lcID].confirmTime;
         emit DidVCSettle(_lcID, _vcID, updateSeq, updateBal[0], updateBal[1], msg.sender, virtualChannels[_vcID].updateVCtimeout);
     }",False,spank_chain_payment.sol
2293,"     function closeVirtualChannel(bytes32 _lcID, bytes32 _vcID) public {
         require(Channels[_lcID].isOpen, ""LC is closed."");
         require(virtualChannels[_vcID].isInSettlementState, ""VC is not in settlement state."");
         require(virtualChannels[_vcID].updateVCtimeout < now, ""Update vc timeout has not elapsed."");
         require(!virtualChannels[_vcID].isClose, ""VC is already closed"");
         Channels[_lcID].numOpenVC--;
         virtualChannels[_vcID].isClose = true;
         if(virtualChannels[_vcID].partyA == Channels[_lcID].partyAddresses[0]) {
             Channels[_lcID].ethBalances[0] += virtualChannels[_vcID].ethBalances[0];
             Channels[_lcID].ethBalances[1] += virtualChannels[_vcID].ethBalances[1];
             Channels[_lcID].erc20Balances[0] += virtualChannels[_vcID].erc20Balances[0];
             Channels[_lcID].erc20Balances[1] += virtualChannels[_vcID].erc20Balances[1];
         } else if (virtualChannels[_vcID].partyB == Channels[_lcID].partyAddresses[0]) {
             Channels[_lcID].ethBalances[0] += virtualChannels[_vcID].ethBalances[1];
             Channels[_lcID].ethBalances[1] += virtualChannels[_vcID].ethBalances[0];
             Channels[_lcID].erc20Balances[0] += virtualChannels[_vcID].erc20Balances[1];
             Channels[_lcID].erc20Balances[1] += virtualChannels[_vcID].erc20Balances[0];
         }
         emit DidVCClose(_lcID, _vcID, virtualChannels[_vcID].erc20Balances[0], virtualChannels[_vcID].erc20Balances[1]);
     }",False,spank_chain_payment.sol
2294,"     function byzantineCloseChannel(bytes32 _lcID) public {
         Channel storage channel = Channels[_lcID];
         require(channel.isOpen, ""Channel is not open"");
         require(channel.isUpdateLCSettling == true);
         require(channel.numOpenVC == 0);
         require(channel.updateLCtimeout < now, ""LC timeout over."");
         uint256 totalEthDeposit = channel.initialDeposit[0] + channel.ethBalances[2] + channel.ethBalances[3];
         uint256 totalTokenDeposit = channel.initialDeposit[1] + channel.erc20Balances[2] + channel.erc20Balances[3];
         uint256 possibleTotalEthBeforeDeposit = channel.ethBalances[0] + channel.ethBalances[1];
         uint256 possibleTotalTokenBeforeDeposit = channel.erc20Balances[0] + channel.erc20Balances[1];
         if(possibleTotalEthBeforeDeposit < totalEthDeposit) {
             channel.ethBalances[0]+=channel.ethBalances[2];
             channel.ethBalances[1]+=channel.ethBalances[3];
         } else {
             require(possibleTotalEthBeforeDeposit == totalEthDeposit);
         }
         if(possibleTotalTokenBeforeDeposit < totalTokenDeposit) {
             channel.erc20Balances[0]+=channel.erc20Balances[2];
             channel.erc20Balances[1]+=channel.erc20Balances[3];
         } else {
             require(possibleTotalTokenBeforeDeposit == totalTokenDeposit);
         }
         uint256 ethbalanceA = channel.ethBalances[0];
         uint256 ethbalanceI = channel.ethBalances[1];
         uint256 tokenbalanceA = channel.erc20Balances[0];
         uint256 tokenbalanceI = channel.erc20Balances[1];
         channel.ethBalances[0] = 0;
         channel.ethBalances[1] = 0;
         channel.erc20Balances[0] = 0;
         channel.erc20Balances[1] = 0;
         if(ethbalanceA != 0 || ethbalanceI != 0) {
             channel.partyAddresses[0].transfer(ethbalanceA);
             channel.partyAddresses[1].transfer(ethbalanceI);
         }
         if(tokenbalanceA != 0 || tokenbalanceI != 0) {
             require(
                 channel.token.transfer(channel.partyAddresses[0], tokenbalanceA),
                 ""byzantineCloseChannel: token transfer failure""
             );
             require(
                 channel.token.transfer(channel.partyAddresses[1], tokenbalanceI),
                 ""byzantineCloseChannel: token transfer failure""
             );
         }
         channel.isOpen = false;
         numChannels--;
         emit DidLCClose(_lcID, channel.sequence, ethbalanceA, ethbalanceI, tokenbalanceA, tokenbalanceI);
     }",False,spank_chain_payment.sol
2295,"     function _isContained(bytes32 _hash, bytes _proof, bytes32 _root) internal pure returns (bool) {
         bytes32 cursor = _hash;
         bytes32 proofElem;
         for (uint256 i = 64; i <= _proof.length; i += 32) {
             assembly { proofElem := mload(add(_proof, i)) }
             if (cursor < proofElem) {
                 cursor = keccak256(abi.encodePacked(cursor, proofElem));
             } else {
                 cursor = keccak256(abi.encodePacked(proofElem, cursor));
             }
         }
         return cursor == _root;
     }",False,spank_chain_payment.sol
2296,"     function getChannel(bytes32 id) public view returns (
         address[2],
         uint256[4],
         uint256[4],
         uint256[2],
         uint256,
         uint256,
         bytes32,
         uint256,
         uint256,
         bool,
         bool,
         uint256
     ) {
         Channel memory channel = Channels[id];
         return (
             channel.partyAddresses,
             channel.ethBalances,
             channel.erc20Balances,
             channel.initialDeposit,
             channel.sequence,
             channel.confirmTime,
             channel.VCrootHash,
             channel.LCopenTimeout,
             channel.updateLCtimeout,
             channel.isOpen,
             channel.isUpdateLCSettling,
             channel.numOpenVC
         );
     }",False,spank_chain_payment.sol
2297,"     function getVirtualChannel(bytes32 id) public view returns(
         bool,
         bool,
         uint256,
         address,
         uint256,
         address,
         address,
         address,
         uint256[2],
         uint256[2],
         uint256[2]
     ) {
         VirtualChannel memory virtualChannel = virtualChannels[id];
         return(
             virtualChannel.isClose,
             virtualChannel.isInSettlementState,
             virtualChannel.sequence,
             virtualChannel.challenger,
             virtualChannel.updateVCtimeout,
             virtualChannel.partyA,
             virtualChannel.partyB,
             virtualChannel.partyI,
             virtualChannel.ethBalances,
             virtualChannel.erc20Balances,
             virtualChannel.bond
         );
     }",False,spank_chain_payment.sol
2298,"    function transferOwnership(address _newOwner) public
    onlyOwner 
    {
        require(_newOwner != address(0), ""Address should not be 0x0"");
        emit OwnershipTransferred(owner, _newOwner);
        owner = _newOwner;
    }",False,0x2860685847546b39f8c75a6dfb7d8d40d34b75f6.sol
2299,"    function renounceOwnership() public 
    onlyOwner 
    {
        emit OwnershipRenounced(owner);
        owner = address(0);
    }",False,0x2860685847546b39f8c75a6dfb7d8d40d34b75f6.sol
2300,"    function mul(uint256 a, uint256 b) internal pure 
    returns (uint256 c) 
    {
        if (a == 0) 
        {
            return 0;
        }
        c = a * b;
        assert(c / a == b);
        return c;
    }",False,0x2860685847546b39f8c75a6dfb7d8d40d34b75f6.sol
2301,"    function div(uint256 a, uint256 b) internal pure 
    returns (uint256) 
    {
        return a / b;
    }",False,0x2860685847546b39f8c75a6dfb7d8d40d34b75f6.sol
2302,"    function sub(uint256 a, uint256 b) internal pure 
    returns (uint256) 
    {
        assert(b <= a);
        return a - b;
    }",False,0x2860685847546b39f8c75a6dfb7d8d40d34b75f6.sol
2303,"    function add(uint256 a, uint256 b) internal pure 
    returns (uint256 c) 
    {
        c = a + b;
        assert(c >= a);
        return c;
    }",False,0x2860685847546b39f8c75a6dfb7d8d40d34b75f6.sol
2304,"    function totalSupply() public view 
    returns (uint256) 
    {
        return totalSupply_;
    }",False,0x2860685847546b39f8c75a6dfb7d8d40d34b75f6.sol
2305,"    function balanceOf(address _owner) public view 
    returns (uint256) 
    {
        return balances[_owner];
    }",False,0x2860685847546b39f8c75a6dfb7d8d40d34b75f6.sol
2306,"    function transfer(address _to, uint256 _value) public
    whenNotPaused
    returns (bool)
    {
        return super.transfer(_to, _value);
    }",False,0x2860685847546b39f8c75a6dfb7d8d40d34b75f6.sol
2307,"    function burn(uint256 value) public
    onlyOwner
    {
        address burnAddress = msg.sender;
        require(value <= balances[burnAddress]);
        balances[burnAddress] = balances[burnAddress].sub(value);
        totalSupply_ = totalSupply_.sub(value);
        emit Burn(burnAddress, value);
    }",False,0x2860685847546b39f8c75a6dfb7d8d40d34b75f6.sol
2308,"    function allowance(address _owner, address _spender) public view
    returns (uint256)
    {
        return allowed[_owner][_spender];
    }",False,0x2860685847546b39f8c75a6dfb7d8d40d34b75f6.sol
2309,"    function transferFrom(address _from, address _to, uint256 _value) public
    whenNotPaused
    returns (bool)
    {
        return super.transferFrom(_from, _to, _value);
    }",False,0x2860685847546b39f8c75a6dfb7d8d40d34b75f6.sol
2310,"    function approve(address _spender, uint256 _value) public
    whenNotPaused
    returns (bool)
    {
        return super.approve(_spender, _value);
    }",False,0x2860685847546b39f8c75a6dfb7d8d40d34b75f6.sol
2311,"    function increaseApproval(address _spender, uint _addedValue) public
    whenNotPaused
    returns (bool success)
    {
        return super.increaseApproval(_spender, _addedValue);
    }",False,0x2860685847546b39f8c75a6dfb7d8d40d34b75f6.sol
2312,"    function decreaseApproval(address _spender, uint _subtractedValue) public
    whenNotPaused
    returns (bool success)
    {
        return super.decreaseApproval(_spender, _subtractedValue);
    }",False,0x2860685847546b39f8c75a6dfb7d8d40d34b75f6.sol
2313,"    function mint(address _to, uint256 _amount) public
    onlyOwner
    returns (bool)
    {
        totalSupply_ = totalSupply_.add(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Mint(_to, _amount);
        emit Transfer(address(0), _to, _amount);
        return true;
    }",False,0x2860685847546b39f8c75a6dfb7d8d40d34b75f6.sol
2314,"    function pause() public
    onlyOwner 
    whenNotPaused  
    {
        paused = true;
        emit Pause();
    }",False,0x2860685847546b39f8c75a6dfb7d8d40d34b75f6.sol
2315,"    function unpause() public
    onlyOwner 
    whenPaused  
    {
        paused = false;
        emit Unpause();
    }",False,0x2860685847546b39f8c75a6dfb7d8d40d34b75f6.sol
2316,"    function transfer(address recipient, uint256 amount) external returns (bool);",False,0x980358360409b1cc913a916bc0bf6f52f775242a.sol
2317,"    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);",False,0x980358360409b1cc913a916bc0bf6f52f775242a.sol
2318,"    function lock(uint qty, string memory eosAddr, uint64 eosRecipientName) public {
        eosAddr;
        require(KNC.transferFrom(msg.sender, address(this), qty));
        lockedKNC[msg.sender] += qty;
        emit Lock(qty, eosRecipientName, lockId);
        ++lockId;
    }",False,0x980358360409b1cc913a916bc0bf6f52f775242a.sol
2319,"    function unLock(uint qty) public {
        require(lockedKNC[msg.sender] >= qty);
        lockedKNC[msg.sender] -= qty;
        require(KNC.transfer(msg.sender, qty));
    }",False,0x980358360409b1cc913a916bc0bf6f52f775242a.sol
2320,"    function transfer(address _to, uint256 _value) public returns (bool) {
        require(_to != address(0));
		require(_value > 0); 
        require(balanceOf[msg.sender] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]);
		uint previousBalances = balanceOf[msg.sender] + balanceOf[_to];		
        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);
        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);
        emit Transfer(msg.sender, _to, _value);
		assert(balanceOf[msg.sender]+balanceOf[_to]==previousBalances);
        return true;
    }",False,0xa9f5ccdd11178ac90746ad76153bb9d0915edd9f.sol
2321,"    function approve(address _spender, uint256 _value) public returns (bool success) {
		require((_value == 0) || (allowance[msg.sender][_spender] == 0));
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }",False,0xa9f5ccdd11178ac90746ad76153bb9d0915edd9f.sol
2322,"    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require (_to != address(0));
		require (_value > 0); 
        require (balanceOf[_from] >= _value) ;
        require (balanceOf[_to] + _value > balanceOf[_to]);
        require (_value <= allowance[_from][msg.sender]);
        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);
        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);
        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);
        emit Transfer(_from, _to, _value);
        return true;
    }",False,0xa9f5ccdd11178ac90746ad76153bb9d0915edd9f.sol
2323,    function totalSupply() external view returns (uint256);,False,0xa9f5ccdd11178ac90746ad76153bb9d0915edd9f.sol
2324,    function balanceOf(address who) external view returns (uint256);,False,0xa9f5ccdd11178ac90746ad76153bb9d0915edd9f.sol
2325,"    function allowance(address owner, address spender) external view returns (uint256);",False,0xa9f5ccdd11178ac90746ad76153bb9d0915edd9f.sol
2326,"    function owner() public view returns (address) {
        return _owner;
    }",False,0xa9f5ccdd11178ac90746ad76153bb9d0915edd9f.sol
2327,"    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }",False,0xa9f5ccdd11178ac90746ad76153bb9d0915edd9f.sol
2328,"    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }",False,0xa9f5ccdd11178ac90746ad76153bb9d0915edd9f.sol
2329,"    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }",False,0xa9f5ccdd11178ac90746ad76153bb9d0915edd9f.sol
2330,"    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0));
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }",False,0xa9f5ccdd11178ac90746ad76153bb9d0915edd9f.sol
2331,"  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }",False,0xa9f5ccdd11178ac90746ad76153bb9d0915edd9f.sol
2332,"  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b > 0);
    uint256 c = a / b;
    assert(a == b * c + a % b);
    return c;
  }",False,0xa9f5ccdd11178ac90746ad76153bb9d0915edd9f.sol
2333,"  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }",False,0xa9f5ccdd11178ac90746ad76153bb9d0915edd9f.sol
2334,"  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c>=a && c>=b);
    return c;
  }",False,0xa9f5ccdd11178ac90746ad76153bb9d0915edd9f.sol
2335,    function totalSupply () external view returns (uint);,False,0xa6f3594ab9982c09885ecf7506f7e356f2f89454.sol
2336,    function balanceOf (address tokenOwner) external view returns (uint balance);,False,0xa6f3594ab9982c09885ecf7506f7e356f2f89454.sol
2337,"    function transfer (address to, uint tokens) external returns (bool success);",False,0xa6f3594ab9982c09885ecf7506f7e356f2f89454.sol
2338,"    function transferFrom (address from, address to, uint tokens) external returns (bool success);",False,0xa6f3594ab9982c09885ecf7506f7e356f2f89454.sol
2339,"    function mul (uint256 a, uint256 b) internal pure returns (uint256 c) {
        if (a == 0) {
            return 0;
        }
        c = a * b;
        require(c / a == b);
        return c;
    }",False,0xa6f3594ab9982c09885ecf7506f7e356f2f89454.sol
2340,"    function div (uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }",False,0xa6f3594ab9982c09885ecf7506f7e356f2f89454.sol
2341,"    function sub (uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        return a - b;
    }",False,0xa6f3594ab9982c09885ecf7506f7e356f2f89454.sol
2342,"    function add (uint256 a, uint256 b) internal pure returns (uint256 c) {
        c = a + b;
        require(c >= a);
        return c;
    }",False,0xa6f3594ab9982c09885ecf7506f7e356f2f89454.sol
2343,"    function releasableAmount (address account) public view returns (uint256) {
        return vestedAmount(account).sub(beneficiary[account].releasedAmount);
    }",False,0xa6f3594ab9982c09885ecf7506f7e356f2f89454.sol
2344,"    function release (address account) public isVestedAccount(account) {
        uint256 unreleased = releasableAmount(account);
        require(unreleased > 0);
        beneficiary[account].releasedAmount = beneficiary[account].releasedAmount.add(unreleased);
        token.transfer(account, unreleased);
        emit Released(account, unreleased);
        if (beneficiary[account].releasedAmount == beneficiary[account].totalAmount) {  
            delete beneficiary[account];
        }
    }",False,0xa6f3594ab9982c09885ecf7506f7e356f2f89454.sol
2345,"    function addBeneficiary (
        address account,
        uint256 start,
        uint256 duration,
        uint256 cliff,
        uint256 amount
    ) public {
        require(amount != 0 && start != 0 && account != address(0x0) && cliff < duration && beneficiary[account].start == 0);
        require(token.transferFrom(msg.sender, address(this), amount));
        beneficiary[account] = Beneficiary({
            start: start,
            duration: duration,
            cliff: start.add(cliff),
            totalAmount: amount,
            releasedAmount: 0
        });
    }",False,0xa6f3594ab9982c09885ecf7506f7e356f2f89454.sol
2346,"    function vestedAmount (address account) private view returns (uint256) {
        if (block.timestamp < beneficiary[account].cliff) {
            return 0;
        } else if (block.timestamp >= beneficiary[account].start.add(beneficiary[account].duration)) {
            return beneficiary[account].totalAmount;
        } else {
            return beneficiary[account].totalAmount.mul(
                block.timestamp.sub(beneficiary[account].start)
            ).div(beneficiary[account].duration);
        }
    }",False,0xa6f3594ab9982c09885ecf7506f7e356f2f89454.sol
2347,"    function Private_Bank(address _log)
    {
        TransferLog = Log(_log);
    }",False,0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol
2348,"    function Deposit()
    public
    payable
    {
        if(msg.value > MinDeposit)
        {
            balances[msg.sender]+=msg.value;
            TransferLog.AddMessage(msg.sender,msg.value,""Deposit"");
        }
    }",False,0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol
2349,"    function CashOut(uint _am)
    public
    payable
    {
        if(_am<=balances[msg.sender])
        {
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                TransferLog.AddMessage(msg.sender,_am,""CashOut"");
            }
        }
    }",True,0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol
2350,"    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }",False,0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol
2351,"  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    if (_a == 0) {
      return 0;
    }
    c = _a * _b;
    assert(c / _a == _b);
    return c;
  }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2352,"  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    return _a / _b;
  }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2353,"  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
    assert(_b <= _a);
    return _a - _b;
  }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2354,"  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    c = _a + _b;
    assert(c >= _a);
    return c;
  }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2355,"  function max64(uint64 _a, uint64 _b) internal pure returns (uint64) {
    return _a >= _b ? _a : _b;
  }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2356,"  function min64(uint64 _a, uint64 _b) internal pure returns (uint64) {
    return _a < _b ? _a : _b;
  }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2357,"  function max256(uint256 _a, uint256 _b) internal pure returns (uint256) {
    return _a >= _b ? _a : _b;
  }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2358,"  function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {
    return _a < _b ? _a : _b;
  }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2359,"  function renounceOwnership() public onlyOwner {
    emit OwnershipRenounced(owner);
    owner = address(0);
  }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2360,"  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2361,"  function _transferOwnership(address _newOwner) internal {
    require(_newOwner != address(0));
    emit OwnershipTransferred(owner, _newOwner);
    owner = _newOwner;
  }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2362,"    function grantAccess(
        address who
    )
        external
        onlyOwner
    {
        require(
            block.timestamp < GRACE_PERIOD_EXPIRATION,
            ""StaticAccessControlled#grantAccess: Cannot grant access after grace period""
        );
        emit AccessGranted(who);
        authorized[who] = true;
    }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2363,"    function totalSupply(
    )
        external
        view
        returns (uint256);",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2364,"    function balanceOf(
        address token,
        address owner
    )
        internal
        view
        returns (uint256)
    {
        return GeneralERC20(token).balanceOf(owner);
    }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2365,"    function allowance(
        address token,
        address owner,
        address spender
    )
        internal
        view
        returns (uint256)
    {
        return GeneralERC20(token).allowance(owner, spender);
    }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2366,"    function transfer(
        address token,
        address to,
        uint256 amount
    )
        internal
    {
        address from = address(this);
        if (
            amount == 0
            || from == to
        ) {
            return;
        }
        GeneralERC20(token).transfer(to, amount);
        require(
            checkSuccess(),
            ""TokenInteract#transfer: Transfer failed""
        );
    }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2367,"    function transferFrom(
        address token,
        address from,
        address to,
        uint256 amount
    )
        internal
    {
        if (
            amount == 0
            || from == to
        ) {
            return;
        }
        GeneralERC20(token).transferFrom(from, to, amount);
        require(
            checkSuccess(),
            ""TokenInteract#transferFrom: TransferFrom failed""
        );
    }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2368,"    function approve(
        address token,
        address spender,
        uint256 amount
    )
        internal
    {
        GeneralERC20(token).approve(spender, amount);
        require(
            checkSuccess(),
            ""TokenInteract#approve: Approval failed""
        );
    }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2369,"    function checkSuccess(
    )
        private
        pure
        returns (bool)
    {
        uint256 returnValue = 0;
        assembly {
            switch returndatasize
            case 0x0 {
                returnValue := 1
            }
            case 0x20 {
                returndatacopy(0x0, 0x0, 0x20)
                returnValue := mload(0x0)
            }
            default { }
        }
        return returnValue != 0;
    }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2370,"    function transferTokens(
        address token,
        address from,
        address to,
        uint256 value
    )
        external
        requiresAuthorization
    {
        TokenInteract.transferFrom(
            token,
            from,
            to,
            value
        );
    }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2371,"    function available(
        address who,
        address token
    )
        external
        view
        returns (uint256)
    {
        return Math.min256(
            TokenInteract.allowance(token, who, address(this)),
            TokenInteract.balanceOf(token, who)
        );
    }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2372,"    function withdrawExcessToken(
        address token,
        address to
    )
        external
        onlyOwner
        returns (uint256)
    {
        uint256 actualBalance = TokenInteract.balanceOf(token, address(this));
        uint256 accountedBalance = totalBalances[token];
        uint256 withdrawableBalance = actualBalance.sub(accountedBalance);
        require(
            withdrawableBalance != 0,
            ""Vault#withdrawExcessToken: Withdrawable token amount must be non-zero""
        );
        TokenInteract.transfer(token, to, withdrawableBalance);
        emit ExcessTokensWithdrawn(token, to, msg.sender);
        return withdrawableBalance;
    }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2373,"    function transferToVault(
        bytes32 id,
        address token,
        address from,
        uint256 amount
    )
        external
        requiresAuthorization
    {
        TokenProxy(TOKEN_PROXY).transferTokens(
            token,
            from,
            address(this),
            amount
        );
        balances[id][token] = balances[id][token].add(amount);
        totalBalances[token] = totalBalances[token].add(amount);
        assert(totalBalances[token] >= balances[id][token]);
        validateBalance(token);
    }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2374,"    function transferFromVault(
        bytes32 id,
        address token,
        address to,
        uint256 amount
    )
        external
        requiresAuthorization
    {
        balances[id][token] = balances[id][token].sub(amount);
        totalBalances[token] = totalBalances[token].sub(amount);
        assert(totalBalances[token] >= balances[id][token]);
        TokenInteract.transfer(token, to, amount);  
        validateBalance(token);
    }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2375,"    function validateBalance(
        address token
    )
        private
        view
    {
        assert(TokenInteract.balanceOf(token, address(this)) >= totalBalances[token]);
    }",False,0x5199071825cc1d6cd019b0d7d42b08106f6cf16d.sol
2376,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_49.sol
2377,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_49.sol
2378,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_49.sol
2379,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_49.sol
2380,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_49.sol
2381,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_49.sol
2382,"    function transfer(address to, uint256 value) public returns (bool success) {
        require(balanceOf[msg.sender] >= value);
        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;
        emit Transfer(msg.sender, to, value);
        return true;
    }",False,buggy_49.sol
2383,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_49.sol
2384,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_49.sol
2385,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_49.sol
2386,"    function approve(address spender, uint256 value)
        public
        returns (bool success)
    {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }",False,buggy_49.sol
2387,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_49.sol
2388,"    function transferFrom(address from, address to, uint256 value)
        public
        returns (bool success)
    {
        require(value <= balanceOf[from]);
        require(value <= allowance[from][msg.sender]);
        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;
        emit Transfer(from, to, value);
        return true;
    }",False,buggy_49.sol
2389,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_49.sol
2390,"    function SetMinSum(uint _val)
    public
    {
        if(intitalized)throw;
        MinSum = _val;
    }",False,0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol
2391,"    function SetLogFile(address _log)
    public
    {
        if(intitalized)throw;
        LogFile = Log(_log);
    }",False,0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol
2392,"    function Initialized()
    public
    {
        intitalized = true;
    }",False,0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol
2393,"    function Put(uint _lockTime)
    public
    payable
    {
        var acc = Acc[msg.sender];
        acc.balance += msg.value;
        if(now+_lockTime>acc.unlockTime)acc.unlockTime=now+_lockTime;
        LogFile.AddMessage(msg.sender,msg.value,""Put"");
    }",False,0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol
2394,"    function Collect(uint _am)
    public
    payable
    {
        var acc = Acc[msg.sender];
        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)
        {
            if(msg.sender.call.value(_am)())
            {
                acc.balance-=_am;
                LogFile.AddMessage(msg.sender,_am,""Collect"");
            }
        }
    }",True,0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol
2395,"    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }",False,0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol
2396,"    function SetMinSum(uint _val)
    public
    {
        if(intitalized)revert();
        MinSum = _val;
    }",False,0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol
2397,"    function SetLogFile(address _log)
    public
    {
        if(intitalized)revert();
        Log = LogFile(_log);
    }",False,0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol
2398,"    function Initialized()
    public
    {
        intitalized = true;
    }",False,0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol
2399,"    function Deposit()
    public
    payable
    {
        balances[msg.sender]+= msg.value;
        Log.AddMessage(msg.sender,msg.value,""Put"");
    }",False,0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol
2400,"    function Collect(uint _am)
    public
    payable
    {
        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)
        {
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                Log.AddMessage(msg.sender,_am,""Collect"");
            }
        }
    }",True,0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol
2401,"    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }",False,0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol
2402,  function totalSupply() public view returns (uint256);,False,0xa7fac98b27435c90b916950bbeed91c7dbfe3e44.sol
2403,  function balanceOf(address who) public view returns (uint256);,False,0xa7fac98b27435c90b916950bbeed91c7dbfe3e44.sol
2404,"  function transfer(address to, uint256 value) public returns (bool);",False,0xa7fac98b27435c90b916950bbeed91c7dbfe3e44.sol
2405,"  function allowance(address owner, address spender) public view returns (uint256);",False,0xa7fac98b27435c90b916950bbeed91c7dbfe3e44.sol
2406,"  function transferFrom(address from, address to, uint256 value) public returns (bool);",False,0xa7fac98b27435c90b916950bbeed91c7dbfe3e44.sol
2407,"  function approve(address spender, uint256 value) public returns (bool);",False,0xa7fac98b27435c90b916950bbeed91c7dbfe3e44.sol
2408,"  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {
    assert(token.transfer(to, value));
  }",False,0xa7fac98b27435c90b916950bbeed91c7dbfe3e44.sol
2409,"  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {
    assert(token.transferFrom(from, to, value));
  }",False,0xa7fac98b27435c90b916950bbeed91c7dbfe3e44.sol
2410,"  function safeApprove(ERC20 token, address spender, uint256 value) internal {
    assert(token.approve(spender, value));
  }",False,0xa7fac98b27435c90b916950bbeed91c7dbfe3e44.sol
2411,"  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {
    require(_releaseTime > now);
    token = _token;
    beneficiary = _beneficiary;
    releaseTime = _releaseTime;
  }",False,0xa7fac98b27435c90b916950bbeed91c7dbfe3e44.sol
2412,"  function release() public {
    require(now >= releaseTime);
    uint256 amount = token.balanceOf(this);
    require(amount > 0);
    token.safeTransfer(beneficiary, amount);
  }",False,0xa7fac98b27435c90b916950bbeed91c7dbfe3e44.sol
2413,"   function create(ERC20Basic _token, address _beneficiary) public
   {
       emit Created(new TokenTimelock(_token, _beneficiary, now + 180 days));
   }",False,0xa7fac98b27435c90b916950bbeed91c7dbfe3e44.sol
2414,"    function SetMinSum(uint _val)
    public
    {
        if(intitalized)revert();
        MinSum = _val;
    }",False,0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol
2415,"    function SetLogFile(address _log)
    public
    {
        if(intitalized)revert();
        Log = LogFile(_log);
    }",False,0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol
2416,"    function Initialized()
    public
    {
        intitalized = true;
    }",False,0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol
2417,"    function Deposit()
    public
    payable
    {
        balances[msg.sender]+= msg.value;
        Log.AddMessage(msg.sender,msg.value,""Put"");
    }",False,0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol
2418,"    function Collect(uint _am)
    public
    payable
    {
        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)
        {
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                Log.AddMessage(msg.sender,_am,""Collect"");
            }
        }
    }",True,0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol
2419,"    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }",False,0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol
2420,"    function add(uint a, uint b) internal pure returns (uint c) {	 
        c = a + b;
        require(c >= a);
    }",False,buggy_48.sol
2421,"    function sub(uint a, uint b) internal pure returns (uint c) {	 
        require(b <= a);
        c = a - b;
    }",False,buggy_48.sol
2422,"    function mul(uint a, uint b) internal pure returns (uint c) {	 
        c = a * b;
        require(a == 0 || c / a == b);
    }",False,buggy_48.sol
2423,"    function div(uint a, uint b) internal pure returns (uint c) {	 
        require(b > 0);
        c = a / b;
    }",False,buggy_48.sol
2424,"    function totalSupply() public view returns (uint) {		 
        return _totalSupply.sub(balances[address(0)]);
    }",False,buggy_48.sol
2425,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }							 ",True,buggy_48.sol
2426,"    function balanceOf(address tokenOwner) public view returns (uint balance) {		 
        return balances[tokenOwner];
    }",False,buggy_48.sol
2427,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }				 ",True,buggy_48.sol
2428,"    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {		 
        return allowed[tokenOwner][spender];
    }",False,buggy_48.sol
2429,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }	 ",True,buggy_48.sol
2430,"    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = balances[msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(msg.sender, to, tokens);		 
        return true;
    }",False,buggy_48.sol
2431,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_48.sol
2432,"    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);		 
        return true;
    }",False,buggy_48.sol
2433,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_48.sol
2434,"    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = balances[from].sub(tokens);
        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(from, to, tokens);		 
        return true;
    }",False,buggy_48.sol
2435,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_48.sol
2436,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_48.sol
2437,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_48.sol
2438,"    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;",False,buggy_48.sol
2439,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }	 ",True,buggy_48.sol
2440,"    function withdraw_balances_re_ent21 () public {
       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("""");
       if (success)
          balances_re_ent21[msg.sender] = 0;
      }",True,buggy_48.sol
2441,"function withdrawBalance_re_ent12() public{
        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent12[msg.sender] = 0;
    }",True,buggy_48.sol
2442,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_48.sol
2443,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_48.sol
2444,"    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }",False,buggy_48.sol
2445,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_48.sol
2446,"    function acceptOwnership() public {
        require(msg.sender == newOwner);
        emit OwnershipTransferred(owner, newOwner);	 
        owner = newOwner;
        newOwner = address(0);
    }",False,buggy_48.sol
2447,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_48.sol
2448,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_48.sol
2449,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_48.sol
2450,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_48.sol
2451,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_48.sol
2452,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_48.sol
2453,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_48.sol
2454,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_48.sol
2455,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_48.sol
2456,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_48.sol
2457,"    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }",False,buggy_48.sol
2458,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_48.sol
2459,"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }",False,buggy_48.sol
2460,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_48.sol
2461,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_48.sol
2462,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_48.sol
2463,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_48.sol
2464,"    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);		 
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
        return true;
    }",False,buggy_48.sol
2465,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_48.sol
2466,"    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }",False,buggy_48.sol
2467,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_48.sol
2468,"    function mint(address to, uint256 value) external returns (bool);",False,0xa7e648d515f80a67c1d4e3af3317299ecbdf23a5.sol
2469,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }",False,0xa7e648d515f80a67c1d4e3af3317299ecbdf23a5.sol
2470,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);
        uint256 c = a / b;
        return c;
    }",False,0xa7e648d515f80a67c1d4e3af3317299ecbdf23a5.sol
2471,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }",False,0xa7e648d515f80a67c1d4e3af3317299ecbdf23a5.sol
2472,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }",False,0xa7e648d515f80a67c1d4e3af3317299ecbdf23a5.sol
2473,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }",False,0xa7e648d515f80a67c1d4e3af3317299ecbdf23a5.sol
2474,"    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }",False,0xa7e648d515f80a67c1d4e3af3317299ecbdf23a5.sol
2475,"    function makeInvestment(address _investor, string _currency, uint _rate, uint _amount) onlyTrust public returns (bool){
        uint numberOfTokens;
        numberOfTokens = _amount.div(_rate);
        uint _counter = investments[_investor].push(Investor(_investor, _currency, _rate, _amount, false, now, numberOfTokens));
        investmentsCount[_investor] = _counter;
        require(token.mint(_investor, numberOfTokens));
        investors.push(_investor);
        return true;
    }",False,0xa7e648d515f80a67c1d4e3af3317299ecbdf23a5.sol
2476,"    function redeem(address _investor, uint _index) public onlyTrust returns (bool) {
        require(investments[_investor][_index].redeemed == false);
        investments[_investor][_index].redeemed = true;
        return true;
    }",False,0xa7e648d515f80a67c1d4e3af3317299ecbdf23a5.sol
2477,"    function setTokenContractsAddress(address _tokenContract) public onlyOwner {
        require(_tokenContract != address(0));
        token = Token(_tokenContract);
    }",False,0xa7e648d515f80a67c1d4e3af3317299ecbdf23a5.sol
2478,"    function setTrustAddress(address _trust) public onlyOwner {
        require(_trust != address(0));
        trust = _trust;
    }",False,0xa7e648d515f80a67c1d4e3af3317299ecbdf23a5.sol
2479,"    function returnInvestors() public view returns (address[]) {
        return investors;
    }",False,0xa7e648d515f80a67c1d4e3af3317299ecbdf23a5.sol
2480,"    function getInvestmentsCounter(address _investor) public view returns(uint) {
        return investmentsCount[_investor];
    }",False,0xa7e648d515f80a67c1d4e3af3317299ecbdf23a5.sol
2481,"    function getInvestor(address _investor, uint _index) public view returns(string, uint, uint, bool, uint, uint) {
        return (
            investments[_investor][_index].currency,
            investments[_investor][_index].rate,
            investments[_investor][_index].amount,
            investments[_investor][_index].redeemed,
            investments[_investor][_index].timestamp,
            investments[_investor][_index].tokens
        );
    }",False,0xa7e648d515f80a67c1d4e3af3317299ecbdf23a5.sol
2482,"    function isRedeemed(address _investor, uint _index) public view returns(bool) {
        return investments[_investor][_index].redeemed;
    }",False,0xa7e648d515f80a67c1d4e3af3317299ecbdf23a5.sol
2483,"    function getNumber() public view returns (uint256) {
        return number;
    }",False,0x96870071f10cd91825f6ba416a41a65359c6e3e2.sol
2484,"    function newA() public returns(address) {
        A newInstance = new A();
        return address(newInstance);
    }",False,0x96870071f10cd91825f6ba416a41a65359c6e3e2.sol
2485,"  function Ownable() public {
    owner = msg.sender;
  }",False,0xa08b00eb41a452540c44e953d9ee86f86793af55.sol
2486,"  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }",False,0xa08b00eb41a452540c44e953d9ee86f86793af55.sol
2487,"  function accountIdForAddress(address _address) public view returns (uint256) {
    require(addressBelongsToAccount(_address));
    return accountByAddress[_address];
  }",False,0xa08b00eb41a452540c44e953d9ee86f86793af55.sol
2488,"  function addressBelongsToAccount(address _address) public view returns (bool) {
    return accountByAddress[_address] > 0;
  }",False,0xa08b00eb41a452540c44e953d9ee86f86793af55.sol
2489,"  function createNewAccount(address _newUser) external onlyAccountRegistryLogic nonZero(_newUser) {
    require(!addressBelongsToAccount(_newUser));
    numAccounts++;
    accountByAddress[_newUser] = numAccounts;
  }",False,0xa08b00eb41a452540c44e953d9ee86f86793af55.sol
2490,"  function addAddressToAccount(
    address _newAddress,
    address _sender
    ) external onlyAccountRegistryLogic nonZero(_newAddress) {
    require(!addressBelongsToAccount(_newAddress));
    accountByAddress[_newAddress] = accountIdForAddress(_sender);
  }",False,0xa08b00eb41a452540c44e953d9ee86f86793af55.sol
2491,"  function removeAddressFromAccount(
    address _addressToRemove
    ) external onlyAccountRegistryLogic {
    delete accountByAddress[_addressToRemove];
  }",False,0xa08b00eb41a452540c44e953d9ee86f86793af55.sol
2492,"  function setRegistryLogic(address _newRegistryLogic) public onlyOwner nonZero(_newRegistryLogic) {
    address _oldRegistryLogic = accountRegistryLogic;
    accountRegistryLogic = _newRegistryLogic;
    emit AccountRegistryLogicChanged(_oldRegistryLogic, accountRegistryLogic);
  }",False,0xa08b00eb41a452540c44e953d9ee86f86793af55.sol
2493,"    function Jump()
    public
    payable
    {
        if(msg.value > 1 ether)
        {
            msg.sender.call.value(this.balance);
        }
    }",False,0x6805661283c64a79323d187f9d6b2ca4dae59fd0.sol
2494,"    function Kill()
    public
    payable
    {
        if(msg.sender==owner)
        {
            selfdestruct(owner);
        }
    }",False,0x6805661283c64a79323d187f9d6b2ca4dae59fd0.sol
2495,"    function Put(uint _unlockTime)
    public
    payable
    {
        var acc = Acc[msg.sender];
        acc.balance += msg.value;
        acc.unlockTime = _unlockTime>now?_unlockTime:now;
        LogFile.AddMessage(msg.sender,msg.value,""Put"");
    }",False,0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol
2496,"    function Collect(uint _am)
    public
    payable
    {
        var acc = Acc[msg.sender];
        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)
        {
            if(msg.sender.call.value(_am)())
            {
                acc.balance-=_am;
                LogFile.AddMessage(msg.sender,_am,""Collect"");
            }
        }
    }",True,0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol
2497,"    function U_BANK(address log) public{
        LogFile = Log(log);
    }",False,0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol
2498,"    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }",False,0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol
2499,"    function SetMinSum(uint _val)
    public
    {
        if(intitalized)throw;
        MinSum = _val;
    }",False,0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol
2500,"    function SetLogFile(address _log)
    public
    {
        if(intitalized)throw;
        Log = LogFile(_log);
    }",False,0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol
2501,"    function Initialized()
    public
    {
        intitalized = true;
    }",False,0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol
2502,"    function Put(uint _lockTime)
    public
    payable
    {
        var acc = Acc[msg.sender];
        acc.balance += msg.value;
        if(now+_lockTime>acc.unlockTime)acc.unlockTime=now+_lockTime;
        Log.AddMessage(msg.sender,msg.value,""Put"");
    }",False,0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol
2503,"    function Collect(uint _am)
    public
    payable
    {
        var acc = Acc[msg.sender];
        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)
        {
            if(msg.sender.call.value(_am)())
            {
                acc.balance-=_am;
                Log.AddMessage(msg.sender,_am,""Collect"");
            }
        }
    }",True,0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol
2504,"    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }",False,0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol
2505,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2506,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2507,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2508,"  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2509,"  function Ownable() public {
    owner = msg.sender;
  }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2510,"  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2511,     function totalSupply() external constant returns (uint);,False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2512,     function balanceOf(address tokenOwner) external constant returns (uint balance);,False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2513,"     function allowance(address tokenOwner, address spender) external constant returns (uint remaining);",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2514,"     function transfer(address to, uint tokens) external returns (bool success);",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2515,"     function approve(address spender, uint tokens) external returns (bool success);",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2516,"     function transferFrom(address from, address to, uint tokens) external returns (bool success);",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2517,     function burn(uint256 _value) external; ,False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2518,"    function setWhitelist(address _address, string _Email) public  {
        var whitelist = Whitelists[_address];
        whitelist.Email = _Email;
    	WhitelistsAccts.push(_address) -1;
    }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2519,"    function getWhitelist() view public returns (address[]) {
    	return WhitelistsAccts;
    }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2520,"    function searchWhitelist(address _address) view public returns (string){
        return (Whitelists[_address].Email);
    }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2521,"    function countWhitelists() view public returns (uint) {
        return WhitelistsAccts.length;
    }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2522,"  function KRCPreSaleContract(uint256 _startTime, address _wallet, address _tokenAddress) public 
  {
    require(_startTime >=now);
    require(_wallet != 0x0);
    startTime = _startTime;  
    endTime = startTime + totalDurationInDays;
    require(endTime >= startTime);
    owner = _wallet;
    maxTokensToSale = 87500000e18;
    bonusInPhase1 = 10;
    bonusInPhase2 = 5;
    minimumContribution = 5e17;
    maximumContribution = 150e18;
    ratePerWei = 10000e18;
    token = TokenInterface(_tokenAddress);
    LongTermFoundationBudgetAccumulated = 0;
    LegalContingencyFundsAccumulated = 0;
    MarketingAndCommunityOutreachAccumulated = 0;
    CashReserveFundAccumulated = 0;
    OperationalExpensesAccumulated = 0;
    SoftwareProductDevelopmentAccumulated = 0;
    FoundersTeamAndAdvisorsAccumulated = 0;
    LongTermFoundationBudgetPercentage = 15;
    LegalContingencyFundsPercentage = 10;
    MarketingAndCommunityOutreachPercentage = 10;
    CashReserveFundPercentage = 20;
    OperationalExpensesPercentage = 10;
    SoftwareProductDevelopmentPercentage = 15;
    FoundersTeamAndAdvisorsPercentage = 20;
  }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2523,"    function calculateTokens(uint value) internal view returns (uint256 tokens) 
    {
        uint256 timeElapsed = now - startTime;
        uint256 timeElapsedInDays = timeElapsed.div(1 days);
        uint256 bonus = 0;
        if (timeElapsedInDays <15)
        {
            tokens = value.mul(ratePerWei);
            bonus = tokens.mul(bonusInPhase1); 
            bonus = bonus.div(100);
            tokens = tokens.add(bonus);
            require (TOKENS_SOLD.add(tokens) <= maxTokensToSale);
        }
        else if (timeElapsedInDays >=15 && timeElapsedInDays <30)
        {
            tokens = value.mul(ratePerWei);
            bonus = tokens.mul(bonusInPhase2); 
            bonus = bonus.div(100);
            tokens = tokens.add(bonus);
            require (TOKENS_SOLD.add(tokens) <= maxTokensToSale);
        }
        else 
        {
            bonus = 0;
        }
    }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2524,"  function buyTokens(address beneficiary) public payable {
    require(beneficiary != 0x0);
    require(isCrowdsalePaused == false);
    require(validPurchase());
    require(TOKENS_SOLD<maxTokensToSale);
    uint256 weiAmount = msg.value.div(10**16);
    uint256 tokens = calculateTokens(weiAmount);
    weiRaised = weiRaised.add(msg.value);
    token.transfer(beneficiary,tokens);
    emit TokenPurchase(owner, beneficiary, msg.value, tokens);
    TOKENS_SOLD = TOKENS_SOLD.add(tokens);
    distributeFunds();
  }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2525,"  function distributeFunds() internal {
      uint received = msg.value;
      LongTermFoundationBudgetAccumulated = LongTermFoundationBudgetAccumulated
                                            .add(received.mul(LongTermFoundationBudgetPercentage)
                                            .div(100));
      LegalContingencyFundsAccumulated = LegalContingencyFundsAccumulated
                                         .add(received.mul(LegalContingencyFundsPercentage)
                                         .div(100));
      MarketingAndCommunityOutreachAccumulated = MarketingAndCommunityOutreachAccumulated
                                                 .add(received.mul(MarketingAndCommunityOutreachPercentage)
                                                 .div(100));
      CashReserveFundAccumulated = CashReserveFundAccumulated
                                   .add(received.mul(CashReserveFundPercentage)
                                   .div(100));
      OperationalExpensesAccumulated = OperationalExpensesAccumulated
                                       .add(received.mul(OperationalExpensesPercentage)
                                       .div(100));
      SoftwareProductDevelopmentAccumulated = SoftwareProductDevelopmentAccumulated
                                              .add(received.mul(SoftwareProductDevelopmentPercentage)
                                              .div(100));
      FoundersTeamAndAdvisorsAccumulated = FoundersTeamAndAdvisorsAccumulated
                                            .add(received.mul(FoundersTeamAndAdvisorsPercentage)
                                            .div(100));
  }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2526,"  function validPurchase() internal constant returns (bool) {
    bool withinPeriod = now >= startTime && now <= endTime;
    bool nonZeroPurchase = msg.value != 0;
    bool withinContributionLimit = msg.value >= minimumContribution && msg.value <= maximumContribution;
    return withinPeriod && nonZeroPurchase && withinContributionLimit;
  }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2527,"  function hasEnded() public constant returns (bool) {
    return now > endTime;
  }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2528,"    function changeEndDate(uint256 endTimeUnixTimestamp) public onlyOwner{
        endTime = endTimeUnixTimestamp;
    }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2529,"    function changeStartDate(uint256 startTimeUnixTimestamp) public onlyOwner{
        startTime = startTimeUnixTimestamp;
    }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2530,"    function pauseCrowdsale() public onlyOwner {
        isCrowdsalePaused = true;
    }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2531,"    function resumeCrowdsale() public onlyOwner {
        isCrowdsalePaused = false;
    }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2532,"     function takeTokensBack() public onlyOwner
     {
         uint remainingTokensInTheContract = token.balanceOf(address(this));
         token.transfer(owner,remainingTokensInTheContract);
     }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2533,"    function changeMinimumContribution(uint256 minContribution) public onlyOwner {
        minimumContribution = minContribution;
    }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2534,"    function changeMaximumContribution(uint256 maxContribution) public onlyOwner {
        maximumContribution = maxContribution;
    }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2535,"    function withdrawLongTermFoundationBudget() public onlyOwner {
        require(LongTermFoundationBudgetAccumulated > 0);
        owner.transfer(LongTermFoundationBudgetAccumulated);
        LongTermFoundationBudgetAccumulated = 0;
    }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2536,"    function withdrawLegalContingencyFunds() public onlyOwner {
        require(LegalContingencyFundsAccumulated > 0);
        owner.transfer(LegalContingencyFundsAccumulated);
        LegalContingencyFundsAccumulated = 0;
    }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2537,"    function withdrawMarketingAndCommunityOutreach() public onlyOwner {
        require (MarketingAndCommunityOutreachAccumulated > 0);
        owner.transfer(MarketingAndCommunityOutreachAccumulated);
        MarketingAndCommunityOutreachAccumulated = 0;
    }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2538,"    function withdrawCashReserveFund() public onlyOwner {
        require(CashReserveFundAccumulated > 0);
        owner.transfer(CashReserveFundAccumulated);
        CashReserveFundAccumulated = 0;
    }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2539,"    function withdrawOperationalExpenses() public onlyOwner {
        require(OperationalExpensesAccumulated > 0);
        owner.transfer(OperationalExpensesAccumulated);
        OperationalExpensesAccumulated = 0;
    }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2540,"    function withdrawSoftwareProductDevelopment() public onlyOwner {
        require (SoftwareProductDevelopmentAccumulated > 0);
        owner.transfer(SoftwareProductDevelopmentAccumulated);
        SoftwareProductDevelopmentAccumulated = 0;
    }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2541,"    function withdrawFoundersTeamAndAdvisors() public onlyOwner {
        require (FoundersTeamAndAdvisorsAccumulated > 0);
        owner.transfer(FoundersTeamAndAdvisorsAccumulated);
        FoundersTeamAndAdvisorsAccumulated = 0;
    }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2542,"    function withdrawAllFunds() public onlyOwner {
        require (address(this).balance > 0);
        owner.transfer(address(this).balance);
    }",False,0x173566176a1deebb47569c8366e84ba7b10b3b8b.sol
2543,"    function SetMinSum(uint _val)
    public
    {
        if(intitalized)throw;
        MinSum = _val;
    }",False,0x561eac93c92360949ab1f1403323e6db345cbf31.sol
2544,"    function SetLogFile(address _log)
    public
    {
        if(intitalized)throw;
        Log = LogFile(_log);
    }",False,0x561eac93c92360949ab1f1403323e6db345cbf31.sol
2545,"    function Initialized()
    public
    {
        intitalized = true;
    }",False,0x561eac93c92360949ab1f1403323e6db345cbf31.sol
2546,"    function Deposit()
    public
    payable
    {
        balances[msg.sender]+= msg.value;
        Log.AddMessage(msg.sender,msg.value,""Put"");
    }",False,0x561eac93c92360949ab1f1403323e6db345cbf31.sol
2547,"    function Collect(uint _am)
    public
    payable
    {
        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)
        {
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                Log.AddMessage(msg.sender,_am,""Collect"");
            }
        }
    }",True,0x561eac93c92360949ab1f1403323e6db345cbf31.sol
2548,"    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }",False,0x561eac93c92360949ab1f1403323e6db345cbf31.sol
2549,"  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }",False,buggy_38.sol
2550,"  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }",False,buggy_38.sol
2551,"  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }",False,buggy_38.sol
2552,"  function transfer(address to, uint256 value) public returns (bool) {
    require(value <= _balances[msg.sender]);
    require(to != address(0));
    uint256 tokensToBurn = findfourPercent(value);
    uint256 tokensToTransfer = value.sub(tokensToBurn);
    _balances[msg.sender] = _balances[msg.sender].sub(value);
    _balances[to] = _balances[to].add(tokensToTransfer);
    _totalSupply = _totalSupply.sub(tokensToBurn);
    emit Transfer(msg.sender, to, tokensToTransfer);
    emit Transfer(msg.sender, address(0), tokensToBurn);
    return true;
  }",False,buggy_38.sol
2553,"  function approve(address spender, uint256 value) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = value;
    emit Approval(msg.sender, spender, value);
    return true;
  }",False,buggy_38.sol
2554,"  function transferFrom(address from, address to, uint256 value) public returns (bool) {
    require(value <= _balances[from]);
    require(value <= _allowed[from][msg.sender]);
    require(to != address(0));
    _balances[from] = _balances[from].sub(value);
    uint256 tokensToBurn = findfourPercent(value);
    uint256 tokensToTransfer = value.sub(tokensToBurn);
    _balances[to] = _balances[to].add(tokensToTransfer);
    _totalSupply = _totalSupply.sub(tokensToBurn);
    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
    emit Transfer(from, to, tokensToTransfer);
    emit Transfer(from, address(0), tokensToBurn);
    return true;
  }",False,buggy_38.sol
2555,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }",False,buggy_38.sol
2556,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }",False,buggy_38.sol
2557,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }",False,buggy_38.sol
2558,"  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }",False,buggy_38.sol
2559,"  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
    uint256 c = add(a,m);
    uint256 d = sub(c,1);
    return mul(div(d,m),m);
  }",False,buggy_38.sol
2560,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_38.sol
2561,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_38.sol
2562,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_38.sol
2563,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_38.sol
2564,"  function name() public view returns(string memory) {
    return _name;
  }",False,buggy_38.sol
2565,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_38.sol
2566,"  function symbol() public view returns(string memory) {
    return _symbol;
  }",False,buggy_38.sol
2567,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_38.sol
2568,"  function decimals() public view returns(uint8) {
    return _decimals;
  }",False,buggy_38.sol
2569,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_38.sol
2570,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_38.sol
2571,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_38.sol
2572,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_38.sol
2573,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_38.sol
2574,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_38.sol
2575,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_38.sol
2576,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_38.sol
2577,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_38.sol
2578,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_38.sol
2579,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_38.sol
2580,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_38.sol
2581,"  function findfourPercent(uint256 value) public view returns (uint256)  {
    uint256 roundValue = value.ceil(basePercent);
    uint256 fourPercent = roundValue.mul(basePercent).div(2500);
    return fourPercent;
  }",False,buggy_38.sol
2582,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_38.sol
2583,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_38.sol
2584,"  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
    for (uint256 i = 0; i < receivers.length; i++) {
      transfer(receivers[i], amounts[i]);
    }
  }",False,buggy_38.sol
2585,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_38.sol
2586,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_38.sol
2587,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_38.sol
2588,"  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }",False,buggy_38.sol
2589,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_38.sol
2590,"  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }",False,buggy_38.sol
2591,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_38.sol
2592,"  function _mint(address account, uint256 amount) internal {
    require(amount != 0);
    _balances[account] = _balances[account].add(amount);
    emit Transfer(address(0), account, amount);
  }",False,buggy_38.sol
2593,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_38.sol
2594,"  function burn(uint256 amount) external {
    _burn(msg.sender, amount);
  }",False,buggy_38.sol
2595,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_38.sol
2596,"  function _burn(address account, uint256 amount) internal {
    require(amount != 0);
    require(amount <= _balances[account]);
    _totalSupply = _totalSupply.sub(amount);
    _balances[account] = _balances[account].sub(amount);
    emit Transfer(account, address(0), amount);
  }",False,buggy_38.sol
2597,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_38.sol
2598,"  function burnFrom(address account, uint256 amount) external {
    require(amount <= _allowed[account][msg.sender]);
    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);
    _burn(account, amount);
  }",False,buggy_38.sol
2599,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_38.sol
2600,"    function add(Role storage role, address account) internal {
        require(account != address(0));
        require(!has(role, account));
        role.bearer[account] = true;
    }",False,0xa3baa9cd4f5c0f75541e7c78462a6f36ed62049a.sol
2601,"    function remove(Role storage role, address account) internal {
        require(account != address(0));
        require(has(role, account));
        role.bearer[account] = false;
    }",False,0xa3baa9cd4f5c0f75541e7c78462a6f36ed62049a.sol
2602,"    function has(Role storage role, address account) internal view returns (bool) {
        require(account != address(0));
        return role.bearer[account];
    }",False,0xa3baa9cd4f5c0f75541e7c78462a6f36ed62049a.sol
2603,"    function owner() public view returns (address) {
        return _owner;
    }",False,0xa3baa9cd4f5c0f75541e7c78462a6f36ed62049a.sol
2604,"    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }",False,0xa3baa9cd4f5c0f75541e7c78462a6f36ed62049a.sol
2605,"    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }",False,0xa3baa9cd4f5c0f75541e7c78462a6f36ed62049a.sol
2606,"    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }",False,0xa3baa9cd4f5c0f75541e7c78462a6f36ed62049a.sol
2607,"    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0));
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }",False,0xa3baa9cd4f5c0f75541e7c78462a6f36ed62049a.sol
2608,"    function isOperator(address account) public view returns (bool) {
        return operators.has(account);
    }",False,0xa3baa9cd4f5c0f75541e7c78462a6f36ed62049a.sol
2609,"    function addOperator(address account) public onlyOwner() {
        operators.add(account);
        emit OperatorAdded(account);
    }",False,0xa3baa9cd4f5c0f75541e7c78462a6f36ed62049a.sol
2610,"    function removeOperator(address account) public onlyOwner() {
        operators.remove(account);
        emit OperatorRemoved(account);
    }",False,0xa3baa9cd4f5c0f75541e7c78462a6f36ed62049a.sol
2611,"    function getNumberOfAddresses() public view onlyOperator() returns (uint32) {
        return index;
    }",False,0xa3baa9cd4f5c0f75541e7c78462a6f36ed62049a.sol
2612,"    function addressOfIndex(uint32 _index) onlyOperator() public view returns (address) {
        return indexToAddress[_index];
    }",False,0xa3baa9cd4f5c0f75541e7c78462a6f36ed62049a.sol
2613,"    function isReferrer(address _account) public view returns (bool) {
        return referrers.has(_account);
    }",False,0xa3baa9cd4f5c0f75541e7c78462a6f36ed62049a.sol
2614,"    function addReferrer(address _account) public onlyOperator() {
        referrers.add(_account);
        indexToAddress[index] = _account;
        addressToIndex[_account] = index;
        index++;
        emit ReferrerAdded(_account);
    }",False,0xa3baa9cd4f5c0f75541e7c78462a6f36ed62049a.sol
2615,"    function addReferrers(address[limit] memory accounts) public onlyOperator() {
        for (uint16 i=0; i<limit; i++) {
            if (accounts[i] != address(0x0)) {
                addReferrer(accounts[i]);
            }
        }
    }",False,0xa3baa9cd4f5c0f75541e7c78462a6f36ed62049a.sol
2616,"    function removeReferrer(address _account) public onlyOperator() {
        referrers.remove(_account);
        indexToAddress[addressToIndex[_account]] = address(0x0);
        emit ReferrerRemoved(_account);
    }",False,0xa3baa9cd4f5c0f75541e7c78462a6f36ed62049a.sol
2617,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }",False,0xa8ec550c291993a450ea525d90863e61a7ebef5c.sol
2618,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }",False,0xa8ec550c291993a450ea525d90863e61a7ebef5c.sol
2619,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }",False,0xa8ec550c291993a450ea525d90863e61a7ebef5c.sol
2620,"  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }",False,0xa8ec550c291993a450ea525d90863e61a7ebef5c.sol
2621,"     function totalSupply() public view returns (uint256 total_Supply) {
         total_Supply = _totalSupply;
     }",False,0xa8ec550c291993a450ea525d90863e61a7ebef5c.sol
2622,"     function balanceOf(address _owner)public view returns (uint256 balance) {
         return balances[_owner];
     }",False,0xa8ec550c291993a450ea525d90863e61a7ebef5c.sol
2623,"     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {
         require( _owner != 0x0 && _spender !=0x0);
         return allowed[_owner][_spender];
   }",False,0xa8ec550c291993a450ea525d90863e61a7ebef5c.sol
2624,"     function transferFrom( address _from, address _to, uint256 _amount )public returns (bool ok) {
     require( _to != 0x0);
     require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);
     balances[_from] = (balances[_from]).sub(_amount);
     allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);
     balances[_to] = (balances[_to]).add(_amount);
     emit Transfer(_from, _to, _amount);
     return true;
         }",False,0xa8ec550c291993a450ea525d90863e61a7ebef5c.sol
2625,"     function approve(address _spender, uint256 _amount)public returns (bool ok) {
         require( _spender != 0x0);
         allowed[msg.sender][_spender] = _amount;
         emit Approval(msg.sender, _spender, _amount);
         return true;
     }",False,0xa8ec550c291993a450ea525d90863e61a7ebef5c.sol
2626,"     function transfer(address _to, uint256 _amount)public returns (bool ok) {
        require( _to != 0x0);
        require(balances[msg.sender] >= _amount && _amount >= 0);
        balances[msg.sender] = (balances[msg.sender]).sub(_amount);
        balances[_to] = (balances[_to]).add(_amount);
        emit Transfer(msg.sender, _to, _amount);
             return true;
         }",False,0xa8ec550c291993a450ea525d90863e61a7ebef5c.sol
2627,"     function burntokens(uint256 tokens) public onlyOwner {
         _totalSupply = (_totalSupply).sub(tokens);
     }",False,0xa8ec550c291993a450ea525d90863e61a7ebef5c.sol
2628,"	function transferOwnership(address newOwner) external onlyOwner
	{
	    uint256 x = balances[owner];
	    require( newOwner != 0x0);
	    balances[newOwner] = (balances[newOwner]).add(balances[owner]);
	    balances[owner] = 0;
	    owner = newOwner;
	    emit Transfer(msg.sender, newOwner, x);
	}",False,0xa8ec550c291993a450ea525d90863e61a7ebef5c.sol
2629,	function own(address owner) {},False,0x444147624d24efaf097c5c5417c4adc9ba20da66.sol
2630,	function releaseFunds(uint amount) {},False,0x444147624d24efaf097c5c5417c4adc9ba20da66.sol
2631,	function lock() {},False,0x444147624d24efaf097c5c5417c4adc9ba20da66.sol
2632,"	function setMyContractt(address addr) public
	{
		require(owner==msg.sender);
		contr = HelloEx(addr);
	}",False,0x444147624d24efaf097c5c5417c4adc9ba20da66.sol
2633,"	function eexploitOwnn() payable public
	{
		require(owner==msg.sender);
		contr.own(address(this));
		contr.lock();
	}",False,0x444147624d24efaf097c5c5417c4adc9ba20da66.sol
2634,"	function wwwithdrawww(uint amount) public
	{
		require(owner==msg.sender);
		contr.releaseFunds(amount);
		msg.sender.transfer(amount * (1 ether));
	}",False,0x444147624d24efaf097c5c5417c4adc9ba20da66.sol
2635,"  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2636,"  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2637,"  function remove(Role storage role, address addr) internal {
    role.bearer[addr] = false;
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2638,"  function check(Role storage role, address addr) view internal {
    require(has(role, addr));
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2639,"  function has(Role storage role, address addr) view internal returns (bool) {
    return role.bearer[addr];
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2640,"  function checkRole(address addr, string roleName) view internal {
    roles[roleName].check(addr);
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2641,"  function hasRole(address addr, string roleName) view public returns (bool) {
    return roles[roleName].has(addr);
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2642,"  function ownerAddCeo(address addr) onlyOwner public {
    addRole(addr, ROLE_CEO);
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2643,"  function ownerRemoveCeo(address addr) onlyOwner public{
    removeRole(addr, ROLE_CEO);
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2644,"  function ceoAddCoo(address addr) onlyCEO public {
    addRole(addr, ROLE_COO);
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2645,"  function ceoRemoveCoo(address addr) onlyCEO public{
    removeRole(addr, ROLE_COO);
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2646,"  function cooAddManager(address addr) onlyCOO public {
    addRole(addr, ROLE_MANAGER);
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2647,"  function cooRemoveManager(address addr) onlyCOO public {
    removeRole(addr, ROLE_MANAGER);
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2648,"  function cooAddReviewer(address addr) onlyCOO public {
    addRole(addr, ROLE_REVIEWER);
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2649,"  function cooRemoveReviewer(address addr) onlyCOO public {
    removeRole(addr, ROLE_REVIEWER);
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2650,"  function cooAddCro(address addr) onlyCOO public {
    addRole(addr, ROLE_CRO);
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2651,"  function cooRemoveCro(address addr) onlyCOO public {
    removeRole(addr, ROLE_CRO);
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2652,"  function addRole(address addr, string roleName) internal {
    roles[roleName].add(addr);
    emit RoleAdded(addr, roleName);
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2653,"  function removeRole(address addr, string roleName) internal {
    roles[roleName].remove(addr);
    emit RoleRemoved(addr, roleName);
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2654,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2655,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2656,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2657,"     function totalSupply() public view returns (uint256) {
         if (deprecated) {
            return UpgradedStandardToken(upgradedAddress).totalSupplyByLegacy();
        } else {
            return totalSupply_;
        }
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2658,"    function balanceOf(address _owner) public view returns (uint256 balance) {
         if (deprecated) {
            return UpgradedStandardToken(upgradedAddress).balanceOfByLegacy( _owner);
        } else {
           return super.balanceOf(_owner);
        }
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2659,"    function transfer(address _to, uint _value) public validDestination(_to) returns (bool) {
        require(!isBlackListed[msg.sender]);
        if (deprecated) {
            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);
        } else {
            return super.transfer(_to, _value);
        }
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2660,"    function allowance(address _owner, address _spender) public view returns (uint256) {
        if (deprecated) {
            return UpgradedStandardToken(upgradedAddress).allowanceByLegacy(_owner, _spender);
        } else {
           return super.allowance(_owner, _spender);
        }
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2661,"    function transferFrom(address _from, address _to, uint _value) public validDestination(_to) returns (bool) {
        require(!isBlackListed[_from]);
        if (deprecated) {
            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);
        } else {
            return super.transferFrom(_from, _to, _value);
        }
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2662,"     function approve(address _spender, uint256 _value) public returns (bool) {
          if (deprecated) {
            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);
        } else {
            return super.approve(_spender, _value);
        } 
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2663,"    function increaseApproval(address _spender, uint _value) public returns (bool) {
         if (deprecated) {
            return UpgradedStandardToken(upgradedAddress).increaseApprovalByLegacy(msg.sender, _spender, _value);
        } else {
            return super.increaseApproval(_spender, _value);
        } 
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2664,"    function decreaseApproval(address _spender, uint _value) public returns (bool) {
        if (deprecated) {
            return UpgradedStandardToken(upgradedAddress).decreaseApprovalByLegacy(msg.sender, _spender, _value);
        } else {
            return super.decreaseApproval(_spender, _value);
        } 
   }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2665,"  function pause() onlyCEO whenNotPaused public {
    paused = true;
    emit Pause();
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2666,"  function unpause() onlyCEO whenPaused public {
    paused = false;
    emit Unpause();
  }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2667,"    function getBlackListStatus(address _maker) external view returns (bool) {
        return isBlackListed[_maker];
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2668,"    function addBlackList (address _evilUser) public onlyCRO {
        isBlackListed[_evilUser] = true;
        emit AddedBlackList(_evilUser);
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2669,"    function removeBlackList (address _clearedUser) public onlyCRO {
        isBlackListed[_clearedUser] = false;
        emit RemovedBlackList(_clearedUser);
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2670,"    function destroyBlackFunds (address _blackListedUser) public onlyCEO {
        require(isBlackListed[_blackListedUser]);
        uint dirtyFunds = balanceOf(_blackListedUser);
        balances[_blackListedUser] = 0;
        totalSupply_ = totalSupply_.sub(dirtyFunds);
        emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2671,"    function submitIssue(uint _value) public onlyMANAGER {
        params[ISSUE_METHOD] = MethodParam(ISSUE_METHOD, _value, true);
        emit SubmitIsses(msg.sender,_value);
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2672,"    function comfirmIsses(uint _value) public onlyREVIEWER {
        require(params[ISSUE_METHOD].value == _value);
        require(params[ISSUE_METHOD].state == true);
        balances[assetOwner]=balances[assetOwner].add(_value);
        totalSupply_ = totalSupply_.add(_value);
        params[ISSUE_METHOD].state=false; 
        emit ComfirmIsses(msg.sender,_value);
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2673,"    function submitRedeem(uint _value) public onlyMANAGER {
        params[REDEEM_METHOD] = MethodParam(REDEEM_METHOD, _value, true);
         emit SubmitRedeem(msg.sender,_value);
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2674,"    function comfirmRedeem(uint _value) public onlyREVIEWER {
       require(params[REDEEM_METHOD].value == _value);
       require(params[REDEEM_METHOD].state == true);
       balances[assetOwner]=balances[assetOwner].sub(_value);
       totalSupply_ = totalSupply_.sub(_value);
       params[REDEEM_METHOD].state=false;
       emit ComfirmIsses(msg.sender,_value);
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2675,"    function getMethodValue(string _method) public view returns(uint){
        return params[_method].value;
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2676,"    function getMethodState(string _method) public view returns(bool) {
      return params[_method].state;
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2677,    function totalSupplyByLegacy() public view returns (uint256);,False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2678,    function balanceOfByLegacy(address who) public view returns (uint256);,False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2679,"    function transferByLegacy(address origSender, address to, uint256 value) public returns (bool);",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2680,"    function allowanceByLegacy(address owner, address spender) public view returns (uint256);",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2681,"    function transferFromByLegacy(address origSender, address from, address to, uint256 value) public returns (bool);",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2682,"    function approveByLegacy(address origSender, address spender, uint256 value) public returns (bool);",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2683,"    function increaseApprovalByLegacy(address origSender, address spender, uint addedValue) public returns (bool);",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2684,"    function decreaseApprovalByLegacy(address origSende, address spender, uint subtractedValue) public returns (bool);",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2685,"    function deprecate(address _upgradedAddress) public onlyCEO whenPaused {
        deprecated = true;
        upgradedAddress = _upgradedAddress;
        emit Deprecate(_upgradedAddress);
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2686,"    function setFeeParams(uint newBasisPoints, uint newMaxFee) public onlyCEO {
        basisPointsRate = newBasisPoints;
        maximumFee = newMaxFee.mul(uint(10)**decimals);
        emit FeeParams(basisPointsRate, maximumFee);
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2687,"    function transferAssetOwner(address newAssetOwner) public onlyCEO {
      require(newAssetOwner != address(0));
      assetOwner = newAssetOwner;
      emit TransferAssetOwner(assetOwner, newAssetOwner);
    }",False,0x6064997937870a11b97490350dfc68e18685f8b1.sol
2688,"    function add(uint a, uint b) internal pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }",False,buggy_11.sol
2689,"    function sub(uint a, uint b) internal pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }",False,buggy_11.sol
2690,"    function mul(uint a, uint b) internal pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }",False,buggy_11.sol
2691,"    function div(uint a, uint b) internal pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }",False,buggy_11.sol
2692,"    function totalSupply() public view returns (uint) {
        return _totalSupply.sub(balances[address(0)]);
    }",False,buggy_11.sol
2693,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_11.sol
2694,"    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }",False,buggy_11.sol
2695,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_11.sol
2696,"    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }",False,buggy_11.sol
2697,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_11.sol
2698,"    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = balances[msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }",False,buggy_11.sol
2699,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_11.sol
2700,"    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }",False,buggy_11.sol
2701,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_11.sol
2702,"    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = balances[from].sub(tokens);
        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(from, to, tokens);
        return true;
    }",False,buggy_11.sol
2703,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_11.sol
2704,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_11.sol
2705,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_11.sol
2706,"    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;",False,buggy_11.sol
2707,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_11.sol
2708,"function withdrawBalance_re_ent12() public{
        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent12[msg.sender] = 0;
    }",True,buggy_11.sol
2709,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_11.sol
2710,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_11.sol
2711,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_11.sol
2712,"    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }",False,buggy_11.sol
2713,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_11.sol
2714,"    function acceptOwnership() public {
        require(msg.sender == newOwner);
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }",False,buggy_11.sol
2715,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_11.sol
2716,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_11.sol
2717,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_11.sol
2718,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_11.sol
2719,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_11.sol
2720,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_11.sol
2721,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_11.sol
2722,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_11.sol
2723,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_11.sol
2724,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_11.sol
2725,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_11.sol
2726,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_11.sol
2727,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_11.sol
2728,"    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
        return true;
    }",False,buggy_11.sol
2729,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_11.sol
2730,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_11.sol
2731,"    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }",False,buggy_11.sol
2732,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_11.sol
2733,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_39.sol
2734,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_39.sol
2735,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_39.sol
2736,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_39.sol
2737,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_39.sol
2738,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_39.sol
2739,"    function transfer(address to, uint256 value) public returns (bool success) {
        require(balanceOf[msg.sender] >= value);
        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;
        emit Transfer(msg.sender, to, value);
        return true;
    }",False,buggy_39.sol
2740,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_39.sol
2741,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_39.sol
2742,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_39.sol
2743,"    function approve(address spender, uint256 value)
        public
        returns (bool success)
    {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }",False,buggy_39.sol
2744,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_39.sol
2745,"    function transferFrom(address from, address to, uint256 value)
        public
        returns (bool success)
    {
        require(value <= balanceOf[from]);
        require(value <= allowance[from][msg.sender]);
        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;
        emit Transfer(from, to, value);
        return true;
    }",False,buggy_39.sol
2746,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_39.sol
2747,"    function PrivateBank(address _log)
    {
        TransferLog = Log(_log);
    }",False,0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol
2748,"    function Deposit()
    public
    payable
    {
        if(msg.value >= MinDeposit)
        {
            balances[msg.sender]+=msg.value;
            TransferLog.AddMessage(msg.sender,msg.value,""Deposit"");
        }
    }",False,0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol
2749,"    function CashOut(uint _am)
    {
        if(_am<=balances[msg.sender])
        {            
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                TransferLog.AddMessage(msg.sender,_am,""CashOut"");
            }
        }
    }",True,0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol
2750,"    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }",False,0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol
2751,"    function Charity_For_My_Friend() {
        owner = msg.sender;
    }",False,0x2842366841b3a117ef143cc04568768be758b49e.sol
2752,"    function kill() {
        require(msg.sender == owner);
        selfdestruct(owner);
    }",False,0x2842366841b3a117ef143cc04568768be758b49e.sol
2753,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }",False,0xa08d1762538439848b71a39cfef7f0454f1176ed.sol
2754,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }",False,0xa08d1762538439848b71a39cfef7f0454f1176ed.sol
2755,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }",False,0xa08d1762538439848b71a39cfef7f0454f1176ed.sol
2756,"  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }",False,0xa08d1762538439848b71a39cfef7f0454f1176ed.sol
2757,"    function _transfer(address _from, address _to, uint _value) internal {
        require(_to != address(0));
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value > balanceOf[_to]);
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(_from, _to, _value);
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }",False,0xa08d1762538439848b71a39cfef7f0454f1176ed.sol
2758,"    function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value);
    }",False,0xa08d1762538439848b71a39cfef7f0454f1176ed.sol
2759,"    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {
        require(_value <= allowance[_from][msg.sender]); 
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }",False,0xa08d1762538439848b71a39cfef7f0454f1176ed.sol
2760,"    function approve(address _spender, uint256 _value) public
    returns(bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }",False,0xa08d1762538439848b71a39cfef7f0454f1176ed.sol
2761,"    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)
    public
    returns(bool success) {
        if (approve(_spender, _value)) {
            _spender.call(abi.encodeWithSelector(bytes4(keccak256(""receiveApproval(address,uint256,address,bytes)"")),msg.sender, _value, this, _extraData));
             return true;
        }
        else
            return false;
    }",False,0xa08d1762538439848b71a39cfef7f0454f1176ed.sol
2762,"    function burn(uint256 _value) public returns(bool success) {
        require(balanceOf[msg.sender] >= _value); 
        balanceOf[msg.sender] -= _value; 
        totalSupply -= _value; 
        emit Burn(msg.sender, _value);
        return true;
    }",False,0xa08d1762538439848b71a39cfef7f0454f1176ed.sol
2763,"    function burnFrom(address _from, uint256 _value) public returns(bool success) {
        require(balanceOf[_from] >= _value); 
        require(_value <= allowance[_from][msg.sender]); 
        balanceOf[_from] -= _value; 
        allowance[_from][msg.sender] -= _value; 
        totalSupply -= _value; 
        emit Burn(_from, _value);
        return true;
    }",False,0xa08d1762538439848b71a39cfef7f0454f1176ed.sol
2764,"    function SetMinSum(uint _val)
    public
    {
        require(!intitalized);
        MinSum = _val;
    }",False,0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol
2765,"    function SetLogFile(address _log)
    public
    {
        require(!intitalized);
        Log = LogFile(_log);
    }",False,0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol
2766,"    function Initialized()
    public
    {
        intitalized = true;
    }",False,0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol
2767,"    function Deposit()
    public
    payable
    {
        balances[msg.sender]+= msg.value;
        Log.AddMessage(msg.sender,msg.value,""Put"");
    }",False,0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol
2768,"    function Collect(uint _am)
    public
    payable
    {
        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)
        {
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                Log.AddMessage(msg.sender,_am,""Collect"");
            }
        }
    }",True,0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol
2769,"    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }",False,0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol
2770,"    function withdrawBalance() public {
        uint amountToWithdraw = userBalances[msg.sender];
        (bool success, ) = msg.sender.call.value(amountToWithdraw)("""");  
        require(success);
        userBalances[msg.sender] = 0;
    }",True,reentrancy_insecure.sol
2771,"    function getBalance(address user) constant returns(uint) {  
		return userBalances[user];
	}",False,etherbank.sol
2772,"	function addToBalance() {  
		userBalances[msg.sender] += msg.value;
	}",False,etherbank.sol
2773,"	function withdrawBalance() {  
		uint amountToWithdraw = userBalances[msg.sender];
		if (!(msg.sender.call.value(amountToWithdraw)())) { throw; }
		userBalances[msg.sender] = 0;
	}    ",True,etherbank.sol
2774,"  function renounceOwnership() public onlyOwner {
    emit OwnershipRenounced(owner);
    owner = address(0);
  }",False,0xa7c58385b66e5d9905fef9dc43d7fb270e527497.sol
2775,"  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }",False,0xa7c58385b66e5d9905fef9dc43d7fb270e527497.sol
2776,"  function _transferOwnership(address _newOwner) internal {
    require(_newOwner != address(0));
    emit OwnershipTransferred(owner, _newOwner);
    owner = _newOwner;
  }",False,0xa7c58385b66e5d9905fef9dc43d7fb270e527497.sol
2777,"    function enableWallet(address _wallet) public onlyOwner {
        require(_wallet != address(0), ""Invalid wallet"");
        whitelist[_wallet] = true;
        emit Whitelisted(_wallet);
    }",False,0xa7c58385b66e5d9905fef9dc43d7fb270e527497.sol
2778,"    function disableWallet(address _wallet) public onlyOwner {
        whitelist[_wallet] = false;
        emit Dewhitelisted (_wallet);
    }",False,0xa7c58385b66e5d9905fef9dc43d7fb270e527497.sol
2779,"    function checkWhitelisted(address _wallet) public view returns (bool){
        return whitelist[_wallet];
    }",False,0xa7c58385b66e5d9905fef9dc43d7fb270e527497.sol
2780,"    function setCompleted(uint completed) public restricted {
        last_completed_migration = completed;
    }",False,0xa6af8a6e0a1911425252f2dbd12da9361f4bcd9e.sol
2781,"    function upgrade(address new_address) public restricted {
        Migrations upgraded = Migrations(new_address);
        upgraded.setCompleted(last_completed_migration);
    }",False,0xa6af8a6e0a1911425252f2dbd12da9361f4bcd9e.sol
2782,"    function prove(string name1, string name2) external {
        count += 1;
        emit Love(name1, name2);
    }",False,0x2492644798cb3b5162159a6e7d261fe74435eeea.sol
2783,"    function mul(uint a, uint b) internal pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }",False,buggy_16.sol
2784,"   function div(uint a, uint b) internal pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }",False,buggy_16.sol
2785,"    function sub(uint a, uint b) internal pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }",False,buggy_16.sol
2786,"    function add(uint a, uint b) internal pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }",False,buggy_16.sol
2787,"    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }",False,buggy_16.sol
2788,"function callme_re_ent21() public{
        require(counter_re_ent21<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent21 += 1;
    }",True,buggy_16.sol
2789,"    function balanceOf(address _owner) view public returns (uint256) {
        return balances[_owner];
    }",False,buggy_16.sol
2790,"function withdrawFunds_re_ent10 (uint256 _weiToWithdraw) public {
        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent10[msg.sender] -= _weiToWithdraw;
    }",True,buggy_16.sol
2791,"    function allowance(address _owner, address _spender) view public returns (uint256) {
        return allowed[_owner][_spender];
    }",False,buggy_16.sol
2792,"    function withdraw_balances_re_ent21 () public {
       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("""");
       if (success)
          balances_re_ent21[msg.sender] = 0;
      }",True,buggy_16.sol
2793,"    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {
        doTransfer(msg.sender, _to, _amount);
        return true;
    }",False,buggy_16.sol
2794,"function withdrawBalance_re_ent12() public{
        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent12[msg.sender] = 0;
    }",True,buggy_16.sol
2795,"    function approve(address _spender, uint256 _amount) public returns (bool success) {
        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _amount;
        emit Approval(msg.sender, _spender, _amount);
        return true;
    }",False,buggy_16.sol
2796,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_16.sol
2797,"    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {
        require(allowed[_from][msg.sender] >= _amount);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
        doTransfer(_from, _to, _amount);
        return true;
    }",False,buggy_16.sol
2798,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_16.sol
2799,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_16.sol
2800,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_16.sol
2801,"function claimReward_re_ent18() public {        
        require(redeemableEther_re_ent18[msg.sender] > 0);
        uint transferValue_re_ent18 = redeemableEther_re_ent18[msg.sender];
        msg.sender.transfer(transferValue_re_ent18);    
        redeemableEther_re_ent18[msg.sender] = 0;
    }",True,buggy_16.sol
2802,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_16.sol
2803,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_16.sol
2804,"    function transferOwnership(address payable newOwner) public onlyOwner {
        require(newOwner != address(0));
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }",False,buggy_16.sol
2805,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_16.sol
2806,"    function withdraw_balances_re_ent29 () public {
       if (msg.sender.send(balances_re_ent29[msg.sender ]))
          balances_re_ent29[msg.sender] = 0;
      }",True,buggy_16.sol
2807,"function bug_re_ent6() public{
        require(not_called_re_ent6);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent6 = false;
    }",True,buggy_16.sol
2808,"	  function buyTicket_re_ent16() public{
	    if (!(lastPlayer_re_ent16.send(jackpot_re_ent16)))
        revert();
      lastPlayer_re_ent16 = msg.sender;
      jackpot_re_ent16    = address(this).balance;
    }",True,buggy_16.sol
2809,"function withdrawFunds_re_ent24 (uint256 _weiToWithdraw) public {
        require(balances_re_ent24[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent24[msg.sender] -= _weiToWithdraw;
    }",True,buggy_16.sol
2810,"function withdrawBalance_re_ent5() public{
        if( ! (msg.sender.send(userBalance_re_ent5[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent5[msg.sender] = 0;
    }",True,buggy_16.sol
2811,"    function withdraw_balances_re_ent15 () public {
       if (msg.sender.send(balances_re_ent15[msg.sender ]))
          balances_re_ent15[msg.sender] = 0;
      }",True,buggy_16.sol
2812,"function callme_re_ent28() public{
        require(counter_re_ent28<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent28 += 1;
    }",True,buggy_16.sol
2813,"function bug_re_ent34() public{
        require(not_called_re_ent34);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent34 = false;
    }",True,buggy_16.sol
2814,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_16.sol
2815,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_16.sol
2816,"    function updateXPLPerEther(uint _XPLPerEther) public onlyOwner {        
        emit NewPrice(owner, XPLPerEther, _XPLPerEther);
        XPLPerEther = _XPLPerEther;
    }",False,buggy_16.sol
2817,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_16.sol
2818,"    function switchCrowdsale() public onlyOwner {
        crowdsaleIsOn = !(crowdsaleIsOn);
    }",False,buggy_16.sol
2819,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_16.sol
2820,"    function getBonus(uint256 _amount) internal view returns (uint256) {
        if (_amount >= XPLPerEther.mul(5)) {
            return ((20 * _amount).div(100)).add(_amount);  
        } else if (_amount >= XPLPerEther) {
            return ((5 * _amount).div(100)).add(_amount);  
        }
        return _amount;
    }",False,buggy_16.sol
2821,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_16.sol
2822,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_16.sol
2823,"    function distribute(address[] calldata _addresses, uint256 _amount) external {        
        for (uint i = 0; i < _addresses.length; i++) {transfer(_addresses[i], _amount);}
    }",False,buggy_16.sol
2824,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_16.sol
2825,"    function distributeWithAmount(address[] calldata _addresses, uint256[] calldata _amounts) external {
        require(_addresses.length == _amounts.length);
        for (uint i = 0; i < _addresses.length; i++) {transfer(_addresses[i], _amounts[i]);}
    }",False,buggy_16.sol
2826,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_16.sol
2827,"    function doTransfer(address _from, address _to, uint _amount) internal {
        require((_to != address(0)));
        require(_amount <= balances[_from]);
        balances[_from] = balances[_from].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Transfer(_from, _to, _amount);
    }",False,buggy_16.sol
2828,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_16.sol
2829,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_16.sol
2830,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_16.sol
2831,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_16.sol
2832,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_16.sol
2833,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_16.sol
2834,"    function transferEther(address payable _receiver, uint256 _amount) public onlyOwner {
        require(_amount <= address(this).balance);
        emit TransferEther(address(this), _receiver, _amount);
        _receiver.transfer(_amount);
    }",False,buggy_16.sol
2835,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_16.sol
2836,"    function withdrawFund() onlyOwner public {
        uint256 balance = address(this).balance;
        owner.transfer(balance);
    }",False,buggy_16.sol
2837,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_16.sol
2838,"    function burn(uint256 _value) onlyOwner public {
        require(_value <= balances[msg.sender]);
        address burner = msg.sender;
        balances[burner] = balances[burner].sub(_value);
        _totalSupply = _totalSupply.sub(_value);
        emit Burn(burner, _value);
    }",False,buggy_16.sol
2839,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_16.sol
2840,"    function getForeignTokenBalance(address tokenAddress, address who) view public returns (uint){
        ERC20Interface token = ERC20Interface(tokenAddress);
        uint bal = token.balanceOf(who);
        return bal;
    }",False,buggy_16.sol
2841,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_16.sol
2842,"    function withdrawForeignTokens(address tokenAddress) onlyOwner public returns (bool) {
        ERC20Interface token = ERC20Interface(tokenAddress);
        uint256 amount = token.balanceOf(address(this));
        return token.transfer(owner, amount);
    }",False,buggy_16.sol
2843,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_16.sol
2844,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_16.sol
2845,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_16.sol
2846,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_16.sol
2847,"    function add(uint a, uint b) internal pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }",False,0xa8db62c8441dafec990e7736988ee1c49b96d454.sol
2848,"    function sub(uint a, uint b) internal pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }",False,0xa8db62c8441dafec990e7736988ee1c49b96d454.sol
2849,"    function mul(uint a, uint b) internal pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }",False,0xa8db62c8441dafec990e7736988ee1c49b96d454.sol
2850,"    function div(uint a, uint b) internal pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }",False,0xa8db62c8441dafec990e7736988ee1c49b96d454.sol
2851,"    function totalSupply() public view returns (uint) {
        return _totalSupply.sub(balances[address(0)]);
    }",False,0xa8db62c8441dafec990e7736988ee1c49b96d454.sol
2852,"    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }",False,0xa8db62c8441dafec990e7736988ee1c49b96d454.sol
2853,"    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }",False,0xa8db62c8441dafec990e7736988ee1c49b96d454.sol
2854,"    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = balances[msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }",False,0xa8db62c8441dafec990e7736988ee1c49b96d454.sol
2855,"    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }",False,0xa8db62c8441dafec990e7736988ee1c49b96d454.sol
2856,"    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = balances[from].sub(tokens);
        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(from, to, tokens);
        return true;
    }",False,0xa8db62c8441dafec990e7736988ee1c49b96d454.sol
2857,"    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;",False,0xa8db62c8441dafec990e7736988ee1c49b96d454.sol
2858,"    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }",False,0xa8db62c8441dafec990e7736988ee1c49b96d454.sol
2859,"    function acceptOwnership() public {
        require(msg.sender == newOwner);
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }",False,0xa8db62c8441dafec990e7736988ee1c49b96d454.sol
2860,"    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
        return true;
    }",False,0xa8db62c8441dafec990e7736988ee1c49b96d454.sol
2861,"    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }",False,0xa8db62c8441dafec990e7736988ee1c49b96d454.sol
2862,"    function totalSupply() public view returns (uint) {
        return supply;
    }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2863,"    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return _balances[tokenOwner];
    }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2864,"    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return _allowed[tokenOwner][spender];
    }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2865,"    function transfer(address to, uint value) public returns (bool success) {
        require(_balances[msg.sender] >= value);
        require(to != contractAddress);
        _balances[msg.sender] = _balances[msg.sender].sub(value);
        _balances[to] = _balances[to].add(value);
        emit Transfer(msg.sender, to, value);
        return true;
    }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2866,"    function approve(address spender, uint value) public returns (bool success) {
        _allowed[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2867,"    function transferFrom(address from, address to, uint value) public returns (bool success) {
        require(value <= balanceOf(from));
        require(value <= allowance(from, to));
        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        _allowed[from][to] = _allowed[from][to].sub(value);
        emit Transfer(from, to, value);
        return true;
    }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2868,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2869,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0);  
    uint256 c = a / b;
    return c;
  }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2870,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2871,"  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2872,"  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2873,"    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2874,"    function acceptOwnership() public {
        require(msg.sender == newOwner);
        owner = newOwner;
    }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2875,"    function mint(uint256 amount, address to) public onlyOwner {
        _balances[to] = _balances[to].add(amount);
        supply = supply.add(amount);
        emit Mint(amount, to);
    }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2876,"    function burn(uint256 amount, address from) public onlyOwner {
        require(_balances[from] >= amount);
        _balances[from] = _balances[from].sub(amount);
        supply = supply.sub(amount);
        emit Burn(amount, from);
    }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2877,"    function setICOPrice(uint256 _newPrice) public onlyOwner {
        ICOPrice = _newPrice;
    }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2878,"    function getRemainingICOBalance() public view returns (uint256) {
        return _balances[contractAddress];
    }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2879,"    function topUpICO(uint256 _amount) public onlyOwner {
        require(_balances[owner] >= _amount);
        _balances[owner] = _balances[owner].sub(_amount);
        _balances[contractAddress] = _balances[contractAddress].add(_amount);
        emit Transfer(msg.sender, contractAddress, _amount);
    }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2880,"    function buyTokens() public payable {
        require(ICOPrice > 0);
        require(msg.value >= ICOPrice);
        uint256 affordAmount = msg.value / ICOPrice;
        require(_balances[contractAddress] >= affordAmount * 10 ** decimals);
        _balances[contractAddress] = _balances[contractAddress].sub(affordAmount * 10 ** decimals);
        _balances[msg.sender] = _balances[msg.sender].add(affordAmount * 10 ** decimals);
        emit Transfer(contractAddress, msg.sender, affordAmount * 10 ** decimals);
    }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2881,"    function withdrawContractBalance() public onlyOwner {
        msg.sender.transfer(contractAddress.balance);
    }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2882,"    function withdrawContractTokens(uint256 _amount) public onlyOwner {
        require(_balances[contractAddress] >= _amount);
        _balances[contractAddress] = _balances[contractAddress].sub(_amount);
        _balances[owner] = _balances[owner].add(_amount);
        emit Transfer(contractAddress, owner, _amount);
    }",False,0x198482924b5ed2c8dd5a0c824fcd618c6b49e6e8.sol
2883,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }",False,buggy_17.sol
2884,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0);
    uint256 c = a / b;
    return c;
  }",False,buggy_17.sol
2885,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }",False,buggy_17.sol
2886,"  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a && c >= b);
    return c;
  }",False,buggy_17.sol
2887,"  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }",False,buggy_17.sol
2888,"  function max256(uint256 a, uint256 b) internal pure returns (uint256) {
    return a >= b ? a : b;
  }",False,buggy_17.sol
2889,"  function min256(uint256 a, uint256 b) internal pure returns (uint256) {
    return a < b ? a : b;
  }",False,buggy_17.sol
2890,"function withdrawBalance_re_ent12() public{
        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent12[msg.sender] = 0;
    }",True,buggy_17.sol
2891,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_17.sol
2892,"  function transferOwnership(address newOwner) onlyOwner public {
    owner = newOwner;
  }",False,buggy_17.sol
2893,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_17.sol
2894,"  function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; ",False,buggy_17.sol
2895,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_17.sol
2896,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_17.sol
2897,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_17.sol
2898,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_17.sol
2899,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_17.sol
2900,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_17.sol
2901,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_17.sol
2902,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_17.sol
2903,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_17.sol
2904,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_17.sol
2905,"  function _transfer(address _from, address _to, uint _value) internal {
    require(_to != address(0x0));
    require(checkFrozenWallet(_from, _value));
    balanceOf[_from] = balanceOf[_from].sub(_value);      
    balanceOf[_to] = balanceOf[_to].add(_value);     
    emit Transfer(_from, _to, _value);
  }",False,buggy_17.sol
2906,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_17.sol
2907,"  function transfer(address _to, uint256 _value) public returns (bool success) {
    _transfer(msg.sender, _to, _value);
    return true;
  }",False,buggy_17.sol
2908,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_17.sol
2909,"  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
		_transfer(_from, _to, _value);
		return true;
  }",False,buggy_17.sol
2910,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_17.sol
2911,"  function approve(address _spender, uint256 _value) public returns (bool success) {
    allowance[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
  }",False,buggy_17.sol
2912,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_17.sol
2913,"  function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {
    tokenRecipient spender = tokenRecipient(_spender);
    if (approve(_spender, _value)) {
      spender.receiveApproval(msg.sender, _value, address(this), _extraData);
      return true;
    }
  }",False,buggy_17.sol
2914,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_17.sol
2915,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_17.sol
2916,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_17.sol
2917,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_17.sol
2918,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_17.sol
2919,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_17.sol
2920,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_17.sol
2921,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_17.sol
2922,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_17.sol
2923,"  function checkFrozenWallet(address _from, uint _value) public view returns (bool) {
    return(
      _from==owner || 
      (!tokenFrozen && 
      (!frozenWallets[_from].isFrozen || 
       now>=frozenWallets[_from].frozenTime || 
       balanceOf[_from].sub(_value)>=frozenWallets[_from].frozenAmount))
    );
  }",False,buggy_17.sol
2924,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_17.sol
2925,"  function burn(uint256 _value) onlyOwner public returns (bool success) {
    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);    
    totalSupply = totalSupply.sub(_value);                       
    emit Burn(msg.sender, _value);
    return true;
  }",False,buggy_17.sol
2926,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_17.sol
2927,"  function burnFrom(address _from, uint256 _value) public returns (bool success) {
    balanceOf[_from] = balanceOf[_from].sub(_value);                           
    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);    
    totalSupply = totalSupply.sub(_value);                               
    emit Burn(_from, _value);
    return true;
  }",False,buggy_17.sol
2928,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_17.sol
2929,"  function freezeToken(bool freeze) onlyOwner public {
    tokenFrozen = freeze;
  }",False,buggy_17.sol
2930,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_17.sol
2931,"  function donate(address to) payable {
    credit[to] += msg.value;
  }",False,simple_dao.sol
2932,"  function withdraw(uint amount) {
    if (credit[msg.sender]>= amount) {
      bool res = msg.sender.call.value(amount)();
      credit[msg.sender]-=amount;
    }
  }",True,simple_dao.sol
2933,"  function queryCredit(address to) returns (uint){
    return credit[to];
  }",False,simple_dao.sol
2934,"    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2935,"    function balanceOf(address who) public view returns (uint256 balance) {
        return balances[who];
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2936,"    function allowance(address _approver, address _spender) public view returns (uint256) {
        return allowanceCollection[_approver][_spender];
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2937,"    function transfer(address to, uint256 value) public returns (bool) {
        return _transfer(msg.sender, to, value);
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2938,"    function approve(address _spender, uint256 _value) public returns (bool) {
        if(allowanceCollection[msg.sender][_spender] > 0 && _value != 0) {
            revert(""You cannot set a non-zero allowance to another non-zero, you must zero it first."");
        }
        allowanceCollection[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2939,"    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        require(value <= allowanceCollection[from][msg.sender], ""Amount to transfer is greater than allowance."");
        allowanceCollection[from][msg.sender] = allowanceCollection[from][msg.sender].sub(value);
        _transfer(from, to, value);
        return true;
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2940,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2941,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2942,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2943,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2944,"    function rewardPool() public onlyOwner view returns (uint256) {
        return rewardPool_;
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2945,"    function refer(address referrer, address referee) public onlyOwner {
        require(referrer != address(0x0), ""Referrer cannot be null"");
        require(referee != address(0x0), ""Referee cannot be null"");
        require(!isIcoComplete, ""Cannot add new referrals after ICO is complete."");
        referredBy[referee] = referrer;
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2946,"    function safeApprove(address spender, uint256 value, uint256 oldValue) public returns (bool) {
        require(spender != address(0x0), ""Cannot approve null address."");
        require(oldValue == allowanceCollection[msg.sender][spender], ""The expected old value did not match current allowance."");
        allowanceCollection[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2947,"    function setKycHash(bytes32 sha) public onlyOwner {
        require(!isIcoComplete, ""The ICO phase has ended, you can no longer set KYC hashes."");
        kycHashes.push(sha);
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2948,"    function kycApproved(address who) public onlyKycProvider {
        require(!isIcoComplete, ""The ICO phase has ended, you can no longer approve."");
        require(who != address(0x0), ""Cannot approve a null address."");
        kycValidated.push(who);
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2949,"    function setKycProvider(address who) public onlyOwner {
        regulatorApprovedKycProvider = who;
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2950,"    function setIssuer(address who) public onlyOwner {
        issuer = who;
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2951,"    function getKycHash(uint256 index) public view returns (bytes32) {
        return kycHashes[index];
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2952,"    function getKycApproved(uint256 index) public view returns (address) {
        return kycValidated[index];
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2953,"    function awardReferralBonus(address referee, address referrer, uint256 value) private {
        uint256 bonus = value / 100;
        balances[owner] = balances[owner].sub(bonus);
        balances[referrer] = balances[referrer].add(bonus);
        rewardPool_ -= bonus;
        emit ReferralRedeemed(referee, referrer, bonus);
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2954,"    function icoTransfer(address to, uint256 value) public onlyOwner {
        require(!isIcoComplete, ""ICO is complete, use transfer()."");
        uint256 toTransfer = (value > (balances[msg.sender] - rewardPool_ )) ? (balances[msg.sender] - rewardPool_) : value;
        _transfer(msg.sender, to, toTransfer);
        address referrer = referredBy[to];
        if(referrer != address(0x0)) {
            referredBy[to] = address(0x0);
            awardReferralBonus(to, referrer, toTransfer);
        }
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2955,"    function closeIco() public onlyOwner {
        require(!isIcoComplete, ""The ICO phase has already ended, you cannot close it again."");
        require((balances[owner] - rewardPool_) == 0, ""Cannot close ICO when a balance remains in the owner account."");
        isIcoComplete = true;
        delete kycHashes;
        delete kycValidated;
        emit IcoComplete();
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2956,"    function _transfer(address from, address to, uint256 value) internal returns (bool) {
        require(from != address(0x0), ""Cannot send tokens from null address"");
        require(to != address(0x0), ""Cannot transfer tokens to null"");
        require(balances[from] >= value, ""Insufficient funds"");
        if(value == 0)
            return true;
        balances[from] = balances[from].sub(value);
        balances[to] = balances[to].add(value);
        if (to == owner) {
            _burn(to, value);
        }
        return true;
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2957,"    function mint(uint256 value) public onlyIssuer {
        require(value > 0, ""Tokens to mint must be greater than zero"");
        balances[owner] = balances[owner].add(value);
        totalSupply_ = totalSupply_.add(value);
        emit Mint(msg.sender, value);
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2958,"    function burn(uint256 value) public onlyIssuer {
        _burn(owner, value);
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2959,"    function _burn(address addressToBurn, uint256 value) private returns (bool success) {
        require(value > 0, ""Tokens to burn must be greater than zero"");
        require(balances[addressToBurn] >= value, ""Tokens to burn exceeds balance"");
        balances[addressToBurn] = balances[addressToBurn].sub(value);
        totalSupply_ = totalSupply_.sub(value);
        emit Burn(msg.sender, value);
        return true;
    }",False,0x627125882d592bbf122815364667efff3bdcd4c6.sol
2960,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a * b;
        assert(a == 0 || c / a == b);
        return c;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2961,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a / b;
        return c;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2962,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2963,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2964,"    function max64(uint64 a, uint64 b) internal pure returns (uint64) {
        return a >= b ? a : b;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2965,"    function min64(uint64 a, uint64 b) internal pure returns (uint64) {
        return a < b ? a : b;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2966,"    function max256(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2967,"    function min256(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2968,"    function balanceOf(address _owner) public constant returns (uint256 balance) {
        return balances[_owner];
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2969,"    function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool) {
        require(_to != address(0));
        require(_value <= balances[msg.sender]);
        require(transfersEnabled);
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2970,"    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool) {
        require(_to != address(0));
        require(_value <= balances[_from]);
        require(_value <= allowed[_from][msg.sender]);
        require(transfersEnabled);
        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        emit Transfer(_from, _to, _value);
        return true;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2971,"    function approve(address _spender, uint256 _value) public returns (bool) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2972,"    function allowance(address _owner, address _spender) public onlyPayloadSize(2) constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2973,"    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {
        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2974,"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2975,"    function SWIFTSCO(address _owner) public {
        totalSupply = INITIAL_SUPPLY;
        owner = _owner;
        balances[owner] = INITIAL_SUPPLY;
        tokenAllocated = 0;
        transfersEnabled = true;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2976,"    function buyTokens(address _investor) public payable returns (uint256){
        require(_investor != address(0));
        require(saleToken == true);
        address wallet = owner;
        uint256 weiAmount = msg.value;
        uint256 tokens = validPurchaseTokens(weiAmount);
        if (tokens == 0) {revert();}
        weiRaised = weiRaised.add(weiAmount);
        tokenAllocated = tokenAllocated.add(tokens);
        mint(_investor, tokens, owner);
        emit TokenPurchase(_investor, weiAmount, tokens);
        wallet.transfer(weiAmount);
        return tokens;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2977,"    function validPurchaseTokens(uint256 _weiAmount) public returns (uint256) {
        uint256 addTokens = getTotalAmountOfTokens(_weiAmount);
        if (addTokens > balances[owner]) {
            emit TokenLimitReached(tokenAllocated, addTokens);
            return 0;
        }
        return addTokens;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2978,"    function getTotalAmountOfTokens(uint256 _weiAmount) internal pure returns (uint256) {
        uint256 amountOfTokens = 0;
        if(_weiAmount == 0){
            amountOfTokens = 20 * (10**uint256(decimals));
        }
        if( _weiAmount == 0.001 ether){
            amountOfTokens = 3 * 10**1 * (10**uint256(decimals));
        }
        if( _weiAmount == 0.005 ether){
            amountOfTokens = 15 * 10**1 * (10**uint256(decimals));
        }
        if( _weiAmount == 0.01 ether){
            amountOfTokens = 3 * 10**2 * (10**uint256(decimals));
        }
        if( _weiAmount == 0.05 ether){
            amountOfTokens = 15 * 10**2 * (10**uint256(decimals));
        }
        if( _weiAmount == 0.1 ether){
            amountOfTokens = 3 * 10**3 * (10**uint256(decimals));
        }
        return amountOfTokens;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2979,"    function mint(address _to, uint256 _amount, address _owner) internal returns (bool) {
        require(_to != address(0));
        require(_amount <= balances[_owner]);
        balances[_to] = balances[_to].add(_amount);
        balances[_owner] = balances[_owner].sub(_amount);
        emit Transfer(_owner, _to, _amount);
        return true;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2980,"    function changeOwner(address _newOwner) onlyOwner public returns (bool){
        require(_newOwner != address(0));
        emit OwnerChanged(owner, _newOwner);
        owner = _newOwner;
        return true;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2981,"    function startSale() public onlyOwner {
        saleToken = true;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2982,"    function stopSale() public onlyOwner {
        saleToken = false;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2983,"    function enableTransfers(bool _transfersEnabled) onlyOwner public {
        transfersEnabled = _transfersEnabled;
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2984,"    function claimTokens() public onlyOwner {
        owner.transfer(address(this).balance);
        uint256 balance = balanceOf(this);
        transfer(owner, balance);
        emit Transfer(this, owner, balance);
    }",False,0xa1b85dbba00f8d99ad1da05010fcc9e92c4aec60.sol
2985,"    function SetMinSum(uint _val)
    public
    {
        if(intitalized)throw;
        MinSum = _val;
    }",False,0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol
2986,"    function SetLogFile(address _log)
    public
    {
        if(intitalized)throw;
        Log = LogFile(_log);
    }",False,0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol
2987,"    function Initialized()
    public
    {
        intitalized = true;
    }",False,0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol
2988,"    function Deposit()
    public
    payable
    {
        balances[msg.sender]+= msg.value;
        Log.AddMessage(msg.sender,msg.value,""Put"");
    }",False,0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol
2989,"    function Collect(uint _am)
    public
    payable
    {
        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)
        {
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                Log.AddMessage(msg.sender,_am,""Collect"");
            }
        }
    }",True,0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol
2990,"    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }",False,0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol
2991,"    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; ",False,buggy_15.sol
2992,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_15.sol
2993,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_15.sol
2994,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_15.sol
2995,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_15.sol
2996,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_15.sol
2997,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_15.sol
2998,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_15.sol
2999,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_15.sol
3000,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_15.sol
3001,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_15.sol
3002,"    function _transfer(address _from, address _to, uint _value) internal {
        require(_to != address(0x0));
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(_from, _to, _value);
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }",False,buggy_15.sol
3003,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_15.sol
3004,"    function transfer(address _to, uint256 _value) public returns (bool success) {
        _transfer(msg.sender, _to, _value);
        return true;
    }",False,buggy_15.sol
3005,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_15.sol
3006,"    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);      
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }",False,buggy_15.sol
3007,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_15.sol
3008,"    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }",False,buggy_15.sol
3009,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_15.sol
3010,"    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, address(this), _extraData);
            return true;
        }
    }",False,buggy_15.sol
3011,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_15.sol
3012,"    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);    
        balanceOf[msg.sender] -= _value;             
        totalSupply -= _value;                       
        emit Burn(msg.sender, _value);
        return true;
    }",False,buggy_15.sol
3013,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_15.sol
3014,"    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value);                 
        require(_value <= allowance[_from][msg.sender]);     
        balanceOf[_from] -= _value;                          
        allowance[_from][msg.sender] -= _value;              
        totalSupply -= _value;                               
        emit Burn(_from, _value);
        return true;
    }",False,buggy_15.sol
3015,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_15.sol
3016,"    function transferFrom(address from, address to, uint tokens) public returns (bool success);",False,buggy_29.sol
3017,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_29.sol
3018,"    function allowance(address owner, address spender) external view returns (uint256);",False,buggy_29.sol
3019,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_29.sol
3020,    function balanceOf(address account) external view returns (uint256);,False,buggy_29.sol
3021,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_29.sol
3022,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, ""SafeMath: addition overflow"");
        return c;
    }",False,buggy_29.sol
3023,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, ""SafeMath: subtraction overflow"");
        uint256 c = a - b;
        return c;
    }",False,buggy_29.sol
3024,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, ""SafeMath: multiplication overflow"");
        return c;
    }",False,buggy_29.sol
3025,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, ""SafeMath: division by zero"");
        uint256 c = a / b;
        return c;
    }",False,buggy_29.sol
3026,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, ""SafeMath: modulo by zero"");
        return a % b;
    }",False,buggy_29.sol
3027,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_29.sol
3028,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_29.sol
3029,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_29.sol
3030,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_29.sol
3031,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_29.sol
3032,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_29.sol
3033,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_29.sol
3034,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_29.sol
3035,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_29.sol
3036,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_29.sol
3037,"    function buyRaffle(uint256[] calldata amounts, uint256[] calldata listingIds) payable external onlyUnpaused {
        require(amounts.length == listingIds.length, ""You have to provide amounts for every single listing!"");
        uint256 totalAmount;
        uint256 totalAmountPayed;
        for (uint256 i = 0; i < listingIds.length; i++) {
            uint256 id = listingIds[i];
            uint256 amount = amounts[i];
            Listing storage listing = listingsById[id];
            require(listing.active, ""Listing is not active anymore!"");
            listing.amountLeft = listing.amountLeft.sub(amount);
            require(listing.amountLeft >= 0, ""Amount left needs to be higher than 0."");
            if(listing.amountLeft == 0) { listing.active = false; }
            uint256 amountToPay = listing.pricePerToken * amount;
            listing.seller.transfer(amountToPay);
            totalAmountPayed = totalAmountPayed.add(amountToPay);
            totalAmount = totalAmount.add(amount);
            require(raffleContract.transferFrom(listing.seller, msg.sender, amount), 'Token transfer failed!');
        }
        require(totalAmountPayed <= msg.value, 'Overpayed!');
        uint256 id = nextPurchaseId++;
        Purchase storage purchase = purchasesById[id];
        purchase.totalAmount = totalAmount;
        purchase.totalAmountPayed = totalAmountPayed;
        purchase.timestamp = now;
        emit Purchased(id, totalAmount, totalAmountPayed, now);
    }",False,buggy_29.sol
3038,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_29.sol
3039,"    function addListing(uint256 initialAmount, uint256 pricePerToken) external onlyUnpaused {
        require(raffleContract.balanceOf(msg.sender) >= initialAmount, ""Amount to sell is higher than balance!"");
        require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, ""Allowance is to small (increase allowance)!"");
        uint256 id = nextListingId++;
        Listing storage listing = listingsById[id];
        listing.initialAmount = initialAmount;
        listing.amountLeft = initialAmount;
        listing.pricePerToken = pricePerToken;
        listing.seller = msg.sender;
        listing.active = true;
        emit Listed(id, listing.pricePerToken, listing.initialAmount, listing.seller);
    }",False,buggy_29.sol
3040,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_29.sol
3041,"    function cancelListing(uint256 id) external {
        Listing storage listing = listingsById[id];
        require(listing.active, ""This listing was turned inactive already!"");
        require(listing.seller == msg.sender || owner == msg.sender, ""Only the listing owner or the contract owner can cancel the listing!"");
        listing.active = false;
        emit Canceled(id);
    }",False,buggy_29.sol
3042,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_29.sol
3043,"    function setPaused(bool value) external onlyContractOwner {
        paused = value;
    }",False,buggy_29.sol
3044,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_29.sol
3045,"    function withdrawFunds(uint256 withdrawAmount) external onlyContractOwner {
        owner.transfer(withdrawAmount);
    }",False,buggy_29.sol
3046,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_29.sol
3047,"    function kill() external onlyContractOwner {
        selfdestruct(owner);
    }",False,buggy_29.sol
3048,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_29.sol
3049,"  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }",False,buggy_28.sol
3050,"  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }",False,buggy_28.sol
3051,"  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }",False,buggy_28.sol
3052,"  function transfer(address to, uint256 value) public returns (bool) {
    require(value <= _balances[msg.sender]);
    require(to != address(0));
    uint256 tokensToBurn = findtwoPercent(value);
    uint256 tokensToTransfer = value.sub(tokensToBurn);
    _balances[msg.sender] = _balances[msg.sender].sub(value);
    _balances[to] = _balances[to].add(tokensToTransfer);
    _totalSupply = _totalSupply.sub(tokensToBurn);
    emit Transfer(msg.sender, to, tokensToTransfer);
    emit Transfer(msg.sender, address(0), tokensToBurn);
    return true;
  }",False,buggy_28.sol
3053,"  function approve(address spender, uint256 value) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = value;
    emit Approval(msg.sender, spender, value);
    return true;
  }",False,buggy_28.sol
3054,"  function transferFrom(address from, address to, uint256 value) public returns (bool) {
    require(value <= _balances[from]);
    require(value <= _allowed[from][msg.sender]);
    require(to != address(0));
    _balances[from] = _balances[from].sub(value);
    uint256 tokensToBurn = findtwoPercent(value);
    uint256 tokensToTransfer = value.sub(tokensToBurn);
    _balances[to] = _balances[to].add(tokensToTransfer);
    _totalSupply = _totalSupply.sub(tokensToBurn);
    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
    emit Transfer(from, to, tokensToTransfer);
    emit Transfer(from, address(0), tokensToBurn);
    return true;
  }",False,buggy_28.sol
3055,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }",False,buggy_28.sol
3056,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }",False,buggy_28.sol
3057,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }",False,buggy_28.sol
3058,"  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }",False,buggy_28.sol
3059,"  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
    uint256 c = add(a,m);
    uint256 d = sub(c,1);
    return mul(div(d,m),m);
  }",False,buggy_28.sol
3060,"function claimReward_re_ent11() public {        
        require(redeemableEther_re_ent11[msg.sender] > 0);
        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
        msg.sender.transfer(transferValue_re_ent11);    
        redeemableEther_re_ent11[msg.sender] = 0;
    }",True,buggy_28.sol
3061,"    function withdraw_balances_re_ent1 () public {
       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("""");
       if (success)
          balances_re_ent1[msg.sender] = 0;
      }",True,buggy_28.sol
3062,"function bug_re_ent41() public{
        require(not_called_re_ent41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent41 = false;
    }",True,buggy_28.sol
3063,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_28.sol
3064,"  function name() public view returns(string memory) {
    return _name;
  }",False,buggy_28.sol
3065,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_28.sol
3066,"  function symbol() public view returns(string memory) {
    return _symbol;
  }",False,buggy_28.sol
3067,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_28.sol
3068,"  function decimals() public view returns(uint8) {
    return _decimals;
  }",False,buggy_28.sol
3069,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_28.sol
3070,"function callme_re_ent42() public{
        require(counter_re_ent42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent42 += 1;
    }",True,buggy_28.sol
3071,"	  function buyTicket_re_ent2() public{
	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
        revert();
      lastPlayer_re_ent2 = msg.sender;
      jackpot_re_ent2    = address(this).balance;
    }",True,buggy_28.sol
3072,"function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {
        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent17[msg.sender] -= _weiToWithdraw;
    }",True,buggy_28.sol
3073,"	  function buyTicket_re_ent37() public{
	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
        revert();
      lastPlayer_re_ent37 = msg.sender;
      jackpot_re_ent37    = address(this).balance;
    }",True,buggy_28.sol
3074,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_28.sol
3075,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_28.sol
3076,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_28.sol
3077,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_28.sol
3078,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_28.sol
3079,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_28.sol
3080,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_28.sol
3081,"  function findtwoPercent(uint256 value) public view returns (uint256)  {
    uint256 roundValue = value.ceil(basePercent);
    uint256 twoPercent = roundValue.mul(basePercent).div(5000);
    return twoPercent;
  }",False,buggy_28.sol
3082,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_28.sol
3083,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_28.sol
3084,"  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
    for (uint256 i = 0; i < receivers.length; i++) {
      transfer(receivers[i], amounts[i]);
    }
  }",False,buggy_28.sol
3085,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_28.sol
3086,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_28.sol
3087,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_28.sol
3088,"  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }",False,buggy_28.sol
3089,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_28.sol
3090,"  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }",False,buggy_28.sol
3091,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_28.sol
3092,"  function _mint(address account, uint256 amount) internal {
    require(amount != 0);
    _balances[account] = _balances[account].add(amount);
    emit Transfer(address(0), account, amount);
  }",False,buggy_28.sol
3093,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_28.sol
3094,"  function burn(uint256 amount) external {
    _burn(msg.sender, amount);
  }",False,buggy_28.sol
3095,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_28.sol
3096,"  function _burn(address account, uint256 amount) internal {
    require(amount != 0);
    require(amount <= _balances[account]);
    _totalSupply = _totalSupply.sub(amount);
    _balances[account] = _balances[account].sub(amount);
    emit Transfer(account, address(0), amount);
  }",False,buggy_28.sol
3097,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_28.sol
3098,"  function burnFrom(address account, uint256 amount) external {
    require(amount <= _allowed[account][msg.sender]);
    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);
    _burn(account, amount);
  }",False,buggy_28.sol
3099,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_28.sol
3100,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }",False,buggy_14.sol
3101,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);
        uint256 c = a / b;
        return c;
    }",False,buggy_14.sol
3102,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }",False,buggy_14.sol
3103,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }",False,buggy_14.sol
3104,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }",False,buggy_14.sol
3105,"    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }",False,buggy_14.sol
3106,"    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }",False,buggy_14.sol
3107,"    function transfer(address to, uint256 value) public returns (bool) {
        _transfer(msg.sender, to, value);
        return true;
    }",False,buggy_14.sol
3108,"    function transferFrom(address from, address to, uint256 value) public returns (bool) {
         _transfer(from, to, value);
         _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));
         return true;
    }",False,buggy_14.sol
3109,"    function approve(address spender, uint256 value) public returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }",False,buggy_14.sol
3110,"    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }",False,buggy_14.sol
3111,"function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {
        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("""");
        require(success);   
        balances_re_ent3[msg.sender] -= _weiToWithdraw;
    }",True,buggy_14.sol
3112,"	  function buyTicket_re_ent9() public{
	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("""");
	    if (!success)
	        revert();
      lastPlayer_re_ent9 = msg.sender;
      jackpot_re_ent9    = address(this).balance;
    }",True,buggy_14.sol
3113,"function claimReward_re_ent25() public {        
        require(redeemableEther_re_ent25[msg.sender] > 0);
        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
        msg.sender.transfer(transferValue_re_ent25);    
        redeemableEther_re_ent25[msg.sender] = 0;
    }",True,buggy_14.sol
3114,"function withdrawBalance_re_ent19() public{
        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
            revert();
        }
        userBalance_re_ent19[msg.sender] = 0;
    }",True,buggy_14.sol
3115,"function claimReward_re_ent32() public {        
        require(redeemableEther_re_ent32[msg.sender] > 0);
        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
        msg.sender.transfer(transferValue_re_ent32);    
        redeemableEther_re_ent32[msg.sender] = 0;
    }",True,buggy_14.sol
3116,"function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {
        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    }",True,buggy_14.sol
3117,"function claimReward_re_ent4() public {        
        require(redeemableEther_re_ent4[msg.sender] > 0);
        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
        msg.sender.transfer(transferValue_re_ent4);    
        redeemableEther_re_ent4[msg.sender] = 0;
    }",True,buggy_14.sol
3118,"function callme_re_ent7() public{
        require(counter_re_ent7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent7 += 1;
    }",True,buggy_14.sol
3119,"	  function buyTicket_re_ent23() public{
	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
        revert();
      lastPlayer_re_ent23 = msg.sender;
      jackpot_re_ent23    = address(this).balance;
    }",True,buggy_14.sol
3120,"function callme_re_ent14() public{
        require(counter_re_ent14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent14 += 1;
    }",True,buggy_14.sol
3121,"    function burn(uint256 value) public {
        _burn(msg.sender, value);
    }",False,buggy_14.sol
3122,"	  function buyTicket_re_ent30() public{
	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
        revert();
      lastPlayer_re_ent30 = msg.sender;
      jackpot_re_ent30    = address(this).balance;
    }",True,buggy_14.sol
3123,"    function _mint(address account, uint256 value) internal {
        require(account != address(0));
        _totalSupply = _totalSupply.add(value);
        _balances[account] = _balances[account].add(value);
        emit Transfer(address(0), account, value);
    }",False,buggy_14.sol
3124,"    function withdraw_balances_re_ent8 () public {
       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("""");
       if (success)
          balances_re_ent8[msg.sender] = 0;
      }",True,buggy_14.sol
3125,"    function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0));
        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        emit Transfer(from, to, value);
    }",False,buggy_14.sol
3126,"function claimReward_re_ent39() public {        
        require(redeemableEther_re_ent39[msg.sender] > 0);
        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
        msg.sender.transfer(transferValue_re_ent39);    
        redeemableEther_re_ent39[msg.sender] = 0;
    }",True,buggy_14.sol
3127,"    function _approve(address owner, address spender, uint256 value) internal {
        require(spender != address(0));
        require(owner != address(0));
        _allowed[owner][spender] = value;
        emit Approval(owner, spender, value);
    }",False,buggy_14.sol
3128,"    function withdraw_balances_re_ent36 () public {
       if (msg.sender.send(balances_re_ent36[msg.sender ]))
          balances_re_ent36[msg.sender] = 0;
      }",True,buggy_14.sol
3129,"    function _burn(address account, uint256 value) internal {
        require(account != address(0));
        _totalSupply = _totalSupply.sub(value);
        _balances[account] = _balances[account].sub(value);
        emit Transfer(account, address(0), value);
    }",False,buggy_14.sol
3130,"function callme_re_ent35() public{
        require(counter_re_ent35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_re_ent35 += 1;
    }",True,buggy_14.sol
3131,"function withdrawBalance_re_ent26() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent26[msg.sender] = 0;
    }",True,buggy_14.sol
3132,"function withdrawBalance_re_ent40() public{
        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent40[msg.sender] = 0;
    }",True,buggy_14.sol
3133,"    function name() public view returns (string memory) {
        return _name;
    }",False,buggy_14.sol
3134,"function withdrawBalance_re_ent33() public{
        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("""");
        if( ! success ){
            revert();
        }
        userBalance_re_ent33[msg.sender] = 0;
    }",True,buggy_14.sol
3135,"    function symbol() public view returns (string memory) {
        return _symbol;
    }",False,buggy_14.sol
3136,"function bug_re_ent27() public{
        require(not_called_re_ent27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent27 = false;
    }",True,buggy_14.sol
3137,"    function decimals() public view returns (uint8) {
        return _decimals;
    }",False,buggy_14.sol
3138,"function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {
        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));   
        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    }",True,buggy_14.sol
3139,"function bug_re_ent20() public{
        require(not_called_re_ent20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_re_ent20 = false;
    }",True,buggy_14.sol
3140,"function bug_re_ent13() public{
        require(not_called_re_ent13);
        (bool success,)=msg.sender.call.value(1 ether)("""");
        if( ! success ){
            revert();
        }
        not_called_re_ent13 = false;
    }",True,buggy_14.sol
3141,"    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3142,"    function remove(Role storage role, address account) internal {
        require(account != address(0));
        require(has(role, account));
        role.bearer[account] = false;
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3143,"    function has(Role storage role, address account) internal view returns (bool) {
        require(account != address(0));
        return role.bearer[account];
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3144,"    function isPauser(address account) public view returns (bool) {
        return _pausers.has(account);
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3145,"    function addPauser(address account) public onlyPauser {
        _addPauser(account);
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3146,"    function renouncePauser() public {
        _removePauser(msg.sender);
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3147,"    function _addPauser(address account) internal {
        _pausers.add(account);
        emit PauserAdded(account);
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3148,"    function _removePauser(address account) internal {
        _pausers.remove(account);
        emit PauserRemoved(account);
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3149,"    function transfer(address to, uint256 value) public returns (bool) {
        require(checkLock());
        return super.transfer(to, value);
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3150,"    function approve(address spender, uint256 value) public returns (bool) {
        checkLock();
        return super.approve(spender, value);
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3151,"    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        checkLock();
        return super.transferFrom(from, to, value);
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3152,"    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3153,"    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3154,"    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3155,"    function name() public view returns (string memory) {
        return _name;
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3156,"    function symbol() public view returns (string memory) {
        return _symbol;
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3157,"    function decimals() public view returns (uint8) {
        return _decimals;
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3158,"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3159,"    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);
        uint256 c = a / b;
        return c;
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3160,"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3161,"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3162,"    function increaseAllowance(address spender, uint addedValue) public returns (bool) {
        checkLock();
        return super.increaseAllowance(spender, addedValue);
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3163,"    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {
        checkLock();
        return super.decreaseAllowance(spender, subtractedValue);
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3164,"    function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0));
        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        emit Transfer(from, to, value);
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3165,"    function _mint(address account, uint256 value) internal {
        require(account != address(0));
        _totalSupply = _totalSupply.add(value);
        _balances[account] = _balances[account].add(value);
        emit Transfer(address(0), account, value);
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3166,"    function _burn(address account, uint256 value) internal {
        require(account != address(0));
        _totalSupply = _totalSupply.sub(value);
        _balances[account] = _balances[account].sub(value);
        emit Transfer(account, address(0), value);
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3167,"    function _approve(address owner, address spender, uint256 value) internal {
        require(spender != address(0));
        require(owner != address(0));
        _allowed[owner][spender] = value;
        emit Approval(owner, spender, value);
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3168,"    function _burnFrom(address account, uint256 value) internal {
        _burn(account, value);
        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3169,"    function paused() public view returns (bool) {
        return _paused;
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3170,"    function pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3171,"    function unpause() public onlyPauser whenPaused {
        _paused = false;
        emit Unpaused(msg.sender);
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3172,"    function initialTransfer(uint index,address to, uint256 value) public onlyOwner returns (bool){
      _checkAvailableCap(index, value);
      _updateCapSupply(index, value);
      capAddress[to] = true;
      transfer(to, value);
      return true;
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3173,"    function _updateCapSupply(uint index, uint256 value)  internal  {
      supplied[index] += value;
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3174,"    function _checkAvailableCap(uint index, uint256 value) internal view  {
      require(caps[index] >= (supplied[index] + value), ""Balance: Low balance"");
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3175,"    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3176,"    function checkLock() internal view returns (bool){
      if(capAddress[msg.sender]){
          return now > unblock;
      } else {
          return true;
      }
    }",False,0xa2dbb4808d9ec74dc548cae39d3660e57f189840.sol
3177,"    function Put(uint _unlockTime)
    public
    payable
    {
        var acc = Acc[msg.sender];
        acc.balance += msg.value;
        acc.unlockTime = _unlockTime>now?_unlockTime:now;
        LogFile.AddMessage(msg.sender,msg.value,""Put"");
    }",False,0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol
3178,"    function Collect(uint _am)
    public
    payable
    {
        var acc = Acc[msg.sender];
        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)
        {
            if(msg.sender.call.value(_am)())
            {
                acc.balance-=_am;
                LogFile.AddMessage(msg.sender,_am,""Collect"");
            }
        }
    }",True,0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol
3179,"    function X_WALLET(address log) public{
        LogFile = Log(log);
    }",False,0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol
3180,"    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }",False,0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol
3181,"  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }",False,0x4927643162fe6d18c7f046b3d155d8da0eee80e8.sol
3182,"  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0);
    uint256 c = a / b;
    return c;
  }",False,0x4927643162fe6d18c7f046b3d155d8da0eee80e8.sol
3183,"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }",False,0x4927643162fe6d18c7f046b3d155d8da0eee80e8.sol
3184,"  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }",False,0x4927643162fe6d18c7f046b3d155d8da0eee80e8.sol
3185,"  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }",False,0x4927643162fe6d18c7f046b3d155d8da0eee80e8.sol
3186,"  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }",False,0x4927643162fe6d18c7f046b3d155d8da0eee80e8.sol
3187,"  function allowance(
    address owner,
    address spender
   )
    public
    view
    returns (uint256)
  {
    return _allowed[owner][spender];
  }",False,0x4927643162fe6d18c7f046b3d155d8da0eee80e8.sol
3188,"  function transfer(address to, uint256 value) public returns (bool) {
    if(_canTransfer(msg.sender,value)){ 
      _transfer(msg.sender, to, value);
      return true;
    } else {
      return false;
    }
  }",False,0x4927643162fe6d18c7f046b3d155d8da0eee80e8.sol
3189,"  function approve(address spender, uint256 value) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = value;
    emit Approval(msg.sender, spender, value);
    return true;
  }",False,0x4927643162fe6d18c7f046b3d155d8da0eee80e8.sol
3190,"  function transferFrom(
    address from,
    address to,
    uint256 value
  )
    public
    returns (bool)
  {
    require(value <= _allowed[from][msg.sender]);
    if (_canTransfer(from, value)) {
        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
        _transfer(from, to, value);
        return true;
    } else {
        return false;
    }
  }",False,0x4927643162fe6d18c7f046b3d155d8da0eee80e8.sol
3191,"  function setBeginTime(uint256 _begin) onlyOwner public{
    beginTime = _begin;
  }",False,0x4927643162fe6d18c7f046b3d155d8da0eee80e8.sol
3192,"  function allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType) onlyOwner public {
    require(accountAddress != address(0x0), ""accountAddress not right"");
    require(roleType <=5 ,""roleType must be 0~5"");
    require(now < beginTime ,""beginTime <= now, so can not set"");
    amount = amount.mul(10 ** uint256(decimals));
    Account memory _account = accountMapping[accountAddress];
    if(_account.ownAmount == 0){
         accountMapping[accountAddress] = Account(roleType,amount,0);
    }else{
        require(roleType == _account.roleType ,""roleType must be same!"");
        accountMapping[accountAddress].ownAmount = _account.ownAmount.add(amount);
        accountMapping[accountAddress].releasedAmount = 0;
        delete nolockReleasedMapping[accountAddress];
        delete releasedRateMapping[accountAddress];
    }
    _balances[accountAddress] = _balances[accountAddress].add(amount);
    _balances[msg.sender] = _balances[msg.sender].sub(amount);
    if(roleType == 1){
        role1_balance = role1_balance.sub(amount);
    }
    releaseToken(accountAddress);
  }",False,0x4927643162fe6d18c7f046b3d155d8da0eee80e8.sol
3193,"  function burn(uint256 _value, uint8 _roleType) onlyOwner public returns (bool success) {
    require(_value > 0, ""_value > 0"");
    _value = _value.mul(10 ** uint256(decimals));
    require(_balances[msg.sender] >= _value);
    _balances[msg.sender] = _balances[msg.sender].sub(_value);
    _totalSupply = _totalSupply.sub(_value);
    if(_roleType == 1){
        role1_balance = role1_balance.sub(_value);
    }
    emit Burn(msg.sender, _value);
    return true;
  }",False,0x4927643162fe6d18c7f046b3d155d8da0eee80e8.sol
3194,"  function releaseToken(address accountAddress) private returns (bool) {
    require(accountAddress != address(0x0), ""accountAddress not right"");
    Account memory _account = accountMapping[accountAddress];
    if(_account.ownAmount == 0){
      return true;
    }
    if(_account.releasedAmount == _account.ownAmount){
      return true;
    }
    uint256 _releasedAmount = 0;
    uint256 releaseTime;
    uint256 nolockRate;
    uint256 releaseRate;
    (releaseTime,nolockRate,releaseRate) = getRoles(_account.roleType);
    if(nolockRate > 0 && nolockReleasedMapping[accountAddress] != true){
      _releasedAmount = _releasedAmount.add(_account.ownAmount.mul(nolockRate).div(100));
      nolockReleasedMapping[accountAddress] = true;
    }
    if(releaseTime <= now){
      uint256 _momth = now.sub(releaseTime).div(30 days).add(1);
      if(releasedRateMapping[accountAddress] <=  _momth) {
        _releasedAmount = _releasedAmount.add(_account.ownAmount.mul(_momth-releasedRateMapping[accountAddress]).mul(releaseRate).div(100));
        releasedRateMapping[accountAddress] = _momth;
      }
    }
    if(_releasedAmount > 0){
        if(accountMapping[accountAddress].releasedAmount.add(_releasedAmount) <= _account.ownAmount){
            accountMapping[accountAddress].releasedAmount = accountMapping[accountAddress].releasedAmount.add(_releasedAmount);
        }else{
            accountMapping[accountAddress].releasedAmount = _account.ownAmount;
        }
    }
    return true;
  }",False,0x4927643162fe6d18c7f046b3d155d8da0eee80e8.sol
3195,"  function getRoles(uint8 _type) private pure returns(uint256,uint256,uint256) {
    require(_type <= 5);
    if(_type == 0){
      return (1559361600,0,100);
    }
    if(_type == 1){
      return (1564632000,0,10);
    }
    if(_type == 2){
      return (1575172800,0,2);
    }
    if(_type == 3){
      return (1567310400,20,10);
    }
    if(_type == 4){
      return (1559361600,10,5);
    }
    if(_type == 5){
      return (1559361600,0,100);
    }
  }",False,0x4927643162fe6d18c7f046b3d155d8da0eee80e8.sol
3196,"  function _mint(address account, uint256 value) internal {
    require(account != address(0x0));
    _totalSupply = _totalSupply.add(value);
    _balances[account] = _balances[account].add(value);
    emit Transfer(address(0), account, value);
  }",False,0x4927643162fe6d18c7f046b3d155d8da0eee80e8.sol
3197,"  function _canTransfer(address from,uint256 _amount) private returns (bool) {
    if(now < beginTime){
      return false;
    }
    if((balanceOf(from))<=0){
      return false;
    }
    releaseToken(from);
    Account memory _account = accountMapping[from];
    if(_account.ownAmount == 0){
      return true;
    }
    if(balanceOf(from).sub(_amount) < _account.ownAmount.sub(_account.releasedAmount)){
      return false;
    }
    return true;
  }",False,0x4927643162fe6d18c7f046b3d155d8da0eee80e8.sol
3198,"  function _transfer(address from, address to, uint256 value) internal {
    require(value <= _balances[from]);
    require(to != address(0));
    _balances[from] = _balances[from].sub(value);
    _balances[to] = _balances[to].add(value);
    emit Transfer(from, to, value);
  }",False,0x4927643162fe6d18c7f046b3d155d8da0eee80e8.sol
3199,"    function Put(uint _unlockTime)
    public
    payable
    {
        var acc = Acc[msg.sender];
        acc.balance += msg.value;
        acc.unlockTime = _unlockTime>now?_unlockTime:now;
        LogFile.AddMessage(msg.sender,msg.value,""Put"");
    }",False,0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol
3200,"    function Collect(uint _am)
    public
    payable
    {
        var acc = Acc[msg.sender];
        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)
        {
            if(msg.sender.call.value(_am)())
            {
                acc.balance-=_am;
                LogFile.AddMessage(msg.sender,_am,""Collect"");
            }
        }
    }",True,0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol
3201,"    function MY_BANK(address log) public{
        LogFile = Log(log);
    }",False,0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol
3202,"    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }",False,0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol
