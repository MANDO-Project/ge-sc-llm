digraph  {
13 [label="2_ mapping(address => uint) balances_re_ent15;\n13-new_variable-3-3", method="", type_label=new_variable];
19 [label="3_ function withdraw_balances_re_ent15 () public {\n       if (msg.sender.send(balances_re_ent15[msg.sender ]))\n          balances_re_ent15[msg.sender] = 0;\n      }\n19-function_definition-4-7", method="withdraw_balances_re_ent15()", type_label=function_definition];
23 [label="4_ if\n23-if-5-6", method="withdraw_balances_re_ent15()", type_label=if];
2902 [label="4_ end_if", method="withdraw_balances_re_ent15()", type_label=end_if];
36 [label="5_ balances_re_ent15[msg.sender] = 0;\n36-expression_statement-6-6", method="withdraw_balances_re_ent15()", type_label=expression_statement];
44 [label="7_ address public owner;\n44-new_variable-8-8", method="", type_label=new_variable];
51 [label="9_ owner = msg.sender;\n51-expression_statement-10-10", method="", type_label=expression_statement];
57 [label="11_ bool not_called_re_ent41 = true;\n57-new_variable-12-12", method="", type_label=new_variable];
63 [label="12_ function bug_re_ent41() public{\n        require(not_called_re_ent41);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent41 = false;\n    }\n63-function_definition-13-19", method="bug_re_ent41()", type_label=function_definition];
67 [label="13_ require(not_called_re_ent41);\n67-expression_statement-14-14", method="bug_re_ent41()", type_label=expression_statement];
72 [label="14_ if\n72-if-15-17", method="bug_re_ent41()", type_label=if];
2951 [label="14_ end_if", method="bug_re_ent41()", type_label=end_if];
87 [label="17_ not_called_re_ent41 = false;\n87-expression_statement-18-18", method="bug_re_ent41()", type_label=expression_statement];
92 [label="19_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n92-expression_statement-20-23", method="", type_label=expression_statement];
95 [label="20_ require(msg.sender == owner);\n95-expression_statement-21-21", method="", type_label=expression_statement];
104 [label="21_ _;\n104-expression_statement-22-22", method="", type_label=expression_statement];
106 [label="23_ function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n106-function_definition-24-26", method="transferOwnership(address newOwner)", type_label=function_definition];
112 [label="23_ onlyOwner\n112-expression_statement-24-24", method="transferOwnership(address newOwner)", type_label=expression_statement];
116 [label="24_ owner = newOwner;\n116-expression_statement-25-25", method="transferOwnership(address newOwner)", type_label=expression_statement];
120 [label="26_ uint256 counter_re_ent42 =0;\n120-new_variable-27-27", method="", type_label=new_variable];
125 [label="27_ function callme_re_ent42() public{\n        require(counter_re_ent42<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent42 += 1;\n    }\n125-function_definition-28-34", method="callme_re_ent42()", type_label=function_definition];
129 [label="28_ require(counter_re_ent42<=5);\n129-expression_statement-29-29", method="callme_re_ent42()", type_label=expression_statement];
136 [label="29_ if\n136-if-30-32", method="callme_re_ent42()", type_label=if];
3015 [label="29_ end_if", method="callme_re_ent42()", type_label=end_if];
151 [label="32_ counter_re_ent42 += 1;\n151-expression_statement-33-33", method="callme_re_ent42()", type_label=expression_statement];
158 [label="36_ mapping(address => uint) redeemableEther_re_ent39;\n158-new_variable-37-37", method="", type_label=new_variable];
164 [label="37_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n164-function_definition-38-43", method="claimReward_re_ent39()", type_label=function_definition];
168 [label="38_ require(redeemableEther_re_ent39[msg.sender] > 0);\n168-expression_statement-39-39", method="claimReward_re_ent39()", type_label=expression_statement];
179 [label="39_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n179-new_variable-40-40", method="claimReward_re_ent39()", type_label=new_variable];
189 [label="40_ msg.sender.transfer(transferValue_re_ent39);\n189-expression_statement-41-41", method="claimReward_re_ent39()", type_label=expression_statement];
198 [label="41_ redeemableEther_re_ent39[msg.sender] = 0;\n198-expression_statement-42-42", method="claimReward_re_ent39()", type_label=expression_statement];
216 [label="44_ mapping(address => uint) balances_re_ent36;\n216-new_variable-45-45", method="", type_label=new_variable];
222 [label="45_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n222-function_definition-46-49", method="withdraw_balances_re_ent36()", type_label=function_definition];
226 [label="46_ if\n226-if-47-48", method="withdraw_balances_re_ent36()", type_label=if];
3105 [label="46_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
239 [label="47_ balances_re_ent36[msg.sender] = 0;\n239-expression_statement-48-48", method="withdraw_balances_re_ent36()", type_label=expression_statement];
265 [label="50_ function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public {\n        Token t = Token(_token);\n        require(t.transferFrom(_from, address(this), _value));\n        emit receivedTokens(_from, _value, _token, _extraData);\n    }\n265-function_definition-51-55", method="receiveApproval(address _from,uint256 _value,address _token,bytes memory _extraData)", type_label=function_definition];
285 [label="51_ Token t = Token(_token);\n285-new_variable-52-52", method="receiveApproval(address _from,uint256 _value,address _token,bytes memory _extraData)", type_label=new_variable];
295 [label="52_ require(t.transferFrom(_from, address(this), _value));\n295-expression_statement-53-53", method="receiveApproval(address _from,uint256 _value,address _token,bytes memory _extraData)", type_label=expression_statement];
321 [label="55_ address payable lastPlayer_re_ent2;\n321-new_variable-56-56", method="", type_label=new_variable];
325 [label="56_ uint jackpot_re_ent2;\n325-new_variable-57-57", method="", type_label=new_variable];
329 [label="57_ function buyTicket_re_ent2() public{\n	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))\n        revert();\n      lastPlayer_re_ent2 = msg.sender;\n      jackpot_re_ent2    = address(this).balance;\n    }\n329-function_definition-58-63", method="buyTicket_re_ent2()", type_label=function_definition];
333 [label="58_ if\n333-if-59-60", method="buyTicket_re_ent2()", type_label=if];
3212 [label="58_ end_if", method="buyTicket_re_ent2()", type_label=end_if];
344 [label="60_ lastPlayer_re_ent2 = msg.sender;\n344-expression_statement-61-61", method="buyTicket_re_ent2()", type_label=expression_statement];
350 [label="61_ jackpot_re_ent2    = address(this).balance;\n350-expression_statement-62-62", method="buyTicket_re_ent2()", type_label=expression_statement];
372 [label="66_ mapping(address => uint) balances_re_ent17;\n372-new_variable-67-67", method="", type_label=new_variable];
378 [label="67_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n378-function_definition-68-73", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
386 [label="68_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n386-expression_statement-69-69", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
397 [label="69_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n397-new_variable-70-70", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
417 [label="70_ require(success);\n417-expression_statement-71-71", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
422 [label="71_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n422-expression_statement-72-72", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
433 [label="75_ function totalSupply() public view returns (uint256);\n433-function_definition-76-76", method="totalSupply()", type_label=function_definition];
441 [label="76_ address payable lastPlayer_re_ent37;\n441-new_variable-77-77", method="", type_label=new_variable];
445 [label="77_ uint jackpot_re_ent37;\n445-new_variable-78-78", method="", type_label=new_variable];
449 [label="78_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n449-function_definition-79-84", method="buyTicket_re_ent37()", type_label=function_definition];
453 [label="79_ if\n453-if-80-81", method="buyTicket_re_ent37()", type_label=if];
3332 [label="79_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
464 [label="81_ lastPlayer_re_ent37 = msg.sender;\n464-expression_statement-82-82", method="buyTicket_re_ent37()", type_label=expression_statement];
470 [label="82_ jackpot_re_ent37    = address(this).balance;\n470-expression_statement-83-83", method="buyTicket_re_ent37()", type_label=expression_statement];
478 [label="84_ function actualBalanceOf(address _owner) public view returns (uint256 balance);\n478-function_definition-85-85", method="actualBalanceOf(address _owner)", type_label=function_definition];
491 [label="85_ mapping(address => uint) balances_re_ent3;\n491-new_variable-86-86", method="", type_label=new_variable];
497 [label="86_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n497-function_definition-87-92", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
505 [label="87_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n505-expression_statement-88-88", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
516 [label="88_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n516-new_variable-89-89", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
536 [label="89_ require(success);\n536-expression_statement-90-90", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
541 [label="90_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n541-expression_statement-91-91", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
549 [label="92_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n549-function_definition-93-93", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
569 [label="93_ address payable lastPlayer_re_ent9;\n569-new_variable-94-94", method="", type_label=new_variable];
573 [label="94_ uint jackpot_re_ent9;\n573-new_variable-95-95", method="", type_label=new_variable];
577 [label="95_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n577-function_definition-96-102", method="buyTicket_re_ent9()", type_label=function_definition];
581 [label="96_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n581-new_variable-97-97", method="buyTicket_re_ent9()", type_label=new_variable];
599 [label="97_ if\n599-if-98-99", method="buyTicket_re_ent9()", type_label=if];
3478 [label="97_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
604 [label="99_ lastPlayer_re_ent9 = msg.sender;\n604-expression_statement-100-100", method="buyTicket_re_ent9()", type_label=expression_statement];
610 [label="100_ jackpot_re_ent9    = address(this).balance;\n610-expression_statement-101-101", method="buyTicket_re_ent9()", type_label=expression_statement];
618 [label="102_ function renounceOwnership() public;\n618-function_definition-103-103", method="renounceOwnership()", type_label=function_definition];
621 [label="103_ mapping(address => uint) redeemableEther_re_ent25;\n621-new_variable-104-104", method="", type_label=new_variable];
627 [label="104_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n627-function_definition-105-110", method="claimReward_re_ent25()", type_label=function_definition];
631 [label="105_ require(redeemableEther_re_ent25[msg.sender] > 0);\n631-expression_statement-106-106", method="claimReward_re_ent25()", type_label=expression_statement];
642 [label="106_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n642-new_variable-107-107", method="claimReward_re_ent25()", type_label=new_variable];
652 [label="107_ msg.sender.transfer(transferValue_re_ent25);\n652-expression_statement-108-108", method="claimReward_re_ent25()", type_label=expression_statement];
661 [label="108_ redeemableEther_re_ent25[msg.sender] = 0;\n661-expression_statement-109-109", method="claimReward_re_ent25()", type_label=expression_statement];
669 [label="110_ function transferOwnership(address _newOwner) public;\n669-function_definition-111-111", method="transferOwnership(address _newOwner)", type_label=function_definition];
676 [label="111_ mapping(address => uint) userBalance_re_ent19;\n676-new_variable-112-112", method="", type_label=new_variable];
682 [label="112_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n682-function_definition-113-118", method="withdrawBalance_re_ent19()", type_label=function_definition];
686 [label="113_ if\n686-if-114-116", method="withdrawBalance_re_ent19()", type_label=if];
3565 [label="113_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
704 [label="116_ userBalance_re_ent19[msg.sender] = 0;\n704-expression_statement-117-117", method="withdrawBalance_re_ent19()", type_label=expression_statement];
712 [label="118_ function pause() public;\n712-function_definition-119-119", method="pause()", type_label=function_definition];
715 [label="119_ mapping(address => uint) userBalance_re_ent26;\n715-new_variable-120-120", method="", type_label=new_variable];
721 [label="120_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n721-function_definition-121-127", method="withdrawBalance_re_ent26()", type_label=function_definition];
725 [label="121_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n725-new_variable-122-122", method="withdrawBalance_re_ent26()", type_label=new_variable];
749 [label="122_ if\n749-if-123-125", method="withdrawBalance_re_ent26()", type_label=if];
3628 [label="122_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
755 [label="125_ userBalance_re_ent26[msg.sender] = 0;\n755-expression_statement-126-126", method="withdrawBalance_re_ent26()", type_label=expression_statement];
763 [label="127_ function unpause() public;\n763-function_definition-128-128", method="unpause()", type_label=function_definition];
766 [label="128_ bool not_called_re_ent20 = true;\n766-new_variable-129-129", method="", type_label=new_variable];
772 [label="129_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n772-function_definition-130-136", method="bug_re_ent20()", type_label=function_definition];
776 [label="130_ require(not_called_re_ent20);\n776-expression_statement-131-131", method="bug_re_ent20()", type_label=expression_statement];
781 [label="131_ if\n781-if-132-134", method="bug_re_ent20()", type_label=if];
3660 [label="131_ end_if", method="bug_re_ent20()", type_label=end_if];
796 [label="134_ not_called_re_ent20 = false;\n796-expression_statement-135-135", method="bug_re_ent20()", type_label=expression_statement];
804 [label="138_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"Safe mul error\");\n        return c;\n    }\n804-function_definition-139-146", method="mul(uint256 a,uint256 b)", type_label=function_definition];
821 [label="139_ if_a == 0\n821-if-140-142", method="mul(uint256 a,uint256 b)", type_label=if];
3700 [label="139_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
826 [label="140_ return 0;\n826-return-141-141", method="mul(uint256 a,uint256 b)", type_label=return];
828 [label="142_ uint256 c = a * b;\n828-new_variable-143-143", method="mul(uint256 a,uint256 b)", type_label=new_variable];
836 [label="143_ require(c / a == b, \"Safe mul error\");\n836-expression_statement-144-144", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
848 [label="144_ return c;\n848-return-145-145", method="mul(uint256 a,uint256 b)", type_label=return];
850 [label="146_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"Safe div error\");\n        uint256 c = a / b;\n        return c;\n    }\n850-function_definition-147-151", method="div(uint256 a,uint256 b)", type_label=function_definition];
867 [label="147_ require(b > 0, \"Safe div error\");\n867-expression_statement-148-148", method="div(uint256 a,uint256 b)", type_label=expression_statement];
877 [label="148_ uint256 c = a / b;\n877-new_variable-149-149", method="div(uint256 a,uint256 b)", type_label=new_variable];
885 [label="149_ return c;\n885-return-150-150", method="div(uint256 a,uint256 b)", type_label=return];
887 [label="151_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"Safe sub error\");\n        uint256 c = a - b;\n        return c;\n    }\n887-function_definition-152-156", method="sub(uint256 a,uint256 b)", type_label=function_definition];
904 [label="152_ require(b <= a, \"Safe sub error\");\n904-expression_statement-153-153", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
914 [label="153_ uint256 c = a - b;\n914-new_variable-154-154", method="sub(uint256 a,uint256 b)", type_label=new_variable];
922 [label="154_ return c;\n922-return-155-155", method="sub(uint256 a,uint256 b)", type_label=return];
924 [label="156_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"Safe add error\");\n        return c;\n    }\n924-function_definition-157-161", method="add(uint256 a,uint256 b)", type_label=function_definition];
941 [label="157_ uint256 c = a + b;\n941-new_variable-158-158", method="add(uint256 a,uint256 b)", type_label=new_variable];
949 [label="158_ require(c >= a, \"Safe add error\");\n949-expression_statement-159-159", method="add(uint256 a,uint256 b)", type_label=expression_statement];
959 [label="159_ return c;\n959-return-160-160", method="add(uint256 a,uint256 b)", type_label=return];
961 [label="161_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"Safe mod error\");\n        return a % b;\n    }\n961-function_definition-162-165", method="mod(uint256 a,uint256 b)", type_label=function_definition];
978 [label="162_ require(b != 0, \"Safe mod error\");\n978-expression_statement-163-163", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
988 [label="163_ return a % b;\n988-return-164-164", method="mod(uint256 a,uint256 b)", type_label=return];
1006 [label="168_ uint256 counter_re_ent28 =0;\n1006-new_variable-169-169", method="", type_label=new_variable];
1011 [label="169_ function callme_re_ent28() public{\n        require(counter_re_ent28<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent28 += 1;\n    }\n1011-function_definition-170-176", method="callme_re_ent28()", type_label=function_definition];
1015 [label="170_ require(counter_re_ent28<=5);\n1015-expression_statement-171-171", method="callme_re_ent28()", type_label=expression_statement];
1022 [label="171_ if\n1022-if-172-174", method="callme_re_ent28()", type_label=if];
3901 [label="171_ end_if", method="callme_re_ent28()", type_label=end_if];
1037 [label="174_ counter_re_ent28 += 1;\n1037-expression_statement-175-175", method="callme_re_ent28()", type_label=expression_statement];
1041 [label="176_ uint public minimumQuorum;\n1041-new_variable-177-177", method="", type_label=new_variable];
1046 [label="177_ bool not_called_re_ent34 = true;\n1046-new_variable-178-178", method="", type_label=new_variable];
1052 [label="178_ function bug_re_ent34() public{\n        require(not_called_re_ent34);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent34 = false;\n    }\n1052-function_definition-179-185", method="bug_re_ent34()", type_label=function_definition];
1056 [label="179_ require(not_called_re_ent34);\n1056-expression_statement-180-180", method="bug_re_ent34()", type_label=expression_statement];
1061 [label="180_ if\n1061-if-181-183", method="bug_re_ent34()", type_label=if];
3940 [label="180_ end_if", method="bug_re_ent34()", type_label=end_if];
1076 [label="183_ not_called_re_ent34 = false;\n1076-expression_statement-184-184", method="bug_re_ent34()", type_label=expression_statement];
1081 [label="185_ uint public minimumTokensToVote;\n1081-new_variable-186-186", method="", type_label=new_variable];
1086 [label="186_ uint256 counter_re_ent21 =0;\n1086-new_variable-187-187", method="", type_label=new_variable];
1091 [label="187_ function callme_re_ent21() public{\n        require(counter_re_ent21<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent21 += 1;\n    }\n1091-function_definition-188-194", method="callme_re_ent21()", type_label=function_definition];
1095 [label="188_ require(counter_re_ent21<=5);\n1095-expression_statement-189-189", method="callme_re_ent21()", type_label=expression_statement];
1102 [label="189_ if\n1102-if-190-192", method="callme_re_ent21()", type_label=if];
3981 [label="189_ end_if", method="callme_re_ent21()", type_label=end_if];
1117 [label="192_ counter_re_ent21 += 1;\n1117-expression_statement-193-193", method="callme_re_ent21()", type_label=expression_statement];
1121 [label="194_ uint public debatingPeriodInMinutes;\n1121-new_variable-195-195", method="", type_label=new_variable];
1126 [label="195_ mapping(address => uint) balances_re_ent10;\n1126-new_variable-196-196", method="", type_label=new_variable];
1132 [label="196_ function withdrawFunds_re_ent10 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent10[msg.sender] -= _weiToWithdraw;\n    }\n1132-function_definition-197-201", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=function_definition];
1140 [label="197_ require(balances_re_ent10[msg.sender] >= _weiToWithdraw);\n1140-expression_statement-198-198", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
1151 [label="198_ require(msg.sender.send(_weiToWithdraw));\n1151-expression_statement-199-199", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
1163 [label="199_ balances_re_ent10[msg.sender] -= _weiToWithdraw;\n1163-expression_statement-200-200", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
1171 [label="201_ Proposal[] public proposals;\n1171-new_variable-202-202", method="", type_label=new_variable];
1178 [label="202_ mapping(address => uint) balances_re_ent21;\n1178-new_variable-203-203", method="", type_label=new_variable];
1184 [label="203_ function withdraw_balances_re_ent21 () public {\n       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent21[msg.sender] = 0;\n      }\n1184-function_definition-204-208", method="withdraw_balances_re_ent21()", type_label=function_definition];
1188 [label="204_ (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n1188-new_variable-205-205", method="withdraw_balances_re_ent21()", type_label=new_variable];
1212 [label="205_ if\n1212-if-206-207", method="withdraw_balances_re_ent21()", type_label=if];
4091 [label="205_ end_if", method="withdraw_balances_re_ent21()", type_label=end_if];
1214 [label="206_ balances_re_ent21[msg.sender] = 0;\n1214-expression_statement-207-207", method="withdraw_balances_re_ent21()", type_label=expression_statement];
1222 [label="208_ uint public numProposals;\n1222-new_variable-209-209", method="", type_label=new_variable];
1227 [label="209_ mapping(address => uint) userBalance_re_ent12;\n1227-new_variable-210-210", method="", type_label=new_variable];
1233 [label="210_ function withdrawBalance_re_ent12() public{\n        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent12[msg.sender] = 0;\n    }\n1233-function_definition-211-216", method="withdrawBalance_re_ent12()", type_label=function_definition];
1237 [label="211_ if\n1237-if-212-214", method="withdrawBalance_re_ent12()", type_label=if];
4116 [label="211_ end_if", method="withdrawBalance_re_ent12()", type_label=end_if];
1255 [label="214_ userBalance_re_ent12[msg.sender] = 0;\n1255-expression_statement-215-215", method="withdrawBalance_re_ent12()", type_label=expression_statement];
1263 [label="216_ Token public tokenAddress;\n1263-new_variable-217-217", method="", type_label=new_variable];
1269 [label="217_ mapping(address => uint) redeemableEther_re_ent11;\n1269-new_variable-218-218", method="", type_label=new_variable];
1275 [label="218_ function claimReward_re_ent11() public {        \n        require(redeemableEther_re_ent11[msg.sender] > 0);\n        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n        msg.sender.transfer(transferValue_re_ent11);    \n        redeemableEther_re_ent11[msg.sender] = 0;\n    }\n1275-function_definition-219-224", method="claimReward_re_ent11()", type_label=function_definition];
1279 [label="219_ require(redeemableEther_re_ent11[msg.sender] > 0);\n1279-expression_statement-220-220", method="claimReward_re_ent11()", type_label=expression_statement];
1290 [label="220_ uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n1290-new_variable-221-221", method="claimReward_re_ent11()", type_label=new_variable];
1300 [label="221_ msg.sender.transfer(transferValue_re_ent11);\n1300-expression_statement-222-222", method="claimReward_re_ent11()", type_label=expression_statement];
1309 [label="222_ redeemableEther_re_ent11[msg.sender] = 0;\n1309-expression_statement-223-223", method="claimReward_re_ent11()", type_label=expression_statement];
1317 [label="224_ address chairmanAddress;\n1317-new_variable-225-225", method="", type_label=new_variable];
1321 [label="225_ mapping(address => uint) balances_re_ent1;\n1321-new_variable-226-226", method="", type_label=new_variable];
1327 [label="226_ function withdraw_balances_re_ent1 () public {\n       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent1[msg.sender] = 0;\n      }\n1327-function_definition-227-231", method="withdraw_balances_re_ent1()", type_label=function_definition];
1331 [label="227_ (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n1331-new_variable-228-228", method="withdraw_balances_re_ent1()", type_label=new_variable];
1355 [label="228_ if\n1355-if-229-230", method="withdraw_balances_re_ent1()", type_label=if];
4234 [label="228_ end_if", method="withdraw_balances_re_ent1()", type_label=end_if];
1357 [label="229_ balances_re_ent1[msg.sender] = 0;\n1357-expression_statement-230-230", method="withdraw_balances_re_ent1()", type_label=expression_statement];
1365 [label="231_ bool public initialized = false;\n1365-new_variable-232-232", method="", type_label=new_variable];
1372 [label="232_ uint256 counter_re_ent35 =0;\n1372-new_variable-233-233", method="", type_label=new_variable];
1377 [label="233_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n1377-function_definition-234-240", method="callme_re_ent35()", type_label=function_definition];
1381 [label="234_ require(counter_re_ent35<=5);\n1381-expression_statement-235-235", method="callme_re_ent35()", type_label=expression_statement];
1388 [label="235_ if\n1388-if-236-238", method="callme_re_ent35()", type_label=if];
4267 [label="235_ end_if", method="callme_re_ent35()", type_label=end_if];
1403 [label="238_ counter_re_ent35 += 1;\n1403-expression_statement-239-239", method="callme_re_ent35()", type_label=expression_statement];
1409 [label="241_ mapping(address => uint) userBalance_re_ent40;\n1409-new_variable-242-242", method="", type_label=new_variable];
1415 [label="242_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n1415-function_definition-243-249", method="withdrawBalance_re_ent40()", type_label=function_definition];
1419 [label="243_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n1419-new_variable-244-244", method="withdrawBalance_re_ent40()", type_label=new_variable];
1443 [label="244_ if\n1443-if-245-247", method="withdrawBalance_re_ent40()", type_label=if];
4322 [label="244_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
1449 [label="247_ userBalance_re_ent40[msg.sender] = 0;\n1449-expression_statement-248-248", method="withdrawBalance_re_ent40()", type_label=expression_statement];
1475 [label="250_ mapping(address => uint) userBalance_re_ent33;\n1475-new_variable-251-251", method="", type_label=new_variable];
1481 [label="251_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n1481-function_definition-252-258", method="withdrawBalance_re_ent33()", type_label=function_definition];
1485 [label="252_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n1485-new_variable-253-253", method="withdrawBalance_re_ent33()", type_label=new_variable];
1509 [label="253_ if\n1509-if-254-256", method="withdrawBalance_re_ent33()", type_label=if];
4388 [label="253_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
1515 [label="256_ userBalance_re_ent33[msg.sender] = 0;\n1515-expression_statement-257-257", method="withdrawBalance_re_ent33()", type_label=expression_statement];
1537 [label="259_ bool not_called_re_ent27 = true;\n1537-new_variable-260-260", method="", type_label=new_variable];
1543 [label="260_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n1543-function_definition-261-267", method="bug_re_ent27()", type_label=function_definition];
1547 [label="261_ require(not_called_re_ent27);\n1547-expression_statement-262-262", method="bug_re_ent27()", type_label=expression_statement];
1552 [label="262_ if\n1552-if-263-265", method="bug_re_ent27()", type_label=if];
4431 [label="262_ end_if", method="bug_re_ent27()", type_label=end_if];
1567 [label="265_ not_called_re_ent27 = false;\n1567-expression_statement-266-266", method="bug_re_ent27()", type_label=expression_statement];
1590 [label="268_ mapping(address => uint) balances_re_ent31;\n1590-new_variable-269-269", method="", type_label=new_variable];
1596 [label="269_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n1596-function_definition-270-274", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
1604 [label="270_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n1604-expression_statement-271-271", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1615 [label="271_ require(msg.sender.send(_weiToWithdraw));\n1615-expression_statement-272-272", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1627 [label="272_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n1627-expression_statement-273-273", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1657 [label="275_ bool not_called_re_ent13 = true;\n1657-new_variable-276-276", method="", type_label=new_variable];
1663 [label="276_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n1663-function_definition-277-284", method="bug_re_ent13()", type_label=function_definition];
1667 [label="277_ require(not_called_re_ent13);\n1667-expression_statement-278-278", method="bug_re_ent13()", type_label=expression_statement];
1672 [label="278_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n1672-new_variable-279-279", method="bug_re_ent13()", type_label=new_variable];
1693 [label="279_ if\n1693-if-280-282", method="bug_re_ent13()", type_label=if];
4572 [label="279_ end_if", method="bug_re_ent13()", type_label=end_if];
1699 [label="282_ not_called_re_ent13 = false;\n1699-expression_statement-283-283", method="bug_re_ent13()", type_label=expression_statement];
1718 [label="285_ struct Proposal {\n        address recipient;\n        uint amount;\n        string description;\n        bool signedByChairman;\n        uint minExecutionDate;\n        bool executed;\n        bool proposalPassed;\n        uint numberOfVotes;\n        bytes32 proposalHash;\n        Vote[] votes;\n        mapping (address => bool) voted;\n    }\n1718-expression_statement-286-298", method="Proposal()", type_label=expression_statement];
1768 [label="298_ struct Vote {\n        bool inSupport;\n        address voter;\n    }\n1768-expression_statement-299-302", method="Vote()", type_label=expression_statement];
1778 [label="302_ modifier onlyTokenholders {\n        require(tokenAddress.actualBalanceOf(msg.sender) > minimumTokensToVote);\n        _;\n    }\n1778-expression_statement-303-306", method="", type_label=expression_statement];
1781 [label="303_ require(tokenAddress.actualBalanceOf(msg.sender) > minimumTokensToVote);\n1781-expression_statement-304-304", method="", type_label=expression_statement];
1795 [label="304_ _;\n1795-expression_statement-305-305", method="", type_label=expression_statement];
1797 [label="306_ modifier onlyChairman {\n        require(msg.sender == chairmanAddress);\n        _;\n    }\n1797-expression_statement-307-310", method="", type_label=expression_statement];
1800 [label="307_ require(msg.sender == chairmanAddress);\n1800-expression_statement-308-308", method="", type_label=expression_statement];
1809 [label="308_ _;\n1809-expression_statement-309-309", method="", type_label=expression_statement];
1813 [label="312_ mapping(address => uint) redeemableEther_re_ent32;\n1813-new_variable-313-313", method="", type_label=new_variable];
1819 [label="313_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n1819-function_definition-314-319", method="claimReward_re_ent32()", type_label=function_definition];
1823 [label="314_ require(redeemableEther_re_ent32[msg.sender] > 0);\n1823-expression_statement-315-315", method="claimReward_re_ent32()", type_label=expression_statement];
1834 [label="315_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n1834-new_variable-316-316", method="claimReward_re_ent32()", type_label=new_variable];
1844 [label="316_ msg.sender.transfer(transferValue_re_ent32);\n1844-expression_statement-317-317", method="claimReward_re_ent32()", type_label=expression_statement];
1853 [label="317_ redeemableEther_re_ent32[msg.sender] = 0;\n1853-expression_statement-318-318", method="claimReward_re_ent32()", type_label=expression_statement];
1861 [label="319_ function init(Token _tokenAddress, address _chairmanAddress, uint _minimumTokensToVote, uint _minimumPercentToPassAVote, uint _minutesForDebate) onlyOwner public {\n        require(!initialized);\n        initialized = true;\n        changeVotingRules(_tokenAddress, _chairmanAddress, _minimumTokensToVote, _minimumPercentToPassAVote, _minutesForDebate);\n        emit Initialized();\n    }\n1861-function_definition-320-325", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=function_definition];
1884 [label="319_ onlyOwner\n1884-expression_statement-320-320", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1888 [label="320_ require(!initialized);\n1888-expression_statement-321-321", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1894 [label="321_ initialized = true;\n1894-expression_statement-322-322", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1899 [label="322_ changeVotingRules(_tokenAddress, _chairmanAddress, _minimumTokensToVote, _minimumPercentToPassAVote, _minutesForDebate);\n1899-expression_statement-323-323", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1914 [label="325_ mapping(address => uint) balances_re_ent38;\n1914-new_variable-326-326", method="", type_label=new_variable];
1920 [label="326_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n1920-function_definition-327-331", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
1928 [label="327_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n1928-expression_statement-328-328", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1939 [label="328_ require(msg.sender.send(_weiToWithdraw));\n1939-expression_statement-329-329", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1951 [label="329_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n1951-expression_statement-330-330", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1959 [label="331_ function changeVotingRules(Token _tokenAddress, address _chairmanAddress, uint _minimumTokensToVote, uint _minimumPercentToPassAVote, uint _minutesForDebate) onlyOwner public {\n        require(_chairmanAddress != address(0));\n        require(_minimumPercentToPassAVote <= 51);\n        tokenAddress = Token(_tokenAddress);\n        chairmanAddress = _chairmanAddress;\n        if (_minimumTokensToVote == 0 ) _minimumTokensToVote = 1;\n        minimumTokensToVote = _minimumTokensToVote;\n        if (_minimumPercentToPassAVote == 0 ) _minimumPercentToPassAVote = 51;\n        minimumQuorum = _minimumPercentToPassAVote;\n        debatingPeriodInMinutes = _minutesForDebate;\n        emit ChangeOfRules(_minimumTokensToVote, minimumQuorum, debatingPeriodInMinutes, address(tokenAddress), chairmanAddress);\n    }\n1959-function_definition-332-343", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=function_definition];
1982 [label="331_ onlyOwner\n1982-expression_statement-332-332", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1986 [label="332_ require(_chairmanAddress != address(0));\n1986-expression_statement-333-333", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1995 [label="333_ require(_minimumPercentToPassAVote <= 51);\n1995-expression_statement-334-334", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2002 [label="334_ tokenAddress = Token(_tokenAddress);\n2002-expression_statement-335-335", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2009 [label="335_ chairmanAddress = _chairmanAddress;\n2009-expression_statement-336-336", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2013 [label="336_ if__minimumTokensToVote == 0\n2013-if-337-337", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=if];
4892 [label="336_ end_if", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=end_if];
2017 [label="336_ _minimumTokensToVote = 1;\n2017-expression_statement-337-337", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2021 [label="337_ minimumTokensToVote = _minimumTokensToVote;\n2021-expression_statement-338-338", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2025 [label="338_ if__minimumPercentToPassAVote == 0\n2025-if-339-339", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=if];
4904 [label="338_ end_if", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=end_if];
2029 [label="338_ _minimumPercentToPassAVote = 51;\n2029-expression_statement-339-339", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2033 [label="339_ minimumQuorum = _minimumPercentToPassAVote;\n2033-expression_statement-340-340", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2037 [label="340_ debatingPeriodInMinutes = _minutesForDebate;\n2037-expression_statement-341-341", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2055 [label="343_ mapping(address => uint) redeemableEther_re_ent4;\n2055-new_variable-344-344", method="", type_label=new_variable];
2061 [label="344_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n2061-function_definition-345-350", method="claimReward_re_ent4()", type_label=function_definition];
2065 [label="345_ require(redeemableEther_re_ent4[msg.sender] > 0);\n2065-expression_statement-346-346", method="claimReward_re_ent4()", type_label=expression_statement];
2076 [label="346_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n2076-new_variable-347-347", method="claimReward_re_ent4()", type_label=new_variable];
2086 [label="347_ msg.sender.transfer(transferValue_re_ent4);\n2086-expression_statement-348-348", method="claimReward_re_ent4()", type_label=expression_statement];
2095 [label="348_ redeemableEther_re_ent4[msg.sender] = 0;\n2095-expression_statement-349-349", method="claimReward_re_ent4()", type_label=expression_statement];
2103 [label="350_ function newProposal(\n        address destination,\n        uint weiAmount,\n        string memory transactionDescription,\n        bytes memory transactionBytecode\n    )\n        onlyTokenholders public\n        returns (uint proposalID)\n    {\n        proposalID = proposals.length++;\n        Proposal storage p = proposals[proposalID];\n        p.recipient = destination;\n        p.signedByChairman = false;\n        p.amount = weiAmount;\n        p.description = transactionDescription;\n        p.proposalHash = keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n        p.minExecutionDate = now + debatingPeriodInMinutes * 1 minutes;\n        p.executed = false;\n        p.proposalPassed = false;\n        p.numberOfVotes = 0;\n        emit ProposalAdded(proposalID, destination, weiAmount, transactionDescription);\n        numProposals = proposalID+1;\n        return proposalID;\n    }\n2103-function_definition-351-374", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=function_definition];
2121 [label="356_ onlyTokenholders\n2121-expression_statement-357-357", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2130 [label="359_ proposalID = proposals.length++;\n2130-expression_statement-360-360", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2133 [label="359_ proposals.length++\n2133-expression_statement-360-360", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2137 [label="360_ Proposal storage p = proposals[proposalID];\n2137-new_variable-361-361", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=new_variable];
2146 [label="361_ p.recipient = destination;\n2146-expression_statement-362-362", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2152 [label="362_ p.signedByChairman = false;\n2152-expression_statement-363-363", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2159 [label="363_ p.amount = weiAmount;\n2159-expression_statement-364-364", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2165 [label="364_ p.description = transactionDescription;\n2165-expression_statement-365-365", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2171 [label="365_ p.proposalHash = keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n2171-expression_statement-366-366", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2189 [label="366_ p.minExecutionDate = now + debatingPeriodInMinutes * 1 minutes;\n2189-expression_statement-367-367", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2200 [label="367_ p.executed = false;\n2200-expression_statement-368-368", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2207 [label="368_ p.proposalPassed = false;\n2207-expression_statement-369-369", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2214 [label="369_ p.numberOfVotes = 0;\n2214-expression_statement-370-370", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2230 [label="371_ numProposals = proposalID+1;\n2230-expression_statement-372-372", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2236 [label="372_ return proposalID;\n2236-return-373-373", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=return];
2238 [label="374_ uint256 counter_re_ent7 =0;\n2238-new_variable-375-375", method="", type_label=new_variable];
2243 [label="375_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n2243-function_definition-376-382", method="callme_re_ent7()", type_label=function_definition];
2247 [label="376_ require(counter_re_ent7<=5);\n2247-expression_statement-377-377", method="callme_re_ent7()", type_label=expression_statement];
2254 [label="377_ if\n2254-if-378-380", method="callme_re_ent7()", type_label=if];
5133 [label="377_ end_if", method="callme_re_ent7()", type_label=end_if];
2269 [label="380_ counter_re_ent7 += 1;\n2269-expression_statement-381-381", method="callme_re_ent7()", type_label=expression_statement];
2273 [label="382_ function checkProposalCode(\n        uint proposalNumber,\n        address destination,\n        uint weiAmount,\n        bytes memory transactionBytecode\n    )\n        view public\n        returns (bool codeChecksOut)\n    {\n        Proposal storage p = proposals[proposalNumber];\n        return p.proposalHash == keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n    }\n2273-function_definition-383-394", method="checkProposalCode(uint proposalNumber,address destination,uint weiAmount,bytes memory transactionBytecode)", type_label=function_definition];
2299 [label="391_ Proposal storage p = proposals[proposalNumber];\n2299-new_variable-392-392", method="checkProposalCode(uint proposalNumber,address destination,uint weiAmount,bytes memory transactionBytecode)", type_label=new_variable];
2308 [label="392_ return p.proposalHash == keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n2308-return-393-393", method="checkProposalCode(uint proposalNumber,address destination,uint weiAmount,bytes memory transactionBytecode)", type_label=return];
2326 [label="394_ address payable lastPlayer_re_ent23;\n2326-new_variable-395-395", method="", type_label=new_variable];
2330 [label="395_ uint jackpot_re_ent23;\n2330-new_variable-396-396", method="", type_label=new_variable];
2334 [label="396_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n2334-function_definition-397-402", method="buyTicket_re_ent23()", type_label=function_definition];
2338 [label="397_ if\n2338-if-398-399", method="buyTicket_re_ent23()", type_label=if];
5217 [label="397_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
2349 [label="399_ lastPlayer_re_ent23 = msg.sender;\n2349-expression_statement-400-400", method="buyTicket_re_ent23()", type_label=expression_statement];
2355 [label="400_ jackpot_re_ent23    = address(this).balance;\n2355-expression_statement-401-401", method="buyTicket_re_ent23()", type_label=expression_statement];
2363 [label="402_ function sign(\n        uint proposalNumber,\n        bool signProposal\n    )\n        onlyTokenholders public\n        returns (uint voteID)\n    {\n        require(initialized);\n        Proposal storage p = proposals[proposalNumber];\n        require(msg.sender == chairmanAddress);\n        require(signProposal == true);\n        p.signedByChairman = signProposal;\n        emit ProposalSignedByChairman(proposalNumber,  signProposal, msg.sender);\n        return proposalNumber;\n    }\n2363-function_definition-403-417", method="sign(uint proposalNumber,bool signProposal)", type_label=function_definition];
2373 [label="406_ onlyTokenholders\n2373-expression_statement-407-407", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
2382 [label="409_ require(initialized);\n2382-expression_statement-410-410", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
2387 [label="410_ Proposal storage p = proposals[proposalNumber];\n2387-new_variable-411-411", method="sign(uint proposalNumber,bool signProposal)", type_label=new_variable];
2396 [label="411_ require(msg.sender == chairmanAddress);\n2396-expression_statement-412-412", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
2405 [label="412_ require(signProposal == true);\n2405-expression_statement-413-413", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
2413 [label="413_ p.signedByChairman = signProposal;\n2413-expression_statement-414-414", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
2429 [label="415_ return proposalNumber;\n2429-return-416-416", method="sign(uint proposalNumber,bool signProposal)", type_label=return];
2431 [label="417_ uint256 counter_re_ent14 =0;\n2431-new_variable-418-418", method="", type_label=new_variable];
2436 [label="418_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n2436-function_definition-419-425", method="callme_re_ent14()", type_label=function_definition];
2440 [label="419_ require(counter_re_ent14<=5);\n2440-expression_statement-420-420", method="callme_re_ent14()", type_label=expression_statement];
2447 [label="420_ if\n2447-if-421-423", method="callme_re_ent14()", type_label=if];
5326 [label="420_ end_if", method="callme_re_ent14()", type_label=end_if];
2462 [label="423_ counter_re_ent14 += 1;\n2462-expression_statement-424-424", method="callme_re_ent14()", type_label=expression_statement];
2466 [label="425_ function vote(\n        uint proposalNumber,\n        bool supportsProposal\n    )\n        onlyTokenholders public\n        returns (uint voteID)\n    {\n        Proposal storage p = proposals[proposalNumber];\n        require(p.voted[msg.sender] != true);\n        voteID = p.votes.length++;\n        p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});\n        p.voted[msg.sender] = true;\n        p.numberOfVotes = voteID +1;\n        emit Voted(proposalNumber,  supportsProposal, msg.sender);\n        return voteID;\n    }\n2466-function_definition-426-441", method="vote(uint proposalNumber,bool supportsProposal)", type_label=function_definition];
2476 [label="429_ onlyTokenholders\n2476-expression_statement-430-430", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
2485 [label="432_ Proposal storage p = proposals[proposalNumber];\n2485-new_variable-433-433", method="vote(uint proposalNumber,bool supportsProposal)", type_label=new_variable];
2494 [label="433_ require(p.voted[msg.sender] != true);\n2494-expression_statement-434-434", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
2508 [label="434_ voteID = p.votes.length++;\n2508-expression_statement-435-435", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
2511 [label="434_ p.votes.length++\n2511-expression_statement-435-435", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
2517 [label="435_ p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});\n2517-expression_statement-436-436", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
2535 [label="436_ p.voted[msg.sender] = true;\n2535-expression_statement-437-437", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
2546 [label="437_ p.numberOfVotes = voteID +1;\n2546-expression_statement-438-438", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
2564 [label="439_ return voteID;\n2564-return-440-440", method="vote(uint proposalNumber,bool supportsProposal)", type_label=return];
2566 [label="441_ address payable lastPlayer_re_ent30;\n2566-new_variable-442-442", method="", type_label=new_variable];
2570 [label="442_ uint jackpot_re_ent30;\n2570-new_variable-443-443", method="", type_label=new_variable];
2574 [label="443_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n2574-function_definition-444-449", method="buyTicket_re_ent30()", type_label=function_definition];
2578 [label="444_ if\n2578-if-445-446", method="buyTicket_re_ent30()", type_label=if];
5457 [label="444_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
2589 [label="446_ lastPlayer_re_ent30 = msg.sender;\n2589-expression_statement-447-447", method="buyTicket_re_ent30()", type_label=expression_statement];
2595 [label="447_ jackpot_re_ent30    = address(this).balance;\n2595-expression_statement-448-448", method="buyTicket_re_ent30()", type_label=expression_statement];
2603 [label="449_ function executeProposal(uint proposalNumber, bytes memory transactionBytecode) public {\n        Proposal storage p = proposals[proposalNumber];\n        require(initialized);\n        require(now > p.minExecutionDate                                              \n            && !p.executed                                                           \n            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode)));  \n        uint quorum = 0;\n        uint yea = 0;\n        uint nay = 0;\n        for (uint i = 0; i <  p.votes.length; ++i) {\n            Vote storage v = p.votes[i];\n            uint voteWeight = tokenAddress.actualBalanceOf(v.voter);\n            quorum += voteWeight;\n            if (v.inSupport) {\n                yea += voteWeight;\n            } else {\n                nay += voteWeight;\n            }\n        }\n        Token t = Token(tokenAddress);\n        require(quorum >= t.totalSupply().mul(minimumQuorum).div(100));  \n        if (yea > nay ) {\n            p.executed = true;\n            (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode);\n            require(success);\n            p.proposalPassed = true;\n        } else {\n            p.proposalPassed = false;\n        }\n        emit ProposalTallied(proposalNumber, yea - nay, quorum, p.proposalPassed);\n    }\n2603-function_definition-450-480", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=function_definition];
2615 [label="450_ Proposal storage p = proposals[proposalNumber];\n2615-new_variable-451-451", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2624 [label="451_ require(initialized);\n2624-expression_statement-452-452", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2629 [label="452_ require(now > p.minExecutionDate                                              \n            && !p.executed                                                           \n            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode)));\n2629-expression_statement-453-455", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2665 [label="455_ uint quorum = 0;\n2665-new_variable-456-456", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2671 [label="456_ uint yea = 0;\n2671-new_variable-457-457", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2677 [label="457_ uint nay = 0;\n2677-new_variable-458-458", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2683 [label="458_ for(i <  p.votes.length;;++i)\n2683-for-459-468", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=for];
5562 [label="458_ end_loop", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=end_loop];
2698 [label="458_ ++i\n2698-expression_statement-459-459", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2701 [label="459_ Vote storage v = p.votes[i];\n2701-new_variable-460-460", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2712 [label="460_ uint voteWeight = tokenAddress.actualBalanceOf(v.voter);\n2712-new_variable-461-461", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2725 [label="461_ quorum += voteWeight;\n2725-expression_statement-462-462", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2729 [label="462_ if\n2729-if-463-467", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=if];
5608 [label="462_ end_if", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=end_if];
2734 [label="463_ yea += voteWeight;\n2734-expression_statement-464-464", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2739 [label="465_ nay += voteWeight;\n2739-expression_statement-466-466", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2743 [label="468_ Token t = Token(tokenAddress);\n2743-new_variable-469-469", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2753 [label="469_ require(quorum >= t.totalSupply().mul(minimumQuorum).div(100));\n2753-expression_statement-470-470", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2773 [label="470_ if_yea > nay\n2773-if-471-478", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=if];
5652 [label="470_ end_if", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=end_if];
2778 [label="471_ p.executed = true;\n2778-expression_statement-472-472", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2785 [label="472_ (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode);\n2785-new_variable-473-473", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2806 [label="473_ require(success);\n2806-expression_statement-474-474", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2811 [label="474_ p.proposalPassed = true;\n2811-expression_statement-475-475", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2819 [label="476_ p.proposalPassed = false;\n2819-expression_statement-477-477", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2840 [label="480_ mapping(address => uint) balances_re_ent8;\n2840-new_variable-481-481", method="", type_label=new_variable];
2846 [label="481_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n2846-function_definition-482-486", method="withdraw_balances_re_ent8()", type_label=function_definition];
2850 [label="482_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n2850-new_variable-483-483", method="withdraw_balances_re_ent8()", type_label=new_variable];
2874 [label="483_ if\n2874-if-484-485", method="withdraw_balances_re_ent8()", type_label=if];
5753 [label="483_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
2876 [label="484_ balances_re_ent8[msg.sender] = 0;\n2876-expression_statement-485-485", method="withdraw_balances_re_ent8()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
247;
2826;
19 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
23 -> 36  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
23 -> 2902  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2902 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
36 -> 2902  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
63 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 2951  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
95 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
125 -> 129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
136 -> 3015  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
164 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
222 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
226 -> 239  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
226 -> 3105  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3105 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
239 -> 3105  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
265 -> 285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
285 -> 295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 3212  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
344 -> 350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
441 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 3332  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
464 -> 470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
516 -> 536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
536 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
569 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
581 -> 599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
599 -> 3478  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
604 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
627 -> 631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
631 -> 642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
642 -> 652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
682 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
686 -> 3565  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
721 -> 725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
749 -> 3628  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
772 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
776 -> 781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
781 -> 3660  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
804 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 826  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
821 -> 3700  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3700 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
826 -> 3700  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
826 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
828 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
848 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
850 -> 867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
867 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
887 -> 904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
924 -> 941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
941 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
959 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
961 -> 978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
978 -> 988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
988 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1011 -> 1015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1015 -> 1022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1022 -> 3901  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1041 -> 1046  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1052 -> 1056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1056 -> 1061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1061 -> 3940  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1081 -> 1086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1091 -> 1095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1095 -> 1102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1102 -> 3981  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1121 -> 1126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1132 -> 1140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1140 -> 1151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1151 -> 1163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1171 -> 1178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1184 -> 1188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1188 -> 1212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1212 -> 1214  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1212 -> 4091  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4091 -> 1222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1214 -> 4091  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1222 -> 1227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1233 -> 1237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 4116  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1263 -> 1269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1275 -> 1279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1279 -> 1290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1290 -> 1300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1300 -> 1309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1317 -> 1321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1327 -> 1331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 1355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1355 -> 1357  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1355 -> 4234  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4234 -> 1365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1357 -> 4234  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1365 -> 1372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1377 -> 1381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1381 -> 1388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1388 -> 4267  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1415 -> 1419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1419 -> 1443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1443 -> 4322  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1481 -> 1485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1485 -> 1509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1509 -> 4388  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1543 -> 1547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1547 -> 1552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1552 -> 4431  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1596 -> 1604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1604 -> 1615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1615 -> 1627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1663 -> 1667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1667 -> 1672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1672 -> 1693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1693 -> 4572  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1718 -> 1768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1768 -> 1778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1778 -> 1797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1781 -> 1795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1800 -> 1809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1819 -> 1823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1823 -> 1834  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1834 -> 1844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1844 -> 1853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1861 -> 1888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1888 -> 1894  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1894 -> 1899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1920 -> 1928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1928 -> 1939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1939 -> 1951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1959 -> 1986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1986 -> 1995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1995 -> 2002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2002 -> 2009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2009 -> 2013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2013 -> 2017  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2013 -> 4892  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4892 -> 2021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2017 -> 4892  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2021 -> 2025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2025 -> 2029  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2025 -> 4904  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4904 -> 2033  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2029 -> 4904  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2033 -> 2037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2061 -> 2065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2065 -> 2076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2076 -> 2086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2086 -> 2095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2103 -> 2130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2130 -> 2137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2137 -> 2146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2146 -> 2152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2152 -> 2159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2159 -> 2165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2165 -> 2171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2171 -> 2189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2189 -> 2200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2200 -> 2207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2207 -> 2214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2230 -> 2236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2236 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2243 -> 2247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2247 -> 2254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2254 -> 5133  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2273 -> 2299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2299 -> 2308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2308 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2326 -> 2330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2334 -> 2338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2338 -> 5217  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2349 -> 2355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2363 -> 2382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2382 -> 2387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2387 -> 2396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2396 -> 2405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2405 -> 2413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2429 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2436 -> 2440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2440 -> 2447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2447 -> 5326  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2466 -> 2485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2485 -> 2494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2494 -> 2508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2508 -> 2517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2517 -> 2535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2535 -> 2546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2564 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2566 -> 2570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2574 -> 2578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2578 -> 5457  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2589 -> 2595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2603 -> 2615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2615 -> 2624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2624 -> 2629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2629 -> 2665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2665 -> 2671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2671 -> 2677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2677 -> 2683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2683 -> 2701  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2683 -> 5562  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5562 -> 2743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2698 -> 2683  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2701 -> 2712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2712 -> 2725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2725 -> 2729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2729 -> 2734  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2729 -> 2739  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5608 -> 2698  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
5608 -> 2698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
2734 -> 5608  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2739 -> 5608  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2743 -> 2753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2753 -> 2773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2773 -> 2778  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2773 -> 2819  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5652 -> 2826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2778 -> 2785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2785 -> 2806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2806 -> 2811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2811 -> 5652  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2819 -> 5652  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2846 -> 2850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2850 -> 2874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2874 -> 2876  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2874 -> 5753  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5753 -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2876 -> 5753  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
