digraph  {
13 [label="2_ function totalSupply() external view returns (uint256);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ function balanceOf(address tokenOwner) external view returns (uint256);\n21-function_definition-4-4", method="balanceOf(address tokenOwner)", type_label=function_definition];
33 [label="4_ function allowance(address tokenOwner, address spender) external view returns (uint256);\n33-function_definition-5-5", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
49 [label="5_ function transfer(address to, uint256 tokenAmount) external returns (bool);\n49-function_definition-6-6", method="transfer(address to,uint256 tokenAmount)", type_label=function_definition];
64 [label="6_ function approve(address spender, uint256 tokenAmount) external returns (bool);\n64-function_definition-7-7", method="approve(address spender,uint256 tokenAmount)", type_label=function_definition];
79 [label="7_ function transferFrom(address from, address to, uint256 tokenAmount) external returns (bool);\n79-function_definition-8-8", method="transferFrom(address from,address to,uint256 tokenAmount)", type_label=function_definition];
98 [label="8_ function burn(uint256 tokenAmount) external returns (bool success);\n98-function_definition-9-9", method="burn(uint256 tokenAmount)", type_label=function_definition];
110 [label="9_ function burnFrom(address from, uint256 tokenAmount) external returns (bool success);\n110-function_definition-10-10", method="burnFrom(address from,uint256 tokenAmount)", type_label=function_definition];
167 [label="15_ function receiveApproval(address from, uint256 tokenAmount, address token, bytes extraData) external;\n167-function_definition-16-16", method="receiveApproval(address from,uint256 tokenAmount,address token,bytes extraData)", type_label=function_definition];
189 [label="18_ address public owner;\n189-new_variable-19-19", method="", type_label=new_variable];
196 [label="20_ owner = msg.sender;\n196-expression_statement-21-21", method="", type_label=expression_statement];
202 [label="22_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n202-expression_statement-23-26", method="", type_label=expression_statement];
205 [label="23_ require(msg.sender == owner);\n205-expression_statement-24-24", method="", type_label=expression_statement];
214 [label="24_ _;\n214-expression_statement-25-25", method="", type_label=expression_statement];
216 [label="26_ function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n216-function_definition-27-29", method="transferOwnership(address newOwner)", type_label=function_definition];
222 [label="26_ onlyOwner\n222-expression_statement-27-27", method="transferOwnership(address newOwner)", type_label=expression_statement];
226 [label="27_ owner = newOwner;\n226-expression_statement-28-28", method="transferOwnership(address newOwner)", type_label=expression_statement];
233 [label="31_ function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        if (_a == 0) {\n            return 0;\n        }\n        uint256 c = _a * _b;\n        require(c / _a == _b, \"Multiplication overflow\");\n        return c;\n    }\n233-function_definition-32-39", method="mul(uint256 _a,uint256 _b)", type_label=function_definition];
250 [label="32_ if__a == 0\n250-if-33-35", method="mul(uint256 _a,uint256 _b)", type_label=if];
1307 [label="32_ end_if", method="mul(uint256 _a,uint256 _b)", type_label=end_if];
255 [label="33_ return 0;\n255-return-34-34", method="mul(uint256 _a,uint256 _b)", type_label=return];
257 [label="35_ uint256 c = _a * _b;\n257-new_variable-36-36", method="mul(uint256 _a,uint256 _b)", type_label=new_variable];
265 [label="36_ require(c / _a == _b, \"Multiplication overflow\");\n265-expression_statement-37-37", method="mul(uint256 _a,uint256 _b)", type_label=expression_statement];
277 [label="37_ return c;\n277-return-38-38", method="mul(uint256 _a,uint256 _b)", type_label=return];
279 [label="39_ function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b > 0, \"Division by 0\");  \n        uint256 c = _a / _b;\n        return c;\n    }\n279-function_definition-40-44", method="div(uint256 _a,uint256 _b)", type_label=function_definition];
296 [label="40_ require(_b > 0, \"Division by 0\");\n296-expression_statement-41-41", method="div(uint256 _a,uint256 _b)", type_label=expression_statement];
306 [label="41_ uint256 c = _a / _b;\n306-new_variable-42-42", method="div(uint256 _a,uint256 _b)", type_label=new_variable];
314 [label="42_ return c;\n314-return-43-43", method="div(uint256 _a,uint256 _b)", type_label=return];
316 [label="44_ function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a, \"Subtraction overflow\");\n        uint256 c = _a - _b;\n        return c;\n    }\n316-function_definition-45-49", method="sub(uint256 _a,uint256 _b)", type_label=function_definition];
333 [label="45_ require(_b <= _a, \"Subtraction overflow\");\n333-expression_statement-46-46", method="sub(uint256 _a,uint256 _b)", type_label=expression_statement];
343 [label="46_ uint256 c = _a - _b;\n343-new_variable-47-47", method="sub(uint256 _a,uint256 _b)", type_label=new_variable];
351 [label="47_ return c;\n351-return-48-48", method="sub(uint256 _a,uint256 _b)", type_label=return];
353 [label="49_ function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a, \"Addition overflow\");\n        return c;\n    }\n353-function_definition-50-54", method="add(uint256 _a,uint256 _b)", type_label=function_definition];
370 [label="50_ uint256 c = _a + _b;\n370-new_variable-51-51", method="add(uint256 _a,uint256 _b)", type_label=new_variable];
378 [label="51_ require(c >= _a, \"Addition overflow\");\n378-expression_statement-52-52", method="add(uint256 _a,uint256 _b)", type_label=expression_statement];
388 [label="52_ return c;\n388-return-53-53", method="add(uint256 _a,uint256 _b)", type_label=return];
390 [label="54_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"Dividing by 0\");\n        return a % b;\n    }\n390-function_definition-55-58", method="mod(uint256 a,uint256 b)", type_label=function_definition];
407 [label="55_ require(b != 0, \"Dividing by 0\");\n407-expression_statement-56-56", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
417 [label="56_ return a % b;\n417-return-57-57", method="mod(uint256 a,uint256 b)", type_label=return];
435 [label="61_ uint256 private constant base = 1e18;\n435-new_variable-62-62", method="", type_label=new_variable];
441 [label="62_ uint256 constant MAX_UINT = 2**256 - 1;\n441-new_variable-63-63", method="", type_label=new_variable];
450 [label="63_ string public constant name = \"Brewer's coin\";\n450-new_variable-64-64", method="", type_label=new_variable];
457 [label="64_ string public constant symbol = \"BREW\";\n457-new_variable-65-65", method="", type_label=new_variable];
464 [label="65_ uint8 public constant decimals = 18;\n464-new_variable-66-66", method="", type_label=new_variable];
470 [label="66_ uint256 public totalSupply = 1e26;\n470-new_variable-67-67", method="", type_label=new_variable];
476 [label="67_ mapping (address => uint256) public balances;\n476-new_variable-68-68", method="", type_label=new_variable];
483 [label="68_ mapping (address => mapping (address => uint256)) public allowance;\n483-new_variable-69-69", method="", type_label=new_variable];
530 [label="72_ string private constant NOT_ENOUGH_TOKENS = \"Not enough tokens\";\n530-new_variable-73-73", method="", type_label=new_variable];
537 [label="73_ string private constant NOT_ENOUGH_ETHER = \"Not enough ether\";\n537-new_variable-74-74", method="", type_label=new_variable];
544 [label="74_ string private constant NOT_ENOUGH_ALLOWANCE = \"Not enough allowance\";\n544-new_variable-75-75", method="", type_label=new_variable];
551 [label="75_ string private constant ADDRESS_0_NOT_ALLOWED = \"Address 0 not allowed\";\n551-new_variable-76-76", method="", type_label=new_variable];
560 [label="77_ balances[msg.sender] = totalSupply;\n560-expression_statement-78-78", method="", type_label=expression_statement];
568 [label="78_ allowance[this][msg.sender] = MAX_UINT;\n568-expression_statement-79-79", method="", type_label=expression_statement];
578 [label="80_ function totalSupply() external view returns (uint256) {\n        return totalSupply;\n    }\n578-function_definition-81-83", method="totalSupply()", type_label=function_definition];
587 [label="81_ return totalSupply;\n587-return-82-82", method="totalSupply()", type_label=return];
589 [label="83_ function allowance(address tokenOwner, address spender) external view returns (uint256) {\n        return allowance[tokenOwner][spender];\n    }\n589-function_definition-84-86", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
606 [label="84_ return allowance[tokenOwner][spender];\n606-return-85-85", method="allowance(address tokenOwner,address spender)", type_label=return];
612 [label="86_ function balanceOf(address tokenOwner) external view returns (uint256) {\n        return balances[tokenOwner];\n    }\n612-function_definition-87-89", method="balanceOf(address tokenOwner)", type_label=function_definition];
625 [label="87_ return balances[tokenOwner];\n625-return-88-88", method="balanceOf(address tokenOwner)", type_label=return];
629 [label="89_ function transfer(address to, uint256 tokenAmount) external returns (bool) {\n        _transfer(msg.sender, to, tokenAmount);\n        return true;\n    }\n629-function_definition-90-93", method="transfer(address to,uint256 tokenAmount)", type_label=function_definition];
645 [label="90_ _transfer(msg.sender, to, tokenAmount);\n645-expression_statement-91-91", method="transfer(address to,uint256 tokenAmount)", type_label=expression_statement];
656 [label="91_ return true;\n656-return-92-92", method="transfer(address to,uint256 tokenAmount)", type_label=return];
659 [label="93_ function transferFrom(address from, address to, uint256 tokenAmount) external returns (bool) {\n        require(tokenAmount <= allowance[from][msg.sender], NOT_ENOUGH_ALLOWANCE);\n        _transfer(from, to, tokenAmount);\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(tokenAmount);\n        return true;\n    }\n659-function_definition-94-99", method="transferFrom(address from,address to,uint256 tokenAmount)", type_label=function_definition];
679 [label="94_ require(tokenAmount <= allowance[from][msg.sender], NOT_ENOUGH_ALLOWANCE);\n679-expression_statement-95-95", method="transferFrom(address from,address to,uint256 tokenAmount)", type_label=expression_statement];
694 [label="95_ _transfer(from, to, tokenAmount);\n694-expression_statement-96-96", method="transferFrom(address from,address to,uint256 tokenAmount)", type_label=expression_statement];
703 [label="96_ allowance[from][msg.sender] = allowance[from][msg.sender].sub(tokenAmount);\n703-expression_statement-97-97", method="transferFrom(address from,address to,uint256 tokenAmount)", type_label=expression_statement];
724 [label="97_ return true;\n724-return-98-98", method="transferFrom(address from,address to,uint256 tokenAmount)", type_label=return];
727 [label="99_ function _transfer(address from, address to, uint256 tokenAmount) internal {\n        require(tokenAmount <= balances[from], NOT_ENOUGH_TOKENS);\n        require(to != address(0), ADDRESS_0_NOT_ALLOWED);\n        balances[from] = balances[from].sub(tokenAmount);\n        balances[to] = balances[to].add(tokenAmount);\n        emit Transfer(from, to, tokenAmount);\n    }\n727-function_definition-100-106", method="_transfer(address from,address to,uint256 tokenAmount)", type_label=function_definition];
743 [label="100_ require(tokenAmount <= balances[from], NOT_ENOUGH_TOKENS);\n743-expression_statement-101-101", method="_transfer(address from,address to,uint256 tokenAmount)", type_label=expression_statement];
754 [label="101_ require(to != address(0), ADDRESS_0_NOT_ALLOWED);\n754-expression_statement-102-102", method="_transfer(address from,address to,uint256 tokenAmount)", type_label=expression_statement];
765 [label="102_ balances[from] = balances[from].sub(tokenAmount);\n765-expression_statement-103-103", method="_transfer(address from,address to,uint256 tokenAmount)", type_label=expression_statement];
778 [label="103_ balances[to] = balances[to].add(tokenAmount);\n778-expression_statement-104-104", method="_transfer(address from,address to,uint256 tokenAmount)", type_label=expression_statement];
799 [label="106_ function approve(address spender, uint256 tokenAmount) external returns (bool success) {\n        return _approve(spender, tokenAmount);\n    }\n799-function_definition-107-109", method="approve(address spender,uint256 tokenAmount)", type_label=function_definition];
816 [label="107_ return _approve(spender, tokenAmount);\n816-return-108-108", method="approve(address spender,uint256 tokenAmount)", type_label=return];
823 [label="109_ function approveAndCall(address spender, uint256 tokenAmount, bytes extraData) external returns (bool success) {\n        tokenRecipient _spender = tokenRecipient(spender);\n        if (_approve(spender, tokenAmount)) {\n            _spender.receiveApproval(msg.sender, tokenAmount, this, extraData);\n            return true;\n        }\n        return false;\n    }\n823-function_definition-110-117", method="approveAndCall(address spender,uint256 tokenAmount,bytes extraData)", type_label=function_definition];
844 [label="110_ tokenRecipient _spender = tokenRecipient(spender);\n844-new_variable-111-111", method="approveAndCall(address spender,uint256 tokenAmount,bytes extraData)", type_label=new_variable];
854 [label="111_ if\n854-if-112-115", method="approveAndCall(address spender,uint256 tokenAmount,bytes extraData)", type_label=if];
1911 [label="111_ end_if", method="approveAndCall(address spender,uint256 tokenAmount,bytes extraData)", type_label=end_if];
862 [label="112_ _spender.receiveApproval(msg.sender, tokenAmount, this, extraData);\n862-expression_statement-113-113", method="approveAndCall(address spender,uint256 tokenAmount,bytes extraData)", type_label=expression_statement];
877 [label="113_ return true;\n877-return-114-114", method="approveAndCall(address spender,uint256 tokenAmount,bytes extraData)", type_label=return];
880 [label="115_ return false;\n880-return-116-116", method="approveAndCall(address spender,uint256 tokenAmount,bytes extraData)", type_label=return];
883 [label="117_ function _approve(address spender, uint256 tokenAmount) internal returns (bool success) {\n        allowance[msg.sender][spender] = tokenAmount;\n        emit Approval(msg.sender, spender, tokenAmount);\n        return true;\n    }\n883-function_definition-118-122", method="_approve(address spender,uint256 tokenAmount)", type_label=function_definition];
900 [label="118_ allowance[msg.sender][spender] = tokenAmount;\n900-expression_statement-119-119", method="_approve(address spender,uint256 tokenAmount)", type_label=expression_statement];
920 [label="120_ return true;\n920-return-121-121", method="_approve(address spender,uint256 tokenAmount)", type_label=return];
923 [label="122_ function burn(uint256 tokenAmount) external returns (bool success) {\n        _burn(msg.sender, tokenAmount);\n        return true;\n    }\n923-function_definition-123-126", method="burn(uint256 tokenAmount)", type_label=function_definition];
936 [label="123_ _burn(msg.sender, tokenAmount);\n936-expression_statement-124-124", method="burn(uint256 tokenAmount)", type_label=expression_statement];
945 [label="124_ return true;\n945-return-125-125", method="burn(uint256 tokenAmount)", type_label=return];
948 [label="126_ function burnFrom(address from, uint256 tokenAmount) public returns (bool success) {\n        require(tokenAmount <= allowance[from][msg.sender], NOT_ENOUGH_ALLOWANCE);\n        _burn(from, tokenAmount);\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(tokenAmount);\n        return true;\n    }\n948-function_definition-127-132", method="burnFrom(address from,uint256 tokenAmount)", type_label=function_definition];
965 [label="127_ require(tokenAmount <= allowance[from][msg.sender], NOT_ENOUGH_ALLOWANCE);\n965-expression_statement-128-128", method="burnFrom(address from,uint256 tokenAmount)", type_label=expression_statement];
980 [label="128_ _burn(from, tokenAmount);\n980-expression_statement-129-129", method="burnFrom(address from,uint256 tokenAmount)", type_label=expression_statement];
987 [label="129_ allowance[from][msg.sender] = allowance[from][msg.sender].sub(tokenAmount);\n987-expression_statement-130-130", method="burnFrom(address from,uint256 tokenAmount)", type_label=expression_statement];
1008 [label="130_ return true;\n1008-return-131-131", method="burnFrom(address from,uint256 tokenAmount)", type_label=return];
1011 [label="132_ function _burn(address from, uint256 tokenAmount) internal {\n        require(tokenAmount <= balances[from], NOT_ENOUGH_TOKENS);\n        balances[from] = balances[from].sub(tokenAmount);\n        totalSupply = totalSupply.sub(tokenAmount);\n        emit Burn(from, tokenAmount);\n    }\n1011-function_definition-133-138", method="_burn(address from,uint256 tokenAmount)", type_label=function_definition];
1023 [label="133_ require(tokenAmount <= balances[from], NOT_ENOUGH_TOKENS);\n1023-expression_statement-134-134", method="_burn(address from,uint256 tokenAmount)", type_label=expression_statement];
1034 [label="134_ balances[from] = balances[from].sub(tokenAmount);\n1034-expression_statement-135-135", method="_burn(address from,uint256 tokenAmount)", type_label=expression_statement];
1047 [label="135_ totalSupply = totalSupply.sub(tokenAmount);\n1047-expression_statement-136-136", method="_burn(address from,uint256 tokenAmount)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
205 -> 214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
250 -> 255  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
250 -> 1307  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1307 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 1307  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
255 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
257 -> 265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
265 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
279 -> 296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
296 -> 306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
306 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
316 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
351 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
353 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
370 -> 378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
388 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
390 -> 407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
435 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
441 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
470 -> 476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
530 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
560 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
578 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
587 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
589 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
612 -> 625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
625 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
629 -> 645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
645 -> 656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
656 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
659 -> 679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
694 -> 703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
724 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
727 -> 743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
743 -> 754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
754 -> 765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
765 -> 778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
823 -> 844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
844 -> 854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 862  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
854 -> 1911  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1911 -> 880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
862 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 1911  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
877 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
880 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
883 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
920 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
923 -> 936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
936 -> 945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
945 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
948 -> 965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
965 -> 980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
980 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1008 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1011 -> 1023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1023 -> 1034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1034 -> 1047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
