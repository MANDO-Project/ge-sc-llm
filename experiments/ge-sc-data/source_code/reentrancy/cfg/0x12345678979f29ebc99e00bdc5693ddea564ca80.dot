digraph  {
13 [label="2_ address constant ProxyAddress = 0x1234567896326230a28ee368825D11fE6571Be4a;\n13-new_variable-3-3", method="", type_label=new_variable];
18 [label="3_ address constant TreasuryAddress = 0x12345678979f29eBc99E00bdc5693ddEa564cA80;\n18-new_variable-4-4", method="", type_label=new_variable];
23 [label="4_ address constant RegistryAddress = 0x12345678982cB986Dd291B50239295E3Cb10Cdf6;\n23-new_variable-5-5", method="", type_label=new_variable];
28 [label="5_ function getRegistry() internal pure returns (RegistryInterface) {\n        return RegistryInterface(RegistryAddress);\n    }\n28-function_definition-6-8", method="getRegistry()", type_label=function_definition];
38 [label="6_ return RegistryInterface(RegistryAddress);\n38-return-7-7", method="getRegistry()", type_label=return];
46 [label="10_ function getOwner() external view returns (address);\n46-function_definition-11-11", method="getOwner()", type_label=function_definition];
54 [label="11_ function getExchangeContract() external view returns (address);\n54-function_definition-12-12", method="getExchangeContract()", type_label=function_definition];
62 [label="12_ function contractApproved(address traderAddr) external view returns (bool);\n62-function_definition-13-13", method="contractApproved(address traderAddr)", type_label=function_definition];
74 [label="13_ function contractApprovedBoth(address traderAddr1, address traderAddr2) external view returns (bool);\n74-function_definition-14-14", method="contractApprovedBoth(address traderAddr1,address traderAddr2)", type_label=function_definition];
90 [label="14_ function acceptNextExchangeContract() external;\n90-function_definition-15-15", method="acceptNextExchangeContract()", type_label=function_definition];
99 [label="17_ modifier onlyRegistryOwner() {\n        require (msg.sender == getRegistry().getOwner(), \"onlyRegistryOwner() method called by non-owner.\");\n        _;\n    }\n99-expression_statement-18-21", method="", type_label=expression_statement];
102 [label="18_ require (msg.sender == getRegistry().getOwner(), \"onlyRegistryOwner() method called by non-owner.\");\n102-expression_statement-19-19", method="", type_label=expression_statement];
118 [label="19_ _;\n118-expression_statement-20-20", method="", type_label=expression_statement];
120 [label="21_ modifier onlyApprovedExchange(address trader) {\n        require (msg.sender == ProxyAddress, \"onlyApprovedExchange() called not by exchange proxy.\");\n        require (getRegistry().contractApproved(trader), \"onlyApprovedExchange() requires approval of the latest contract code by trader.\");\n        _;\n    }\n120-expression_statement-22-26", method="", type_label=expression_statement];
127 [label="22_ require (msg.sender == ProxyAddress, \"onlyApprovedExchange() called not by exchange proxy.\");\n127-expression_statement-23-23", method="", type_label=expression_statement];
139 [label="23_ require (getRegistry().contractApproved(trader), \"onlyApprovedExchange() requires approval of the latest contract code by trader.\");\n139-expression_statement-24-24", method="", type_label=expression_statement];
153 [label="24_ _;\n153-expression_statement-25-25", method="", type_label=expression_statement];
155 [label="26_ modifier onlyApprovedExchangeBoth(address trader1, address trader2) {\n        require (msg.sender == ProxyAddress, \"onlyApprovedExchange() called not by exchange proxy.\");\n        require (getRegistry().contractApprovedBoth(trader1, trader2), \"onlyApprovedExchangeBoth() requires approval of the latest contract code by both traders.\");\n        _;\n    }\n155-expression_statement-27-31", method="", type_label=expression_statement];
166 [label="27_ require (msg.sender == ProxyAddress, \"onlyApprovedExchange() called not by exchange proxy.\");\n166-expression_statement-28-28", method="", type_label=expression_statement];
178 [label="28_ require (getRegistry().contractApprovedBoth(trader1, trader2), \"onlyApprovedExchangeBoth() requires approval of the latest contract code by both traders.\");\n178-expression_statement-29-29", method="", type_label=expression_statement];
194 [label="29_ _;\n194-expression_statement-30-30", method="", type_label=expression_statement];
199 [label="33_ function withdrawEther(address traderAddr, address payable withdrawalAddr, uint amount) external;\n199-function_definition-34-34", method="withdrawEther(address traderAddr,address payable withdrawalAddr,uint amount)", type_label=function_definition];
214 [label="34_ function withdrawERC20Token(uint16 tokenCode, address traderAddr, address withdrawalAddr, uint amount) external;\n214-function_definition-35-35", method="withdrawERC20Token(uint16 tokenCode,address traderAddr,address withdrawalAddr,uint amount)", type_label=function_definition];
233 [label="35_ function transferTokens(uint16 tokenCode, address fromAddr, address toAddr, uint amount) external;\n233-function_definition-36-36", method="transferTokens(uint16 tokenCode,address fromAddr,address toAddr,uint amount)", type_label=function_definition];
252 [label="36_ function transferTokensTwice(uint16 tokenCode, address fromAddr, address toAddr1, uint amount1, address toAddr2, uint amount2) external;\n252-function_definition-37-37", method="transferTokensTwice(uint16 tokenCode,address fromAddr,address toAddr1,uint amount1,address toAddr2,uint amount2)", type_label=function_definition];
279 [label="37_ function exchangeTokens(uint16 tokenCode1, uint16 tokenCode2, address addr1, address addr2, address addrFee, uint amount1, uint fee1, uint amount2, uint fee2) external;\n279-function_definition-38-38", method="exchangeTokens(uint16 tokenCode1,uint16 tokenCode2,address addr1,address addr2,address addrFee,uint amount1,uint fee1,uint amount2,uint fee2)", type_label=function_definition];
327 [label="40_ uint constant EMERGENCY_RELEASE_CHALLENGE_PERIOD = 2 days;\n327-new_variable-41-41", method="", type_label=new_variable];
333 [label="41_ bool active = false;\n333-new_variable-42-42", method="", type_label=new_variable];
339 [label="42_ mapping (uint16 => address) public tokenContracts;\n339-new_variable-43-43", method="", type_label=new_variable];
346 [label="43_ mapping (uint176 => uint) public tokenAmounts;\n346-new_variable-44-44", method="", type_label=new_variable];
421 [label="50_ mapping (address => uint) public emergencyReleaseSince;\n421-new_variable-51-51", method="", type_label=new_variable];
430 [label="53_ modifier onlyActive() {\n        require (active, \"Inactive treasury only allows withdrawals.\");\n        _;\n    }\n430-expression_statement-54-57", method="", type_label=expression_statement];
433 [label="54_ require (active, \"Inactive treasury only allows withdrawals.\");\n433-expression_statement-55-55", method="", type_label=expression_statement];
441 [label="55_ _;\n441-expression_statement-56-56", method="", type_label=expression_statement];
443 [label="57_ modifier emergencyReleasePossible(address trader) {\n        uint deadline = emergencyReleaseSince[trader];\n        require (deadline > 0 && block.timestamp > deadline, \"Challenge should be active and deadline expired.\");\n        _;\n    }\n443-expression_statement-58-62", method="", type_label=expression_statement];
450 [label="58_ uint deadline = emergencyReleaseSince[trader];\n450-new_variable-59-59", method="", type_label=new_variable];
458 [label="59_ require (deadline > 0 && block.timestamp > deadline, \"Challenge should be active and deadline expired.\");\n458-expression_statement-60-60", method="", type_label=expression_statement];
474 [label="60_ _;\n474-expression_statement-61-61", method="", type_label=expression_statement];
476 [label="62_ function setActive(bool _active) external onlyRegistryOwner() {\n        active = _active;\n        emit SetActive(active);\n    }\n476-function_definition-63-66", method="setActive(bool _active)", type_label=function_definition];
483 [label="62_ onlyRegistryOwner()\n483-expression_statement-63-63", method="setActive(bool _active)", type_label=expression_statement];
486 [label="63_ active = _active;\n486-expression_statement-64-64", method="setActive(bool _active)", type_label=expression_statement];
494 [label="66_ function changeTokenInfo(uint16 tokenCode, address tokenContract) external onlyRegistryOwner() {\n        require (tokenCode != 0,\n                 \"Token code of zero is reserved for Ether.\");\n        require (tokenContracts[tokenCode] == address(0),\n                 \"Token contract address can be assigned only once.\");\n        tokenContracts[tokenCode] = tokenContract;\n        emit ChangeTokenInfo(tokenCode, tokenContract);\n    }\n494-function_definition-67-74", method="changeTokenInfo(uint16 tokenCode,address tokenContract)", type_label=function_definition];
505 [label="66_ onlyRegistryOwner()\n505-expression_statement-67-67", method="changeTokenInfo(uint16 tokenCode,address tokenContract)", type_label=expression_statement];
508 [label="67_ require (tokenCode != 0,\n                 \"Token code of zero is reserved for Ether.\");\n508-expression_statement-68-69", method="changeTokenInfo(uint16 tokenCode,address tokenContract)", type_label=expression_statement];
518 [label="69_ require (tokenContracts[tokenCode] == address(0),\n                 \"Token contract address can be assigned only once.\");\n518-expression_statement-70-71", method="changeTokenInfo(uint16 tokenCode,address tokenContract)", type_label=expression_statement];
532 [label="71_ tokenContracts[tokenCode] = tokenContract;\n532-expression_statement-72-72", method="changeTokenInfo(uint16 tokenCode,address tokenContract)", type_label=expression_statement];
544 [label="74_ function startEmergencyRelease() external {\n        emergencyReleaseSince[msg.sender] = block.timestamp + EMERGENCY_RELEASE_CHALLENGE_PERIOD;\n        emit StartEmergencyRelease(msg.sender);\n    }\n544-function_definition-75-78", method="startEmergencyRelease()", type_label=function_definition];
548 [label="75_ emergencyReleaseSince[msg.sender] = block.timestamp + EMERGENCY_RELEASE_CHALLENGE_PERIOD;\n548-expression_statement-76-76", method="startEmergencyRelease()", type_label=expression_statement];
566 [label="78_ function resetEmergencyRelease(address traderAddr) private {\n        if (emergencyReleaseSince[traderAddr] != 0) {\n            emergencyReleaseSince[traderAddr] = 0;\n        }\n    }\n566-function_definition-79-83", method="resetEmergencyRelease(address traderAddr)", type_label=function_definition];
574 [label="79_ if_emergencyReleaseSince[traderAddr] != 0\n574-if-80-82", method="resetEmergencyRelease(address traderAddr)", type_label=if];
2096 [label="79_ end_if", method="resetEmergencyRelease(address traderAddr)", type_label=end_if];
581 [label="80_ emergencyReleaseSince[traderAddr] = 0;\n581-expression_statement-81-81", method="resetEmergencyRelease(address traderAddr)", type_label=expression_statement];
587 [label="83_ function depositEther(address account) external payable {\n        emit Deposit(0, account, msg.value);\n        addBalance(0, account, msg.value);\n    }\n587-function_definition-84-87", method="depositEther(address account)", type_label=function_definition];
606 [label="85_ addBalance(0, account, msg.value);\n606-expression_statement-86-86", method="depositEther(address account)", type_label=expression_statement];
617 [label="87_ function depositERC20Token(uint176 tokenAccount, uint amount) external {\n        uint16 tokenCode = uint16(tokenAccount >> 160);\n        address tokenContract = tokenContracts[tokenCode];\n        require (tokenContract != address(0), \"Registered token contract.\");\n        require (safeTransferFrom(tokenContract, msg.sender, address(this), amount),\n                 \"Could not transfer ERC-20 tokens using transferFrom.\");\n        address account = address(tokenAccount);\n        emit Deposit(tokenCode, account, amount);\n        addBalance(tokenCode, account, amount);\n    }\n617-function_definition-88-97", method="depositERC20Token(uint176 tokenAccount,uint amount)", type_label=function_definition];
629 [label="88_ uint16 tokenCode = uint16(tokenAccount >> 160);\n629-new_variable-89-89", method="depositERC20Token(uint176 tokenAccount,uint amount)", type_label=new_variable];
639 [label="89_ address tokenContract = tokenContracts[tokenCode];\n639-new_variable-90-90", method="depositERC20Token(uint176 tokenAccount,uint amount)", type_label=new_variable];
647 [label="90_ require (tokenContract != address(0), \"Registered token contract.\");\n647-expression_statement-91-91", method="depositERC20Token(uint176 tokenAccount,uint amount)", type_label=expression_statement];
659 [label="91_ require (safeTransferFrom(tokenContract, msg.sender, address(this), amount),\n                 \"Could not transfer ERC-20 tokens using transferFrom.\");\n659-expression_statement-92-93", method="depositERC20Token(uint176 tokenAccount,uint amount)", type_label=expression_statement];
680 [label="93_ address account = address(tokenAccount);\n680-new_variable-94-94", method="depositERC20Token(uint176 tokenAccount,uint amount)", type_label=new_variable];
696 [label="95_ addBalance(tokenCode, account, amount);\n696-expression_statement-96-96", method="depositERC20Token(uint176 tokenAccount,uint amount)", type_label=expression_statement];
705 [label="97_ function emergencyReleaseEther() external emergencyReleasePossible(msg.sender) {\n        uint amount = deductFullBalance(0, msg.sender);\n        emit EmergencyRelease(0, msg.sender, amount);\n        msg.sender.transfer(amount);\n    }\n705-function_definition-98-102", method="emergencyReleaseEther()", type_label=function_definition];
708 [label="97_ emergencyReleasePossible(msg.sender)\n708-expression_statement-98-98", method="emergencyReleaseEther()", type_label=expression_statement];
715 [label="98_ uint amount = deductFullBalance(0, msg.sender);\n715-new_variable-99-99", method="emergencyReleaseEther()", type_label=new_variable];
738 [label="100_ msg.sender.transfer(amount);\n738-expression_statement-101-101", method="emergencyReleaseEther()", type_label=expression_statement];
747 [label="102_ function emergencyReleaseERC20Token(uint16 tokenCode) external emergencyReleasePossible(msg.sender) {\n        uint amount = deductFullBalance(tokenCode, msg.sender);\n        emit EmergencyRelease(tokenCode, msg.sender, amount);\n        address tokenContract = tokenContracts[tokenCode];\n        require (tokenContract != address(0), \"Registered token contract.\");\n        require (safeTransfer(tokenContract, msg.sender, amount),\n                 \"Could not transfer ERC-20 tokens using transfer.\");\n    }\n747-function_definition-103-110", method="emergencyReleaseERC20Token(uint16 tokenCode)", type_label=function_definition];
754 [label="102_ emergencyReleasePossible(msg.sender)\n754-expression_statement-103-103", method="emergencyReleaseERC20Token(uint16 tokenCode)", type_label=expression_statement];
761 [label="103_ uint amount = deductFullBalance(tokenCode, msg.sender);\n761-new_variable-104-104", method="emergencyReleaseERC20Token(uint16 tokenCode)", type_label=new_variable];
784 [label="105_ address tokenContract = tokenContracts[tokenCode];\n784-new_variable-106-106", method="emergencyReleaseERC20Token(uint16 tokenCode)", type_label=new_variable];
792 [label="106_ require (tokenContract != address(0), \"Registered token contract.\");\n792-expression_statement-107-107", method="emergencyReleaseERC20Token(uint16 tokenCode)", type_label=expression_statement];
804 [label="107_ require (safeTransfer(tokenContract, msg.sender, amount),\n                 \"Could not transfer ERC-20 tokens using transfer.\");\n804-expression_statement-108-109", method="emergencyReleaseERC20Token(uint16 tokenCode)", type_label=expression_statement];
821 [label="110_ function withdrawEther(address traderAddr, address payable withdrawalAddr, uint amount) external\n        onlyActive()\n        onlyApprovedExchange(traderAddr) {\n        deductBalance(0, traderAddr, amount);\n        resetEmergencyRelease(traderAddr);\n        emit Withdrawal(0, traderAddr, withdrawalAddr, amount);\n        withdrawalAddr.transfer(amount);\n    }\n821-function_definition-111-118", method="withdrawEther(address traderAddr,address payable withdrawalAddr,uint amount)", type_label=function_definition];
836 [label="111_ onlyActive()\n836-expression_statement-112-112", method="withdrawEther(address traderAddr,address payable withdrawalAddr,uint amount)", type_label=expression_statement];
838 [label="112_ onlyApprovedExchange(traderAddr)\n838-expression_statement-113-113", method="withdrawEther(address traderAddr,address payable withdrawalAddr,uint amount)", type_label=expression_statement];
843 [label="113_ deductBalance(0, traderAddr, amount);\n843-expression_statement-114-114", method="withdrawEther(address traderAddr,address payable withdrawalAddr,uint amount)", type_label=expression_statement];
852 [label="114_ resetEmergencyRelease(traderAddr);\n852-expression_statement-115-115", method="withdrawEther(address traderAddr,address payable withdrawalAddr,uint amount)", type_label=expression_statement];
867 [label="116_ withdrawalAddr.transfer(amount);\n867-expression_statement-117-117", method="withdrawEther(address traderAddr,address payable withdrawalAddr,uint amount)", type_label=expression_statement];
874 [label="118_ function withdrawERC20Token(uint16 tokenCode, address traderAddr, address withdrawalAddr, uint amount) external\n        onlyActive()\n        onlyApprovedExchange(traderAddr) {\n        deductBalance(tokenCode, traderAddr, amount);\n        resetEmergencyRelease(traderAddr);\n        address tokenContract = tokenContracts[tokenCode];\n        require (tokenContract != address(0), \"Registered token contract.\");\n        require (safeTransfer(tokenContract, withdrawalAddr, amount),\n                 \"Could not transfer ERC-20 tokens using transfer.\");\n        emit Withdrawal(tokenCode, traderAddr, withdrawalAddr, amount);\n    }\n874-function_definition-119-129", method="withdrawERC20Token(uint16 tokenCode,address traderAddr,address withdrawalAddr,uint amount)", type_label=function_definition];
893 [label="119_ onlyActive()\n893-expression_statement-120-120", method="withdrawERC20Token(uint16 tokenCode,address traderAddr,address withdrawalAddr,uint amount)", type_label=expression_statement];
895 [label="120_ onlyApprovedExchange(traderAddr)\n895-expression_statement-121-121", method="withdrawERC20Token(uint16 tokenCode,address traderAddr,address withdrawalAddr,uint amount)", type_label=expression_statement];
900 [label="121_ deductBalance(tokenCode, traderAddr, amount);\n900-expression_statement-122-122", method="withdrawERC20Token(uint16 tokenCode,address traderAddr,address withdrawalAddr,uint amount)", type_label=expression_statement];
909 [label="122_ resetEmergencyRelease(traderAddr);\n909-expression_statement-123-123", method="withdrawERC20Token(uint16 tokenCode,address traderAddr,address withdrawalAddr,uint amount)", type_label=expression_statement];
914 [label="123_ address tokenContract = tokenContracts[tokenCode];\n914-new_variable-124-124", method="withdrawERC20Token(uint16 tokenCode,address traderAddr,address withdrawalAddr,uint amount)", type_label=new_variable];
922 [label="124_ require (tokenContract != address(0), \"Registered token contract.\");\n922-expression_statement-125-125", method="withdrawERC20Token(uint16 tokenCode,address traderAddr,address withdrawalAddr,uint amount)", type_label=expression_statement];
934 [label="125_ require (safeTransfer(tokenContract, withdrawalAddr, amount),\n                 \"Could not transfer ERC-20 tokens using transfer.\");\n934-expression_statement-126-127", method="withdrawERC20Token(uint16 tokenCode,address traderAddr,address withdrawalAddr,uint amount)", type_label=expression_statement];
959 [label="129_ function transferTokens(uint16 tokenCode, address fromAddr, address toAddr, uint amount) external\n        onlyActive() onlyApprovedExchange(fromAddr) {\n        resetEmergencyRelease(fromAddr);\n        deductBalance(tokenCode, fromAddr, amount);\n        addBalance(tokenCode, toAddr, amount);\n    }\n959-function_definition-130-135", method="transferTokens(uint16 tokenCode,address fromAddr,address toAddr,uint amount)", type_label=function_definition];
978 [label="130_ onlyActive()\n978-expression_statement-131-131", method="transferTokens(uint16 tokenCode,address fromAddr,address toAddr,uint amount)", type_label=expression_statement];
980 [label="130_ onlyApprovedExchange(fromAddr)\n980-expression_statement-131-131", method="transferTokens(uint16 tokenCode,address fromAddr,address toAddr,uint amount)", type_label=expression_statement];
985 [label="131_ resetEmergencyRelease(fromAddr);\n985-expression_statement-132-132", method="transferTokens(uint16 tokenCode,address fromAddr,address toAddr,uint amount)", type_label=expression_statement];
990 [label="132_ deductBalance(tokenCode, fromAddr, amount);\n990-expression_statement-133-133", method="transferTokens(uint16 tokenCode,address fromAddr,address toAddr,uint amount)", type_label=expression_statement];
999 [label="133_ addBalance(tokenCode, toAddr, amount);\n999-expression_statement-134-134", method="transferTokens(uint16 tokenCode,address fromAddr,address toAddr,uint amount)", type_label=expression_statement];
1008 [label="135_ function transferTokensTwice(uint16 tokenCode, address fromAddr, address toAddr1, uint amount1, address toAddr2, uint amount2) external\n        onlyActive() onlyApprovedExchange(fromAddr) {\n        resetEmergencyRelease(fromAddr);\n        deductBalance(tokenCode, fromAddr, amount1 + amount2);\n        addBalance(tokenCode, toAddr1, amount1);\n        addBalance(tokenCode, toAddr2, amount2);\n    }\n1008-function_definition-136-142", method="transferTokensTwice(uint16 tokenCode,address fromAddr,address toAddr1,uint amount1,address toAddr2,uint amount2)", type_label=function_definition];
1035 [label="136_ onlyActive()\n1035-expression_statement-137-137", method="transferTokensTwice(uint16 tokenCode,address fromAddr,address toAddr1,uint amount1,address toAddr2,uint amount2)", type_label=expression_statement];
1037 [label="136_ onlyApprovedExchange(fromAddr)\n1037-expression_statement-137-137", method="transferTokensTwice(uint16 tokenCode,address fromAddr,address toAddr1,uint amount1,address toAddr2,uint amount2)", type_label=expression_statement];
1042 [label="137_ resetEmergencyRelease(fromAddr);\n1042-expression_statement-138-138", method="transferTokensTwice(uint16 tokenCode,address fromAddr,address toAddr1,uint amount1,address toAddr2,uint amount2)", type_label=expression_statement];
1047 [label="138_ deductBalance(tokenCode, fromAddr, amount1 + amount2);\n1047-expression_statement-139-139", method="transferTokensTwice(uint16 tokenCode,address fromAddr,address toAddr1,uint amount1,address toAddr2,uint amount2)", type_label=expression_statement];
1058 [label="139_ addBalance(tokenCode, toAddr1, amount1);\n1058-expression_statement-140-140", method="transferTokensTwice(uint16 tokenCode,address fromAddr,address toAddr1,uint amount1,address toAddr2,uint amount2)", type_label=expression_statement];
1067 [label="140_ addBalance(tokenCode, toAddr2, amount2);\n1067-expression_statement-141-141", method="transferTokensTwice(uint16 tokenCode,address fromAddr,address toAddr1,uint amount1,address toAddr2,uint amount2)", type_label=expression_statement];
1076 [label="142_ function exchangeTokens(\n        uint16 tokenCode1, uint16 tokenCode2,\n        address addr1, address addr2, address addrFee,\n        uint amount1, uint fee1,\n        uint amount2, uint fee2) external onlyActive() onlyApprovedExchangeBoth(addr1, addr2) {\n        resetEmergencyRelease(addr1);\n        resetEmergencyRelease(addr2);\n        deductBalance(tokenCode1, addr1, amount1 + fee1);\n        deductBalance(tokenCode2, addr2, amount2 + fee2);\n        addBalance(tokenCode1, addr2, amount1);\n        addBalance(tokenCode2, addr1, amount2);\n        addBalance(tokenCode1, addrFee, fee1);\n        addBalance(tokenCode2, addrFee, fee2);\n    }\n1076-function_definition-143-156", method="exchangeTokens(uint16 tokenCode1,uint16 tokenCode2,address addr1,address addr2,address addrFee,uint amount1,uint fee1,uint amount2,uint fee2)", type_label=function_definition];
1115 [label="146_ onlyActive()\n1115-expression_statement-147-147", method="exchangeTokens(uint16 tokenCode1,uint16 tokenCode2,address addr1,address addr2,address addrFee,uint amount1,uint fee1,uint amount2,uint fee2)", type_label=expression_statement];
1117 [label="146_ onlyApprovedExchangeBoth(addr1, addr2)\n1117-expression_statement-147-147", method="exchangeTokens(uint16 tokenCode1,uint16 tokenCode2,address addr1,address addr2,address addrFee,uint amount1,uint fee1,uint amount2,uint fee2)", type_label=expression_statement];
1124 [label="147_ resetEmergencyRelease(addr1);\n1124-expression_statement-148-148", method="exchangeTokens(uint16 tokenCode1,uint16 tokenCode2,address addr1,address addr2,address addrFee,uint amount1,uint fee1,uint amount2,uint fee2)", type_label=expression_statement];
1129 [label="148_ resetEmergencyRelease(addr2);\n1129-expression_statement-149-149", method="exchangeTokens(uint16 tokenCode1,uint16 tokenCode2,address addr1,address addr2,address addrFee,uint amount1,uint fee1,uint amount2,uint fee2)", type_label=expression_statement];
1134 [label="149_ deductBalance(tokenCode1, addr1, amount1 + fee1);\n1134-expression_statement-150-150", method="exchangeTokens(uint16 tokenCode1,uint16 tokenCode2,address addr1,address addr2,address addrFee,uint amount1,uint fee1,uint amount2,uint fee2)", type_label=expression_statement];
1145 [label="150_ deductBalance(tokenCode2, addr2, amount2 + fee2);\n1145-expression_statement-151-151", method="exchangeTokens(uint16 tokenCode1,uint16 tokenCode2,address addr1,address addr2,address addrFee,uint amount1,uint fee1,uint amount2,uint fee2)", type_label=expression_statement];
1156 [label="151_ addBalance(tokenCode1, addr2, amount1);\n1156-expression_statement-152-152", method="exchangeTokens(uint16 tokenCode1,uint16 tokenCode2,address addr1,address addr2,address addrFee,uint amount1,uint fee1,uint amount2,uint fee2)", type_label=expression_statement];
1165 [label="152_ addBalance(tokenCode2, addr1, amount2);\n1165-expression_statement-153-153", method="exchangeTokens(uint16 tokenCode1,uint16 tokenCode2,address addr1,address addr2,address addrFee,uint amount1,uint fee1,uint amount2,uint fee2)", type_label=expression_statement];
1174 [label="153_ addBalance(tokenCode1, addrFee, fee1);\n1174-expression_statement-154-154", method="exchangeTokens(uint16 tokenCode1,uint16 tokenCode2,address addr1,address addr2,address addrFee,uint amount1,uint fee1,uint amount2,uint fee2)", type_label=expression_statement];
1183 [label="154_ addBalance(tokenCode2, addrFee, fee2);\n1183-expression_statement-155-155", method="exchangeTokens(uint16 tokenCode1,uint16 tokenCode2,address addr1,address addr2,address addrFee,uint amount1,uint fee1,uint amount2,uint fee2)", type_label=expression_statement];
1192 [label="156_ function deductBalance(uint tokenCode, address addr, uint amount) private {\n        uint176 tokenAccount = uint176(tokenCode) << 160 | uint176(addr);\n        uint before = tokenAmounts[tokenAccount];\n        require (before >= amount, \"Enough funds.\");\n        tokenAmounts[tokenAccount] = before - amount;\n    }\n1192-function_definition-157-162", method="deductBalance(uint tokenCode,address addr,uint amount)", type_label=function_definition];
1208 [label="157_ uint176 tokenAccount = uint176(tokenCode) << 160 | uint176(addr);\n1208-new_variable-158-158", method="deductBalance(uint tokenCode,address addr,uint amount)", type_label=new_variable];
1222 [label="158_ uint before = tokenAmounts[tokenAccount];\n1222-new_variable-159-159", method="deductBalance(uint tokenCode,address addr,uint amount)", type_label=new_variable];
1230 [label="159_ require (before >= amount, \"Enough funds.\");\n1230-expression_statement-160-160", method="deductBalance(uint tokenCode,address addr,uint amount)", type_label=expression_statement];
1240 [label="160_ tokenAmounts[tokenAccount] = before - amount;\n1240-expression_statement-161-161", method="deductBalance(uint tokenCode,address addr,uint amount)", type_label=expression_statement];
1248 [label="162_ function deductFullBalance(uint tokenCode, address addr) private returns (uint amount) {\n        uint176 tokenAccount = uint176(tokenCode) << 160 | uint176(addr);\n        amount = tokenAmounts[tokenAccount];\n        tokenAmounts[tokenAccount] = 0;\n    }\n1248-function_definition-163-167", method="deductFullBalance(uint tokenCode,address addr)", type_label=function_definition];
1265 [label="163_ uint176 tokenAccount = uint176(tokenCode) << 160 | uint176(addr);\n1265-new_variable-164-164", method="deductFullBalance(uint tokenCode,address addr)", type_label=new_variable];
1279 [label="164_ amount = tokenAmounts[tokenAccount];\n1279-expression_statement-165-165", method="deductFullBalance(uint tokenCode,address addr)", type_label=expression_statement];
1285 [label="165_ tokenAmounts[tokenAccount] = 0;\n1285-expression_statement-166-166", method="deductFullBalance(uint tokenCode,address addr)", type_label=expression_statement];
1291 [label="167_ function addBalance(uint tokenCode, address addr, uint amount) private {\n        uint176 tokenAccount = uint176(tokenCode) << 160 | uint176(addr);\n        uint before = tokenAmounts[tokenAccount];\n        require (before + amount >= before, \"No overflow.\");\n        tokenAmounts[tokenAccount] = before + amount;\n    }\n1291-function_definition-168-173", method="addBalance(uint tokenCode,address addr,uint amount)", type_label=function_definition];
1307 [label="168_ uint176 tokenAccount = uint176(tokenCode) << 160 | uint176(addr);\n1307-new_variable-169-169", method="addBalance(uint tokenCode,address addr,uint amount)", type_label=new_variable];
1321 [label="169_ uint before = tokenAmounts[tokenAccount];\n1321-new_variable-170-170", method="addBalance(uint tokenCode,address addr,uint amount)", type_label=new_variable];
1329 [label="170_ require (before + amount >= before, \"No overflow.\");\n1329-expression_statement-171-171", method="addBalance(uint tokenCode,address addr,uint amount)", type_label=expression_statement];
1341 [label="171_ tokenAmounts[tokenAccount] = before + amount;\n1341-expression_statement-172-172", method="addBalance(uint tokenCode,address addr,uint amount)", type_label=expression_statement];
1349 [label="173_ function safeTransfer(address tokenContract, address to, uint value) internal returns (bool success)\n    {\n        (bool call_success, bytes memory return_data) = tokenContract.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        success = false;\n        if (call_success) {\n            if (return_data.length == 0) {\n                success = true;\n            } else if (return_data.length == 32) {\n                assembly { success := mload(add(return_data, 0x20)) }\n            }\n        }\n    }\n1349-function_definition-174-185", method="safeTransfer(address tokenContract,address to,uint value)", type_label=function_definition];
1370 [label="175_ (bool call_success, bytes memory return_data) = tokenContract.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n1370-new_variable-176-176", method="safeTransfer(address tokenContract,address to,uint value)", type_label=new_variable];
1395 [label="176_ success = false;\n1395-expression_statement-177-177", method="safeTransfer(address tokenContract,address to,uint value)", type_label=expression_statement];
1400 [label="177_ if\n1400-if-178-184", method="safeTransfer(address tokenContract,address to,uint value)", type_label=if];
2922 [label="177_ end_if", method="safeTransfer(address tokenContract,address to,uint value)", type_label=end_if];
1403 [label="178_ if_return_data.length == 0\n1403-if-179-183", method="safeTransfer(address tokenContract,address to,uint value)", type_label=if];
2925 [label="178_ end_if", method="safeTransfer(address tokenContract,address to,uint value)", type_label=end_if];
1410 [label="179_ success = true;\n1410-expression_statement-180-180", method="safeTransfer(address tokenContract,address to,uint value)", type_label=expression_statement];
1415 [label="180_ if_return_data.length == 32\n1415-if-181-183", method="safeTransfer(address tokenContract,address to,uint value)", type_label=if];
1435 [label="185_ function safeTransferFrom(address tokenContract, address from, address to, uint value) internal returns (bool success)\n    {\n        (bool call_success, bytes memory return_data) = tokenContract.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        success = false;\n        if (call_success) {\n            if (return_data.length == 0) {\n                success = true;\n            } else if (return_data.length == 32) {\n                assembly { success := mload(add(return_data, 0x20)) }\n            }\n        }\n    }\n1435-function_definition-186-197", method="safeTransferFrom(address tokenContract,address from,address to,uint value)", type_label=function_definition];
1460 [label="187_ (bool call_success, bytes memory return_data) = tokenContract.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n1460-new_variable-188-188", method="safeTransferFrom(address tokenContract,address from,address to,uint value)", type_label=new_variable];
1487 [label="188_ success = false;\n1487-expression_statement-189-189", method="safeTransferFrom(address tokenContract,address from,address to,uint value)", type_label=expression_statement];
1492 [label="189_ if\n1492-if-190-196", method="safeTransferFrom(address tokenContract,address from,address to,uint value)", type_label=if];
3014 [label="189_ end_if", method="safeTransferFrom(address tokenContract,address from,address to,uint value)", type_label=end_if];
1495 [label="190_ if_return_data.length == 0\n1495-if-191-195", method="safeTransferFrom(address tokenContract,address from,address to,uint value)", type_label=if];
3017 [label="190_ end_if", method="safeTransferFrom(address tokenContract,address from,address to,uint value)", type_label=end_if];
1502 [label="191_ success = true;\n1502-expression_statement-192-192", method="safeTransferFrom(address tokenContract,address from,address to,uint value)", type_label=expression_statement];
1507 [label="192_ if_return_data.length == 32\n1507-if-193-195", method="safeTransferFrom(address tokenContract,address from,address to,uint value)", type_label=if];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1422;
1514;
13 -> 18  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
18 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
28 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
99 -> 120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
102 -> 118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
166 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
327 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
508 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
566 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
574 -> 581  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
574 -> 2096  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2096 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
581 -> 2096  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
587 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
629 -> 639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
647 -> 659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
659 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
747 -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
784 -> 792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
792 -> 804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
843 -> 852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
874 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
893 -> 895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
909 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
959 -> 985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
978 -> 980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
990 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1008 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1035 -> 1037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 1047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1047 -> 1058  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1058 -> 1067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 1124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1115 -> 1117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1124 -> 1129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 1134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1134 -> 1145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1145 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1156 -> 1165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 1174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1174 -> 1183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1192 -> 1208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1208 -> 1222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1222 -> 1230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1230 -> 1240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1248 -> 1265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1265 -> 1279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1279 -> 1285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1291 -> 1307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1307 -> 1321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1321 -> 1329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1329 -> 1341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1349 -> 1370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1370 -> 1395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1395 -> 1400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1400 -> 1403  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1400 -> 2922  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1403 -> 1410  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1403 -> 1415  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2925 -> 1435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1410 -> 2925  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1415 -> 2925  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1435 -> 1460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1460 -> 1487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1487 -> 1492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1492 -> 1495  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1492 -> 3014  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1495 -> 1502  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1495 -> 1507  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3017 -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1502 -> 3017  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1507 -> 3017  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1422 -> 2925  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1514 -> 3017  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
