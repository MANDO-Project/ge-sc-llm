digraph  {
13 [label="2_ uint256 constant private MAX_UINT256 =\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n13-new_variable-3-4", method="", type_label=new_variable];
19 [label="4_ function safeAdd (uint256 x, uint256 y) \n internal pure returns (uint256 z) {\n    require (x <= MAX_UINT256 - y);\n    return x + y;\n  }\n19-function_definition-5-9", method="safeAdd(uint256 x,uint256 y)", type_label=function_definition];
37 [label="6_ require (x <= MAX_UINT256 - y);\n37-expression_statement-7-7", method="safeAdd(uint256 x,uint256 y)", type_label=expression_statement];
46 [label="7_ return x + y;\n46-return-8-8", method="safeAdd(uint256 x,uint256 y)", type_label=return];
50 [label="9_ function safeSub (uint256 x, uint256 y)\n   internal pure\n  returns (uint256 z) {\n    require(x >= y);\n    return x - y;\n  }\n50-function_definition-10-15", method="safeSub(uint256 x,uint256 y)", type_label=function_definition];
68 [label="12_ require(x >= y);\n68-expression_statement-13-13", method="safeSub(uint256 x,uint256 y)", type_label=expression_statement];
75 [label="13_ return x - y;\n75-return-14-14", method="safeSub(uint256 x,uint256 y)", type_label=return];
79 [label="15_ function safeMul (uint256 x, uint256 y)\ninternal pure returns (uint256 z) {\n    if (y == 0) return 0;  \n    require (x <= MAX_UINT256 / y);\n    return x * y;\n  }\n79-function_definition-16-21", method="safeMul(uint256 x,uint256 y)", type_label=function_definition];
97 [label="17_ if_y == 0\n97-if-18-18", method="safeMul(uint256 x,uint256 y)", type_label=if];
1098 [label="17_ end_if", method="safeMul(uint256 x,uint256 y)", type_label=end_if];
101 [label="17_ return 0;\n101-return-18-18", method="safeMul(uint256 x,uint256 y)", type_label=return];
103 [label="18_ require (x <= MAX_UINT256 / y);\n103-expression_statement-19-19", method="safeMul(uint256 x,uint256 y)", type_label=expression_statement];
112 [label="19_ return x * y;\n112-return-20-20", method="safeMul(uint256 x,uint256 y)", type_label=return];
119 [label="23_ function totalSupply() public constant returns (uint256 supply);\n119-function_definition-24-24", method="totalSupply()", type_label=function_definition];
122 [label="23_ constant\n122-expression_statement-24-24", method="totalSupply()", type_label=expression_statement];
129 [label="24_ function balanceOf (address _owner) public constant returns (uint256 balance);\n129-function_definition-25-25", method="balanceOf(address _owner)", type_label=function_definition];
136 [label="24_ constant\n136-expression_statement-25-25", method="balanceOf(address _owner)", type_label=expression_statement];
143 [label="25_ function transfer (address _to, uint256 _value) public  returns (bool success);\n143-function_definition-26-26", method="transfer(address _to,uint256 _value)", type_label=function_definition];
159 [label="26_ function transferFrom (address _from, address _to, uint256 _value) public \n  returns (bool success);\n159-function_definition-27-28", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
179 [label="28_ function approve (address _spender, uint256 _value) public  returns (bool success);\n179-function_definition-29-29", method="approve(address _spender,uint256 _value)", type_label=function_definition];
195 [label="29_ function allowance (address _owner, address _spender) public constant\n  returns (uint256 remaining);\n195-function_definition-30-31", method="allowance(address _owner,address _spender)", type_label=function_definition];
206 [label="29_ constant\n206-expression_statement-30-30", method="allowance(address _owner,address _spender)", type_label=expression_statement];
250 [label="36_ address fund;\n250-new_variable-37-37", method="", type_label=new_variable];
254 [label="37_ function AbstractToken () public  {\n  }\n254-function_definition-38-39", method="AbstractToken()", type_label=function_definition];
258 [label="39_ function balanceOf (address _owner) public constant returns (uint256 balance) {\n    return accounts [_owner];\n  }\n258-function_definition-40-42", method="balanceOf(address _owner)", type_label=function_definition];
265 [label="39_ constant\n265-expression_statement-40-40", method="balanceOf(address _owner)", type_label=expression_statement];
273 [label="40_ return accounts [_owner];\n273-return-41-41", method="balanceOf(address _owner)", type_label=return];
277 [label="42_ function transfer (address _to, uint256 _value) public returns (bool success) {\n    uint256 feeTotal = fee();\n    if (accounts [msg.sender] < _value) return false;\n    if (_value > feeTotal && msg.sender != _to) {\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n      accounts [_to] = safeAdd (accounts [_to], safeSub(_value, feeTotal));\n      processFee(feeTotal);\n      Transfer (msg.sender, _to, safeSub(_value, feeTotal));\n    }\n    return true;\n  }\n277-function_definition-43-53", method="transfer(address _to,uint256 _value)", type_label=function_definition];
294 [label="43_ uint256 feeTotal = fee();\n294-new_variable-44-44", method="transfer(address _to,uint256 _value)", type_label=new_variable];
301 [label="44_ if_accounts [msg.sender] < _value\n301-if-45-45", method="transfer(address _to,uint256 _value)", type_label=if];
1302 [label="44_ end_if", method="transfer(address _to,uint256 _value)", type_label=end_if];
309 [label="44_ return false;\n309-return-45-45", method="transfer(address _to,uint256 _value)", type_label=return];
312 [label="45_ if__value > feeTotal && msg.sender != _to\n312-if-46-51", method="transfer(address _to,uint256 _value)", type_label=if];
1313 [label="45_ end_if", method="transfer(address _to,uint256 _value)", type_label=end_if];
323 [label="46_ accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n323-expression_statement-47-47", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
340 [label="47_ accounts [_to] = safeAdd (accounts [_to], safeSub(_value, feeTotal));\n340-expression_statement-48-48", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
358 [label="48_ processFee(feeTotal);\n358-expression_statement-49-49", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
363 [label="49_ Transfer (msg.sender, _to, safeSub(_value, feeTotal));\n363-expression_statement-50-50", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
379 [label="51_ return true;\n379-return-52-52", method="transfer(address _to,uint256 _value)", type_label=return];
382 [label="53_ function transferFrom (address _from, address _to, uint256 _value) public\n  returns (bool success) {\n    uint256 feeTotal = fee();\n    if (allowances [_from][msg.sender] < _value) return false;\n    if (accounts [_from] < _value) return false;\n    allowances [_from][msg.sender] =\n      safeSub (allowances [_from][msg.sender], _value);\n    if (_value > feeTotal && _from != _to) {\n      accounts [_from] = safeSub (accounts [_from], _value);\n      accounts [_to] = safeAdd (accounts [_to], safeSub(_value, feeTotal));\n      processFee(feeTotal);\n      Transfer (_from, _to, safeSub(_value, feeTotal));\n    }\n    return true;\n  }\n382-function_definition-54-68", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
403 [label="55_ uint256 feeTotal = fee();\n403-new_variable-56-56", method="transferFrom(address _from,address _to,uint256 _value)", type_label=new_variable];
410 [label="56_ if_allowances [_from][msg.sender] < _value\n410-if-57-57", method="transferFrom(address _from,address _to,uint256 _value)", type_label=if];
1411 [label="56_ end_if", method="transferFrom(address _from,address _to,uint256 _value)", type_label=end_if];
420 [label="56_ return false;\n420-return-57-57", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
423 [label="57_ if_accounts [_from] < _value\n423-if-58-58", method="transferFrom(address _from,address _to,uint256 _value)", type_label=if];
1424 [label="57_ end_if", method="transferFrom(address _from,address _to,uint256 _value)", type_label=end_if];
429 [label="57_ return false;\n429-return-58-58", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
432 [label="58_ allowances [_from][msg.sender] =\n      safeSub (allowances [_from][msg.sender], _value);\n432-expression_statement-59-60", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
453 [label="60_ if__value > feeTotal && _from != _to\n453-if-61-66", method="transferFrom(address _from,address _to,uint256 _value)", type_label=if];
1454 [label="60_ end_if", method="transferFrom(address _from,address _to,uint256 _value)", type_label=end_if];
462 [label="61_ accounts [_from] = safeSub (accounts [_from], _value);\n462-expression_statement-62-62", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
475 [label="62_ accounts [_to] = safeAdd (accounts [_to], safeSub(_value, feeTotal));\n475-expression_statement-63-63", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
493 [label="63_ processFee(feeTotal);\n493-expression_statement-64-64", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
498 [label="64_ Transfer (_from, _to, safeSub(_value, feeTotal));\n498-expression_statement-65-65", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
512 [label="66_ return true;\n512-return-67-67", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
515 [label="68_ function fee () public  constant returns (uint256);\n515-function_definition-69-69", method="fee()", type_label=function_definition];
518 [label="68_ constant\n518-expression_statement-69-69", method="fee()", type_label=expression_statement];
524 [label="69_ function processFee(uint256 feeTotal) internal returns (bool);\n524-function_definition-70-70", method="processFee(uint256 feeTotal)", type_label=function_definition];
535 [label="70_ function approve (address _spender, uint256 _value) public  returns (bool success) {\n    allowances [msg.sender][_spender] = _value;\n    Approval (msg.sender, _spender, _value);\n    return true;\n  }\n535-function_definition-71-75", method="approve(address _spender,uint256 _value)", type_label=function_definition];
552 [label="71_ allowances [msg.sender][_spender] = _value;\n552-expression_statement-72-72", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
562 [label="72_ Approval (msg.sender, _spender, _value);\n562-expression_statement-73-73", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
573 [label="73_ return true;\n573-return-74-74", method="approve(address _spender,uint256 _value)", type_label=return];
576 [label="75_ function allowance (address _owner, address _spender) public constant\n  returns (uint256 remaining) {\n    return allowances [_owner][_spender];\n  }\n576-function_definition-76-79", method="allowance(address _owner,address _spender)", type_label=function_definition];
587 [label="75_ constant\n587-expression_statement-76-76", method="allowance(address _owner,address _spender)", type_label=expression_statement];
595 [label="77_ return allowances [_owner][_spender];\n595-return-78-78", method="allowance(address _owner,address _spender)", type_label=return];
601 [label="79_ mapping (address => uint256) accounts;\n601-new_variable-80-80", method="", type_label=new_variable];
607 [label="80_ mapping (address => mapping (address => uint256)) allowances;\n607-new_variable-81-81", method="", type_label=new_variable];
621 [label="83_ uint256 constant INITIAL_TOKENS_COUNT = 210000000e6;\n621-new_variable-84-84", method="", type_label=new_variable];
626 [label="84_ address owner;\n626-new_variable-85-85", method="", type_label=new_variable];
630 [label="85_ uint256 tokensCount;\n630-new_variable-86-86", method="", type_label=new_variable];
634 [label="86_ function TradeBTC (address fundAddress) public  {\n    tokensCount = INITIAL_TOKENS_COUNT;\n    accounts [msg.sender] = INITIAL_TOKENS_COUNT;\n    owner = msg.sender;\n    fund = fundAddress;\n  }\n634-function_definition-87-92", method="TradeBTC(address fundAddress)", type_label=function_definition];
642 [label="87_ tokensCount = INITIAL_TOKENS_COUNT;\n642-expression_statement-88-88", method="TradeBTC(address fundAddress)", type_label=expression_statement];
646 [label="88_ accounts [msg.sender] = INITIAL_TOKENS_COUNT;\n646-expression_statement-89-89", method="TradeBTC(address fundAddress)", type_label=expression_statement];
654 [label="89_ owner = msg.sender;\n654-expression_statement-90-90", method="TradeBTC(address fundAddress)", type_label=expression_statement];
660 [label="90_ fund = fundAddress;\n660-expression_statement-91-91", method="TradeBTC(address fundAddress)", type_label=expression_statement];
664 [label="92_ function name () public pure returns (string) {\n    return \"TradeBTC\";\n  }\n664-function_definition-93-95", method="name()", type_label=function_definition];
673 [label="93_ return \"TradeBTC\";\n673-return-94-94", method="name()", type_label=return];
676 [label="95_ function symbol ()  public pure returns (string) {\n    return \"tBTC\";\n  }\n676-function_definition-96-98", method="symbol()", type_label=function_definition];
685 [label="96_ return \"tBTC\";\n685-return-97-97", method="symbol()", type_label=return];
688 [label="98_ function decimals () public pure returns (uint8) {\n    return 6;\n  }\n688-function_definition-99-101", method="decimals()", type_label=function_definition];
697 [label="99_ return 6;\n697-return-100-100", method="decimals()", type_label=return];
699 [label="101_ function totalSupply () public constant returns (uint256 supply) {\n    return tokensCount;\n  }\n699-function_definition-102-104", method="totalSupply()", type_label=function_definition];
702 [label="101_ constant\n702-expression_statement-102-102", method="totalSupply()", type_label=expression_statement];
710 [label="102_ return tokensCount;\n710-return-103-103", method="totalSupply()", type_label=return];
712 [label="104_ function transfer (address _to, uint256 _value) public returns (bool success) {\n    return AbstractToken.transfer (_to, _value);\n  }\n712-function_definition-105-107", method="transfer(address _to,uint256 _value)", type_label=function_definition];
729 [label="105_ return AbstractToken.transfer (_to, _value);\n729-return-106-106", method="transfer(address _to,uint256 _value)", type_label=return];
738 [label="107_ function transferFrom (address _from, address _to, uint256 _value) public\n  returns (bool success) {\n    return AbstractToken.transferFrom (_from, _to, _value);\n  }\n738-function_definition-108-111", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
759 [label="109_ return AbstractToken.transferFrom (_from, _to, _value);\n759-return-110-110", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
770 [label="111_ function fee ()public constant returns (uint256)  {\n    return safeAdd(safeMul(tokensCount, 5)/1e11, 25000);\n  }\n770-function_definition-112-114", method="fee()", type_label=function_definition];
773 [label="111_ constant\n773-expression_statement-112-112", method="fee()", type_label=expression_statement];
780 [label="112_ return safeAdd(safeMul(tokensCount, 5)/1e11, 25000);\n780-return-113-113", method="fee()", type_label=return];
794 [label="114_ function processFee(uint256 feeTotal) internal returns (bool) {\n      uint256 burnFee = feeTotal/2;\n      uint256 fundFee = safeSub(feeTotal, burnFee);\n      accounts [fund] = safeAdd (accounts [fund], fundFee);\n      tokensCount = safeSub (tokensCount, burnFee);  \n      Transfer (msg.sender, fund, fundFee);\n      return true;\n  }\n794-function_definition-115-122", method="processFee(uint256 feeTotal)", type_label=function_definition];
806 [label="115_ uint256 burnFee = feeTotal/2;\n806-new_variable-116-116", method="processFee(uint256 feeTotal)", type_label=new_variable];
814 [label="116_ uint256 fundFee = safeSub(feeTotal, burnFee);\n814-new_variable-117-117", method="processFee(uint256 feeTotal)", type_label=new_variable];
825 [label="117_ accounts [fund] = safeAdd (accounts [fund], fundFee);\n825-expression_statement-118-118", method="processFee(uint256 feeTotal)", type_label=expression_statement];
838 [label="118_ tokensCount = safeSub (tokensCount, burnFee);\n838-expression_statement-119-119", method="processFee(uint256 feeTotal)", type_label=expression_statement];
847 [label="119_ Transfer (msg.sender, fund, fundFee);\n847-expression_statement-120-120", method="processFee(uint256 feeTotal)", type_label=expression_statement];
858 [label="120_ return true;\n858-return-121-121", method="processFee(uint256 feeTotal)", type_label=return];
861 [label="122_ function approve (address _spender, uint256 _currentValue, uint256 _newValue)\n  public returns (bool success) {\n    if (allowance (msg.sender, _spender) == _currentValue)\n      return approve (_spender, _newValue);\n    else return false;\n  }\n861-function_definition-123-128", method="approve(address _spender,uint256 _currentValue,uint256 _newValue)", type_label=function_definition];
882 [label="124_ if_allowance (msg.sender, _spender) == _currentValue\n882-if-125-127", method="approve(address _spender,uint256 _currentValue,uint256 _newValue)", type_label=if];
1883 [label="124_ end_if", method="approve(address _spender,uint256 _currentValue,uint256 _newValue)", type_label=end_if];
893 [label="125_ return approve (_spender, _newValue);\n893-return-126-126", method="approve(address _spender,uint256 _currentValue,uint256 _newValue)", type_label=return];
900 [label="126_ return false;\n900-return-127-127", method="approve(address _spender,uint256 _currentValue,uint256 _newValue)", type_label=return];
903 [label="128_ function burnTokens (uint256 _value) public returns (bool success) {\n    if (_value > accounts [msg.sender]) return false;\n    else if (_value > 0) {\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n      tokensCount = safeSub (tokensCount, _value);\n      return true;\n    } else return true;\n  }\n903-function_definition-129-136", method="burnTokens(uint256 _value)", type_label=function_definition];
916 [label="129_ if\n916-if-130-135", method="burnTokens(uint256 _value)", type_label=if];
1917 [label="129_ end_if", method="burnTokens(uint256 _value)", type_label=end_if];
924 [label="129_ return false;\n924-return-130-130", method="burnTokens(uint256 _value)", type_label=return];
927 [label="130_ if__value > 0\n927-if-131-135", method="burnTokens(uint256 _value)", type_label=if];
932 [label="131_ accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n932-expression_statement-132-132", method="burnTokens(uint256 _value)", type_label=expression_statement];
949 [label="132_ tokensCount = safeSub (tokensCount, _value);\n949-expression_statement-133-133", method="burnTokens(uint256 _value)", type_label=expression_statement];
958 [label="133_ return true;\n958-return-134-134", method="burnTokens(uint256 _value)", type_label=return];
961 [label="134_ return true;\n961-return-135-135", method="burnTokens(uint256 _value)", type_label=return];
964 [label="136_ function setOwner (address _newOwner) public {\n    require (msg.sender == owner);\n    owner = _newOwner;\n  }\n964-function_definition-137-140", method="setOwner(address _newOwner)", type_label=function_definition];
972 [label="137_ require (msg.sender == owner);\n972-expression_statement-138-138", method="setOwner(address _newOwner)", type_label=expression_statement];
981 [label="138_ owner = _newOwner;\n981-expression_statement-139-139", method="setOwner(address _newOwner)", type_label=expression_statement];
985 [label="140_ function setFundAddress (address _newFund) public {\n    require (msg.sender == owner);\n    fund = _newFund;\n  }\n985-function_definition-141-144", method="setFundAddress(address _newFund)", type_label=function_definition];
993 [label="141_ require (msg.sender == owner);\n993-expression_statement-142-142", method="setFundAddress(address _newFund)", type_label=expression_statement];
1002 [label="142_ fund = _newFund;\n1002-expression_statement-143-143", method="setFundAddress(address _newFund)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
901;
962;
19 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
37 -> 46  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
46 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
79 -> 97  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
97 -> 101  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
97 -> 1098  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1098 -> 103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
101 -> 1098  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
101 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
103 -> 112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
258 -> 273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
273 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
277 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
301 -> 309  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
301 -> 1302  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1302 -> 312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
309 -> 1302  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
309 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
312 -> 323  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
312 -> 1313  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1313 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
323 -> 340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
340 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
358 -> 363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 1313  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
379 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
382 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 420  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
410 -> 1411  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1411 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 1411  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
420 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
423 -> 429  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
423 -> 1424  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1424 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
429 -> 1424  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
429 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
432 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 462  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
453 -> 1454  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1454 -> 512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
462 -> 475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
475 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 1454  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
512 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
535 -> 552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
552 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
562 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
573 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
576 -> 595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
595 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
601 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
626 -> 630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
634 -> 642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
642 -> 646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
646 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
654 -> 660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
673 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
676 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
688 -> 697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
697 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
699 -> 710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
710 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
712 -> 729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
738 -> 759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
759 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
770 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
794 -> 806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
806 -> 814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
814 -> 825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
825 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
847 -> 858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
858 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
861 -> 882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
882 -> 893  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
882 -> 900  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1883 -> 903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
893 -> 1883  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
893 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
900 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
903 -> 916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
916 -> 924  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
916 -> 927  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1917 -> 964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
924 -> 1917  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
924 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
927 -> 932  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
927 -> 961  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
932 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
958 -> 1917  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
958 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
961 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
964 -> 972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
972 -> 981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 1002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
901 -> 1883  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
962 -> 1917  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
