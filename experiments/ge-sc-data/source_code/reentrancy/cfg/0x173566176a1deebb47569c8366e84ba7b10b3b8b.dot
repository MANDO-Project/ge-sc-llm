digraph  {
12 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n12-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
29 [label="3_ if_a == 0\n29-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
1574 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
34 [label="4_ return 0;\n34-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
36 [label="6_ uint256 c = a * b;\n36-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
44 [label="7_ assert(c / a == b);\n44-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
53 [label="8_ return c;\n53-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
55 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n55-function_definition-11-14", method="div(uint256 a,uint256 b)", type_label=function_definition];
72 [label="11_ uint256 c = a / b;\n72-new_variable-12-12", method="div(uint256 a,uint256 b)", type_label=new_variable];
80 [label="12_ return c;\n80-return-13-13", method="div(uint256 a,uint256 b)", type_label=return];
82 [label="14_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n82-function_definition-15-18", method="sub(uint256 a,uint256 b)", type_label=function_definition];
99 [label="15_ assert(b <= a);\n99-expression_statement-16-16", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
106 [label="16_ return a - b;\n106-return-17-17", method="sub(uint256 a,uint256 b)", type_label=return];
110 [label="18_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n110-function_definition-19-23", method="add(uint256 a,uint256 b)", type_label=function_definition];
127 [label="19_ uint256 c = a + b;\n127-new_variable-20-20", method="add(uint256 a,uint256 b)", type_label=new_variable];
135 [label="20_ assert(c >= a);\n135-expression_statement-21-21", method="add(uint256 a,uint256 b)", type_label=expression_statement];
142 [label="21_ return c;\n142-return-22-22", method="add(uint256 a,uint256 b)", type_label=return];
147 [label="25_ address public owner;\n147-new_variable-26-26", method="", type_label=new_variable];
162 [label="27_ function Ownable() public {\n    owner = msg.sender;\n  }\n162-function_definition-28-30", method="Ownable()", type_label=function_definition];
166 [label="28_ owner = msg.sender;\n166-expression_statement-29-29", method="Ownable()", type_label=expression_statement];
172 [label="30_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n172-expression_statement-31-34", method="", type_label=expression_statement];
175 [label="31_ require(msg.sender == owner);\n175-expression_statement-32-32", method="", type_label=expression_statement];
184 [label="32_ _;\n184-expression_statement-33-33", method="", type_label=expression_statement];
186 [label="34_ function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n186-function_definition-35-39", method="transferOwnership(address newOwner)", type_label=function_definition];
193 [label="34_ onlyOwner\n193-expression_statement-35-35", method="transferOwnership(address newOwner)", type_label=expression_statement];
196 [label="35_ require(newOwner != address(0));\n196-expression_statement-36-36", method="transferOwnership(address newOwner)", type_label=expression_statement];
211 [label="37_ owner = newOwner;\n211-expression_statement-38-38", method="transferOwnership(address newOwner)", type_label=expression_statement];
218 [label="41_ function totalSupply() external constant returns (uint);\n218-function_definition-42-42", method="totalSupply()", type_label=function_definition];
221 [label="41_ constant\n221-expression_statement-42-42", method="totalSupply()", type_label=expression_statement];
227 [label="42_ function balanceOf(address tokenOwner) external constant returns (uint balance);\n227-function_definition-43-43", method="balanceOf(address tokenOwner)", type_label=function_definition];
234 [label="42_ constant\n234-expression_statement-43-43", method="balanceOf(address tokenOwner)", type_label=expression_statement];
241 [label="43_ function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\n241-function_definition-44-44", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
252 [label="43_ constant\n252-expression_statement-44-44", method="allowance(address tokenOwner,address spender)", type_label=expression_statement];
259 [label="44_ function transfer(address to, uint tokens) external returns (bool success);\n259-function_definition-45-45", method="transfer(address to,uint tokens)", type_label=function_definition];
275 [label="45_ function approve(address spender, uint tokens) external returns (bool success);\n275-function_definition-46-46", method="approve(address spender,uint tokens)", type_label=function_definition];
291 [label="46_ function transferFrom(address from, address to, uint tokens) external returns (bool success);\n291-function_definition-47-47", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
311 [label="47_ function burn(uint256 _value) external;\n311-function_definition-48-48", method="burn(uint256 _value)", type_label=function_definition];
367 [label="54_ TokenInterface public token;\n367-new_variable-55-55", method="", type_label=new_variable];
373 [label="55_ uint256 public startTime;\n373-new_variable-56-56", method="", type_label=new_variable];
378 [label="56_ uint256 public endTime;\n378-new_variable-57-57", method="", type_label=new_variable];
383 [label="57_ uint256 public ratePerWei;\n383-new_variable-58-58", method="", type_label=new_variable];
388 [label="58_ uint256 public weiRaised;\n388-new_variable-59-59", method="", type_label=new_variable];
393 [label="59_ uint256 public TOKENS_SOLD;\n393-new_variable-60-60", method="", type_label=new_variable];
398 [label="60_ uint256 maxTokensToSale;\n398-new_variable-61-61", method="", type_label=new_variable];
402 [label="61_ uint256 bonusInPhase1;\n402-new_variable-62-62", method="", type_label=new_variable];
406 [label="62_ uint256 bonusInPhase2;\n406-new_variable-63-63", method="", type_label=new_variable];
410 [label="63_ uint256 minimumContribution;\n410-new_variable-64-64", method="", type_label=new_variable];
414 [label="64_ uint256 maximumContribution;\n414-new_variable-65-65", method="", type_label=new_variable];
418 [label="65_ bool isCrowdsalePaused = false;\n418-new_variable-66-66", method="", type_label=new_variable];
424 [label="66_ uint256 totalDurationInDays = 30 days;\n424-new_variable-67-67", method="", type_label=new_variable];
430 [label="67_ uint256 LongTermFoundationBudgetAccumulated;\n430-new_variable-68-68", method="", type_label=new_variable];
434 [label="68_ uint256 LegalContingencyFundsAccumulated;\n434-new_variable-69-69", method="", type_label=new_variable];
438 [label="69_ uint256 MarketingAndCommunityOutreachAccumulated;\n438-new_variable-70-70", method="", type_label=new_variable];
442 [label="70_ uint256 CashReserveFundAccumulated;\n442-new_variable-71-71", method="", type_label=new_variable];
446 [label="71_ uint256 OperationalExpensesAccumulated;\n446-new_variable-72-72", method="", type_label=new_variable];
450 [label="72_ uint256 SoftwareProductDevelopmentAccumulated;\n450-new_variable-73-73", method="", type_label=new_variable];
454 [label="73_ uint256 FoundersTeamAndAdvisorsAccumulated;\n454-new_variable-74-74", method="", type_label=new_variable];
458 [label="74_ uint256 LongTermFoundationBudgetPercentage;\n458-new_variable-75-75", method="", type_label=new_variable];
462 [label="75_ uint256 LegalContingencyFundsPercentage;\n462-new_variable-76-76", method="", type_label=new_variable];
466 [label="76_ uint256 MarketingAndCommunityOutreachPercentage;\n466-new_variable-77-77", method="", type_label=new_variable];
470 [label="77_ uint256 CashReserveFundPercentage;\n470-new_variable-78-78", method="", type_label=new_variable];
474 [label="78_ uint256 OperationalExpensesPercentage;\n474-new_variable-79-79", method="", type_label=new_variable];
478 [label="79_ uint256 SoftwareProductDevelopmentPercentage;\n478-new_variable-80-80", method="", type_label=new_variable];
482 [label="80_ uint256 FoundersTeamAndAdvisorsPercentage;\n482-new_variable-81-81", method="", type_label=new_variable];
486 [label="81_ struct Whitelist {\n    	string Email;\n    }\n486-expression_statement-82-84", method="Whitelist()", type_label=expression_statement];
492 [label="84_ mapping (address => Whitelist) Whitelists;\n492-new_variable-85-85", method="", type_label=new_variable];
499 [label="85_ address[] public WhitelistsAccts;\n499-new_variable-86-86", method="", type_label=new_variable];
505 [label="86_ function setWhitelist(address _address, string _Email) public  {\n        var whitelist = Whitelists[_address];\n        whitelist.Email = _Email;\n    	WhitelistsAccts.push(_address) -1;\n    }\n505-function_definition-87-91", method="setWhitelist(address _address,string _Email)", type_label=function_definition];
517 [label="87_ var whitelist = Whitelists[_address];\n517-new_variable-88-88", method="setWhitelist(address _address,string _Email)", type_label=new_variable];
525 [label="88_ whitelist.Email = _Email;\n525-expression_statement-89-89", method="setWhitelist(address _address,string _Email)", type_label=expression_statement];
531 [label="89_ WhitelistsAccts.push(_address) -1;\n531-expression_statement-90-90", method="setWhitelist(address _address,string _Email)", type_label=expression_statement];
540 [label="91_ function getWhitelist() view public returns (address[]) {\n    	return WhitelistsAccts;\n    }\n540-function_definition-92-94", method="getWhitelist()", type_label=function_definition];
550 [label="92_ return WhitelistsAccts;\n550-return-93-93", method="getWhitelist()", type_label=return];
552 [label="94_ function searchWhitelist(address _address) view public returns (string){\n        return (Whitelists[_address].Email);\n    }\n552-function_definition-95-97", method="searchWhitelist(address _address)", type_label=function_definition];
565 [label="95_ return (Whitelists[_address].Email);\n565-return-96-96", method="searchWhitelist(address _address)", type_label=return];
572 [label="97_ function countWhitelists() view public returns (uint) {\n        return WhitelistsAccts.length;\n    }\n572-function_definition-98-100", method="countWhitelists()", type_label=function_definition];
581 [label="98_ return WhitelistsAccts.length;\n581-return-99-99", method="countWhitelists()", type_label=return];
603 [label="101_ function KRCPreSaleContract(uint256 _startTime, address _wallet, address _tokenAddress) public \n  {\n    require(_startTime >=now);\n    require(_wallet != 0x0);\n    startTime = _startTime;  \n    endTime = startTime + totalDurationInDays;\n    require(endTime >= startTime);\n    owner = _wallet;\n    maxTokensToSale = 87500000e18;\n    bonusInPhase1 = 10;\n    bonusInPhase2 = 5;\n    minimumContribution = 5e17;\n    maximumContribution = 150e18;\n    ratePerWei = 10000e18;\n    token = TokenInterface(_tokenAddress);\n    LongTermFoundationBudgetAccumulated = 0;\n    LegalContingencyFundsAccumulated = 0;\n    MarketingAndCommunityOutreachAccumulated = 0;\n    CashReserveFundAccumulated = 0;\n    OperationalExpensesAccumulated = 0;\n    SoftwareProductDevelopmentAccumulated = 0;\n    FoundersTeamAndAdvisorsAccumulated = 0;\n    LongTermFoundationBudgetPercentage = 15;\n    LegalContingencyFundsPercentage = 10;\n    MarketingAndCommunityOutreachPercentage = 10;\n    CashReserveFundPercentage = 20;\n    OperationalExpensesPercentage = 10;\n    SoftwareProductDevelopmentPercentage = 15;\n    FoundersTeamAndAdvisorsPercentage = 20;\n  }\n603-function_definition-102-131", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=function_definition];
619 [label="103_ require(_startTime >=now);\n619-expression_statement-104-104", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
626 [label="104_ require(_wallet != 0x0);\n626-expression_statement-105-105", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
633 [label="105_ startTime = _startTime;\n633-expression_statement-106-106", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
637 [label="106_ endTime = startTime + totalDurationInDays;\n637-expression_statement-107-107", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
643 [label="107_ require(endTime >= startTime);\n643-expression_statement-108-108", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
650 [label="108_ owner = _wallet;\n650-expression_statement-109-109", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
654 [label="109_ maxTokensToSale = 87500000e18;\n654-expression_statement-110-110", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
658 [label="110_ bonusInPhase1 = 10;\n658-expression_statement-111-111", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
662 [label="111_ bonusInPhase2 = 5;\n662-expression_statement-112-112", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
666 [label="112_ minimumContribution = 5e17;\n666-expression_statement-113-113", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
670 [label="113_ maximumContribution = 150e18;\n670-expression_statement-114-114", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
674 [label="114_ ratePerWei = 10000e18;\n674-expression_statement-115-115", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
678 [label="115_ token = TokenInterface(_tokenAddress);\n678-expression_statement-116-116", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
685 [label="116_ LongTermFoundationBudgetAccumulated = 0;\n685-expression_statement-117-117", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
689 [label="117_ LegalContingencyFundsAccumulated = 0;\n689-expression_statement-118-118", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
693 [label="118_ MarketingAndCommunityOutreachAccumulated = 0;\n693-expression_statement-119-119", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
697 [label="119_ CashReserveFundAccumulated = 0;\n697-expression_statement-120-120", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
701 [label="120_ OperationalExpensesAccumulated = 0;\n701-expression_statement-121-121", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
705 [label="121_ SoftwareProductDevelopmentAccumulated = 0;\n705-expression_statement-122-122", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
709 [label="122_ FoundersTeamAndAdvisorsAccumulated = 0;\n709-expression_statement-123-123", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
713 [label="123_ LongTermFoundationBudgetPercentage = 15;\n713-expression_statement-124-124", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
717 [label="124_ LegalContingencyFundsPercentage = 10;\n717-expression_statement-125-125", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
721 [label="125_ MarketingAndCommunityOutreachPercentage = 10;\n721-expression_statement-126-126", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
725 [label="126_ CashReserveFundPercentage = 20;\n725-expression_statement-127-127", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
729 [label="127_ OperationalExpensesPercentage = 10;\n729-expression_statement-128-128", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
733 [label="128_ SoftwareProductDevelopmentPercentage = 15;\n733-expression_statement-129-129", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
737 [label="129_ FoundersTeamAndAdvisorsPercentage = 20;\n737-expression_statement-130-130", method="KRCPreSaleContract(uint256 _startTime,address _wallet,address _tokenAddress)", type_label=expression_statement];
745 [label="132_ var isexist = searchWhitelist(msg.sender);\n745-new_variable-133-133", method="", type_label=new_variable];
756 [label="133_ if_bytes(isexist).length > 0\n756-if-134-138", method="", type_label=if];
2301 [label="133_ end_if", method="", type_label=end_if];
765 [label="134_ buyTokens(msg.sender);\n765-expression_statement-135-135", method="", type_label=expression_statement];
775 [label="139_ function calculateTokens(uint value) internal view returns (uint256 tokens) \n    {\n        uint256 timeElapsed = now - startTime;\n        uint256 timeElapsedInDays = timeElapsed.div(1 days);\n        uint256 bonus = 0;\n        if (timeElapsedInDays <15)\n        {\n            tokens = value.mul(ratePerWei);\n            bonus = tokens.mul(bonusInPhase1); \n            bonus = bonus.div(100);\n            tokens = tokens.add(bonus);\n            require (TOKENS_SOLD.add(tokens) <= maxTokensToSale);\n        }\n        else if (timeElapsedInDays >=15 && timeElapsedInDays <30)\n        {\n            tokens = value.mul(ratePerWei);\n            bonus = tokens.mul(bonusInPhase2); \n            bonus = bonus.div(100);\n            tokens = tokens.add(bonus);\n            require (TOKENS_SOLD.add(tokens) <= maxTokensToSale);\n        }\n        else \n        {\n            bonus = 0;\n        }\n    }\n775-function_definition-140-165", method="calculateTokens(uint value)", type_label=function_definition];
789 [label="141_ uint256 timeElapsed = now - startTime;\n789-new_variable-142-142", method="calculateTokens(uint value)", type_label=new_variable];
797 [label="142_ uint256 timeElapsedInDays = timeElapsed.div(1 days);\n797-new_variable-143-143", method="calculateTokens(uint value)", type_label=new_variable];
809 [label="143_ uint256 bonus = 0;\n809-new_variable-144-144", method="calculateTokens(uint value)", type_label=new_variable];
815 [label="144_ if_timeElapsedInDays <15\n815-if-145-164", method="calculateTokens(uint value)", type_label=if];
2360 [label="144_ end_if", method="calculateTokens(uint value)", type_label=end_if];
820 [label="146_ tokens = value.mul(ratePerWei);\n820-expression_statement-147-147", method="calculateTokens(uint value)", type_label=expression_statement];
829 [label="147_ bonus = tokens.mul(bonusInPhase1);\n829-expression_statement-148-148", method="calculateTokens(uint value)", type_label=expression_statement];
838 [label="148_ bonus = bonus.div(100);\n838-expression_statement-149-149", method="calculateTokens(uint value)", type_label=expression_statement];
847 [label="149_ tokens = tokens.add(bonus);\n847-expression_statement-150-150", method="calculateTokens(uint value)", type_label=expression_statement];
856 [label="150_ require (TOKENS_SOLD.add(tokens) <= maxTokensToSale);\n856-expression_statement-151-151", method="calculateTokens(uint value)", type_label=expression_statement];
868 [label="152_ if_timeElapsedInDays >=15 && timeElapsedInDays <30\n868-if-153-164", method="calculateTokens(uint value)", type_label=if];
877 [label="154_ tokens = value.mul(ratePerWei);\n877-expression_statement-155-155", method="calculateTokens(uint value)", type_label=expression_statement];
886 [label="155_ bonus = tokens.mul(bonusInPhase2);\n886-expression_statement-156-156", method="calculateTokens(uint value)", type_label=expression_statement];
895 [label="156_ bonus = bonus.div(100);\n895-expression_statement-157-157", method="calculateTokens(uint value)", type_label=expression_statement];
904 [label="157_ tokens = tokens.add(bonus);\n904-expression_statement-158-158", method="calculateTokens(uint value)", type_label=expression_statement];
913 [label="158_ require (TOKENS_SOLD.add(tokens) <= maxTokensToSale);\n913-expression_statement-159-159", method="calculateTokens(uint value)", type_label=expression_statement];
926 [label="162_ bonus = 0;\n926-expression_statement-163-163", method="calculateTokens(uint value)", type_label=expression_statement];
930 [label="165_ function buyTokens(address beneficiary) public payable {\n    require(beneficiary != 0x0);\n    require(isCrowdsalePaused == false);\n    require(validPurchase());\n    require(TOKENS_SOLD<maxTokensToSale);\n    uint256 weiAmount = msg.value.div(10**16);\n    uint256 tokens = calculateTokens(weiAmount);\n    weiRaised = weiRaised.add(msg.value);\n    token.transfer(beneficiary,tokens);\n    emit TokenPurchase(owner, beneficiary, msg.value, tokens);\n    TOKENS_SOLD = TOKENS_SOLD.add(tokens);\n    distributeFunds();\n  }\n930-function_definition-166-178", method="buyTokens(address beneficiary)", type_label=function_definition];
939 [label="166_ require(beneficiary != 0x0);\n939-expression_statement-167-167", method="buyTokens(address beneficiary)", type_label=expression_statement];
946 [label="167_ require(isCrowdsalePaused == false);\n946-expression_statement-168-168", method="buyTokens(address beneficiary)", type_label=expression_statement];
954 [label="168_ require(validPurchase());\n954-expression_statement-169-169", method="buyTokens(address beneficiary)", type_label=expression_statement];
960 [label="169_ require(TOKENS_SOLD<maxTokensToSale);\n960-expression_statement-170-170", method="buyTokens(address beneficiary)", type_label=expression_statement];
967 [label="170_ uint256 weiAmount = msg.value.div(10**16);\n967-new_variable-171-171", method="buyTokens(address beneficiary)", type_label=new_variable];
982 [label="171_ uint256 tokens = calculateTokens(weiAmount);\n982-new_variable-172-172", method="buyTokens(address beneficiary)", type_label=new_variable];
991 [label="172_ weiRaised = weiRaised.add(msg.value);\n991-expression_statement-173-173", method="buyTokens(address beneficiary)", type_label=expression_statement];
1002 [label="173_ token.transfer(beneficiary,tokens);\n1002-expression_statement-174-174", method="buyTokens(address beneficiary)", type_label=expression_statement];
1023 [label="175_ TOKENS_SOLD = TOKENS_SOLD.add(tokens);\n1023-expression_statement-176-176", method="buyTokens(address beneficiary)", type_label=expression_statement];
1032 [label="176_ distributeFunds();\n1032-expression_statement-177-177", method="buyTokens(address beneficiary)", type_label=expression_statement];
1035 [label="178_ function distributeFunds() internal {\n      uint received = msg.value;\n      LongTermFoundationBudgetAccumulated = LongTermFoundationBudgetAccumulated\n                                            .add(received.mul(LongTermFoundationBudgetPercentage)\n                                            .div(100));\n      LegalContingencyFundsAccumulated = LegalContingencyFundsAccumulated\n                                         .add(received.mul(LegalContingencyFundsPercentage)\n                                         .div(100));\n      MarketingAndCommunityOutreachAccumulated = MarketingAndCommunityOutreachAccumulated\n                                                 .add(received.mul(MarketingAndCommunityOutreachPercentage)\n                                                 .div(100));\n      CashReserveFundAccumulated = CashReserveFundAccumulated\n                                   .add(received.mul(CashReserveFundPercentage)\n                                   .div(100));\n      OperationalExpensesAccumulated = OperationalExpensesAccumulated\n                                       .add(received.mul(OperationalExpensesPercentage)\n                                       .div(100));\n      SoftwareProductDevelopmentAccumulated = SoftwareProductDevelopmentAccumulated\n                                              .add(received.mul(SoftwareProductDevelopmentPercentage)\n                                              .div(100));\n      FoundersTeamAndAdvisorsAccumulated = FoundersTeamAndAdvisorsAccumulated\n                                            .add(received.mul(FoundersTeamAndAdvisorsPercentage)\n                                            .div(100));\n  }\n1035-function_definition-179-202", method="distributeFunds()", type_label=function_definition];
1039 [label="179_ uint received = msg.value;\n1039-new_variable-180-180", method="distributeFunds()", type_label=new_variable];
1047 [label="180_ LongTermFoundationBudgetAccumulated = LongTermFoundationBudgetAccumulated\n                                            .add(received.mul(LongTermFoundationBudgetPercentage)\n                                            .div(100));\n1047-expression_statement-181-183", method="distributeFunds()", type_label=expression_statement];
1066 [label="183_ LegalContingencyFundsAccumulated = LegalContingencyFundsAccumulated\n                                         .add(received.mul(LegalContingencyFundsPercentage)\n                                         .div(100));\n1066-expression_statement-184-186", method="distributeFunds()", type_label=expression_statement];
1085 [label="186_ MarketingAndCommunityOutreachAccumulated = MarketingAndCommunityOutreachAccumulated\n                                                 .add(received.mul(MarketingAndCommunityOutreachPercentage)\n                                                 .div(100));\n1085-expression_statement-187-189", method="distributeFunds()", type_label=expression_statement];
1104 [label="189_ CashReserveFundAccumulated = CashReserveFundAccumulated\n                                   .add(received.mul(CashReserveFundPercentage)\n                                   .div(100));\n1104-expression_statement-190-192", method="distributeFunds()", type_label=expression_statement];
1123 [label="192_ OperationalExpensesAccumulated = OperationalExpensesAccumulated\n                                       .add(received.mul(OperationalExpensesPercentage)\n                                       .div(100));\n1123-expression_statement-193-195", method="distributeFunds()", type_label=expression_statement];
1142 [label="195_ SoftwareProductDevelopmentAccumulated = SoftwareProductDevelopmentAccumulated\n                                              .add(received.mul(SoftwareProductDevelopmentPercentage)\n                                              .div(100));\n1142-expression_statement-196-198", method="distributeFunds()", type_label=expression_statement];
1161 [label="198_ FoundersTeamAndAdvisorsAccumulated = FoundersTeamAndAdvisorsAccumulated\n                                            .add(received.mul(FoundersTeamAndAdvisorsPercentage)\n                                            .div(100));\n1161-expression_statement-199-201", method="distributeFunds()", type_label=expression_statement];
1180 [label="202_ function validPurchase() internal constant returns (bool) {\n    bool withinPeriod = now >= startTime && now <= endTime;\n    bool nonZeroPurchase = msg.value != 0;\n    bool withinContributionLimit = msg.value >= minimumContribution && msg.value <= maximumContribution;\n    return withinPeriod && nonZeroPurchase && withinContributionLimit;\n  }\n1180-function_definition-203-208", method="validPurchase()", type_label=function_definition];
1183 [label="202_ constant\n1183-expression_statement-203-203", method="validPurchase()", type_label=expression_statement];
1190 [label="203_ bool withinPeriod = now >= startTime && now <= endTime;\n1190-new_variable-204-204", method="validPurchase()", type_label=new_variable];
1202 [label="204_ bool nonZeroPurchase = msg.value != 0;\n1202-new_variable-205-205", method="validPurchase()", type_label=new_variable];
1212 [label="205_ bool withinContributionLimit = msg.value >= minimumContribution && msg.value <= maximumContribution;\n1212-new_variable-206-206", method="validPurchase()", type_label=new_variable];
1228 [label="206_ return withinPeriod && nonZeroPurchase && withinContributionLimit;\n1228-return-207-207", method="validPurchase()", type_label=return];
1234 [label="208_ function hasEnded() public constant returns (bool) {\n    return now > endTime;\n  }\n1234-function_definition-209-211", method="hasEnded()", type_label=function_definition];
1237 [label="208_ constant\n1237-expression_statement-209-209", method="hasEnded()", type_label=expression_statement];
1244 [label="209_ return now > endTime;\n1244-return-210-210", method="hasEnded()", type_label=return];
1248 [label="211_ function changeEndDate(uint256 endTimeUnixTimestamp) public onlyOwner{\n        endTime = endTimeUnixTimestamp;\n    }\n1248-function_definition-212-214", method="changeEndDate(uint256 endTimeUnixTimestamp)", type_label=function_definition];
1255 [label="211_ onlyOwner\n1255-expression_statement-212-212", method="changeEndDate(uint256 endTimeUnixTimestamp)", type_label=expression_statement];
1258 [label="212_ endTime = endTimeUnixTimestamp;\n1258-expression_statement-213-213", method="changeEndDate(uint256 endTimeUnixTimestamp)", type_label=expression_statement];
1262 [label="214_ function changeStartDate(uint256 startTimeUnixTimestamp) public onlyOwner{\n        startTime = startTimeUnixTimestamp;\n    }\n1262-function_definition-215-217", method="changeStartDate(uint256 startTimeUnixTimestamp)", type_label=function_definition];
1269 [label="214_ onlyOwner\n1269-expression_statement-215-215", method="changeStartDate(uint256 startTimeUnixTimestamp)", type_label=expression_statement];
1272 [label="215_ startTime = startTimeUnixTimestamp;\n1272-expression_statement-216-216", method="changeStartDate(uint256 startTimeUnixTimestamp)", type_label=expression_statement];
1276 [label="217_ function pauseCrowdsale() public onlyOwner {\n        isCrowdsalePaused = true;\n    }\n1276-function_definition-218-220", method="pauseCrowdsale()", type_label=function_definition];
1279 [label="217_ onlyOwner\n1279-expression_statement-218-218", method="pauseCrowdsale()", type_label=expression_statement];
1282 [label="218_ isCrowdsalePaused = true;\n1282-expression_statement-219-219", method="pauseCrowdsale()", type_label=expression_statement];
1287 [label="220_ function resumeCrowdsale() public onlyOwner {\n        isCrowdsalePaused = false;\n    }\n1287-function_definition-221-223", method="resumeCrowdsale()", type_label=function_definition];
1290 [label="220_ onlyOwner\n1290-expression_statement-221-221", method="resumeCrowdsale()", type_label=expression_statement];
1293 [label="221_ isCrowdsalePaused = false;\n1293-expression_statement-222-222", method="resumeCrowdsale()", type_label=expression_statement];
1298 [label="223_ function takeTokensBack() public onlyOwner\n     {\n         uint remainingTokensInTheContract = token.balanceOf(address(this));\n         token.transfer(owner,remainingTokensInTheContract);\n     }\n1298-function_definition-224-228", method="takeTokensBack()", type_label=function_definition];
1301 [label="223_ onlyOwner\n1301-expression_statement-224-224", method="takeTokensBack()", type_label=expression_statement];
1304 [label="225_ uint remainingTokensInTheContract = token.balanceOf(address(this));\n1304-new_variable-226-226", method="takeTokensBack()", type_label=new_variable];
1317 [label="226_ token.transfer(owner,remainingTokensInTheContract);\n1317-expression_statement-227-227", method="takeTokensBack()", type_label=expression_statement];
1326 [label="228_ function changeMinimumContribution(uint256 minContribution) public onlyOwner {\n        minimumContribution = minContribution;\n    }\n1326-function_definition-229-231", method="changeMinimumContribution(uint256 minContribution)", type_label=function_definition];
1333 [label="228_ onlyOwner\n1333-expression_statement-229-229", method="changeMinimumContribution(uint256 minContribution)", type_label=expression_statement];
1336 [label="229_ minimumContribution = minContribution;\n1336-expression_statement-230-230", method="changeMinimumContribution(uint256 minContribution)", type_label=expression_statement];
1340 [label="231_ function changeMaximumContribution(uint256 maxContribution) public onlyOwner {\n        maximumContribution = maxContribution;\n    }\n1340-function_definition-232-234", method="changeMaximumContribution(uint256 maxContribution)", type_label=function_definition];
1347 [label="231_ onlyOwner\n1347-expression_statement-232-232", method="changeMaximumContribution(uint256 maxContribution)", type_label=expression_statement];
1350 [label="232_ maximumContribution = maxContribution;\n1350-expression_statement-233-233", method="changeMaximumContribution(uint256 maxContribution)", type_label=expression_statement];
1354 [label="234_ function withdrawLongTermFoundationBudget() public onlyOwner {\n        require(LongTermFoundationBudgetAccumulated > 0);\n        owner.transfer(LongTermFoundationBudgetAccumulated);\n        LongTermFoundationBudgetAccumulated = 0;\n    }\n1354-function_definition-235-239", method="withdrawLongTermFoundationBudget()", type_label=function_definition];
1357 [label="234_ onlyOwner\n1357-expression_statement-235-235", method="withdrawLongTermFoundationBudget()", type_label=expression_statement];
1360 [label="235_ require(LongTermFoundationBudgetAccumulated > 0);\n1360-expression_statement-236-236", method="withdrawLongTermFoundationBudget()", type_label=expression_statement];
1367 [label="236_ owner.transfer(LongTermFoundationBudgetAccumulated);\n1367-expression_statement-237-237", method="withdrawLongTermFoundationBudget()", type_label=expression_statement];
1374 [label="237_ LongTermFoundationBudgetAccumulated = 0;\n1374-expression_statement-238-238", method="withdrawLongTermFoundationBudget()", type_label=expression_statement];
1378 [label="239_ function withdrawLegalContingencyFunds() public onlyOwner {\n        require(LegalContingencyFundsAccumulated > 0);\n        owner.transfer(LegalContingencyFundsAccumulated);\n        LegalContingencyFundsAccumulated = 0;\n    }\n1378-function_definition-240-244", method="withdrawLegalContingencyFunds()", type_label=function_definition];
1381 [label="239_ onlyOwner\n1381-expression_statement-240-240", method="withdrawLegalContingencyFunds()", type_label=expression_statement];
1384 [label="240_ require(LegalContingencyFundsAccumulated > 0);\n1384-expression_statement-241-241", method="withdrawLegalContingencyFunds()", type_label=expression_statement];
1391 [label="241_ owner.transfer(LegalContingencyFundsAccumulated);\n1391-expression_statement-242-242", method="withdrawLegalContingencyFunds()", type_label=expression_statement];
1398 [label="242_ LegalContingencyFundsAccumulated = 0;\n1398-expression_statement-243-243", method="withdrawLegalContingencyFunds()", type_label=expression_statement];
1402 [label="244_ function withdrawMarketingAndCommunityOutreach() public onlyOwner {\n        require (MarketingAndCommunityOutreachAccumulated > 0);\n        owner.transfer(MarketingAndCommunityOutreachAccumulated);\n        MarketingAndCommunityOutreachAccumulated = 0;\n    }\n1402-function_definition-245-249", method="withdrawMarketingAndCommunityOutreach()", type_label=function_definition];
1405 [label="244_ onlyOwner\n1405-expression_statement-245-245", method="withdrawMarketingAndCommunityOutreach()", type_label=expression_statement];
1408 [label="245_ require (MarketingAndCommunityOutreachAccumulated > 0);\n1408-expression_statement-246-246", method="withdrawMarketingAndCommunityOutreach()", type_label=expression_statement];
1415 [label="246_ owner.transfer(MarketingAndCommunityOutreachAccumulated);\n1415-expression_statement-247-247", method="withdrawMarketingAndCommunityOutreach()", type_label=expression_statement];
1422 [label="247_ MarketingAndCommunityOutreachAccumulated = 0;\n1422-expression_statement-248-248", method="withdrawMarketingAndCommunityOutreach()", type_label=expression_statement];
1426 [label="249_ function withdrawCashReserveFund() public onlyOwner {\n        require(CashReserveFundAccumulated > 0);\n        owner.transfer(CashReserveFundAccumulated);\n        CashReserveFundAccumulated = 0;\n    }\n1426-function_definition-250-254", method="withdrawCashReserveFund()", type_label=function_definition];
1429 [label="249_ onlyOwner\n1429-expression_statement-250-250", method="withdrawCashReserveFund()", type_label=expression_statement];
1432 [label="250_ require(CashReserveFundAccumulated > 0);\n1432-expression_statement-251-251", method="withdrawCashReserveFund()", type_label=expression_statement];
1439 [label="251_ owner.transfer(CashReserveFundAccumulated);\n1439-expression_statement-252-252", method="withdrawCashReserveFund()", type_label=expression_statement];
1446 [label="252_ CashReserveFundAccumulated = 0;\n1446-expression_statement-253-253", method="withdrawCashReserveFund()", type_label=expression_statement];
1450 [label="254_ function withdrawOperationalExpenses() public onlyOwner {\n        require(OperationalExpensesAccumulated > 0);\n        owner.transfer(OperationalExpensesAccumulated);\n        OperationalExpensesAccumulated = 0;\n    }\n1450-function_definition-255-259", method="withdrawOperationalExpenses()", type_label=function_definition];
1453 [label="254_ onlyOwner\n1453-expression_statement-255-255", method="withdrawOperationalExpenses()", type_label=expression_statement];
1456 [label="255_ require(OperationalExpensesAccumulated > 0);\n1456-expression_statement-256-256", method="withdrawOperationalExpenses()", type_label=expression_statement];
1463 [label="256_ owner.transfer(OperationalExpensesAccumulated);\n1463-expression_statement-257-257", method="withdrawOperationalExpenses()", type_label=expression_statement];
1470 [label="257_ OperationalExpensesAccumulated = 0;\n1470-expression_statement-258-258", method="withdrawOperationalExpenses()", type_label=expression_statement];
1474 [label="259_ function withdrawSoftwareProductDevelopment() public onlyOwner {\n        require (SoftwareProductDevelopmentAccumulated > 0);\n        owner.transfer(SoftwareProductDevelopmentAccumulated);\n        SoftwareProductDevelopmentAccumulated = 0;\n    }\n1474-function_definition-260-264", method="withdrawSoftwareProductDevelopment()", type_label=function_definition];
1477 [label="259_ onlyOwner\n1477-expression_statement-260-260", method="withdrawSoftwareProductDevelopment()", type_label=expression_statement];
1480 [label="260_ require (SoftwareProductDevelopmentAccumulated > 0);\n1480-expression_statement-261-261", method="withdrawSoftwareProductDevelopment()", type_label=expression_statement];
1487 [label="261_ owner.transfer(SoftwareProductDevelopmentAccumulated);\n1487-expression_statement-262-262", method="withdrawSoftwareProductDevelopment()", type_label=expression_statement];
1494 [label="262_ SoftwareProductDevelopmentAccumulated = 0;\n1494-expression_statement-263-263", method="withdrawSoftwareProductDevelopment()", type_label=expression_statement];
1498 [label="264_ function withdrawFoundersTeamAndAdvisors() public onlyOwner {\n        require (FoundersTeamAndAdvisorsAccumulated > 0);\n        owner.transfer(FoundersTeamAndAdvisorsAccumulated);\n        FoundersTeamAndAdvisorsAccumulated = 0;\n    }\n1498-function_definition-265-269", method="withdrawFoundersTeamAndAdvisors()", type_label=function_definition];
1501 [label="264_ onlyOwner\n1501-expression_statement-265-265", method="withdrawFoundersTeamAndAdvisors()", type_label=expression_statement];
1504 [label="265_ require (FoundersTeamAndAdvisorsAccumulated > 0);\n1504-expression_statement-266-266", method="withdrawFoundersTeamAndAdvisors()", type_label=expression_statement];
1511 [label="266_ owner.transfer(FoundersTeamAndAdvisorsAccumulated);\n1511-expression_statement-267-267", method="withdrawFoundersTeamAndAdvisors()", type_label=expression_statement];
1518 [label="267_ FoundersTeamAndAdvisorsAccumulated = 0;\n1518-expression_statement-268-268", method="withdrawFoundersTeamAndAdvisors()", type_label=expression_statement];
1522 [label="269_ function withdrawAllFunds() public onlyOwner {\n        require (address(this).balance > 0);\n        owner.transfer(address(this).balance);\n    }\n1522-function_definition-270-273", method="withdrawAllFunds()", type_label=function_definition];
1525 [label="269_ onlyOwner\n1525-expression_statement-270-270", method="withdrawAllFunds()", type_label=expression_statement];
1528 [label="270_ require (address(this).balance > 0);\n1528-expression_statement-271-271", method="withdrawAllFunds()", type_label=expression_statement];
1539 [label="271_ owner.transfer(address(this).balance);\n1539-expression_statement-272-272", method="withdrawAllFunds()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
773;
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
29 -> 1574  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1574 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 1574  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
34 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
36 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
55 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
82 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
110 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
135 -> 142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
142 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
162 -> 166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
175 -> 184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
186 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
367 -> 373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
373 -> 378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
383 -> 388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
388 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
402 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
414 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
438 -> 442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
442 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
454 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
462 -> 466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
470 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
474 -> 478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
478 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
492 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
517 -> 525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
552 -> 565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
565 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
572 -> 581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
581 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
603 -> 619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
619 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
626 -> 633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
633 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
637 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
650 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
654 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
662 -> 666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
674 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
689 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
697 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
709 -> 713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
713 -> 717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
717 -> 721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
721 -> 725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
733 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
745 -> 756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
756 -> 765  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2301 -> 775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
765 -> 2301  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
775 -> 789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
789 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
797 -> 809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 820  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
815 -> 868  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2360 -> 930  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
820 -> 829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
829 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
847 -> 856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
856 -> 2360  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
868 -> 877  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
868 -> 926  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
877 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
886 -> 895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
895 -> 904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
913 -> 2360  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
926 -> 2360  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
930 -> 939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
939 -> 946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
946 -> 954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
954 -> 960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
960 -> 967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
967 -> 982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
982 -> 991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
991 -> 1002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1023 -> 1032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1035 -> 1039  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1039 -> 1047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1047 -> 1066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1066 -> 1085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1085 -> 1104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1104 -> 1123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1123 -> 1142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1142 -> 1161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1180 -> 1190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1190 -> 1202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1202 -> 1212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1212 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1234 -> 1244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1244 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1248 -> 1258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1262 -> 1272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1276 -> 1282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1287 -> 1293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1298 -> 1304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1304 -> 1317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1326 -> 1336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1340 -> 1350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1354 -> 1360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1360 -> 1367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1367 -> 1374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1378 -> 1384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1384 -> 1391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1391 -> 1398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1402 -> 1408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1408 -> 1415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1415 -> 1422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1426 -> 1432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1432 -> 1439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1439 -> 1446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1450 -> 1456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1456 -> 1463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1463 -> 1470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1474 -> 1480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1480 -> 1487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1487 -> 1494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1498 -> 1504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1504 -> 1511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1511 -> 1518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1522 -> 1528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1528 -> 1539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 2301  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
