digraph  {
13 [label="2_ address constant ProxyAddress = 0x1234567896326230a28ee368825D11fE6571Be4a;\n13-new_variable-3-3", method="", type_label=new_variable];
18 [label="3_ address constant TreasuryAddress = 0x12345678979f29eBc99E00bdc5693ddEa564cA80;\n18-new_variable-4-4", method="", type_label=new_variable];
23 [label="4_ address constant RegistryAddress = 0x12345678982cB986Dd291B50239295E3Cb10Cdf6;\n23-new_variable-5-5", method="", type_label=new_variable];
31 [label="7_ function getOwner() external view returns (address);\n31-function_definition-8-8", method="getOwner()", type_label=function_definition];
39 [label="8_ function getExchangeContract() external view returns (address);\n39-function_definition-9-9", method="getExchangeContract()", type_label=function_definition];
47 [label="9_ function contractApproved(address traderAddr) external view returns (bool);\n47-function_definition-10-10", method="contractApproved(address traderAddr)", type_label=function_definition];
59 [label="10_ function contractApprovedBoth(address traderAddr1, address traderAddr2) external view returns (bool);\n59-function_definition-11-11", method="contractApprovedBoth(address traderAddr1,address traderAddr2)", type_label=function_definition];
75 [label="11_ function acceptNextExchangeContract() external;\n75-function_definition-12-12", method="acceptNextExchangeContract()", type_label=function_definition];
81 [label="14_ address public owner;\n81-new_variable-15-15", method="", type_label=new_variable];
86 [label="15_ address private nextOwner;\n86-new_variable-16-16", method="", type_label=new_variable];
101 [label="17_ modifier onlyOwner {\n        require (msg.sender == owner, \"onlyOwner methods called by non-owner.\");\n        _;\n    }\n101-expression_statement-18-21", method="", type_label=expression_statement];
104 [label="18_ require (msg.sender == owner, \"onlyOwner methods called by non-owner.\");\n104-expression_statement-19-19", method="", type_label=expression_statement];
116 [label="19_ _;\n116-expression_statement-20-20", method="", type_label=expression_statement];
118 [label="21_ function approveNextOwner(address _nextOwner) external onlyOwner {\n        require (_nextOwner != owner, \"Cannot approve current owner.\");\n        nextOwner = _nextOwner;\n    }\n118-function_definition-22-25", method="approveNextOwner(address _nextOwner)", type_label=function_definition];
125 [label="21_ onlyOwner\n125-expression_statement-22-22", method="approveNextOwner(address _nextOwner)", type_label=expression_statement];
128 [label="22_ require (_nextOwner != owner, \"Cannot approve current owner.\");\n128-expression_statement-23-23", method="approveNextOwner(address _nextOwner)", type_label=expression_statement];
138 [label="23_ nextOwner = _nextOwner;\n138-expression_statement-24-24", method="approveNextOwner(address _nextOwner)", type_label=expression_statement];
142 [label="25_ function acceptNextOwner() external {\n        require (msg.sender == nextOwner, \"Can only accept preapproved new owner.\");\n        emit OwnershipTransfer(nextOwner, owner);\n        owner = nextOwner;\n    }\n142-function_definition-26-30", method="acceptNextOwner()", type_label=function_definition];
146 [label="26_ require (msg.sender == nextOwner, \"Can only accept preapproved new owner.\");\n146-expression_statement-27-27", method="acceptNextOwner()", type_label=expression_statement];
164 [label="28_ owner = nextOwner;\n164-expression_statement-29-29", method="acceptNextOwner()", type_label=expression_statement];
180 [label="32_ address public exchangeContract;\n180-new_variable-33-33", method="", type_label=new_variable];
185 [label="33_ uint private exchangeContractVersion;\n185-new_variable-34-34", method="", type_label=new_variable];
190 [label="34_ address private nextExchangeContract;\n190-new_variable-35-35", method="", type_label=new_variable];
195 [label="35_ mapping (address => bool) private prevExchangeContracts;\n195-new_variable-36-36", method="", type_label=new_variable];
202 [label="36_ mapping (address => uint) private traderApprovals;\n202-new_variable-37-37", method="", type_label=new_variable];
231 [label="40_ owner = msg.sender;\n231-expression_statement-41-41", method="", type_label=expression_statement];
237 [label="42_ function getOwner() external view returns (address) {\n        return owner;\n    }\n237-function_definition-43-45", method="getOwner()", type_label=function_definition];
246 [label="43_ return owner;\n246-return-44-44", method="getOwner()", type_label=return];
248 [label="45_ function getExchangeContract() external view returns (address) {\n        return exchangeContract;\n    }\n248-function_definition-46-48", method="getExchangeContract()", type_label=function_definition];
257 [label="46_ return exchangeContract;\n257-return-47-47", method="getExchangeContract()", type_label=return];
259 [label="48_ function approveNextExchangeContract(address _nextExchangeContract) external onlyOwner {\n        require (_nextExchangeContract != exchangeContract, \"Cannot approve current exchange contract.\");\n        require (!prevExchangeContracts[_nextExchangeContract], \"Cannot approve previously used contract.\");\n        nextExchangeContract = _nextExchangeContract;\n    }\n259-function_definition-49-53", method="approveNextExchangeContract(address _nextExchangeContract)", type_label=function_definition];
266 [label="48_ onlyOwner\n266-expression_statement-49-49", method="approveNextExchangeContract(address _nextExchangeContract)", type_label=expression_statement];
269 [label="49_ require (_nextExchangeContract != exchangeContract, \"Cannot approve current exchange contract.\");\n269-expression_statement-50-50", method="approveNextExchangeContract(address _nextExchangeContract)", type_label=expression_statement];
279 [label="50_ require (!prevExchangeContracts[_nextExchangeContract], \"Cannot approve previously used contract.\");\n279-expression_statement-51-51", method="approveNextExchangeContract(address _nextExchangeContract)", type_label=expression_statement];
290 [label="51_ nextExchangeContract = _nextExchangeContract;\n290-expression_statement-52-52", method="approveNextExchangeContract(address _nextExchangeContract)", type_label=expression_statement];
294 [label="53_ function acceptNextExchangeContract() external {\n        require (msg.sender == nextExchangeContract, \"Can only accept preapproved exchange contract.\");\n        exchangeContract = nextExchangeContract;\n        prevExchangeContracts[nextExchangeContract] = true;\n        exchangeContractVersion++;\n        emit UpgradeExchangeContract(exchangeContract, exchangeContractVersion);\n    }\n294-function_definition-54-60", method="acceptNextExchangeContract()", type_label=function_definition];
298 [label="54_ require (msg.sender == nextExchangeContract, \"Can only accept preapproved exchange contract.\");\n298-expression_statement-55-55", method="acceptNextExchangeContract()", type_label=expression_statement];
310 [label="55_ exchangeContract = nextExchangeContract;\n310-expression_statement-56-56", method="acceptNextExchangeContract()", type_label=expression_statement];
314 [label="56_ prevExchangeContracts[nextExchangeContract] = true;\n314-expression_statement-57-57", method="acceptNextExchangeContract()", type_label=expression_statement];
321 [label="57_ exchangeContractVersion++;\n321-expression_statement-58-58", method="acceptNextExchangeContract()", type_label=expression_statement];
322 [label="57_ exchangeContractVersion++\n322-expression_statement-58-58", method="acceptNextExchangeContract()", type_label=expression_statement];
330 [label="60_ function traderApproveCurrentExchangeContract(uint _exchangeContractVersion) external {\n        require (_exchangeContractVersion > 1, \"First version doesn't need approval.\");\n        require (_exchangeContractVersion == exchangeContractVersion, \"Can only approve the latest version.\");\n        traderApprovals[msg.sender] = _exchangeContractVersion;\n        emit TraderApproveContract(msg.sender, _exchangeContractVersion);\n    }\n330-function_definition-61-66", method="traderApproveCurrentExchangeContract(uint _exchangeContractVersion)", type_label=function_definition];
338 [label="61_ require (_exchangeContractVersion > 1, \"First version doesn't need approval.\");\n338-expression_statement-62-62", method="traderApproveCurrentExchangeContract(uint _exchangeContractVersion)", type_label=expression_statement];
348 [label="62_ require (_exchangeContractVersion == exchangeContractVersion, \"Can only approve the latest version.\");\n348-expression_statement-63-63", method="traderApproveCurrentExchangeContract(uint _exchangeContractVersion)", type_label=expression_statement];
358 [label="63_ traderApprovals[msg.sender] = _exchangeContractVersion;\n358-expression_statement-64-64", method="traderApproveCurrentExchangeContract(uint _exchangeContractVersion)", type_label=expression_statement];
374 [label="66_ function contractApproved(address traderAddr) external view returns (bool) {\n        if (exchangeContractVersion > 1) {\n            return exchangeContractVersion == traderApprovals[traderAddr];\n        } else {\n            return exchangeContractVersion == 1;\n        }\n    }\n374-function_definition-67-73", method="contractApproved(address traderAddr)", type_label=function_definition];
387 [label="67_ if_exchangeContractVersion > 1\n387-if-68-72", method="contractApproved(address traderAddr)", type_label=if];
824 [label="67_ end_if", method="contractApproved(address traderAddr)", type_label=end_if];
392 [label="68_ return exchangeContractVersion == traderApprovals[traderAddr];\n392-return-69-69", method="contractApproved(address traderAddr)", type_label=return];
399 [label="70_ return exchangeContractVersion == 1;\n399-return-71-71", method="contractApproved(address traderAddr)", type_label=return];
403 [label="73_ function contractApprovedBoth(address traderAddr1, address traderAddr2) external view returns (bool) {\n        if (exchangeContractVersion > 1) {\n            return\n              exchangeContractVersion == traderApprovals[traderAddr1] &&\n              exchangeContractVersion == traderApprovals[traderAddr2];\n        } else {\n            return exchangeContractVersion == 1;\n        }\n    }\n403-function_definition-74-82", method="contractApprovedBoth(address traderAddr1,address traderAddr2)", type_label=function_definition];
420 [label="74_ if_exchangeContractVersion > 1\n420-if-75-81", method="contractApprovedBoth(address traderAddr1,address traderAddr2)", type_label=if];
857 [label="74_ end_if", method="contractApprovedBoth(address traderAddr1,address traderAddr2)", type_label=end_if];
425 [label="75_ return\n              exchangeContractVersion == traderApprovals[traderAddr1] &&\n              exchangeContractVersion == traderApprovals[traderAddr2];\n425-return-76-78", method="contractApprovedBoth(address traderAddr1,address traderAddr2)", type_label=return];
438 [label="79_ return exchangeContractVersion == 1;\n438-return-80-80", method="contractApprovedBoth(address traderAddr1,address traderAddr2)", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 18  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
18 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 86  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
118 -> 128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
142 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
185 -> 190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
190 -> 195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
195 -> 202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
237 -> 246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
246 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
248 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
257 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
259 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
279 -> 290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
338 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
348 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
374 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 392  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
387 -> 399  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
824 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
392 -> 824  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
392 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
399 -> 824  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
399 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
403 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 425  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
420 -> 438  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
857 -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
425 -> 857  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
425 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
438 -> 857  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
438 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
