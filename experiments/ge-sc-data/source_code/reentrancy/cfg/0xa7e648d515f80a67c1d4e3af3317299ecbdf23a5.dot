digraph  {
12 [label="2_ function mint(address to, uint256 value) external returns (bool);\n12-function_definition-3-3", method="mint(address to,uint256 value)", type_label=function_definition];
30 [label="5_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n30-function_definition-6-13", method="mul(uint256 a,uint256 b)", type_label=function_definition];
47 [label="6_ if_a == 0\n47-if-7-9", method="mul(uint256 a,uint256 b)", type_label=if];
732 [label="6_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
52 [label="7_ return 0;\n52-return-8-8", method="mul(uint256 a,uint256 b)", type_label=return];
54 [label="9_ uint256 c = a * b;\n54-new_variable-10-10", method="mul(uint256 a,uint256 b)", type_label=new_variable];
62 [label="10_ require(c / a == b);\n62-expression_statement-11-11", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
71 [label="11_ return c;\n71-return-12-12", method="mul(uint256 a,uint256 b)", type_label=return];
73 [label="13_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n73-function_definition-14-18", method="div(uint256 a,uint256 b)", type_label=function_definition];
90 [label="14_ require(b > 0);\n90-expression_statement-15-15", method="div(uint256 a,uint256 b)", type_label=expression_statement];
97 [label="15_ uint256 c = a / b;\n97-new_variable-16-16", method="div(uint256 a,uint256 b)", type_label=new_variable];
105 [label="16_ return c;\n105-return-17-17", method="div(uint256 a,uint256 b)", type_label=return];
107 [label="18_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n107-function_definition-19-23", method="sub(uint256 a,uint256 b)", type_label=function_definition];
124 [label="19_ require(b <= a);\n124-expression_statement-20-20", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
131 [label="20_ uint256 c = a - b;\n131-new_variable-21-21", method="sub(uint256 a,uint256 b)", type_label=new_variable];
139 [label="21_ return c;\n139-return-22-22", method="sub(uint256 a,uint256 b)", type_label=return];
141 [label="23_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n141-function_definition-24-28", method="add(uint256 a,uint256 b)", type_label=function_definition];
158 [label="24_ uint256 c = a + b;\n158-new_variable-25-25", method="add(uint256 a,uint256 b)", type_label=new_variable];
166 [label="25_ require(c >= a);\n166-expression_statement-26-26", method="add(uint256 a,uint256 b)", type_label=expression_statement];
173 [label="26_ return c;\n173-return-27-27", method="add(uint256 a,uint256 b)", type_label=return];
175 [label="28_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n175-function_definition-29-32", method="mod(uint256 a,uint256 b)", type_label=function_definition];
192 [label="29_ require(b != 0);\n192-expression_statement-30-30", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
199 [label="30_ return a % b;\n199-return-31-31", method="mod(uint256 a,uint256 b)", type_label=return];
206 [label="34_ address public owner;\n206-new_variable-35-35", method="", type_label=new_variable];
223 [label="37_ owner = msg.sender;\n223-expression_statement-38-38", method="", type_label=expression_statement];
229 [label="39_ modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n229-expression_statement-40-43", method="", type_label=expression_statement];
232 [label="40_ require(msg.sender == owner);\n232-expression_statement-41-41", method="", type_label=expression_statement];
241 [label="41_ _;\n241-expression_statement-42-42", method="", type_label=expression_statement];
243 [label="43_ function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n243-function_definition-44-48", method="transferOwnership(address newOwner)", type_label=function_definition];
250 [label="43_ onlyOwner\n250-expression_statement-44-44", method="transferOwnership(address newOwner)", type_label=expression_statement];
253 [label="44_ require(newOwner != address(0));\n253-expression_statement-45-45", method="transferOwnership(address newOwner)", type_label=expression_statement];
268 [label="46_ owner = newOwner;\n268-expression_statement-47-47", method="transferOwnership(address newOwner)", type_label=expression_statement];
283 [label="51_ Token public token;\n283-new_variable-52-52", method="", type_label=new_variable];
289 [label="52_ address public trust;\n289-new_variable-53-53", method="", type_label=new_variable];
294 [label="53_ address[] public investors;\n294-new_variable-54-54", method="", type_label=new_variable];
300 [label="54_ struct Investor {\n        address investor;\n        string currency;\n        uint rate;\n        uint amount;\n        bool redeemed;\n        uint timestamp;\n		uint tokens;\n    }\n300-expression_statement-55-63", method="Investor()", type_label=expression_statement];
330 [label="63_ mapping(address => Investor[]) public investments;\n330-new_variable-64-64", method="", type_label=new_variable];
339 [label="64_ mapping(address => uint) public investmentsCount;\n339-new_variable-65-65", method="", type_label=new_variable];
348 [label="66_ owner = msg.sender;\n348-expression_statement-67-67", method="", type_label=expression_statement];
354 [label="68_ modifier onlyTrust() {\n        require(msg.sender == trust);\n        _;\n    }\n354-expression_statement-69-72", method="", type_label=expression_statement];
357 [label="69_ require(msg.sender == trust);\n357-expression_statement-70-70", method="", type_label=expression_statement];
366 [label="70_ _;\n366-expression_statement-71-71", method="", type_label=expression_statement];
368 [label="72_ function makeInvestment(address _investor, string _currency, uint _rate, uint _amount) onlyTrust public returns (bool){\n        uint numberOfTokens;\n        numberOfTokens = _amount.div(_rate);\n        uint _counter = investments[_investor].push(Investor(_investor, _currency, _rate, _amount, false, now, numberOfTokens));\n        investmentsCount[_investor] = _counter;\n        require(token.mint(_investor, numberOfTokens));\n        investors.push(_investor);\n        return true;\n    }\n368-function_definition-73-81", method="makeInvestment(address _investor,string _currency,uint _rate,uint _amount)", type_label=function_definition];
386 [label="72_ onlyTrust\n386-expression_statement-73-73", method="makeInvestment(address _investor,string _currency,uint _rate,uint _amount)", type_label=expression_statement];
394 [label="73_ uint numberOfTokens;\n394-new_variable-74-74", method="makeInvestment(address _investor,string _currency,uint _rate,uint _amount)", type_label=new_variable];
399 [label="74_ numberOfTokens = _amount.div(_rate);\n399-expression_statement-75-75", method="makeInvestment(address _investor,string _currency,uint _rate,uint _amount)", type_label=expression_statement];
408 [label="75_ uint _counter = investments[_investor].push(Investor(_investor, _currency, _rate, _amount, false, now, numberOfTokens));\n408-new_variable-76-76", method="makeInvestment(address _investor,string _currency,uint _rate,uint _amount)", type_label=new_variable];
437 [label="76_ investmentsCount[_investor] = _counter;\n437-expression_statement-77-77", method="makeInvestment(address _investor,string _currency,uint _rate,uint _amount)", type_label=expression_statement];
443 [label="77_ require(token.mint(_investor, numberOfTokens));\n443-expression_statement-78-78", method="makeInvestment(address _investor,string _currency,uint _rate,uint _amount)", type_label=expression_statement];
455 [label="78_ investors.push(_investor);\n455-expression_statement-79-79", method="makeInvestment(address _investor,string _currency,uint _rate,uint _amount)", type_label=expression_statement];
462 [label="79_ return true;\n462-return-80-80", method="makeInvestment(address _investor,string _currency,uint _rate,uint _amount)", type_label=return];
465 [label="81_ function redeem(address _investor, uint _index) public onlyTrust returns (bool) {\n        require(investments[_investor][_index].redeemed == false);\n        investments[_investor][_index].redeemed = true;\n        return true;\n    }\n465-function_definition-82-86", method="redeem(address _investor,uint _index)", type_label=function_definition];
476 [label="81_ onlyTrust\n476-expression_statement-82-82", method="redeem(address _investor,uint _index)", type_label=expression_statement];
483 [label="82_ require(investments[_investor][_index].redeemed == false);\n483-expression_statement-83-83", method="redeem(address _investor,uint _index)", type_label=expression_statement];
497 [label="83_ investments[_investor][_index].redeemed = true;\n497-expression_statement-84-84", method="redeem(address _investor,uint _index)", type_label=expression_statement];
508 [label="84_ return true;\n508-return-85-85", method="redeem(address _investor,uint _index)", type_label=return];
511 [label="86_ function setTokenContractsAddress(address _tokenContract) public onlyOwner {\n        require(_tokenContract != address(0));\n        token = Token(_tokenContract);\n    }\n511-function_definition-87-90", method="setTokenContractsAddress(address _tokenContract)", type_label=function_definition];
518 [label="86_ onlyOwner\n518-expression_statement-87-87", method="setTokenContractsAddress(address _tokenContract)", type_label=expression_statement];
521 [label="87_ require(_tokenContract != address(0));\n521-expression_statement-88-88", method="setTokenContractsAddress(address _tokenContract)", type_label=expression_statement];
530 [label="88_ token = Token(_tokenContract);\n530-expression_statement-89-89", method="setTokenContractsAddress(address _tokenContract)", type_label=expression_statement];
537 [label="90_ function setTrustAddress(address _trust) public onlyOwner {\n        require(_trust != address(0));\n        trust = _trust;\n    }\n537-function_definition-91-94", method="setTrustAddress(address _trust)", type_label=function_definition];
544 [label="90_ onlyOwner\n544-expression_statement-91-91", method="setTrustAddress(address _trust)", type_label=expression_statement];
547 [label="91_ require(_trust != address(0));\n547-expression_statement-92-92", method="setTrustAddress(address _trust)", type_label=expression_statement];
556 [label="92_ trust = _trust;\n556-expression_statement-93-93", method="setTrustAddress(address _trust)", type_label=expression_statement];
560 [label="94_ function returnInvestors() public view returns (address[]) {\n        return investors;\n    }\n560-function_definition-95-97", method="returnInvestors()", type_label=function_definition];
570 [label="95_ return investors;\n570-return-96-96", method="returnInvestors()", type_label=return];
572 [label="97_ function getInvestmentsCounter(address _investor) public view returns(uint) {\n        return investmentsCount[_investor];\n    }\n572-function_definition-98-100", method="getInvestmentsCounter(address _investor)", type_label=function_definition];
585 [label="98_ return investmentsCount[_investor];\n585-return-99-99", method="getInvestmentsCounter(address _investor)", type_label=return];
589 [label="100_ function getInvestor(address _investor, uint _index) public view returns(string, uint, uint, bool, uint, uint) {\n        return (\n            investments[_investor][_index].currency,\n            investments[_investor][_index].rate,\n            investments[_investor][_index].amount,\n            investments[_investor][_index].redeemed,\n            investments[_investor][_index].timestamp,\n            investments[_investor][_index].tokens\n        );\n    }\n589-function_definition-101-110", method="getInvestor(address _investor,uint _index)", type_label=function_definition];
621 [label="101_ return (\n            investments[_investor][_index].currency,\n            investments[_investor][_index].rate,\n            investments[_investor][_index].amount,\n            investments[_investor][_index].redeemed,\n            investments[_investor][_index].timestamp,\n            investments[_investor][_index].tokens\n        );\n621-return-102-109", method="getInvestor(address _investor,uint _index)", type_label=return];
665 [label="110_ function isRedeemed(address _investor, uint _index) public view returns(bool) {\n        return investments[_investor][_index].redeemed;\n    }\n665-function_definition-111-113", method="isRedeemed(address _investor,uint _index)", type_label=function_definition];
682 [label="111_ return investments[_investor][_index].redeemed;\n682-return-112-112", method="isRedeemed(address _investor,uint _index)", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
30 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 52  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
47 -> 732  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
732 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
52 -> 732  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
52 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
54 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 71  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
71 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
73 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
90 -> 97  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
97 -> 105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
105 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
107 -> 124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
124 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
141 -> 158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
158 -> 166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
166 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
175 -> 192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
192 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
232 -> 241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
243 -> 253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
283 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
368 -> 394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
394 -> 399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
399 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
443 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
455 -> 462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
462 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
465 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
508 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
511 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
547 -> 556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
560 -> 570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
572 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
589 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
665 -> 682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
682 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
