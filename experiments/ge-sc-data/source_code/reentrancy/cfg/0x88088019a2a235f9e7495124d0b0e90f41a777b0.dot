digraph  {
14 [label="4_ function safeAdd(uint256 _x, uint256 _y) pure internal returns (uint256) {\n        uint256 z = _x + _y;\n        assert(z >= _x);\n        return z;\n    }\n14-function_definition-5-9", method="safeAdd(uint256 _x,uint256 _y)", type_label=function_definition];
31 [label="5_ uint256 z = _x + _y;\n31-new_variable-6-6", method="safeAdd(uint256 _x,uint256 _y)", type_label=new_variable];
39 [label="6_ assert(z >= _x);\n39-expression_statement-7-7", method="safeAdd(uint256 _x,uint256 _y)", type_label=expression_statement];
46 [label="7_ return z;\n46-return-8-8", method="safeAdd(uint256 _x,uint256 _y)", type_label=return];
48 [label="9_ function safeSub(uint256 _x, uint256 _y) pure internal returns (uint256) {\n        assert(_x >= _y);\n        return _x - _y;\n    }\n48-function_definition-10-13", method="safeSub(uint256 _x,uint256 _y)", type_label=function_definition];
65 [label="10_ assert(_x >= _y);\n65-expression_statement-11-11", method="safeSub(uint256 _x,uint256 _y)", type_label=expression_statement];
72 [label="11_ return _x - _y;\n72-return-12-12", method="safeSub(uint256 _x,uint256 _y)", type_label=return];
76 [label="13_ function safeMul(uint256 _x, uint256 _y) pure internal returns (uint256) {\n        uint256 z = _x * _y;\n        assert(_x == 0 || z / _x == _y);\n        return z;\n    }\n76-function_definition-14-18", method="safeMul(uint256 _x,uint256 _y)", type_label=function_definition];
93 [label="14_ uint256 z = _x * _y;\n93-new_variable-15-15", method="safeMul(uint256 _x,uint256 _y)", type_label=new_variable];
101 [label="15_ assert(_x == 0 || z / _x == _y);\n101-expression_statement-16-16", method="safeMul(uint256 _x,uint256 _y)", type_label=expression_statement];
114 [label="16_ return z;\n114-return-17-17", method="safeMul(uint256 _x,uint256 _y)", type_label=return];
119 [label="20_ function balanceOf( address who ) public view returns (uint value);\n119-function_definition-21-21", method="balanceOf(address who)", type_label=function_definition];
132 [label="21_ function allowance( address owner, address spender ) public view returns (uint remaining);\n132-function_definition-22-22", method="allowance(address owner,address spender)", type_label=function_definition];
149 [label="22_ function transfer( address to, uint value) public returns (bool ok);\n149-function_definition-23-23", method="transfer(address to,uint value)", type_label=function_definition];
165 [label="23_ function transferFrom( address from, address to, uint value) public returns (bool ok);\n165-function_definition-24-24", method="transferFrom(address from,address to,uint value)", type_label=function_definition];
185 [label="24_ function approve( address spender, uint value ) public returns (bool ok);\n185-function_definition-25-25", method="approve(address spender,uint value)", type_label=function_definition];
232 [label="29_ function checkDividends(address _addr) view public returns(uint _ethAmount, uint _daiAmount);\n232-function_definition-30-30", method="checkDividends(address _addr)", type_label=function_definition];
249 [label="30_ function withdrawEthDividends() public returns (uint _amount);\n249-function_definition-31-31", method="withdrawEthDividends()", type_label=function_definition];
257 [label="31_ function withdrawDaiDividends() public returns (uint _amount);\n257-function_definition-32-32", method="withdrawDaiDividends()", type_label=function_definition];
305 [label="36_ struct tokenHolder {\n    uint tokens;            \n    uint currentEthPoints;  \n    uint lastEthSnapshot;   \n    uint currentDaiPoints;  \n    uint lastDaiSnapshot;   \n  }\n305-expression_statement-37-43", method="tokenHolder()", type_label=expression_statement];
327 [label="43_ bool    public isLocked;\n327-new_variable-44-44", method="", type_label=new_variable];
332 [label="44_ uint8   public decimals;\n332-new_variable-45-45", method="", type_label=new_variable];
337 [label="45_ address public daiToken;\n337-new_variable-46-46", method="", type_label=new_variable];
342 [label="46_ string  public symbol;\n342-new_variable-47-47", method="", type_label=new_variable];
347 [label="47_ string  public name;\n347-new_variable-48-48", method="", type_label=new_variable];
352 [label="48_ uint public    totalSupply;\n352-new_variable-49-49", method="", type_label=new_variable];
357 [label="49_ uint public    holdoverEthBalance;\n357-new_variable-50-50", method="", type_label=new_variable];
362 [label="50_ uint public    totalEthReceived;\n362-new_variable-51-51", method="", type_label=new_variable];
367 [label="51_ uint public    holdoverDaiBalance;\n367-new_variable-52-52", method="", type_label=new_variable];
372 [label="52_ uint public    totalDaiReceived;\n372-new_variable-53-53", method="", type_label=new_variable];
377 [label="53_ mapping (address => mapping (address => uint)) private approvals;\n377-new_variable-54-54", method="", type_label=new_variable];
386 [label="54_ mapping (address => tokenHolder) public tokenHolders;\n386-new_variable-55-55", method="", type_label=new_variable];
416 [label="56_ daiToken = _daiToken;\n416-expression_statement-57-57", method="", type_label=expression_statement];
420 [label="57_ totalSupply = _tokenSupply;\n420-expression_statement-58-58", method="", type_label=expression_statement];
424 [label="58_ decimals = _decimals;\n424-expression_statement-59-59", method="", type_label=expression_statement];
428 [label="59_ name = _name;\n428-expression_statement-60-60", method="", type_label=expression_statement];
432 [label="60_ symbol = _symbol;\n432-expression_statement-61-61", method="", type_label=expression_statement];
436 [label="61_ tokenHolders[msg.sender].tokens = totalSupply;\n436-expression_statement-62-62", method="", type_label=expression_statement];
458 [label="64_ function transfer(address _to, uint _value) public returns (bool success) {\n    _transfer(msg.sender, _to, _value);\n    return true;\n  }\n458-function_definition-65-68", method="transfer(address _to,uint _value)", type_label=function_definition];
475 [label="65_ _transfer(msg.sender, _to, _value);\n475-expression_statement-66-66", method="transfer(address _to,uint _value)", type_label=expression_statement];
486 [label="66_ return true;\n486-return-67-67", method="transfer(address _to,uint _value)", type_label=return];
489 [label="68_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    _transfer(_from, _to, _value);\n    _approve(_from, msg.sender, safeSub(approvals[_from][msg.sender], _value));\n    return true;\n  }\n489-function_definition-69-73", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
509 [label="69_ _transfer(_from, _to, _value);\n509-expression_statement-70-70", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
518 [label="70_ _approve(_from, msg.sender, safeSub(approvals[_from][msg.sender], _value));\n518-expression_statement-71-71", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
540 [label="71_ return true;\n540-return-72-72", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
543 [label="73_ function _transfer(address _from, address _to, uint _value) internal {\n    require(_to != address(0));\n    calcCurPointsForAcct(_from);\n    tokenHolders[_from].tokens = safeSub(tokenHolders[_from].tokens, _value);\n    if (tokenHolders[_to].lastEthSnapshot == 0)\n      tokenHolders[_to].lastEthSnapshot = totalEthReceived;\n    if (tokenHolders[_to].lastDaiSnapshot == 0)\n      tokenHolders[_to].lastDaiSnapshot = totalDaiReceived;\n    calcCurPointsForAcct(_to);\n    tokenHolders[_to].tokens = safeAdd(tokenHolders[_to].tokens, _value);\n    emit Transfer(_from, _to, _value);\n  }\n543-function_definition-74-85", method="_transfer(address _from,address _to,uint _value)", type_label=function_definition];
559 [label="74_ require(_to != address(0));\n559-expression_statement-75-75", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
568 [label="75_ calcCurPointsForAcct(_from);\n568-expression_statement-76-76", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
573 [label="76_ tokenHolders[_from].tokens = safeSub(tokenHolders[_from].tokens, _value);\n573-expression_statement-77-77", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
590 [label="77_ if_tokenHolders[_to].lastEthSnapshot == 0\n590-if-78-79", method="_transfer(address _from,address _to,uint _value)", type_label=if];
1925 [label="77_ end_if", method="_transfer(address _from,address _to,uint _value)", type_label=end_if];
598 [label="78_ tokenHolders[_to].lastEthSnapshot = totalEthReceived;\n598-expression_statement-79-79", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
606 [label="79_ if_tokenHolders[_to].lastDaiSnapshot == 0\n606-if-80-81", method="_transfer(address _from,address _to,uint _value)", type_label=if];
1941 [label="79_ end_if", method="_transfer(address _from,address _to,uint _value)", type_label=end_if];
614 [label="80_ tokenHolders[_to].lastDaiSnapshot = totalDaiReceived;\n614-expression_statement-81-81", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
622 [label="81_ calcCurPointsForAcct(_to);\n622-expression_statement-82-82", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
627 [label="82_ tokenHolders[_to].tokens = safeAdd(tokenHolders[_to].tokens, _value);\n627-expression_statement-83-83", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
652 [label="85_ function balanceOf(address _owner) public view returns (uint balance) {\n    balance = tokenHolders[_owner].tokens;\n  }\n652-function_definition-86-88", method="balanceOf(address _owner)", type_label=function_definition];
666 [label="86_ balance = tokenHolders[_owner].tokens;\n666-expression_statement-87-87", method="balanceOf(address _owner)", type_label=expression_statement];
674 [label="88_ function approve(address _spender, uint256 _value) public returns (bool) {\n    _approve(msg.sender, _spender, _value);\n    return true;\n  }\n674-function_definition-89-92", method="approve(address _spender,uint256 _value)", type_label=function_definition];
690 [label="89_ _approve(msg.sender, _spender, _value);\n690-expression_statement-90-90", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
701 [label="90_ return true;\n701-return-91-91", method="approve(address _spender,uint256 _value)", type_label=return];
704 [label="92_ function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\n    _approve(msg.sender, _spender, safeAdd(approvals[msg.sender][_spender], _addedValue));\n    return true;\n  }\n704-function_definition-93-96", method="increaseAllowance(address _spender,uint256 _addedValue)", type_label=function_definition];
720 [label="93_ _approve(msg.sender, _spender, safeAdd(approvals[msg.sender][_spender], _addedValue));\n720-expression_statement-94-94", method="increaseAllowance(address _spender,uint256 _addedValue)", type_label=expression_statement];
742 [label="94_ return true;\n742-return-95-95", method="increaseAllowance(address _spender,uint256 _addedValue)", type_label=return];
745 [label="96_ function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {\n    _approve(msg.sender, _spender, safeSub(approvals[msg.sender][_spender], _subtractedValue));\n    return true;\n  }\n745-function_definition-97-100", method="decreaseAllowance(address _spender,uint256 _subtractedValue)", type_label=function_definition];
761 [label="97_ _approve(msg.sender, _spender, safeSub(approvals[msg.sender][_spender], _subtractedValue));\n761-expression_statement-98-98", method="decreaseAllowance(address _spender,uint256 _subtractedValue)", type_label=expression_statement];
783 [label="98_ return true;\n783-return-99-99", method="decreaseAllowance(address _spender,uint256 _subtractedValue)", type_label=return];
786 [label="100_ function _approve(address _owner, address _spender, uint _value) internal {\n    require(_owner != address(0));\n    require(_spender != address(0));\n    approvals[_owner][_spender] = _value;\n    emit Approval(_owner, _spender, _value);\n  }\n786-function_definition-101-106", method="_approve(address _owner,address _spender,uint _value)", type_label=function_definition];
802 [label="101_ require(_owner != address(0));\n802-expression_statement-102-102", method="_approve(address _owner,address _spender,uint _value)", type_label=expression_statement];
811 [label="102_ require(_spender != address(0));\n811-expression_statement-103-103", method="_approve(address _owner,address _spender,uint _value)", type_label=expression_statement];
820 [label="103_ approvals[_owner][_spender] = _value;\n820-expression_statement-104-104", method="_approve(address _owner,address _spender,uint _value)", type_label=expression_statement];
836 [label="106_ function allowance(address _owner, address _spender) public view returns (uint remaining) {\n    return approvals[_owner][_spender];\n  }\n836-function_definition-107-109", method="allowance(address _owner,address _spender)", type_label=function_definition];
854 [label="107_ return approvals[_owner][_spender];\n854-return-108-108", method="allowance(address _owner,address _spender)", type_label=return];
860 [label="109_ function calcCurPointsForAcct(address _acct) internal {\n    uint256 _newEthPoints = safeMul(safeSub(totalEthReceived, tokenHolders[_acct].lastEthSnapshot), tokenHolders[_acct].tokens);\n    tokenHolders[_acct].currentEthPoints = safeAdd(tokenHolders[_acct].currentEthPoints, _newEthPoints);\n    tokenHolders[_acct].lastEthSnapshot = totalEthReceived;\n    uint256 _newDaiPoints = safeMul(safeSub(totalDaiReceived, tokenHolders[_acct].lastDaiSnapshot), tokenHolders[_acct].tokens);\n    tokenHolders[_acct].currentDaiPoints = safeAdd(tokenHolders[_acct].currentDaiPoints, _newDaiPoints);\n    tokenHolders[_acct].lastDaiSnapshot = totalDaiReceived;\n  }\n860-function_definition-110-117", method="calcCurPointsForAcct(address _acct)", type_label=function_definition];
868 [label="110_ uint256 _newEthPoints = safeMul(safeSub(totalEthReceived, tokenHolders[_acct].lastEthSnapshot), tokenHolders[_acct].tokens);\n868-new_variable-111-111", method="calcCurPointsForAcct(address _acct)", type_label=new_variable];
892 [label="111_ tokenHolders[_acct].currentEthPoints = safeAdd(tokenHolders[_acct].currentEthPoints, _newEthPoints);\n892-expression_statement-112-112", method="calcCurPointsForAcct(address _acct)", type_label=expression_statement];
909 [label="112_ tokenHolders[_acct].lastEthSnapshot = totalEthReceived;\n909-expression_statement-113-113", method="calcCurPointsForAcct(address _acct)", type_label=expression_statement];
917 [label="113_ uint256 _newDaiPoints = safeMul(safeSub(totalDaiReceived, tokenHolders[_acct].lastDaiSnapshot), tokenHolders[_acct].tokens);\n917-new_variable-114-114", method="calcCurPointsForAcct(address _acct)", type_label=new_variable];
941 [label="114_ tokenHolders[_acct].currentDaiPoints = safeAdd(tokenHolders[_acct].currentDaiPoints, _newDaiPoints);\n941-expression_statement-115-115", method="calcCurPointsForAcct(address _acct)", type_label=expression_statement];
958 [label="115_ tokenHolders[_acct].lastDaiSnapshot = totalDaiReceived;\n958-expression_statement-116-116", method="calcCurPointsForAcct(address _acct)", type_label=expression_statement];
970 [label="118_ holdoverEthBalance = safeAdd(holdoverEthBalance, msg.value);\n970-expression_statement-119-119", method="", type_label=expression_statement];
981 [label="119_ totalEthReceived = safeAdd(totalEthReceived, msg.value);\n981-expression_statement-120-120", method="", type_label=expression_statement];
992 [label="121_ function payDai(uint256 _daiAmount) external {\n    require(iERC20Token(daiToken).transferFrom(msg.sender, address(this), _daiAmount), \"failed to transfer dai\");\n    holdoverDaiBalance = safeAdd(holdoverDaiBalance, _daiAmount);\n    totalDaiReceived = safeAdd(totalDaiReceived, _daiAmount);\n  }\n992-function_definition-122-126", method="payDai(uint256 _daiAmount)", type_label=function_definition];
1000 [label="122_ require(iERC20Token(daiToken).transferFrom(msg.sender, address(this), _daiAmount), \"failed to transfer dai\");\n1000-expression_statement-123-123", method="payDai(uint256 _daiAmount)", type_label=expression_statement];
1024 [label="123_ holdoverDaiBalance = safeAdd(holdoverDaiBalance, _daiAmount);\n1024-expression_statement-124-124", method="payDai(uint256 _daiAmount)", type_label=expression_statement];
1033 [label="124_ totalDaiReceived = safeAdd(totalDaiReceived, _daiAmount);\n1033-expression_statement-125-125", method="payDai(uint256 _daiAmount)", type_label=expression_statement];
1042 [label="126_ function updateDaiBalance() public {\n    uint256 _actBalance = iERC20Token(daiToken).balanceOf(address(this));\n    uint256 _daiAmount = safeSub(_actBalance, holdoverDaiBalance);\n    holdoverDaiBalance = safeAdd(holdoverDaiBalance, _daiAmount);\n    totalDaiReceived = safeAdd(totalDaiReceived, _daiAmount);\n  }\n1042-function_definition-127-132", method="updateDaiBalance()", type_label=function_definition];
1046 [label="127_ uint256 _actBalance = iERC20Token(daiToken).balanceOf(address(this));\n1046-new_variable-128-128", method="updateDaiBalance()", type_label=new_variable];
1062 [label="128_ uint256 _daiAmount = safeSub(_actBalance, holdoverDaiBalance);\n1062-new_variable-129-129", method="updateDaiBalance()", type_label=new_variable];
1073 [label="129_ holdoverDaiBalance = safeAdd(holdoverDaiBalance, _daiAmount);\n1073-expression_statement-130-130", method="updateDaiBalance()", type_label=expression_statement];
1082 [label="130_ totalDaiReceived = safeAdd(totalDaiReceived, _daiAmount);\n1082-expression_statement-131-131", method="updateDaiBalance()", type_label=expression_statement];
1091 [label="132_ function checkDividends(address _addr) view public returns(uint _ethAmount, uint _daiAmount) {\n    uint _currentEthPoints = tokenHolders[_addr].currentEthPoints +\n      ((totalEthReceived - tokenHolders[_addr].lastEthSnapshot) * tokenHolders[_addr].tokens);\n    _ethAmount = _currentEthPoints / totalSupply;\n    uint _currentDaiPoints = tokenHolders[_addr].currentDaiPoints +\n      ((totalDaiReceived - tokenHolders[_addr].lastDaiSnapshot) * tokenHolders[_addr].tokens);\n    _daiAmount = _currentDaiPoints / totalSupply;\n  }\n1091-function_definition-133-140", method="checkDividends(address _addr)", type_label=function_definition];
1109 [label="133_ uint _currentEthPoints = tokenHolders[_addr].currentEthPoints +\n      ((totalEthReceived - tokenHolders[_addr].lastEthSnapshot) * tokenHolders[_addr].tokens);\n1109-new_variable-134-135", method="checkDividends(address _addr)", type_label=new_variable];
1135 [label="135_ _ethAmount = _currentEthPoints / totalSupply;\n1135-expression_statement-136-136", method="checkDividends(address _addr)", type_label=expression_statement];
1141 [label="136_ uint _currentDaiPoints = tokenHolders[_addr].currentDaiPoints +\n      ((totalDaiReceived - tokenHolders[_addr].lastDaiSnapshot) * tokenHolders[_addr].tokens);\n1141-new_variable-137-138", method="checkDividends(address _addr)", type_label=new_variable];
1167 [label="138_ _daiAmount = _currentDaiPoints / totalSupply;\n1167-expression_statement-139-139", method="checkDividends(address _addr)", type_label=expression_statement];
1173 [label="140_ function withdrawEthDividends() public returns (uint _amount) {\n    calcCurPointsForAcct(msg.sender);\n    _amount = tokenHolders[msg.sender].currentEthPoints / totalSupply;\n    uint _pointsUsed = safeMul(_amount, totalSupply);\n    tokenHolders[msg.sender].currentEthPoints = safeSub(tokenHolders[msg.sender].currentEthPoints, _pointsUsed);\n    holdoverEthBalance = safeSub(holdoverEthBalance, _amount);\n    msg.sender.transfer(_amount);\n  }\n1173-function_definition-141-148", method="withdrawEthDividends()", type_label=function_definition];
1182 [label="141_ calcCurPointsForAcct(msg.sender);\n1182-expression_statement-142-142", method="withdrawEthDividends()", type_label=expression_statement];
1189 [label="142_ _amount = tokenHolders[msg.sender].currentEthPoints / totalSupply;\n1189-expression_statement-143-143", method="withdrawEthDividends()", type_label=expression_statement];
1201 [label="143_ uint _pointsUsed = safeMul(_amount, totalSupply);\n1201-new_variable-144-144", method="withdrawEthDividends()", type_label=new_variable];
1212 [label="144_ tokenHolders[msg.sender].currentEthPoints = safeSub(tokenHolders[msg.sender].currentEthPoints, _pointsUsed);\n1212-expression_statement-145-145", method="withdrawEthDividends()", type_label=expression_statement];
1233 [label="145_ holdoverEthBalance = safeSub(holdoverEthBalance, _amount);\n1233-expression_statement-146-146", method="withdrawEthDividends()", type_label=expression_statement];
1242 [label="146_ msg.sender.transfer(_amount);\n1242-expression_statement-147-147", method="withdrawEthDividends()", type_label=expression_statement];
1251 [label="148_ function withdrawDaiDividends() public returns (uint _amount) {\n    calcCurPointsForAcct(msg.sender);\n    _amount = tokenHolders[msg.sender].currentDaiPoints / totalSupply;\n    uint _pointsUsed = safeMul(_amount, totalSupply);\n    tokenHolders[msg.sender].currentDaiPoints = safeSub(tokenHolders[msg.sender].currentDaiPoints, _pointsUsed);\n    holdoverDaiBalance = safeSub(holdoverDaiBalance, _amount);\n    require(iERC20Token(daiToken).transfer(msg.sender, _amount), \"failed to transfer dai\");\n  }\n1251-function_definition-149-156", method="withdrawDaiDividends()", type_label=function_definition];
1260 [label="149_ calcCurPointsForAcct(msg.sender);\n1260-expression_statement-150-150", method="withdrawDaiDividends()", type_label=expression_statement];
1267 [label="150_ _amount = tokenHolders[msg.sender].currentDaiPoints / totalSupply;\n1267-expression_statement-151-151", method="withdrawDaiDividends()", type_label=expression_statement];
1279 [label="151_ uint _pointsUsed = safeMul(_amount, totalSupply);\n1279-new_variable-152-152", method="withdrawDaiDividends()", type_label=new_variable];
1290 [label="152_ tokenHolders[msg.sender].currentDaiPoints = safeSub(tokenHolders[msg.sender].currentDaiPoints, _pointsUsed);\n1290-expression_statement-153-153", method="withdrawDaiDividends()", type_label=expression_statement];
1311 [label="153_ holdoverDaiBalance = safeSub(holdoverDaiBalance, _amount);\n1311-expression_statement-154-154", method="withdrawDaiDividends()", type_label=expression_statement];
1320 [label="154_ require(iERC20Token(daiToken).transfer(msg.sender, _amount), \"failed to transfer dai\");\n1320-expression_statement-155-155", method="withdrawDaiDividends()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
14 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 39  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
39 -> 46  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
46 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
48 -> 65  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
65 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
76 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
101 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
305 -> 327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
327 -> 332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
332 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
337 -> 342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
342 -> 347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
347 -> 352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
352 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
362 -> 367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
367 -> 372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
372 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
416 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
432 -> 436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
475 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
489 -> 509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
543 -> 559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
573 -> 590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
590 -> 598  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
590 -> 1925  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1925 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
598 -> 1925  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
606 -> 614  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
606 -> 1941  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1941 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
614 -> 1941  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
622 -> 627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
674 -> 690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
690 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
704 -> 720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
720 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
745 -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
761 -> 783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
783 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
786 -> 802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
811 -> 820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
860 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
892 -> 909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
909 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
917 -> 941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
941 -> 958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
970 -> 981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 1000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 1024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1024 -> 1033  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 1046  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1046 -> 1062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1062 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1073 -> 1082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1091 -> 1109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1109 -> 1135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1135 -> 1141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1141 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1173 -> 1182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1182 -> 1189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1189 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1201 -> 1212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1212 -> 1233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1233 -> 1242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1251 -> 1260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1260 -> 1267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1267 -> 1279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1279 -> 1290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1290 -> 1311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1311 -> 1320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
