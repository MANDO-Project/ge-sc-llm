digraph  {
13 [label="2_ function totalSupply() external view returns (uint256);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ function balanceOf(address who) external view returns (uint256);\n21-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
33 [label="4_ function allowance(address owner, address spender)\n    external view returns (uint256);\n33-function_definition-5-6", method="allowance(address owner,address spender)", type_label=function_definition];
49 [label="6_ function transfer(address to, uint256 value) external returns (bool);\n49-function_definition-7-7", method="transfer(address to,uint256 value)", type_label=function_definition];
64 [label="7_ function approve(address spender, uint256 value)\n    external returns (bool);\n64-function_definition-8-9", method="approve(address spender,uint256 value)", type_label=function_definition];
79 [label="9_ function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n79-function_definition-10-11", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
129 [label="23_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    require(c / a == b);\n    return c;\n  }\n129-function_definition-24-31", method="mul(uint256 a,uint256 b)", type_label=function_definition];
146 [label="24_ if_a == 0\n146-if-25-27", method="mul(uint256 a,uint256 b)", type_label=if];
1271 [label="24_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
151 [label="25_ return 0;\n151-return-26-26", method="mul(uint256 a,uint256 b)", type_label=return];
153 [label="27_ uint256 c = a * b;\n153-new_variable-28-28", method="mul(uint256 a,uint256 b)", type_label=new_variable];
161 [label="28_ require(c / a == b);\n161-expression_statement-29-29", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
170 [label="29_ return c;\n170-return-30-30", method="mul(uint256 a,uint256 b)", type_label=return];
172 [label="31_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0);  \n    uint256 c = a / b;\n    return c;\n  }\n172-function_definition-32-36", method="div(uint256 a,uint256 b)", type_label=function_definition];
189 [label="32_ require(b > 0);\n189-expression_statement-33-33", method="div(uint256 a,uint256 b)", type_label=expression_statement];
196 [label="33_ uint256 c = a / b;\n196-new_variable-34-34", method="div(uint256 a,uint256 b)", type_label=new_variable];
204 [label="34_ return c;\n204-return-35-35", method="div(uint256 a,uint256 b)", type_label=return];
206 [label="36_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n    return c;\n  }\n206-function_definition-37-41", method="sub(uint256 a,uint256 b)", type_label=function_definition];
223 [label="37_ require(b <= a);\n223-expression_statement-38-38", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
230 [label="38_ uint256 c = a - b;\n230-new_variable-39-39", method="sub(uint256 a,uint256 b)", type_label=new_variable];
238 [label="39_ return c;\n238-return-40-40", method="sub(uint256 a,uint256 b)", type_label=return];
240 [label="41_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n    return c;\n  }\n240-function_definition-42-46", method="add(uint256 a,uint256 b)", type_label=function_definition];
257 [label="42_ uint256 c = a + b;\n257-new_variable-43-43", method="add(uint256 a,uint256 b)", type_label=new_variable];
265 [label="43_ require(c >= a);\n265-expression_statement-44-44", method="add(uint256 a,uint256 b)", type_label=expression_statement];
272 [label="44_ return c;\n272-return-45-45", method="add(uint256 a,uint256 b)", type_label=return];
274 [label="46_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n274-function_definition-47-50", method="mod(uint256 a,uint256 b)", type_label=function_definition];
291 [label="47_ require(b != 0);\n291-expression_statement-48-48", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
298 [label="48_ return a % b;\n298-return-49-49", method="mod(uint256 a,uint256 b)", type_label=return];
305 [label="52_ address public owner;\n305-new_variable-53-53", method="", type_label=new_variable];
310 [label="53_ address public newOwner;\n310-new_variable-54-54", method="", type_label=new_variable];
315 [label="54_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n315-expression_statement-55-58", method="", type_label=expression_statement];
318 [label="55_ require(msg.sender == owner);\n318-expression_statement-56-56", method="", type_label=expression_statement];
327 [label="56_ _;\n327-expression_statement-57-57", method="", type_label=expression_statement];
329 [label="58_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n329-function_definition-59-61", method="transferOwnership(address _newOwner)", type_label=function_definition];
336 [label="58_ onlyOwner\n336-expression_statement-59-59", method="transferOwnership(address _newOwner)", type_label=expression_statement];
339 [label="59_ newOwner = _newOwner;\n339-expression_statement-60-60", method="transferOwnership(address _newOwner)", type_label=expression_statement];
343 [label="61_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        owner = newOwner;\n    }\n343-function_definition-62-65", method="acceptOwnership()", type_label=function_definition];
347 [label="62_ require(msg.sender == newOwner);\n347-expression_statement-63-63", method="acceptOwnership()", type_label=expression_statement];
356 [label="63_ owner = newOwner;\n356-expression_statement-64-64", method="acceptOwnership()", type_label=expression_statement];
376 [label="69_ owner = 0x23a79F63133D315e7C16E3AF68701a7cD92217F9;\n376-expression_statement-70-70", method="", type_label=expression_statement];
380 [label="70_ contractAddress = address(this);\n380-expression_statement-71-71", method="", type_label=expression_statement];
386 [label="71_ _balances[owner] = 4950000000 * 10 ** 18;\n386-expression_statement-72-72", method="", type_label=expression_statement];
396 [label="72_ _balances[contractAddress] = 50000000 * 10 ** 18;\n396-expression_statement-73-73", method="", type_label=expression_statement];
460 [label="79_ string public constant name = \"Ultra Rich Group\";\n460-new_variable-80-80", method="", type_label=new_variable];
467 [label="80_ string public constant symbol = \"RICH\";\n467-new_variable-81-81", method="", type_label=new_variable];
474 [label="81_ uint256 public constant decimals = 18;\n474-new_variable-82-82", method="", type_label=new_variable];
480 [label="82_ uint256 public supply = 5000000000 * 10 ** decimals;\n480-new_variable-83-83", method="", type_label=new_variable];
490 [label="83_ address private contractAddress;\n490-new_variable-84-84", method="", type_label=new_variable];
495 [label="84_ uint256 public ICOPrice;\n495-new_variable-85-85", method="", type_label=new_variable];
500 [label="85_ mapping(address => uint256) _balances;\n500-new_variable-86-86", method="", type_label=new_variable];
506 [label="86_ mapping(address => mapping (address => uint256)) public _allowed;\n506-new_variable-87-87", method="", type_label=new_variable];
515 [label="87_ function totalSupply() public view returns (uint) {\n        return supply;\n    }\n515-function_definition-88-90", method="totalSupply()", type_label=function_definition];
524 [label="88_ return supply;\n524-return-89-89", method="totalSupply()", type_label=return];
526 [label="90_ function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return _balances[tokenOwner];\n    }\n526-function_definition-91-93", method="balanceOf(address tokenOwner)", type_label=function_definition];
540 [label="91_ return _balances[tokenOwner];\n540-return-92-92", method="balanceOf(address tokenOwner)", type_label=return];
544 [label="93_ function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return _allowed[tokenOwner][spender];\n    }\n544-function_definition-94-96", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
562 [label="94_ return _allowed[tokenOwner][spender];\n562-return-95-95", method="allowance(address tokenOwner,address spender)", type_label=return];
568 [label="96_ function transfer(address to, uint value) public returns (bool success) {\n        require(_balances[msg.sender] >= value);\n        require(to != contractAddress);\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n568-function_definition-97-104", method="transfer(address to,uint value)", type_label=function_definition];
585 [label="97_ require(_balances[msg.sender] >= value);\n585-expression_statement-98-98", method="transfer(address to,uint value)", type_label=expression_statement];
596 [label="98_ require(to != contractAddress);\n596-expression_statement-99-99", method="transfer(address to,uint value)", type_label=expression_statement];
603 [label="99_ _balances[msg.sender] = _balances[msg.sender].sub(value);\n603-expression_statement-100-100", method="transfer(address to,uint value)", type_label=expression_statement];
620 [label="100_ _balances[to] = _balances[to].add(value);\n620-expression_statement-101-101", method="transfer(address to,uint value)", type_label=expression_statement];
643 [label="102_ return true;\n643-return-103-103", method="transfer(address to,uint value)", type_label=return];
646 [label="104_ function approve(address spender, uint value) public returns (bool success) {\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n646-function_definition-105-109", method="approve(address spender,uint value)", type_label=function_definition];
663 [label="105_ _allowed[msg.sender][spender] = value;\n663-expression_statement-106-106", method="approve(address spender,uint value)", type_label=expression_statement];
683 [label="107_ return true;\n683-return-108-108", method="approve(address spender,uint value)", type_label=return];
686 [label="109_ function transferFrom(address from, address to, uint value) public returns (bool success) {\n        require(value <= balanceOf(from));\n        require(value <= allowance(from, to));\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        _allowed[from][to] = _allowed[from][to].sub(value);\n        emit Transfer(from, to, value);\n        return true;\n    }\n686-function_definition-110-118", method="transferFrom(address from,address to,uint value)", type_label=function_definition];
707 [label="110_ require(value <= balanceOf(from));\n707-expression_statement-111-111", method="transferFrom(address from,address to,uint value)", type_label=expression_statement];
717 [label="111_ require(value <= allowance(from, to));\n717-expression_statement-112-112", method="transferFrom(address from,address to,uint value)", type_label=expression_statement];
729 [label="112_ _balances[from] = _balances[from].sub(value);\n729-expression_statement-113-113", method="transferFrom(address from,address to,uint value)", type_label=expression_statement];
742 [label="113_ _balances[to] = _balances[to].add(value);\n742-expression_statement-114-114", method="transferFrom(address from,address to,uint value)", type_label=expression_statement];
755 [label="114_ _allowed[from][to] = _allowed[from][to].sub(value);\n755-expression_statement-115-115", method="transferFrom(address from,address to,uint value)", type_label=expression_statement];
780 [label="116_ return true;\n780-return-117-117", method="transferFrom(address from,address to,uint value)", type_label=return];
789 [label="121_ function mint(uint256 amount, address to) public onlyOwner {\n        _balances[to] = _balances[to].add(amount);\n        supply = supply.add(amount);\n        emit Mint(amount, to);\n    }\n789-function_definition-122-126", method="mint(uint256 amount,address to)", type_label=function_definition];
800 [label="121_ onlyOwner\n800-expression_statement-122-122", method="mint(uint256 amount,address to)", type_label=expression_statement];
803 [label="122_ _balances[to] = _balances[to].add(amount);\n803-expression_statement-123-123", method="mint(uint256 amount,address to)", type_label=expression_statement];
816 [label="123_ supply = supply.add(amount);\n816-expression_statement-124-124", method="mint(uint256 amount,address to)", type_label=expression_statement];
831 [label="126_ function burn(uint256 amount, address from) public onlyOwner {\n        require(_balances[from] >= amount);\n        _balances[from] = _balances[from].sub(amount);\n        supply = supply.sub(amount);\n        emit Burn(amount, from);\n    }\n831-function_definition-127-132", method="burn(uint256 amount,address from)", type_label=function_definition];
842 [label="126_ onlyOwner\n842-expression_statement-127-127", method="burn(uint256 amount,address from)", type_label=expression_statement];
845 [label="127_ require(_balances[from] >= amount);\n845-expression_statement-128-128", method="burn(uint256 amount,address from)", type_label=expression_statement];
854 [label="128_ _balances[from] = _balances[from].sub(amount);\n854-expression_statement-129-129", method="burn(uint256 amount,address from)", type_label=expression_statement];
867 [label="129_ supply = supply.sub(amount);\n867-expression_statement-130-130", method="burn(uint256 amount,address from)", type_label=expression_statement];
882 [label="132_ function setICOPrice(uint256 _newPrice) public onlyOwner {\n        ICOPrice = _newPrice;\n    }\n882-function_definition-133-135", method="setICOPrice(uint256 _newPrice)", type_label=function_definition];
889 [label="132_ onlyOwner\n889-expression_statement-133-133", method="setICOPrice(uint256 _newPrice)", type_label=expression_statement];
892 [label="133_ ICOPrice = _newPrice;\n892-expression_statement-134-134", method="setICOPrice(uint256 _newPrice)", type_label=expression_statement];
896 [label="135_ function getRemainingICOBalance() public view returns (uint256) {\n        return _balances[contractAddress];\n    }\n896-function_definition-136-138", method="getRemainingICOBalance()", type_label=function_definition];
905 [label="136_ return _balances[contractAddress];\n905-return-137-137", method="getRemainingICOBalance()", type_label=return];
909 [label="138_ function topUpICO(uint256 _amount) public onlyOwner {\n        require(_balances[owner] >= _amount);\n        _balances[owner] = _balances[owner].sub(_amount);\n        _balances[contractAddress] = _balances[contractAddress].add(_amount);\n        emit Transfer(msg.sender, contractAddress, _amount);\n    }\n909-function_definition-139-144", method="topUpICO(uint256 _amount)", type_label=function_definition];
916 [label="138_ onlyOwner\n916-expression_statement-139-139", method="topUpICO(uint256 _amount)", type_label=expression_statement];
919 [label="139_ require(_balances[owner] >= _amount);\n919-expression_statement-140-140", method="topUpICO(uint256 _amount)", type_label=expression_statement];
928 [label="140_ _balances[owner] = _balances[owner].sub(_amount);\n928-expression_statement-141-141", method="topUpICO(uint256 _amount)", type_label=expression_statement];
941 [label="141_ _balances[contractAddress] = _balances[contractAddress].add(_amount);\n941-expression_statement-142-142", method="topUpICO(uint256 _amount)", type_label=expression_statement];
964 [label="144_ function buyTokens() public payable {\n        require(ICOPrice > 0);\n        require(msg.value >= ICOPrice);\n        uint256 affordAmount = msg.value / ICOPrice;\n        require(_balances[contractAddress] >= affordAmount * 10 ** decimals);\n        _balances[contractAddress] = _balances[contractAddress].sub(affordAmount * 10 ** decimals);\n        _balances[msg.sender] = _balances[msg.sender].add(affordAmount * 10 ** decimals);\n        emit Transfer(contractAddress, msg.sender, affordAmount * 10 ** decimals);\n    }\n964-function_definition-145-153", method="buyTokens()", type_label=function_definition];
969 [label="145_ require(ICOPrice > 0);\n969-expression_statement-146-146", method="buyTokens()", type_label=expression_statement];
976 [label="146_ require(msg.value >= ICOPrice);\n976-expression_statement-147-147", method="buyTokens()", type_label=expression_statement];
985 [label="147_ uint256 affordAmount = msg.value / ICOPrice;\n985-new_variable-148-148", method="buyTokens()", type_label=new_variable];
995 [label="148_ require(_balances[contractAddress] >= affordAmount * 10 ** decimals);\n995-expression_statement-149-149", method="buyTokens()", type_label=expression_statement];
1008 [label="149_ _balances[contractAddress] = _balances[contractAddress].sub(affordAmount * 10 ** decimals);\n1008-expression_statement-150-150", method="buyTokens()", type_label=expression_statement];
1025 [label="150_ _balances[msg.sender] = _balances[msg.sender].add(affordAmount * 10 ** decimals);\n1025-expression_statement-151-151", method="buyTokens()", type_label=expression_statement];
1060 [label="153_ function withdrawContractBalance() public onlyOwner {\n        msg.sender.transfer(contractAddress.balance);\n    }\n1060-function_definition-154-156", method="withdrawContractBalance()", type_label=function_definition];
1063 [label="153_ onlyOwner\n1063-expression_statement-154-154", method="withdrawContractBalance()", type_label=expression_statement];
1066 [label="154_ msg.sender.transfer(contractAddress.balance);\n1066-expression_statement-155-155", method="withdrawContractBalance()", type_label=expression_statement];
1077 [label="156_ function withdrawContractTokens(uint256 _amount) public onlyOwner {\n        require(_balances[contractAddress] >= _amount);\n        _balances[contractAddress] = _balances[contractAddress].sub(_amount);\n        _balances[owner] = _balances[owner].add(_amount);\n        emit Transfer(contractAddress, owner, _amount);\n    }\n1077-function_definition-157-162", method="withdrawContractTokens(uint256 _amount)", type_label=function_definition];
1084 [label="156_ onlyOwner\n1084-expression_statement-157-157", method="withdrawContractTokens(uint256 _amount)", type_label=expression_statement];
1087 [label="157_ require(_balances[contractAddress] >= _amount);\n1087-expression_statement-158-158", method="withdrawContractTokens(uint256 _amount)", type_label=expression_statement];
1096 [label="158_ _balances[contractAddress] = _balances[contractAddress].sub(_amount);\n1096-expression_statement-159-159", method="withdrawContractTokens(uint256 _amount)", type_label=expression_statement];
1109 [label="159_ _balances[owner] = _balances[owner].add(_amount);\n1109-expression_statement-160-160", method="withdrawContractTokens(uint256 _amount)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
129 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
146 -> 1271  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1271 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 1271  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
153 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
172 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
196 -> 204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
204 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
206 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
238 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
240 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
257 -> 265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
265 -> 272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
272 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
274 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
291 -> 298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
305 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
347 -> 356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
376 -> 380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
380 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
460 -> 467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
474 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
500 -> 506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
526 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
544 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
562 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
568 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
603 -> 620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
646 -> 663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
683 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
686 -> 707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
717 -> 729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
789 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
831 -> 845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
882 -> 892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
896 -> 905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
905 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
909 -> 919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
928 -> 941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
964 -> 969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
969 -> 976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
976 -> 985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
995 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1008 -> 1025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1060 -> 1066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1077 -> 1087  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1087 -> 1096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1096 -> 1109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
