digraph  {
12 [label="1_ function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\n12-function_definition-2-2", method="receiveApproval(address _from,uint256 _value,address _token,bytes _extraData)", type_label=function_definition];
34 [label="3_ string public name;\n34-new_variable-4-4", method="", type_label=new_variable];
39 [label="4_ string public symbol;\n39-new_variable-5-5", method="", type_label=new_variable];
44 [label="5_ uint8 public decimals = 8;\n44-new_variable-6-6", method="", type_label=new_variable];
50 [label="6_ uint256 public totalSupply;\n50-new_variable-7-7", method="", type_label=new_variable];
55 [label="7_ mapping (address => uint256) public balanceOf;\n55-new_variable-8-8", method="", type_label=new_variable];
62 [label="8_ mapping (address => mapping (address => uint256)) public allowance;\n62-new_variable-9-9", method="", type_label=new_variable];
123 [label="17_ totalSupply = initialSupply * 10 ** uint256(decimals);\n123-expression_statement-18-18", method="", type_label=expression_statement];
133 [label="18_ balanceOf[msg.sender] = totalSupply;\n133-expression_statement-19-19", method="", type_label=expression_statement];
141 [label="19_ name = tokenName;\n141-expression_statement-20-20", method="", type_label=expression_statement];
145 [label="20_ symbol = tokenSymbol;\n145-expression_statement-21-21", method="", type_label=expression_statement];
149 [label="22_ function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n149-function_definition-23-32", method="_transfer(address _from,address _to,uint _value)", type_label=function_definition];
165 [label="23_ require(_to != 0x0);\n165-expression_statement-24-24", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
172 [label="24_ require(balanceOf[_from] >= _value);\n172-expression_statement-25-25", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
181 [label="25_ require(balanceOf[_to] + _value >= balanceOf[_to]);\n181-expression_statement-26-26", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
194 [label="26_ uint previousBalances = balanceOf[_from] + balanceOf[_to];\n194-new_variable-27-27", method="_transfer(address _from,address _to,uint _value)", type_label=new_variable];
206 [label="27_ balanceOf[_from] -= _value;\n206-expression_statement-28-28", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
212 [label="28_ balanceOf[_to] += _value;\n212-expression_statement-29-29", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
226 [label="30_ assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n226-expression_statement-31-31", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
239 [label="32_ function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n239-function_definition-33-36", method="transfer(address _to,uint256 _value)", type_label=function_definition];
256 [label="33_ _transfer(msg.sender, _to, _value);\n256-expression_statement-34-34", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
267 [label="34_ return true;\n267-return-35-35", method="transfer(address _to,uint256 _value)", type_label=return];
270 [label="36_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);      \n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n270-function_definition-37-42", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
291 [label="37_ require(_value <= allowance[_from][msg.sender]);\n291-expression_statement-38-38", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
304 [label="38_ allowance[_from][msg.sender] -= _value;\n304-expression_statement-39-39", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
314 [label="39_ _transfer(_from, _to, _value);\n314-expression_statement-40-40", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
323 [label="40_ return true;\n323-return-41-41", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
326 [label="42_ function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n326-function_definition-43-48", method="approve(address _spender,uint256 _value)", type_label=function_definition];
343 [label="44_ allowance[msg.sender][_spender] = _value;\n343-expression_statement-45-45", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
363 [label="46_ return true;\n363-return-47-47", method="approve(address _spender,uint256 _value)", type_label=return];
366 [label="48_ function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n366-function_definition-49-57", method="approveAndCall(address _spender,uint256 _value,bytes _extraData)", type_label=function_definition];
387 [label="51_ tokenRecipient spender = tokenRecipient(_spender);\n387-new_variable-52-52", method="approveAndCall(address _spender,uint256 _value,bytes _extraData)", type_label=new_variable];
397 [label="52_ if\n397-if-53-56", method="approveAndCall(address _spender,uint256 _value,bytes _extraData)", type_label=if];
930 [label="52_ end_if", method="approveAndCall(address _spender,uint256 _value,bytes _extraData)", type_label=end_if];
405 [label="53_ spender.receiveApproval(msg.sender, _value, this, _extraData);\n405-expression_statement-54-54", method="approveAndCall(address _spender,uint256 _value,bytes _extraData)", type_label=expression_statement];
420 [label="54_ return true;\n420-return-55-55", method="approveAndCall(address _spender,uint256 _value,bytes _extraData)", type_label=return];
423 [label="57_ function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);    \n        balanceOf[msg.sender] -= _value;             \n        totalSupply -= _value;                       \n        emit Burn(msg.sender, _value);\n        return true;\n    }\n423-function_definition-58-64", method="burn(uint256 _value)", type_label=function_definition];
436 [label="58_ require(balanceOf[msg.sender] >= _value);\n436-expression_statement-59-59", method="burn(uint256 _value)", type_label=expression_statement];
447 [label="59_ balanceOf[msg.sender] -= _value;\n447-expression_statement-60-60", method="burn(uint256 _value)", type_label=expression_statement];
455 [label="60_ totalSupply -= _value;\n455-expression_statement-61-61", method="burn(uint256 _value)", type_label=expression_statement];
467 [label="62_ return true;\n467-return-63-63", method="burn(uint256 _value)", type_label=return];
470 [label="64_ function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                 \n        require(_value <= allowance[_from][msg.sender]);     \n        balanceOf[_from] -= _value;                          \n        allowance[_from][msg.sender] -= _value;              \n        totalSupply -= _value;                               \n        emit Burn(_from, _value);\n        return true;\n    }\n470-function_definition-65-73", method="burnFrom(address _from,uint256 _value)", type_label=function_definition];
487 [label="65_ require(balanceOf[_from] >= _value);\n487-expression_statement-66-66", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
496 [label="66_ require(_value <= allowance[_from][msg.sender]);\n496-expression_statement-67-67", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
509 [label="67_ balanceOf[_from] -= _value;\n509-expression_statement-68-68", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
515 [label="68_ allowance[_from][msg.sender] -= _value;\n515-expression_statement-69-69", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
525 [label="69_ totalSupply -= _value;\n525-expression_statement-70-70", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
535 [label="71_ return true;\n535-return-72-72", method="burnFrom(address _from,uint256 _value)", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
34 -> 39  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
39 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 50  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
50 -> 55  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
55 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
123 -> 133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
133 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
172 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
194 -> 206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
239 -> 256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
256 -> 267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
267 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
270 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
291 -> 304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
323 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
326 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
366 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 405  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
397 -> 930  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
930 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
405 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 930  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
420 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
423 -> 436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
470 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
496 -> 509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
535 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
