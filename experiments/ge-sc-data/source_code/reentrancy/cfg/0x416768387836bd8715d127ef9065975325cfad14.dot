digraph  {
13 [label="2_ uint256 public EGGS_TO_HATCH_1DRAGON = 43200;\n13-new_variable-3-3", method="", type_label=new_variable];
19 [label="3_ uint256 PSN = 10000;\n19-new_variable-4-4", method="", type_label=new_variable];
24 [label="4_ uint256 PSNH = 5000;\n24-new_variable-5-5", method="", type_label=new_variable];
29 [label="5_ bool public initialized = false;\n29-new_variable-6-6", method="", type_label=new_variable];
36 [label="6_ address public ceoAddress;\n36-new_variable-7-7", method="", type_label=new_variable];
41 [label="7_ mapping (address => uint256) public hatchery;\n41-new_variable-8-8", method="", type_label=new_variable];
48 [label="8_ mapping (address => uint256) public claimedEggs;\n48-new_variable-9-9", method="", type_label=new_variable];
55 [label="9_ mapping (address => uint256) public lastHatch;\n55-new_variable-10-10", method="", type_label=new_variable];
62 [label="10_ mapping (address => address) public referrals;\n62-new_variable-11-11", method="", type_label=new_variable];
69 [label="11_ uint256 public marketEggs;\n69-new_variable-12-12", method="", type_label=new_variable];
110 [label="16_ ceoAddress=msg.sender;\n110-expression_statement-17-17", method="", type_label=expression_statement];
116 [label="18_ function hatchEggs(address ref) public {\n        require(initialized);\n        if(referrals[msg.sender] == 0 && referrals[msg.sender] != msg.sender){\n            referrals[msg.sender] = ref;\n        }\n        uint256 eggsUsed = getMyEggs();\n        uint256 newDragons = SafeMath.div(eggsUsed, EGGS_TO_HATCH_1DRAGON);\n        hatchery[msg.sender] = SafeMath.add(hatchery[msg.sender], newDragons);\n        claimedEggs[msg.sender] = 0;\n        lastHatch[msg.sender] = now;\n        claimedEggs[referrals[msg.sender]] = SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));\n        emit Hatch(msg.sender, eggsUsed, newDragons);\n    }\n116-function_definition-19-32", method="hatchEggs(address ref)", type_label=function_definition];
124 [label="19_ require(initialized);\n124-expression_statement-20-20", method="hatchEggs(address ref)", type_label=expression_statement];
129 [label="20_ if_referrals[msg.sender] == 0 && referrals[msg.sender] != msg.sender\n129-if-21-23", method="hatchEggs(address ref)", type_label=if];
1072 [label="20_ end_if", method="hatchEggs(address ref)", type_label=end_if];
148 [label="21_ referrals[msg.sender] = ref;\n148-expression_statement-22-22", method="hatchEggs(address ref)", type_label=expression_statement];
156 [label="23_ uint256 eggsUsed = getMyEggs();\n156-new_variable-24-24", method="hatchEggs(address ref)", type_label=new_variable];
163 [label="24_ uint256 newDragons = SafeMath.div(eggsUsed, EGGS_TO_HATCH_1DRAGON);\n163-new_variable-25-25", method="hatchEggs(address ref)", type_label=new_variable];
176 [label="25_ hatchery[msg.sender] = SafeMath.add(hatchery[msg.sender], newDragons);\n176-expression_statement-26-26", method="hatchEggs(address ref)", type_label=expression_statement];
195 [label="26_ claimedEggs[msg.sender] = 0;\n195-expression_statement-27-27", method="hatchEggs(address ref)", type_label=expression_statement];
203 [label="27_ lastHatch[msg.sender] = now;\n203-expression_statement-28-28", method="hatchEggs(address ref)", type_label=expression_statement];
211 [label="28_ claimedEggs[referrals[msg.sender]] = SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\n211-expression_statement-29-29", method="hatchEggs(address ref)", type_label=expression_statement];
241 [label="29_ marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));\n241-expression_statement-30-30", method="hatchEggs(address ref)", type_label=expression_statement];
269 [label="32_ function sellEggs() public {\n        require(initialized);\n        uint256 hasEggs = getMyEggs();\n        uint256 eggValue = calculateEggSell(hasEggs);\n        uint256 fee = calculateDevFee(eggValue);\n        claimedEggs[msg.sender] = 0;\n        lastHatch[msg.sender] = now;\n        marketEggs = SafeMath.add(marketEggs,hasEggs);\n        ceoAddress.transfer(fee);\n        msg.sender.transfer(SafeMath.sub(eggValue,fee));\n        emit Sell(msg.sender, hasEggs);\n    }\n269-function_definition-33-44", method="sellEggs()", type_label=function_definition];
273 [label="33_ require(initialized);\n273-expression_statement-34-34", method="sellEggs()", type_label=expression_statement];
278 [label="34_ uint256 hasEggs = getMyEggs();\n278-new_variable-35-35", method="sellEggs()", type_label=new_variable];
285 [label="35_ uint256 eggValue = calculateEggSell(hasEggs);\n285-new_variable-36-36", method="sellEggs()", type_label=new_variable];
294 [label="36_ uint256 fee = calculateDevFee(eggValue);\n294-new_variable-37-37", method="sellEggs()", type_label=new_variable];
303 [label="37_ claimedEggs[msg.sender] = 0;\n303-expression_statement-38-38", method="sellEggs()", type_label=expression_statement];
311 [label="38_ lastHatch[msg.sender] = now;\n311-expression_statement-39-39", method="sellEggs()", type_label=expression_statement];
319 [label="39_ marketEggs = SafeMath.add(marketEggs,hasEggs);\n319-expression_statement-40-40", method="sellEggs()", type_label=expression_statement];
330 [label="40_ ceoAddress.transfer(fee);\n330-expression_statement-41-41", method="sellEggs()", type_label=expression_statement];
337 [label="41_ msg.sender.transfer(SafeMath.sub(eggValue,fee));\n337-expression_statement-42-42", method="sellEggs()", type_label=expression_statement];
361 [label="44_ function buyEggs() public payable {\n        require(initialized);\n        uint256 eggsBought = calculateEggBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));\n        eggsBought = SafeMath.sub(eggsBought, calculateDevFee(eggsBought));\n        ceoAddress.transfer(calculateDevFee(msg.value));\n        claimedEggs[msg.sender] = SafeMath.add(claimedEggs[msg.sender], eggsBought);\n        emit Buy(msg.sender, eggsBought);\n    }\n361-function_definition-45-52", method="buyEggs()", type_label=function_definition];
366 [label="45_ require(initialized);\n366-expression_statement-46-46", method="buyEggs()", type_label=expression_statement];
371 [label="46_ uint256 eggsBought = calculateEggBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));\n371-new_variable-47-47", method="buyEggs()", type_label=new_variable];
397 [label="47_ eggsBought = SafeMath.sub(eggsBought, calculateDevFee(eggsBought));\n397-expression_statement-48-48", method="buyEggs()", type_label=expression_statement];
411 [label="48_ ceoAddress.transfer(calculateDevFee(msg.value));\n411-expression_statement-49-49", method="buyEggs()", type_label=expression_statement];
423 [label="49_ claimedEggs[msg.sender] = SafeMath.add(claimedEggs[msg.sender], eggsBought);\n423-expression_statement-50-50", method="buyEggs()", type_label=expression_statement];
450 [label="52_ function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n    }\n450-function_definition-53-55", method="calculateTrade(uint256 rt,uint256 rs,uint256 bs)", type_label=function_definition];
471 [label="53_ return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n471-return-54-54", method="calculateTrade(uint256 rt,uint256 rs,uint256 bs)", type_label=return];
522 [label="55_ function calculateEggSell(uint256 eggs) public view returns(uint256){\n        return calculateTrade(eggs,marketEggs, address(this).balance);\n    }\n522-function_definition-56-58", method="calculateEggSell(uint256 eggs)", type_label=function_definition];
535 [label="56_ return calculateTrade(eggs,marketEggs, address(this).balance);\n535-return-57-57", method="calculateEggSell(uint256 eggs)", type_label=return];
548 [label="58_ function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n        return calculateTrade(eth,contractBalance,marketEggs);\n    }\n548-function_definition-59-61", method="calculateEggBuy(uint256 eth,uint256 contractBalance)", type_label=function_definition];
565 [label="59_ return calculateTrade(eth,contractBalance,marketEggs);\n565-return-60-60", method="calculateEggBuy(uint256 eth,uint256 contractBalance)", type_label=return];
574 [label="61_ function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n        return calculateEggBuy(eth, address(this).balance);\n    }\n574-function_definition-62-64", method="calculateEggBuySimple(uint256 eth)", type_label=function_definition];
587 [label="62_ return calculateEggBuy(eth, address(this).balance);\n587-return-63-63", method="calculateEggBuySimple(uint256 eth)", type_label=return];
598 [label="64_ function calculateDevFee(uint256 amount) public view returns(uint256){\n        return SafeMath.div(SafeMath.mul(amount,4),100);\n    }\n598-function_definition-65-67", method="calculateDevFee(uint256 amount)", type_label=function_definition];
611 [label="65_ return SafeMath.div(SafeMath.mul(amount,4),100);\n611-return-66-66", method="calculateDevFee(uint256 amount)", type_label=return];
627 [label="67_ function seedMarket(uint256 eggs) public payable{\n        require(marketEggs == 0);\n        initialized = true;\n        marketEggs = eggs;\n    }\n627-function_definition-68-72", method="seedMarket(uint256 eggs)", type_label=function_definition];
636 [label="68_ require(marketEggs == 0);\n636-expression_statement-69-69", method="seedMarket(uint256 eggs)", type_label=expression_statement];
643 [label="69_ initialized = true;\n643-expression_statement-70-70", method="seedMarket(uint256 eggs)", type_label=expression_statement];
648 [label="70_ marketEggs = eggs;\n648-expression_statement-71-71", method="seedMarket(uint256 eggs)", type_label=expression_statement];
652 [label="72_ function claimFreeDragon() public{\n        require(initialized);\n        require(hatchery[msg.sender] == 0);\n        lastHatch[msg.sender] = now;\n        hatchery[msg.sender] = 300;\n    }\n652-function_definition-73-78", method="claimFreeDragon()", type_label=function_definition];
656 [label="73_ require(initialized);\n656-expression_statement-74-74", method="claimFreeDragon()", type_label=expression_statement];
661 [label="74_ require(hatchery[msg.sender] == 0);\n661-expression_statement-75-75", method="claimFreeDragon()", type_label=expression_statement];
672 [label="75_ lastHatch[msg.sender] = now;\n672-expression_statement-76-76", method="claimFreeDragon()", type_label=expression_statement];
680 [label="76_ hatchery[msg.sender] = 300;\n680-expression_statement-77-77", method="claimFreeDragon()", type_label=expression_statement];
688 [label="78_ function getBalance() public view returns(uint256){\n        return address(this).balance;\n    }\n688-function_definition-79-81", method="getBalance()", type_label=function_definition];
697 [label="79_ return address(this).balance;\n697-return-80-80", method="getBalance()", type_label=return];
703 [label="81_ function getMyDragons() public view returns(uint256){\n        return hatchery[msg.sender];\n    }\n703-function_definition-82-84", method="getMyDragons()", type_label=function_definition];
712 [label="82_ return hatchery[msg.sender];\n712-return-83-83", method="getMyDragons()", type_label=return];
718 [label="84_ function getMyEggs() public view returns(uint256){\n        return SafeMath.add(claimedEggs[msg.sender], getEggsSinceLastHatch(msg.sender));\n    }\n718-function_definition-85-87", method="getMyEggs()", type_label=function_definition];
727 [label="85_ return SafeMath.add(claimedEggs[msg.sender], getEggsSinceLastHatch(msg.sender));\n727-return-86-86", method="getMyEggs()", type_label=return];
745 [label="87_ function getEggsSinceLastHatch(address _address) public view returns(uint256){\n        uint256 secondsPassed = min(EGGS_TO_HATCH_1DRAGON, SafeMath.sub(now, lastHatch[_address]));\n        return SafeMath.mul(secondsPassed, hatchery[_address]);\n    }\n745-function_definition-88-91", method="getEggsSinceLastHatch(address _address)", type_label=function_definition];
758 [label="88_ uint256 secondsPassed = min(EGGS_TO_HATCH_1DRAGON, SafeMath.sub(now, lastHatch[_address]));\n758-new_variable-89-89", method="getEggsSinceLastHatch(address _address)", type_label=new_variable];
778 [label="89_ return SafeMath.mul(secondsPassed, hatchery[_address]);\n778-return-90-90", method="getEggsSinceLastHatch(address _address)", type_label=return];
789 [label="91_ function min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n789-function_definition-92-94", method="min(uint256 a,uint256 b)", type_label=function_definition];
806 [label="92_ return a < b ? a : b;\n806-return-93-93", method="min(uint256 a,uint256 b)", type_label=return];
816 [label="96_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n816-function_definition-97-104", method="mul(uint256 a,uint256 b)", type_label=function_definition];
833 [label="97_ if_a == 0\n833-if-98-100", method="mul(uint256 a,uint256 b)", type_label=if];
1776 [label="97_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
838 [label="98_ return 0;\n838-return-99-99", method="mul(uint256 a,uint256 b)", type_label=return];
840 [label="100_ uint256 c = a * b;\n840-new_variable-101-101", method="mul(uint256 a,uint256 b)", type_label=new_variable];
848 [label="101_ assert(c / a == b);\n848-expression_statement-102-102", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
857 [label="102_ return c;\n857-return-103-103", method="mul(uint256 a,uint256 b)", type_label=return];
859 [label="104_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n859-function_definition-105-108", method="div(uint256 a,uint256 b)", type_label=function_definition];
876 [label="105_ uint256 c = a / b;\n876-new_variable-106-106", method="div(uint256 a,uint256 b)", type_label=new_variable];
884 [label="106_ return c;\n884-return-107-107", method="div(uint256 a,uint256 b)", type_label=return];
886 [label="108_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n886-function_definition-109-112", method="sub(uint256 a,uint256 b)", type_label=function_definition];
903 [label="109_ assert(b <= a);\n903-expression_statement-110-110", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
910 [label="110_ return a - b;\n910-return-111-111", method="sub(uint256 a,uint256 b)", type_label=return];
914 [label="112_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n914-function_definition-113-117", method="add(uint256 a,uint256 b)", type_label=function_definition];
931 [label="113_ uint256 c = a + b;\n931-new_variable-114-114", method="add(uint256 a,uint256 b)", type_label=new_variable];
939 [label="114_ assert(c >= a);\n939-expression_statement-115-115", method="add(uint256 a,uint256 b)", type_label=expression_statement];
946 [label="115_ return c;\n946-return-116-116", method="add(uint256 a,uint256 b)", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 19  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
19 -> 24  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
24 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
36 -> 41  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
41 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 55  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
55 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
116 -> 124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
124 -> 129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 148  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
129 -> 1072  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1072 -> 156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
148 -> 1072  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
156 -> 163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
163 -> 176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
176 -> 195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
195 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
203 -> 211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
211 -> 241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
273 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
285 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
311 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
319 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
522 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
535 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
548 -> 565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
565 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
574 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
587 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
598 -> 611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
627 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
636 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
656 -> 661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
661 -> 672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
672 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
697 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
703 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
718 -> 727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
745 -> 758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
778 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
789 -> 806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
806 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
816 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 838  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
833 -> 1776  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1776 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 1776  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
838 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
840 -> 848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
848 -> 857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
857 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
859 -> 876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
876 -> 884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
884 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
886 -> 903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
903 -> 910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
914 -> 931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
931 -> 939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
939 -> 946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
946 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
