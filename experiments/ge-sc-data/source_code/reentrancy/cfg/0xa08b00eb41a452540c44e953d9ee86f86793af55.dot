digraph  {
12 [label="2_ address public owner;\n12-new_variable-3-3", method="", type_label=new_variable];
27 [label="4_ function Ownable() public {\n    owner = msg.sender;\n  }\n27-function_definition-5-7", method="Ownable()", type_label=function_definition];
31 [label="5_ owner = msg.sender;\n31-expression_statement-6-6", method="Ownable()", type_label=expression_statement];
37 [label="7_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n37-expression_statement-8-11", method="", type_label=expression_statement];
40 [label="8_ require(msg.sender == owner);\n40-expression_statement-9-9", method="", type_label=expression_statement];
49 [label="9_ _;\n49-expression_statement-10-10", method="", type_label=expression_statement];
51 [label="11_ function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n51-function_definition-12-16", method="transferOwnership(address newOwner)", type_label=function_definition];
58 [label="11_ onlyOwner\n58-expression_statement-12-12", method="transferOwnership(address newOwner)", type_label=expression_statement];
61 [label="12_ require(newOwner != address(0));\n61-expression_statement-13-13", method="transferOwnership(address newOwner)", type_label=expression_statement];
76 [label="14_ owner = newOwner;\n76-expression_statement-15-15", method="transferOwnership(address newOwner)", type_label=expression_statement];
83 [label="18_ function accountIdForAddress(address _address) public view returns (uint256);\n83-function_definition-19-19", method="accountIdForAddress(address _address)", type_label=function_definition];
95 [label="19_ function addressBelongsToAccount(address _address) public view returns (bool);\n95-function_definition-20-20", method="addressBelongsToAccount(address _address)", type_label=function_definition];
107 [label="20_ function createNewAccount(address _newUser) external;\n107-function_definition-21-21", method="createNewAccount(address _newUser)", type_label=function_definition];
114 [label="21_ function addAddressToAccount(\n    address _newAddress,\n    address _sender\n    ) external;\n114-function_definition-22-25", method="addAddressToAccount(address _newAddress,address _sender)", type_label=function_definition];
125 [label="25_ function removeAddressFromAccount(address _addressToRemove) external;\n125-function_definition-26-26", method="removeAddressFromAccount(address _addressToRemove)", type_label=function_definition];
141 [label="28_ address public accountRegistryLogic;\n141-new_variable-29-29", method="", type_label=new_variable];
152 [label="32_ accountRegistryLogic = _accountRegistryLogic;\n152-expression_statement-33-33", method="", type_label=expression_statement];
166 [label="35_ modifier nonZero(address _address) {\n    require(_address != 0);\n    _;\n  }\n166-expression_statement-36-39", method="", type_label=expression_statement];
173 [label="36_ require(_address != 0);\n173-expression_statement-37-37", method="", type_label=expression_statement];
180 [label="37_ _;\n180-expression_statement-38-38", method="", type_label=expression_statement];
182 [label="39_ modifier onlyAccountRegistryLogic() {\n    require(msg.sender == accountRegistryLogic);\n    _;\n  }\n182-expression_statement-40-43", method="", type_label=expression_statement];
185 [label="40_ require(msg.sender == accountRegistryLogic);\n185-expression_statement-41-41", method="", type_label=expression_statement];
194 [label="41_ _;\n194-expression_statement-42-42", method="", type_label=expression_statement];
196 [label="43_ uint256 numAccounts;\n196-new_variable-44-44", method="", type_label=new_variable];
200 [label="44_ mapping(address => uint256) public accountByAddress;\n200-new_variable-45-45", method="", type_label=new_variable];
207 [label="45_ function setRegistryLogic(address _newRegistryLogic) public onlyOwner nonZero(_newRegistryLogic) {\n    address _oldRegistryLogic = accountRegistryLogic;\n    accountRegistryLogic = _newRegistryLogic;\n    emit AccountRegistryLogicChanged(_oldRegistryLogic, accountRegistryLogic);\n  }\n207-function_definition-46-50", method="setRegistryLogic(address _newRegistryLogic)", type_label=function_definition];
214 [label="45_ onlyOwner\n214-expression_statement-46-46", method="setRegistryLogic(address _newRegistryLogic)", type_label=expression_statement];
216 [label="45_ nonZero(_newRegistryLogic)\n216-expression_statement-46-46", method="setRegistryLogic(address _newRegistryLogic)", type_label=expression_statement];
221 [label="46_ address _oldRegistryLogic = accountRegistryLogic;\n221-new_variable-47-47", method="setRegistryLogic(address _newRegistryLogic)", type_label=new_variable];
227 [label="47_ accountRegistryLogic = _newRegistryLogic;\n227-expression_statement-48-48", method="setRegistryLogic(address _newRegistryLogic)", type_label=expression_statement];
237 [label="50_ function accountIdForAddress(address _address) public view returns (uint256) {\n    require(addressBelongsToAccount(_address));\n    return accountByAddress[_address];\n  }\n237-function_definition-51-54", method="accountIdForAddress(address _address)", type_label=function_definition];
250 [label="51_ require(addressBelongsToAccount(_address));\n250-expression_statement-52-52", method="accountIdForAddress(address _address)", type_label=expression_statement];
258 [label="52_ return accountByAddress[_address];\n258-return-53-53", method="accountIdForAddress(address _address)", type_label=return];
262 [label="54_ function addressBelongsToAccount(address _address) public view returns (bool) {\n    return accountByAddress[_address] > 0;\n  }\n262-function_definition-55-57", method="addressBelongsToAccount(address _address)", type_label=function_definition];
275 [label="55_ return accountByAddress[_address] > 0;\n275-return-56-56", method="addressBelongsToAccount(address _address)", type_label=return];
281 [label="57_ function createNewAccount(address _newUser) external onlyAccountRegistryLogic nonZero(_newUser) {\n    require(!addressBelongsToAccount(_newUser));\n    numAccounts++;\n    accountByAddress[_newUser] = numAccounts;\n  }\n281-function_definition-58-62", method="createNewAccount(address _newUser)", type_label=function_definition];
288 [label="57_ onlyAccountRegistryLogic\n288-expression_statement-58-58", method="createNewAccount(address _newUser)", type_label=expression_statement];
290 [label="57_ nonZero(_newUser)\n290-expression_statement-58-58", method="createNewAccount(address _newUser)", type_label=expression_statement];
295 [label="58_ require(!addressBelongsToAccount(_newUser));\n295-expression_statement-59-59", method="createNewAccount(address _newUser)", type_label=expression_statement];
304 [label="59_ numAccounts++;\n304-expression_statement-60-60", method="createNewAccount(address _newUser)", type_label=expression_statement];
305 [label="59_ numAccounts++\n305-expression_statement-60-60", method="createNewAccount(address _newUser)", type_label=expression_statement];
307 [label="60_ accountByAddress[_newUser] = numAccounts;\n307-expression_statement-61-61", method="createNewAccount(address _newUser)", type_label=expression_statement];
313 [label="62_ function addAddressToAccount(\n    address _newAddress,\n    address _sender\n    ) external onlyAccountRegistryLogic nonZero(_newAddress) {\n    require(!addressBelongsToAccount(_newAddress));\n    accountByAddress[_newAddress] = accountIdForAddress(_sender);\n  }\n313-function_definition-63-69", method="addAddressToAccount(address _newAddress,address _sender)", type_label=function_definition];
324 [label="65_ onlyAccountRegistryLogic\n324-expression_statement-66-66", method="addAddressToAccount(address _newAddress,address _sender)", type_label=expression_statement];
326 [label="65_ nonZero(_newAddress)\n326-expression_statement-66-66", method="addAddressToAccount(address _newAddress,address _sender)", type_label=expression_statement];
331 [label="66_ require(!addressBelongsToAccount(_newAddress));\n331-expression_statement-67-67", method="addAddressToAccount(address _newAddress,address _sender)", type_label=expression_statement];
340 [label="67_ accountByAddress[_newAddress] = accountIdForAddress(_sender);\n340-expression_statement-68-68", method="addAddressToAccount(address _newAddress,address _sender)", type_label=expression_statement];
349 [label="69_ function removeAddressFromAccount(\n    address _addressToRemove\n    ) external onlyAccountRegistryLogic {\n    delete accountByAddress[_addressToRemove];\n  }\n349-function_definition-70-74", method="removeAddressFromAccount(address _addressToRemove)", type_label=function_definition];
356 [label="71_ onlyAccountRegistryLogic\n356-expression_statement-72-72", method="removeAddressFromAccount(address _addressToRemove)", type_label=expression_statement];
359 [label="72_ delete accountByAddress[_addressToRemove];\n359-expression_statement-73-73", method="removeAddressFromAccount(address _addressToRemove)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
27 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
40 -> 49  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 61  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
166 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
185 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
196 -> 200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
221 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
237 -> 250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
250 -> 258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
258 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
262 -> 275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
275 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
281 -> 295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
288 -> 290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
313 -> 331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
324 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
349 -> 359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
