digraph  {
13 [label="2_ function getReturn(address _fromToken, address _toToken, uint256 _amount) public view returns (uint256);\n13-function_definition-3-3", method="getReturn(address _fromToken,address _toToken,uint256 _amount)", type_label=function_definition];
36 [label="5_ function ethToTokens(uint _ethAmount) public view returns(uint);\n36-function_definition-6-6", method="ethToTokens(uint _ethAmount)", type_label=function_definition];
48 [label="6_ function tokenToEth(uint _amountOfTokens) public view returns(uint);\n48-function_definition-7-7", method="tokenToEth(uint _amountOfTokens)", type_label=function_definition];
60 [label="7_ function tokenToEthRate() public view returns(uint);\n60-function_definition-8-8", method="tokenToEthRate()", type_label=function_definition];
68 [label="8_ function ethToTokenRate() public view returns(uint);\n68-function_definition-9-9", method="ethToTokenRate()", type_label=function_definition];
79 [label="11_ address public owner;\n79-new_variable-12-12", method="", type_label=new_variable];
84 [label="12_ address public newOwner;\n84-new_variable-13-13", method="", type_label=new_variable];
101 [label="15_ owner = msg.sender;\n101-expression_statement-16-16", method="", type_label=expression_statement];
107 [label="17_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n107-expression_statement-18-21", method="", type_label=expression_statement];
110 [label="18_ require(msg.sender == owner);\n110-expression_statement-19-19", method="", type_label=expression_statement];
119 [label="19_ _;\n119-expression_statement-20-20", method="", type_label=expression_statement];
121 [label="21_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n121-function_definition-22-24", method="transferOwnership(address _newOwner)", type_label=function_definition];
128 [label="21_ onlyOwner\n128-expression_statement-22-22", method="transferOwnership(address _newOwner)", type_label=expression_statement];
131 [label="22_ newOwner = _newOwner;\n131-expression_statement-23-23", method="transferOwnership(address _newOwner)", type_label=expression_statement];
135 [label="24_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n135-function_definition-25-30", method="acceptOwnership()", type_label=function_definition];
139 [label="25_ require(msg.sender == newOwner);\n139-expression_statement-26-26", method="acceptOwnership()", type_label=expression_statement];
154 [label="27_ owner = newOwner;\n154-expression_statement-28-28", method="acceptOwnership()", type_label=expression_statement];
158 [label="28_ newOwner = address(0);\n158-expression_statement-29-29", method="acceptOwnership()", type_label=expression_statement];
178 [label="33_ IBancorConverter public bntConverter;\n178-new_variable-34-34", method="", type_label=new_variable];
184 [label="34_ IBancorConverter public tokenConverter;\n184-new_variable-35-35", method="", type_label=new_variable];
190 [label="35_ address public ethToken;\n190-new_variable-36-36", method="", type_label=new_variable];
195 [label="36_ address public bntToken;\n195-new_variable-37-37", method="", type_label=new_variable];
200 [label="37_ address public token;\n200-new_variable-38-38", method="", type_label=new_variable];
229 [label="41_ function initialize(address _bntConverter, address _tokenConverter, address _ethToken, address _bntToken, address _token) external onlyOwner {\n       bntConverter = IBancorConverter(_bntConverter);\n       tokenConverter = IBancorConverter(_tokenConverter);\n       ethToken = _ethToken;\n       bntToken = _bntToken;\n       token = _token;\n       emit Initialized(_bntConverter, _tokenConverter, _ethToken, _bntToken, _token);\n    }\n229-function_definition-42-49", method="initialize(address _bntConverter,address _tokenConverter,address _ethToken,address _bntToken,address _token)", type_label=function_definition];
252 [label="41_ onlyOwner\n252-expression_statement-42-42", method="initialize(address _bntConverter,address _tokenConverter,address _ethToken,address _bntToken,address _token)", type_label=expression_statement];
255 [label="42_ bntConverter = IBancorConverter(_bntConverter);\n255-expression_statement-43-43", method="initialize(address _bntConverter,address _tokenConverter,address _ethToken,address _bntToken,address _token)", type_label=expression_statement];
262 [label="43_ tokenConverter = IBancorConverter(_tokenConverter);\n262-expression_statement-44-44", method="initialize(address _bntConverter,address _tokenConverter,address _ethToken,address _bntToken,address _token)", type_label=expression_statement];
269 [label="44_ ethToken = _ethToken;\n269-expression_statement-45-45", method="initialize(address _bntConverter,address _tokenConverter,address _ethToken,address _bntToken,address _token)", type_label=expression_statement];
273 [label="45_ bntToken = _bntToken;\n273-expression_statement-46-46", method="initialize(address _bntConverter,address _tokenConverter,address _ethToken,address _bntToken,address _token)", type_label=expression_statement];
277 [label="46_ token = _token;\n277-expression_statement-47-47", method="initialize(address _bntConverter,address _tokenConverter,address _ethToken,address _bntToken,address _token)", type_label=expression_statement];
293 [label="49_ function ethToTokens(uint _ethAmount) public view returns(uint) {\n        uint bnt = bntConverter.getReturn(ethToken, bntToken, _ethAmount);\n        uint amountOfTokens = tokenConverter.getReturn(bntToken, token, bnt);\n        return amountOfTokens;\n    }\n293-function_definition-50-54", method="ethToTokens(uint _ethAmount)", type_label=function_definition];
306 [label="50_ uint bnt = bntConverter.getReturn(ethToken, bntToken, _ethAmount);\n306-new_variable-51-51", method="ethToTokens(uint _ethAmount)", type_label=new_variable];
321 [label="51_ uint amountOfTokens = tokenConverter.getReturn(bntToken, token, bnt);\n321-new_variable-52-52", method="ethToTokens(uint _ethAmount)", type_label=new_variable];
336 [label="52_ return amountOfTokens;\n336-return-53-53", method="ethToTokens(uint _ethAmount)", type_label=return];
338 [label="54_ function tokenToEth(uint _amountOfTokens) public view returns(uint) {\n        uint bnt = tokenConverter.getReturn(token, bntToken, _amountOfTokens);\n        uint eth = bntConverter.getReturn(bntToken, ethToken, bnt);\n        return eth;\n    }\n338-function_definition-55-59", method="tokenToEth(uint _amountOfTokens)", type_label=function_definition];
351 [label="55_ uint bnt = tokenConverter.getReturn(token, bntToken, _amountOfTokens);\n351-new_variable-56-56", method="tokenToEth(uint _amountOfTokens)", type_label=new_variable];
366 [label="56_ uint eth = bntConverter.getReturn(bntToken, ethToken, bnt);\n366-new_variable-57-57", method="tokenToEth(uint _amountOfTokens)", type_label=new_variable];
381 [label="57_ return eth;\n381-return-58-58", method="tokenToEth(uint _amountOfTokens)", type_label=return];
383 [label="59_ function tokenToEthRate() public view returns(uint) {\n        uint eth = tokenToEth(1 ether);\n        return eth;\n    }\n383-function_definition-60-63", method="tokenToEthRate()", type_label=function_definition];
392 [label="60_ uint eth = tokenToEth(1 ether);\n392-new_variable-61-61", method="tokenToEthRate()", type_label=new_variable];
402 [label="61_ return eth;\n402-return-62-62", method="tokenToEthRate()", type_label=return];
404 [label="63_ function ethToTokenRate() public view returns(uint) {\n        uint tkn = ethToTokens(1 ether);\n        return tkn;\n    }\n404-function_definition-64-67", method="ethToTokenRate()", type_label=function_definition];
413 [label="64_ uint tkn = ethToTokens(1 ether);\n413-new_variable-65-65", method="ethToTokenRate()", type_label=new_variable];
423 [label="65_ return tkn;\n423-return-66-66", method="ethToTokenRate()", type_label=return];
428 [label="69_ function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n428-function_definition-70-73", method="add(uint a,uint b)", type_label=function_definition];
446 [label="70_ c = a + b;\n446-expression_statement-71-71", method="add(uint a,uint b)", type_label=expression_statement];
452 [label="71_ require(c >= a);\n452-expression_statement-72-72", method="add(uint a,uint b)", type_label=expression_statement];
459 [label="73_ function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n459-function_definition-74-77", method="sub(uint a,uint b)", type_label=function_definition];
477 [label="74_ require(b <= a);\n477-expression_statement-75-75", method="sub(uint a,uint b)", type_label=expression_statement];
484 [label="75_ c = a - b;\n484-expression_statement-76-76", method="sub(uint a,uint b)", type_label=expression_statement];
490 [label="77_ function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n490-function_definition-78-81", method="mul(uint a,uint b)", type_label=function_definition];
508 [label="78_ c = a * b;\n508-expression_statement-79-79", method="mul(uint a,uint b)", type_label=expression_statement];
514 [label="79_ require(a == 0 || c / a == b);\n514-expression_statement-80-80", method="mul(uint a,uint b)", type_label=expression_statement];
527 [label="81_ function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n527-function_definition-82-85", method="div(uint a,uint b)", type_label=function_definition];
545 [label="82_ require(b > 0);\n545-expression_statement-83-83", method="div(uint a,uint b)", type_label=expression_statement];
552 [label="83_ c = a / b;\n552-expression_statement-84-84", method="div(uint a,uint b)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
79 -> 84  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
110 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
135 -> 139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
154 -> 158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
184 -> 190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
190 -> 195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
195 -> 200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
229 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
273 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
293 -> 306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
306 -> 321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
336 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
338 -> 351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
351 -> 366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
381 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
383 -> 392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
392 -> 402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
402 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
404 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
413 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
423 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
428 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
459 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
508 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
527 -> 545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
