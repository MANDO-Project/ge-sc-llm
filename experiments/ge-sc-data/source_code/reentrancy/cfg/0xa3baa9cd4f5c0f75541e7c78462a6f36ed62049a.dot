digraph  {
12 [label="2_ struct Role {\n        mapping (address => bool) bearer;\n    }\n12-expression_statement-3-5", method="Role()", type_label=expression_statement];
20 [label="5_ function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n        role.bearer[account] = true;\n    }\n20-function_definition-6-10", method="add(Role storage role,address account)", type_label=function_definition];
33 [label="6_ require(account != address(0));\n33-expression_statement-7-7", method="add(Role storage role,address account)", type_label=expression_statement];
42 [label="7_ require(!has(role, account));\n42-expression_statement-8-8", method="add(Role storage role,address account)", type_label=expression_statement];
53 [label="8_ role.bearer[account] = true;\n53-expression_statement-9-9", method="add(Role storage role,address account)", type_label=expression_statement];
62 [label="10_ function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n        role.bearer[account] = false;\n    }\n62-function_definition-11-15", method="remove(Role storage role,address account)", type_label=function_definition];
75 [label="11_ require(account != address(0));\n75-expression_statement-12-12", method="remove(Role storage role,address account)", type_label=expression_statement];
84 [label="12_ require(has(role, account));\n84-expression_statement-13-13", method="remove(Role storage role,address account)", type_label=expression_statement];
94 [label="13_ role.bearer[account] = false;\n94-expression_statement-14-14", method="remove(Role storage role,address account)", type_label=expression_statement];
103 [label="15_ function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n103-function_definition-16-19", method="has(Role storage role,address account)", type_label=function_definition];
121 [label="16_ require(account != address(0));\n121-expression_statement-17-17", method="has(Role storage role,address account)", type_label=expression_statement];
130 [label="17_ return role.bearer[account];\n130-return-18-18", method="has(Role storage role,address account)", type_label=return];
139 [label="21_ address private _owner;\n139-new_variable-22-22", method="", type_label=new_variable];
156 [label="24_ _owner = msg.sender;\n156-expression_statement-25-25", method="", type_label=expression_statement];
170 [label="27_ function owner() public view returns (address) {\n        return _owner;\n    }\n170-function_definition-28-30", method="owner()", type_label=function_definition];
179 [label="28_ return _owner;\n179-return-29-29", method="owner()", type_label=return];
181 [label="30_ modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n181-expression_statement-31-34", method="", type_label=expression_statement];
184 [label="31_ require(isOwner());\n184-expression_statement-32-32", method="", type_label=expression_statement];
190 [label="32_ _;\n190-expression_statement-33-33", method="", type_label=expression_statement];
192 [label="34_ function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n192-function_definition-35-37", method="isOwner()", type_label=function_definition];
201 [label="35_ return msg.sender == _owner;\n201-return-36-36", method="isOwner()", type_label=return];
207 [label="37_ function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n207-function_definition-38-41", method="renounceOwnership()", type_label=function_definition];
210 [label="37_ onlyOwner\n210-expression_statement-38-38", method="renounceOwnership()", type_label=expression_statement];
221 [label="39_ _owner = address(0);\n221-expression_statement-40-40", method="renounceOwnership()", type_label=expression_statement];
227 [label="41_ function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n227-function_definition-42-44", method="transferOwnership(address newOwner)", type_label=function_definition];
234 [label="41_ onlyOwner\n234-expression_statement-42-42", method="transferOwnership(address newOwner)", type_label=expression_statement];
237 [label="42_ _transferOwnership(newOwner);\n237-expression_statement-43-43", method="transferOwnership(address newOwner)", type_label=expression_statement];
242 [label="44_ function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n242-function_definition-45-49", method="_transferOwnership(address newOwner)", type_label=function_definition];
250 [label="45_ require(newOwner != address(0));\n250-expression_statement-46-46", method="_transferOwnership(address newOwner)", type_label=expression_statement];
265 [label="47_ _owner = newOwner;\n265-expression_statement-48-48", method="_transferOwnership(address newOwner)", type_label=expression_statement];
294 [label="54_ Roles.Role private operators;\n294-new_variable-55-55", method="", type_label=new_variable];
303 [label="56_ operators.add(msg.sender);\n303-expression_statement-57-57", method="", type_label=expression_statement];
312 [label="58_ modifier onlyOperator() {\n        require(isOperator(msg.sender));\n        _;\n    }\n312-expression_statement-59-62", method="", type_label=expression_statement];
315 [label="59_ require(isOperator(msg.sender));\n315-expression_statement-60-60", method="", type_label=expression_statement];
325 [label="60_ _;\n325-expression_statement-61-61", method="", type_label=expression_statement];
327 [label="62_ function isOperator(address account) public view returns (bool) {\n        return operators.has(account);\n    }\n327-function_definition-63-65", method="isOperator(address account)", type_label=function_definition];
340 [label="63_ return operators.has(account);\n340-return-64-64", method="isOperator(address account)", type_label=return];
347 [label="65_ function addOperator(address account) public onlyOwner() {\n        operators.add(account);\n        emit OperatorAdded(account);\n    }\n347-function_definition-66-69", method="addOperator(address account)", type_label=function_definition];
354 [label="65_ onlyOwner()\n354-expression_statement-66-66", method="addOperator(address account)", type_label=expression_statement];
357 [label="66_ operators.add(account);\n357-expression_statement-67-67", method="addOperator(address account)", type_label=expression_statement];
368 [label="69_ function removeOperator(address account) public onlyOwner() {\n        operators.remove(account);\n        emit OperatorRemoved(account);\n    }\n368-function_definition-70-73", method="removeOperator(address account)", type_label=function_definition];
375 [label="69_ onlyOwner()\n375-expression_statement-70-70", method="removeOperator(address account)", type_label=expression_statement];
378 [label="70_ operators.remove(account);\n378-expression_statement-71-71", method="removeOperator(address account)", type_label=expression_statement];
414 [label="78_ Roles.Role private referrers;\n414-new_variable-79-79", method="", type_label=new_variable];
421 [label="79_ uint32 internal index;\n421-new_variable-80-80", method="", type_label=new_variable];
426 [label="80_ uint16 public constant limit = 10;\n426-new_variable-81-81", method="", type_label=new_variable];
432 [label="81_ mapping(uint32 => address) internal indexToAddress;\n432-new_variable-82-82", method="", type_label=new_variable];
439 [label="82_ mapping(address => uint32) internal addressToIndex;\n439-new_variable-83-83", method="", type_label=new_variable];
446 [label="83_ modifier onlyReferrer() {\n        require(isReferrer(msg.sender));\n        _;\n    }\n446-expression_statement-84-87", method="", type_label=expression_statement];
449 [label="84_ require(isReferrer(msg.sender));\n449-expression_statement-85-85", method="", type_label=expression_statement];
459 [label="85_ _;\n459-expression_statement-86-86", method="", type_label=expression_statement];
461 [label="87_ function getNumberOfAddresses() public view onlyOperator() returns (uint32) {\n        return index;\n    }\n461-function_definition-88-90", method="getNumberOfAddresses()", type_label=function_definition];
465 [label="87_ onlyOperator()\n465-expression_statement-88-88", method="getNumberOfAddresses()", type_label=expression_statement];
472 [label="88_ return index;\n472-return-89-89", method="getNumberOfAddresses()", type_label=return];
474 [label="90_ function addressOfIndex(uint32 _index) onlyOperator() public view returns (address) {\n        return indexToAddress[_index];\n    }\n474-function_definition-91-93", method="addressOfIndex(uint32 _index)", type_label=function_definition];
480 [label="90_ onlyOperator()\n480-expression_statement-91-91", method="addressOfIndex(uint32 _index)", type_label=expression_statement];
489 [label="91_ return indexToAddress[_index];\n489-return-92-92", method="addressOfIndex(uint32 _index)", type_label=return];
493 [label="93_ function isReferrer(address _account) public view returns (bool) {\n        return referrers.has(_account);\n    }\n493-function_definition-94-96", method="isReferrer(address _account)", type_label=function_definition];
506 [label="94_ return referrers.has(_account);\n506-return-95-95", method="isReferrer(address _account)", type_label=return];
513 [label="96_ function addReferrer(address _account) public onlyOperator() {\n        referrers.add(_account);\n        indexToAddress[index] = _account;\n        addressToIndex[_account] = index;\n        index++;\n        emit ReferrerAdded(_account);\n    }\n513-function_definition-97-103", method="addReferrer(address _account)", type_label=function_definition];
520 [label="96_ onlyOperator()\n520-expression_statement-97-97", method="addReferrer(address _account)", type_label=expression_statement];
523 [label="97_ referrers.add(_account);\n523-expression_statement-98-98", method="addReferrer(address _account)", type_label=expression_statement];
530 [label="98_ indexToAddress[index] = _account;\n530-expression_statement-99-99", method="addReferrer(address _account)", type_label=expression_statement];
536 [label="99_ addressToIndex[_account] = index;\n536-expression_statement-100-100", method="addReferrer(address _account)", type_label=expression_statement];
542 [label="100_ index++;\n542-expression_statement-101-101", method="addReferrer(address _account)", type_label=expression_statement];
543 [label="100_ index++\n543-expression_statement-101-101", method="addReferrer(address _account)", type_label=expression_statement];
549 [label="103_ function addReferrers(address[limit] memory accounts) public onlyOperator() {\n        for (uint16 i=0; i<limit; i++) {\n            if (accounts[i] != address(0x0)) {\n                addReferrer(accounts[i]);\n            }\n        }\n    }\n549-function_definition-104-110", method="addReferrers(address[limit] memory accounts)", type_label=function_definition];
558 [label="103_ onlyOperator()\n558-expression_statement-104-104", method="addReferrers(address[limit] memory accounts)", type_label=expression_statement];
561 [label="104_ for(i<limit;;i++)\n561-for-105-109", method="addReferrers(address[limit] memory accounts)", type_label=for];
1178 [label="104_ end_loop", method="addReferrers(address[limit] memory accounts)", type_label=end_loop];
572 [label="104_ i++\n572-expression_statement-105-105", method="addReferrers(address[limit] memory accounts)", type_label=expression_statement];
575 [label="105_ if_accounts[i] != address(0x0)\n575-if-106-108", method="addReferrers(address[limit] memory accounts)", type_label=if];
1192 [label="105_ end_if", method="addReferrers(address[limit] memory accounts)", type_label=end_if];
584 [label="106_ addReferrer(accounts[i]);\n584-expression_statement-107-107", method="addReferrers(address[limit] memory accounts)", type_label=expression_statement];
591 [label="110_ function removeReferrer(address _account) public onlyOperator() {\n        referrers.remove(_account);\n        indexToAddress[addressToIndex[_account]] = address(0x0);\n        emit ReferrerRemoved(_account);\n    }\n591-function_definition-111-115", method="removeReferrer(address _account)", type_label=function_definition];
598 [label="110_ onlyOperator()\n598-expression_statement-111-111", method="removeReferrer(address _account)", type_label=expression_statement];
601 [label="111_ referrers.remove(_account);\n601-expression_statement-112-112", method="removeReferrer(address _account)", type_label=expression_statement];
608 [label="112_ indexToAddress[addressToIndex[_account]] = address(0x0);\n608-expression_statement-113-113", method="removeReferrer(address _account)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
20 -> 33  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
33 -> 42  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
42 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 84  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
84 -> 94  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
103 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
184 -> 190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
192 -> 201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
201 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
207 -> 221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
315 -> 325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
327 -> 340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
340 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
347 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
368 -> 378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
414 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
426 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
432 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
472 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
474 -> 489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
493 -> 506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
506 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
513 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
530 -> 536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
536 -> 542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 575  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
561 -> 1178  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1178 -> 591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
572 -> 561  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
575 -> 584  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
575 -> 1192  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1192 -> 572  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1192 -> 572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
584 -> 1192  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
591 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
