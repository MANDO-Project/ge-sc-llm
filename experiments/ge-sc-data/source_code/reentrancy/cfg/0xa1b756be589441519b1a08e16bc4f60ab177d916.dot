digraph  {
13 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n13-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
2647 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
45 [label="7_ require(c / a == b);\n45-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
56 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n56-function_definition-11-15", method="div(uint256 a,uint256 b)", type_label=function_definition];
73 [label="11_ require(b > 0);\n73-expression_statement-12-12", method="div(uint256 a,uint256 b)", type_label=expression_statement];
80 [label="12_ uint256 c = a / b;\n80-new_variable-13-13", method="div(uint256 a,uint256 b)", type_label=new_variable];
88 [label="13_ return c;\n88-return-14-14", method="div(uint256 a,uint256 b)", type_label=return];
90 [label="15_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n90-function_definition-16-20", method="sub(uint256 a,uint256 b)", type_label=function_definition];
107 [label="16_ require(b <= a);\n107-expression_statement-17-17", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
114 [label="17_ uint256 c = a - b;\n114-new_variable-18-18", method="sub(uint256 a,uint256 b)", type_label=new_variable];
122 [label="18_ return c;\n122-return-19-19", method="sub(uint256 a,uint256 b)", type_label=return];
124 [label="20_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n124-function_definition-21-25", method="add(uint256 a,uint256 b)", type_label=function_definition];
141 [label="21_ uint256 c = a + b;\n141-new_variable-22-22", method="add(uint256 a,uint256 b)", type_label=new_variable];
149 [label="22_ require(c >= a);\n149-expression_statement-23-23", method="add(uint256 a,uint256 b)", type_label=expression_statement];
156 [label="23_ return c;\n156-return-24-24", method="add(uint256 a,uint256 b)", type_label=return];
158 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n158-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
175 [label="26_ require(b != 0);\n175-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
182 [label="27_ return a % b;\n182-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
193 [label="32_ function transfer(address to, uint256 value) external returns (bool);\n193-function_definition-33-33", method="transfer(address to,uint256 value)", type_label=function_definition];
208 [label="33_ function approve(address spender, uint256 value) external returns (bool);\n208-function_definition-34-34", method="approve(address spender,uint256 value)", type_label=function_definition];
223 [label="34_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n223-function_definition-35-35", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
242 [label="35_ function totalSupply() external view returns (uint256);\n242-function_definition-36-36", method="totalSupply()", type_label=function_definition];
250 [label="36_ function balanceOf(address who) external view returns (uint256);\n250-function_definition-37-37", method="balanceOf(address who)", type_label=function_definition];
262 [label="37_ function allowance(address owner, address spender) external view returns (uint256);\n262-function_definition-38-38", method="allowance(address owner,address spender)", type_label=function_definition];
316 [label="43_ string private _name;\n316-new_variable-44-44", method="", type_label=new_variable];
321 [label="44_ string private _symbol;\n321-new_variable-45-45", method="", type_label=new_variable];
326 [label="45_ uint8 private _decimals;\n326-new_variable-46-46", method="", type_label=new_variable];
345 [label="47_ _name = name;\n345-expression_statement-48-48", method="", type_label=expression_statement];
349 [label="48_ _symbol = symbol;\n349-expression_statement-49-49", method="", type_label=expression_statement];
353 [label="49_ _decimals = decimals;\n353-expression_statement-50-50", method="", type_label=expression_statement];
357 [label="51_ function name() public view returns (string memory) {\n        return _name;\n    }\n357-function_definition-52-54", method="name()", type_label=function_definition];
366 [label="52_ return _name;\n366-return-53-53", method="name()", type_label=return];
368 [label="54_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n368-function_definition-55-57", method="symbol()", type_label=function_definition];
377 [label="55_ return _symbol;\n377-return-56-56", method="symbol()", type_label=return];
379 [label="57_ function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n379-function_definition-58-60", method="decimals()", type_label=function_definition];
388 [label="58_ return _decimals;\n388-return-59-59", method="decimals()", type_label=return];
405 [label="64_ mapping (address => uint256) private _balances;\n405-new_variable-65-65", method="", type_label=new_variable];
412 [label="65_ mapping (address => mapping (address => uint256)) private _allowed;\n412-new_variable-66-66", method="", type_label=new_variable];
421 [label="66_ uint256 private _totalSupply;\n421-new_variable-67-67", method="", type_label=new_variable];
426 [label="67_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n426-function_definition-68-70", method="totalSupply()", type_label=function_definition];
435 [label="68_ return _totalSupply;\n435-return-69-69", method="totalSupply()", type_label=return];
437 [label="70_ function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n437-function_definition-71-73", method="balanceOf(address owner)", type_label=function_definition];
450 [label="71_ return _balances[owner];\n450-return-72-72", method="balanceOf(address owner)", type_label=return];
454 [label="73_ function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n454-function_definition-74-76", method="allowance(address owner,address spender)", type_label=function_definition];
471 [label="74_ return _allowed[owner][spender];\n471-return-75-75", method="allowance(address owner,address spender)", type_label=return];
477 [label="76_ function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n477-function_definition-77-80", method="transfer(address to,uint256 value)", type_label=function_definition];
493 [label="77_ _transfer(msg.sender, to, value);\n493-expression_statement-78-78", method="transfer(address to,uint256 value)", type_label=expression_statement];
504 [label="78_ return true;\n504-return-79-79", method="transfer(address to,uint256 value)", type_label=return];
507 [label="80_ function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n507-function_definition-81-86", method="approve(address spender,uint256 value)", type_label=function_definition];
523 [label="81_ require(spender != address(0));\n523-expression_statement-82-82", method="approve(address spender,uint256 value)", type_label=expression_statement];
532 [label="82_ _allowed[msg.sender][spender] = value;\n532-expression_statement-83-83", method="approve(address spender,uint256 value)", type_label=expression_statement];
552 [label="84_ return true;\n552-return-85-85", method="approve(address spender,uint256 value)", type_label=return];
555 [label="86_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n555-function_definition-87-92", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
575 [label="87_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n575-expression_statement-88-88", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
596 [label="88_ _transfer(from, to, value);\n596-expression_statement-89-89", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
621 [label="90_ return true;\n621-return-91-91", method="transferFrom(address from,address to,uint256 value)", type_label=return];
624 [label="92_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n624-function_definition-93-98", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
640 [label="93_ require(spender != address(0));\n640-expression_statement-94-94", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
649 [label="94_ _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n649-expression_statement-95-95", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
686 [label="96_ return true;\n686-return-97-97", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
689 [label="98_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n689-function_definition-99-104", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
705 [label="99_ require(spender != address(0));\n705-expression_statement-100-100", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
714 [label="100_ _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n714-expression_statement-101-101", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
751 [label="102_ return true;\n751-return-103-103", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
754 [label="104_ function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n754-function_definition-105-110", method="_transfer(address from,address to,uint256 value)", type_label=function_definition];
770 [label="105_ require(to != address(0));\n770-expression_statement-106-106", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
779 [label="106_ _balances[from] = _balances[from].sub(value);\n779-expression_statement-107-107", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
792 [label="107_ _balances[to] = _balances[to].add(value);\n792-expression_statement-108-108", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
813 [label="110_ function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n813-function_definition-111-116", method="_mint(address account,uint256 value)", type_label=function_definition];
825 [label="111_ require(account != address(0));\n825-expression_statement-112-112", method="_mint(address account,uint256 value)", type_label=expression_statement];
834 [label="112_ _totalSupply = _totalSupply.add(value);\n834-expression_statement-113-113", method="_mint(address account,uint256 value)", type_label=expression_statement];
843 [label="113_ _balances[account] = _balances[account].add(value);\n843-expression_statement-114-114", method="_mint(address account,uint256 value)", type_label=expression_statement];
866 [label="116_ function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n866-function_definition-117-122", method="_burn(address account,uint256 value)", type_label=function_definition];
878 [label="117_ require(account != address(0));\n878-expression_statement-118-118", method="_burn(address account,uint256 value)", type_label=expression_statement];
887 [label="118_ _totalSupply = _totalSupply.sub(value);\n887-expression_statement-119-119", method="_burn(address account,uint256 value)", type_label=expression_statement];
896 [label="119_ _balances[account] = _balances[account].sub(value);\n896-expression_statement-120-120", method="_burn(address account,uint256 value)", type_label=expression_statement];
919 [label="122_ function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n919-function_definition-123-127", method="_burnFrom(address account,uint256 value)", type_label=function_definition];
931 [label="123_ _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n931-expression_statement-124-124", method="_burnFrom(address account,uint256 value)", type_label=expression_statement];
952 [label="124_ _burn(account, value);\n952-expression_statement-125-125", method="_burnFrom(address account,uint256 value)", type_label=expression_statement];
982 [label="130_ struct Role {\n        mapping (address => bool) bearer;\n    }\n982-expression_statement-131-133", method="Role()", type_label=expression_statement];
990 [label="133_ function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n        role.bearer[account] = true;\n    }\n990-function_definition-134-138", method="add(Role storage role,address account)", type_label=function_definition];
1003 [label="134_ require(account != address(0));\n1003-expression_statement-135-135", method="add(Role storage role,address account)", type_label=expression_statement];
1012 [label="135_ require(!has(role, account));\n1012-expression_statement-136-136", method="add(Role storage role,address account)", type_label=expression_statement];
1023 [label="136_ role.bearer[account] = true;\n1023-expression_statement-137-137", method="add(Role storage role,address account)", type_label=expression_statement];
1032 [label="138_ function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n        role.bearer[account] = false;\n    }\n1032-function_definition-139-143", method="remove(Role storage role,address account)", type_label=function_definition];
1045 [label="139_ require(account != address(0));\n1045-expression_statement-140-140", method="remove(Role storage role,address account)", type_label=expression_statement];
1054 [label="140_ require(has(role, account));\n1054-expression_statement-141-141", method="remove(Role storage role,address account)", type_label=expression_statement];
1064 [label="141_ role.bearer[account] = false;\n1064-expression_statement-142-142", method="remove(Role storage role,address account)", type_label=expression_statement];
1073 [label="143_ function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n1073-function_definition-144-147", method="has(Role storage role,address account)", type_label=function_definition];
1091 [label="144_ require(account != address(0));\n1091-expression_statement-145-145", method="has(Role storage role,address account)", type_label=expression_statement];
1100 [label="145_ return role.bearer[account];\n1100-return-146-146", method="has(Role storage role,address account)", type_label=return];
1132 [label="153_ Roles.Role private _pausers;\n1132-new_variable-154-154", method="", type_label=new_variable];
1141 [label="155_ _addPauser(msg.sender);\n1141-expression_statement-156-156", method="", type_label=expression_statement];
1148 [label="157_ modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n1148-expression_statement-158-161", method="", type_label=expression_statement];
1151 [label="158_ require(isPauser(msg.sender));\n1151-expression_statement-159-159", method="", type_label=expression_statement];
1161 [label="159_ _;\n1161-expression_statement-160-160", method="", type_label=expression_statement];
1163 [label="161_ function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n1163-function_definition-162-164", method="isPauser(address account)", type_label=function_definition];
1176 [label="162_ return _pausers.has(account);\n1176-return-163-163", method="isPauser(address account)", type_label=return];
1183 [label="164_ function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n1183-function_definition-165-167", method="addPauser(address account)", type_label=function_definition];
1190 [label="164_ onlyPauser\n1190-expression_statement-165-165", method="addPauser(address account)", type_label=expression_statement];
1193 [label="165_ _addPauser(account);\n1193-expression_statement-166-166", method="addPauser(address account)", type_label=expression_statement];
1198 [label="167_ function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n1198-function_definition-168-170", method="renouncePauser()", type_label=function_definition];
1202 [label="168_ _removePauser(msg.sender);\n1202-expression_statement-169-169", method="renouncePauser()", type_label=expression_statement];
1209 [label="170_ function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n1209-function_definition-171-174", method="_addPauser(address account)", type_label=function_definition];
1217 [label="171_ _pausers.add(account);\n1217-expression_statement-172-172", method="_addPauser(address account)", type_label=expression_statement];
1228 [label="174_ function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n1228-function_definition-175-178", method="_removePauser(address account)", type_label=function_definition];
1236 [label="175_ _pausers.remove(account);\n1236-expression_statement-176-176", method="_removePauser(address account)", type_label=expression_statement];
1269 [label="183_ bool private _paused;\n1269-new_variable-184-184", method="", type_label=new_variable];
1276 [label="185_ _paused = false;\n1276-expression_statement-186-186", method="", type_label=expression_statement];
1281 [label="187_ function paused() public view returns (bool) {\n        return _paused;\n    }\n1281-function_definition-188-190", method="paused()", type_label=function_definition];
1290 [label="188_ return _paused;\n1290-return-189-189", method="paused()", type_label=return];
1292 [label="190_ modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n1292-expression_statement-191-194", method="", type_label=expression_statement];
1295 [label="191_ require(!_paused);\n1295-expression_statement-192-192", method="", type_label=expression_statement];
1301 [label="192_ _;\n1301-expression_statement-193-193", method="", type_label=expression_statement];
1303 [label="194_ modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n1303-expression_statement-195-198", method="", type_label=expression_statement];
1306 [label="195_ require(_paused);\n1306-expression_statement-196-196", method="", type_label=expression_statement];
1311 [label="196_ _;\n1311-expression_statement-197-197", method="", type_label=expression_statement];
1313 [label="198_ function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n1313-function_definition-199-202", method="pause()", type_label=function_definition];
1316 [label="198_ onlyPauser\n1316-expression_statement-199-199", method="pause()", type_label=expression_statement];
1318 [label="198_ whenNotPaused\n1318-expression_statement-199-199", method="pause()", type_label=expression_statement];
1321 [label="199_ _paused = true;\n1321-expression_statement-200-200", method="pause()", type_label=expression_statement];
1332 [label="202_ function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n1332-function_definition-203-206", method="unpause()", type_label=function_definition];
1335 [label="202_ onlyPauser\n1335-expression_statement-203-203", method="unpause()", type_label=expression_statement];
1337 [label="202_ whenPaused\n1337-expression_statement-203-203", method="unpause()", type_label=expression_statement];
1340 [label="203_ _paused = false;\n1340-expression_statement-204-204", method="unpause()", type_label=expression_statement];
1364 [label="209_ function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n1364-function_definition-210-212", method="transfer(address to,uint256 value)", type_label=function_definition];
1375 [label="209_ whenNotPaused\n1375-expression_statement-210-210", method="transfer(address to,uint256 value)", type_label=expression_statement];
1382 [label="210_ return super.transfer(to, value);\n1382-return-211-211", method="transfer(address to,uint256 value)", type_label=return];
1391 [label="212_ function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n1391-function_definition-213-215", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
1406 [label="212_ whenNotPaused\n1406-expression_statement-213-213", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1413 [label="213_ return super.transferFrom(from, to, value);\n1413-return-214-214", method="transferFrom(address from,address to,uint256 value)", type_label=return];
1424 [label="215_ function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n1424-function_definition-216-218", method="approve(address spender,uint256 value)", type_label=function_definition];
1435 [label="215_ whenNotPaused\n1435-expression_statement-216-216", method="approve(address spender,uint256 value)", type_label=expression_statement];
1442 [label="216_ return super.approve(spender, value);\n1442-return-217-217", method="approve(address spender,uint256 value)", type_label=return];
1451 [label="218_ function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n1451-function_definition-219-221", method="increaseAllowance(address spender,uint addedValue)", type_label=function_definition];
1462 [label="218_ whenNotPaused\n1462-expression_statement-219-219", method="increaseAllowance(address spender,uint addedValue)", type_label=expression_statement];
1470 [label="219_ return super.increaseAllowance(spender, addedValue);\n1470-return-220-220", method="increaseAllowance(address spender,uint addedValue)", type_label=return];
1479 [label="221_ function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n1479-function_definition-222-224", method="decreaseAllowance(address spender,uint subtractedValue)", type_label=function_definition];
1490 [label="221_ whenNotPaused\n1490-expression_statement-222-222", method="decreaseAllowance(address spender,uint subtractedValue)", type_label=expression_statement];
1498 [label="222_ return super.decreaseAllowance(spender, subtractedValue);\n1498-return-223-223", method="decreaseAllowance(address spender,uint subtractedValue)", type_label=return];
1533 [label="230_ Roles.Role private _minters;\n1533-new_variable-231-231", method="", type_label=new_variable];
1542 [label="232_ _addMinter(msg.sender);\n1542-expression_statement-233-233", method="", type_label=expression_statement];
1549 [label="234_ modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n1549-expression_statement-235-238", method="", type_label=expression_statement];
1552 [label="235_ require(isMinter(msg.sender));\n1552-expression_statement-236-236", method="", type_label=expression_statement];
1562 [label="236_ _;\n1562-expression_statement-237-237", method="", type_label=expression_statement];
1564 [label="238_ function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n1564-function_definition-239-241", method="isMinter(address account)", type_label=function_definition];
1577 [label="239_ return _minters.has(account);\n1577-return-240-240", method="isMinter(address account)", type_label=return];
1584 [label="241_ function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n1584-function_definition-242-244", method="addMinter(address account)", type_label=function_definition];
1591 [label="241_ onlyMinter\n1591-expression_statement-242-242", method="addMinter(address account)", type_label=expression_statement];
1594 [label="242_ _addMinter(account);\n1594-expression_statement-243-243", method="addMinter(address account)", type_label=expression_statement];
1599 [label="244_ function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n1599-function_definition-245-247", method="renounceMinter()", type_label=function_definition];
1603 [label="245_ _removeMinter(msg.sender);\n1603-expression_statement-246-246", method="renounceMinter()", type_label=expression_statement];
1610 [label="247_ function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n1610-function_definition-248-251", method="_addMinter(address account)", type_label=function_definition];
1618 [label="248_ _minters.add(account);\n1618-expression_statement-249-249", method="_addMinter(address account)", type_label=expression_statement];
1629 [label="251_ function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n1629-function_definition-252-255", method="_removeMinter(address account)", type_label=function_definition];
1637 [label="252_ _minters.remove(account);\n1637-expression_statement-253-253", method="_removeMinter(address account)", type_label=expression_statement];
1661 [label="258_ function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n1661-function_definition-259-262", method="mint(address to,uint256 value)", type_label=function_definition];
1672 [label="258_ onlyMinter\n1672-expression_statement-259-259", method="mint(address to,uint256 value)", type_label=expression_statement];
1679 [label="259_ _mint(to, value);\n1679-expression_statement-260-260", method="mint(address to,uint256 value)", type_label=expression_statement];
1686 [label="260_ return true;\n1686-return-261-261", method="mint(address to,uint256 value)", type_label=return];
1696 [label="265_ address private _owner;\n1696-new_variable-266-266", method="", type_label=new_variable];
1713 [label="268_ _owner = msg.sender;\n1713-expression_statement-269-269", method="", type_label=expression_statement];
1727 [label="271_ function owner() public view returns (address) {\n        return _owner;\n    }\n1727-function_definition-272-274", method="owner()", type_label=function_definition];
1736 [label="272_ return _owner;\n1736-return-273-273", method="owner()", type_label=return];
1738 [label="274_ modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n1738-expression_statement-275-278", method="", type_label=expression_statement];
1741 [label="275_ require(isOwner());\n1741-expression_statement-276-276", method="", type_label=expression_statement];
1747 [label="276_ _;\n1747-expression_statement-277-277", method="", type_label=expression_statement];
1749 [label="278_ function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n1749-function_definition-279-281", method="isOwner()", type_label=function_definition];
1758 [label="279_ return msg.sender == _owner;\n1758-return-280-280", method="isOwner()", type_label=return];
1764 [label="281_ function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n1764-function_definition-282-285", method="renounceOwnership()", type_label=function_definition];
1767 [label="281_ onlyOwner\n1767-expression_statement-282-282", method="renounceOwnership()", type_label=expression_statement];
1778 [label="283_ _owner = address(0);\n1778-expression_statement-284-284", method="renounceOwnership()", type_label=expression_statement];
1784 [label="285_ function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n1784-function_definition-286-288", method="transferOwnership(address newOwner)", type_label=function_definition];
1791 [label="285_ onlyOwner\n1791-expression_statement-286-286", method="transferOwnership(address newOwner)", type_label=expression_statement];
1794 [label="286_ _transferOwnership(newOwner);\n1794-expression_statement-287-287", method="transferOwnership(address newOwner)", type_label=expression_statement];
1799 [label="288_ function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n1799-function_definition-289-293", method="_transferOwnership(address newOwner)", type_label=function_definition];
1807 [label="289_ require(newOwner != address(0));\n1807-expression_statement-290-290", method="_transferOwnership(address newOwner)", type_label=expression_statement];
1822 [label="291_ _owner = newOwner;\n1822-expression_statement-292-292", method="_transferOwnership(address newOwner)", type_label=expression_statement];
1833 [label="296_ function isWhitelisted(address account) public view returns (bool);\n1833-function_definition-297-297", method="isWhitelisted(address account)", type_label=function_definition];
1865 [label="301_ IWhitelist public whitelist;\n1865-new_variable-302-302", method="", type_label=new_variable];
1871 [label="302_ function setWhitelist(IWhitelist _whitelist) public onlyOwner {\n        whitelist = _whitelist;\n        emit WhitelistChanged(_whitelist);\n    }\n1871-function_definition-303-306", method="setWhitelist(IWhitelist _whitelist)", type_label=function_definition];
1879 [label="302_ onlyOwner\n1879-expression_statement-303-303", method="setWhitelist(IWhitelist _whitelist)", type_label=expression_statement];
1882 [label="303_ whitelist = _whitelist;\n1882-expression_statement-304-304", method="setWhitelist(IWhitelist _whitelist)", type_label=expression_statement];
1890 [label="306_ modifier onlyWhitelisted(address account) {\n        require(isWhitelisted(account));\n        _;\n    }\n1890-expression_statement-307-310", method="", type_label=expression_statement];
1897 [label="307_ require(isWhitelisted(account));\n1897-expression_statement-308-308", method="", type_label=expression_statement];
1905 [label="308_ _;\n1905-expression_statement-309-309", method="", type_label=expression_statement];
1907 [label="310_ modifier notWhitelisted(address account) {\n        require(!isWhitelisted(account));\n        _;\n    }\n1907-expression_statement-311-314", method="", type_label=expression_statement];
1914 [label="311_ require(!isWhitelisted(account));\n1914-expression_statement-312-312", method="", type_label=expression_statement];
1923 [label="312_ _;\n1923-expression_statement-313-313", method="", type_label=expression_statement];
1925 [label="314_ function isWhitelisted(address account) public view returns (bool) {\n        return whitelist.isWhitelisted(account);\n    }\n1925-function_definition-315-317", method="isWhitelisted(address account)", type_label=function_definition];
1938 [label="315_ return whitelist.isWhitelisted(account);\n1938-return-316-316", method="isWhitelisted(address account)", type_label=return];
1945 [label="317_ function transfer(address to, uint256 value)\n        public\n        onlyWhitelisted(msg.sender)\n        onlyWhitelisted(to)\n        returns (bool)\n    {\n        return super.transfer(to, value);\n    }\n1945-function_definition-318-325", method="transfer(address to,uint256 value)", type_label=function_definition];
1956 [label="319_ onlyWhitelisted(msg.sender)\n1956-expression_statement-320-320", method="transfer(address to,uint256 value)", type_label=expression_statement];
1962 [label="320_ onlyWhitelisted(to)\n1962-expression_statement-321-321", method="transfer(address to,uint256 value)", type_label=expression_statement];
1971 [label="323_ return super.transfer(to, value);\n1971-return-324-324", method="transfer(address to,uint256 value)", type_label=return];
1980 [label="325_ function transferFrom(address from, address to, uint256 value)\n        public\n        onlyWhitelisted(from)\n        onlyWhitelisted(to)\n        returns (bool)\n    {\n        return super.transferFrom(from, to, value);\n    }\n1980-function_definition-326-333", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
1995 [label="327_ onlyWhitelisted(from)\n1995-expression_statement-328-328", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1999 [label="328_ onlyWhitelisted(to)\n1999-expression_statement-329-329", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2008 [label="331_ return super.transferFrom(from, to, value);\n2008-return-332-332", method="transferFrom(address from,address to,uint256 value)", type_label=return];
2019 [label="333_ function mint(address to, uint256 value) public onlyWhitelisted(to) returns (bool) {\n        return super.mint(to, value);\n    }\n2019-function_definition-334-336", method="mint(address to,uint256 value)", type_label=function_definition];
2030 [label="333_ onlyWhitelisted(to)\n2030-expression_statement-334-334", method="mint(address to,uint256 value)", type_label=expression_statement];
2039 [label="334_ return super.mint(to, value);\n2039-return-335-335", method="mint(address to,uint256 value)", type_label=return];
2074 [label="342_ Roles.Role private _burners;\n2074-new_variable-343-343", method="", type_label=new_variable];
2083 [label="344_ _addBurner(msg.sender);\n2083-expression_statement-345-345", method="", type_label=expression_statement];
2090 [label="346_ modifier onlyBurner() {\n        require(isBurner(msg.sender));\n        _;\n    }\n2090-expression_statement-347-350", method="", type_label=expression_statement];
2093 [label="347_ require(isBurner(msg.sender));\n2093-expression_statement-348-348", method="", type_label=expression_statement];
2103 [label="348_ _;\n2103-expression_statement-349-349", method="", type_label=expression_statement];
2105 [label="350_ function isBurner(address account) public view returns (bool) {\n        return _burners.has(account);\n    }\n2105-function_definition-351-353", method="isBurner(address account)", type_label=function_definition];
2118 [label="351_ return _burners.has(account);\n2118-return-352-352", method="isBurner(address account)", type_label=return];
2125 [label="353_ function addBurner(address account) public onlyBurner {\n        _addBurner(account);\n    }\n2125-function_definition-354-356", method="addBurner(address account)", type_label=function_definition];
2132 [label="353_ onlyBurner\n2132-expression_statement-354-354", method="addBurner(address account)", type_label=expression_statement];
2135 [label="354_ _addBurner(account);\n2135-expression_statement-355-355", method="addBurner(address account)", type_label=expression_statement];
2140 [label="356_ function renounceBurner() public {\n        _removeBurner(msg.sender);\n    }\n2140-function_definition-357-359", method="renounceBurner()", type_label=function_definition];
2144 [label="357_ _removeBurner(msg.sender);\n2144-expression_statement-358-358", method="renounceBurner()", type_label=expression_statement];
2151 [label="359_ function _addBurner(address account) internal {\n        _burners.add(account);\n        emit BurnerAdded(account);\n    }\n2151-function_definition-360-363", method="_addBurner(address account)", type_label=function_definition];
2159 [label="360_ _burners.add(account);\n2159-expression_statement-361-361", method="_addBurner(address account)", type_label=expression_statement];
2170 [label="363_ function _removeBurner(address account) internal {\n        _burners.remove(account);\n        emit BurnerRemoved(account);\n    }\n2170-function_definition-364-367", method="_removeBurner(address account)", type_label=function_definition];
2178 [label="364_ _burners.remove(account);\n2178-expression_statement-365-365", method="_removeBurner(address account)", type_label=expression_statement];
2202 [label="370_ function burn(uint256 value) public onlyBurner() {\n        _burn(msg.sender, value);\n    }\n2202-function_definition-371-373", method="burn(uint256 value)", type_label=function_definition];
2209 [label="370_ onlyBurner()\n2209-expression_statement-371-371", method="burn(uint256 value)", type_label=expression_statement];
2212 [label="371_ _burn(msg.sender, value);\n2212-expression_statement-372-372", method="burn(uint256 value)", type_label=expression_statement];
2221 [label="373_ function burnFrom(address from, uint256 value) public onlyBurner() {\n        _burnFrom(from, value);\n    }\n2221-function_definition-374-376", method="burnFrom(address from,uint256 value)", type_label=function_definition];
2232 [label="373_ onlyBurner()\n2232-expression_statement-374-374", method="burnFrom(address from,uint256 value)", type_label=expression_statement];
2235 [label="374_ _burnFrom(from, value);\n2235-expression_statement-375-375", method="burnFrom(address from,uint256 value)", type_label=expression_statement];
2252 [label="379_ function reclaimEther() external onlyOwner {\n        msg.sender.transfer(address(this).balance);\n    }\n2252-function_definition-380-382", method="reclaimEther()", type_label=function_definition];
2255 [label="379_ onlyOwner\n2255-expression_statement-380-380", method="reclaimEther()", type_label=expression_statement];
2258 [label="380_ msg.sender.transfer(address(this).balance);\n2258-expression_statement-381-381", method="reclaimEther()", type_label=expression_statement];
2283 [label="386_ function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n2283-function_definition-387-389", method="safeTransfer(IERC20 token,address to,uint256 value)", type_label=function_definition];
2300 [label="387_ require(token.transfer(to, value));\n2300-expression_statement-388-388", method="safeTransfer(IERC20 token,address to,uint256 value)", type_label=expression_statement];
2312 [label="389_ function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        require(token.transferFrom(from, to, value));\n    }\n2312-function_definition-390-392", method="safeTransferFrom(IERC20 token,address from,address to,uint256 value)", type_label=function_definition];
2333 [label="390_ require(token.transferFrom(from, to, value));\n2333-expression_statement-391-391", method="safeTransferFrom(IERC20 token,address from,address to,uint256 value)", type_label=expression_statement];
2347 [label="392_ function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\n        require(token.approve(spender, value));\n    }\n2347-function_definition-393-396", method="safeApprove(IERC20 token,address spender,uint256 value)", type_label=function_definition];
2364 [label="393_ require((value == 0) || (token.allowance(address(this), spender) == 0));\n2364-expression_statement-394-394", method="safeApprove(IERC20 token,address spender,uint256 value)", type_label=expression_statement];
2386 [label="394_ require(token.approve(spender, value));\n2386-expression_statement-395-395", method="safeApprove(IERC20 token,address spender,uint256 value)", type_label=expression_statement];
2398 [label="396_ function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        require(token.approve(spender, newAllowance));\n    }\n2398-function_definition-397-400", method="safeIncreaseAllowance(IERC20 token,address spender,uint256 value)", type_label=function_definition];
2415 [label="397_ uint256 newAllowance = token.allowance(address(this), spender).add(value);\n2415-new_variable-398-398", method="safeIncreaseAllowance(IERC20 token,address spender,uint256 value)", type_label=new_variable];
2435 [label="398_ require(token.approve(spender, newAllowance));\n2435-expression_statement-399-399", method="safeIncreaseAllowance(IERC20 token,address spender,uint256 value)", type_label=expression_statement];
2447 [label="400_ function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        require(token.approve(spender, newAllowance));\n    }\n2447-function_definition-401-404", method="safeDecreaseAllowance(IERC20 token,address spender,uint256 value)", type_label=function_definition];
2464 [label="401_ uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n2464-new_variable-402-402", method="safeDecreaseAllowance(IERC20 token,address spender,uint256 value)", type_label=new_variable];
2484 [label="402_ require(token.approve(spender, newAllowance));\n2484-expression_statement-403-403", method="safeDecreaseAllowance(IERC20 token,address spender,uint256 value)", type_label=expression_statement];
2512 [label="408_ function reclaimToken(IERC20 token) external onlyOwner {\n        uint256 balance = token.balanceOf(address(this));\n        token.safeTransfer(owner(), balance);\n    }\n2512-function_definition-409-412", method="reclaimToken(IERC20 token)", type_label=function_definition];
2520 [label="408_ onlyOwner\n2520-expression_statement-409-409", method="reclaimToken(IERC20 token)", type_label=expression_statement];
2523 [label="409_ uint256 balance = token.balanceOf(address(this));\n2523-new_variable-410-410", method="reclaimToken(IERC20 token)", type_label=new_variable];
2536 [label="410_ token.safeTransfer(owner(), balance);\n2536-expression_statement-411-411", method="reclaimToken(IERC20 token)", type_label=expression_statement];
2588 [label="425_ ERC20Detailed(name, symbol, 18)\n2588-expression_statement-426-426", method="", type_label=expression_statement];
2597 [label="428_ function burnBlacklisted(address from, uint256 value)\n        public\n        onlyBurner()\n        notWhitelisted(from)\n    {\n        _burn(from, value);\n    }\n2597-function_definition-429-435", method="burnBlacklisted(address from,uint256 value)", type_label=function_definition];
2608 [label="430_ onlyBurner()\n2608-expression_statement-431-431", method="burnBlacklisted(address from,uint256 value)", type_label=expression_statement];
2610 [label="431_ notWhitelisted(from)\n2610-expression_statement-432-432", method="burnBlacklisted(address from,uint256 value)", type_label=expression_statement];
2615 [label="433_ _burn(from, value);\n2615-expression_statement-434-434", method="burnBlacklisted(address from,uint256 value)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 2647  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2647 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 2647  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
90 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
124 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
156 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
158 -> 175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
175 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
316 -> 321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
349 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
368 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
379 -> 388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
388 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
405 -> 412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
412 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
426 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
437 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
454 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
477 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
504 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
507 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
552 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
555 -> 575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
575 -> 596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
624 -> 640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
686 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
689 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
751 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
754 -> 770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
770 -> 779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
779 -> 792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
813 -> 825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
825 -> 834  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
834 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
866 -> 878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
878 -> 887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
887 -> 896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
931 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
990 -> 1003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 1012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1012 -> 1023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1032 -> 1045  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1045 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1073 -> 1091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1091 -> 1100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1100 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1151 -> 1161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1163 -> 1176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1176 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1183 -> 1193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1198 -> 1202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1209 -> 1217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1281 -> 1290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1290 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1292 -> 1303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1295 -> 1301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1306 -> 1311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1313 -> 1321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1316 -> 1318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1332 -> 1340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1335 -> 1337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1364 -> 1382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1382 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1391 -> 1413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1413 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1424 -> 1442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1442 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1451 -> 1470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1470 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1479 -> 1498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1498 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1552 -> 1562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1564 -> 1577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1577 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1584 -> 1594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1599 -> 1603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1610 -> 1618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1629 -> 1637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1661 -> 1679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1679 -> 1686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1686 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1727 -> 1736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1736 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1741 -> 1747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1749 -> 1758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1758 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1764 -> 1778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1784 -> 1794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1799 -> 1807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1871 -> 1882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1890 -> 1907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1897 -> 1905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1914 -> 1923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1925 -> 1938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1938 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1945 -> 1971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1956 -> 1962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1971 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1980 -> 2008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1995 -> 1999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2008 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2019 -> 2039  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2039 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2093 -> 2103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2105 -> 2118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2118 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2125 -> 2135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2140 -> 2144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2151 -> 2159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2170 -> 2178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2202 -> 2212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2221 -> 2235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2252 -> 2258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2283 -> 2300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2312 -> 2333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2347 -> 2364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2364 -> 2386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2398 -> 2415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2415 -> 2435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2447 -> 2464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2464 -> 2484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2512 -> 2523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2523 -> 2536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2597 -> 2615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2608 -> 2610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
