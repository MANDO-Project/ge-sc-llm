digraph  {
13 [label="2_ function add(uint a, uint b) internal pure returns (uint c) {	 \n        c = a + b;\n        require(c >= a);\n    }\n13-function_definition-3-6", method="add(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a + b;\n31-expression_statement-4-4", method="add(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(c >= a);\n37-expression_statement-5-5", method="add(uint a,uint b)", type_label=expression_statement];
44 [label="6_ function sub(uint a, uint b) internal pure returns (uint c) {	 \n        require(b <= a);\n        c = a - b;\n    }\n44-function_definition-7-10", method="sub(uint a,uint b)", type_label=function_definition];
62 [label="7_ require(b <= a);\n62-expression_statement-8-8", method="sub(uint a,uint b)", type_label=expression_statement];
69 [label="8_ c = a - b;\n69-expression_statement-9-9", method="sub(uint a,uint b)", type_label=expression_statement];
75 [label="10_ function mul(uint a, uint b) internal pure returns (uint c) {	 \n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n75-function_definition-11-14", method="mul(uint a,uint b)", type_label=function_definition];
93 [label="11_ c = a * b;\n93-expression_statement-12-12", method="mul(uint a,uint b)", type_label=expression_statement];
99 [label="12_ require(a == 0 || c / a == b);\n99-expression_statement-13-13", method="mul(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function div(uint a, uint b) internal pure returns (uint c) {	 \n        require(b > 0);\n        c = a / b;\n    }\n112-function_definition-15-18", method="div(uint a,uint b)", type_label=function_definition];
130 [label="15_ require(b > 0);\n130-expression_statement-16-16", method="div(uint a,uint b)", type_label=expression_statement];
137 [label="16_ c = a / b;\n137-expression_statement-17-17", method="div(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function totalSupply() public view returns (uint);\n146-function_definition-21-21", method="totalSupply()", type_label=function_definition];
154 [label="21_ mapping(address => uint) balances_re_ent17;\n154-new_variable-22-22", method="", type_label=new_variable];
160 [label="22_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n160-function_definition-23-28", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
168 [label="23_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n168-expression_statement-24-24", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
179 [label="24_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n179-new_variable-25-25", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
199 [label="25_ require(success);\n199-expression_statement-26-26", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
204 [label="26_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n204-expression_statement-27-27", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
212 [label="28_ function balanceOf(address tokenOwner) public view returns (uint balance);\n212-function_definition-29-29", method="balanceOf(address tokenOwner)", type_label=function_definition];
225 [label="29_ address payable lastPlayer_re_ent37;\n225-new_variable-30-30", method="", type_label=new_variable];
229 [label="30_ uint jackpot_re_ent37;\n229-new_variable-31-31", method="", type_label=new_variable];
233 [label="31_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n233-function_definition-32-37", method="buyTicket_re_ent37()", type_label=function_definition];
237 [label="32_ if\n237-if-33-34", method="buyTicket_re_ent37()", type_label=if];
2473 [label="32_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
248 [label="34_ lastPlayer_re_ent37 = msg.sender;\n248-expression_statement-35-35", method="buyTicket_re_ent37()", type_label=expression_statement];
254 [label="35_ jackpot_re_ent37    = address(this).balance;\n254-expression_statement-36-36", method="buyTicket_re_ent37()", type_label=expression_statement];
262 [label="37_ function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n262-function_definition-38-38", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
279 [label="38_ mapping(address => uint) balances_re_ent3;\n279-new_variable-39-39", method="", type_label=new_variable];
285 [label="39_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n285-function_definition-40-45", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
293 [label="40_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n293-expression_statement-41-41", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
304 [label="41_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n304-new_variable-42-42", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
324 [label="42_ require(success);\n324-expression_statement-43-43", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
329 [label="43_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n329-expression_statement-44-44", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
337 [label="45_ function transfer(address to, uint tokens) public returns (bool success);\n337-function_definition-46-46", method="transfer(address to,uint tokens)", type_label=function_definition];
353 [label="46_ address payable lastPlayer_re_ent9;\n353-new_variable-47-47", method="", type_label=new_variable];
357 [label="47_ uint jackpot_re_ent9;\n357-new_variable-48-48", method="", type_label=new_variable];
361 [label="48_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n361-function_definition-49-55", method="buyTicket_re_ent9()", type_label=function_definition];
365 [label="49_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n365-new_variable-50-50", method="buyTicket_re_ent9()", type_label=new_variable];
383 [label="50_ if\n383-if-51-52", method="buyTicket_re_ent9()", type_label=if];
2619 [label="50_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
388 [label="52_ lastPlayer_re_ent9 = msg.sender;\n388-expression_statement-53-53", method="buyTicket_re_ent9()", type_label=expression_statement];
394 [label="53_ jackpot_re_ent9    = address(this).balance;\n394-expression_statement-54-54", method="buyTicket_re_ent9()", type_label=expression_statement];
402 [label="55_ function approve(address spender, uint tokens) public returns (bool success);\n402-function_definition-56-56", method="approve(address spender,uint tokens)", type_label=function_definition];
418 [label="56_ mapping(address => uint) redeemableEther_re_ent25;\n418-new_variable-57-57", method="", type_label=new_variable];
424 [label="57_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n424-function_definition-58-63", method="claimReward_re_ent25()", type_label=function_definition];
428 [label="58_ require(redeemableEther_re_ent25[msg.sender] > 0);\n428-expression_statement-59-59", method="claimReward_re_ent25()", type_label=expression_statement];
439 [label="59_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n439-new_variable-60-60", method="claimReward_re_ent25()", type_label=new_variable];
449 [label="60_ msg.sender.transfer(transferValue_re_ent25);\n449-expression_statement-61-61", method="claimReward_re_ent25()", type_label=expression_statement];
458 [label="61_ redeemableEther_re_ent25[msg.sender] = 0;\n458-expression_statement-62-62", method="claimReward_re_ent25()", type_label=expression_statement];
466 [label="63_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n466-function_definition-64-64", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
486 [label="64_ mapping(address => uint) userBalance_re_ent19;\n486-new_variable-65-65", method="", type_label=new_variable];
492 [label="65_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n492-function_definition-66-71", method="withdrawBalance_re_ent19()", type_label=function_definition];
496 [label="66_ if\n496-if-67-69", method="withdrawBalance_re_ent19()", type_label=if];
2732 [label="66_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
514 [label="69_ userBalance_re_ent19[msg.sender] = 0;\n514-expression_statement-70-70", method="withdrawBalance_re_ent19()", type_label=expression_statement];
522 [label="71_ bool not_called_re_ent27 = true;\n522-new_variable-72-72", method="", type_label=new_variable];
528 [label="72_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n528-function_definition-73-79", method="bug_re_ent27()", type_label=function_definition];
532 [label="73_ require(not_called_re_ent27);\n532-expression_statement-74-74", method="bug_re_ent27()", type_label=expression_statement];
537 [label="74_ if\n537-if-75-77", method="bug_re_ent27()", type_label=if];
2773 [label="74_ end_if", method="bug_re_ent27()", type_label=end_if];
552 [label="77_ not_called_re_ent27 = false;\n552-expression_statement-78-78", method="bug_re_ent27()", type_label=expression_statement];
571 [label="80_ mapping(address => uint) balances_re_ent31;\n571-new_variable-81-81", method="", type_label=new_variable];
577 [label="81_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n577-function_definition-82-86", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
585 [label="82_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n585-expression_statement-83-83", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
596 [label="83_ require(msg.sender.send(_weiToWithdraw));\n596-expression_statement-84-84", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
608 [label="84_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n608-expression_statement-85-85", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
633 [label="89_ function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n633-function_definition-90-90", method="receiveApproval(address from,uint256 tokens,address token,bytes memory data)", type_label=function_definition];
652 [label="90_ mapping(address => uint) userBalance_re_ent26;\n652-new_variable-91-91", method="", type_label=new_variable];
658 [label="91_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n658-function_definition-92-98", method="withdrawBalance_re_ent26()", type_label=function_definition];
662 [label="92_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n662-new_variable-93-93", method="withdrawBalance_re_ent26()", type_label=new_variable];
686 [label="93_ if\n686-if-94-96", method="withdrawBalance_re_ent26()", type_label=if];
2922 [label="93_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
692 [label="96_ userBalance_re_ent26[msg.sender] = 0;\n692-expression_statement-97-97", method="withdrawBalance_re_ent26()", type_label=expression_statement];
703 [label="100_ mapping(address => uint) balances_re_ent21;\n703-new_variable-101-101", method="", type_label=new_variable];
709 [label="101_ function withdraw_balances_re_ent21 () public {\n       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent21[msg.sender] = 0;\n      }\n709-function_definition-102-106", method="withdraw_balances_re_ent21()", type_label=function_definition];
713 [label="102_ (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n713-new_variable-103-103", method="withdraw_balances_re_ent21()", type_label=new_variable];
737 [label="103_ if\n737-if-104-105", method="withdraw_balances_re_ent21()", type_label=if];
2973 [label="103_ end_if", method="withdraw_balances_re_ent21()", type_label=end_if];
739 [label="104_ balances_re_ent21[msg.sender] = 0;\n739-expression_statement-105-105", method="withdraw_balances_re_ent21()", type_label=expression_statement];
747 [label="106_ address public owner;\n747-new_variable-107-107", method="", type_label=new_variable];
752 [label="107_ mapping(address => uint) userBalance_re_ent12;\n752-new_variable-108-108", method="", type_label=new_variable];
758 [label="108_ function withdrawBalance_re_ent12() public{\n        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent12[msg.sender] = 0;\n    }\n758-function_definition-109-114", method="withdrawBalance_re_ent12()", type_label=function_definition];
762 [label="109_ if\n762-if-110-112", method="withdrawBalance_re_ent12()", type_label=if];
2998 [label="109_ end_if", method="withdrawBalance_re_ent12()", type_label=end_if];
780 [label="112_ userBalance_re_ent12[msg.sender] = 0;\n780-expression_statement-113-113", method="withdrawBalance_re_ent12()", type_label=expression_statement];
788 [label="114_ address public newOwner;\n788-new_variable-115-115", method="", type_label=new_variable];
793 [label="115_ bool not_called_re_ent13 = true;\n793-new_variable-116-116", method="", type_label=new_variable];
799 [label="116_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n799-function_definition-117-124", method="bug_re_ent13()", type_label=function_definition];
803 [label="117_ require(not_called_re_ent13);\n803-expression_statement-118-118", method="bug_re_ent13()", type_label=expression_statement];
808 [label="118_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n808-new_variable-119-119", method="bug_re_ent13()", type_label=new_variable];
829 [label="119_ if\n829-if-120-122", method="bug_re_ent13()", type_label=if];
3065 [label="119_ end_if", method="bug_re_ent13()", type_label=end_if];
835 [label="122_ not_called_re_ent13 = false;\n835-expression_statement-123-123", method="bug_re_ent13()", type_label=expression_statement];
852 [label="126_ owner = msg.sender;\n852-expression_statement-127-127", method="", type_label=expression_statement];
858 [label="128_ bool not_called_re_ent20 = true;\n858-new_variable-129-129", method="", type_label=new_variable];
864 [label="129_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n864-function_definition-130-136", method="bug_re_ent20()", type_label=function_definition];
868 [label="130_ require(not_called_re_ent20);\n868-expression_statement-131-131", method="bug_re_ent20()", type_label=expression_statement];
873 [label="131_ if\n873-if-132-134", method="bug_re_ent20()", type_label=if];
3109 [label="131_ end_if", method="bug_re_ent20()", type_label=end_if];
888 [label="134_ not_called_re_ent20 = false;\n888-expression_statement-135-135", method="bug_re_ent20()", type_label=expression_statement];
893 [label="136_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n893-expression_statement-137-140", method="", type_label=expression_statement];
896 [label="137_ require(msg.sender == owner);\n896-expression_statement-138-138", method="", type_label=expression_statement];
905 [label="138_ _;\n905-expression_statement-139-139", method="", type_label=expression_statement];
907 [label="140_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n907-function_definition-141-143", method="transferOwnership(address _newOwner)", type_label=function_definition];
914 [label="140_ onlyOwner\n914-expression_statement-141-141", method="transferOwnership(address _newOwner)", type_label=expression_statement];
917 [label="141_ newOwner = _newOwner;\n917-expression_statement-142-142", method="transferOwnership(address _newOwner)", type_label=expression_statement];
921 [label="143_ mapping(address => uint) redeemableEther_re_ent32;\n921-new_variable-144-144", method="", type_label=new_variable];
927 [label="144_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n927-function_definition-145-150", method="claimReward_re_ent32()", type_label=function_definition];
931 [label="145_ require(redeemableEther_re_ent32[msg.sender] > 0);\n931-expression_statement-146-146", method="claimReward_re_ent32()", type_label=expression_statement];
942 [label="146_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n942-new_variable-147-147", method="claimReward_re_ent32()", type_label=new_variable];
952 [label="147_ msg.sender.transfer(transferValue_re_ent32);\n952-expression_statement-148-148", method="claimReward_re_ent32()", type_label=expression_statement];
961 [label="148_ redeemableEther_re_ent32[msg.sender] = 0;\n961-expression_statement-149-149", method="claimReward_re_ent32()", type_label=expression_statement];
969 [label="150_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);	 \n        owner = newOwner;\n        newOwner = address(0);\n    }\n969-function_definition-151-156", method="acceptOwnership()", type_label=function_definition];
973 [label="151_ require(msg.sender == newOwner);\n973-expression_statement-152-152", method="acceptOwnership()", type_label=expression_statement];
988 [label="153_ owner = newOwner;\n988-expression_statement-154-154", method="acceptOwnership()", type_label=expression_statement];
992 [label="154_ newOwner = address(0);\n992-expression_statement-155-155", method="acceptOwnership()", type_label=expression_statement];
998 [label="156_ mapping(address => uint) balances_re_ent38;\n998-new_variable-157-157", method="", type_label=new_variable];
1004 [label="157_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n1004-function_definition-158-162", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
1012 [label="158_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n1012-expression_statement-159-159", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1023 [label="159_ require(msg.sender.send(_weiToWithdraw));\n1023-expression_statement-160-160", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1035 [label="160_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n1035-expression_statement-161-161", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1057 [label="165_ mapping(address => uint) redeemableEther_re_ent11;\n1057-new_variable-166-166", method="", type_label=new_variable];
1063 [label="166_ function claimReward_re_ent11() public {        \n        require(redeemableEther_re_ent11[msg.sender] > 0);\n        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n        msg.sender.transfer(transferValue_re_ent11);    \n        redeemableEther_re_ent11[msg.sender] = 0;\n    }\n1063-function_definition-167-172", method="claimReward_re_ent11()", type_label=function_definition];
1067 [label="167_ require(redeemableEther_re_ent11[msg.sender] > 0);\n1067-expression_statement-168-168", method="claimReward_re_ent11()", type_label=expression_statement];
1078 [label="168_ uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n1078-new_variable-169-169", method="claimReward_re_ent11()", type_label=new_variable];
1088 [label="169_ msg.sender.transfer(transferValue_re_ent11);\n1088-expression_statement-170-170", method="claimReward_re_ent11()", type_label=expression_statement];
1097 [label="170_ redeemableEther_re_ent11[msg.sender] = 0;\n1097-expression_statement-171-171", method="claimReward_re_ent11()", type_label=expression_statement];
1105 [label="172_ string public symbol;\n1105-new_variable-173-173", method="", type_label=new_variable];
1110 [label="173_ mapping(address => uint) balances_re_ent1;\n1110-new_variable-174-174", method="", type_label=new_variable];
1116 [label="174_ function withdraw_balances_re_ent1 () public {\n       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent1[msg.sender] = 0;\n      }\n1116-function_definition-175-179", method="withdraw_balances_re_ent1()", type_label=function_definition];
1120 [label="175_ (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n1120-new_variable-176-176", method="withdraw_balances_re_ent1()", type_label=new_variable];
1144 [label="176_ if\n1144-if-177-178", method="withdraw_balances_re_ent1()", type_label=if];
3380 [label="176_ end_if", method="withdraw_balances_re_ent1()", type_label=end_if];
1146 [label="177_ balances_re_ent1[msg.sender] = 0;\n1146-expression_statement-178-178", method="withdraw_balances_re_ent1()", type_label=expression_statement];
1154 [label="179_ string public  name;\n1154-new_variable-180-180", method="", type_label=new_variable];
1159 [label="180_ bool not_called_re_ent41 = true;\n1159-new_variable-181-181", method="", type_label=new_variable];
1165 [label="181_ function bug_re_ent41() public{\n        require(not_called_re_ent41);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent41 = false;\n    }\n1165-function_definition-182-188", method="bug_re_ent41()", type_label=function_definition];
1169 [label="182_ require(not_called_re_ent41);\n1169-expression_statement-183-183", method="bug_re_ent41()", type_label=expression_statement];
1174 [label="183_ if\n1174-if-184-186", method="bug_re_ent41()", type_label=if];
3410 [label="183_ end_if", method="bug_re_ent41()", type_label=end_if];
1189 [label="186_ not_called_re_ent41 = false;\n1189-expression_statement-187-187", method="bug_re_ent41()", type_label=expression_statement];
1194 [label="188_ uint8 public decimals;\n1194-new_variable-189-189", method="", type_label=new_variable];
1199 [label="189_ uint256 counter_re_ent42 =0;\n1199-new_variable-190-190", method="", type_label=new_variable];
1204 [label="190_ function callme_re_ent42() public{\n        require(counter_re_ent42<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent42 += 1;\n    }\n1204-function_definition-191-197", method="callme_re_ent42()", type_label=function_definition];
1208 [label="191_ require(counter_re_ent42<=5);\n1208-expression_statement-192-192", method="callme_re_ent42()", type_label=expression_statement];
1215 [label="192_ if\n1215-if-193-195", method="callme_re_ent42()", type_label=if];
3451 [label="192_ end_if", method="callme_re_ent42()", type_label=end_if];
1230 [label="195_ counter_re_ent42 += 1;\n1230-expression_statement-196-196", method="callme_re_ent42()", type_label=expression_statement];
1234 [label="197_ uint _totalSupply;\n1234-new_variable-198-198", method="", type_label=new_variable];
1238 [label="198_ mapping(address => uint) balances;\n1238-new_variable-199-199", method="", type_label=new_variable];
1244 [label="199_ address payable lastPlayer_re_ent2;\n1244-new_variable-200-200", method="", type_label=new_variable];
1248 [label="200_ uint jackpot_re_ent2;\n1248-new_variable-201-201", method="", type_label=new_variable];
1252 [label="201_ function buyTicket_re_ent2() public{\n	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))\n        revert();\n      lastPlayer_re_ent2 = msg.sender;\n      jackpot_re_ent2    = address(this).balance;\n    }\n1252-function_definition-202-207", method="buyTicket_re_ent2()", type_label=function_definition];
1256 [label="202_ if\n1256-if-203-204", method="buyTicket_re_ent2()", type_label=if];
3492 [label="202_ end_if", method="buyTicket_re_ent2()", type_label=end_if];
1267 [label="204_ lastPlayer_re_ent2 = msg.sender;\n1267-expression_statement-205-205", method="buyTicket_re_ent2()", type_label=expression_statement];
1273 [label="205_ jackpot_re_ent2    = address(this).balance;\n1273-expression_statement-206-206", method="buyTicket_re_ent2()", type_label=expression_statement];
1281 [label="207_ mapping(address => mapping(address => uint)) allowed;\n1281-new_variable-208-208", method="", type_label=new_variable];
1291 [label="209_ symbol = \"XQC\";\n1291-expression_statement-210-210", method="", type_label=expression_statement];
1296 [label="210_ name = \"Quras Token\";\n1296-expression_statement-211-211", method="", type_label=expression_statement];
1301 [label="211_ decimals = 8;\n1301-expression_statement-212-212", method="", type_label=expression_statement];
1305 [label="212_ _totalSupply = 88888888800000000;\n1305-expression_statement-213-213", method="", type_label=expression_statement];
1309 [label="213_ balances[owner] = _totalSupply;\n1309-expression_statement-214-214", method="", type_label=expression_statement];
1325 [label="216_ mapping(address => uint) redeemableEther_re_ent4;\n1325-new_variable-217-217", method="", type_label=new_variable];
1331 [label="217_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n1331-function_definition-218-223", method="claimReward_re_ent4()", type_label=function_definition];
1335 [label="218_ require(redeemableEther_re_ent4[msg.sender] > 0);\n1335-expression_statement-219-219", method="claimReward_re_ent4()", type_label=expression_statement];
1346 [label="219_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n1346-new_variable-220-220", method="claimReward_re_ent4()", type_label=new_variable];
1356 [label="220_ msg.sender.transfer(transferValue_re_ent4);\n1356-expression_statement-221-221", method="claimReward_re_ent4()", type_label=expression_statement];
1365 [label="221_ redeemableEther_re_ent4[msg.sender] = 0;\n1365-expression_statement-222-222", method="claimReward_re_ent4()", type_label=expression_statement];
1373 [label="223_ function totalSupply() public view returns (uint) {		 \n        return _totalSupply.sub(balances[address(0)]);\n    }\n1373-function_definition-224-226", method="totalSupply()", type_label=function_definition];
1382 [label="224_ return _totalSupply.sub(balances[address(0)]);\n1382-return-225-225", method="totalSupply()", type_label=return];
1393 [label="226_ uint256 counter_re_ent7 =0;\n1393-new_variable-227-227", method="", type_label=new_variable];
1398 [label="227_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n1398-function_definition-228-234", method="callme_re_ent7()", type_label=function_definition];
1402 [label="228_ require(counter_re_ent7<=5);\n1402-expression_statement-229-229", method="callme_re_ent7()", type_label=expression_statement];
1409 [label="229_ if\n1409-if-230-232", method="callme_re_ent7()", type_label=if];
3645 [label="229_ end_if", method="callme_re_ent7()", type_label=end_if];
1424 [label="232_ counter_re_ent7 += 1;\n1424-expression_statement-233-233", method="callme_re_ent7()", type_label=expression_statement];
1428 [label="234_ function balanceOf(address tokenOwner) public view returns (uint balance) {		 \n        return balances[tokenOwner];\n    }\n1428-function_definition-235-237", method="balanceOf(address tokenOwner)", type_label=function_definition];
1442 [label="235_ return balances[tokenOwner];\n1442-return-236-236", method="balanceOf(address tokenOwner)", type_label=return];
1446 [label="237_ address payable lastPlayer_re_ent23;\n1446-new_variable-238-238", method="", type_label=new_variable];
1450 [label="238_ uint jackpot_re_ent23;\n1450-new_variable-239-239", method="", type_label=new_variable];
1454 [label="239_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n1454-function_definition-240-245", method="buyTicket_re_ent23()", type_label=function_definition];
1458 [label="240_ if\n1458-if-241-242", method="buyTicket_re_ent23()", type_label=if];
3694 [label="240_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
1469 [label="242_ lastPlayer_re_ent23 = msg.sender;\n1469-expression_statement-243-243", method="buyTicket_re_ent23()", type_label=expression_statement];
1475 [label="243_ jackpot_re_ent23    = address(this).balance;\n1475-expression_statement-244-244", method="buyTicket_re_ent23()", type_label=expression_statement];
1483 [label="245_ function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);		 \n        return true;\n    }\n1483-function_definition-246-251", method="transfer(address to,uint tokens)", type_label=function_definition];
1500 [label="246_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n1500-expression_statement-247-247", method="transfer(address to,uint tokens)", type_label=expression_statement];
1517 [label="247_ balances[to] = balances[to].add(tokens);\n1517-expression_statement-248-248", method="transfer(address to,uint tokens)", type_label=expression_statement];
1540 [label="249_ return true;\n1540-return-250-250", method="transfer(address to,uint tokens)", type_label=return];
1543 [label="251_ uint256 counter_re_ent14 =0;\n1543-new_variable-252-252", method="", type_label=new_variable];
1548 [label="252_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n1548-function_definition-253-259", method="callme_re_ent14()", type_label=function_definition];
1552 [label="253_ require(counter_re_ent14<=5);\n1552-expression_statement-254-254", method="callme_re_ent14()", type_label=expression_statement];
1559 [label="254_ if\n1559-if-255-257", method="callme_re_ent14()", type_label=if];
3795 [label="254_ end_if", method="callme_re_ent14()", type_label=end_if];
1574 [label="257_ counter_re_ent14 += 1;\n1574-expression_statement-258-258", method="callme_re_ent14()", type_label=expression_statement];
1578 [label="259_ function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n1578-function_definition-260-264", method="increaseApproval(address _spender,uint _addedValue)", type_label=function_definition];
1594 [label="260_ allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n1594-expression_statement-261-261", method="increaseApproval(address _spender,uint _addedValue)", type_label=expression_statement];
1631 [label="262_ return true;\n1631-return-263-263", method="increaseApproval(address _spender,uint _addedValue)", type_label=return];
1634 [label="264_ address payable lastPlayer_re_ent30;\n1634-new_variable-265-265", method="", type_label=new_variable];
1638 [label="265_ uint jackpot_re_ent30;\n1638-new_variable-266-266", method="", type_label=new_variable];
1642 [label="266_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n1642-function_definition-267-272", method="buyTicket_re_ent30()", type_label=function_definition];
1646 [label="267_ if\n1646-if-268-269", method="buyTicket_re_ent30()", type_label=if];
3882 [label="267_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
1657 [label="269_ lastPlayer_re_ent30 = msg.sender;\n1657-expression_statement-270-270", method="buyTicket_re_ent30()", type_label=expression_statement];
1663 [label="270_ jackpot_re_ent30    = address(this).balance;\n1663-expression_statement-271-271", method="buyTicket_re_ent30()", type_label=expression_statement];
1671 [label="272_ function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n1671-function_definition-273-282", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=function_definition];
1687 [label="273_ uint oldValue = allowed[msg.sender][_spender];\n1687-new_variable-274-274", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=new_variable];
1699 [label="274_ if__subtractedValue > oldValue\n1699-if-275-279", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=if];
3935 [label="274_ end_if", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=end_if];
1704 [label="275_ allowed[msg.sender][_spender] = 0;\n1704-expression_statement-276-276", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=expression_statement];
1715 [label="277_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n1715-expression_statement-278-278", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=expression_statement];
1746 [label="280_ return true;\n1746-return-281-281", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=return];
1749 [label="282_ mapping(address => uint) balances_re_ent8;\n1749-new_variable-283-283", method="", type_label=new_variable];
1755 [label="283_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n1755-function_definition-284-288", method="withdraw_balances_re_ent8()", type_label=function_definition];
1759 [label="284_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n1759-new_variable-285-285", method="withdraw_balances_re_ent8()", type_label=new_variable];
1783 [label="285_ if\n1783-if-286-287", method="withdraw_balances_re_ent8()", type_label=if];
4019 [label="285_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
1785 [label="286_ balances_re_ent8[msg.sender] = 0;\n1785-expression_statement-287-287", method="withdraw_balances_re_ent8()", type_label=expression_statement];
1793 [label="288_ function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);		 \n        return true;\n    }\n1793-function_definition-289-293", method="approve(address spender,uint tokens)", type_label=function_definition];
1810 [label="289_ allowed[msg.sender][spender] = tokens;\n1810-expression_statement-290-290", method="approve(address spender,uint tokens)", type_label=expression_statement];
1830 [label="291_ return true;\n1830-return-292-292", method="approve(address spender,uint tokens)", type_label=return];
1833 [label="293_ mapping(address => uint) redeemableEther_re_ent39;\n1833-new_variable-294-294", method="", type_label=new_variable];
1839 [label="294_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n1839-function_definition-295-300", method="claimReward_re_ent39()", type_label=function_definition];
1843 [label="295_ require(redeemableEther_re_ent39[msg.sender] > 0);\n1843-expression_statement-296-296", method="claimReward_re_ent39()", type_label=expression_statement];
1854 [label="296_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n1854-new_variable-297-297", method="claimReward_re_ent39()", type_label=new_variable];
1864 [label="297_ msg.sender.transfer(transferValue_re_ent39);\n1864-expression_statement-298-298", method="claimReward_re_ent39()", type_label=expression_statement];
1873 [label="298_ redeemableEther_re_ent39[msg.sender] = 0;\n1873-expression_statement-299-299", method="claimReward_re_ent39()", type_label=expression_statement];
1881 [label="300_ function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);		 \n        return true;\n    }\n1881-function_definition-301-307", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
1902 [label="301_ balances[from] = balances[from].sub(tokens);\n1902-expression_statement-302-302", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1915 [label="302_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n1915-expression_statement-303-303", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1936 [label="303_ balances[to] = balances[to].add(tokens);\n1936-expression_statement-304-304", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1957 [label="305_ return true;\n1957-return-306-306", method="transferFrom(address from,address to,uint tokens)", type_label=return];
1960 [label="307_ mapping(address => uint) balances_re_ent36;\n1960-new_variable-308-308", method="", type_label=new_variable];
1966 [label="308_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n1966-function_definition-309-312", method="withdraw_balances_re_ent36()", type_label=function_definition];
1970 [label="309_ if\n1970-if-310-311", method="withdraw_balances_re_ent36()", type_label=if];
4206 [label="309_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
1983 [label="310_ balances_re_ent36[msg.sender] = 0;\n1983-expression_statement-311-311", method="withdraw_balances_re_ent36()", type_label=expression_statement];
1991 [label="312_ function allowance(address tokenOwner, address spender) public view returns (uint remaining) {		 \n        return allowed[tokenOwner][spender];\n    }\n1991-function_definition-313-315", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
2009 [label="313_ return allowed[tokenOwner][spender];\n2009-return-314-314", method="allowance(address tokenOwner,address spender)", type_label=return];
2015 [label="315_ uint256 counter_re_ent35 =0;\n2015-new_variable-316-316", method="", type_label=new_variable];
2020 [label="316_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n2020-function_definition-317-323", method="callme_re_ent35()", type_label=function_definition];
2024 [label="317_ require(counter_re_ent35<=5);\n2024-expression_statement-318-318", method="callme_re_ent35()", type_label=expression_statement];
2031 [label="318_ if\n2031-if-319-321", method="callme_re_ent35()", type_label=if];
4267 [label="318_ end_if", method="callme_re_ent35()", type_label=end_if];
2046 [label="321_ counter_re_ent35 += 1;\n2046-expression_statement-322-322", method="callme_re_ent35()", type_label=expression_statement];
2050 [label="323_ function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);		 \n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n2050-function_definition-324-329", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=function_definition];
2071 [label="324_ allowed[msg.sender][spender] = tokens;\n2071-expression_statement-325-325", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
2091 [label="326_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n2091-expression_statement-327-327", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
2111 [label="327_ return true;\n2111-return-328-328", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=return];
2114 [label="329_ mapping(address => uint) userBalance_re_ent40;\n2114-new_variable-330-330", method="", type_label=new_variable];
2120 [label="330_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n2120-function_definition-331-337", method="withdrawBalance_re_ent40()", type_label=function_definition];
2124 [label="331_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n2124-new_variable-332-332", method="withdrawBalance_re_ent40()", type_label=new_variable];
2148 [label="332_ if\n2148-if-333-335", method="withdrawBalance_re_ent40()", type_label=if];
4384 [label="332_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
2154 [label="335_ userBalance_re_ent40[msg.sender] = 0;\n2154-expression_statement-336-336", method="withdrawBalance_re_ent40()", type_label=expression_statement];
2162 [label="337_ function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n2162-function_definition-338-340", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=function_definition];
2173 [label="337_ onlyOwner\n2173-expression_statement-338-338", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=expression_statement];
2181 [label="338_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n2181-return-339-339", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=return];
2193 [label="340_ mapping(address => uint) userBalance_re_ent33;\n2193-new_variable-341-341", method="", type_label=new_variable];
2199 [label="341_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n2199-function_definition-342-348", method="withdrawBalance_re_ent33()", type_label=function_definition];
2203 [label="342_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n2203-new_variable-343-343", method="withdrawBalance_re_ent33()", type_label=new_variable];
2227 [label="343_ if\n2227-if-344-346", method="withdrawBalance_re_ent33()", type_label=if];
4463 [label="343_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
2233 [label="346_ userBalance_re_ent33[msg.sender] = 0;\n2233-expression_statement-347-347", method="withdrawBalance_re_ent33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1730;
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
237 -> 2473  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
248 -> 254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
285 -> 293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
293 -> 304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
324 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
383 -> 2619  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
388 -> 394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
492 -> 496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
496 -> 2732  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
528 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
532 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 2773  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
577 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
662 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
686 -> 2922  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
709 -> 713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
713 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 739  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
737 -> 2973  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2973 -> 747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
739 -> 2973  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
747 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
762 -> 2998  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
788 -> 793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
829 -> 3065  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
864 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
873 -> 3109  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
896 -> 905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
907 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
927 -> 931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
931 -> 942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
942 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
952 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
969 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
988 -> 992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 1012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1012 -> 1023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1023 -> 1035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1067 -> 1078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1078 -> 1088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1088 -> 1097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1105 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1116 -> 1120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1120 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 1146  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1144 -> 3380  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3380 -> 1154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1146 -> 3380  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1154 -> 1159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 1169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1169 -> 1174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1174 -> 3410  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1194 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1204 -> 1208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1208 -> 1215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1215 -> 3451  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1234 -> 1238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1238 -> 1244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1244 -> 1248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1252 -> 1256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 3492  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1267 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1291 -> 1296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1296 -> 1301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1301 -> 1305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1305 -> 1309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 1335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1335 -> 1346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1346 -> 1356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1356 -> 1365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1373 -> 1382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1382 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1398 -> 1402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1402 -> 1409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1409 -> 3645  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1428 -> 1442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1442 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1446 -> 1450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1454 -> 1458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1458 -> 3694  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1469 -> 1475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1483 -> 1500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1500 -> 1517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1540 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1548 -> 1552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1552 -> 1559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1559 -> 3795  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1578 -> 1594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1631 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1634 -> 1638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1642 -> 1646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1646 -> 3882  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1657 -> 1663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1671 -> 1687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1687 -> 1699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1699 -> 1704  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1699 -> 1715  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3935 -> 1730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1704 -> 3935  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1715 -> 3935  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1746 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1755 -> 1759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1759 -> 1783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1783 -> 1785  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1783 -> 4019  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4019 -> 1793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1785 -> 4019  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1793 -> 1810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1830 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1839 -> 1843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1843 -> 1854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1854 -> 1864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1864 -> 1873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1881 -> 1902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1902 -> 1915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1915 -> 1936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1957 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1966 -> 1970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1970 -> 1983  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1970 -> 4206  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4206 -> 1991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1983 -> 4206  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1991 -> 2009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2009 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2020 -> 2024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2024 -> 2031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2031 -> 4267  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2050 -> 2071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2091 -> 2111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2111 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2120 -> 2124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2124 -> 2148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2148 -> 4384  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2162 -> 2181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2181 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2199 -> 2203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2203 -> 2227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2227 -> 4463  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
