digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n50-function_definition-8-12", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ require(b <= a, \"SafeMath: subtraction overflow\");\n67-expression_statement-9-9", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
77 [label="9_ uint256 c = a - b;\n77-new_variable-10-10", method="sub(uint256 a,uint256 b)", type_label=new_variable];
85 [label="10_ return c;\n85-return-11-11", method="sub(uint256 a,uint256 b)", type_label=return];
87 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n87-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
104 [label="13_ if_a == 0\n104-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
2128 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
109 [label="14_ return 0;\n109-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
111 [label="16_ uint256 c = a * b;\n111-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
119 [label="17_ require(c / a == b, \"SafeMath: multiplication overflow\");\n119-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
131 [label="18_ return c;\n131-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
133 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n133-function_definition-21-25", method="div(uint256 a,uint256 b)", type_label=function_definition];
150 [label="21_ require(b > 0, \"SafeMath: division by zero\");\n150-expression_statement-22-22", method="div(uint256 a,uint256 b)", type_label=expression_statement];
160 [label="22_ uint256 c = a / b;\n160-new_variable-23-23", method="div(uint256 a,uint256 b)", type_label=new_variable];
168 [label="23_ return c;\n168-return-24-24", method="div(uint256 a,uint256 b)", type_label=return];
170 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n170-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
187 [label="26_ require(b != 0, \"SafeMath: modulo by zero\");\n187-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
197 [label="27_ return a % b;\n197-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
204 [label="31_ function totalSupply() external view returns (uint256);\n204-function_definition-32-32", method="totalSupply()", type_label=function_definition];
212 [label="32_ function balanceOf(address account) external view returns (uint256);\n212-function_definition-33-33", method="balanceOf(address account)", type_label=function_definition];
224 [label="33_ function transfer(address recipient, uint256 amount) external returns (bool);\n224-function_definition-34-34", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
239 [label="34_ function allowance(address owner, address spender) external view returns (uint256);\n239-function_definition-35-35", method="allowance(address owner,address spender)", type_label=function_definition];
255 [label="35_ function approve(address spender, uint256 amount) external returns (bool);\n255-function_definition-36-36", method="approve(address spender,uint256 amount)", type_label=function_definition];
270 [label="36_ function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n270-function_definition-37-37", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
328 [label="42_ mapping(address => uint) balances_re_ent17;\n328-new_variable-43-43", method="", type_label=new_variable];
334 [label="43_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n334-function_definition-44-49", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
342 [label="44_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n342-expression_statement-45-45", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
353 [label="45_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n353-new_variable-46-46", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
373 [label="46_ require(success);\n373-expression_statement-47-47", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
378 [label="47_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n378-expression_statement-48-48", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
386 [label="49_ mapping (address => uint256) private _balances;\n386-new_variable-50-50", method="", type_label=new_variable];
393 [label="50_ address payable lastPlayer_re_ent37;\n393-new_variable-51-51", method="", type_label=new_variable];
397 [label="51_ uint jackpot_re_ent37;\n397-new_variable-52-52", method="", type_label=new_variable];
401 [label="52_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n401-function_definition-53-58", method="buyTicket_re_ent37()", type_label=function_definition];
405 [label="53_ if\n405-if-54-55", method="buyTicket_re_ent37()", type_label=if];
2429 [label="53_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
416 [label="55_ lastPlayer_re_ent37 = msg.sender;\n416-expression_statement-56-56", method="buyTicket_re_ent37()", type_label=expression_statement];
422 [label="56_ jackpot_re_ent37    = address(this).balance;\n422-expression_statement-57-57", method="buyTicket_re_ent37()", type_label=expression_statement];
430 [label="58_ mapping (address => mapping (address => uint256)) private _allowances;\n430-new_variable-59-59", method="", type_label=new_variable];
439 [label="59_ mapping(address => uint) balances_re_ent3;\n439-new_variable-60-60", method="", type_label=new_variable];
445 [label="60_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n445-function_definition-61-66", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
453 [label="61_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n453-expression_statement-62-62", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
464 [label="62_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n464-new_variable-63-63", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
484 [label="63_ require(success);\n484-expression_statement-64-64", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
489 [label="64_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n489-expression_statement-65-65", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
497 [label="66_ uint256 private _totalSupply;\n497-new_variable-67-67", method="", type_label=new_variable];
502 [label="67_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n502-function_definition-68-70", method="totalSupply()", type_label=function_definition];
511 [label="68_ return _totalSupply;\n511-return-69-69", method="totalSupply()", type_label=return];
513 [label="70_ mapping(address => uint) userBalance_re_ent26;\n513-new_variable-71-71", method="", type_label=new_variable];
519 [label="71_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n519-function_definition-72-78", method="withdrawBalance_re_ent26()", type_label=function_definition];
523 [label="72_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n523-new_variable-73-73", method="withdrawBalance_re_ent26()", type_label=new_variable];
547 [label="73_ if\n547-if-74-76", method="withdrawBalance_re_ent26()", type_label=if];
2571 [label="73_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
553 [label="76_ userBalance_re_ent26[msg.sender] = 0;\n553-expression_statement-77-77", method="withdrawBalance_re_ent26()", type_label=expression_statement];
561 [label="78_ function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n561-function_definition-79-81", method="balanceOf(address account)", type_label=function_definition];
574 [label="79_ return _balances[account];\n574-return-80-80", method="balanceOf(address account)", type_label=return];
578 [label="81_ bool not_called_re_ent20 = true;\n578-new_variable-82-82", method="", type_label=new_variable];
584 [label="82_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n584-function_definition-83-89", method="bug_re_ent20()", type_label=function_definition];
588 [label="83_ require(not_called_re_ent20);\n588-expression_statement-84-84", method="bug_re_ent20()", type_label=expression_statement];
593 [label="84_ if\n593-if-85-87", method="bug_re_ent20()", type_label=if];
2617 [label="84_ end_if", method="bug_re_ent20()", type_label=end_if];
608 [label="87_ not_called_re_ent20 = false;\n608-expression_statement-88-88", method="bug_re_ent20()", type_label=expression_statement];
613 [label="89_ function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n613-function_definition-90-93", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
629 [label="90_ _transfer(msg.sender, recipient, amount);\n629-expression_statement-91-91", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
640 [label="91_ return true;\n640-return-92-92", method="transfer(address recipient,uint256 amount)", type_label=return];
643 [label="93_ mapping(address => uint) redeemableEther_re_ent32;\n643-new_variable-94-94", method="", type_label=new_variable];
649 [label="94_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n649-function_definition-95-100", method="claimReward_re_ent32()", type_label=function_definition];
653 [label="95_ require(redeemableEther_re_ent32[msg.sender] > 0);\n653-expression_statement-96-96", method="claimReward_re_ent32()", type_label=expression_statement];
664 [label="96_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n664-new_variable-97-97", method="claimReward_re_ent32()", type_label=new_variable];
674 [label="97_ msg.sender.transfer(transferValue_re_ent32);\n674-expression_statement-98-98", method="claimReward_re_ent32()", type_label=expression_statement];
683 [label="98_ redeemableEther_re_ent32[msg.sender] = 0;\n683-expression_statement-99-99", method="claimReward_re_ent32()", type_label=expression_statement];
691 [label="100_ function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n691-function_definition-101-103", method="allowance(address owner,address spender)", type_label=function_definition];
708 [label="101_ return _allowances[owner][spender];\n708-return-102-102", method="allowance(address owner,address spender)", type_label=return];
714 [label="103_ mapping(address => uint) balances_re_ent38;\n714-new_variable-104-104", method="", type_label=new_variable];
720 [label="104_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n720-function_definition-105-109", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
728 [label="105_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n728-expression_statement-106-106", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
739 [label="106_ require(msg.sender.send(_weiToWithdraw));\n739-expression_statement-107-107", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
751 [label="107_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n751-expression_statement-108-108", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
759 [label="109_ function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n759-function_definition-110-113", method="approve(address spender,uint256 value)", type_label=function_definition];
775 [label="110_ _approve(msg.sender, spender, value);\n775-expression_statement-111-111", method="approve(address spender,uint256 value)", type_label=expression_statement];
786 [label="111_ return true;\n786-return-112-112", method="approve(address spender,uint256 value)", type_label=return];
789 [label="113_ mapping(address => uint) redeemableEther_re_ent4;\n789-new_variable-114-114", method="", type_label=new_variable];
795 [label="114_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n795-function_definition-115-120", method="claimReward_re_ent4()", type_label=function_definition];
799 [label="115_ require(redeemableEther_re_ent4[msg.sender] > 0);\n799-expression_statement-116-116", method="claimReward_re_ent4()", type_label=expression_statement];
810 [label="116_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n810-new_variable-117-117", method="claimReward_re_ent4()", type_label=new_variable];
820 [label="117_ msg.sender.transfer(transferValue_re_ent4);\n820-expression_statement-118-118", method="claimReward_re_ent4()", type_label=expression_statement];
829 [label="118_ redeemableEther_re_ent4[msg.sender] = 0;\n829-expression_statement-119-119", method="claimReward_re_ent4()", type_label=expression_statement];
837 [label="120_ function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n837-function_definition-121-125", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
857 [label="121_ _transfer(sender, recipient, amount);\n857-expression_statement-122-122", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
866 [label="122_ _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n866-expression_statement-123-123", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
888 [label="123_ return true;\n888-return-124-124", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=return];
891 [label="125_ uint256 counter_re_ent7 =0;\n891-new_variable-126-126", method="", type_label=new_variable];
896 [label="126_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n896-function_definition-127-133", method="callme_re_ent7()", type_label=function_definition];
900 [label="127_ require(counter_re_ent7<=5);\n900-expression_statement-128-128", method="callme_re_ent7()", type_label=expression_statement];
907 [label="128_ if\n907-if-129-131", method="callme_re_ent7()", type_label=if];
2931 [label="128_ end_if", method="callme_re_ent7()", type_label=end_if];
922 [label="131_ counter_re_ent7 += 1;\n922-expression_statement-132-132", method="callme_re_ent7()", type_label=expression_statement];
926 [label="133_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n926-function_definition-134-137", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
942 [label="134_ _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n942-expression_statement-135-135", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
964 [label="135_ return true;\n964-return-136-136", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
967 [label="137_ address payable lastPlayer_re_ent23;\n967-new_variable-138-138", method="", type_label=new_variable];
971 [label="138_ uint jackpot_re_ent23;\n971-new_variable-139-139", method="", type_label=new_variable];
975 [label="139_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n975-function_definition-140-145", method="buyTicket_re_ent23()", type_label=function_definition];
979 [label="140_ if\n979-if-141-142", method="buyTicket_re_ent23()", type_label=if];
3003 [label="140_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
990 [label="142_ lastPlayer_re_ent23 = msg.sender;\n990-expression_statement-143-143", method="buyTicket_re_ent23()", type_label=expression_statement];
996 [label="143_ jackpot_re_ent23    = address(this).balance;\n996-expression_statement-144-144", method="buyTicket_re_ent23()", type_label=expression_statement];
1004 [label="145_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n1004-function_definition-146-149", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
1020 [label="146_ _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n1020-expression_statement-147-147", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
1042 [label="147_ return true;\n1042-return-148-148", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
1045 [label="149_ uint256 counter_re_ent14 =0;\n1045-new_variable-150-150", method="", type_label=new_variable];
1050 [label="150_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n1050-function_definition-151-157", method="callme_re_ent14()", type_label=function_definition];
1054 [label="151_ require(counter_re_ent14<=5);\n1054-expression_statement-152-152", method="callme_re_ent14()", type_label=expression_statement];
1061 [label="152_ if\n1061-if-153-155", method="callme_re_ent14()", type_label=if];
3085 [label="152_ end_if", method="callme_re_ent14()", type_label=end_if];
1076 [label="155_ counter_re_ent14 += 1;\n1076-expression_statement-156-156", method="callme_re_ent14()", type_label=expression_statement];
1080 [label="157_ function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n1080-function_definition-158-164", method="_transfer(address sender,address recipient,uint256 amount)", type_label=function_definition];
1096 [label="158_ require(sender != address(0), \"ERC20: transfer from the zero address\");\n1096-expression_statement-159-159", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1108 [label="159_ require(recipient != address(0), \"ERC20: transfer to the zero address\");\n1108-expression_statement-160-160", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1120 [label="160_ _balances[sender] = _balances[sender].sub(amount);\n1120-expression_statement-161-161", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1133 [label="161_ _balances[recipient] = _balances[recipient].add(amount);\n1133-expression_statement-162-162", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1154 [label="164_ address payable lastPlayer_re_ent30;\n1154-new_variable-165-165", method="", type_label=new_variable];
1158 [label="165_ uint jackpot_re_ent30;\n1158-new_variable-166-166", method="", type_label=new_variable];
1162 [label="166_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n1162-function_definition-167-172", method="buyTicket_re_ent30()", type_label=function_definition];
1166 [label="167_ if\n1166-if-168-169", method="buyTicket_re_ent30()", type_label=if];
3190 [label="167_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
1177 [label="169_ lastPlayer_re_ent30 = msg.sender;\n1177-expression_statement-170-170", method="buyTicket_re_ent30()", type_label=expression_statement];
1183 [label="170_ jackpot_re_ent30    = address(this).balance;\n1183-expression_statement-171-171", method="buyTicket_re_ent30()", type_label=expression_statement];
1191 [label="172_ function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n1191-function_definition-173-178", method="_mint(address account,uint256 amount)", type_label=function_definition];
1203 [label="173_ require(account != address(0), \"ERC20: mint to the zero address\");\n1203-expression_statement-174-174", method="_mint(address account,uint256 amount)", type_label=expression_statement];
1215 [label="174_ _totalSupply = _totalSupply.add(amount);\n1215-expression_statement-175-175", method="_mint(address account,uint256 amount)", type_label=expression_statement];
1224 [label="175_ _balances[account] = _balances[account].add(amount);\n1224-expression_statement-176-176", method="_mint(address account,uint256 amount)", type_label=expression_statement];
1247 [label="178_ mapping(address => uint) balances_re_ent8;\n1247-new_variable-179-179", method="", type_label=new_variable];
1253 [label="179_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n1253-function_definition-180-184", method="withdraw_balances_re_ent8()", type_label=function_definition];
1257 [label="180_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n1257-new_variable-181-181", method="withdraw_balances_re_ent8()", type_label=new_variable];
1281 [label="181_ if\n1281-if-182-183", method="withdraw_balances_re_ent8()", type_label=if];
3305 [label="181_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
1283 [label="182_ balances_re_ent8[msg.sender] = 0;\n1283-expression_statement-183-183", method="withdraw_balances_re_ent8()", type_label=expression_statement];
1291 [label="184_ function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n1291-function_definition-185-190", method="_burn(address account,uint256 value)", type_label=function_definition];
1303 [label="185_ require(account != address(0), \"ERC20: burn from the zero address\");\n1303-expression_statement-186-186", method="_burn(address account,uint256 value)", type_label=expression_statement];
1315 [label="186_ _totalSupply = _totalSupply.sub(value);\n1315-expression_statement-187-187", method="_burn(address account,uint256 value)", type_label=expression_statement];
1324 [label="187_ _balances[account] = _balances[account].sub(value);\n1324-expression_statement-188-188", method="_burn(address account,uint256 value)", type_label=expression_statement];
1347 [label="190_ mapping(address => uint) redeemableEther_re_ent39;\n1347-new_variable-191-191", method="", type_label=new_variable];
1353 [label="191_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n1353-function_definition-192-197", method="claimReward_re_ent39()", type_label=function_definition];
1357 [label="192_ require(redeemableEther_re_ent39[msg.sender] > 0);\n1357-expression_statement-193-193", method="claimReward_re_ent39()", type_label=expression_statement];
1368 [label="193_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n1368-new_variable-194-194", method="claimReward_re_ent39()", type_label=new_variable];
1378 [label="194_ msg.sender.transfer(transferValue_re_ent39);\n1378-expression_statement-195-195", method="claimReward_re_ent39()", type_label=expression_statement];
1387 [label="195_ redeemableEther_re_ent39[msg.sender] = 0;\n1387-expression_statement-196-196", method="claimReward_re_ent39()", type_label=expression_statement];
1395 [label="197_ function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n1395-function_definition-198-203", method="_approve(address owner,address spender,uint256 value)", type_label=function_definition];
1411 [label="198_ require(owner != address(0), \"ERC20: approve from the zero address\");\n1411-expression_statement-199-199", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1423 [label="199_ require(spender != address(0), \"ERC20: approve to the zero address\");\n1423-expression_statement-200-200", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1435 [label="200_ _allowances[owner][spender] = value;\n1435-expression_statement-201-201", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1451 [label="203_ mapping(address => uint) balances_re_ent36;\n1451-new_variable-204-204", method="", type_label=new_variable];
1457 [label="204_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n1457-function_definition-205-208", method="withdraw_balances_re_ent36()", type_label=function_definition];
1461 [label="205_ if\n1461-if-206-207", method="withdraw_balances_re_ent36()", type_label=if];
3485 [label="205_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
1474 [label="206_ balances_re_ent36[msg.sender] = 0;\n1474-expression_statement-207-207", method="withdraw_balances_re_ent36()", type_label=expression_statement];
1482 [label="208_ function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n1482-function_definition-209-212", method="_burnFrom(address account,uint256 amount)", type_label=function_definition];
1494 [label="209_ _burn(account, amount);\n1494-expression_statement-210-210", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
1501 [label="210_ _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n1501-expression_statement-211-211", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
1523 [label="212_ uint256 counter_re_ent35 =0;\n1523-new_variable-213-213", method="", type_label=new_variable];
1528 [label="213_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n1528-function_definition-214-220", method="callme_re_ent35()", type_label=function_definition];
1532 [label="214_ require(counter_re_ent35<=5);\n1532-expression_statement-215-215", method="callme_re_ent35()", type_label=expression_statement];
1539 [label="215_ if\n1539-if-216-218", method="callme_re_ent35()", type_label=if];
3563 [label="215_ end_if", method="callme_re_ent35()", type_label=end_if];
1554 [label="218_ counter_re_ent35 += 1;\n1554-expression_statement-219-219", method="callme_re_ent35()", type_label=expression_statement];
1564 [label="222_ address payable lastPlayer_re_ent9;\n1564-new_variable-223-223", method="", type_label=new_variable];
1568 [label="223_ uint jackpot_re_ent9;\n1568-new_variable-224-224", method="", type_label=new_variable];
1572 [label="224_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n1572-function_definition-225-231", method="buyTicket_re_ent9()", type_label=function_definition];
1576 [label="225_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n1576-new_variable-226-226", method="buyTicket_re_ent9()", type_label=new_variable];
1594 [label="226_ if\n1594-if-227-228", method="buyTicket_re_ent9()", type_label=if];
3618 [label="226_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
1599 [label="228_ lastPlayer_re_ent9 = msg.sender;\n1599-expression_statement-229-229", method="buyTicket_re_ent9()", type_label=expression_statement];
1605 [label="229_ jackpot_re_ent9    = address(this).balance;\n1605-expression_statement-230-230", method="buyTicket_re_ent9()", type_label=expression_statement];
1613 [label="231_ string private _name;\n1613-new_variable-232-232", method="", type_label=new_variable];
1618 [label="232_ mapping(address => uint) redeemableEther_re_ent25;\n1618-new_variable-233-233", method="", type_label=new_variable];
1624 [label="233_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n1624-function_definition-234-239", method="claimReward_re_ent25()", type_label=function_definition];
1628 [label="234_ require(redeemableEther_re_ent25[msg.sender] > 0);\n1628-expression_statement-235-235", method="claimReward_re_ent25()", type_label=expression_statement];
1639 [label="235_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n1639-new_variable-236-236", method="claimReward_re_ent25()", type_label=new_variable];
1649 [label="236_ msg.sender.transfer(transferValue_re_ent25);\n1649-expression_statement-237-237", method="claimReward_re_ent25()", type_label=expression_statement];
1658 [label="237_ redeemableEther_re_ent25[msg.sender] = 0;\n1658-expression_statement-238-238", method="claimReward_re_ent25()", type_label=expression_statement];
1666 [label="239_ string private _symbol;\n1666-new_variable-240-240", method="", type_label=new_variable];
1671 [label="240_ mapping(address => uint) userBalance_re_ent19;\n1671-new_variable-241-241", method="", type_label=new_variable];
1677 [label="241_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n1677-function_definition-242-247", method="withdrawBalance_re_ent19()", type_label=function_definition];
1681 [label="242_ if\n1681-if-243-245", method="withdrawBalance_re_ent19()", type_label=if];
3705 [label="242_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
1699 [label="245_ userBalance_re_ent19[msg.sender] = 0;\n1699-expression_statement-246-246", method="withdrawBalance_re_ent19()", type_label=expression_statement];
1707 [label="247_ uint8 private _decimals;\n1707-new_variable-248-248", method="", type_label=new_variable];
1726 [label="249_ _name = name;\n1726-expression_statement-250-250", method="", type_label=expression_statement];
1730 [label="250_ _symbol = symbol;\n1730-expression_statement-251-251", method="", type_label=expression_statement];
1734 [label="251_ _decimals = decimals;\n1734-expression_statement-252-252", method="", type_label=expression_statement];
1738 [label="253_ mapping(address => uint) userBalance_re_ent40;\n1738-new_variable-254-254", method="", type_label=new_variable];
1744 [label="254_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n1744-function_definition-255-261", method="withdrawBalance_re_ent40()", type_label=function_definition];
1748 [label="255_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n1748-new_variable-256-256", method="withdrawBalance_re_ent40()", type_label=new_variable];
1772 [label="256_ if\n1772-if-257-259", method="withdrawBalance_re_ent40()", type_label=if];
3796 [label="256_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
1778 [label="259_ userBalance_re_ent40[msg.sender] = 0;\n1778-expression_statement-260-260", method="withdrawBalance_re_ent40()", type_label=expression_statement];
1786 [label="261_ function name() public view returns (string memory) {\n        return _name;\n    }\n1786-function_definition-262-264", method="name()", type_label=function_definition];
1795 [label="262_ return _name;\n1795-return-263-263", method="name()", type_label=return];
1797 [label="264_ mapping(address => uint) userBalance_re_ent33;\n1797-new_variable-265-265", method="", type_label=new_variable];
1803 [label="265_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n1803-function_definition-266-272", method="withdrawBalance_re_ent33()", type_label=function_definition];
1807 [label="266_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n1807-new_variable-267-267", method="withdrawBalance_re_ent33()", type_label=new_variable];
1831 [label="267_ if\n1831-if-268-270", method="withdrawBalance_re_ent33()", type_label=if];
3855 [label="267_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
1837 [label="270_ userBalance_re_ent33[msg.sender] = 0;\n1837-expression_statement-271-271", method="withdrawBalance_re_ent33()", type_label=expression_statement];
1845 [label="272_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n1845-function_definition-273-275", method="symbol()", type_label=function_definition];
1854 [label="273_ return _symbol;\n1854-return-274-274", method="symbol()", type_label=return];
1856 [label="275_ bool not_called_re_ent27 = true;\n1856-new_variable-276-276", method="", type_label=new_variable];
1862 [label="276_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n1862-function_definition-277-283", method="bug_re_ent27()", type_label=function_definition];
1866 [label="277_ require(not_called_re_ent27);\n1866-expression_statement-278-278", method="bug_re_ent27()", type_label=expression_statement];
1871 [label="278_ if\n1871-if-279-281", method="bug_re_ent27()", type_label=if];
3895 [label="278_ end_if", method="bug_re_ent27()", type_label=end_if];
1886 [label="281_ not_called_re_ent27 = false;\n1886-expression_statement-282-282", method="bug_re_ent27()", type_label=expression_statement];
1891 [label="283_ function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n1891-function_definition-284-286", method="decimals()", type_label=function_definition];
1900 [label="284_ return _decimals;\n1900-return-285-285", method="decimals()", type_label=return];
1902 [label="286_ mapping(address => uint) balances_re_ent31;\n1902-new_variable-287-287", method="", type_label=new_variable];
1908 [label="287_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n1908-function_definition-288-292", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
1916 [label="288_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n1916-expression_statement-289-289", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1927 [label="289_ require(msg.sender.send(_weiToWithdraw));\n1927-expression_statement-290-290", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1939 [label="290_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n1939-expression_statement-291-291", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1957 [label="294_ ERC20Detailed(\"SimpleSwap Coin\", \"SWAP\", 8)\n1957-expression_statement-295-295", method="", type_label=expression_statement];
1968 [label="295_ _mint(msg.sender, 100000000 * (10 ** 8));\n1968-expression_statement-296-296", method="", type_label=expression_statement];
1982 [label="297_ bool not_called_re_ent13 = true;\n1982-new_variable-298-298", method="", type_label=new_variable];
1988 [label="298_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n1988-function_definition-299-306", method="bug_re_ent13()", type_label=function_definition];
1992 [label="299_ require(not_called_re_ent13);\n1992-expression_statement-300-300", method="bug_re_ent13()", type_label=expression_statement];
1997 [label="300_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n1997-new_variable-301-301", method="bug_re_ent13()", type_label=new_variable];
2018 [label="301_ if\n2018-if-302-304", method="bug_re_ent13()", type_label=if];
4042 [label="301_ end_if", method="bug_re_ent13()", type_label=end_if];
2024 [label="304_ not_called_re_ent13 = false;\n2024-expression_statement-305-305", method="bug_re_ent13()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
87 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 109  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
104 -> 2128  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2128 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 2128  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
109 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
334 -> 342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
342 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
373 -> 378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
405 -> 2429  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
416 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
484 -> 489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
511 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
519 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
547 -> 2571  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
561 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
574 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
584 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 2617  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
613 -> 629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
629 -> 640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
649 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
674 -> 683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
691 -> 708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
708 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
720 -> 728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
728 -> 739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
739 -> 751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
759 -> 775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
775 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
795 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
810 -> 820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
820 -> 829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
857 -> 866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
866 -> 888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
888 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
896 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
907 -> 2931  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
926 -> 942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
942 -> 964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
964 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
967 -> 971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
975 -> 979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
979 -> 3003  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
990 -> 996  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 1020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1020 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1050 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1061 -> 3085  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1080 -> 1096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1096 -> 1108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1108 -> 1120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1120 -> 1133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1154 -> 1158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1162 -> 1166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1166 -> 3190  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1177 -> 1183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1191 -> 1203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1203 -> 1215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1215 -> 1224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1253 -> 1257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1257 -> 1281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1281 -> 1283  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1281 -> 3305  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3305 -> 1291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 3305  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1291 -> 1303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1303 -> 1315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1315 -> 1324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1353 -> 1357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1357 -> 1368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1368 -> 1378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1378 -> 1387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1395 -> 1411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1411 -> 1423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1423 -> 1435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1457 -> 1461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1461 -> 1474  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1461 -> 3485  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3485 -> 1482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1474 -> 3485  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1482 -> 1494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1494 -> 1501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1528 -> 1532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1532 -> 1539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1539 -> 3563  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1564 -> 1568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1572 -> 1576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1576 -> 1594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1594 -> 3618  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1599 -> 1605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1613 -> 1618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1624 -> 1628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1628 -> 1639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1639 -> 1649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1649 -> 1658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1666 -> 1671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1677 -> 1681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1681 -> 3705  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1726 -> 1730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1730 -> 1734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1744 -> 1748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1748 -> 1772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1772 -> 3796  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1786 -> 1795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1795 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1803 -> 1807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1807 -> 1831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1831 -> 3855  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1845 -> 1854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1854 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1862 -> 1866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1866 -> 1871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1871 -> 3895  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1891 -> 1900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1900 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1908 -> 1916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1916 -> 1927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1927 -> 1939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1988 -> 1992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1992 -> 1997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1997 -> 2018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2018 -> 4042  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
