digraph  {
13 [label="2_ function totalSupply() external view returns (uint256);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ function balanceOf(address who) external view returns (uint256);\n21-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
33 [label="4_ function allowance(address owner, address spender) external view returns (uint256);\n33-function_definition-5-5", method="allowance(address owner,address spender)", type_label=function_definition];
49 [label="5_ function transfer(address to, uint256 value) external returns (bool);\n49-function_definition-6-6", method="transfer(address to,uint256 value)", type_label=function_definition];
64 [label="6_ function approve(address spender, uint256 value) external returns (bool);\n64-function_definition-7-7", method="approve(address spender,uint256 value)", type_label=function_definition];
79 [label="7_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n79-function_definition-8-8", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
129 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n129-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
146 [label="13_ if_a == 0\n146-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
2595 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
151 [label="14_ return 0;\n151-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
153 [label="16_ uint256 c = a * b;\n153-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
161 [label="17_ assert(c / a == b);\n161-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
170 [label="18_ return c;\n170-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
172 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n172-function_definition-21-24", method="div(uint256 a,uint256 b)", type_label=function_definition];
189 [label="21_ uint256 c = a / b;\n189-new_variable-22-22", method="div(uint256 a,uint256 b)", type_label=new_variable];
197 [label="22_ return c;\n197-return-23-23", method="div(uint256 a,uint256 b)", type_label=return];
199 [label="24_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n199-function_definition-25-28", method="sub(uint256 a,uint256 b)", type_label=function_definition];
216 [label="25_ assert(b <= a);\n216-expression_statement-26-26", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
223 [label="26_ return a - b;\n223-return-27-27", method="sub(uint256 a,uint256 b)", type_label=return];
227 [label="28_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n227-function_definition-29-33", method="add(uint256 a,uint256 b)", type_label=function_definition];
244 [label="29_ uint256 c = a + b;\n244-new_variable-30-30", method="add(uint256 a,uint256 b)", type_label=new_variable];
252 [label="30_ assert(c >= a);\n252-expression_statement-31-31", method="add(uint256 a,uint256 b)", type_label=expression_statement];
259 [label="31_ return c;\n259-return-32-32", method="add(uint256 a,uint256 b)", type_label=return];
261 [label="33_ function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n261-function_definition-34-38", method="ceil(uint256 a,uint256 m)", type_label=function_definition];
278 [label="34_ uint256 c = add(a,m);\n278-new_variable-35-35", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
289 [label="35_ uint256 d = sub(c,1);\n289-new_variable-36-36", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
300 [label="36_ return mul(div(d,m),m);\n300-return-37-37", method="ceil(uint256 a,uint256 m)", type_label=return];
318 [label="40_ mapping(address => uint) redeemableEther_re_ent11;\n318-new_variable-41-41", method="", type_label=new_variable];
324 [label="41_ function claimReward_re_ent11() public {        \n        require(redeemableEther_re_ent11[msg.sender] > 0);\n        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n        msg.sender.transfer(transferValue_re_ent11);    \n        redeemableEther_re_ent11[msg.sender] = 0;\n    }\n324-function_definition-42-47", method="claimReward_re_ent11()", type_label=function_definition];
328 [label="42_ require(redeemableEther_re_ent11[msg.sender] > 0);\n328-expression_statement-43-43", method="claimReward_re_ent11()", type_label=expression_statement];
339 [label="43_ uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n339-new_variable-44-44", method="claimReward_re_ent11()", type_label=new_variable];
349 [label="44_ msg.sender.transfer(transferValue_re_ent11);\n349-expression_statement-45-45", method="claimReward_re_ent11()", type_label=expression_statement];
358 [label="45_ redeemableEther_re_ent11[msg.sender] = 0;\n358-expression_statement-46-46", method="claimReward_re_ent11()", type_label=expression_statement];
366 [label="47_ string private _name;\n366-new_variable-48-48", method="", type_label=new_variable];
371 [label="48_ mapping(address => uint) balances_re_ent1;\n371-new_variable-49-49", method="", type_label=new_variable];
377 [label="49_ function withdraw_balances_re_ent1 () public {\n       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent1[msg.sender] = 0;\n      }\n377-function_definition-50-54", method="withdraw_balances_re_ent1()", type_label=function_definition];
381 [label="50_ (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n381-new_variable-51-51", method="withdraw_balances_re_ent1()", type_label=new_variable];
405 [label="51_ if\n405-if-52-53", method="withdraw_balances_re_ent1()", type_label=if];
2854 [label="51_ end_if", method="withdraw_balances_re_ent1()", type_label=end_if];
407 [label="52_ balances_re_ent1[msg.sender] = 0;\n407-expression_statement-53-53", method="withdraw_balances_re_ent1()", type_label=expression_statement];
415 [label="54_ string private _symbol;\n415-new_variable-55-55", method="", type_label=new_variable];
420 [label="55_ bool not_called_re_ent41 = true;\n420-new_variable-56-56", method="", type_label=new_variable];
426 [label="56_ function bug_re_ent41() public{\n        require(not_called_re_ent41);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent41 = false;\n    }\n426-function_definition-57-63", method="bug_re_ent41()", type_label=function_definition];
430 [label="57_ require(not_called_re_ent41);\n430-expression_statement-58-58", method="bug_re_ent41()", type_label=expression_statement];
435 [label="58_ if\n435-if-59-61", method="bug_re_ent41()", type_label=if];
2884 [label="58_ end_if", method="bug_re_ent41()", type_label=end_if];
450 [label="61_ not_called_re_ent41 = false;\n450-expression_statement-62-62", method="bug_re_ent41()", type_label=expression_statement];
455 [label="63_ uint8 private _decimals;\n455-new_variable-64-64", method="", type_label=new_variable];
474 [label="65_ _name = name;\n474-expression_statement-66-66", method="", type_label=expression_statement];
478 [label="66_ _symbol = symbol;\n478-expression_statement-67-67", method="", type_label=expression_statement];
482 [label="67_ _decimals = decimals;\n482-expression_statement-68-68", method="", type_label=expression_statement];
486 [label="69_ mapping(address => uint) userBalance_re_ent19;\n486-new_variable-70-70", method="", type_label=new_variable];
492 [label="70_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n492-function_definition-71-76", method="withdrawBalance_re_ent19()", type_label=function_definition];
496 [label="71_ if\n496-if-72-74", method="withdrawBalance_re_ent19()", type_label=if];
2945 [label="71_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
514 [label="74_ userBalance_re_ent19[msg.sender] = 0;\n514-expression_statement-75-75", method="withdrawBalance_re_ent19()", type_label=expression_statement];
522 [label="76_ function name() public view returns(string memory) {\n    return _name;\n  }\n522-function_definition-77-79", method="name()", type_label=function_definition];
531 [label="77_ return _name;\n531-return-78-78", method="name()", type_label=return];
533 [label="79_ mapping(address => uint) userBalance_re_ent26;\n533-new_variable-80-80", method="", type_label=new_variable];
539 [label="80_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n539-function_definition-81-87", method="withdrawBalance_re_ent26()", type_label=function_definition];
543 [label="81_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n543-new_variable-82-82", method="withdrawBalance_re_ent26()", type_label=new_variable];
567 [label="82_ if\n567-if-83-85", method="withdrawBalance_re_ent26()", type_label=if];
3016 [label="82_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
573 [label="85_ userBalance_re_ent26[msg.sender] = 0;\n573-expression_statement-86-86", method="withdrawBalance_re_ent26()", type_label=expression_statement];
581 [label="87_ function symbol() public view returns(string memory) {\n    return _symbol;\n  }\n581-function_definition-88-90", method="symbol()", type_label=function_definition];
590 [label="88_ return _symbol;\n590-return-89-89", method="symbol()", type_label=return];
592 [label="90_ bool not_called_re_ent20 = true;\n592-new_variable-91-91", method="", type_label=new_variable];
598 [label="91_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n598-function_definition-92-98", method="bug_re_ent20()", type_label=function_definition];
602 [label="92_ require(not_called_re_ent20);\n602-expression_statement-93-93", method="bug_re_ent20()", type_label=expression_statement];
607 [label="93_ if\n607-if-94-96", method="bug_re_ent20()", type_label=if];
3056 [label="93_ end_if", method="bug_re_ent20()", type_label=end_if];
622 [label="96_ not_called_re_ent20 = false;\n622-expression_statement-97-97", method="bug_re_ent20()", type_label=expression_statement];
627 [label="98_ function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n627-function_definition-99-101", method="decimals()", type_label=function_definition];
636 [label="99_ return _decimals;\n636-return-100-100", method="decimals()", type_label=return];
638 [label="101_ mapping(address => uint) redeemableEther_re_ent32;\n638-new_variable-102-102", method="", type_label=new_variable];
644 [label="102_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n644-function_definition-103-108", method="claimReward_re_ent32()", type_label=function_definition];
648 [label="103_ require(redeemableEther_re_ent32[msg.sender] > 0);\n648-expression_statement-104-104", method="claimReward_re_ent32()", type_label=expression_statement];
659 [label="104_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n659-new_variable-105-105", method="claimReward_re_ent32()", type_label=new_variable];
669 [label="105_ msg.sender.transfer(transferValue_re_ent32);\n669-expression_statement-106-106", method="claimReward_re_ent32()", type_label=expression_statement];
678 [label="106_ redeemableEther_re_ent32[msg.sender] = 0;\n678-expression_statement-107-107", method="claimReward_re_ent32()", type_label=expression_statement];
697 [label="111_ uint256 counter_re_ent42 =0;\n697-new_variable-112-112", method="", type_label=new_variable];
702 [label="112_ function callme_re_ent42() public{\n        require(counter_re_ent42<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent42 += 1;\n    }\n702-function_definition-113-119", method="callme_re_ent42()", type_label=function_definition];
706 [label="113_ require(counter_re_ent42<=5);\n706-expression_statement-114-114", method="callme_re_ent42()", type_label=expression_statement];
713 [label="114_ if\n713-if-115-117", method="callme_re_ent42()", type_label=if];
3162 [label="114_ end_if", method="callme_re_ent42()", type_label=end_if];
728 [label="117_ counter_re_ent42 += 1;\n728-expression_statement-118-118", method="callme_re_ent42()", type_label=expression_statement];
732 [label="119_ mapping (address => uint256) private _balances;\n732-new_variable-120-120", method="", type_label=new_variable];
739 [label="120_ address payable lastPlayer_re_ent2;\n739-new_variable-121-121", method="", type_label=new_variable];
743 [label="121_ uint jackpot_re_ent2;\n743-new_variable-122-122", method="", type_label=new_variable];
747 [label="122_ function buyTicket_re_ent2() public{\n	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))\n        revert();\n      lastPlayer_re_ent2 = msg.sender;\n      jackpot_re_ent2    = address(this).balance;\n    }\n747-function_definition-123-128", method="buyTicket_re_ent2()", type_label=function_definition];
751 [label="123_ if\n751-if-124-125", method="buyTicket_re_ent2()", type_label=if];
3200 [label="123_ end_if", method="buyTicket_re_ent2()", type_label=end_if];
762 [label="125_ lastPlayer_re_ent2 = msg.sender;\n762-expression_statement-126-126", method="buyTicket_re_ent2()", type_label=expression_statement];
768 [label="126_ jackpot_re_ent2    = address(this).balance;\n768-expression_statement-127-127", method="buyTicket_re_ent2()", type_label=expression_statement];
776 [label="128_ mapping (address => mapping (address => uint256)) private _allowed;\n776-new_variable-129-129", method="", type_label=new_variable];
785 [label="129_ mapping(address => uint) balances_re_ent17;\n785-new_variable-130-130", method="", type_label=new_variable];
791 [label="130_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n791-function_definition-131-136", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
799 [label="131_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n799-expression_statement-132-132", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
810 [label="132_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n810-new_variable-133-133", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
830 [label="133_ require(success);\n830-expression_statement-134-134", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
835 [label="134_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n835-expression_statement-135-135", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
843 [label="136_ string constant tokenName = \"HYDROGEN\";\n843-new_variable-137-137", method="", type_label=new_variable];
849 [label="137_ address payable lastPlayer_re_ent37;\n849-new_variable-138-138", method="", type_label=new_variable];
853 [label="138_ uint jackpot_re_ent37;\n853-new_variable-139-139", method="", type_label=new_variable];
857 [label="139_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n857-function_definition-140-145", method="buyTicket_re_ent37()", type_label=function_definition];
861 [label="140_ if\n861-if-141-142", method="buyTicket_re_ent37()", type_label=if];
3310 [label="140_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
872 [label="142_ lastPlayer_re_ent37 = msg.sender;\n872-expression_statement-143-143", method="buyTicket_re_ent37()", type_label=expression_statement];
878 [label="143_ jackpot_re_ent37    = address(this).balance;\n878-expression_statement-144-144", method="buyTicket_re_ent37()", type_label=expression_statement];
886 [label="145_ string constant tokenSymbol = \"HGN\";\n886-new_variable-146-146", method="", type_label=new_variable];
892 [label="146_ mapping(address => uint) balances_re_ent3;\n892-new_variable-147-147", method="", type_label=new_variable];
898 [label="147_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n898-function_definition-148-153", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
906 [label="148_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n906-expression_statement-149-149", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
917 [label="149_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n917-new_variable-150-150", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
937 [label="150_ require(success);\n937-expression_statement-151-151", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
942 [label="151_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n942-expression_statement-152-152", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
950 [label="153_ uint8  constant tokenDecimals = 4;\n950-new_variable-154-154", method="", type_label=new_variable];
955 [label="154_ address payable lastPlayer_re_ent9;\n955-new_variable-155-155", method="", type_label=new_variable];
959 [label="155_ uint jackpot_re_ent9;\n959-new_variable-156-156", method="", type_label=new_variable];
963 [label="156_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n963-function_definition-157-163", method="buyTicket_re_ent9()", type_label=function_definition];
967 [label="157_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n967-new_variable-158-158", method="buyTicket_re_ent9()", type_label=new_variable];
985 [label="158_ if\n985-if-159-160", method="buyTicket_re_ent9()", type_label=if];
3434 [label="158_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
990 [label="160_ lastPlayer_re_ent9 = msg.sender;\n990-expression_statement-161-161", method="buyTicket_re_ent9()", type_label=expression_statement];
996 [label="161_ jackpot_re_ent9    = address(this).balance;\n996-expression_statement-162-162", method="buyTicket_re_ent9()", type_label=expression_statement];
1004 [label="163_ uint256 _totalSupply =8000000000;\n1004-new_variable-164-164", method="", type_label=new_variable];
1009 [label="164_ mapping(address => uint) redeemableEther_re_ent25;\n1009-new_variable-165-165", method="", type_label=new_variable];
1015 [label="165_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n1015-function_definition-166-171", method="claimReward_re_ent25()", type_label=function_definition];
1019 [label="166_ require(redeemableEther_re_ent25[msg.sender] > 0);\n1019-expression_statement-167-167", method="claimReward_re_ent25()", type_label=expression_statement];
1030 [label="167_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n1030-new_variable-168-168", method="claimReward_re_ent25()", type_label=new_variable];
1040 [label="168_ msg.sender.transfer(transferValue_re_ent25);\n1040-expression_statement-169-169", method="claimReward_re_ent25()", type_label=expression_statement];
1049 [label="169_ redeemableEther_re_ent25[msg.sender] = 0;\n1049-expression_statement-170-170", method="claimReward_re_ent25()", type_label=expression_statement];
1057 [label="171_ uint256 public basePercent = 100;\n1057-new_variable-172-172", method="", type_label=new_variable];
1064 [label="172_ ERC20Detailed(tokenName, tokenSymbol, tokenDecimals)\n1064-expression_statement-173-173", method="", type_label=expression_statement];
1073 [label="173_ _mint(msg.sender, _totalSupply);\n1073-expression_statement-174-174", method="", type_label=expression_statement];
1082 [label="175_ mapping(address => uint) balances_re_ent38;\n1082-new_variable-176-176", method="", type_label=new_variable];
1088 [label="176_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n1088-function_definition-177-181", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
1096 [label="177_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n1096-expression_statement-178-178", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1107 [label="178_ require(msg.sender.send(_weiToWithdraw));\n1107-expression_statement-179-179", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1119 [label="179_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n1119-expression_statement-180-180", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1127 [label="181_ function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n1127-function_definition-182-184", method="totalSupply()", type_label=function_definition];
1136 [label="182_ return _totalSupply;\n1136-return-183-183", method="totalSupply()", type_label=return];
1138 [label="184_ mapping(address => uint) redeemableEther_re_ent4;\n1138-new_variable-185-185", method="", type_label=new_variable];
1144 [label="185_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n1144-function_definition-186-191", method="claimReward_re_ent4()", type_label=function_definition];
1148 [label="186_ require(redeemableEther_re_ent4[msg.sender] > 0);\n1148-expression_statement-187-187", method="claimReward_re_ent4()", type_label=expression_statement];
1159 [label="187_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n1159-new_variable-188-188", method="claimReward_re_ent4()", type_label=new_variable];
1169 [label="188_ msg.sender.transfer(transferValue_re_ent4);\n1169-expression_statement-189-189", method="claimReward_re_ent4()", type_label=expression_statement];
1178 [label="189_ redeemableEther_re_ent4[msg.sender] = 0;\n1178-expression_statement-190-190", method="claimReward_re_ent4()", type_label=expression_statement];
1186 [label="191_ function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n1186-function_definition-192-194", method="balanceOf(address owner)", type_label=function_definition];
1199 [label="192_ return _balances[owner];\n1199-return-193-193", method="balanceOf(address owner)", type_label=return];
1203 [label="194_ uint256 counter_re_ent7 =0;\n1203-new_variable-195-195", method="", type_label=new_variable];
1208 [label="195_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n1208-function_definition-196-202", method="callme_re_ent7()", type_label=function_definition];
1212 [label="196_ require(counter_re_ent7<=5);\n1212-expression_statement-197-197", method="callme_re_ent7()", type_label=expression_statement];
1219 [label="197_ if\n1219-if-198-200", method="callme_re_ent7()", type_label=if];
3668 [label="197_ end_if", method="callme_re_ent7()", type_label=end_if];
1234 [label="200_ counter_re_ent7 += 1;\n1234-expression_statement-201-201", method="callme_re_ent7()", type_label=expression_statement];
1238 [label="202_ function allowance(address owner, address spender) public view returns (uint256) {\n    return _allowed[owner][spender];\n  }\n1238-function_definition-203-205", method="allowance(address owner,address spender)", type_label=function_definition];
1255 [label="203_ return _allowed[owner][spender];\n1255-return-204-204", method="allowance(address owner,address spender)", type_label=return];
1261 [label="205_ address payable lastPlayer_re_ent23;\n1261-new_variable-206-206", method="", type_label=new_variable];
1265 [label="206_ uint jackpot_re_ent23;\n1265-new_variable-207-207", method="", type_label=new_variable];
1269 [label="207_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n1269-function_definition-208-213", method="buyTicket_re_ent23()", type_label=function_definition];
1273 [label="208_ if\n1273-if-209-210", method="buyTicket_re_ent23()", type_label=if];
3722 [label="208_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
1284 [label="210_ lastPlayer_re_ent23 = msg.sender;\n1284-expression_statement-211-211", method="buyTicket_re_ent23()", type_label=expression_statement];
1290 [label="211_ jackpot_re_ent23    = address(this).balance;\n1290-expression_statement-212-212", method="buyTicket_re_ent23()", type_label=expression_statement];
1298 [label="213_ function findtwoPercent(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 twoPercent = roundValue.mul(basePercent).div(5000);\n    return twoPercent;\n  }\n1298-function_definition-214-218", method="findtwoPercent(uint256 value)", type_label=function_definition];
1311 [label="214_ uint256 roundValue = value.ceil(basePercent);\n1311-new_variable-215-215", method="findtwoPercent(uint256 value)", type_label=new_variable];
1322 [label="215_ uint256 twoPercent = roundValue.mul(basePercent).div(5000);\n1322-new_variable-216-216", method="findtwoPercent(uint256 value)", type_label=new_variable];
1338 [label="216_ return twoPercent;\n1338-return-217-217", method="findtwoPercent(uint256 value)", type_label=return];
1340 [label="218_ uint256 counter_re_ent14 =0;\n1340-new_variable-219-219", method="", type_label=new_variable];
1345 [label="219_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n1345-function_definition-220-226", method="callme_re_ent14()", type_label=function_definition];
1349 [label="220_ require(counter_re_ent14<=5);\n1349-expression_statement-221-221", method="callme_re_ent14()", type_label=expression_statement];
1356 [label="221_ if\n1356-if-222-224", method="callme_re_ent14()", type_label=if];
3805 [label="221_ end_if", method="callme_re_ent14()", type_label=end_if];
1371 [label="224_ counter_re_ent14 += 1;\n1371-expression_statement-225-225", method="callme_re_ent14()", type_label=expression_statement];
1375 [label="226_ function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n    uint256 tokensToBurn = findtwoPercent(value);\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\n    _balances[to] = _balances[to].add(tokensToTransfer);\n    _totalSupply = _totalSupply.sub(tokensToBurn);\n    emit Transfer(msg.sender, to, tokensToTransfer);\n    emit Transfer(msg.sender, address(0), tokensToBurn);\n    return true;\n  }\n1375-function_definition-227-238", method="transfer(address to,uint256 value)", type_label=function_definition];
1391 [label="227_ require(value <= _balances[msg.sender]);\n1391-expression_statement-228-228", method="transfer(address to,uint256 value)", type_label=expression_statement];
1402 [label="228_ require(to != address(0));\n1402-expression_statement-229-229", method="transfer(address to,uint256 value)", type_label=expression_statement];
1411 [label="229_ uint256 tokensToBurn = findtwoPercent(value);\n1411-new_variable-230-230", method="transfer(address to,uint256 value)", type_label=new_variable];
1420 [label="230_ uint256 tokensToTransfer = value.sub(tokensToBurn);\n1420-new_variable-231-231", method="transfer(address to,uint256 value)", type_label=new_variable];
1431 [label="231_ _balances[msg.sender] = _balances[msg.sender].sub(value);\n1431-expression_statement-232-232", method="transfer(address to,uint256 value)", type_label=expression_statement];
1448 [label="232_ _balances[to] = _balances[to].add(tokensToTransfer);\n1448-expression_statement-233-233", method="transfer(address to,uint256 value)", type_label=expression_statement];
1461 [label="233_ _totalSupply = _totalSupply.sub(tokensToBurn);\n1461-expression_statement-234-234", method="transfer(address to,uint256 value)", type_label=expression_statement];
1492 [label="236_ return true;\n1492-return-237-237", method="transfer(address to,uint256 value)", type_label=return];
1495 [label="238_ address payable lastPlayer_re_ent30;\n1495-new_variable-239-239", method="", type_label=new_variable];
1499 [label="239_ uint jackpot_re_ent30;\n1499-new_variable-240-240", method="", type_label=new_variable];
1503 [label="240_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n1503-function_definition-241-246", method="buyTicket_re_ent30()", type_label=function_definition];
1507 [label="241_ if\n1507-if-242-243", method="buyTicket_re_ent30()", type_label=if];
3956 [label="241_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
1518 [label="243_ lastPlayer_re_ent30 = msg.sender;\n1518-expression_statement-244-244", method="buyTicket_re_ent30()", type_label=expression_statement];
1524 [label="244_ jackpot_re_ent30    = address(this).balance;\n1524-expression_statement-245-245", method="buyTicket_re_ent30()", type_label=expression_statement];
1532 [label="246_ function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n    for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }\n  }\n1532-function_definition-247-251", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=function_definition];
1546 [label="247_ for(i < receivers.length;;i++)\n1546-for-248-250", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=for];
3995 [label="247_ end_loop", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=end_loop];
1559 [label="247_ i++\n1559-expression_statement-248-248", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1562 [label="248_ transfer(receivers[i], amounts[i]);\n1562-expression_statement-249-249", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1573 [label="251_ mapping(address => uint) balances_re_ent8;\n1573-new_variable-252-252", method="", type_label=new_variable];
1579 [label="252_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n1579-function_definition-253-257", method="withdraw_balances_re_ent8()", type_label=function_definition];
1583 [label="253_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n1583-new_variable-254-254", method="withdraw_balances_re_ent8()", type_label=new_variable];
1607 [label="254_ if\n1607-if-255-256", method="withdraw_balances_re_ent8()", type_label=if];
4056 [label="254_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
1609 [label="255_ balances_re_ent8[msg.sender] = 0;\n1609-expression_statement-256-256", method="withdraw_balances_re_ent8()", type_label=expression_statement];
1617 [label="257_ function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n1617-function_definition-258-263", method="approve(address spender,uint256 value)", type_label=function_definition];
1633 [label="258_ require(spender != address(0));\n1633-expression_statement-259-259", method="approve(address spender,uint256 value)", type_label=expression_statement];
1642 [label="259_ _allowed[msg.sender][spender] = value;\n1642-expression_statement-260-260", method="approve(address spender,uint256 value)", type_label=expression_statement];
1662 [label="261_ return true;\n1662-return-262-262", method="approve(address spender,uint256 value)", type_label=return];
1665 [label="263_ mapping(address => uint) redeemableEther_re_ent39;\n1665-new_variable-264-264", method="", type_label=new_variable];
1671 [label="264_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n1671-function_definition-265-270", method="claimReward_re_ent39()", type_label=function_definition];
1675 [label="265_ require(redeemableEther_re_ent39[msg.sender] > 0);\n1675-expression_statement-266-266", method="claimReward_re_ent39()", type_label=expression_statement];
1686 [label="266_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n1686-new_variable-267-267", method="claimReward_re_ent39()", type_label=new_variable];
1696 [label="267_ msg.sender.transfer(transferValue_re_ent39);\n1696-expression_statement-268-268", method="claimReward_re_ent39()", type_label=expression_statement];
1705 [label="268_ redeemableEther_re_ent39[msg.sender] = 0;\n1705-expression_statement-269-269", method="claimReward_re_ent39()", type_label=expression_statement];
1713 [label="270_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n    _balances[from] = _balances[from].sub(value);\n    uint256 tokensToBurn = findtwoPercent(value);\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\n    _balances[to] = _balances[to].add(tokensToTransfer);\n    _totalSupply = _totalSupply.sub(tokensToBurn);\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    emit Transfer(from, to, tokensToTransfer);\n    emit Transfer(from, address(0), tokensToBurn);\n    return true;\n  }\n1713-function_definition-271-284", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
1733 [label="271_ require(value <= _balances[from]);\n1733-expression_statement-272-272", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1742 [label="272_ require(value <= _allowed[from][msg.sender]);\n1742-expression_statement-273-273", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1755 [label="273_ require(to != address(0));\n1755-expression_statement-274-274", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1764 [label="274_ _balances[from] = _balances[from].sub(value);\n1764-expression_statement-275-275", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1777 [label="275_ uint256 tokensToBurn = findtwoPercent(value);\n1777-new_variable-276-276", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
1786 [label="276_ uint256 tokensToTransfer = value.sub(tokensToBurn);\n1786-new_variable-277-277", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
1797 [label="277_ _balances[to] = _balances[to].add(tokensToTransfer);\n1797-expression_statement-278-278", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1810 [label="278_ _totalSupply = _totalSupply.sub(tokensToBurn);\n1810-expression_statement-279-279", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1819 [label="279_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n1819-expression_statement-280-280", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1858 [label="282_ return true;\n1858-return-283-283", method="transferFrom(address from,address to,uint256 value)", type_label=return];
1861 [label="284_ mapping(address => uint) balances_re_ent36;\n1861-new_variable-285-285", method="", type_label=new_variable];
1867 [label="285_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n1867-function_definition-286-289", method="withdraw_balances_re_ent36()", type_label=function_definition];
1871 [label="286_ if\n1871-if-287-288", method="withdraw_balances_re_ent36()", type_label=if];
4320 [label="286_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
1884 [label="287_ balances_re_ent36[msg.sender] = 0;\n1884-expression_statement-288-288", method="withdraw_balances_re_ent36()", type_label=expression_statement];
1892 [label="289_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n1892-function_definition-290-295", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
1908 [label="290_ require(spender != address(0));\n1908-expression_statement-291-291", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
1917 [label="291_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n1917-expression_statement-292-292", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
1955 [label="293_ return true;\n1955-return-294-294", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
1958 [label="295_ uint256 counter_re_ent35 =0;\n1958-new_variable-296-296", method="", type_label=new_variable];
1963 [label="296_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n1963-function_definition-297-303", method="callme_re_ent35()", type_label=function_definition];
1967 [label="297_ require(counter_re_ent35<=5);\n1967-expression_statement-298-298", method="callme_re_ent35()", type_label=expression_statement];
1974 [label="298_ if\n1974-if-299-301", method="callme_re_ent35()", type_label=if];
4423 [label="298_ end_if", method="callme_re_ent35()", type_label=end_if];
1989 [label="301_ counter_re_ent35 += 1;\n1989-expression_statement-302-302", method="callme_re_ent35()", type_label=expression_statement];
1993 [label="303_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n1993-function_definition-304-309", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
2009 [label="304_ require(spender != address(0));\n2009-expression_statement-305-305", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
2018 [label="305_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n2018-expression_statement-306-306", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
2056 [label="307_ return true;\n2056-return-308-308", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
2059 [label="309_ mapping(address => uint) userBalance_re_ent40;\n2059-new_variable-310-310", method="", type_label=new_variable];
2065 [label="310_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n2065-function_definition-311-317", method="withdrawBalance_re_ent40()", type_label=function_definition];
2069 [label="311_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n2069-new_variable-312-312", method="withdrawBalance_re_ent40()", type_label=new_variable];
2093 [label="312_ if\n2093-if-313-315", method="withdrawBalance_re_ent40()", type_label=if];
4542 [label="312_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
2099 [label="315_ userBalance_re_ent40[msg.sender] = 0;\n2099-expression_statement-316-316", method="withdrawBalance_re_ent40()", type_label=expression_statement];
2107 [label="317_ function _mint(address account, uint256 amount) internal {\n    require(amount != 0);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n2107-function_definition-318-322", method="_mint(address account,uint256 amount)", type_label=function_definition];
2119 [label="318_ require(amount != 0);\n2119-expression_statement-319-319", method="_mint(address account,uint256 amount)", type_label=expression_statement];
2126 [label="319_ _balances[account] = _balances[account].add(amount);\n2126-expression_statement-320-320", method="_mint(address account,uint256 amount)", type_label=expression_statement];
2149 [label="322_ mapping(address => uint) userBalance_re_ent33;\n2149-new_variable-323-323", method="", type_label=new_variable];
2155 [label="323_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n2155-function_definition-324-330", method="withdrawBalance_re_ent33()", type_label=function_definition];
2159 [label="324_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n2159-new_variable-325-325", method="withdrawBalance_re_ent33()", type_label=new_variable];
2183 [label="325_ if\n2183-if-326-328", method="withdrawBalance_re_ent33()", type_label=if];
4632 [label="325_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
2189 [label="328_ userBalance_re_ent33[msg.sender] = 0;\n2189-expression_statement-329-329", method="withdrawBalance_re_ent33()", type_label=expression_statement];
2197 [label="330_ function burn(uint256 amount) external {\n    _burn(msg.sender, amount);\n  }\n2197-function_definition-331-333", method="burn(uint256 amount)", type_label=function_definition];
2205 [label="331_ _burn(msg.sender, amount);\n2205-expression_statement-332-332", method="burn(uint256 amount)", type_label=expression_statement];
2214 [label="333_ bool not_called_re_ent27 = true;\n2214-new_variable-334-334", method="", type_label=new_variable];
2220 [label="334_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n2220-function_definition-335-341", method="bug_re_ent27()", type_label=function_definition];
2224 [label="335_ require(not_called_re_ent27);\n2224-expression_statement-336-336", method="bug_re_ent27()", type_label=expression_statement];
2229 [label="336_ if\n2229-if-337-339", method="bug_re_ent27()", type_label=if];
4678 [label="336_ end_if", method="bug_re_ent27()", type_label=end_if];
2244 [label="339_ not_called_re_ent27 = false;\n2244-expression_statement-340-340", method="bug_re_ent27()", type_label=expression_statement];
2249 [label="341_ function _burn(address account, uint256 amount) internal {\n    require(amount != 0);\n    require(amount <= _balances[account]);\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n2249-function_definition-342-348", method="_burn(address account,uint256 amount)", type_label=function_definition];
2261 [label="342_ require(amount != 0);\n2261-expression_statement-343-343", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2268 [label="343_ require(amount <= _balances[account]);\n2268-expression_statement-344-344", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2277 [label="344_ _totalSupply = _totalSupply.sub(amount);\n2277-expression_statement-345-345", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2286 [label="345_ _balances[account] = _balances[account].sub(amount);\n2286-expression_statement-346-346", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2309 [label="348_ mapping(address => uint) balances_re_ent31;\n2309-new_variable-349-349", method="", type_label=new_variable];
2315 [label="349_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n2315-function_definition-350-354", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
2323 [label="350_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n2323-expression_statement-351-351", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
2334 [label="351_ require(msg.sender.send(_weiToWithdraw));\n2334-expression_statement-352-352", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
2346 [label="352_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n2346-expression_statement-353-353", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
2354 [label="354_ function burnFrom(address account, uint256 amount) external {\n    require(amount <= _allowed[account][msg.sender]);\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n    _burn(account, amount);\n  }\n2354-function_definition-355-359", method="burnFrom(address account,uint256 amount)", type_label=function_definition];
2366 [label="355_ require(amount <= _allowed[account][msg.sender]);\n2366-expression_statement-356-356", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2379 [label="356_ _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n2379-expression_statement-357-357", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2400 [label="357_ _burn(account, amount);\n2400-expression_statement-358-358", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2407 [label="359_ bool not_called_re_ent13 = true;\n2407-new_variable-360-360", method="", type_label=new_variable];
2413 [label="360_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n2413-function_definition-361-368", method="bug_re_ent13()", type_label=function_definition];
2417 [label="361_ require(not_called_re_ent13);\n2417-expression_statement-362-362", method="bug_re_ent13()", type_label=expression_statement];
2422 [label="362_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n2422-new_variable-363-363", method="bug_re_ent13()", type_label=new_variable];
2443 [label="363_ if\n2443-if-364-366", method="bug_re_ent13()", type_label=if];
4892 [label="363_ end_if", method="bug_re_ent13()", type_label=end_if];
2449 [label="366_ not_called_re_ent13 = false;\n2449-expression_statement-367-367", method="bug_re_ent13()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
129 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
146 -> 2595  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2595 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 2595  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
153 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
172 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
199 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
227 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
261 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
324 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
328 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
349 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
381 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
405 -> 407  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
405 -> 2854  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2854 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 2854  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
415 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
426 -> 430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 2884  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
474 -> 478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
478 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
492 -> 496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
496 -> 2945  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
522 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
539 -> 543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
543 -> 567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 3016  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
581 -> 590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
590 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
598 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 3056  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
627 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
636 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
644 -> 648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
648 -> 659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
659 -> 669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
669 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
702 -> 706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
706 -> 713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
713 -> 3162  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
732 -> 739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
739 -> 743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
747 -> 751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
751 -> 3200  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
762 -> 768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
776 -> 785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
791 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
810 -> 830  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
830 -> 835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
843 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
857 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 3310  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
872 -> 878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
886 -> 892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
898 -> 906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
906 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
917 -> 937  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
937 -> 942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
950 -> 955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
955 -> 959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
963 -> 967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
967 -> 985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 3434  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
990 -> 996  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1015 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 1030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1030 -> 1040  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1040 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1088 -> 1096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1096 -> 1107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1107 -> 1119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1127 -> 1136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1136 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1144 -> 1148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1148 -> 1159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1159 -> 1169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1169 -> 1178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1199 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1208 -> 1212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1212 -> 1219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1219 -> 3668  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1238 -> 1255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1255 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1261 -> 1265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1269 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1273 -> 3722  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1284 -> 1290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1298 -> 1311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1311 -> 1322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1322 -> 1338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1338 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1345 -> 1349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1349 -> 1356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1356 -> 3805  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1375 -> 1391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1391 -> 1402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1402 -> 1411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1411 -> 1420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1420 -> 1431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1431 -> 1448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1448 -> 1461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1492 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1495 -> 1499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1503 -> 1507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1507 -> 3956  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1518 -> 1524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1532 -> 1546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1546 -> 1562  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1546 -> 3995  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3995 -> 1573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1559 -> 1546  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1562 -> 1559  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1579 -> 1583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1583 -> 1607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1607 -> 1609  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1607 -> 4056  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4056 -> 1617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1609 -> 4056  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1617 -> 1633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1633 -> 1642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1662 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1671 -> 1675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1675 -> 1686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1686 -> 1696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1696 -> 1705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1713 -> 1733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1733 -> 1742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1742 -> 1755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1755 -> 1764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1764 -> 1777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1777 -> 1786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1786 -> 1797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1797 -> 1810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1810 -> 1819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1858 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1867 -> 1871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1871 -> 1884  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1871 -> 4320  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4320 -> 1892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1884 -> 4320  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1892 -> 1908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1908 -> 1917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1955 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1963 -> 1967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1967 -> 1974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1974 -> 4423  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1993 -> 2009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2009 -> 2018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2056 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2065 -> 2069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2069 -> 2093  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2093 -> 4542  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2107 -> 2119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2119 -> 2126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2155 -> 2159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2159 -> 2183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2183 -> 4632  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2197 -> 2205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2220 -> 2224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2224 -> 2229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2229 -> 4678  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2249 -> 2261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2261 -> 2268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2268 -> 2277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2277 -> 2286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2315 -> 2323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2323 -> 2334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2334 -> 2346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2354 -> 2366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2366 -> 2379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2379 -> 2400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2413 -> 2417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2417 -> 2422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2422 -> 2443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2443 -> 4892  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
