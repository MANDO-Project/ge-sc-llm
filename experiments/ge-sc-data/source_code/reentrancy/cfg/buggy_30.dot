digraph  {
13 [label="2_ function name() external view returns (string memory);\n13-function_definition-3-3", method="name()", type_label=function_definition];
21 [label="3_ function symbol() external view returns (string memory);\n21-function_definition-4-4", method="symbol()", type_label=function_definition];
29 [label="4_ function granularity() external view returns (uint256);\n29-function_definition-5-5", method="granularity()", type_label=function_definition];
37 [label="5_ function totalSupply() external view returns (uint256);\n37-function_definition-6-6", method="totalSupply()", type_label=function_definition];
45 [label="6_ function balanceOf(address owner) external view returns (uint256);\n45-function_definition-7-7", method="balanceOf(address owner)", type_label=function_definition];
57 [label="7_ function send(address recipient, uint256 amount, bytes calldata data) external;\n57-function_definition-8-8", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=function_definition];
72 [label="8_ function burn(uint256 amount, bytes calldata data) external;\n72-function_definition-9-9", method="burn(uint256 amount,bytes calldata data)", type_label=function_definition];
83 [label="9_ function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n83-function_definition-10-10", method="isOperatorFor(address operator,address tokenHolder)", type_label=function_definition];
99 [label="10_ function authorizeOperator(address operator) external;\n99-function_definition-11-11", method="authorizeOperator(address operator)", type_label=function_definition];
106 [label="11_ function revokeOperator(address operator) external;\n106-function_definition-12-12", method="revokeOperator(address operator)", type_label=function_definition];
113 [label="12_ function defaultOperators() external view returns (address[] memory);\n113-function_definition-13-13", method="defaultOperators()", type_label=function_definition];
122 [label="13_ function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n122-function_definition-14-20", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
145 [label="20_ function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n145-function_definition-21-26", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
257 [label="40_ function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n257-function_definition-41-48", method="tokensReceived(address operator,address from,address to,uint amount,bytes calldata userData,bytes calldata operatorData)", type_label=function_definition];
287 [label="50_ function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n287-function_definition-51-58", method="tokensToSend(address operator,address from,address to,uint amount,bytes calldata userData,bytes calldata operatorData)", type_label=function_definition];
317 [label="60_ function totalSupply() external view returns (uint256);\n317-function_definition-61-61", method="totalSupply()", type_label=function_definition];
325 [label="61_ function balanceOf(address account) external view returns (uint256);\n325-function_definition-62-62", method="balanceOf(address account)", type_label=function_definition];
337 [label="62_ function transfer(address recipient, uint256 amount) external returns (bool);\n337-function_definition-63-63", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
352 [label="63_ function allowance(address owner, address spender) external view returns (uint256);\n352-function_definition-64-64", method="allowance(address owner,address spender)", type_label=function_definition];
368 [label="64_ function approve(address spender, uint256 amount) external returns (bool);\n368-function_definition-65-65", method="approve(address spender,uint256 amount)", type_label=function_definition];
383 [label="65_ function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n383-function_definition-66-66", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
433 [label="70_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n433-function_definition-71-75", method="add(uint256 a,uint256 b)", type_label=function_definition];
450 [label="71_ uint256 c = a + b;\n450-new_variable-72-72", method="add(uint256 a,uint256 b)", type_label=new_variable];
458 [label="72_ require(c >= a, \"SafeMath: addition overflow\");\n458-expression_statement-73-73", method="add(uint256 a,uint256 b)", type_label=expression_statement];
468 [label="73_ return c;\n468-return-74-74", method="add(uint256 a,uint256 b)", type_label=return];
470 [label="75_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n470-function_definition-76-80", method="sub(uint256 a,uint256 b)", type_label=function_definition];
487 [label="76_ require(b <= a, \"SafeMath: subtraction overflow\");\n487-expression_statement-77-77", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
497 [label="77_ uint256 c = a - b;\n497-new_variable-78-78", method="sub(uint256 a,uint256 b)", type_label=new_variable];
505 [label="78_ return c;\n505-return-79-79", method="sub(uint256 a,uint256 b)", type_label=return];
507 [label="80_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n507-function_definition-81-88", method="mul(uint256 a,uint256 b)", type_label=function_definition];
524 [label="81_ if_a == 0\n524-if-82-84", method="mul(uint256 a,uint256 b)", type_label=if];
5096 [label="81_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
529 [label="82_ return 0;\n529-return-83-83", method="mul(uint256 a,uint256 b)", type_label=return];
531 [label="84_ uint256 c = a * b;\n531-new_variable-85-85", method="mul(uint256 a,uint256 b)", type_label=new_variable];
539 [label="85_ require(c / a == b, \"SafeMath: multiplication overflow\");\n539-expression_statement-86-86", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
551 [label="86_ return c;\n551-return-87-87", method="mul(uint256 a,uint256 b)", type_label=return];
553 [label="88_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n553-function_definition-89-93", method="div(uint256 a,uint256 b)", type_label=function_definition];
570 [label="89_ require(b > 0, \"SafeMath: division by zero\");\n570-expression_statement-90-90", method="div(uint256 a,uint256 b)", type_label=expression_statement];
580 [label="90_ uint256 c = a / b;\n580-new_variable-91-91", method="div(uint256 a,uint256 b)", type_label=new_variable];
588 [label="91_ return c;\n588-return-92-92", method="div(uint256 a,uint256 b)", type_label=return];
590 [label="93_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n590-function_definition-94-97", method="mod(uint256 a,uint256 b)", type_label=function_definition];
607 [label="94_ require(b != 0, \"SafeMath: modulo by zero\");\n607-expression_statement-95-95", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
617 [label="95_ return a % b;\n617-return-96-96", method="mod(uint256 a,uint256 b)", type_label=return];
624 [label="99_ function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n624-function_definition-100-104", method="isContract(address account)", type_label=function_definition];
637 [label="100_ uint256 size;\n637-new_variable-101-101", method="isContract(address account)", type_label=new_variable];
652 [label="102_ return size > 0;\n652-return-103-103", method="isContract(address account)", type_label=return];
659 [label="106_ function setManager(address account, address newManager) external;\n659-function_definition-107-107", method="setManager(address account,address newManager)", type_label=function_definition];
670 [label="107_ function getManager(address account) external view returns (address);\n670-function_definition-108-108", method="getManager(address account)", type_label=function_definition];
682 [label="108_ function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\n682-function_definition-109-109", method="setInterfaceImplementer(address account,bytes32 interfaceHash,address implementer)", type_label=function_definition];
697 [label="109_ function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\n697-function_definition-110-110", method="getInterfaceImplementer(address account,bytes32 interfaceHash)", type_label=function_definition];
713 [label="110_ function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n713-function_definition-111-111", method="interfaceHash(string calldata interfaceName)", type_label=function_definition];
725 [label="111_ function updateERC165Cache(address account, bytes4 interfaceId) external;\n725-function_definition-112-112", method="updateERC165Cache(address account,bytes4 interfaceId)", type_label=function_definition];
736 [label="112_ function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n736-function_definition-113-113", method="implementsERC165Interface(address account,bytes4 interfaceId)", type_label=function_definition];
752 [label="113_ function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n752-function_definition-114-114", method="implementsERC165InterfaceNoCache(address account,bytes4 interfaceId)", type_label=function_definition];
811 [label="120_ IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n811-new_variable-121-121", method="", type_label=new_variable];
821 [label="121_ mapping(address => uint256) private _balances;\n821-new_variable-122-122", method="", type_label=new_variable];
828 [label="122_ uint256 private _totalSupply;\n828-new_variable-123-123", method="", type_label=new_variable];
833 [label="123_ string private _name;\n833-new_variable-124-124", method="", type_label=new_variable];
838 [label="124_ string private _symbol;\n838-new_variable-125-125", method="", type_label=new_variable];
843 [label="125_ bytes32 constant private TOKENS_SENDER_INTERFACE_HASH =\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n843-new_variable-126-127", method="", type_label=new_variable];
849 [label="127_ bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH =\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n849-new_variable-128-129", method="", type_label=new_variable];
855 [label="129_ address[] private _defaultOperatorsArray;\n855-new_variable-130-130", method="", type_label=new_variable];
861 [label="130_ mapping(address => bool) private _defaultOperators;\n861-new_variable-131-131", method="", type_label=new_variable];
868 [label="131_ mapping(address => mapping(address => bool)) private _operators;\n868-new_variable-132-132", method="", type_label=new_variable];
877 [label="132_ mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\n877-new_variable-133-133", method="", type_label=new_variable];
886 [label="133_ mapping (address => mapping (address => uint256)) private _allowances;\n886-new_variable-134-134", method="", type_label=new_variable];
910 [label="139_ _name = name;\n910-expression_statement-140-140", method="", type_label=expression_statement];
914 [label="140_ _symbol = symbol;\n914-expression_statement-141-141", method="", type_label=expression_statement];
918 [label="141_ _defaultOperatorsArray = defaultOperators;\n918-expression_statement-142-142", method="", type_label=expression_statement];
922 [label="142_ for(i < _defaultOperatorsArray.length;;i++)\n922-for-143-145", method="", type_label=for];
5494 [label="142_ end_loop", method="", type_label=end_loop];
935 [label="142_ i++\n935-expression_statement-143-143", method="", type_label=expression_statement];
938 [label="143_ _defaultOperators[_defaultOperatorsArray[i]] = true;\n938-expression_statement-144-144", method="", type_label=expression_statement];
947 [label="145_ _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\n947-expression_statement-146-146", method="", type_label=expression_statement];
966 [label="146_ _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\n966-expression_statement-147-147", method="", type_label=expression_statement];
985 [label="148_ function name() public view returns (string memory) {\n        return _name;\n    }\n985-function_definition-149-151", method="name()", type_label=function_definition];
994 [label="149_ return _name;\n994-return-150-150", method="name()", type_label=return];
996 [label="151_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n996-function_definition-152-154", method="symbol()", type_label=function_definition];
1005 [label="152_ return _symbol;\n1005-return-153-153", method="symbol()", type_label=return];
1007 [label="154_ function decimals() public pure returns (uint8) {\n        return 18;\n    }\n1007-function_definition-155-157", method="decimals()", type_label=function_definition];
1016 [label="155_ return 18;\n1016-return-156-156", method="decimals()", type_label=return];
1018 [label="157_ function granularity() public view returns (uint256) {\n        return 1;\n    }\n1018-function_definition-158-160", method="granularity()", type_label=function_definition];
1027 [label="158_ return 1;\n1027-return-159-159", method="granularity()", type_label=return];
1029 [label="160_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n1029-function_definition-161-163", method="totalSupply()", type_label=function_definition];
1038 [label="161_ return _totalSupply;\n1038-return-162-162", method="totalSupply()", type_label=return];
1040 [label="163_ function balanceOf(address tokenHolder) public view returns (uint256) {\n        return _balances[tokenHolder];\n    }\n1040-function_definition-164-166", method="balanceOf(address tokenHolder)", type_label=function_definition];
1053 [label="164_ return _balances[tokenHolder];\n1053-return-165-165", method="balanceOf(address tokenHolder)", type_label=return];
1057 [label="166_ function send(address recipient, uint256 amount, bytes calldata data) external {\n        _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n    }\n1057-function_definition-167-169", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=function_definition];
1073 [label="167_ _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n1073-expression_statement-168-168", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=expression_statement];
1096 [label="169_ function transfer(address recipient, uint256 amount) external returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n        address from = msg.sender;\n        _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n        _move(from, from, recipient, amount, \"\", \"\");\n        _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n        return true;\n    }\n1096-function_definition-170-177", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
1112 [label="170_ require(recipient != address(0), \"ERC777: transfer to the zero address\");\n1112-expression_statement-171-171", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1124 [label="171_ address from = msg.sender;\n1124-new_variable-172-172", method="transfer(address recipient,uint256 amount)", type_label=new_variable];
1132 [label="172_ _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n1132-expression_statement-173-173", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1149 [label="173_ _move(from, from, recipient, amount, \"\", \"\");\n1149-expression_statement-174-174", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1166 [label="174_ _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n1166-expression_statement-175-175", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1186 [label="175_ return true;\n1186-return-176-176", method="transfer(address recipient,uint256 amount)", type_label=return];
1189 [label="177_ mapping(address => uint) redeemableEther_re_ent18;\n1189-new_variable-178-178", method="", type_label=new_variable];
1195 [label="178_ function claimReward_re_ent18() public {        \n        require(redeemableEther_re_ent18[msg.sender] > 0);\n        uint transferValue_re_ent18 = redeemableEther_re_ent18[msg.sender];\n        msg.sender.transfer(transferValue_re_ent18);    \n        redeemableEther_re_ent18[msg.sender] = 0;\n    }\n1195-function_definition-179-184", method="claimReward_re_ent18()", type_label=function_definition];
1199 [label="179_ require(redeemableEther_re_ent18[msg.sender] > 0);\n1199-expression_statement-180-180", method="claimReward_re_ent18()", type_label=expression_statement];
1210 [label="180_ uint transferValue_re_ent18 = redeemableEther_re_ent18[msg.sender];\n1210-new_variable-181-181", method="claimReward_re_ent18()", type_label=new_variable];
1220 [label="181_ msg.sender.transfer(transferValue_re_ent18);\n1220-expression_statement-182-182", method="claimReward_re_ent18()", type_label=expression_statement];
1229 [label="182_ redeemableEther_re_ent18[msg.sender] = 0;\n1229-expression_statement-183-183", method="claimReward_re_ent18()", type_label=expression_statement];
1237 [label="184_ function burn(uint256 amount, bytes calldata data) external {\n        _burn(msg.sender, msg.sender, amount, data, \"\");\n    }\n1237-function_definition-185-187", method="burn(uint256 amount,bytes calldata data)", type_label=function_definition];
1249 [label="185_ _burn(msg.sender, msg.sender, amount, data, \"\");\n1249-expression_statement-186-186", method="burn(uint256 amount,bytes calldata data)", type_label=expression_statement];
1267 [label="187_ mapping(address => uint) balances_re_ent29;\n1267-new_variable-188-188", method="", type_label=new_variable];
1273 [label="188_ function withdraw_balances_re_ent29 () public {\n       if (msg.sender.send(balances_re_ent29[msg.sender ]))\n          balances_re_ent29[msg.sender] = 0;\n      }\n1273-function_definition-189-192", method="withdraw_balances_re_ent29()", type_label=function_definition];
1277 [label="189_ if\n1277-if-190-191", method="withdraw_balances_re_ent29()", type_label=if];
5849 [label="189_ end_if", method="withdraw_balances_re_ent29()", type_label=end_if];
1290 [label="190_ balances_re_ent29[msg.sender] = 0;\n1290-expression_statement-191-191", method="withdraw_balances_re_ent29()", type_label=expression_statement];
1298 [label="192_ function isOperatorFor(\n        address operator,\n        address tokenHolder\n    ) public view returns (bool) {\n        return operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n    }\n1298-function_definition-193-200", method="isOperatorFor(address operator,address tokenHolder)", type_label=function_definition];
1315 [label="196_ return operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n1315-return-197-199", method="isOperatorFor(address operator,address tokenHolder)", type_label=return];
1337 [label="200_ bool not_called_re_ent6 = true;\n1337-new_variable-201-201", method="", type_label=new_variable];
1343 [label="201_ function bug_re_ent6() public{\n        require(not_called_re_ent6);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent6 = false;\n    }\n1343-function_definition-202-208", method="bug_re_ent6()", type_label=function_definition];
1347 [label="202_ require(not_called_re_ent6);\n1347-expression_statement-203-203", method="bug_re_ent6()", type_label=expression_statement];
1352 [label="203_ if\n1352-if-204-206", method="bug_re_ent6()", type_label=if];
5924 [label="203_ end_if", method="bug_re_ent6()", type_label=end_if];
1367 [label="206_ not_called_re_ent6 = false;\n1367-expression_statement-207-207", method="bug_re_ent6()", type_label=expression_statement];
1372 [label="208_ function authorizeOperator(address operator) external {\n        require(msg.sender != operator, \"ERC777: authorizing self as operator\");\n        if (_defaultOperators[operator]) {\n            delete _revokedDefaultOperators[msg.sender][operator];\n        } else {\n            _operators[msg.sender][operator] = true;\n        }\n        emit AuthorizedOperator(operator, msg.sender);\n    }\n1372-function_definition-209-217", method="authorizeOperator(address operator)", type_label=function_definition];
1380 [label="209_ require(msg.sender != operator, \"ERC777: authorizing self as operator\");\n1380-expression_statement-210-210", method="authorizeOperator(address operator)", type_label=expression_statement];
1392 [label="210_ if\n1392-if-211-215", method="authorizeOperator(address operator)", type_label=if];
5964 [label="210_ end_if", method="authorizeOperator(address operator)", type_label=end_if];
1397 [label="211_ delete _revokedDefaultOperators[msg.sender][operator];\n1397-expression_statement-212-212", method="authorizeOperator(address operator)", type_label=expression_statement];
1407 [label="213_ _operators[msg.sender][operator] = true;\n1407-expression_statement-214-214", method="authorizeOperator(address operator)", type_label=expression_statement];
1426 [label="217_ address payable lastPlayer_re_ent16;\n1426-new_variable-218-218", method="", type_label=new_variable];
1430 [label="218_ uint jackpot_re_ent16;\n1430-new_variable-219-219", method="", type_label=new_variable];
1434 [label="219_ function buyTicket_re_ent16() public{\n	    if (!(lastPlayer_re_ent16.send(jackpot_re_ent16)))\n        revert();\n      lastPlayer_re_ent16 = msg.sender;\n      jackpot_re_ent16    = address(this).balance;\n    }\n1434-function_definition-220-225", method="buyTicket_re_ent16()", type_label=function_definition];
1438 [label="220_ if\n1438-if-221-222", method="buyTicket_re_ent16()", type_label=if];
6010 [label="220_ end_if", method="buyTicket_re_ent16()", type_label=end_if];
1449 [label="222_ lastPlayer_re_ent16 = msg.sender;\n1449-expression_statement-223-223", method="buyTicket_re_ent16()", type_label=expression_statement];
1455 [label="223_ jackpot_re_ent16    = address(this).balance;\n1455-expression_statement-224-224", method="buyTicket_re_ent16()", type_label=expression_statement];
1463 [label="225_ function revokeOperator(address operator) external {\n        require(operator != msg.sender, \"ERC777: revoking self as operator\");\n        if (_defaultOperators[operator]) {\n            _revokedDefaultOperators[msg.sender][operator] = true;\n        } else {\n            delete _operators[msg.sender][operator];\n        }\n        emit RevokedOperator(operator, msg.sender);\n    }\n1463-function_definition-226-234", method="revokeOperator(address operator)", type_label=function_definition];
1471 [label="226_ require(operator != msg.sender, \"ERC777: revoking self as operator\");\n1471-expression_statement-227-227", method="revokeOperator(address operator)", type_label=expression_statement];
1483 [label="227_ if\n1483-if-228-232", method="revokeOperator(address operator)", type_label=if];
6055 [label="227_ end_if", method="revokeOperator(address operator)", type_label=end_if];
1488 [label="228_ _revokedDefaultOperators[msg.sender][operator] = true;\n1488-expression_statement-229-229", method="revokeOperator(address operator)", type_label=expression_statement];
1500 [label="230_ delete _operators[msg.sender][operator];\n1500-expression_statement-231-231", method="revokeOperator(address operator)", type_label=expression_statement];
1517 [label="234_ mapping(address => uint) balances_re_ent24;\n1517-new_variable-235-235", method="", type_label=new_variable];
1523 [label="235_ function withdrawFunds_re_ent24 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent24[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent24[msg.sender] -= _weiToWithdraw;\n    }\n1523-function_definition-236-240", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=function_definition];
1531 [label="236_ require(balances_re_ent24[msg.sender] >= _weiToWithdraw);\n1531-expression_statement-237-237", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=expression_statement];
1542 [label="237_ require(msg.sender.send(_weiToWithdraw));\n1542-expression_statement-238-238", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=expression_statement];
1554 [label="238_ balances_re_ent24[msg.sender] -= _weiToWithdraw;\n1554-expression_statement-239-239", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=expression_statement];
1562 [label="240_ function defaultOperators() public view returns (address[] memory) {\n        return _defaultOperatorsArray;\n    }\n1562-function_definition-241-243", method="defaultOperators()", type_label=function_definition];
1572 [label="241_ return _defaultOperatorsArray;\n1572-return-242-242", method="defaultOperators()", type_label=return];
1574 [label="243_ mapping(address => uint) userBalance_re_ent5;\n1574-new_variable-244-244", method="", type_label=new_variable];
1580 [label="244_ function withdrawBalance_re_ent5() public{\n        if( ! (msg.sender.send(userBalance_re_ent5[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent5[msg.sender] = 0;\n    }\n1580-function_definition-245-250", method="withdrawBalance_re_ent5()", type_label=function_definition];
1584 [label="245_ if\n1584-if-246-248", method="withdrawBalance_re_ent5()", type_label=if];
6156 [label="245_ end_if", method="withdrawBalance_re_ent5()", type_label=end_if];
1602 [label="248_ userBalance_re_ent5[msg.sender] = 0;\n1602-expression_statement-249-249", method="withdrawBalance_re_ent5()", type_label=expression_statement];
1610 [label="250_ function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    )\n    external\n    {\n        require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\n        _send(msg.sender, sender, recipient, amount, data, operatorData, true);\n    }\n1610-function_definition-251-262", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
1634 [label="259_ require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\n1634-expression_statement-260-260", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1649 [label="260_ _send(msg.sender, sender, recipient, amount, data, operatorData, true);\n1649-expression_statement-261-261", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1669 [label="262_ mapping(address => uint) balances_re_ent15;\n1669-new_variable-263-263", method="", type_label=new_variable];
1675 [label="263_ function withdraw_balances_re_ent15 () public {\n       if (msg.sender.send(balances_re_ent15[msg.sender ]))\n          balances_re_ent15[msg.sender] = 0;\n      }\n1675-function_definition-264-267", method="withdraw_balances_re_ent15()", type_label=function_definition];
1679 [label="264_ if\n1679-if-265-266", method="withdraw_balances_re_ent15()", type_label=if];
6251 [label="264_ end_if", method="withdraw_balances_re_ent15()", type_label=end_if];
1692 [label="265_ balances_re_ent15[msg.sender] = 0;\n1692-expression_statement-266-266", method="withdraw_balances_re_ent15()", type_label=expression_statement];
1700 [label="267_ function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external {\n        require(isOperatorFor(msg.sender, account), \"ERC777: caller is not an operator for holder\");\n        _burn(msg.sender, account, amount, data, operatorData);\n    }\n1700-function_definition-268-271", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
1720 [label="268_ require(isOperatorFor(msg.sender, account), \"ERC777: caller is not an operator for holder\");\n1720-expression_statement-269-269", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1735 [label="269_ _burn(msg.sender, account, amount, data, operatorData);\n1735-expression_statement-270-270", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1750 [label="271_ uint256 counter_re_ent28 =0;\n1750-new_variable-272-272", method="", type_label=new_variable];
1755 [label="272_ function callme_re_ent28() public{\n        require(counter_re_ent28<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent28 += 1;\n    }\n1755-function_definition-273-279", method="callme_re_ent28()", type_label=function_definition];
1759 [label="273_ require(counter_re_ent28<=5);\n1759-expression_statement-274-274", method="callme_re_ent28()", type_label=expression_statement];
1766 [label="274_ if\n1766-if-275-277", method="callme_re_ent28()", type_label=if];
6338 [label="274_ end_if", method="callme_re_ent28()", type_label=end_if];
1781 [label="277_ counter_re_ent28 += 1;\n1781-expression_statement-278-278", method="callme_re_ent28()", type_label=expression_statement];
1785 [label="279_ function allowance(address holder, address spender) public view returns (uint256) {\n        return _allowances[holder][spender];\n    }\n1785-function_definition-280-282", method="allowance(address holder,address spender)", type_label=function_definition];
1802 [label="280_ return _allowances[holder][spender];\n1802-return-281-281", method="allowance(address holder,address spender)", type_label=return];
1808 [label="282_ bool not_called_re_ent34 = true;\n1808-new_variable-283-283", method="", type_label=new_variable];
1814 [label="283_ function bug_re_ent34() public{\n        require(not_called_re_ent34);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent34 = false;\n    }\n1814-function_definition-284-290", method="bug_re_ent34()", type_label=function_definition];
1818 [label="284_ require(not_called_re_ent34);\n1818-expression_statement-285-285", method="bug_re_ent34()", type_label=expression_statement];
1823 [label="285_ if\n1823-if-286-288", method="bug_re_ent34()", type_label=if];
6395 [label="285_ end_if", method="bug_re_ent34()", type_label=end_if];
1838 [label="288_ not_called_re_ent34 = false;\n1838-expression_statement-289-289", method="bug_re_ent34()", type_label=expression_statement];
1843 [label="290_ function approve(address spender, uint256 value) external returns (bool) {\n        address holder = msg.sender;\n        _approve(holder, spender, value);\n        return true;\n    }\n1843-function_definition-291-295", method="approve(address spender,uint256 value)", type_label=function_definition];
1859 [label="291_ address holder = msg.sender;\n1859-new_variable-292-292", method="approve(address spender,uint256 value)", type_label=new_variable];
1867 [label="292_ _approve(holder, spender, value);\n1867-expression_statement-293-293", method="approve(address spender,uint256 value)", type_label=expression_statement];
1876 [label="293_ return true;\n1876-return-294-294", method="approve(address spender,uint256 value)", type_label=return];
1879 [label="295_ uint256 counter_re_ent21 =0;\n1879-new_variable-296-296", method="", type_label=new_variable];
1884 [label="296_ function callme_re_ent21() public{\n        require(counter_re_ent21<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent21 += 1;\n    }\n1884-function_definition-297-303", method="callme_re_ent21()", type_label=function_definition];
1888 [label="297_ require(counter_re_ent21<=5);\n1888-expression_statement-298-298", method="callme_re_ent21()", type_label=expression_statement];
1895 [label="298_ if\n1895-if-299-301", method="callme_re_ent21()", type_label=if];
6467 [label="298_ end_if", method="callme_re_ent21()", type_label=end_if];
1910 [label="301_ counter_re_ent21 += 1;\n1910-expression_statement-302-302", method="callme_re_ent21()", type_label=expression_statement];
1914 [label="303_ function transferFrom(address holder, address recipient, uint256 amount) external returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n        require(holder != address(0), \"ERC777: transfer from the zero address\");\n        address spender = msg.sender;\n        _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n        _move(spender, holder, recipient, amount, \"\", \"\");\n        _approve(holder, spender, _allowances[holder][spender].sub(amount));\n        _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n        return true;\n    }\n1914-function_definition-304-313", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=function_definition];
1934 [label="304_ require(recipient != address(0), \"ERC777: transfer to the zero address\");\n1934-expression_statement-305-305", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1946 [label="305_ require(holder != address(0), \"ERC777: transfer from the zero address\");\n1946-expression_statement-306-306", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1958 [label="306_ address spender = msg.sender;\n1958-new_variable-307-307", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=new_variable];
1966 [label="307_ _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n1966-expression_statement-308-308", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1983 [label="308_ _move(spender, holder, recipient, amount, \"\", \"\");\n1983-expression_statement-309-309", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
2000 [label="309_ _approve(holder, spender, _allowances[holder][spender].sub(amount));\n2000-expression_statement-310-310", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
2018 [label="310_ _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n2018-expression_statement-311-311", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
2038 [label="311_ return true;\n2038-return-312-312", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=return];
2041 [label="313_ mapping(address => uint) balances_re_ent10;\n2041-new_variable-314-314", method="", type_label=new_variable];
2047 [label="314_ function withdrawFunds_re_ent10 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent10[msg.sender] -= _weiToWithdraw;\n    }\n2047-function_definition-315-319", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=function_definition];
2055 [label="315_ require(balances_re_ent10[msg.sender] >= _weiToWithdraw);\n2055-expression_statement-316-316", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
2066 [label="316_ require(msg.sender.send(_weiToWithdraw));\n2066-expression_statement-317-317", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
2078 [label="317_ balances_re_ent10[msg.sender] -= _weiToWithdraw;\n2078-expression_statement-318-318", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
2086 [label="319_ function _mint(\n        address operator,\n        address account,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n    internal\n    {\n        require(account != address(0), \"ERC777: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n        emit Minted(operator, account, amount, userData, operatorData);\n        emit Transfer(address(0), account, amount);\n    }\n2086-function_definition-320-335", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
2110 [label="328_ require(account != address(0), \"ERC777: mint to the zero address\");\n2110-expression_statement-329-329", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2122 [label="329_ _totalSupply = _totalSupply.add(amount);\n2122-expression_statement-330-330", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2131 [label="330_ _balances[account] = _balances[account].add(amount);\n2131-expression_statement-331-331", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2144 [label="331_ _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n2144-expression_statement-332-332", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2186 [label="335_ mapping(address => uint) balances_re_ent21;\n2186-new_variable-336-336", method="", type_label=new_variable];
2192 [label="336_ function withdraw_balances_re_ent21 () public {\n       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent21[msg.sender] = 0;\n      }\n2192-function_definition-337-341", method="withdraw_balances_re_ent21()", type_label=function_definition];
2196 [label="337_ (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n2196-new_variable-338-338", method="withdraw_balances_re_ent21()", type_label=new_variable];
2220 [label="338_ if\n2220-if-339-340", method="withdraw_balances_re_ent21()", type_label=if];
6792 [label="338_ end_if", method="withdraw_balances_re_ent21()", type_label=end_if];
2222 [label="339_ balances_re_ent21[msg.sender] = 0;\n2222-expression_statement-340-340", method="withdraw_balances_re_ent21()", type_label=expression_statement];
2230 [label="341_ function _send(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        require(from != address(0), \"ERC777: send from the zero address\");\n        require(to != address(0), \"ERC777: send to the zero address\");\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n        _move(operator, from, to, amount, userData, operatorData);\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n    }\n2230-function_definition-342-358", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=function_definition];
2262 [label="352_ require(from != address(0), \"ERC777: send from the zero address\");\n2262-expression_statement-353-353", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2274 [label="353_ require(to != address(0), \"ERC777: send to the zero address\");\n2274-expression_statement-354-354", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2286 [label="354_ _callTokensToSend(operator, from, to, amount, userData, operatorData);\n2286-expression_statement-355-355", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2301 [label="355_ _move(operator, from, to, amount, userData, operatorData);\n2301-expression_statement-356-356", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2316 [label="356_ _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n2316-expression_statement-357-357", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2333 [label="358_ mapping(address => uint) userBalance_re_ent12;\n2333-new_variable-359-359", method="", type_label=new_variable];
2339 [label="359_ function withdrawBalance_re_ent12() public{\n        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent12[msg.sender] = 0;\n    }\n2339-function_definition-360-365", method="withdrawBalance_re_ent12()", type_label=function_definition];
2343 [label="360_ if\n2343-if-361-363", method="withdrawBalance_re_ent12()", type_label=if];
6915 [label="360_ end_if", method="withdrawBalance_re_ent12()", type_label=end_if];
2361 [label="363_ userBalance_re_ent12[msg.sender] = 0;\n2361-expression_statement-364-364", method="withdrawBalance_re_ent12()", type_label=expression_statement];
2369 [label="365_ function _burn(\n        address operator,\n        address from,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    )\n        private\n    {\n        require(from != address(0), \"ERC777: burn from the zero address\");\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[from] = _balances[from].sub(amount);\n        emit Burned(operator, from, amount, data, operatorData);\n        emit Transfer(from, address(0), amount);\n    }\n2369-function_definition-366-381", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=function_definition];
2393 [label="374_ require(from != address(0), \"ERC777: burn from the zero address\");\n2393-expression_statement-375-375", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2405 [label="375_ _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n2405-expression_statement-376-376", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2422 [label="376_ _totalSupply = _totalSupply.sub(amount);\n2422-expression_statement-377-377", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2431 [label="377_ _balances[from] = _balances[from].sub(amount);\n2431-expression_statement-378-378", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2466 [label="381_ mapping(address => uint) redeemableEther_re_ent11;\n2466-new_variable-382-382", method="", type_label=new_variable];
2472 [label="382_ function claimReward_re_ent11() public {        \n        require(redeemableEther_re_ent11[msg.sender] > 0);\n        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n        msg.sender.transfer(transferValue_re_ent11);    \n        redeemableEther_re_ent11[msg.sender] = 0;\n    }\n2472-function_definition-383-388", method="claimReward_re_ent11()", type_label=function_definition];
2476 [label="383_ require(redeemableEther_re_ent11[msg.sender] > 0);\n2476-expression_statement-384-384", method="claimReward_re_ent11()", type_label=expression_statement];
2487 [label="384_ uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n2487-new_variable-385-385", method="claimReward_re_ent11()", type_label=new_variable];
2497 [label="385_ msg.sender.transfer(transferValue_re_ent11);\n2497-expression_statement-386-386", method="claimReward_re_ent11()", type_label=expression_statement];
2506 [label="386_ redeemableEther_re_ent11[msg.sender] = 0;\n2506-expression_statement-387-387", method="claimReward_re_ent11()", type_label=expression_statement];
2514 [label="388_ function _move(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        _balances[from] = _balances[from].sub(amount);\n        _balances[to] = _balances[to].add(amount);\n        emit Sent(operator, from, to, amount, userData, operatorData);\n        emit Transfer(from, to, amount);\n    }\n2514-function_definition-389-403", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
2542 [label="398_ _balances[from] = _balances[from].sub(amount);\n2542-expression_statement-399-399", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2555 [label="399_ _balances[to] = _balances[to].add(amount);\n2555-expression_statement-400-400", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2590 [label="403_ mapping(address => uint) balances_re_ent1;\n2590-new_variable-404-404", method="", type_label=new_variable];
2596 [label="404_ function withdraw_balances_re_ent1 () public {\n       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent1[msg.sender] = 0;\n      }\n2596-function_definition-405-409", method="withdraw_balances_re_ent1()", type_label=function_definition];
2600 [label="405_ (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n2600-new_variable-406-406", method="withdraw_balances_re_ent1()", type_label=new_variable];
2624 [label="406_ if\n2624-if-407-408", method="withdraw_balances_re_ent1()", type_label=if];
7196 [label="406_ end_if", method="withdraw_balances_re_ent1()", type_label=end_if];
2626 [label="407_ balances_re_ent1[msg.sender] = 0;\n2626-expression_statement-408-408", method="withdraw_balances_re_ent1()", type_label=expression_statement];
2634 [label="409_ function _approve(address holder, address spender, uint256 value) private {\n        require(spender != address(0), \"ERC777: approve to the zero address\");\n        _allowances[holder][spender] = value;\n        emit Approval(holder, spender, value);\n    }\n2634-function_definition-410-414", method="_approve(address holder,address spender,uint256 value)", type_label=function_definition];
2650 [label="410_ require(spender != address(0), \"ERC777: approve to the zero address\");\n2650-expression_statement-411-411", method="_approve(address holder,address spender,uint256 value)", type_label=expression_statement];
2662 [label="411_ _allowances[holder][spender] = value;\n2662-expression_statement-412-412", method="_approve(address holder,address spender,uint256 value)", type_label=expression_statement];
2678 [label="414_ bool not_called_re_ent41 = true;\n2678-new_variable-415-415", method="", type_label=new_variable];
2684 [label="415_ function bug_re_ent41() public{\n        require(not_called_re_ent41);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent41 = false;\n    }\n2684-function_definition-416-422", method="bug_re_ent41()", type_label=function_definition];
2688 [label="416_ require(not_called_re_ent41);\n2688-expression_statement-417-417", method="bug_re_ent41()", type_label=expression_statement];
2693 [label="417_ if\n2693-if-418-420", method="bug_re_ent41()", type_label=if];
7265 [label="417_ end_if", method="bug_re_ent41()", type_label=end_if];
2708 [label="420_ not_called_re_ent41 = false;\n2708-expression_statement-421-421", method="bug_re_ent41()", type_label=expression_statement];
2713 [label="422_ function _callTokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n        }\n    }\n2713-function_definition-423-437", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
2741 [label="432_ address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\n2741-new_variable-433-433", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=new_variable];
2754 [label="433_ if_implementer != address(0)\n2754-if-434-436", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=if];
7326 [label="433_ end_if", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=end_if];
2761 [label="434_ IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n2761-expression_statement-435-435", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2781 [label="437_ uint256 counter_re_ent42 =0;\n2781-new_variable-438-438", method="", type_label=new_variable];
2786 [label="438_ function callme_re_ent42() public{\n        require(counter_re_ent42<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent42 += 1;\n    }\n2786-function_definition-439-445", method="callme_re_ent42()", type_label=function_definition];
2790 [label="439_ require(counter_re_ent42<=5);\n2790-expression_statement-440-440", method="callme_re_ent42()", type_label=expression_statement];
2797 [label="440_ if\n2797-if-441-443", method="callme_re_ent42()", type_label=if];
7369 [label="440_ end_if", method="callme_re_ent42()", type_label=end_if];
2812 [label="443_ counter_re_ent42 += 1;\n2812-expression_statement-444-444", method="callme_re_ent42()", type_label=expression_statement];
2816 [label="445_ function _callTokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n        } else if (requireReceptionAck) {\n            require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n        }\n    }\n2816-function_definition-446-463", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=function_definition];
2848 [label="456_ address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\n2848-new_variable-457-457", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=new_variable];
2861 [label="457_ if_implementer != address(0)\n2861-if-458-462", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=if];
7433 [label="457_ end_if", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=end_if];
2868 [label="458_ IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n2868-expression_statement-459-459", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2888 [label="459_ if\n2888-if-460-462", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=if];
2891 [label="460_ require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n2891-expression_statement-461-461", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2903 [label="463_ address payable lastPlayer_re_ent2;\n2903-new_variable-464-464", method="", type_label=new_variable];
2907 [label="464_ uint jackpot_re_ent2;\n2907-new_variable-465-465", method="", type_label=new_variable];
2911 [label="465_ function buyTicket_re_ent2() public{\n	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))\n        revert();\n      lastPlayer_re_ent2 = msg.sender;\n      jackpot_re_ent2    = address(this).balance;\n    }\n2911-function_definition-466-471", method="buyTicket_re_ent2()", type_label=function_definition];
2915 [label="466_ if\n2915-if-467-468", method="buyTicket_re_ent2()", type_label=if];
7487 [label="466_ end_if", method="buyTicket_re_ent2()", type_label=end_if];
2926 [label="468_ lastPlayer_re_ent2 = msg.sender;\n2926-expression_statement-469-469", method="buyTicket_re_ent2()", type_label=expression_statement];
2932 [label="469_ jackpot_re_ent2    = address(this).balance;\n2932-expression_statement-470-470", method="buyTicket_re_ent2()", type_label=expression_statement];
2943 [label="473_ struct Role {\n        mapping (address => bool) bearer;\n    }\n2943-expression_statement-474-476", method="Role()", type_label=expression_statement];
2951 [label="476_ function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n2951-function_definition-477-480", method="add(Role storage role,address account)", type_label=function_definition];
2964 [label="477_ require(!has(role, account), \"Roles: account already has role\");\n2964-expression_statement-478-478", method="add(Role storage role,address account)", type_label=expression_statement];
2978 [label="478_ role.bearer[account] = true;\n2978-expression_statement-479-479", method="add(Role storage role,address account)", type_label=expression_statement];
2987 [label="480_ function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n2987-function_definition-481-484", method="remove(Role storage role,address account)", type_label=function_definition];
3000 [label="481_ require(has(role, account), \"Roles: account does not have role\");\n3000-expression_statement-482-482", method="remove(Role storage role,address account)", type_label=expression_statement];
3013 [label="482_ role.bearer[account] = false;\n3013-expression_statement-483-483", method="remove(Role storage role,address account)", type_label=expression_statement];
3022 [label="484_ function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n3022-function_definition-485-488", method="has(Role storage role,address account)", type_label=function_definition];
3040 [label="485_ require(account != address(0), \"Roles: account is the zero address\");\n3040-expression_statement-486-486", method="has(Role storage role,address account)", type_label=expression_statement];
3052 [label="486_ return role.bearer[account];\n3052-return-487-487", method="has(Role storage role,address account)", type_label=return];
3068 [label="491_ uint256 counter_re_ent35 =0;\n3068-new_variable-492-492", method="", type_label=new_variable];
3073 [label="492_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n3073-function_definition-493-499", method="callme_re_ent35()", type_label=function_definition];
3077 [label="493_ require(counter_re_ent35<=5);\n3077-expression_statement-494-494", method="callme_re_ent35()", type_label=expression_statement];
3084 [label="494_ if\n3084-if-495-497", method="callme_re_ent35()", type_label=if];
7656 [label="494_ end_if", method="callme_re_ent35()", type_label=end_if];
3099 [label="497_ counter_re_ent35 += 1;\n3099-expression_statement-498-498", method="callme_re_ent35()", type_label=expression_statement];
3109 [label="500_ mapping(address => uint) userBalance_re_ent40;\n3109-new_variable-501-501", method="", type_label=new_variable];
3115 [label="501_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n3115-function_definition-502-508", method="withdrawBalance_re_ent40()", type_label=function_definition];
3119 [label="502_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n3119-new_variable-503-503", method="withdrawBalance_re_ent40()", type_label=new_variable];
3143 [label="503_ if\n3143-if-504-506", method="withdrawBalance_re_ent40()", type_label=if];
7715 [label="503_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
3149 [label="506_ userBalance_re_ent40[msg.sender] = 0;\n3149-expression_statement-507-507", method="withdrawBalance_re_ent40()", type_label=expression_statement];
3163 [label="509_ Roles.Role private _minters;\n3163-new_variable-510-510", method="", type_label=new_variable];
3172 [label="511_ _addMinter(msg.sender);\n3172-expression_statement-512-512", method="", type_label=expression_statement];
3179 [label="513_ mapping(address => uint) balances_re_ent17;\n3179-new_variable-514-514", method="", type_label=new_variable];
3185 [label="514_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n3185-function_definition-515-520", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
3193 [label="515_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n3193-expression_statement-516-516", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
3204 [label="516_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n3204-new_variable-517-517", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
3224 [label="517_ require(success);\n3224-expression_statement-518-518", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
3229 [label="518_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n3229-expression_statement-519-519", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
3237 [label="520_ modifier onlyMinter() {\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n        _;\n    }\n3237-expression_statement-521-524", method="", type_label=expression_statement];
3240 [label="521_ require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n3240-expression_statement-522-522", method="", type_label=expression_statement];
3253 [label="522_ _;\n3253-expression_statement-523-523", method="", type_label=expression_statement];
3255 [label="524_ function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n3255-function_definition-525-527", method="isMinter(address account)", type_label=function_definition];
3268 [label="525_ return _minters.has(account);\n3268-return-526-526", method="isMinter(address account)", type_label=return];
3275 [label="527_ address payable lastPlayer_re_ent37;\n3275-new_variable-528-528", method="", type_label=new_variable];
3279 [label="528_ uint jackpot_re_ent37;\n3279-new_variable-529-529", method="", type_label=new_variable];
3283 [label="529_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n3283-function_definition-530-535", method="buyTicket_re_ent37()", type_label=function_definition];
3287 [label="530_ if\n3287-if-531-532", method="buyTicket_re_ent37()", type_label=if];
7859 [label="530_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
3298 [label="532_ lastPlayer_re_ent37 = msg.sender;\n3298-expression_statement-533-533", method="buyTicket_re_ent37()", type_label=expression_statement];
3304 [label="533_ jackpot_re_ent37    = address(this).balance;\n3304-expression_statement-534-534", method="buyTicket_re_ent37()", type_label=expression_statement];
3312 [label="535_ function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n3312-function_definition-536-538", method="addMinter(address account)", type_label=function_definition];
3319 [label="535_ onlyMinter\n3319-expression_statement-536-536", method="addMinter(address account)", type_label=expression_statement];
3322 [label="536_ _addMinter(account);\n3322-expression_statement-537-537", method="addMinter(address account)", type_label=expression_statement];
3327 [label="538_ mapping(address => uint) balances_re_ent3;\n3327-new_variable-539-539", method="", type_label=new_variable];
3333 [label="539_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n3333-function_definition-540-545", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
3341 [label="540_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n3341-expression_statement-541-541", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
3352 [label="541_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n3352-new_variable-542-542", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
3372 [label="542_ require(success);\n3372-expression_statement-543-543", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
3377 [label="543_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n3377-expression_statement-544-544", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
3385 [label="545_ function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n3385-function_definition-546-548", method="renounceMinter()", type_label=function_definition];
3389 [label="546_ _removeMinter(msg.sender);\n3389-expression_statement-547-547", method="renounceMinter()", type_label=expression_statement];
3396 [label="548_ address payable lastPlayer_re_ent9;\n3396-new_variable-549-549", method="", type_label=new_variable];
3400 [label="549_ uint jackpot_re_ent9;\n3400-new_variable-550-550", method="", type_label=new_variable];
3404 [label="550_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n3404-function_definition-551-557", method="buyTicket_re_ent9()", type_label=function_definition];
3408 [label="551_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n3408-new_variable-552-552", method="buyTicket_re_ent9()", type_label=new_variable];
3426 [label="552_ if\n3426-if-553-554", method="buyTicket_re_ent9()", type_label=if];
7998 [label="552_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
3431 [label="554_ lastPlayer_re_ent9 = msg.sender;\n3431-expression_statement-555-555", method="buyTicket_re_ent9()", type_label=expression_statement];
3437 [label="555_ jackpot_re_ent9    = address(this).balance;\n3437-expression_statement-556-556", method="buyTicket_re_ent9()", type_label=expression_statement];
3445 [label="557_ function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n3445-function_definition-558-561", method="_addMinter(address account)", type_label=function_definition];
3453 [label="558_ _minters.add(account);\n3453-expression_statement-559-559", method="_addMinter(address account)", type_label=expression_statement];
3464 [label="561_ mapping(address => uint) redeemableEther_re_ent25;\n3464-new_variable-562-562", method="", type_label=new_variable];
3470 [label="562_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n3470-function_definition-563-568", method="claimReward_re_ent25()", type_label=function_definition];
3474 [label="563_ require(redeemableEther_re_ent25[msg.sender] > 0);\n3474-expression_statement-564-564", method="claimReward_re_ent25()", type_label=expression_statement];
3485 [label="564_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n3485-new_variable-565-565", method="claimReward_re_ent25()", type_label=new_variable];
3495 [label="565_ msg.sender.transfer(transferValue_re_ent25);\n3495-expression_statement-566-566", method="claimReward_re_ent25()", type_label=expression_statement];
3504 [label="566_ redeemableEther_re_ent25[msg.sender] = 0;\n3504-expression_statement-567-567", method="claimReward_re_ent25()", type_label=expression_statement];
3512 [label="568_ function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n3512-function_definition-569-572", method="_removeMinter(address account)", type_label=function_definition];
3520 [label="569_ _minters.remove(account);\n3520-expression_statement-570-570", method="_removeMinter(address account)", type_label=expression_statement];
3531 [label="572_ mapping(address => uint) userBalance_re_ent19;\n3531-new_variable-573-573", method="", type_label=new_variable];
3537 [label="573_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n3537-function_definition-574-579", method="withdrawBalance_re_ent19()", type_label=function_definition];
3541 [label="574_ if\n3541-if-575-577", method="withdrawBalance_re_ent19()", type_label=if];
8113 [label="574_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
3559 [label="577_ userBalance_re_ent19[msg.sender] = 0;\n3559-expression_statement-578-578", method="withdrawBalance_re_ent19()", type_label=expression_statement];
3577 [label="582_ mapping(address => uint) userBalance_re_ent33;\n3577-new_variable-583-583", method="", type_label=new_variable];
3583 [label="583_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n3583-function_definition-584-590", method="withdrawBalance_re_ent33()", type_label=function_definition];
3587 [label="584_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n3587-new_variable-585-585", method="withdrawBalance_re_ent33()", type_label=new_variable];
3611 [label="585_ if\n3611-if-586-588", method="withdrawBalance_re_ent33()", type_label=if];
8183 [label="585_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
3617 [label="588_ userBalance_re_ent33[msg.sender] = 0;\n3617-expression_statement-589-589", method="withdrawBalance_re_ent33()", type_label=expression_statement];
3631 [label="591_ bool not_called_re_ent27 = true;\n3631-new_variable-592-592", method="", type_label=new_variable];
3637 [label="592_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n3637-function_definition-593-599", method="bug_re_ent27()", type_label=function_definition];
3641 [label="593_ require(not_called_re_ent27);\n3641-expression_statement-594-594", method="bug_re_ent27()", type_label=expression_statement];
3646 [label="594_ if\n3646-if-595-597", method="bug_re_ent27()", type_label=if];
8218 [label="594_ end_if", method="bug_re_ent27()", type_label=end_if];
3661 [label="597_ not_called_re_ent27 = false;\n3661-expression_statement-598-598", method="bug_re_ent27()", type_label=expression_statement];
3672 [label="600_ Roles.Role private _pausers;\n3672-new_variable-601-601", method="", type_label=new_variable];
3681 [label="602_ _addPauser(msg.sender);\n3681-expression_statement-603-603", method="", type_label=expression_statement];
3688 [label="604_ mapping(address => uint) userBalance_re_ent26;\n3688-new_variable-605-605", method="", type_label=new_variable];
3694 [label="605_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n3694-function_definition-606-612", method="withdrawBalance_re_ent26()", type_label=function_definition];
3698 [label="606_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n3698-new_variable-607-607", method="withdrawBalance_re_ent26()", type_label=new_variable];
3722 [label="607_ if\n3722-if-608-610", method="withdrawBalance_re_ent26()", type_label=if];
8294 [label="607_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
3728 [label="610_ userBalance_re_ent26[msg.sender] = 0;\n3728-expression_statement-611-611", method="withdrawBalance_re_ent26()", type_label=expression_statement];
3736 [label="612_ modifier onlyPauser() {\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n3736-expression_statement-613-616", method="", type_label=expression_statement];
3739 [label="613_ require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n3739-expression_statement-614-614", method="", type_label=expression_statement];
3752 [label="614_ _;\n3752-expression_statement-615-615", method="", type_label=expression_statement];
3754 [label="616_ function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n3754-function_definition-617-619", method="isPauser(address account)", type_label=function_definition];
3767 [label="617_ return _pausers.has(account);\n3767-return-618-618", method="isPauser(address account)", type_label=return];
3774 [label="619_ bool not_called_re_ent20 = true;\n3774-new_variable-620-620", method="", type_label=new_variable];
3780 [label="620_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n3780-function_definition-621-627", method="bug_re_ent20()", type_label=function_definition];
3784 [label="621_ require(not_called_re_ent20);\n3784-expression_statement-622-622", method="bug_re_ent20()", type_label=expression_statement];
3789 [label="622_ if\n3789-if-623-625", method="bug_re_ent20()", type_label=if];
8361 [label="622_ end_if", method="bug_re_ent20()", type_label=end_if];
3804 [label="625_ not_called_re_ent20 = false;\n3804-expression_statement-626-626", method="bug_re_ent20()", type_label=expression_statement];
3809 [label="627_ function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n3809-function_definition-628-630", method="addPauser(address account)", type_label=function_definition];
3816 [label="627_ onlyPauser\n3816-expression_statement-628-628", method="addPauser(address account)", type_label=expression_statement];
3819 [label="628_ _addPauser(account);\n3819-expression_statement-629-629", method="addPauser(address account)", type_label=expression_statement];
3824 [label="630_ mapping(address => uint) redeemableEther_re_ent32;\n3824-new_variable-631-631", method="", type_label=new_variable];
3830 [label="631_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n3830-function_definition-632-637", method="claimReward_re_ent32()", type_label=function_definition];
3834 [label="632_ require(redeemableEther_re_ent32[msg.sender] > 0);\n3834-expression_statement-633-633", method="claimReward_re_ent32()", type_label=expression_statement];
3845 [label="633_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n3845-new_variable-634-634", method="claimReward_re_ent32()", type_label=new_variable];
3855 [label="634_ msg.sender.transfer(transferValue_re_ent32);\n3855-expression_statement-635-635", method="claimReward_re_ent32()", type_label=expression_statement];
3864 [label="635_ redeemableEther_re_ent32[msg.sender] = 0;\n3864-expression_statement-636-636", method="claimReward_re_ent32()", type_label=expression_statement];
3872 [label="637_ function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n3872-function_definition-638-640", method="renouncePauser()", type_label=function_definition];
3876 [label="638_ _removePauser(msg.sender);\n3876-expression_statement-639-639", method="renouncePauser()", type_label=expression_statement];
3883 [label="640_ mapping(address => uint) balances_re_ent38;\n3883-new_variable-641-641", method="", type_label=new_variable];
3889 [label="641_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n3889-function_definition-642-646", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
3897 [label="642_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n3897-expression_statement-643-643", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
3908 [label="643_ require(msg.sender.send(_weiToWithdraw));\n3908-expression_statement-644-644", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
3920 [label="644_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n3920-expression_statement-645-645", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
3928 [label="646_ function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n3928-function_definition-647-650", method="_addPauser(address account)", type_label=function_definition];
3936 [label="647_ _pausers.add(account);\n3936-expression_statement-648-648", method="_addPauser(address account)", type_label=expression_statement];
3947 [label="650_ mapping(address => uint) redeemableEther_re_ent4;\n3947-new_variable-651-651", method="", type_label=new_variable];
3953 [label="651_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n3953-function_definition-652-657", method="claimReward_re_ent4()", type_label=function_definition];
3957 [label="652_ require(redeemableEther_re_ent4[msg.sender] > 0);\n3957-expression_statement-653-653", method="claimReward_re_ent4()", type_label=expression_statement];
3968 [label="653_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n3968-new_variable-654-654", method="claimReward_re_ent4()", type_label=new_variable];
3978 [label="654_ msg.sender.transfer(transferValue_re_ent4);\n3978-expression_statement-655-655", method="claimReward_re_ent4()", type_label=expression_statement];
3987 [label="655_ redeemableEther_re_ent4[msg.sender] = 0;\n3987-expression_statement-656-656", method="claimReward_re_ent4()", type_label=expression_statement];
3995 [label="657_ function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n3995-function_definition-658-661", method="_removePauser(address account)", type_label=function_definition];
4003 [label="658_ _pausers.remove(account);\n4003-expression_statement-659-659", method="_removePauser(address account)", type_label=expression_statement];
4014 [label="661_ uint256 counter_re_ent7 =0;\n4014-new_variable-662-662", method="", type_label=new_variable];
4019 [label="662_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n4019-function_definition-663-669", method="callme_re_ent7()", type_label=function_definition];
4023 [label="663_ require(counter_re_ent7<=5);\n4023-expression_statement-664-664", method="callme_re_ent7()", type_label=expression_statement];
4030 [label="664_ if\n4030-if-665-667", method="callme_re_ent7()", type_label=if];
8602 [label="664_ end_if", method="callme_re_ent7()", type_label=end_if];
4045 [label="667_ counter_re_ent7 += 1;\n4045-expression_statement-668-668", method="callme_re_ent7()", type_label=expression_statement];
4055 [label="671_ mapping(address => uint) balances_re_ent31;\n4055-new_variable-672-672", method="", type_label=new_variable];
4061 [label="672_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n4061-function_definition-673-677", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
4069 [label="673_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n4069-expression_statement-674-674", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
4080 [label="674_ require(msg.sender.send(_weiToWithdraw));\n4080-expression_statement-675-675", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
4092 [label="675_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n4092-expression_statement-676-676", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
4106 [label="678_ bool not_called_re_ent13 = true;\n4106-new_variable-679-679", method="", type_label=new_variable];
4112 [label="679_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n4112-function_definition-680-687", method="bug_re_ent13()", type_label=function_definition];
4116 [label="680_ require(not_called_re_ent13);\n4116-expression_statement-681-681", method="bug_re_ent13()", type_label=expression_statement];
4121 [label="681_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n4121-new_variable-682-682", method="bug_re_ent13()", type_label=new_variable];
4142 [label="682_ if\n4142-if-683-685", method="bug_re_ent13()", type_label=if];
8714 [label="682_ end_if", method="bug_re_ent13()", type_label=end_if];
4148 [label="685_ not_called_re_ent13 = false;\n4148-expression_statement-686-686", method="bug_re_ent13()", type_label=expression_statement];
4159 [label="688_ bool private _paused;\n4159-new_variable-689-689", method="", type_label=new_variable];
4166 [label="690_ _paused = false;\n4166-expression_statement-691-691", method="", type_label=expression_statement];
4171 [label="692_ address payable lastPlayer_re_ent23;\n4171-new_variable-693-693", method="", type_label=new_variable];
4175 [label="693_ uint jackpot_re_ent23;\n4175-new_variable-694-694", method="", type_label=new_variable];
4179 [label="694_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n4179-function_definition-695-700", method="buyTicket_re_ent23()", type_label=function_definition];
4183 [label="695_ if\n4183-if-696-697", method="buyTicket_re_ent23()", type_label=if];
8755 [label="695_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
4194 [label="697_ lastPlayer_re_ent23 = msg.sender;\n4194-expression_statement-698-698", method="buyTicket_re_ent23()", type_label=expression_statement];
4200 [label="698_ jackpot_re_ent23    = address(this).balance;\n4200-expression_statement-699-699", method="buyTicket_re_ent23()", type_label=expression_statement];
4208 [label="700_ function paused() public view returns (bool) {\n        return _paused;\n    }\n4208-function_definition-701-703", method="paused()", type_label=function_definition];
4217 [label="701_ return _paused;\n4217-return-702-702", method="paused()", type_label=return];
4219 [label="703_ uint256 counter_re_ent14 =0;\n4219-new_variable-704-704", method="", type_label=new_variable];
4224 [label="704_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n4224-function_definition-705-711", method="callme_re_ent14()", type_label=function_definition];
4228 [label="705_ require(counter_re_ent14<=5);\n4228-expression_statement-706-706", method="callme_re_ent14()", type_label=expression_statement];
4235 [label="706_ if\n4235-if-707-709", method="callme_re_ent14()", type_label=if];
8807 [label="706_ end_if", method="callme_re_ent14()", type_label=end_if];
4250 [label="709_ counter_re_ent14 += 1;\n4250-expression_statement-710-710", method="callme_re_ent14()", type_label=expression_statement];
4254 [label="711_ modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n4254-expression_statement-712-715", method="", type_label=expression_statement];
4257 [label="712_ require(!_paused, \"Pausable: paused\");\n4257-expression_statement-713-713", method="", type_label=expression_statement];
4266 [label="713_ _;\n4266-expression_statement-714-714", method="", type_label=expression_statement];
4268 [label="715_ modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n4268-expression_statement-716-719", method="", type_label=expression_statement];
4271 [label="716_ require(_paused, \"Pausable: not paused\");\n4271-expression_statement-717-717", method="", type_label=expression_statement];
4279 [label="717_ _;\n4279-expression_statement-718-718", method="", type_label=expression_statement];
4281 [label="719_ function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n4281-function_definition-720-723", method="pause()", type_label=function_definition];
4284 [label="719_ onlyPauser\n4284-expression_statement-720-720", method="pause()", type_label=expression_statement];
4286 [label="719_ whenNotPaused\n4286-expression_statement-720-720", method="pause()", type_label=expression_statement];
4289 [label="720_ _paused = true;\n4289-expression_statement-721-721", method="pause()", type_label=expression_statement];
4300 [label="723_ address payable lastPlayer_re_ent30;\n4300-new_variable-724-724", method="", type_label=new_variable];
4304 [label="724_ uint jackpot_re_ent30;\n4304-new_variable-725-725", method="", type_label=new_variable];
4308 [label="725_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n4308-function_definition-726-731", method="buyTicket_re_ent30()", type_label=function_definition];
4312 [label="726_ if\n4312-if-727-728", method="buyTicket_re_ent30()", type_label=if];
8884 [label="726_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
4323 [label="728_ lastPlayer_re_ent30 = msg.sender;\n4323-expression_statement-729-729", method="buyTicket_re_ent30()", type_label=expression_statement];
4329 [label="729_ jackpot_re_ent30    = address(this).balance;\n4329-expression_statement-730-730", method="buyTicket_re_ent30()", type_label=expression_statement];
4337 [label="731_ function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n4337-function_definition-732-735", method="unpause()", type_label=function_definition];
4340 [label="731_ onlyPauser\n4340-expression_statement-732-732", method="unpause()", type_label=expression_statement];
4342 [label="731_ whenPaused\n4342-expression_statement-732-732", method="unpause()", type_label=expression_statement];
4345 [label="732_ _paused = false;\n4345-expression_statement-733-733", method="unpause()", type_label=expression_statement];
4356 [label="735_ mapping(address => uint) balances_re_ent8;\n4356-new_variable-736-736", method="", type_label=new_variable];
4362 [label="736_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n4362-function_definition-737-741", method="withdraw_balances_re_ent8()", type_label=function_definition];
4366 [label="737_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n4366-new_variable-738-738", method="withdraw_balances_re_ent8()", type_label=new_variable];
4390 [label="738_ if\n4390-if-739-740", method="withdraw_balances_re_ent8()", type_label=if];
8962 [label="738_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
4392 [label="739_ balances_re_ent8[msg.sender] = 0;\n4392-expression_statement-740-740", method="withdraw_balances_re_ent8()", type_label=expression_statement];
4422 [label="747_ ERC777(\"SKYBIT\", \"SKYBIT\", defaultOperators)\n4422-expression_statement-748-748", method="", type_label=expression_statement];
4433 [label="749_ _mint(msg.sender, msg.sender, initialSupply, \"\", \"\");\n4433-expression_statement-750-750", method="", type_label=expression_statement];
4452 [label="751_ mapping(address => uint) redeemableEther_re_ent39;\n4452-new_variable-752-752", method="", type_label=new_variable];
4458 [label="752_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n4458-function_definition-753-758", method="claimReward_re_ent39()", type_label=function_definition];
4462 [label="753_ require(redeemableEther_re_ent39[msg.sender] > 0);\n4462-expression_statement-754-754", method="claimReward_re_ent39()", type_label=expression_statement];
4473 [label="754_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n4473-new_variable-755-755", method="claimReward_re_ent39()", type_label=new_variable];
4483 [label="755_ msg.sender.transfer(transferValue_re_ent39);\n4483-expression_statement-756-756", method="claimReward_re_ent39()", type_label=expression_statement];
4492 [label="756_ redeemableEther_re_ent39[msg.sender] = 0;\n4492-expression_statement-757-757", method="claimReward_re_ent39()", type_label=expression_statement];
4500 [label="758_ function mint(address operator, address account, uint256 amount, bytes memory userData, bytes memory operatorData) public onlyMinter returns (bool) {\n        _mint(operator, account, amount, userData, operatorData);\n        return true;\n    }\n4500-function_definition-759-762", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
4523 [label="758_ onlyMinter\n4523-expression_statement-759-759", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
4530 [label="759_ _mint(operator, account, amount, userData, operatorData);\n4530-expression_statement-760-760", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
4543 [label="760_ return true;\n4543-return-761-761", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=return];
4546 [label="762_ mapping(address => uint) balances_re_ent36;\n4546-new_variable-763-763", method="", type_label=new_variable];
4552 [label="763_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n4552-function_definition-764-767", method="withdraw_balances_re_ent36()", type_label=function_definition];
4556 [label="764_ if\n4556-if-765-766", method="withdraw_balances_re_ent36()", type_label=if];
9128 [label="764_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
4569 [label="765_ balances_re_ent36[msg.sender] = 0;\n4569-expression_statement-766-766", method="withdraw_balances_re_ent36()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1418;
1509;
4400;
433 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
470 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
507 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 529  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
524 -> 5096  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5096 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 5096  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
529 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
531 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
553 -> 570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
590 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
624 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
811 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
843 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 938  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
922 -> 5494  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5494 -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 922  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
938 -> 935  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
947 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
996 -> 1005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1007 -> 1016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1016 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1018 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1029 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1040 -> 1053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1053 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1057 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1096 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 1124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1124 -> 1132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1132 -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1149 -> 1166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1166 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1195 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1199 -> 1210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1210 -> 1220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1220 -> 1229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 1249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1273 -> 1277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1277 -> 1290  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1277 -> 5849  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5849 -> 1298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1290 -> 5849  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1298 -> 1315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1315 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1343 -> 1347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1347 -> 1352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1352 -> 5924  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1372 -> 1380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1380 -> 1392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1392 -> 1397  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1392 -> 1407  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5964 -> 1418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1397 -> 5964  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1407 -> 5964  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1426 -> 1430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1434 -> 1438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1438 -> 6010  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1449 -> 1455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1463 -> 1471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1471 -> 1483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1483 -> 1488  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1483 -> 1500  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6055 -> 1509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1488 -> 6055  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1500 -> 6055  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1523 -> 1531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1531 -> 1542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1542 -> 1554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1562 -> 1572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1572 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1580 -> 1584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1584 -> 6156  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1610 -> 1634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1634 -> 1649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1675 -> 1679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1679 -> 1692  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1679 -> 6251  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6251 -> 1700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1692 -> 6251  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1700 -> 1720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1720 -> 1735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1755 -> 1759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1759 -> 1766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1766 -> 6338  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1785 -> 1802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1802 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1814 -> 1818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1818 -> 1823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1823 -> 6395  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1843 -> 1859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1859 -> 1867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1867 -> 1876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1876 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1884 -> 1888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1888 -> 1895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1895 -> 6467  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1914 -> 1934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1934 -> 1946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1946 -> 1958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1958 -> 1966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1966 -> 1983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1983 -> 2000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2000 -> 2018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2018 -> 2038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2038 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2047 -> 2055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2055 -> 2066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2066 -> 2078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2086 -> 2110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2110 -> 2122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2122 -> 2131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2131 -> 2144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2192 -> 2196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2196 -> 2220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2220 -> 2222  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2220 -> 6792  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6792 -> 2230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2222 -> 6792  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2230 -> 2262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2262 -> 2274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2274 -> 2286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2286 -> 2301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2301 -> 2316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2339 -> 2343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2343 -> 6915  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2369 -> 2393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2393 -> 2405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2405 -> 2422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2422 -> 2431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2472 -> 2476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2476 -> 2487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2487 -> 2497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2497 -> 2506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2514 -> 2542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2542 -> 2555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2596 -> 2600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2600 -> 2624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2624 -> 2626  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2624 -> 7196  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7196 -> 2634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2626 -> 7196  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2634 -> 2650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2650 -> 2662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2684 -> 2688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2688 -> 2693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2693 -> 7265  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2713 -> 2741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2741 -> 2754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2754 -> 2761  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2754 -> 7326  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7326 -> 2781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2761 -> 7326  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2786 -> 2790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2790 -> 2797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2797 -> 7369  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2816 -> 2848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2848 -> 2861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2861 -> 2868  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2861 -> 2888  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7433 -> 2903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2868 -> 7433  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2888 -> 2891  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2888 -> 7433  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2891 -> 7433  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2903 -> 2907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2911 -> 2915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2915 -> 7487  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2926 -> 2932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2951 -> 2964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2964 -> 2978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2987 -> 3000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3000 -> 3013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3022 -> 3040  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3040 -> 3052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3052 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3073 -> 3077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3077 -> 3084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3084 -> 7656  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3115 -> 3119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3119 -> 3143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3143 -> 7715  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3185 -> 3193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3193 -> 3204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3204 -> 3224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3224 -> 3229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3240 -> 3253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3255 -> 3268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3268 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3275 -> 3279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3283 -> 3287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3287 -> 7859  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3298 -> 3304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3312 -> 3322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3333 -> 3341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3341 -> 3352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3352 -> 3372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3372 -> 3377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3385 -> 3389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3396 -> 3400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3404 -> 3408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3408 -> 3426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3426 -> 7998  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3431 -> 3437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3445 -> 3453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3470 -> 3474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3474 -> 3485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3485 -> 3495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3495 -> 3504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3512 -> 3520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3537 -> 3541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3541 -> 8113  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3583 -> 3587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3587 -> 3611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3611 -> 8183  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3637 -> 3641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3641 -> 3646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3646 -> 8218  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3694 -> 3698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3698 -> 3722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3722 -> 8294  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3739 -> 3752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3754 -> 3767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3767 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3780 -> 3784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3784 -> 3789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3789 -> 8361  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3809 -> 3819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3830 -> 3834  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3834 -> 3845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3845 -> 3855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3855 -> 3864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3872 -> 3876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3889 -> 3897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3897 -> 3908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3908 -> 3920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3928 -> 3936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3953 -> 3957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3957 -> 3968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3968 -> 3978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3978 -> 3987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3995 -> 4003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4019 -> 4023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4023 -> 4030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4030 -> 8602  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4061 -> 4069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4069 -> 4080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4080 -> 4092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4112 -> 4116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4116 -> 4121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4121 -> 4142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4142 -> 8714  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4171 -> 4175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4179 -> 4183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4183 -> 8755  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4194 -> 4200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4208 -> 4217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4217 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4224 -> 4228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4228 -> 4235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4235 -> 8807  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4254 -> 4268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4257 -> 4266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4271 -> 4279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4281 -> 4289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4284 -> 4286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4300 -> 4304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4308 -> 4312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4312 -> 8884  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4323 -> 4329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4337 -> 4345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4340 -> 4342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4362 -> 4366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4366 -> 4390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4390 -> 4392  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4390 -> 8962  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8962 -> 4400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4392 -> 8962  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4458 -> 4462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4462 -> 4473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4473 -> 4483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4483 -> 4492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4500 -> 4530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4530 -> 4543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4543 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4552 -> 4556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4556 -> 4569  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4556 -> 9128  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9128 -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4569 -> 9128  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
