digraph  {
13 [label="2_ function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n13-function_definition-3-6", method="add(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a + b;\n31-expression_statement-4-4", method="add(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(c >= a);\n37-expression_statement-5-5", method="add(uint a,uint b)", type_label=expression_statement];
44 [label="6_ function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n44-function_definition-7-10", method="sub(uint a,uint b)", type_label=function_definition];
62 [label="7_ require(b <= a);\n62-expression_statement-8-8", method="sub(uint a,uint b)", type_label=expression_statement];
69 [label="8_ c = a - b;\n69-expression_statement-9-9", method="sub(uint a,uint b)", type_label=expression_statement];
75 [label="10_ function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n75-function_definition-11-14", method="mul(uint a,uint b)", type_label=function_definition];
93 [label="11_ c = a * b;\n93-expression_statement-12-12", method="mul(uint a,uint b)", type_label=expression_statement];
99 [label="12_ require(a == 0 || c / a == b);\n99-expression_statement-13-13", method="mul(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n112-function_definition-15-18", method="div(uint a,uint b)", type_label=function_definition];
130 [label="15_ require(b > 0);\n130-expression_statement-16-16", method="div(uint a,uint b)", type_label=expression_statement];
137 [label="16_ c = a / b;\n137-expression_statement-17-17", method="div(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function totalSupply() public view returns (uint);\n146-function_definition-21-21", method="totalSupply()", type_label=function_definition];
154 [label="21_ function balanceOf(address tokenOwner) public view returns (uint balance);\n154-function_definition-22-22", method="balanceOf(address tokenOwner)", type_label=function_definition];
167 [label="22_ function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n167-function_definition-23-23", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
184 [label="23_ function transfer(address to, uint tokens) public returns (bool success);\n184-function_definition-24-24", method="transfer(address to,uint tokens)", type_label=function_definition];
200 [label="24_ function approve(address spender, uint tokens) public returns (bool success);\n200-function_definition-25-25", method="approve(address spender,uint tokens)", type_label=function_definition];
216 [label="25_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n216-function_definition-26-26", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
267 [label="30_ function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n267-function_definition-31-31", method="receiveApproval(address from,uint256 tokens,address token,bytes memory data)", type_label=function_definition];
289 [label="33_ address public owner;\n289-new_variable-34-34", method="", type_label=new_variable];
294 [label="34_ address public newOwner;\n294-new_variable-35-35", method="", type_label=new_variable];
311 [label="37_ owner = msg.sender;\n311-expression_statement-38-38", method="", type_label=expression_statement];
317 [label="39_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n317-expression_statement-40-43", method="", type_label=expression_statement];
320 [label="40_ require(msg.sender == owner);\n320-expression_statement-41-41", method="", type_label=expression_statement];
329 [label="41_ _;\n329-expression_statement-42-42", method="", type_label=expression_statement];
331 [label="43_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n331-function_definition-44-46", method="transferOwnership(address _newOwner)", type_label=function_definition];
338 [label="43_ onlyOwner\n338-expression_statement-44-44", method="transferOwnership(address _newOwner)", type_label=expression_statement];
341 [label="44_ newOwner = _newOwner;\n341-expression_statement-45-45", method="transferOwnership(address _newOwner)", type_label=expression_statement];
345 [label="46_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n345-function_definition-47-52", method="acceptOwnership()", type_label=function_definition];
349 [label="47_ require(msg.sender == newOwner);\n349-expression_statement-48-48", method="acceptOwnership()", type_label=expression_statement];
364 [label="49_ owner = newOwner;\n364-expression_statement-50-50", method="acceptOwnership()", type_label=expression_statement];
368 [label="50_ newOwner = address(0);\n368-expression_statement-51-51", method="acceptOwnership()", type_label=expression_statement];
388 [label="55_ string public symbol;\n388-new_variable-56-56", method="", type_label=new_variable];
393 [label="56_ string public  name;\n393-new_variable-57-57", method="", type_label=new_variable];
398 [label="57_ uint8 public decimals;\n398-new_variable-58-58", method="", type_label=new_variable];
403 [label="58_ uint _totalSupply;\n403-new_variable-59-59", method="", type_label=new_variable];
407 [label="59_ mapping(address => uint) balances;\n407-new_variable-60-60", method="", type_label=new_variable];
413 [label="60_ mapping(address => mapping(address => uint)) allowed;\n413-new_variable-61-61", method="", type_label=new_variable];
423 [label="62_ symbol = \"ARC\";\n423-expression_statement-63-63", method="", type_label=expression_statement];
428 [label="63_ name = \"AllRebates coin\";\n428-expression_statement-64-64", method="", type_label=expression_statement];
433 [label="64_ decimals = 2;\n433-expression_statement-65-65", method="", type_label=expression_statement];
437 [label="65_ _totalSupply = 500000000 * 10**uint(decimals);\n437-expression_statement-66-66", method="", type_label=expression_statement];
447 [label="66_ balances[owner] = _totalSupply;\n447-expression_statement-67-67", method="", type_label=expression_statement];
463 [label="69_ function totalSupply() public view returns (uint) {\n        return _totalSupply.sub(balances[address(0)]);\n    }\n463-function_definition-70-72", method="totalSupply()", type_label=function_definition];
472 [label="70_ return _totalSupply.sub(balances[address(0)]);\n472-return-71-71", method="totalSupply()", type_label=return];
483 [label="72_ function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n483-function_definition-73-75", method="balanceOf(address tokenOwner)", type_label=function_definition];
497 [label="73_ return balances[tokenOwner];\n497-return-74-74", method="balanceOf(address tokenOwner)", type_label=return];
501 [label="75_ function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n501-function_definition-76-81", method="transfer(address to,uint tokens)", type_label=function_definition];
518 [label="76_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n518-expression_statement-77-77", method="transfer(address to,uint tokens)", type_label=expression_statement];
535 [label="77_ balances[to] = balances[to].add(tokens);\n535-expression_statement-78-78", method="transfer(address to,uint tokens)", type_label=expression_statement];
558 [label="79_ return true;\n558-return-80-80", method="transfer(address to,uint tokens)", type_label=return];
561 [label="81_ function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n561-function_definition-82-86", method="approve(address spender,uint tokens)", type_label=function_definition];
578 [label="82_ allowed[msg.sender][spender] = tokens;\n578-expression_statement-83-83", method="approve(address spender,uint tokens)", type_label=expression_statement];
598 [label="84_ return true;\n598-return-85-85", method="approve(address spender,uint tokens)", type_label=return];
601 [label="86_ function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n601-function_definition-87-93", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
622 [label="87_ balances[from] = balances[from].sub(tokens);\n622-expression_statement-88-88", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
635 [label="88_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n635-expression_statement-89-89", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
656 [label="89_ balances[to] = balances[to].add(tokens);\n656-expression_statement-90-90", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
677 [label="91_ return true;\n677-return-92-92", method="transferFrom(address from,address to,uint tokens)", type_label=return];
680 [label="93_ function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n680-function_definition-94-96", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
698 [label="94_ return allowed[tokenOwner][spender];\n698-return-95-95", method="allowance(address tokenOwner,address spender)", type_label=return];
704 [label="96_ function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n704-function_definition-97-102", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=function_definition];
725 [label="97_ allowed[msg.sender][spender] = tokens;\n725-expression_statement-98-98", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
745 [label="99_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n745-expression_statement-100-100", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
765 [label="100_ return true;\n765-return-101-101", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=return];
774 [label="105_ function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n774-function_definition-106-108", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=function_definition];
785 [label="105_ onlyOwner\n785-expression_statement-106-106", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=expression_statement];
793 [label="106_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n793-return-107-107", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
388 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
423 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
463 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
472 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
483 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
501 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
558 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
561 -> 578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
598 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
601 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
622 -> 635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
635 -> 656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
680 -> 698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
698 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
704 -> 725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
745 -> 765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
765 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
774 -> 793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
793 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
