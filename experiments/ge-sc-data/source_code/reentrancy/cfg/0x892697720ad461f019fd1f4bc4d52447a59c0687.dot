digraph  {
13 [label="2_ function totalSupply() external view returns (uint256);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ function balanceOf(address who) external view returns (uint256);\n21-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
33 [label="4_ function allowance(address owner, address spender)\n    external view returns (uint256);\n33-function_definition-5-6", method="allowance(address owner,address spender)", type_label=function_definition];
49 [label="6_ function transfer(address to, uint256 value) external returns (bool);\n49-function_definition-7-7", method="transfer(address to,uint256 value)", type_label=function_definition];
64 [label="7_ function approve(address spender, uint256 value)\n    external returns (bool);\n64-function_definition-8-9", method="approve(address spender,uint256 value)", type_label=function_definition];
79 [label="9_ function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n79-function_definition-10-11", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
129 [label="23_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    require(c / a == b);\n    return c;\n  }\n129-function_definition-24-31", method="mul(uint256 a,uint256 b)", type_label=function_definition];
146 [label="24_ if_a == 0\n146-if-25-27", method="mul(uint256 a,uint256 b)", type_label=if];
1114 [label="24_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
151 [label="25_ return 0;\n151-return-26-26", method="mul(uint256 a,uint256 b)", type_label=return];
153 [label="27_ uint256 c = a * b;\n153-new_variable-28-28", method="mul(uint256 a,uint256 b)", type_label=new_variable];
161 [label="28_ require(c / a == b);\n161-expression_statement-29-29", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
170 [label="29_ return c;\n170-return-30-30", method="mul(uint256 a,uint256 b)", type_label=return];
172 [label="31_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0);\n    uint256 c = a / b;\n    return c;\n  }\n172-function_definition-32-36", method="div(uint256 a,uint256 b)", type_label=function_definition];
189 [label="32_ require(b > 0);\n189-expression_statement-33-33", method="div(uint256 a,uint256 b)", type_label=expression_statement];
196 [label="33_ uint256 c = a / b;\n196-new_variable-34-34", method="div(uint256 a,uint256 b)", type_label=new_variable];
204 [label="34_ return c;\n204-return-35-35", method="div(uint256 a,uint256 b)", type_label=return];
206 [label="36_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n    return c;\n  }\n206-function_definition-37-41", method="sub(uint256 a,uint256 b)", type_label=function_definition];
223 [label="37_ require(b <= a);\n223-expression_statement-38-38", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
230 [label="38_ uint256 c = a - b;\n230-new_variable-39-39", method="sub(uint256 a,uint256 b)", type_label=new_variable];
238 [label="39_ return c;\n238-return-40-40", method="sub(uint256 a,uint256 b)", type_label=return];
240 [label="41_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n    return c;\n  }\n240-function_definition-42-46", method="add(uint256 a,uint256 b)", type_label=function_definition];
257 [label="42_ uint256 c = a + b;\n257-new_variable-43-43", method="add(uint256 a,uint256 b)", type_label=new_variable];
265 [label="43_ require(c >= a);\n265-expression_statement-44-44", method="add(uint256 a,uint256 b)", type_label=expression_statement];
272 [label="44_ return c;\n272-return-45-45", method="add(uint256 a,uint256 b)", type_label=return];
274 [label="46_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n274-function_definition-47-50", method="mod(uint256 a,uint256 b)", type_label=function_definition];
291 [label="47_ require(b != 0);\n291-expression_statement-48-48", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
298 [label="48_ return a % b;\n298-return-49-49", method="mod(uint256 a,uint256 b)", type_label=return];
313 [label="53_ mapping (address => uint256) private _balances;\n313-new_variable-54-54", method="", type_label=new_variable];
320 [label="54_ mapping (address => mapping (address => uint256)) private _allowed;\n320-new_variable-55-55", method="", type_label=new_variable];
329 [label="55_ uint256 private _totalSupply;\n329-new_variable-56-56", method="", type_label=new_variable];
334 [label="56_ function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n334-function_definition-57-59", method="totalSupply()", type_label=function_definition];
343 [label="57_ return _totalSupply;\n343-return-58-58", method="totalSupply()", type_label=return];
345 [label="59_ function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n345-function_definition-60-62", method="balanceOf(address owner)", type_label=function_definition];
358 [label="60_ return _balances[owner];\n358-return-61-61", method="balanceOf(address owner)", type_label=return];
362 [label="62_ function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n362-function_definition-63-72", method="allowance(address owner,address spender)", type_label=function_definition];
379 [label="70_ return _allowed[owner][spender];\n379-return-71-71", method="allowance(address owner,address spender)", type_label=return];
385 [label="72_ function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(msg.sender, to, value);\n    return true;\n  }\n385-function_definition-73-80", method="transfer(address to,uint256 value)", type_label=function_definition];
401 [label="73_ require(value <= _balances[msg.sender]);\n401-expression_statement-74-74", method="transfer(address to,uint256 value)", type_label=expression_statement];
412 [label="74_ require(to != address(0));\n412-expression_statement-75-75", method="transfer(address to,uint256 value)", type_label=expression_statement];
421 [label="75_ _balances[msg.sender] = _balances[msg.sender].sub(value);\n421-expression_statement-76-76", method="transfer(address to,uint256 value)", type_label=expression_statement];
438 [label="76_ _balances[to] = _balances[to].add(value);\n438-expression_statement-77-77", method="transfer(address to,uint256 value)", type_label=expression_statement];
461 [label="78_ return true;\n461-return-79-79", method="transfer(address to,uint256 value)", type_label=return];
464 [label="80_ function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n464-function_definition-81-86", method="approve(address spender,uint256 value)", type_label=function_definition];
480 [label="81_ require(spender != address(0));\n480-expression_statement-82-82", method="approve(address spender,uint256 value)", type_label=expression_statement];
489 [label="82_ _allowed[msg.sender][spender] = value;\n489-expression_statement-83-83", method="approve(address spender,uint256 value)", type_label=expression_statement];
509 [label="84_ return true;\n509-return-85-85", method="approve(address spender,uint256 value)", type_label=return];
512 [label="86_ function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    emit Transfer(from, to, value);\n    return true;\n  }\n512-function_definition-87-103", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
532 [label="94_ require(value <= _balances[from]);\n532-expression_statement-95-95", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
541 [label="95_ require(value <= _allowed[from][msg.sender]);\n541-expression_statement-96-96", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
554 [label="96_ require(to != address(0));\n554-expression_statement-97-97", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
563 [label="97_ _balances[from] = _balances[from].sub(value);\n563-expression_statement-98-98", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
576 [label="98_ _balances[to] = _balances[to].add(value);\n576-expression_statement-99-99", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
589 [label="99_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n589-expression_statement-100-100", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
618 [label="101_ return true;\n618-return-102-102", method="transferFrom(address from,address to,uint256 value)", type_label=return];
621 [label="103_ function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n621-function_definition-104-116", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
637 [label="110_ require(spender != address(0));\n637-expression_statement-111-111", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
646 [label="111_ _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n646-expression_statement-112-113", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
684 [label="114_ return true;\n684-return-115-115", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
687 [label="116_ function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n687-function_definition-117-129", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
703 [label="123_ require(spender != address(0));\n703-expression_statement-124-124", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
712 [label="124_ _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n712-expression_statement-125-126", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
750 [label="127_ return true;\n750-return-128-128", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
753 [label="129_ function _mint(address account, uint256 amount) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(amount);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n753-function_definition-130-135", method="_mint(address account,uint256 amount)", type_label=function_definition];
765 [label="130_ require(account != 0);\n765-expression_statement-131-131", method="_mint(address account,uint256 amount)", type_label=expression_statement];
772 [label="131_ _totalSupply = _totalSupply.add(amount);\n772-expression_statement-132-132", method="_mint(address account,uint256 amount)", type_label=expression_statement];
781 [label="132_ _balances[account] = _balances[account].add(amount);\n781-expression_statement-133-133", method="_mint(address account,uint256 amount)", type_label=expression_statement];
804 [label="135_ function _burn(address account, uint256 amount) internal {\n    require(account != 0);\n    require(amount <= _balances[account]);\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n804-function_definition-136-142", method="_burn(address account,uint256 amount)", type_label=function_definition];
816 [label="136_ require(account != 0);\n816-expression_statement-137-137", method="_burn(address account,uint256 amount)", type_label=expression_statement];
823 [label="137_ require(amount <= _balances[account]);\n823-expression_statement-138-138", method="_burn(address account,uint256 amount)", type_label=expression_statement];
832 [label="138_ _totalSupply = _totalSupply.sub(amount);\n832-expression_statement-139-139", method="_burn(address account,uint256 amount)", type_label=expression_statement];
841 [label="139_ _balances[account] = _balances[account].sub(amount);\n841-expression_statement-140-140", method="_burn(address account,uint256 amount)", type_label=expression_statement];
864 [label="142_ function _burnFrom(address account, uint256 amount) internal {\n    require(amount <= _allowed[account][msg.sender]);\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      amount);\n    _burn(account, amount);\n  }\n864-function_definition-143-148", method="_burnFrom(address account,uint256 amount)", type_label=function_definition];
876 [label="143_ require(amount <= _allowed[account][msg.sender]);\n876-expression_statement-144-144", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
889 [label="144_ _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      amount);\n889-expression_statement-145-146", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
910 [label="146_ _burn(account, amount);\n910-expression_statement-147-147", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
923 [label="150_ string public constant name = \"BitCore\";\n923-new_variable-151-151", method="", type_label=new_variable];
930 [label="151_ string public constant symbol = \"BCT\";\n930-new_variable-152-152", method="", type_label=new_variable];
937 [label="152_ uint8 public constant decimals = 18;\n937-new_variable-153-153", method="", type_label=new_variable];
943 [label="153_ address public owner = 0x50eE326cBF5802231CC13fFf8e69ADCd271eb111;\n943-new_variable-154-154", method="", type_label=new_variable];
949 [label="154_ uint256 public constant INITIAL_SUPPLY = 500000000 * (10 ** uint256(decimals));\n949-new_variable-155-155", method="", type_label=new_variable];
964 [label="156_ _mint(msg.sender, INITIAL_SUPPLY);\n964-expression_statement-157-157", method="", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
129 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
146 -> 1114  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1114 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 1114  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
153 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
172 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
196 -> 204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
204 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
206 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
238 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
240 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
257 -> 265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
265 -> 272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
272 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
274 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
291 -> 298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
313 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
334 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
345 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
358 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
362 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
385 -> 401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
412 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
464 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
512 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
532 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
554 -> 563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
576 -> 589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
618 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
621 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
637 -> 646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
684 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
687 -> 703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
750 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
753 -> 765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
765 -> 772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
772 -> 781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
804 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
823 -> 832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
832 -> 841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
864 -> 876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
876 -> 889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
889 -> 910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
923 -> 930  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
930 -> 937  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
937 -> 943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
