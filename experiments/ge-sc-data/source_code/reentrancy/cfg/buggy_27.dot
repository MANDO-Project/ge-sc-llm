digraph  {
13 [label="2_ function totalSupply() external view returns (uint256);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ function balanceOf(address who) external view returns (uint256);\n21-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
33 [label="4_ function allowance(address owner, address spender) external view returns (uint256);\n33-function_definition-5-5", method="allowance(address owner,address spender)", type_label=function_definition];
49 [label="5_ function transfer(address to, uint256 value) external returns (bool);\n49-function_definition-6-6", method="transfer(address to,uint256 value)", type_label=function_definition];
64 [label="6_ function approve(address spender, uint256 value) external returns (bool);\n64-function_definition-7-7", method="approve(address spender,uint256 value)", type_label=function_definition];
79 [label="7_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n79-function_definition-8-8", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
129 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n129-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
146 [label="13_ if_a == 0\n146-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
3585 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
151 [label="14_ return 0;\n151-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
153 [label="16_ uint256 c = a * b;\n153-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
161 [label="17_ assert(c / a == b);\n161-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
170 [label="18_ return c;\n170-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
172 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n172-function_definition-21-24", method="div(uint256 a,uint256 b)", type_label=function_definition];
189 [label="21_ uint256 c = a / b;\n189-new_variable-22-22", method="div(uint256 a,uint256 b)", type_label=new_variable];
197 [label="22_ return c;\n197-return-23-23", method="div(uint256 a,uint256 b)", type_label=return];
199 [label="24_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n199-function_definition-25-28", method="sub(uint256 a,uint256 b)", type_label=function_definition];
216 [label="25_ assert(b <= a);\n216-expression_statement-26-26", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
223 [label="26_ return a - b;\n223-return-27-27", method="sub(uint256 a,uint256 b)", type_label=return];
227 [label="28_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n227-function_definition-29-33", method="add(uint256 a,uint256 b)", type_label=function_definition];
244 [label="29_ uint256 c = a + b;\n244-new_variable-30-30", method="add(uint256 a,uint256 b)", type_label=new_variable];
252 [label="30_ assert(c >= a);\n252-expression_statement-31-31", method="add(uint256 a,uint256 b)", type_label=expression_statement];
259 [label="31_ return c;\n259-return-32-32", method="add(uint256 a,uint256 b)", type_label=return];
261 [label="33_ function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n261-function_definition-34-38", method="ceil(uint256 a,uint256 m)", type_label=function_definition];
278 [label="34_ uint256 c = add(a,m);\n278-new_variable-35-35", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
289 [label="35_ uint256 d = sub(c,1);\n289-new_variable-36-36", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
300 [label="36_ return mul(div(d,m),m);\n300-return-37-37", method="ceil(uint256 a,uint256 m)", type_label=return];
315 [label="40_ address public owner;\n315-new_variable-41-41", method="", type_label=new_variable];
320 [label="41_ mapping(address => uint) userBalance_re_ent40;\n320-new_variable-42-42", method="", type_label=new_variable];
326 [label="42_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n326-function_definition-43-49", method="withdrawBalance_re_ent40()", type_label=function_definition];
330 [label="43_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n330-new_variable-44-44", method="withdrawBalance_re_ent40()", type_label=new_variable];
354 [label="44_ if\n354-if-45-47", method="withdrawBalance_re_ent40()", type_label=if];
3793 [label="44_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
360 [label="47_ userBalance_re_ent40[msg.sender] = 0;\n360-expression_statement-48-48", method="withdrawBalance_re_ent40()", type_label=expression_statement];
380 [label="51_ owner = msg.sender;\n380-expression_statement-52-52", method="", type_label=expression_statement];
386 [label="53_ mapping(address => uint) balances_re_ent10;\n386-new_variable-54-54", method="", type_label=new_variable];
392 [label="54_ function withdrawFunds_re_ent10 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent10[msg.sender] -= _weiToWithdraw;\n    }\n392-function_definition-55-59", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=function_definition];
400 [label="55_ require(balances_re_ent10[msg.sender] >= _weiToWithdraw);\n400-expression_statement-56-56", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
411 [label="56_ require(msg.sender.send(_weiToWithdraw));\n411-expression_statement-57-57", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
423 [label="57_ balances_re_ent10[msg.sender] -= _weiToWithdraw;\n423-expression_statement-58-58", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
431 [label="59_ modifier onlyOwner() {\n      require(msg.sender == owner);\n      _;\n    }\n431-expression_statement-60-63", method="", type_label=expression_statement];
434 [label="60_ require(msg.sender == owner);\n434-expression_statement-61-61", method="", type_label=expression_statement];
443 [label="61_ _;\n443-expression_statement-62-62", method="", type_label=expression_statement];
445 [label="63_ function transferOwnership(address newOwner) public onlyOwner {\n      require(newOwner != address(0));\n      emit OwnershipTransferred(owner, newOwner);\n      owner = newOwner;\n    }\n445-function_definition-64-68", method="transferOwnership(address newOwner)", type_label=function_definition];
452 [label="63_ onlyOwner\n452-expression_statement-64-64", method="transferOwnership(address newOwner)", type_label=expression_statement];
455 [label="64_ require(newOwner != address(0));\n455-expression_statement-65-65", method="transferOwnership(address newOwner)", type_label=expression_statement];
470 [label="66_ owner = newOwner;\n470-expression_statement-67-67", method="transferOwnership(address newOwner)", type_label=expression_statement];
474 [label="68_ mapping(address => uint) balances_re_ent21;\n474-new_variable-69-69", method="", type_label=new_variable];
480 [label="69_ function withdraw_balances_re_ent21 () public {\n       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent21[msg.sender] = 0;\n      }\n480-function_definition-70-74", method="withdraw_balances_re_ent21()", type_label=function_definition];
484 [label="70_ (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n484-new_variable-71-71", method="withdraw_balances_re_ent21()", type_label=new_variable];
508 [label="71_ if\n508-if-72-73", method="withdraw_balances_re_ent21()", type_label=if];
3947 [label="71_ end_if", method="withdraw_balances_re_ent21()", type_label=end_if];
510 [label="72_ balances_re_ent21[msg.sender] = 0;\n510-expression_statement-73-73", method="withdraw_balances_re_ent21()", type_label=expression_statement];
524 [label="76_ string private _name;\n524-new_variable-77-77", method="", type_label=new_variable];
529 [label="77_ string private _symbol;\n529-new_variable-78-78", method="", type_label=new_variable];
534 [label="78_ uint8 private _decimals;\n534-new_variable-79-79", method="", type_label=new_variable];
553 [label="80_ _name = name;\n553-expression_statement-81-81", method="", type_label=expression_statement];
557 [label="81_ _symbol = symbol;\n557-expression_statement-82-82", method="", type_label=expression_statement];
561 [label="82_ _decimals = decimals;\n561-expression_statement-83-83", method="", type_label=expression_statement];
565 [label="84_ mapping(address => uint) userBalance_re_ent12;\n565-new_variable-85-85", method="", type_label=new_variable];
571 [label="85_ function withdrawBalance_re_ent12() public{\n        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent12[msg.sender] = 0;\n    }\n571-function_definition-86-91", method="withdrawBalance_re_ent12()", type_label=function_definition];
575 [label="86_ if\n575-if-87-89", method="withdrawBalance_re_ent12()", type_label=if];
4014 [label="86_ end_if", method="withdrawBalance_re_ent12()", type_label=end_if];
593 [label="89_ userBalance_re_ent12[msg.sender] = 0;\n593-expression_statement-90-90", method="withdrawBalance_re_ent12()", type_label=expression_statement];
601 [label="91_ function name() public view returns(string memory) {\n    return _name;\n  }\n601-function_definition-92-94", method="name()", type_label=function_definition];
610 [label="92_ return _name;\n610-return-93-93", method="name()", type_label=return];
612 [label="94_ mapping(address => uint) redeemableEther_re_ent11;\n612-new_variable-95-95", method="", type_label=new_variable];
618 [label="95_ function claimReward_re_ent11() public {        \n        require(redeemableEther_re_ent11[msg.sender] > 0);\n        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n        msg.sender.transfer(transferValue_re_ent11);    \n        redeemableEther_re_ent11[msg.sender] = 0;\n    }\n618-function_definition-96-101", method="claimReward_re_ent11()", type_label=function_definition];
622 [label="96_ require(redeemableEther_re_ent11[msg.sender] > 0);\n622-expression_statement-97-97", method="claimReward_re_ent11()", type_label=expression_statement];
633 [label="97_ uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n633-new_variable-98-98", method="claimReward_re_ent11()", type_label=new_variable];
643 [label="98_ msg.sender.transfer(transferValue_re_ent11);\n643-expression_statement-99-99", method="claimReward_re_ent11()", type_label=expression_statement];
652 [label="99_ redeemableEther_re_ent11[msg.sender] = 0;\n652-expression_statement-100-100", method="claimReward_re_ent11()", type_label=expression_statement];
660 [label="101_ function symbol() public view returns(string memory) {\n    return _symbol;\n  }\n660-function_definition-102-104", method="symbol()", type_label=function_definition];
669 [label="102_ return _symbol;\n669-return-103-103", method="symbol()", type_label=return];
671 [label="104_ mapping(address => uint) balances_re_ent1;\n671-new_variable-105-105", method="", type_label=new_variable];
677 [label="105_ function withdraw_balances_re_ent1 () public {\n       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent1[msg.sender] = 0;\n      }\n677-function_definition-106-110", method="withdraw_balances_re_ent1()", type_label=function_definition];
681 [label="106_ (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n681-new_variable-107-107", method="withdraw_balances_re_ent1()", type_label=new_variable];
705 [label="107_ if\n705-if-108-109", method="withdraw_balances_re_ent1()", type_label=if];
4144 [label="107_ end_if", method="withdraw_balances_re_ent1()", type_label=end_if];
707 [label="108_ balances_re_ent1[msg.sender] = 0;\n707-expression_statement-109-109", method="withdraw_balances_re_ent1()", type_label=expression_statement];
715 [label="110_ function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n715-function_definition-111-113", method="decimals()", type_label=function_definition];
724 [label="111_ return _decimals;\n724-return-112-112", method="decimals()", type_label=return];
726 [label="113_ bool not_called_re_ent41 = true;\n726-new_variable-114-114", method="", type_label=new_variable];
732 [label="114_ function bug_re_ent41() public{\n        require(not_called_re_ent41);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent41 = false;\n    }\n732-function_definition-115-121", method="bug_re_ent41()", type_label=function_definition];
736 [label="115_ require(not_called_re_ent41);\n736-expression_statement-116-116", method="bug_re_ent41()", type_label=expression_statement];
741 [label="116_ if\n741-if-117-119", method="bug_re_ent41()", type_label=if];
4180 [label="116_ end_if", method="bug_re_ent41()", type_label=end_if];
756 [label="119_ not_called_re_ent41 = false;\n756-expression_statement-120-120", method="bug_re_ent41()", type_label=expression_statement];
775 [label="124_ mapping (address => uint256) private _balances;\n775-new_variable-125-125", method="", type_label=new_variable];
782 [label="125_ mapping(address => uint) redeemableEther_re_ent18;\n782-new_variable-126-126", method="", type_label=new_variable];
788 [label="126_ function claimReward_re_ent18() public {        \n        require(redeemableEther_re_ent18[msg.sender] > 0);\n        uint transferValue_re_ent18 = redeemableEther_re_ent18[msg.sender];\n        msg.sender.transfer(transferValue_re_ent18);    \n        redeemableEther_re_ent18[msg.sender] = 0;\n    }\n788-function_definition-127-132", method="claimReward_re_ent18()", type_label=function_definition];
792 [label="127_ require(redeemableEther_re_ent18[msg.sender] > 0);\n792-expression_statement-128-128", method="claimReward_re_ent18()", type_label=expression_statement];
803 [label="128_ uint transferValue_re_ent18 = redeemableEther_re_ent18[msg.sender];\n803-new_variable-129-129", method="claimReward_re_ent18()", type_label=new_variable];
813 [label="129_ msg.sender.transfer(transferValue_re_ent18);\n813-expression_statement-130-130", method="claimReward_re_ent18()", type_label=expression_statement];
822 [label="130_ redeemableEther_re_ent18[msg.sender] = 0;\n822-expression_statement-131-131", method="claimReward_re_ent18()", type_label=expression_statement];
830 [label="132_ mapping (address => mapping (address => uint256)) private _allowed;\n830-new_variable-133-133", method="", type_label=new_variable];
839 [label="133_ mapping(address => uint) balances_re_ent29;\n839-new_variable-134-134", method="", type_label=new_variable];
845 [label="134_ function withdraw_balances_re_ent29 () public {\n       if (msg.sender.send(balances_re_ent29[msg.sender ]))\n          balances_re_ent29[msg.sender] = 0;\n      }\n845-function_definition-135-138", method="withdraw_balances_re_ent29()", type_label=function_definition];
849 [label="135_ if\n849-if-136-137", method="withdraw_balances_re_ent29()", type_label=if];
4288 [label="135_ end_if", method="withdraw_balances_re_ent29()", type_label=end_if];
862 [label="136_ balances_re_ent29[msg.sender] = 0;\n862-expression_statement-137-137", method="withdraw_balances_re_ent29()", type_label=expression_statement];
870 [label="138_ string constant tokenName = \"Dan Pan Coin\";\n870-new_variable-139-139", method="", type_label=new_variable];
876 [label="139_ bool not_called_re_ent6 = true;\n876-new_variable-140-140", method="", type_label=new_variable];
882 [label="140_ function bug_re_ent6() public{\n        require(not_called_re_ent6);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent6 = false;\n    }\n882-function_definition-141-147", method="bug_re_ent6()", type_label=function_definition];
886 [label="141_ require(not_called_re_ent6);\n886-expression_statement-142-142", method="bug_re_ent6()", type_label=expression_statement];
891 [label="142_ if\n891-if-143-145", method="bug_re_ent6()", type_label=if];
4330 [label="142_ end_if", method="bug_re_ent6()", type_label=end_if];
906 [label="145_ not_called_re_ent6 = false;\n906-expression_statement-146-146", method="bug_re_ent6()", type_label=expression_statement];
911 [label="147_ string constant tokenSymbol = \"DPC\";\n911-new_variable-148-148", method="", type_label=new_variable];
917 [label="148_ address payable lastPlayer_re_ent16;\n917-new_variable-149-149", method="", type_label=new_variable];
921 [label="149_ uint jackpot_re_ent16;\n921-new_variable-150-150", method="", type_label=new_variable];
925 [label="150_ function buyTicket_re_ent16() public{\n	    if (!(lastPlayer_re_ent16.send(jackpot_re_ent16)))\n        revert();\n      lastPlayer_re_ent16 = msg.sender;\n      jackpot_re_ent16    = address(this).balance;\n    }\n925-function_definition-151-156", method="buyTicket_re_ent16()", type_label=function_definition];
929 [label="151_ if\n929-if-152-153", method="buyTicket_re_ent16()", type_label=if];
4368 [label="151_ end_if", method="buyTicket_re_ent16()", type_label=end_if];
940 [label="153_ lastPlayer_re_ent16 = msg.sender;\n940-expression_statement-154-154", method="buyTicket_re_ent16()", type_label=expression_statement];
946 [label="154_ jackpot_re_ent16    = address(this).balance;\n946-expression_statement-155-155", method="buyTicket_re_ent16()", type_label=expression_statement];
954 [label="156_ uint8  constant tokenDecimals = 2;\n954-new_variable-157-157", method="", type_label=new_variable];
959 [label="157_ mapping(address => uint) balances_re_ent24;\n959-new_variable-158-158", method="", type_label=new_variable];
965 [label="158_ function withdrawFunds_re_ent24 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent24[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent24[msg.sender] -= _weiToWithdraw;\n    }\n965-function_definition-159-163", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=function_definition];
973 [label="159_ require(balances_re_ent24[msg.sender] >= _weiToWithdraw);\n973-expression_statement-160-160", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=expression_statement];
984 [label="160_ require(msg.sender.send(_weiToWithdraw));\n984-expression_statement-161-161", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=expression_statement];
996 [label="161_ balances_re_ent24[msg.sender] -= _weiToWithdraw;\n996-expression_statement-162-162", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=expression_statement];
1004 [label="163_ uint256 _totalSupply = 10000000000;\n1004-new_variable-164-164", method="", type_label=new_variable];
1009 [label="164_ mapping(address => uint) userBalance_re_ent5;\n1009-new_variable-165-165", method="", type_label=new_variable];
1015 [label="165_ function withdrawBalance_re_ent5() public{\n        if( ! (msg.sender.send(userBalance_re_ent5[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent5[msg.sender] = 0;\n    }\n1015-function_definition-166-171", method="withdrawBalance_re_ent5()", type_label=function_definition];
1019 [label="166_ if\n1019-if-167-169", method="withdrawBalance_re_ent5()", type_label=if];
4458 [label="166_ end_if", method="withdrawBalance_re_ent5()", type_label=end_if];
1037 [label="169_ userBalance_re_ent5[msg.sender] = 0;\n1037-expression_statement-170-170", method="withdrawBalance_re_ent5()", type_label=expression_statement];
1045 [label="171_ uint256 public basePercent = 100;\n1045-new_variable-172-172", method="", type_label=new_variable];
1051 [label="172_ mapping(address => uint) balances_re_ent15;\n1051-new_variable-173-173", method="", type_label=new_variable];
1057 [label="173_ function withdraw_balances_re_ent15 () public {\n       if (msg.sender.send(balances_re_ent15[msg.sender ]))\n          balances_re_ent15[msg.sender] = 0;\n      }\n1057-function_definition-174-177", method="withdraw_balances_re_ent15()", type_label=function_definition];
1061 [label="174_ if\n1061-if-175-176", method="withdraw_balances_re_ent15()", type_label=if];
4500 [label="174_ end_if", method="withdraw_balances_re_ent15()", type_label=end_if];
1074 [label="175_ balances_re_ent15[msg.sender] = 0;\n1074-expression_statement-176-176", method="withdraw_balances_re_ent15()", type_label=expression_statement];
1082 [label="177_ uint256 public dpPercent = 5;\n1082-new_variable-178-178", method="", type_label=new_variable];
1088 [label="178_ uint256 counter_re_ent28 =0;\n1088-new_variable-179-179", method="", type_label=new_variable];
1093 [label="179_ function callme_re_ent28() public{\n        require(counter_re_ent28<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent28 += 1;\n    }\n1093-function_definition-180-186", method="callme_re_ent28()", type_label=function_definition];
1097 [label="180_ require(counter_re_ent28<=5);\n1097-expression_statement-181-181", method="callme_re_ent28()", type_label=expression_statement];
1104 [label="181_ if\n1104-if-182-184", method="callme_re_ent28()", type_label=if];
4543 [label="181_ end_if", method="callme_re_ent28()", type_label=end_if];
1119 [label="184_ counter_re_ent28 += 1;\n1119-expression_statement-185-185", method="callme_re_ent28()", type_label=expression_statement];
1123 [label="186_ address public DanPanAddress = msg.sender;\n1123-new_variable-187-187", method="", type_label=new_variable];
1131 [label="187_ mapping(address => uint) userBalance_re_ent33;\n1131-new_variable-188-188", method="", type_label=new_variable];
1137 [label="188_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n1137-function_definition-189-195", method="withdrawBalance_re_ent33()", type_label=function_definition];
1141 [label="189_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n1141-new_variable-190-190", method="withdrawBalance_re_ent33()", type_label=new_variable];
1165 [label="190_ if\n1165-if-191-193", method="withdrawBalance_re_ent33()", type_label=if];
4604 [label="190_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
1171 [label="193_ userBalance_re_ent33[msg.sender] = 0;\n1171-expression_statement-194-194", method="withdrawBalance_re_ent33()", type_label=expression_statement];
1189 [label="196_ bool not_called_re_ent27 = true;\n1189-new_variable-197-197", method="", type_label=new_variable];
1195 [label="197_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n1195-function_definition-198-204", method="bug_re_ent27()", type_label=function_definition];
1199 [label="198_ require(not_called_re_ent27);\n1199-expression_statement-199-199", method="bug_re_ent27()", type_label=expression_statement];
1204 [label="199_ if\n1204-if-200-202", method="bug_re_ent27()", type_label=if];
4643 [label="199_ end_if", method="bug_re_ent27()", type_label=end_if];
1219 [label="202_ not_called_re_ent27 = false;\n1219-expression_statement-203-203", method="bug_re_ent27()", type_label=expression_statement];
1234 [label="205_ mapping(address => uint) balances_re_ent31;\n1234-new_variable-206-206", method="", type_label=new_variable];
1240 [label="206_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n1240-function_definition-207-211", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
1248 [label="207_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n1248-expression_statement-208-208", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1259 [label="208_ require(msg.sender.send(_weiToWithdraw));\n1259-expression_statement-209-209", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1271 [label="209_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n1271-expression_statement-210-210", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1289 [label="212_ bool not_called_re_ent13 = true;\n1289-new_variable-213-213", method="", type_label=new_variable];
1295 [label="213_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n1295-function_definition-214-221", method="bug_re_ent13()", type_label=function_definition];
1299 [label="214_ require(not_called_re_ent13);\n1299-expression_statement-215-215", method="bug_re_ent13()", type_label=expression_statement];
1304 [label="215_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n1304-new_variable-216-216", method="bug_re_ent13()", type_label=new_variable];
1325 [label="216_ if\n1325-if-217-219", method="bug_re_ent13()", type_label=if];
4764 [label="216_ end_if", method="bug_re_ent13()", type_label=end_if];
1331 [label="219_ not_called_re_ent13 = false;\n1331-expression_statement-220-220", method="bug_re_ent13()", type_label=expression_statement];
1346 [label="222_ bool not_called_re_ent34 = true;\n1346-new_variable-223-223", method="", type_label=new_variable];
1352 [label="223_ function bug_re_ent34() public{\n        require(not_called_re_ent34);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent34 = false;\n    }\n1352-function_definition-224-230", method="bug_re_ent34()", type_label=function_definition];
1356 [label="224_ require(not_called_re_ent34);\n1356-expression_statement-225-225", method="bug_re_ent34()", type_label=expression_statement];
1361 [label="225_ if\n1361-if-226-228", method="bug_re_ent34()", type_label=if];
4800 [label="225_ end_if", method="bug_re_ent34()", type_label=end_if];
1376 [label="228_ not_called_re_ent34 = false;\n1376-expression_statement-229-229", method="bug_re_ent34()", type_label=expression_statement];
1381 [label="230_ mapping(address => bool) public whitelistFrom;\n1381-new_variable-231-231", method="", type_label=new_variable];
1388 [label="231_ uint256 counter_re_ent21 =0;\n1388-new_variable-232-232", method="", type_label=new_variable];
1393 [label="232_ function callme_re_ent21() public{\n        require(counter_re_ent21<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent21 += 1;\n    }\n1393-function_definition-233-239", method="callme_re_ent21()", type_label=function_definition];
1397 [label="233_ require(counter_re_ent21<=5);\n1397-expression_statement-234-234", method="callme_re_ent21()", type_label=expression_statement];
1404 [label="234_ if\n1404-if-235-237", method="callme_re_ent21()", type_label=if];
4843 [label="234_ end_if", method="callme_re_ent21()", type_label=end_if];
1419 [label="237_ counter_re_ent21 += 1;\n1419-expression_statement-238-238", method="callme_re_ent21()", type_label=expression_statement];
1423 [label="239_ mapping(address => bool) public whitelistTo;\n1423-new_variable-240-240", method="", type_label=new_variable];
1431 [label="240_ ERC20Detailed(tokenName, tokenSymbol, tokenDecimals)\n1431-expression_statement-241-241", method="", type_label=expression_statement];
1440 [label="241_ _mint(msg.sender, _totalSupply);\n1440-expression_statement-242-242", method="", type_label=expression_statement];
1449 [label="243_ uint256 counter_re_ent42 =0;\n1449-new_variable-244-244", method="", type_label=new_variable];
1454 [label="244_ function callme_re_ent42() public{\n        require(counter_re_ent42<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent42 += 1;\n    }\n1454-function_definition-245-251", method="callme_re_ent42()", type_label=function_definition];
1458 [label="245_ require(counter_re_ent42<=5);\n1458-expression_statement-246-246", method="callme_re_ent42()", type_label=expression_statement];
1465 [label="246_ if\n1465-if-247-249", method="callme_re_ent42()", type_label=if];
4904 [label="246_ end_if", method="callme_re_ent42()", type_label=end_if];
1480 [label="249_ counter_re_ent42 += 1;\n1480-expression_statement-250-250", method="callme_re_ent42()", type_label=expression_statement];
1484 [label="251_ function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n1484-function_definition-252-254", method="totalSupply()", type_label=function_definition];
1493 [label="252_ return _totalSupply;\n1493-return-253-253", method="totalSupply()", type_label=return];
1495 [label="254_ address payable lastPlayer_re_ent2;\n1495-new_variable-255-255", method="", type_label=new_variable];
1499 [label="255_ uint jackpot_re_ent2;\n1499-new_variable-256-256", method="", type_label=new_variable];
1503 [label="256_ function buyTicket_re_ent2() public{\n	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))\n        revert();\n      lastPlayer_re_ent2 = msg.sender;\n      jackpot_re_ent2    = address(this).balance;\n    }\n1503-function_definition-257-262", method="buyTicket_re_ent2()", type_label=function_definition];
1507 [label="257_ if\n1507-if-258-259", method="buyTicket_re_ent2()", type_label=if];
4946 [label="257_ end_if", method="buyTicket_re_ent2()", type_label=end_if];
1518 [label="259_ lastPlayer_re_ent2 = msg.sender;\n1518-expression_statement-260-260", method="buyTicket_re_ent2()", type_label=expression_statement];
1524 [label="260_ jackpot_re_ent2    = address(this).balance;\n1524-expression_statement-261-261", method="buyTicket_re_ent2()", type_label=expression_statement];
1532 [label="262_ function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n1532-function_definition-263-265", method="balanceOf(address owner)", type_label=function_definition];
1545 [label="263_ return _balances[owner];\n1545-return-264-264", method="balanceOf(address owner)", type_label=return];
1549 [label="265_ mapping(address => uint) balances_re_ent17;\n1549-new_variable-266-266", method="", type_label=new_variable];
1555 [label="266_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n1555-function_definition-267-272", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
1563 [label="267_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n1563-expression_statement-268-268", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
1574 [label="268_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n1574-new_variable-269-269", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
1594 [label="269_ require(success);\n1594-expression_statement-270-270", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
1599 [label="270_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n1599-expression_statement-271-271", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
1607 [label="272_ function allowance(address owner, address spender) public view returns (uint256) {\n    return _allowed[owner][spender];\n  }\n1607-function_definition-273-275", method="allowance(address owner,address spender)", type_label=function_definition];
1624 [label="273_ return _allowed[owner][spender];\n1624-return-274-274", method="allowance(address owner,address spender)", type_label=return];
1630 [label="275_ address payable lastPlayer_re_ent37;\n1630-new_variable-276-276", method="", type_label=new_variable];
1634 [label="276_ uint jackpot_re_ent37;\n1634-new_variable-277-277", method="", type_label=new_variable];
1638 [label="277_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n1638-function_definition-278-283", method="buyTicket_re_ent37()", type_label=function_definition];
1642 [label="278_ if\n1642-if-279-280", method="buyTicket_re_ent37()", type_label=if];
5081 [label="278_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
1653 [label="280_ lastPlayer_re_ent37 = msg.sender;\n1653-expression_statement-281-281", method="buyTicket_re_ent37()", type_label=expression_statement];
1659 [label="281_ jackpot_re_ent37    = address(this).balance;\n1659-expression_statement-282-282", method="buyTicket_re_ent37()", type_label=expression_statement];
1667 [label="283_ function findOnePercent(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 onePercent = roundValue.mul(basePercent).div(10000);\n    return onePercent;\n  }\n1667-function_definition-284-288", method="findOnePercent(uint256 value)", type_label=function_definition];
1680 [label="284_ uint256 roundValue = value.ceil(basePercent);\n1680-new_variable-285-285", method="findOnePercent(uint256 value)", type_label=new_variable];
1691 [label="285_ uint256 onePercent = roundValue.mul(basePercent).div(10000);\n1691-new_variable-286-286", method="findOnePercent(uint256 value)", type_label=new_variable];
1707 [label="286_ return onePercent;\n1707-return-287-287", method="findOnePercent(uint256 value)", type_label=return];
1709 [label="288_ mapping(address => uint) balances_re_ent3;\n1709-new_variable-289-289", method="", type_label=new_variable];
1715 [label="289_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n1715-function_definition-290-295", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
1723 [label="290_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n1723-expression_statement-291-291", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1734 [label="291_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n1734-new_variable-292-292", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
1754 [label="292_ require(success);\n1754-expression_statement-293-293", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1759 [label="293_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n1759-expression_statement-294-294", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1767 [label="295_ function findDPPercent(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 DPPercent = roundValue.mul(basePercent).div(10000).mul(dpPercent);\n    return DPPercent;\n  }\n1767-function_definition-296-300", method="findDPPercent(uint256 value)", type_label=function_definition];
1780 [label="296_ uint256 roundValue = value.ceil(basePercent);\n1780-new_variable-297-297", method="findDPPercent(uint256 value)", type_label=new_variable];
1791 [label="297_ uint256 DPPercent = roundValue.mul(basePercent).div(10000).mul(dpPercent);\n1791-new_variable-298-298", method="findDPPercent(uint256 value)", type_label=new_variable];
1812 [label="298_ return DPPercent;\n1812-return-299-299", method="findDPPercent(uint256 value)", type_label=return];
1814 [label="300_ address payable lastPlayer_re_ent9;\n1814-new_variable-301-301", method="", type_label=new_variable];
1818 [label="301_ uint jackpot_re_ent9;\n1818-new_variable-302-302", method="", type_label=new_variable];
1822 [label="302_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n1822-function_definition-303-309", method="buyTicket_re_ent9()", type_label=function_definition];
1826 [label="303_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n1826-new_variable-304-304", method="buyTicket_re_ent9()", type_label=new_variable];
1844 [label="304_ if\n1844-if-305-306", method="buyTicket_re_ent9()", type_label=if];
5283 [label="304_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
1849 [label="306_ lastPlayer_re_ent9 = msg.sender;\n1849-expression_statement-307-307", method="buyTicket_re_ent9()", type_label=expression_statement];
1855 [label="307_ jackpot_re_ent9    = address(this).balance;\n1855-expression_statement-308-308", method="buyTicket_re_ent9()", type_label=expression_statement];
1863 [label="309_ function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n        if (value == 0) {\n            emit Transfer(msg.sender, to, 0);\n            return true;\n        }\n        uint256 tokensToTransfer = value;\n        uint256 tokensToBurn = 0;\n        uint256 tokensToDanPan = 0;\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        if (!_isWhitelisted(msg.sender, to)) {\n              tokensToBurn = findOnePercent(value);\n              tokensToDanPan = findDPPercent(value);\n             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n            _totalSupply = _totalSupply.sub(tokensToBurn);\n            emit Transfer(msg.sender, address(0), tokensToBurn);\n            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n            emit Transfer(msg.sender, DanPanAddress, tokensToDanPan);\n        }\n        assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n        _balances[to] = _balances[to].add(tokensToTransfer);\n        emit Transfer(msg.sender, to, tokensToTransfer);\n    return true;\n  }\n1863-function_definition-310-334", method="transfer(address to,uint256 value)", type_label=function_definition];
1879 [label="310_ require(value <= _balances[msg.sender]);\n1879-expression_statement-311-311", method="transfer(address to,uint256 value)", type_label=expression_statement];
1890 [label="311_ require(to != address(0));\n1890-expression_statement-312-312", method="transfer(address to,uint256 value)", type_label=expression_statement];
1899 [label="312_ if_value == 0\n1899-if-313-316", method="transfer(address to,uint256 value)", type_label=if];
5338 [label="312_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
1914 [label="314_ return true;\n1914-return-315-315", method="transfer(address to,uint256 value)", type_label=return];
1917 [label="316_ uint256 tokensToTransfer = value;\n1917-new_variable-317-317", method="transfer(address to,uint256 value)", type_label=new_variable];
1923 [label="317_ uint256 tokensToBurn = 0;\n1923-new_variable-318-318", method="transfer(address to,uint256 value)", type_label=new_variable];
1929 [label="318_ uint256 tokensToDanPan = 0;\n1929-new_variable-319-319", method="transfer(address to,uint256 value)", type_label=new_variable];
1935 [label="319_ _balances[msg.sender] = _balances[msg.sender].sub(value);\n1935-expression_statement-320-320", method="transfer(address to,uint256 value)", type_label=expression_statement];
1952 [label="320_ if\n1952-if-321-329", method="transfer(address to,uint256 value)", type_label=if];
5391 [label="320_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
1963 [label="321_ tokensToBurn = findOnePercent(value);\n1963-expression_statement-322-322", method="transfer(address to,uint256 value)", type_label=expression_statement];
1970 [label="322_ tokensToDanPan = findDPPercent(value);\n1970-expression_statement-323-323", method="transfer(address to,uint256 value)", type_label=expression_statement];
1977 [label="323_ tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n1977-expression_statement-324-324", method="transfer(address to,uint256 value)", type_label=expression_statement];
1991 [label="324_ _totalSupply = _totalSupply.sub(tokensToBurn);\n1991-expression_statement-325-325", method="transfer(address to,uint256 value)", type_label=expression_statement];
2012 [label="326_ _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n2012-expression_statement-327-327", method="transfer(address to,uint256 value)", type_label=expression_statement];
2035 [label="329_ assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n2035-expression_statement-330-330", method="transfer(address to,uint256 value)", type_label=expression_statement];
2052 [label="330_ _balances[to] = _balances[to].add(tokensToTransfer);\n2052-expression_statement-331-331", method="transfer(address to,uint256 value)", type_label=expression_statement];
2075 [label="332_ return true;\n2075-return-333-333", method="transfer(address to,uint256 value)", type_label=return];
2078 [label="334_ mapping(address => uint) redeemableEther_re_ent25;\n2078-new_variable-335-335", method="", type_label=new_variable];
2084 [label="335_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n2084-function_definition-336-341", method="claimReward_re_ent25()", type_label=function_definition];
2088 [label="336_ require(redeemableEther_re_ent25[msg.sender] > 0);\n2088-expression_statement-337-337", method="claimReward_re_ent25()", type_label=expression_statement];
2099 [label="337_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n2099-new_variable-338-338", method="claimReward_re_ent25()", type_label=new_variable];
2109 [label="338_ msg.sender.transfer(transferValue_re_ent25);\n2109-expression_statement-339-339", method="claimReward_re_ent25()", type_label=expression_statement];
2118 [label="339_ redeemableEther_re_ent25[msg.sender] = 0;\n2118-expression_statement-340-340", method="claimReward_re_ent25()", type_label=expression_statement];
2126 [label="341_ function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n    for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }\n  }\n2126-function_definition-342-346", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=function_definition];
2140 [label="342_ for(i < receivers.length;;i++)\n2140-for-343-345", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=for];
5579 [label="342_ end_loop", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=end_loop];
2153 [label="342_ i++\n2153-expression_statement-343-343", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
2156 [label="343_ transfer(receivers[i], amounts[i]);\n2156-expression_statement-344-344", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
2167 [label="346_ mapping(address => uint) userBalance_re_ent19;\n2167-new_variable-347-347", method="", type_label=new_variable];
2173 [label="347_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n2173-function_definition-348-353", method="withdrawBalance_re_ent19()", type_label=function_definition];
2177 [label="348_ if\n2177-if-349-351", method="withdrawBalance_re_ent19()", type_label=if];
5616 [label="348_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
2195 [label="351_ userBalance_re_ent19[msg.sender] = 0;\n2195-expression_statement-352-352", method="withdrawBalance_re_ent19()", type_label=expression_statement];
2203 [label="353_ function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n2203-function_definition-354-359", method="approve(address spender,uint256 value)", type_label=function_definition];
2219 [label="354_ require(spender != address(0));\n2219-expression_statement-355-355", method="approve(address spender,uint256 value)", type_label=expression_statement];
2228 [label="355_ _allowed[msg.sender][spender] = value;\n2228-expression_statement-356-356", method="approve(address spender,uint256 value)", type_label=expression_statement];
2248 [label="357_ return true;\n2248-return-358-358", method="approve(address spender,uint256 value)", type_label=return];
2251 [label="359_ mapping(address => uint) userBalance_re_ent26;\n2251-new_variable-360-360", method="", type_label=new_variable];
2257 [label="360_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n2257-function_definition-361-367", method="withdrawBalance_re_ent26()", type_label=function_definition];
2261 [label="361_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n2261-new_variable-362-362", method="withdrawBalance_re_ent26()", type_label=new_variable];
2285 [label="362_ if\n2285-if-363-365", method="withdrawBalance_re_ent26()", type_label=if];
5724 [label="362_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
2291 [label="365_ userBalance_re_ent26[msg.sender] = 0;\n2291-expression_statement-366-366", method="withdrawBalance_re_ent26()", type_label=expression_statement];
2299 [label="367_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n        if (value == 0) {\n            emit Transfer(from, to, 0);\n            return true;\n        }\n        uint256 tokensToTransfer = value;\n        uint256 tokensToBurn = 0;\n        uint256 tokensToDanPan = 0;\n        _balances[from] = _balances[from].sub(value);\n        if (!_isWhitelisted(from, to)) {\n              tokensToBurn = findOnePercent(value);\n              tokensToDanPan = findDPPercent(value);\n             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n            _totalSupply = _totalSupply.sub(tokensToBurn);\n            emit Transfer(from, address(0), tokensToBurn);\n            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n           emit Transfer(from, DanPanAddress, tokensToDanPan);\n        }\n        assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n        _balances[to] = _balances[to].add(tokensToTransfer);\n	_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        emit Transfer(from, to, tokensToTransfer);\n    return true;\n  }\n2299-function_definition-368-394", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
2319 [label="368_ require(value <= _balances[from]);\n2319-expression_statement-369-369", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2328 [label="369_ require(value <= _allowed[from][msg.sender]);\n2328-expression_statement-370-370", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2341 [label="370_ require(to != address(0));\n2341-expression_statement-371-371", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2350 [label="371_ if_value == 0\n2350-if-372-375", method="transferFrom(address from,address to,uint256 value)", type_label=if];
5789 [label="371_ end_if", method="transferFrom(address from,address to,uint256 value)", type_label=end_if];
2363 [label="373_ return true;\n2363-return-374-374", method="transferFrom(address from,address to,uint256 value)", type_label=return];
2366 [label="375_ uint256 tokensToTransfer = value;\n2366-new_variable-376-376", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
2372 [label="376_ uint256 tokensToBurn = 0;\n2372-new_variable-377-377", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
2378 [label="377_ uint256 tokensToDanPan = 0;\n2378-new_variable-378-378", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
2384 [label="378_ _balances[from] = _balances[from].sub(value);\n2384-expression_statement-379-379", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2397 [label="379_ if\n2397-if-380-388", method="transferFrom(address from,address to,uint256 value)", type_label=if];
5836 [label="379_ end_if", method="transferFrom(address from,address to,uint256 value)", type_label=end_if];
2406 [label="380_ tokensToBurn = findOnePercent(value);\n2406-expression_statement-381-381", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2413 [label="381_ tokensToDanPan = findDPPercent(value);\n2413-expression_statement-382-382", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2420 [label="382_ tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n2420-expression_statement-383-383", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2434 [label="383_ _totalSupply = _totalSupply.sub(tokensToBurn);\n2434-expression_statement-384-384", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2453 [label="385_ _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n2453-expression_statement-386-386", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2474 [label="388_ assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n2474-expression_statement-389-389", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2491 [label="389_ _balances[to] = _balances[to].add(tokensToTransfer);\n2491-expression_statement-390-390", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2504 [label="390_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n2504-expression_statement-391-391", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2533 [label="392_ return true;\n2533-return-393-393", method="transferFrom(address from,address to,uint256 value)", type_label=return];
2536 [label="394_ bool not_called_re_ent20 = true;\n2536-new_variable-395-395", method="", type_label=new_variable];
2542 [label="395_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n2542-function_definition-396-402", method="bug_re_ent20()", type_label=function_definition];
2546 [label="396_ require(not_called_re_ent20);\n2546-expression_statement-397-397", method="bug_re_ent20()", type_label=expression_statement];
2551 [label="397_ if\n2551-if-398-400", method="bug_re_ent20()", type_label=if];
5990 [label="397_ end_if", method="bug_re_ent20()", type_label=end_if];
2566 [label="400_ not_called_re_ent20 = false;\n2566-expression_statement-401-401", method="bug_re_ent20()", type_label=expression_statement];
2571 [label="402_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n2571-function_definition-403-408", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
2587 [label="403_ require(spender != address(0));\n2587-expression_statement-404-404", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
2596 [label="404_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n2596-expression_statement-405-405", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
2634 [label="406_ return true;\n2634-return-407-407", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
2637 [label="408_ mapping(address => uint) redeemableEther_re_ent32;\n2637-new_variable-409-409", method="", type_label=new_variable];
2643 [label="409_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n2643-function_definition-410-415", method="claimReward_re_ent32()", type_label=function_definition];
2647 [label="410_ require(redeemableEther_re_ent32[msg.sender] > 0);\n2647-expression_statement-411-411", method="claimReward_re_ent32()", type_label=expression_statement];
2658 [label="411_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n2658-new_variable-412-412", method="claimReward_re_ent32()", type_label=new_variable];
2668 [label="412_ msg.sender.transfer(transferValue_re_ent32);\n2668-expression_statement-413-413", method="claimReward_re_ent32()", type_label=expression_statement];
2677 [label="413_ redeemableEther_re_ent32[msg.sender] = 0;\n2677-expression_statement-414-414", method="claimReward_re_ent32()", type_label=expression_statement];
2685 [label="415_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n2685-function_definition-416-421", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
2701 [label="416_ require(spender != address(0));\n2701-expression_statement-417-417", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
2710 [label="417_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n2710-expression_statement-418-418", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
2748 [label="419_ return true;\n2748-return-420-420", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
2751 [label="421_ mapping(address => uint) balances_re_ent38;\n2751-new_variable-422-422", method="", type_label=new_variable];
2757 [label="422_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n2757-function_definition-423-427", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
2765 [label="423_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n2765-expression_statement-424-424", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
2776 [label="424_ require(msg.sender.send(_weiToWithdraw));\n2776-expression_statement-425-425", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
2788 [label="425_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n2788-expression_statement-426-426", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
2796 [label="427_ function _mint(address account, uint256 amount) internal {\n    require(amount != 0);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n2796-function_definition-428-432", method="_mint(address account,uint256 amount)", type_label=function_definition];
2808 [label="428_ require(amount != 0);\n2808-expression_statement-429-429", method="_mint(address account,uint256 amount)", type_label=expression_statement];
2815 [label="429_ _balances[account] = _balances[account].add(amount);\n2815-expression_statement-430-430", method="_mint(address account,uint256 amount)", type_label=expression_statement];
2838 [label="432_ mapping(address => uint) redeemableEther_re_ent4;\n2838-new_variable-433-433", method="", type_label=new_variable];
2844 [label="433_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n2844-function_definition-434-439", method="claimReward_re_ent4()", type_label=function_definition];
2848 [label="434_ require(redeemableEther_re_ent4[msg.sender] > 0);\n2848-expression_statement-435-435", method="claimReward_re_ent4()", type_label=expression_statement];
2859 [label="435_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n2859-new_variable-436-436", method="claimReward_re_ent4()", type_label=new_variable];
2869 [label="436_ msg.sender.transfer(transferValue_re_ent4);\n2869-expression_statement-437-437", method="claimReward_re_ent4()", type_label=expression_statement];
2878 [label="437_ redeemableEther_re_ent4[msg.sender] = 0;\n2878-expression_statement-438-438", method="claimReward_re_ent4()", type_label=expression_statement];
2886 [label="439_ function burn(uint256 amount) external {\n    _burn(msg.sender, amount);\n  }\n2886-function_definition-440-442", method="burn(uint256 amount)", type_label=function_definition];
2894 [label="440_ _burn(msg.sender, amount);\n2894-expression_statement-441-441", method="burn(uint256 amount)", type_label=expression_statement];
2903 [label="442_ uint256 counter_re_ent7 =0;\n2903-new_variable-443-443", method="", type_label=new_variable];
2908 [label="443_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n2908-function_definition-444-450", method="callme_re_ent7()", type_label=function_definition];
2912 [label="444_ require(counter_re_ent7<=5);\n2912-expression_statement-445-445", method="callme_re_ent7()", type_label=expression_statement];
2919 [label="445_ if\n2919-if-446-448", method="callme_re_ent7()", type_label=if];
6358 [label="445_ end_if", method="callme_re_ent7()", type_label=end_if];
2934 [label="448_ counter_re_ent7 += 1;\n2934-expression_statement-449-449", method="callme_re_ent7()", type_label=expression_statement];
2938 [label="450_ function _burn(address account, uint256 amount) internal {\n    require(amount != 0);\n    require(amount <= _balances[account]);\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n2938-function_definition-451-457", method="_burn(address account,uint256 amount)", type_label=function_definition];
2950 [label="451_ require(amount != 0);\n2950-expression_statement-452-452", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2957 [label="452_ require(amount <= _balances[account]);\n2957-expression_statement-453-453", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2966 [label="453_ _totalSupply = _totalSupply.sub(amount);\n2966-expression_statement-454-454", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2975 [label="454_ _balances[account] = _balances[account].sub(amount);\n2975-expression_statement-455-455", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2998 [label="457_ address payable lastPlayer_re_ent23;\n2998-new_variable-458-458", method="", type_label=new_variable];
3002 [label="458_ uint jackpot_re_ent23;\n3002-new_variable-459-459", method="", type_label=new_variable];
3006 [label="459_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n3006-function_definition-460-465", method="buyTicket_re_ent23()", type_label=function_definition];
3010 [label="460_ if\n3010-if-461-462", method="buyTicket_re_ent23()", type_label=if];
6449 [label="460_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
3021 [label="462_ lastPlayer_re_ent23 = msg.sender;\n3021-expression_statement-463-463", method="buyTicket_re_ent23()", type_label=expression_statement];
3027 [label="463_ jackpot_re_ent23    = address(this).balance;\n3027-expression_statement-464-464", method="buyTicket_re_ent23()", type_label=expression_statement];
3035 [label="465_ function burnFrom(address account, uint256 amount) external {\n    require(amount <= _allowed[account][msg.sender]);\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n    _burn(account, amount);\n  }\n3035-function_definition-466-470", method="burnFrom(address account,uint256 amount)", type_label=function_definition];
3047 [label="466_ require(amount <= _allowed[account][msg.sender]);\n3047-expression_statement-467-467", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
3060 [label="467_ _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n3060-expression_statement-468-468", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
3081 [label="468_ _burn(account, amount);\n3081-expression_statement-469-469", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
3088 [label="470_ uint256 counter_re_ent14 =0;\n3088-new_variable-471-471", method="", type_label=new_variable];
3093 [label="471_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n3093-function_definition-472-478", method="callme_re_ent14()", type_label=function_definition];
3097 [label="472_ require(counter_re_ent14<=5);\n3097-expression_statement-473-473", method="callme_re_ent14()", type_label=expression_statement];
3104 [label="473_ if\n3104-if-474-476", method="callme_re_ent14()", type_label=if];
6543 [label="473_ end_if", method="callme_re_ent14()", type_label=end_if];
3119 [label="476_ counter_re_ent14 += 1;\n3119-expression_statement-477-477", method="callme_re_ent14()", type_label=expression_statement];
3123 [label="478_ function NewDanPanAddress(address newDanPanaddress) external onlyOwner {\n    require(newDanPanaddress != address(0));\n      emit DanPanAddressChanged(DanPanAddress, newDanPanaddress);\n      DanPanAddress = newDanPanaddress;\n  }\n3123-function_definition-479-483", method="NewDanPanAddress(address newDanPanaddress)", type_label=function_definition];
3130 [label="478_ onlyOwner\n3130-expression_statement-479-479", method="NewDanPanAddress(address newDanPanaddress)", type_label=expression_statement];
3133 [label="479_ require(newDanPanaddress != address(0));\n3133-expression_statement-480-480", method="NewDanPanAddress(address newDanPanaddress)", type_label=expression_statement];
3148 [label="481_ DanPanAddress = newDanPanaddress;\n3148-expression_statement-482-482", method="NewDanPanAddress(address newDanPanaddress)", type_label=expression_statement];
3152 [label="483_ address payable lastPlayer_re_ent30;\n3152-new_variable-484-484", method="", type_label=new_variable];
3156 [label="484_ uint jackpot_re_ent30;\n3156-new_variable-485-485", method="", type_label=new_variable];
3160 [label="485_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n3160-function_definition-486-491", method="buyTicket_re_ent30()", type_label=function_definition];
3164 [label="486_ if\n3164-if-487-488", method="buyTicket_re_ent30()", type_label=if];
6603 [label="486_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
3175 [label="488_ lastPlayer_re_ent30 = msg.sender;\n3175-expression_statement-489-489", method="buyTicket_re_ent30()", type_label=expression_statement];
3181 [label="489_ jackpot_re_ent30    = address(this).balance;\n3181-expression_statement-490-490", method="buyTicket_re_ent30()", type_label=expression_statement];
3189 [label="491_ function NewDanPanPercent(uint256 newDanPanpercent) external onlyOwner {\n      emit DanPanPercentChanged(dpPercent, newDanPanpercent);\n      dpPercent = newDanPanpercent;\n  }\n3189-function_definition-492-495", method="NewDanPanPercent(uint256 newDanPanpercent)", type_label=function_definition];
3196 [label="491_ onlyOwner\n3196-expression_statement-492-492", method="NewDanPanPercent(uint256 newDanPanpercent)", type_label=expression_statement];
3205 [label="493_ dpPercent = newDanPanpercent;\n3205-expression_statement-494-494", method="NewDanPanPercent(uint256 newDanPanpercent)", type_label=expression_statement];
3209 [label="495_ mapping(address => uint) balances_re_ent8;\n3209-new_variable-496-496", method="", type_label=new_variable];
3215 [label="496_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n3215-function_definition-497-501", method="withdraw_balances_re_ent8()", type_label=function_definition];
3219 [label="497_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n3219-new_variable-498-498", method="withdraw_balances_re_ent8()", type_label=new_variable];
3243 [label="498_ if\n3243-if-499-500", method="withdraw_balances_re_ent8()", type_label=if];
6682 [label="498_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
3245 [label="499_ balances_re_ent8[msg.sender] = 0;\n3245-expression_statement-500-500", method="withdraw_balances_re_ent8()", type_label=expression_statement];
3253 [label="501_ function _isWhitelisted(address _from, address _to) internal view returns (bool) {\n        return whitelistFrom[_from]||whitelistTo[_to];\n}\n3253-function_definition-502-504", method="_isWhitelisted(address _from,address _to)", type_label=function_definition];
3270 [label="502_ return whitelistFrom[_from]||whitelistTo[_to];\n3270-return-503-503", method="_isWhitelisted(address _from,address _to)", type_label=return];
3278 [label="504_ mapping(address => uint) redeemableEther_re_ent39;\n3278-new_variable-505-505", method="", type_label=new_variable];
3284 [label="505_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n3284-function_definition-506-511", method="claimReward_re_ent39()", type_label=function_definition];
3288 [label="506_ require(redeemableEther_re_ent39[msg.sender] > 0);\n3288-expression_statement-507-507", method="claimReward_re_ent39()", type_label=expression_statement];
3299 [label="507_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n3299-new_variable-508-508", method="claimReward_re_ent39()", type_label=new_variable];
3309 [label="508_ msg.sender.transfer(transferValue_re_ent39);\n3309-expression_statement-509-509", method="claimReward_re_ent39()", type_label=expression_statement];
3318 [label="509_ redeemableEther_re_ent39[msg.sender] = 0;\n3318-expression_statement-510-510", method="claimReward_re_ent39()", type_label=expression_statement];
3326 [label="511_ function setWhitelistedTo(address _addr, bool _whitelisted) external onlyOwner {\n        emit WhitelistTo(_addr, _whitelisted);\n        whitelistTo[_addr] = _whitelisted;\n    }\n3326-function_definition-512-515", method="setWhitelistedTo(address _addr,bool _whitelisted)", type_label=function_definition];
3337 [label="511_ onlyOwner\n3337-expression_statement-512-512", method="setWhitelistedTo(address _addr,bool _whitelisted)", type_label=expression_statement];
3346 [label="513_ whitelistTo[_addr] = _whitelisted;\n3346-expression_statement-514-514", method="setWhitelistedTo(address _addr,bool _whitelisted)", type_label=expression_statement];
3352 [label="515_ mapping(address => uint) balances_re_ent36;\n3352-new_variable-516-516", method="", type_label=new_variable];
3358 [label="516_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n3358-function_definition-517-520", method="withdraw_balances_re_ent36()", type_label=function_definition];
3362 [label="517_ if\n3362-if-518-519", method="withdraw_balances_re_ent36()", type_label=if];
6801 [label="517_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
3375 [label="518_ balances_re_ent36[msg.sender] = 0;\n3375-expression_statement-519-519", method="withdraw_balances_re_ent36()", type_label=expression_statement];
3383 [label="520_ function setWhitelistedFrom(address _addr, bool _whitelisted) external onlyOwner {\n        emit WhitelistFrom(_addr, _whitelisted);\n        whitelistFrom[_addr] = _whitelisted;\n}\n3383-function_definition-521-524", method="setWhitelistedFrom(address _addr,bool _whitelisted)", type_label=function_definition];
3394 [label="520_ onlyOwner\n3394-expression_statement-521-521", method="setWhitelistedFrom(address _addr,bool _whitelisted)", type_label=expression_statement];
3403 [label="522_ whitelistFrom[_addr] = _whitelisted;\n3403-expression_statement-523-523", method="setWhitelistedFrom(address _addr,bool _whitelisted)", type_label=expression_statement];
3409 [label="524_ uint256 counter_re_ent35 =0;\n3409-new_variable-525-525", method="", type_label=new_variable];
3414 [label="525_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n3414-function_definition-526-532", method="callme_re_ent35()", type_label=function_definition];
3418 [label="526_ require(counter_re_ent35<=5);\n3418-expression_statement-527-527", method="callme_re_ent35()", type_label=expression_statement];
3425 [label="527_ if\n3425-if-528-530", method="callme_re_ent35()", type_label=if];
6864 [label="527_ end_if", method="callme_re_ent35()", type_label=end_if];
3440 [label="530_ counter_re_ent35 += 1;\n3440-expression_statement-531-531", method="callme_re_ent35()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
518;
129 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
146 -> 3585  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3585 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 3585  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
153 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
172 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
199 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
227 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
261 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
315 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
326 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
354 -> 3793  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
392 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
484 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
508 -> 510  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
508 -> 3947  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3947 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 3947  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
524 -> 529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
553 -> 557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
557 -> 561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
571 -> 575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
575 -> 4014  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
601 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
610 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
618 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
622 -> 633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
633 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
660 -> 669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
669 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
677 -> 681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
681 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 707  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
705 -> 4144  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4144 -> 715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 4144  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
715 -> 724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
724 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
732 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
741 -> 4180  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
775 -> 782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
792 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
813 -> 822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
830 -> 839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 862  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
849 -> 4288  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4288 -> 870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
862 -> 4288  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
870 -> 876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
882 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
886 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 4330  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
911 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
917 -> 921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
925 -> 929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 4368  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
940 -> 946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
954 -> 959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
965 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
973 -> 984  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
984 -> 996  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1015 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 4458  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1045 -> 1051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1057 -> 1061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1061 -> 1074  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1061 -> 4500  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4500 -> 1082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1074 -> 4500  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1082 -> 1088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1093 -> 1097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1097 -> 1104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1104 -> 4543  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1123 -> 1131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1137 -> 1141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1141 -> 1165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 4604  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1195 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1199 -> 1204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1204 -> 4643  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1240 -> 1248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1248 -> 1259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1259 -> 1271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1295 -> 1299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1299 -> 1304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1304 -> 1325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1325 -> 4764  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1352 -> 1356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1356 -> 1361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1361 -> 4800  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1381 -> 1388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1393 -> 1397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1397 -> 1404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1404 -> 4843  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1454 -> 1458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1458 -> 1465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1465 -> 4904  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1484 -> 1493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1493 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1495 -> 1499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1503 -> 1507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1507 -> 4946  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1518 -> 1524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1532 -> 1545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1545 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1555 -> 1563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1563 -> 1574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1574 -> 1594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1594 -> 1599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1607 -> 1624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1624 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1630 -> 1634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1638 -> 1642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1642 -> 5081  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1653 -> 1659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1667 -> 1680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1680 -> 1691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1691 -> 1707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1707 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1715 -> 1723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1723 -> 1734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1734 -> 1754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1754 -> 1759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1767 -> 1780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1780 -> 1791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1791 -> 1812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1812 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1814 -> 1818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1822 -> 1826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1826 -> 1844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1844 -> 5283  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1849 -> 1855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1863 -> 1879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1879 -> 1890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1890 -> 1899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1899 -> 5338  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5338 -> 1917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1914 -> 5338  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1914 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1917 -> 1923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1923 -> 1929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1929 -> 1935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1935 -> 1952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1952 -> 1963  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1952 -> 5391  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1963 -> 1970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1970 -> 1977  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1977 -> 1991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2035 -> 2052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2075 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2084 -> 2088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2088 -> 2099  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2099 -> 2109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2109 -> 2118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2126 -> 2140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2140 -> 2156  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2140 -> 5579  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5579 -> 2167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2153 -> 2140  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2156 -> 2153  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2173 -> 2177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2177 -> 5616  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2203 -> 2219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2219 -> 2228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2248 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2257 -> 2261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2261 -> 2285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2285 -> 5724  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2299 -> 2319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2319 -> 2328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2328 -> 2341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2341 -> 2350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2350 -> 5789  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5789 -> 2366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2363 -> 5789  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2363 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2366 -> 2372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2372 -> 2378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2378 -> 2384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2384 -> 2397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2397 -> 2406  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2397 -> 5836  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2406 -> 2413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2413 -> 2420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2420 -> 2434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2474 -> 2491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2491 -> 2504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2533 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2542 -> 2546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2546 -> 2551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2551 -> 5990  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2571 -> 2587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2587 -> 2596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2634 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2643 -> 2647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2647 -> 2658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2658 -> 2668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2668 -> 2677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2685 -> 2701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2701 -> 2710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2748 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2757 -> 2765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2765 -> 2776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2776 -> 2788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2796 -> 2808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2808 -> 2815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2844 -> 2848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2848 -> 2859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2859 -> 2869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2869 -> 2878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2886 -> 2894  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2908 -> 2912  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2912 -> 2919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2919 -> 6358  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2938 -> 2950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2950 -> 2957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2957 -> 2966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2966 -> 2975  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2998 -> 3002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3006 -> 3010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3010 -> 6449  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3021 -> 3027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3035 -> 3047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3047 -> 3060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3060 -> 3081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3093 -> 3097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3097 -> 3104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3104 -> 6543  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3123 -> 3133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3152 -> 3156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3160 -> 3164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3164 -> 6603  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3175 -> 3181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3189 -> 3205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3215 -> 3219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3219 -> 3243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3243 -> 3245  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3243 -> 6682  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6682 -> 3253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3245 -> 6682  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3253 -> 3270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3270 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3284 -> 3288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3288 -> 3299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3299 -> 3309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3309 -> 3318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3326 -> 3346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3358 -> 3362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3362 -> 3375  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3362 -> 6801  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6801 -> 3383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3375 -> 6801  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3383 -> 3403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3414 -> 3418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3418 -> 3425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3425 -> 6864  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
