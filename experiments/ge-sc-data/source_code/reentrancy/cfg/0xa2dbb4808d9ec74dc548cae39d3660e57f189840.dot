digraph  {
13 [label="2_ struct Role {\n        mapping (address => bool) bearer;\n    }\n13-expression_statement-3-5", method="Role()", type_label=expression_statement];
21 [label="5_ function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n        role.bearer[account] = true;\n    }\n21-function_definition-6-10", method="add(Role storage role,address account)", type_label=function_definition];
34 [label="6_ require(account != address(0));\n34-expression_statement-7-7", method="add(Role storage role,address account)", type_label=expression_statement];
43 [label="7_ require(!has(role, account));\n43-expression_statement-8-8", method="add(Role storage role,address account)", type_label=expression_statement];
54 [label="8_ role.bearer[account] = true;\n54-expression_statement-9-9", method="add(Role storage role,address account)", type_label=expression_statement];
63 [label="10_ function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n        role.bearer[account] = false;\n    }\n63-function_definition-11-15", method="remove(Role storage role,address account)", type_label=function_definition];
76 [label="11_ require(account != address(0));\n76-expression_statement-12-12", method="remove(Role storage role,address account)", type_label=expression_statement];
85 [label="12_ require(has(role, account));\n85-expression_statement-13-13", method="remove(Role storage role,address account)", type_label=expression_statement];
95 [label="13_ role.bearer[account] = false;\n95-expression_statement-14-14", method="remove(Role storage role,address account)", type_label=expression_statement];
104 [label="15_ function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n104-function_definition-16-19", method="has(Role storage role,address account)", type_label=function_definition];
122 [label="16_ require(account != address(0));\n122-expression_statement-17-17", method="has(Role storage role,address account)", type_label=expression_statement];
131 [label="17_ return role.bearer[account];\n131-return-18-18", method="has(Role storage role,address account)", type_label=return];
159 [label="24_ Roles.Role private _pausers;\n159-new_variable-25-25", method="", type_label=new_variable];
168 [label="26_ _addPauser(msg.sender);\n168-expression_statement-27-27", method="", type_label=expression_statement];
175 [label="28_ modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n175-expression_statement-29-32", method="", type_label=expression_statement];
178 [label="29_ require(isPauser(msg.sender));\n178-expression_statement-30-30", method="", type_label=expression_statement];
188 [label="30_ _;\n188-expression_statement-31-31", method="", type_label=expression_statement];
190 [label="32_ function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n190-function_definition-33-35", method="isPauser(address account)", type_label=function_definition];
203 [label="33_ return _pausers.has(account);\n203-return-34-34", method="isPauser(address account)", type_label=return];
210 [label="35_ function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n210-function_definition-36-38", method="addPauser(address account)", type_label=function_definition];
217 [label="35_ onlyPauser\n217-expression_statement-36-36", method="addPauser(address account)", type_label=expression_statement];
220 [label="36_ _addPauser(account);\n220-expression_statement-37-37", method="addPauser(address account)", type_label=expression_statement];
225 [label="38_ function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n225-function_definition-39-41", method="renouncePauser()", type_label=function_definition];
229 [label="39_ _removePauser(msg.sender);\n229-expression_statement-40-40", method="renouncePauser()", type_label=expression_statement];
236 [label="41_ function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n236-function_definition-42-45", method="_addPauser(address account)", type_label=function_definition];
244 [label="42_ _pausers.add(account);\n244-expression_statement-43-43", method="_addPauser(address account)", type_label=expression_statement];
255 [label="45_ function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n255-function_definition-46-49", method="_removePauser(address account)", type_label=function_definition];
263 [label="46_ _pausers.remove(account);\n263-expression_statement-47-47", method="_removePauser(address account)", type_label=expression_statement];
277 [label="51_ function transfer(address to, uint256 value) external returns (bool);\n277-function_definition-52-52", method="transfer(address to,uint256 value)", type_label=function_definition];
292 [label="52_ function approve(address spender, uint256 value) external returns (bool);\n292-function_definition-53-53", method="approve(address spender,uint256 value)", type_label=function_definition];
307 [label="53_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n307-function_definition-54-54", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
326 [label="54_ function totalSupply() external view returns (uint256);\n326-function_definition-55-55", method="totalSupply()", type_label=function_definition];
334 [label="55_ function balanceOf(address who) external view returns (uint256);\n334-function_definition-56-56", method="balanceOf(address who)", type_label=function_definition];
346 [label="56_ function allowance(address owner, address spender) external view returns (uint256);\n346-function_definition-57-57", method="allowance(address owner,address spender)", type_label=function_definition];
396 [label="61_ string private _name;\n396-new_variable-62-62", method="", type_label=new_variable];
401 [label="62_ string private _symbol;\n401-new_variable-63-63", method="", type_label=new_variable];
406 [label="63_ uint8 private _decimals;\n406-new_variable-64-64", method="", type_label=new_variable];
425 [label="65_ _name = name;\n425-expression_statement-66-66", method="", type_label=expression_statement];
429 [label="66_ _symbol = symbol;\n429-expression_statement-67-67", method="", type_label=expression_statement];
433 [label="67_ _decimals = decimals;\n433-expression_statement-68-68", method="", type_label=expression_statement];
437 [label="69_ function name() public view returns (string memory) {\n        return _name;\n    }\n437-function_definition-70-72", method="name()", type_label=function_definition];
446 [label="70_ return _name;\n446-return-71-71", method="name()", type_label=return];
448 [label="72_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n448-function_definition-73-75", method="symbol()", type_label=function_definition];
457 [label="73_ return _symbol;\n457-return-74-74", method="symbol()", type_label=return];
459 [label="75_ function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n459-function_definition-76-78", method="decimals()", type_label=function_definition];
468 [label="76_ return _decimals;\n468-return-77-77", method="decimals()", type_label=return];
473 [label="80_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n473-function_definition-81-88", method="mul(uint256 a,uint256 b)", type_label=function_definition];
490 [label="81_ if_a == 0\n490-if-82-84", method="mul(uint256 a,uint256 b)", type_label=if];
2432 [label="81_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
495 [label="82_ return 0;\n495-return-83-83", method="mul(uint256 a,uint256 b)", type_label=return];
497 [label="84_ uint256 c = a * b;\n497-new_variable-85-85", method="mul(uint256 a,uint256 b)", type_label=new_variable];
505 [label="85_ require(c / a == b);\n505-expression_statement-86-86", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
514 [label="86_ return c;\n514-return-87-87", method="mul(uint256 a,uint256 b)", type_label=return];
516 [label="88_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n516-function_definition-89-93", method="div(uint256 a,uint256 b)", type_label=function_definition];
533 [label="89_ require(b > 0);\n533-expression_statement-90-90", method="div(uint256 a,uint256 b)", type_label=expression_statement];
540 [label="90_ uint256 c = a / b;\n540-new_variable-91-91", method="div(uint256 a,uint256 b)", type_label=new_variable];
548 [label="91_ return c;\n548-return-92-92", method="div(uint256 a,uint256 b)", type_label=return];
550 [label="93_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n550-function_definition-94-98", method="sub(uint256 a,uint256 b)", type_label=function_definition];
567 [label="94_ require(b <= a);\n567-expression_statement-95-95", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
574 [label="95_ uint256 c = a - b;\n574-new_variable-96-96", method="sub(uint256 a,uint256 b)", type_label=new_variable];
582 [label="96_ return c;\n582-return-97-97", method="sub(uint256 a,uint256 b)", type_label=return];
584 [label="98_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n584-function_definition-99-103", method="add(uint256 a,uint256 b)", type_label=function_definition];
601 [label="99_ uint256 c = a + b;\n601-new_variable-100-100", method="add(uint256 a,uint256 b)", type_label=new_variable];
609 [label="100_ require(c >= a);\n609-expression_statement-101-101", method="add(uint256 a,uint256 b)", type_label=expression_statement];
616 [label="101_ return c;\n616-return-102-102", method="add(uint256 a,uint256 b)", type_label=return];
618 [label="103_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n618-function_definition-104-107", method="mod(uint256 a,uint256 b)", type_label=function_definition];
635 [label="104_ require(b != 0);\n635-expression_statement-105-105", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
642 [label="105_ return a % b;\n642-return-106-106", method="mod(uint256 a,uint256 b)", type_label=return];
657 [label="110_ mapping (address => uint256) private _balances;\n657-new_variable-111-111", method="", type_label=new_variable];
664 [label="111_ mapping (address => mapping (address => uint256)) private _allowed;\n664-new_variable-112-112", method="", type_label=new_variable];
673 [label="112_ uint256 private _totalSupply;\n673-new_variable-113-113", method="", type_label=new_variable];
678 [label="113_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n678-function_definition-114-116", method="totalSupply()", type_label=function_definition];
687 [label="114_ return _totalSupply;\n687-return-115-115", method="totalSupply()", type_label=return];
689 [label="116_ function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n689-function_definition-117-119", method="balanceOf(address owner)", type_label=function_definition];
702 [label="117_ return _balances[owner];\n702-return-118-118", method="balanceOf(address owner)", type_label=return];
706 [label="119_ function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n706-function_definition-120-122", method="allowance(address owner,address spender)", type_label=function_definition];
723 [label="120_ return _allowed[owner][spender];\n723-return-121-121", method="allowance(address owner,address spender)", type_label=return];
729 [label="122_ function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n729-function_definition-123-126", method="transfer(address to,uint256 value)", type_label=function_definition];
745 [label="123_ _transfer(msg.sender, to, value);\n745-expression_statement-124-124", method="transfer(address to,uint256 value)", type_label=expression_statement];
756 [label="124_ return true;\n756-return-125-125", method="transfer(address to,uint256 value)", type_label=return];
759 [label="126_ function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n759-function_definition-127-130", method="approve(address spender,uint256 value)", type_label=function_definition];
775 [label="127_ _approve(msg.sender, spender, value);\n775-expression_statement-128-128", method="approve(address spender,uint256 value)", type_label=expression_statement];
786 [label="128_ return true;\n786-return-129-129", method="approve(address spender,uint256 value)", type_label=return];
789 [label="130_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n789-function_definition-131-135", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
809 [label="131_ _transfer(from, to, value);\n809-expression_statement-132-132", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
818 [label="132_ _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n818-expression_statement-133-133", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
840 [label="133_ return true;\n840-return-134-134", method="transferFrom(address from,address to,uint256 value)", type_label=return];
843 [label="135_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n843-function_definition-136-139", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
859 [label="136_ _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n859-expression_statement-137-137", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
881 [label="137_ return true;\n881-return-138-138", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
884 [label="139_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n884-function_definition-140-143", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
900 [label="140_ _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n900-expression_statement-141-141", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
922 [label="141_ return true;\n922-return-142-142", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
925 [label="143_ function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n925-function_definition-144-149", method="_transfer(address from,address to,uint256 value)", type_label=function_definition];
941 [label="144_ require(to != address(0));\n941-expression_statement-145-145", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
950 [label="145_ _balances[from] = _balances[from].sub(value);\n950-expression_statement-146-146", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
963 [label="146_ _balances[to] = _balances[to].add(value);\n963-expression_statement-147-147", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
984 [label="149_ function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n984-function_definition-150-155", method="_mint(address account,uint256 value)", type_label=function_definition];
996 [label="150_ require(account != address(0));\n996-expression_statement-151-151", method="_mint(address account,uint256 value)", type_label=expression_statement];
1005 [label="151_ _totalSupply = _totalSupply.add(value);\n1005-expression_statement-152-152", method="_mint(address account,uint256 value)", type_label=expression_statement];
1014 [label="152_ _balances[account] = _balances[account].add(value);\n1014-expression_statement-153-153", method="_mint(address account,uint256 value)", type_label=expression_statement];
1037 [label="155_ function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n1037-function_definition-156-161", method="_burn(address account,uint256 value)", type_label=function_definition];
1049 [label="156_ require(account != address(0));\n1049-expression_statement-157-157", method="_burn(address account,uint256 value)", type_label=expression_statement];
1058 [label="157_ _totalSupply = _totalSupply.sub(value);\n1058-expression_statement-158-158", method="_burn(address account,uint256 value)", type_label=expression_statement];
1067 [label="158_ _balances[account] = _balances[account].sub(value);\n1067-expression_statement-159-159", method="_burn(address account,uint256 value)", type_label=expression_statement];
1090 [label="161_ function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n1090-function_definition-162-167", method="_approve(address owner,address spender,uint256 value)", type_label=function_definition];
1106 [label="162_ require(spender != address(0));\n1106-expression_statement-163-163", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1115 [label="163_ require(owner != address(0));\n1115-expression_statement-164-164", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1124 [label="164_ _allowed[owner][spender] = value;\n1124-expression_statement-165-165", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1140 [label="167_ function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n1140-function_definition-168-171", method="_burnFrom(address account,uint256 value)", type_label=function_definition];
1152 [label="168_ _burn(account, value);\n1152-expression_statement-169-169", method="_burnFrom(address account,uint256 value)", type_label=expression_statement];
1159 [label="169_ _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n1159-expression_statement-170-170", method="_burnFrom(address account,uint256 value)", type_label=expression_statement];
1199 [label="175_ bool private _paused;\n1199-new_variable-176-176", method="", type_label=new_variable];
1206 [label="177_ _paused = false;\n1206-expression_statement-178-178", method="", type_label=expression_statement];
1211 [label="179_ function paused() public view returns (bool) {\n        return _paused;\n    }\n1211-function_definition-180-182", method="paused()", type_label=function_definition];
1220 [label="180_ return _paused;\n1220-return-181-181", method="paused()", type_label=return];
1222 [label="182_ modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n1222-expression_statement-183-186", method="", type_label=expression_statement];
1225 [label="183_ require(!_paused);\n1225-expression_statement-184-184", method="", type_label=expression_statement];
1231 [label="184_ _;\n1231-expression_statement-185-185", method="", type_label=expression_statement];
1233 [label="186_ modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n1233-expression_statement-187-190", method="", type_label=expression_statement];
1236 [label="187_ require(_paused);\n1236-expression_statement-188-188", method="", type_label=expression_statement];
1241 [label="188_ _;\n1241-expression_statement-189-189", method="", type_label=expression_statement];
1243 [label="190_ function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n1243-function_definition-191-194", method="pause()", type_label=function_definition];
1246 [label="190_ onlyPauser\n1246-expression_statement-191-191", method="pause()", type_label=expression_statement];
1248 [label="190_ whenNotPaused\n1248-expression_statement-191-191", method="pause()", type_label=expression_statement];
1251 [label="191_ _paused = true;\n1251-expression_statement-192-192", method="pause()", type_label=expression_statement];
1262 [label="194_ function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n1262-function_definition-195-198", method="unpause()", type_label=function_definition];
1265 [label="194_ onlyPauser\n1265-expression_statement-195-195", method="unpause()", type_label=expression_statement];
1267 [label="194_ whenPaused\n1267-expression_statement-195-195", method="unpause()", type_label=expression_statement];
1270 [label="195_ _paused = false;\n1270-expression_statement-196-196", method="unpause()", type_label=expression_statement];
1290 [label="200_ function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n1290-function_definition-201-203", method="transfer(address to,uint256 value)", type_label=function_definition];
1301 [label="200_ whenNotPaused\n1301-expression_statement-201-201", method="transfer(address to,uint256 value)", type_label=expression_statement];
1308 [label="201_ return super.transfer(to, value);\n1308-return-202-202", method="transfer(address to,uint256 value)", type_label=return];
1317 [label="203_ function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n1317-function_definition-204-206", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
1332 [label="203_ whenNotPaused\n1332-expression_statement-204-204", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1339 [label="204_ return super.transferFrom(from, to, value);\n1339-return-205-205", method="transferFrom(address from,address to,uint256 value)", type_label=return];
1350 [label="206_ function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n1350-function_definition-207-209", method="approve(address spender,uint256 value)", type_label=function_definition];
1361 [label="206_ whenNotPaused\n1361-expression_statement-207-207", method="approve(address spender,uint256 value)", type_label=expression_statement];
1368 [label="207_ return super.approve(spender, value);\n1368-return-208-208", method="approve(address spender,uint256 value)", type_label=return];
1377 [label="209_ function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n1377-function_definition-210-212", method="increaseAllowance(address spender,uint addedValue)", type_label=function_definition];
1388 [label="209_ whenNotPaused\n1388-expression_statement-210-210", method="increaseAllowance(address spender,uint addedValue)", type_label=expression_statement];
1396 [label="210_ return super.increaseAllowance(spender, addedValue);\n1396-return-211-211", method="increaseAllowance(address spender,uint addedValue)", type_label=return];
1405 [label="212_ function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n1405-function_definition-213-215", method="decreaseAllowance(address spender,uint subtractedValue)", type_label=function_definition];
1416 [label="212_ whenNotPaused\n1416-expression_statement-213-213", method="decreaseAllowance(address spender,uint subtractedValue)", type_label=expression_statement];
1424 [label="213_ return super.decreaseAllowance(spender, subtractedValue);\n1424-return-214-214", method="decreaseAllowance(address spender,uint subtractedValue)", type_label=return];
1442 [label="217_ uint8 public constant DECIMALS = 18;\n1442-new_variable-218-218", method="", type_label=new_variable];
1448 [label="218_ uint256 public constant INITIAL_SUPPLY = 200000000 * (10 ** uint256(DECIMALS));\n1448-new_variable-219-219", method="", type_label=new_variable];
1461 [label="219_ uint256 public constant CROWDSALE = 90000000 * (10 ** uint256(DECIMALS));\n1461-new_variable-220-220", method="", type_label=new_variable];
1474 [label="220_ uint256 public constant BOOTSTRAP = 30000000 * (10 ** uint256(DECIMALS));\n1474-new_variable-221-221", method="", type_label=new_variable];
1487 [label="221_ uint256 public constant RESERVES = 30000000 * (10 ** uint256(DECIMALS));\n1487-new_variable-222-222", method="", type_label=new_variable];
1500 [label="222_ uint256 public constant ADVISORS = 10000000 * (10 ** uint256(DECIMALS));\n1500-new_variable-223-223", method="", type_label=new_variable];
1513 [label="223_ uint256 public constant DEVELOPMENT = 30000000 * (10 ** uint256(DECIMALS));\n1513-new_variable-224-224", method="", type_label=new_variable];
1526 [label="224_ uint256 public constant MARKETING = 10000000 * (10 ** uint256(DECIMALS));\n1526-new_variable-225-225", method="", type_label=new_variable];
1539 [label="225_ uint256 public unblock = 1623974399;\n1539-new_variable-226-226", method="", type_label=new_variable];
1545 [label="226_ address private _owner;\n1545-new_variable-227-227", method="", type_label=new_variable];
1550 [label="227_ uint256 private CrowdSale = 0;\n1550-new_variable-228-228", method="", type_label=new_variable];
1556 [label="228_ uint256 private Bootstrap = 0;\n1556-new_variable-229-229", method="", type_label=new_variable];
1562 [label="229_ uint256 private Reserves = 0;\n1562-new_variable-230-230", method="", type_label=new_variable];
1568 [label="230_ uint256 private Advisors = 0;\n1568-new_variable-231-231", method="", type_label=new_variable];
1574 [label="231_ uint256 private Development = 0;\n1574-new_variable-232-232", method="", type_label=new_variable];
1580 [label="232_ uint256 private Marketing = 0;\n1580-new_variable-233-233", method="", type_label=new_variable];
1586 [label="233_ mapping(address => bool) public capAddress;\n1586-new_variable-234-234", method="", type_label=new_variable];
1593 [label="234_ uint256[] caps = [CROWDSALE,BOOTSTRAP,RESERVES,ADVISORS,DEVELOPMENT,MARKETING];\n1593-new_variable-235-235", method="", type_label=new_variable];
1605 [label="235_ uint256[] supplied = [0,0,0,0,0,0];\n1605-new_variable-236-236", method="", type_label=new_variable];
1618 [label="236_ ERC20Detailed(\"DeepCloud\", \"DEEP\", DECIMALS)\n1618-expression_statement-237-237", method="", type_label=expression_statement];
1629 [label="237_ _owner = msg.sender;\n1629-expression_statement-238-238", method="", type_label=expression_statement];
1635 [label="238_ _mint(msg.sender, INITIAL_SUPPLY);\n1635-expression_statement-239-239", method="", type_label=expression_statement];
1644 [label="240_ function initialTransfer(uint index,address to, uint256 value) public onlyOwner returns (bool){\n      _checkAvailableCap(index, value);\n      _updateCapSupply(index, value);\n      capAddress[to] = true;\n      transfer(to, value);\n      return true;\n    }\n1644-function_definition-241-247", method="initialTransfer(uint index,address to,uint256 value)", type_label=function_definition];
1659 [label="240_ onlyOwner\n1659-expression_statement-241-241", method="initialTransfer(uint index,address to,uint256 value)", type_label=expression_statement];
1666 [label="241_ _checkAvailableCap(index, value);\n1666-expression_statement-242-242", method="initialTransfer(uint index,address to,uint256 value)", type_label=expression_statement];
1673 [label="242_ _updateCapSupply(index, value);\n1673-expression_statement-243-243", method="initialTransfer(uint index,address to,uint256 value)", type_label=expression_statement];
1680 [label="243_ capAddress[to] = true;\n1680-expression_statement-244-244", method="initialTransfer(uint index,address to,uint256 value)", type_label=expression_statement];
1687 [label="244_ transfer(to, value);\n1687-expression_statement-245-245", method="initialTransfer(uint index,address to,uint256 value)", type_label=expression_statement];
1694 [label="245_ return true;\n1694-return-246-246", method="initialTransfer(uint index,address to,uint256 value)", type_label=return];
1697 [label="247_ function _updateCapSupply(uint index, uint256 value)  internal  {\n      supplied[index] += value;\n    }\n1697-function_definition-248-250", method="_updateCapSupply(uint index,uint256 value)", type_label=function_definition];
1709 [label="248_ supplied[index] += value;\n1709-expression_statement-249-249", method="_updateCapSupply(uint index,uint256 value)", type_label=expression_statement];
1715 [label="250_ function _checkAvailableCap(uint index, uint256 value) internal view  {\n      require(caps[index] >= (supplied[index] + value), \"Balance: Low balance\");\n    }\n1715-function_definition-251-253", method="_checkAvailableCap(uint index,uint256 value)", type_label=function_definition];
1728 [label="251_ require(caps[index] >= (supplied[index] + value), \"Balance: Low balance\");\n1728-expression_statement-252-252", method="_checkAvailableCap(uint index,uint256 value)", type_label=expression_statement];
1745 [label="253_ function transfer(address to, uint256 value) public returns (bool) {\n        require(checkLock());\n        return super.transfer(to, value);\n    }\n1745-function_definition-254-257", method="transfer(address to,uint256 value)", type_label=function_definition];
1761 [label="254_ require(checkLock());\n1761-expression_statement-255-255", method="transfer(address to,uint256 value)", type_label=expression_statement];
1767 [label="255_ return super.transfer(to, value);\n1767-return-256-256", method="transfer(address to,uint256 value)", type_label=return];
1776 [label="257_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        checkLock();\n        return super.transferFrom(from, to, value);\n    }\n1776-function_definition-258-261", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
1796 [label="258_ checkLock();\n1796-expression_statement-259-259", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1799 [label="259_ return super.transferFrom(from, to, value);\n1799-return-260-260", method="transferFrom(address from,address to,uint256 value)", type_label=return];
1810 [label="261_ function approve(address spender, uint256 value) public returns (bool) {\n        checkLock();\n        return super.approve(spender, value);\n    }\n1810-function_definition-262-265", method="approve(address spender,uint256 value)", type_label=function_definition];
1826 [label="262_ checkLock();\n1826-expression_statement-263-263", method="approve(address spender,uint256 value)", type_label=expression_statement];
1829 [label="263_ return super.approve(spender, value);\n1829-return-264-264", method="approve(address spender,uint256 value)", type_label=return];
1838 [label="265_ function increaseAllowance(address spender, uint addedValue) public returns (bool) {\n        checkLock();\n        return super.increaseAllowance(spender, addedValue);\n    }\n1838-function_definition-266-269", method="increaseAllowance(address spender,uint addedValue)", type_label=function_definition];
1854 [label="266_ checkLock();\n1854-expression_statement-267-267", method="increaseAllowance(address spender,uint addedValue)", type_label=expression_statement];
1857 [label="267_ return super.increaseAllowance(spender, addedValue);\n1857-return-268-268", method="increaseAllowance(address spender,uint addedValue)", type_label=return];
1866 [label="269_ function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\n        checkLock();\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n1866-function_definition-270-273", method="decreaseAllowance(address spender,uint subtractedValue)", type_label=function_definition];
1882 [label="270_ checkLock();\n1882-expression_statement-271-271", method="decreaseAllowance(address spender,uint subtractedValue)", type_label=expression_statement];
1885 [label="271_ return super.decreaseAllowance(spender, subtractedValue);\n1885-return-272-272", method="decreaseAllowance(address spender,uint subtractedValue)", type_label=return];
1894 [label="273_ function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n1894-function_definition-274-276", method="isOwner()", type_label=function_definition];
1903 [label="274_ return msg.sender == _owner;\n1903-return-275-275", method="isOwner()", type_label=return];
1909 [label="276_ modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n1909-expression_statement-277-280", method="", type_label=expression_statement];
1912 [label="277_ require(isOwner(), \"Ownable: caller is not the owner\");\n1912-expression_statement-278-278", method="", type_label=expression_statement];
1921 [label="278_ _;\n1921-expression_statement-279-279", method="", type_label=expression_statement];
1923 [label="280_ function checkLock() internal view returns (bool){\n      if(capAddress[msg.sender]){\n          return now > unblock;\n      } else {\n          return true;\n      }\n    }\n1923-function_definition-281-287", method="checkLock()", type_label=function_definition];
1932 [label="281_ if\n1932-if-282-286", method="checkLock()", type_label=if];
3874 [label="281_ end_if", method="checkLock()", type_label=end_if];
1939 [label="282_ return now > unblock;\n1939-return-283-283", method="checkLock()", type_label=return];
1944 [label="284_ return true;\n1944-return-285-285", method="checkLock()", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
21 -> 34  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 43  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
43 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
63 -> 76  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
76 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
178 -> 188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
190 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
203 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
210 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
425 -> 429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
429 -> 433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
448 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
459 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
473 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 495  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
490 -> 2432  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2432 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 2432  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
495 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
497 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
514 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
516 -> 533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
533 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
548 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
550 -> 567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
574 -> 582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
584 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
609 -> 616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
616 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
618 -> 635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
635 -> 642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
642 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
657 -> 664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
687 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
689 -> 702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
702 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
706 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
723 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
729 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
745 -> 756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
756 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
759 -> 775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
775 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
789 -> 809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
818 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
843 -> 859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
859 -> 881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
881 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
884 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
925 -> 941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
941 -> 950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
950 -> 963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
984 -> 996  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
996 -> 1005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 1014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1037 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 1058  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1058 -> 1067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1090 -> 1106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 1115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1115 -> 1124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1140 -> 1152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1152 -> 1159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1211 -> 1220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1220 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1222 -> 1233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1225 -> 1231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1236 -> 1241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1243 -> 1251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1246 -> 1248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1262 -> 1270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1265 -> 1267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1290 -> 1308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1308 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1317 -> 1339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1339 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1350 -> 1368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1368 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1377 -> 1396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1396 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1405 -> 1424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1424 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1442 -> 1448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1448 -> 1461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1461 -> 1474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1474 -> 1487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1487 -> 1500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1500 -> 1513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1513 -> 1526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1526 -> 1539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1539 -> 1545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1545 -> 1550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1550 -> 1556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1556 -> 1562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1562 -> 1568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1568 -> 1574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1574 -> 1580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1580 -> 1586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1586 -> 1593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1593 -> 1605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1629 -> 1635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1644 -> 1666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1666 -> 1673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1673 -> 1680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1680 -> 1687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1687 -> 1694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1694 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1697 -> 1709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1715 -> 1728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1745 -> 1761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1761 -> 1767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1767 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1776 -> 1796  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1796 -> 1799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1799 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1810 -> 1826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1826 -> 1829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1829 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1838 -> 1854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1854 -> 1857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1857 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1866 -> 1882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1882 -> 1885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1885 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1894 -> 1903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1903 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1912 -> 1921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1923 -> 1932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1932 -> 1939  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1932 -> 1944  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3874 -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1939 -> 3874  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1939 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1944 -> 3874  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1944 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
