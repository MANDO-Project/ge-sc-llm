digraph  {
13 [label="3_ address newOwner;\n13-new_variable-4-4", method="", type_label=new_variable];
17 [label="4_ address owner = msg.sender;\n17-new_variable-5-5", method="", type_label=new_variable];
24 [label="5_ function changeOwner(address addr)\n    public\n    onlyOwner\n    {\n        newOwner = addr;\n    }\n24-function_definition-6-11", method="changeOwner(address addr)", type_label=function_definition];
31 [label="7_ onlyOwner\n31-expression_statement-8-8", method="changeOwner(address addr)", type_label=expression_statement];
34 [label="9_ newOwner = addr;\n34-expression_statement-10-10", method="changeOwner(address addr)", type_label=expression_statement];
38 [label="11_ function confirmOwner() \n    public\n    {\n        if(msg.sender==newOwner)\n        {\n            owner=newOwner;\n        }\n    }\n38-function_definition-12-19", method="confirmOwner()", type_label=function_definition];
42 [label="14_ if_msg.sender==newOwner\n42-if-15-18", method="confirmOwner()", type_label=if];
288 [label="14_ end_if", method="confirmOwner()", type_label=end_if];
49 [label="16_ owner=newOwner;\n49-expression_statement-17-17", method="confirmOwner()", type_label=expression_statement];
53 [label="19_ modifier onlyOwner\n    {\n        if(owner == msg.sender)_;\n    }\n53-expression_statement-20-23", method="", type_label=expression_statement];
56 [label="21_ if_owner == msg.sender\n56-if-22-22", method="", type_label=if];
302 [label="21_ end_if", method="", type_label=end_if];
62 [label="21_ _;\n62-expression_statement-22-22", method="", type_label=expression_statement];
70 [label="26_ address owner = msg.sender;\n70-new_variable-27-27", method="", type_label=new_variable];
77 [label="27_ function WithdrawToken(address token, uint256 amount,address to)\n    public \n    onlyOwner\n    {\n        token.call(bytes4(sha3(\"transfer(address,uint256)\")),to,amount); \n    }\n77-function_definition-28-33", method="WithdrawToken(address token,uint256 amount,address to)", type_label=function_definition];
92 [label="29_ onlyOwner\n92-expression_statement-30-30", method="WithdrawToken(address token,uint256 amount,address to)", type_label=expression_statement];
95 [label="31_ token.call(bytes4(sha3(\"transfer(address,uint256)\")),to,amount);\n95-expression_statement-32-32", method="WithdrawToken(address token,uint256 amount,address to)", type_label=expression_statement];
118 [label="36_ uint public MinDeposit;\n118-new_variable-37-37", method="", type_label=new_variable];
123 [label="37_ mapping (address => uint) public Holders;\n123-new_variable-38-38", method="", type_label=new_variable];
130 [label="38_ function initTokenBank()\n    public\n    {\n        owner = msg.sender;\n        MinDeposit = 1 ether;\n    }\n130-function_definition-39-44", method="initTokenBank()", type_label=function_definition];
134 [label="41_ owner = msg.sender;\n134-expression_statement-42-42", method="initTokenBank()", type_label=expression_statement];
140 [label="42_ MinDeposit = 1 ether;\n140-expression_statement-43-43", method="initTokenBank()", type_label=expression_statement];
148 [label="47_ Deposit();\n148-expression_statement-48-48", method="", type_label=expression_statement];
151 [label="49_ function Deposit() \n    payable\n    {\n        if(msg.value>MinDeposit)\n        {\n            Holders[msg.sender]+=msg.value;\n        }\n    }\n151-function_definition-50-57", method="Deposit()", type_label=function_definition];
155 [label="52_ if_msg.value>MinDeposit\n155-if-53-56", method="Deposit()", type_label=if];
401 [label="52_ end_if", method="Deposit()", type_label=end_if];
162 [label="54_ Holders[msg.sender]+=msg.value;\n162-expression_statement-55-55", method="Deposit()", type_label=expression_statement];
172 [label="57_ function WitdrawTokenToHolder(address _to,address _token,uint _amount)\n    public\n    onlyOwner\n    {\n        if(Holders[_to]>0)\n        {\n            Holders[_to]=0;\n            WithdrawToken(_token,_amount,_to);     \n        }\n    }\n172-function_definition-58-67", method="WitdrawTokenToHolder(address _to,address _token,uint _amount)", type_label=function_definition];
187 [label="59_ onlyOwner\n187-expression_statement-60-60", method="WitdrawTokenToHolder(address _to,address _token,uint _amount)", type_label=expression_statement];
190 [label="61_ if_Holders[_to]>0\n190-if-62-66", method="WitdrawTokenToHolder(address _to,address _token,uint _amount)", type_label=if];
436 [label="61_ end_if", method="WitdrawTokenToHolder(address _to,address _token,uint _amount)", type_label=end_if];
197 [label="63_ Holders[_to]=0;\n197-expression_statement-64-64", method="WitdrawTokenToHolder(address _to,address _token,uint _amount)", type_label=expression_statement];
203 [label="64_ WithdrawToken(_token,_amount,_to);\n203-expression_statement-65-65", method="WitdrawTokenToHolder(address _to,address _token,uint _amount)", type_label=expression_statement];
212 [label="67_ function WithdrawToHolder(address _addr, uint _wei) \n    public\n    onlyOwner\n    payable\n    {\n        if(Holders[_addr]>0)\n        {\n            if(_addr.call.value(_wei)())\n            {\n                Holders[_addr]-=_wei;\n            }\n        }\n    }\n212-function_definition-68-80", method="WithdrawToHolder(address _addr,uint _wei)", type_label=function_definition];
223 [label="69_ onlyOwner\n223-expression_statement-70-70", method="WithdrawToHolder(address _addr,uint _wei)", type_label=expression_statement];
227 [label="72_ if_Holders[_addr]>0\n227-if-73-79", method="WithdrawToHolder(address _addr,uint _wei)", type_label=if];
473 [label="72_ end_if", method="WithdrawToHolder(address _addr,uint _wei)", type_label=end_if];
234 [label="74_ if\n234-if-75-78", method="WithdrawToHolder(address _addr,uint _wei)", type_label=if];
480 [label="74_ end_if", method="WithdrawToHolder(address _addr,uint _wei)", type_label=end_if];
245 [label="76_ Holders[_addr]-=_wei;\n245-expression_statement-77-77", method="WithdrawToHolder(address _addr,uint _wei)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
64;
13 -> 17  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
24 -> 34  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 42  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
42 -> 49  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
42 -> 288  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
288 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
49 -> 288  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
56 -> 62  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
56 -> 302  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
302 -> 64  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 302  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
77 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
118 -> 123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 162  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
155 -> 401  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
401 -> 172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
162 -> 401  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
172 -> 190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
190 -> 197  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
190 -> 436  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
436 -> 212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
203 -> 436  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
212 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 234  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
227 -> 473  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
234 -> 245  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
234 -> 480  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
480 -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
245 -> 480  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
