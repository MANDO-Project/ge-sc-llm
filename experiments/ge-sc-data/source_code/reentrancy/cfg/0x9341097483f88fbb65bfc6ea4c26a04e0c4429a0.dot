digraph  {
12 [label="2_ function totalSupply() public view returns(uint amount);\n12-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ function balanceOf(address tokenOwner) public view returns(uint balance);\n21-function_definition-4-4", method="balanceOf(address tokenOwner)", type_label=function_definition];
34 [label="4_ function allowance(address tokenOwner, address spender) public view returns(uint balanceRemaining);\n34-function_definition-5-5", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
51 [label="5_ function transfer(address to, uint tokens) public returns(bool status);\n51-function_definition-6-6", method="transfer(address to,uint tokens)", type_label=function_definition];
67 [label="6_ function approve(address spender, uint limit) public returns(bool status);\n67-function_definition-7-7", method="approve(address spender,uint limit)", type_label=function_definition];
83 [label="7_ function transferFrom(address from, address to, uint amount) public returns(bool status);\n83-function_definition-8-8", method="transferFrom(address from,address to,uint amount)", type_label=function_definition];
103 [label="8_ function name() public view returns(string tokenName);\n103-function_definition-9-9", method="name()", type_label=function_definition];
112 [label="9_ function symbol() public view returns(string tokenSymbol);\n112-function_definition-10-10", method="symbol()", type_label=function_definition];
152 [label="14_ address contractOwner;\n152-new_variable-15-15", method="", type_label=new_variable];
158 [label="16_ contractOwner = msg.sender;\n158-expression_statement-17-17", method="", type_label=expression_statement];
164 [label="18_ function whoIsTheOwner() public view returns(address) {\n        return contractOwner;\n    }\n164-function_definition-19-21", method="whoIsTheOwner()", type_label=function_definition];
173 [label="19_ return contractOwner;\n173-return-20-20", method="whoIsTheOwner()", type_label=return];
181 [label="23_ function kill() public {\n        if (msg.sender == contractOwner) selfdestruct(contractOwner);\n    }\n181-function_definition-24-26", method="kill()", type_label=function_definition];
185 [label="24_ if_msg.sender == contractOwner\n185-if-25-25", method="kill()", type_label=if];
779 [label="24_ end_if", method="kill()", type_label=end_if];
191 [label="24_ selfdestruct(contractOwner);\n191-expression_statement-25-25", method="kill()", type_label=expression_statement];
205 [label="28_ string private myName;\n205-new_variable-29-29", method="", type_label=new_variable];
210 [label="29_ string private mySymbol;\n210-new_variable-30-30", method="", type_label=new_variable];
215 [label="30_ uint private myTotalSupply;\n215-new_variable-31-31", method="", type_label=new_variable];
220 [label="31_ uint8 public decimals;\n220-new_variable-32-32", method="", type_label=new_variable];
225 [label="32_ mapping (address=>uint) balances;\n225-new_variable-33-33", method="", type_label=new_variable];
231 [label="33_ mapping (address=>mapping (address=>uint)) ownerAllowances;\n231-new_variable-34-34", method="", type_label=new_variable];
241 [label="35_ myName = \"Coquinho Coin\";\n241-expression_statement-36-36", method="", type_label=expression_statement];
246 [label="36_ mySymbol = \"CQNC\";\n246-expression_statement-37-37", method="", type_label=expression_statement];
251 [label="37_ myTotalSupply = 1000000;\n251-expression_statement-38-38", method="", type_label=expression_statement];
255 [label="38_ decimals = 0;\n255-expression_statement-39-39", method="", type_label=expression_statement];
259 [label="39_ balances[msg.sender] = myTotalSupply;\n259-expression_statement-40-40", method="", type_label=expression_statement];
267 [label="41_ function name() public view returns(string tokenName) {\n        return myName;\n    }\n267-function_definition-42-44", method="name()", type_label=function_definition];
277 [label="42_ return myName;\n277-return-43-43", method="name()", type_label=return];
279 [label="44_ function symbol() public view returns(string tokenSymbol) {\n        return mySymbol;\n    }\n279-function_definition-45-47", method="symbol()", type_label=function_definition];
289 [label="45_ return mySymbol;\n289-return-46-46", method="symbol()", type_label=return];
291 [label="47_ function totalSupply() public view returns(uint amount) {\n        return myTotalSupply;\n    }\n291-function_definition-48-50", method="totalSupply()", type_label=function_definition];
301 [label="48_ return myTotalSupply;\n301-return-49-49", method="totalSupply()", type_label=return];
303 [label="50_ function balanceOf(address tokenOwner) public view returns(uint balance) {\n        require(tokenOwner != address(0));\n        return balances[tokenOwner];\n    }\n303-function_definition-51-54", method="balanceOf(address tokenOwner)", type_label=function_definition];
317 [label="51_ require(tokenOwner != address(0));\n317-expression_statement-52-52", method="balanceOf(address tokenOwner)", type_label=expression_statement];
326 [label="52_ return balances[tokenOwner];\n326-return-53-53", method="balanceOf(address tokenOwner)", type_label=return];
330 [label="54_ function allowance(address tokenOwner, address spender) public view returns(uint balanceRemaining) {\n        return ownerAllowances[tokenOwner][spender];\n    }\n330-function_definition-55-57", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
348 [label="55_ return ownerAllowances[tokenOwner][spender];\n348-return-56-56", method="allowance(address tokenOwner,address spender)", type_label=return];
354 [label="57_ function transfer(address to, uint amount) public hasEnoughBalance(msg.sender, amount) tokenAmountValid(amount) returns(bool status) {\n        balances[msg.sender] -= amount;\n        balances[to] += amount;\n        emit Transfer(msg.sender, to, amount);\n        return true;\n    }\n354-function_definition-58-63", method="transfer(address to,uint amount)", type_label=function_definition];
365 [label="57_ hasEnoughBalance(msg.sender, amount)\n365-expression_statement-58-58", method="transfer(address to,uint amount)", type_label=expression_statement];
373 [label="57_ tokenAmountValid(amount)\n373-expression_statement-58-58", method="transfer(address to,uint amount)", type_label=expression_statement];
383 [label="58_ balances[msg.sender] -= amount;\n383-expression_statement-59-59", method="transfer(address to,uint amount)", type_label=expression_statement];
391 [label="59_ balances[to] += amount;\n391-expression_statement-60-60", method="transfer(address to,uint amount)", type_label=expression_statement];
407 [label="61_ return true;\n407-return-62-62", method="transfer(address to,uint amount)", type_label=return];
410 [label="63_ function approve(address spender, uint limit) public returns(bool status) {\n        ownerAllowances[msg.sender][spender] = limit;\n        emit Approval(msg.sender, spender, limit);\n        return true;\n    }\n410-function_definition-64-68", method="approve(address spender,uint limit)", type_label=function_definition];
427 [label="64_ ownerAllowances[msg.sender][spender] = limit;\n427-expression_statement-65-65", method="approve(address spender,uint limit)", type_label=expression_statement];
447 [label="66_ return true;\n447-return-67-67", method="approve(address spender,uint limit)", type_label=return];
450 [label="68_ function transferFrom(address from, address to, uint amount) public \n    hasEnoughBalance(from, amount) isAllowed(msg.sender, from, amount) tokenAmountValid(amount)\n    returns(bool status) {\n        balances[from] -= amount;\n        balances[to] += amount;\n        ownerAllowances[from][msg.sender] = amount;\n        emit Transfer(from, to, amount);\n        return true;\n    }\n450-function_definition-69-77", method="transferFrom(address from,address to,uint amount)", type_label=function_definition];
465 [label="69_ hasEnoughBalance(from, amount)\n465-expression_statement-70-70", method="transferFrom(address from,address to,uint amount)", type_label=expression_statement];
471 [label="69_ isAllowed(msg.sender, from, amount)\n471-expression_statement-70-70", method="transferFrom(address from,address to,uint amount)", type_label=expression_statement];
481 [label="69_ tokenAmountValid(amount)\n481-expression_statement-70-70", method="transferFrom(address from,address to,uint amount)", type_label=expression_statement];
491 [label="71_ balances[from] -= amount;\n491-expression_statement-72-72", method="transferFrom(address from,address to,uint amount)", type_label=expression_statement];
497 [label="72_ balances[to] += amount;\n497-expression_statement-73-73", method="transferFrom(address from,address to,uint amount)", type_label=expression_statement];
503 [label="73_ ownerAllowances[from][msg.sender] = amount;\n503-expression_statement-74-74", method="transferFrom(address from,address to,uint amount)", type_label=expression_statement];
521 [label="75_ return true;\n521-return-76-76", method="transferFrom(address from,address to,uint amount)", type_label=return];
524 [label="77_ modifier hasEnoughBalance(address owner, uint amount) {\n        uint balance;\n        balance = balances[owner];\n        require (balance >= amount); \n        _;\n    }\n524-expression_statement-78-83", method="", type_label=expression_statement];
535 [label="78_ uint balance;\n535-new_variable-79-79", method="", type_label=new_variable];
540 [label="79_ balance = balances[owner];\n540-expression_statement-80-80", method="", type_label=expression_statement];
546 [label="80_ require (balance >= amount);\n546-expression_statement-81-81", method="", type_label=expression_statement];
553 [label="81_ _;\n553-expression_statement-82-82", method="", type_label=expression_statement];
555 [label="83_ modifier isAllowed(address spender, address tokenOwner, uint amount) {\n        require (amount <= ownerAllowances[tokenOwner][spender]);\n        _;\n    }\n555-expression_statement-84-87", method="", type_label=expression_statement];
570 [label="84_ require (amount <= ownerAllowances[tokenOwner][spender]);\n570-expression_statement-85-85", method="", type_label=expression_statement];
581 [label="85_ _;\n581-expression_statement-86-86", method="", type_label=expression_statement];
583 [label="87_ modifier tokenAmountValid(uint amount) {\n        require(amount > 0);\n        _;\n    }\n583-expression_statement-88-91", method="", type_label=expression_statement];
590 [label="88_ require(amount > 0);\n590-expression_statement-89-89", method="", type_label=expression_statement];
597 [label="89_ _;\n597-expression_statement-90-90", method="", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
196;
164 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
181 -> 185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
185 -> 191  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
185 -> 779  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
779 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
191 -> 779  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
205 -> 210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
210 -> 215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
215 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
241 -> 246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
246 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
267 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
279 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
291 -> 301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
301 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
303 -> 317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
317 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
326 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
330 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
348 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
354 -> 383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
383 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
410 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
450 -> 491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
465 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
491 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
524 -> 555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
535 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
546 -> 553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
555 -> 583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
590 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
