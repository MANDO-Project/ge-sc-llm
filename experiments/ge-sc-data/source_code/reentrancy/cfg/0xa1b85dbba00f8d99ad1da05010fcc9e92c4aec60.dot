digraph  {
12 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n12-function_definition-3-7", method="mul(uint256 a,uint256 b)", type_label=function_definition];
29 [label="3_ uint256 c = a * b;\n29-new_variable-4-4", method="mul(uint256 a,uint256 b)", type_label=new_variable];
37 [label="4_ assert(a == 0 || c / a == b);\n37-expression_statement-5-5", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
50 [label="5_ return c;\n50-return-6-6", method="mul(uint256 a,uint256 b)", type_label=return];
52 [label="7_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n52-function_definition-8-11", method="div(uint256 a,uint256 b)", type_label=function_definition];
69 [label="8_ uint256 c = a / b;\n69-new_variable-9-9", method="div(uint256 a,uint256 b)", type_label=new_variable];
77 [label="9_ return c;\n77-return-10-10", method="div(uint256 a,uint256 b)", type_label=return];
79 [label="11_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n79-function_definition-12-15", method="sub(uint256 a,uint256 b)", type_label=function_definition];
96 [label="12_ assert(b <= a);\n96-expression_statement-13-13", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
103 [label="13_ return a - b;\n103-return-14-14", method="sub(uint256 a,uint256 b)", type_label=return];
107 [label="15_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n107-function_definition-16-20", method="add(uint256 a,uint256 b)", type_label=function_definition];
124 [label="16_ uint256 c = a + b;\n124-new_variable-17-17", method="add(uint256 a,uint256 b)", type_label=new_variable];
132 [label="17_ assert(c >= a);\n132-expression_statement-18-18", method="add(uint256 a,uint256 b)", type_label=expression_statement];
139 [label="18_ return c;\n139-return-19-19", method="add(uint256 a,uint256 b)", type_label=return];
141 [label="20_ function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n141-function_definition-21-23", method="max64(uint64 a,uint64 b)", type_label=function_definition];
158 [label="21_ return a >= b ? a : b;\n158-return-22-22", method="max64(uint64 a,uint64 b)", type_label=return];
165 [label="23_ function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n165-function_definition-24-26", method="min64(uint64 a,uint64 b)", type_label=function_definition];
182 [label="24_ return a < b ? a : b;\n182-return-25-25", method="min64(uint64 a,uint64 b)", type_label=return];
189 [label="26_ function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n189-function_definition-27-29", method="max256(uint256 a,uint256 b)", type_label=function_definition];
206 [label="27_ return a >= b ? a : b;\n206-return-28-28", method="max256(uint256 a,uint256 b)", type_label=return];
213 [label="29_ function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n213-function_definition-30-32", method="min256(uint256 a,uint256 b)", type_label=function_definition];
230 [label="30_ return a < b ? a : b;\n230-return-31-31", method="min256(uint256 a,uint256 b)", type_label=return];
240 [label="34_ uint256 public totalSupply;\n240-new_variable-35-35", method="", type_label=new_variable];
245 [label="35_ bool public transfersEnabled;\n245-new_variable-36-36", method="", type_label=new_variable];
250 [label="36_ function balanceOf(address who) public view returns (uint256);\n250-function_definition-37-37", method="balanceOf(address who)", type_label=function_definition];
262 [label="37_ function transfer(address to, uint256 value) public returns (bool);\n262-function_definition-38-38", method="transfer(address to,uint256 value)", type_label=function_definition];
294 [label="41_ uint256 public totalSupply;\n294-new_variable-42-42", method="", type_label=new_variable];
299 [label="42_ bool public transfersEnabled;\n299-new_variable-43-43", method="", type_label=new_variable];
304 [label="43_ function balanceOf(address _owner) public constant returns (uint256 balance);\n304-function_definition-44-44", method="balanceOf(address _owner)", type_label=function_definition];
311 [label="43_ constant\n311-expression_statement-44-44", method="balanceOf(address _owner)", type_label=expression_statement];
318 [label="44_ function transfer(address _to, uint256 _value) public returns (bool success);\n318-function_definition-45-45", method="transfer(address _to,uint256 _value)", type_label=function_definition];
334 [label="45_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n334-function_definition-46-46", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
354 [label="46_ function approve(address _spender, uint256 _value) public returns (bool success);\n354-function_definition-47-47", method="approve(address _spender,uint256 _value)", type_label=function_definition];
370 [label="47_ function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n370-function_definition-48-48", method="allowance(address _owner,address _spender)", type_label=function_definition];
381 [label="47_ constant\n381-expression_statement-48-48", method="allowance(address _owner,address _spender)", type_label=expression_statement];
427 [label="53_ mapping(address => uint256) balances;\n427-new_variable-54-54", method="", type_label=new_variable];
433 [label="54_ modifier onlyPayloadSize(uint numwords) {\n        assert(msg.data.length == numwords * 32 + 4);\n        _;\n    }\n433-expression_statement-55-58", method="", type_label=expression_statement];
440 [label="55_ assert(msg.data.length == numwords * 32 + 4);\n440-expression_statement-56-56", method="", type_label=expression_statement];
455 [label="56_ _;\n455-expression_statement-57-57", method="", type_label=expression_statement];
457 [label="58_ function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        require(transfersEnabled);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n457-function_definition-59-67", method="transfer(address _to,uint256 _value)", type_label=function_definition];
468 [label="58_ onlyPayloadSize(2)\n468-expression_statement-59-59", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
477 [label="59_ require(_to != address(0));\n477-expression_statement-60-60", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
486 [label="60_ require(_value <= balances[msg.sender]);\n486-expression_statement-61-61", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
497 [label="61_ require(transfersEnabled);\n497-expression_statement-62-62", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
502 [label="62_ balances[msg.sender] = balances[msg.sender].sub(_value);\n502-expression_statement-63-63", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
519 [label="63_ balances[_to] = balances[_to].add(_value);\n519-expression_statement-64-64", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
542 [label="65_ return true;\n542-return-66-66", method="transfer(address _to,uint256 _value)", type_label=return];
545 [label="67_ function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n545-function_definition-68-70", method="balanceOf(address _owner)", type_label=function_definition];
552 [label="67_ constant\n552-expression_statement-68-68", method="balanceOf(address _owner)", type_label=expression_statement];
560 [label="68_ return balances[_owner];\n560-return-69-69", method="balanceOf(address _owner)", type_label=return];
573 [label="72_ mapping(address => mapping(address => uint256)) internal allowed;\n573-new_variable-73-73", method="", type_label=new_variable];
582 [label="73_ function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        require(transfersEnabled);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n582-function_definition-74-84", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
597 [label="73_ onlyPayloadSize(3)\n597-expression_statement-74-74", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
606 [label="74_ require(_to != address(0));\n606-expression_statement-75-75", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
615 [label="75_ require(_value <= balances[_from]);\n615-expression_statement-76-76", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
624 [label="76_ require(_value <= allowed[_from][msg.sender]);\n624-expression_statement-77-77", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
637 [label="77_ require(transfersEnabled);\n637-expression_statement-78-78", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
642 [label="78_ balances[_from] = balances[_from].sub(_value);\n642-expression_statement-79-79", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
655 [label="79_ balances[_to] = balances[_to].add(_value);\n655-expression_statement-80-80", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
668 [label="80_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n668-expression_statement-81-81", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
697 [label="82_ return true;\n697-return-83-83", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
700 [label="84_ function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n700-function_definition-85-89", method="approve(address _spender,uint256 _value)", type_label=function_definition];
716 [label="85_ allowed[msg.sender][_spender] = _value;\n716-expression_statement-86-86", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
736 [label="87_ return true;\n736-return-88-88", method="approve(address _spender,uint256 _value)", type_label=return];
739 [label="89_ function allowance(address _owner, address _spender) public onlyPayloadSize(2) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n739-function_definition-90-92", method="allowance(address _owner,address _spender)", type_label=function_definition];
750 [label="89_ onlyPayloadSize(2)\n750-expression_statement-90-90", method="allowance(address _owner,address _spender)", type_label=expression_statement];
754 [label="89_ constant\n754-expression_statement-90-90", method="allowance(address _owner,address _spender)", type_label=expression_statement];
762 [label="90_ return allowed[_owner][_spender];\n762-return-91-91", method="allowance(address _owner,address _spender)", type_label=return];
768 [label="92_ function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n768-function_definition-93-97", method="increaseApproval(address _spender,uint _addedValue)", type_label=function_definition];
785 [label="93_ allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n785-expression_statement-94-94", method="increaseApproval(address _spender,uint _addedValue)", type_label=expression_statement];
822 [label="95_ return true;\n822-return-96-96", method="increaseApproval(address _spender,uint _addedValue)", type_label=return];
825 [label="97_ function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n825-function_definition-98-107", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=function_definition];
842 [label="98_ uint oldValue = allowed[msg.sender][_spender];\n842-new_variable-99-99", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=new_variable];
854 [label="99_ if__subtractedValue > oldValue\n854-if-100-104", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=if];
2394 [label="99_ end_if", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=end_if];
859 [label="100_ allowed[msg.sender][_spender] = 0;\n859-expression_statement-101-101", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=expression_statement];
870 [label="102_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n870-expression_statement-103-103", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=expression_statement];
901 [label="105_ return true;\n901-return-106-106", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=return];
910 [label="109_ string public constant name = \"SWIFTS CO\";\n910-new_variable-110-110", method="", type_label=new_variable];
917 [label="110_ string public constant symbol = \"SWCO\";\n917-new_variable-111-111", method="", type_label=new_variable];
924 [label="111_ uint8 public constant decimals =18;\n924-new_variable-112-112", method="", type_label=new_variable];
930 [label="112_ uint256 public constant INITIAL_SUPPLY = 1 * 10**9 * (10**uint256(decimals));\n930-new_variable-113-113", method="", type_label=new_variable];
947 [label="113_ uint256 public weiRaised;\n947-new_variable-114-114", method="", type_label=new_variable];
952 [label="114_ uint256 public tokenAllocated;\n952-new_variable-115-115", method="", type_label=new_variable];
957 [label="115_ address public owner;\n957-new_variable-116-116", method="", type_label=new_variable];
962 [label="116_ bool public saleToken = true;\n962-new_variable-117-117", method="", type_label=new_variable];
1017 [label="121_ function SWIFTSCO(address _owner) public {\n        totalSupply = INITIAL_SUPPLY;\n        owner = _owner;\n        balances[owner] = INITIAL_SUPPLY;\n        tokenAllocated = 0;\n        transfersEnabled = true;\n    }\n1017-function_definition-122-128", method="SWIFTSCO(address _owner)", type_label=function_definition];
1025 [label="122_ totalSupply = INITIAL_SUPPLY;\n1025-expression_statement-123-123", method="SWIFTSCO(address _owner)", type_label=expression_statement];
1029 [label="123_ owner = _owner;\n1029-expression_statement-124-124", method="SWIFTSCO(address _owner)", type_label=expression_statement];
1033 [label="124_ balances[owner] = INITIAL_SUPPLY;\n1033-expression_statement-125-125", method="SWIFTSCO(address _owner)", type_label=expression_statement];
1039 [label="125_ tokenAllocated = 0;\n1039-expression_statement-126-126", method="SWIFTSCO(address _owner)", type_label=expression_statement];
1043 [label="126_ transfersEnabled = true;\n1043-expression_statement-127-127", method="SWIFTSCO(address _owner)", type_label=expression_statement];
1052 [label="129_ buyTokens(msg.sender);\n1052-expression_statement-130-130", method="", type_label=expression_statement];
1059 [label="131_ function buyTokens(address _investor) public payable returns (uint256){\n        require(_investor != address(0));\n        require(saleToken == true);\n        address wallet = owner;\n        uint256 weiAmount = msg.value;\n        uint256 tokens = validPurchaseTokens(weiAmount);\n        if (tokens == 0) {revert();}\n        weiRaised = weiRaised.add(weiAmount);\n        tokenAllocated = tokenAllocated.add(tokens);\n        mint(_investor, tokens, owner);\n        emit TokenPurchase(_investor, weiAmount, tokens);\n        wallet.transfer(weiAmount);\n        return tokens;\n    }\n1059-function_definition-132-145", method="buyTokens(address _investor)", type_label=function_definition];
1072 [label="132_ require(_investor != address(0));\n1072-expression_statement-133-133", method="buyTokens(address _investor)", type_label=expression_statement];
1081 [label="133_ require(saleToken == true);\n1081-expression_statement-134-134", method="buyTokens(address _investor)", type_label=expression_statement];
1089 [label="134_ address wallet = owner;\n1089-new_variable-135-135", method="buyTokens(address _investor)", type_label=new_variable];
1095 [label="135_ uint256 weiAmount = msg.value;\n1095-new_variable-136-136", method="buyTokens(address _investor)", type_label=new_variable];
1103 [label="136_ uint256 tokens = validPurchaseTokens(weiAmount);\n1103-new_variable-137-137", method="buyTokens(address _investor)", type_label=new_variable];
1112 [label="137_ if_tokens == 0\n1112-if-138-138", method="buyTokens(address _investor)", type_label=if];
2652 [label="137_ end_if", method="buyTokens(address _investor)", type_label=end_if];
1119 [label="138_ weiRaised = weiRaised.add(weiAmount);\n1119-expression_statement-139-139", method="buyTokens(address _investor)", type_label=expression_statement];
1128 [label="139_ tokenAllocated = tokenAllocated.add(tokens);\n1128-expression_statement-140-140", method="buyTokens(address _investor)", type_label=expression_statement];
1137 [label="140_ mint(_investor, tokens, owner);\n1137-expression_statement-141-141", method="buyTokens(address _investor)", type_label=expression_statement];
1154 [label="142_ wallet.transfer(weiAmount);\n1154-expression_statement-143-143", method="buyTokens(address _investor)", type_label=expression_statement];
1161 [label="143_ return tokens;\n1161-return-144-144", method="buyTokens(address _investor)", type_label=return];
1163 [label="145_ function validPurchaseTokens(uint256 _weiAmount) public returns (uint256) {\n        uint256 addTokens = getTotalAmountOfTokens(_weiAmount);\n        if (addTokens > balances[owner]) {\n            emit TokenLimitReached(tokenAllocated, addTokens);\n            return 0;\n        }\n        return addTokens;\n    }\n1163-function_definition-146-153", method="validPurchaseTokens(uint256 _weiAmount)", type_label=function_definition];
1175 [label="146_ uint256 addTokens = getTotalAmountOfTokens(_weiAmount);\n1175-new_variable-147-147", method="validPurchaseTokens(uint256 _weiAmount)", type_label=new_variable];
1184 [label="147_ if\n1184-if-148-151", method="validPurchaseTokens(uint256 _weiAmount)", type_label=if];
2724 [label="147_ end_if", method="validPurchaseTokens(uint256 _weiAmount)", type_label=end_if];
1197 [label="149_ return 0;\n1197-return-150-150", method="validPurchaseTokens(uint256 _weiAmount)", type_label=return];
1199 [label="151_ return addTokens;\n1199-return-152-152", method="validPurchaseTokens(uint256 _weiAmount)", type_label=return];
1201 [label="153_ function getTotalAmountOfTokens(uint256 _weiAmount) internal pure returns (uint256) {\n        uint256 amountOfTokens = 0;\n        if(_weiAmount == 0){\n            amountOfTokens = 20 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.001 ether){\n            amountOfTokens = 3 * 10**1 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.005 ether){\n            amountOfTokens = 15 * 10**1 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.01 ether){\n            amountOfTokens = 3 * 10**2 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.05 ether){\n            amountOfTokens = 15 * 10**2 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.1 ether){\n            amountOfTokens = 3 * 10**3 * (10**uint256(decimals));\n        }\n        return amountOfTokens;\n    }\n1201-function_definition-154-175", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=function_definition];
1214 [label="154_ uint256 amountOfTokens = 0;\n1214-new_variable-155-155", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=new_variable];
1220 [label="155_ if__weiAmount == 0\n1220-if-156-158", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=if];
2760 [label="155_ end_if", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=end_if];
1225 [label="156_ amountOfTokens = 20 * (10**uint256(decimals));\n1225-expression_statement-157-157", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=expression_statement];
1236 [label="158_ if__weiAmount == 0.001 ether\n1236-if-159-161", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=if];
2776 [label="158_ end_if", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=end_if];
1242 [label="159_ amountOfTokens = 3 * 10**1 * (10**uint256(decimals));\n1242-expression_statement-160-160", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=expression_statement];
1257 [label="161_ if__weiAmount == 0.005 ether\n1257-if-162-164", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=if];
2797 [label="161_ end_if", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=end_if];
1263 [label="162_ amountOfTokens = 15 * 10**1 * (10**uint256(decimals));\n1263-expression_statement-163-163", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=expression_statement];
1278 [label="164_ if__weiAmount == 0.01 ether\n1278-if-165-167", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=if];
2818 [label="164_ end_if", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=end_if];
1284 [label="165_ amountOfTokens = 3 * 10**2 * (10**uint256(decimals));\n1284-expression_statement-166-166", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=expression_statement];
1299 [label="167_ if__weiAmount == 0.05 ether\n1299-if-168-170", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=if];
2839 [label="167_ end_if", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=end_if];
1305 [label="168_ amountOfTokens = 15 * 10**2 * (10**uint256(decimals));\n1305-expression_statement-169-169", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=expression_statement];
1320 [label="170_ if__weiAmount == 0.1 ether\n1320-if-171-173", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=if];
2860 [label="170_ end_if", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=end_if];
1326 [label="171_ amountOfTokens = 3 * 10**3 * (10**uint256(decimals));\n1326-expression_statement-172-172", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=expression_statement];
1341 [label="173_ return amountOfTokens;\n1341-return-174-174", method="getTotalAmountOfTokens(uint256 _weiAmount)", type_label=return];
1343 [label="175_ function mint(address _to, uint256 _amount, address _owner) internal returns (bool) {\n        require(_to != address(0));\n        require(_amount <= balances[_owner]);\n        balances[_to] = balances[_to].add(_amount);\n        balances[_owner] = balances[_owner].sub(_amount);\n        emit Transfer(_owner, _to, _amount);\n        return true;\n    }\n1343-function_definition-176-183", method="mint(address _to,uint256 _amount,address _owner)", type_label=function_definition];
1363 [label="176_ require(_to != address(0));\n1363-expression_statement-177-177", method="mint(address _to,uint256 _amount,address _owner)", type_label=expression_statement];
1372 [label="177_ require(_amount <= balances[_owner]);\n1372-expression_statement-178-178", method="mint(address _to,uint256 _amount,address _owner)", type_label=expression_statement];
1381 [label="178_ balances[_to] = balances[_to].add(_amount);\n1381-expression_statement-179-179", method="mint(address _to,uint256 _amount,address _owner)", type_label=expression_statement];
1394 [label="179_ balances[_owner] = balances[_owner].sub(_amount);\n1394-expression_statement-180-180", method="mint(address _to,uint256 _amount,address _owner)", type_label=expression_statement];
1415 [label="181_ return true;\n1415-return-182-182", method="mint(address _to,uint256 _amount,address _owner)", type_label=return];
1418 [label="183_ modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n1418-expression_statement-184-187", method="", type_label=expression_statement];
1421 [label="184_ require(msg.sender == owner);\n1421-expression_statement-185-185", method="", type_label=expression_statement];
1430 [label="185_ _;\n1430-expression_statement-186-186", method="", type_label=expression_statement];
1432 [label="187_ function changeOwner(address _newOwner) onlyOwner public returns (bool){\n        require(_newOwner != address(0));\n        emit OwnerChanged(owner, _newOwner);\n        owner = _newOwner;\n        return true;\n    }\n1432-function_definition-188-193", method="changeOwner(address _newOwner)", type_label=function_definition];
1438 [label="187_ onlyOwner\n1438-expression_statement-188-188", method="changeOwner(address _newOwner)", type_label=expression_statement];
1446 [label="188_ require(_newOwner != address(0));\n1446-expression_statement-189-189", method="changeOwner(address _newOwner)", type_label=expression_statement];
1461 [label="190_ owner = _newOwner;\n1461-expression_statement-191-191", method="changeOwner(address _newOwner)", type_label=expression_statement];
1465 [label="191_ return true;\n1465-return-192-192", method="changeOwner(address _newOwner)", type_label=return];
1468 [label="193_ function startSale() public onlyOwner {\n        saleToken = true;\n    }\n1468-function_definition-194-196", method="startSale()", type_label=function_definition];
1471 [label="193_ onlyOwner\n1471-expression_statement-194-194", method="startSale()", type_label=expression_statement];
1474 [label="194_ saleToken = true;\n1474-expression_statement-195-195", method="startSale()", type_label=expression_statement];
1479 [label="196_ function stopSale() public onlyOwner {\n        saleToken = false;\n    }\n1479-function_definition-197-199", method="stopSale()", type_label=function_definition];
1482 [label="196_ onlyOwner\n1482-expression_statement-197-197", method="stopSale()", type_label=expression_statement];
1485 [label="197_ saleToken = false;\n1485-expression_statement-198-198", method="stopSale()", type_label=expression_statement];
1490 [label="199_ function enableTransfers(bool _transfersEnabled) onlyOwner public {\n        transfersEnabled = _transfersEnabled;\n    }\n1490-function_definition-200-202", method="enableTransfers(bool _transfersEnabled)", type_label=function_definition];
1496 [label="199_ onlyOwner\n1496-expression_statement-200-200", method="enableTransfers(bool _transfersEnabled)", type_label=expression_statement];
1500 [label="200_ transfersEnabled = _transfersEnabled;\n1500-expression_statement-201-201", method="enableTransfers(bool _transfersEnabled)", type_label=expression_statement];
1504 [label="202_ function claimTokens() public onlyOwner {\n        owner.transfer(address(this).balance);\n        uint256 balance = balanceOf(this);\n        transfer(owner, balance);\n        emit Transfer(this, owner, balance);\n    }\n1504-function_definition-203-208", method="claimTokens()", type_label=function_definition];
1507 [label="202_ onlyOwner\n1507-expression_statement-203-203", method="claimTokens()", type_label=expression_statement];
1510 [label="203_ owner.transfer(address(this).balance);\n1510-expression_statement-204-204", method="claimTokens()", type_label=expression_statement];
1521 [label="204_ uint256 balance = balanceOf(this);\n1521-new_variable-205-205", method="claimTokens()", type_label=new_variable];
1530 [label="205_ transfer(owner, balance);\n1530-expression_statement-206-206", method="claimTokens()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
885;
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
37 -> 50  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
50 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
52 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
69 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
79 -> 96  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
96 -> 103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
103 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
107 -> 124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
124 -> 132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
132 -> 139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
141 -> 158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
158 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
165 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
189 -> 206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
213 -> 230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
240 -> 245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
440 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
542 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
545 -> 560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
560 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
582 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
615 -> 624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
624 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
637 -> 642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
642 -> 655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
655 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
697 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
700 -> 716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
739 -> 762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
750 -> 754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
762 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
768 -> 785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
822 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
825 -> 842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
842 -> 854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 859  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
854 -> 870  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2394 -> 885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
859 -> 2394  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
870 -> 2394  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
901 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
910 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
917 -> 924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
924 -> 930  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
930 -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
947 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
952 -> 957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
957 -> 962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 1025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1025 -> 1029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 1033  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1033 -> 1039  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1039 -> 1043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1059 -> 1072  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1072 -> 1081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1081 -> 1089  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1089 -> 1095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1095 -> 1103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1103 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 2652  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1119 -> 1128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1128 -> 1137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1154 -> 1161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1161 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1163 -> 1175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1175 -> 1184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1184 -> 2724  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2724 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1197 -> 2724  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1199 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1201 -> 1214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1214 -> 1220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1220 -> 1225  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1220 -> 2760  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2760 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1225 -> 2760  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1236 -> 1242  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1236 -> 2776  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2776 -> 1257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1242 -> 2776  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1257 -> 1263  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1257 -> 2797  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2797 -> 1278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1263 -> 2797  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1278 -> 1284  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1278 -> 2818  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2818 -> 1299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1284 -> 2818  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1299 -> 1305  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1299 -> 2839  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2839 -> 1320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1305 -> 2839  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1320 -> 1326  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1320 -> 2860  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2860 -> 1341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1326 -> 2860  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1341 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1343 -> 1363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1363 -> 1372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1372 -> 1381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1381 -> 1394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1415 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1421 -> 1430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1432 -> 1446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1461 -> 1465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1465 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1468 -> 1474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1479 -> 1485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1490 -> 1500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1504 -> 1510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1510 -> 1521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1521 -> 1530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
