digraph  {
13 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    require(c / a == b);\n    return c;\n  }\n13-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
993 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
45 [label="7_ require(c / a == b);\n45-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
56 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0);  \n    uint256 c = a / b;\n    return c;\n  }\n56-function_definition-11-15", method="div(uint256 a,uint256 b)", type_label=function_definition];
73 [label="11_ require(b > 0);\n73-expression_statement-12-12", method="div(uint256 a,uint256 b)", type_label=expression_statement];
80 [label="12_ uint256 c = a / b;\n80-new_variable-13-13", method="div(uint256 a,uint256 b)", type_label=new_variable];
88 [label="13_ return c;\n88-return-14-14", method="div(uint256 a,uint256 b)", type_label=return];
90 [label="15_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n    return c;\n  }\n90-function_definition-16-20", method="sub(uint256 a,uint256 b)", type_label=function_definition];
107 [label="16_ require(b <= a);\n107-expression_statement-17-17", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
114 [label="17_ uint256 c = a - b;\n114-new_variable-18-18", method="sub(uint256 a,uint256 b)", type_label=new_variable];
122 [label="18_ return c;\n122-return-19-19", method="sub(uint256 a,uint256 b)", type_label=return];
124 [label="20_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n    return c;\n  }\n124-function_definition-21-25", method="add(uint256 a,uint256 b)", type_label=function_definition];
141 [label="21_ uint256 c = a + b;\n141-new_variable-22-22", method="add(uint256 a,uint256 b)", type_label=new_variable];
149 [label="22_ require(c >= a);\n149-expression_statement-23-23", method="add(uint256 a,uint256 b)", type_label=expression_statement];
156 [label="23_ return c;\n156-return-24-24", method="add(uint256 a,uint256 b)", type_label=return];
158 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n158-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
175 [label="26_ require(b != 0);\n175-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
182 [label="27_ return a % b;\n182-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
189 [label="31_ address public owner;\n189-new_variable-32-32", method="", type_label=new_variable];
196 [label="33_ owner = msg.sender;\n196-expression_statement-34-34", method="", type_label=expression_statement];
202 [label="35_ modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n202-expression_statement-36-39", method="", type_label=expression_statement];
205 [label="36_ require(msg.sender == owner);\n205-expression_statement-37-37", method="", type_label=expression_statement];
214 [label="37_ _;\n214-expression_statement-38-38", method="", type_label=expression_statement];
216 [label="39_ function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n216-function_definition-40-43", method="transferOwnership(address newOwner)", type_label=function_definition];
222 [label="39_ onlyOwner\n222-expression_statement-40-40", method="transferOwnership(address newOwner)", type_label=expression_statement];
226 [label="40_ require(newOwner != address(0));\n226-expression_statement-41-41", method="transferOwnership(address newOwner)", type_label=expression_statement];
235 [label="41_ owner = newOwner;\n235-expression_statement-42-42", method="transferOwnership(address newOwner)", type_label=expression_statement];
242 [label="45_ function totalSupply() external view returns (uint256);\n242-function_definition-46-46", method="totalSupply()", type_label=function_definition];
250 [label="46_ function balanceOf(address who) external view returns (uint256);\n250-function_definition-47-47", method="balanceOf(address who)", type_label=function_definition];
262 [label="47_ function allowance(address owner, address spender)\n    external view returns (uint256);\n262-function_definition-48-49", method="allowance(address owner,address spender)", type_label=function_definition];
278 [label="49_ function transfer(address to, uint256 value) external returns (bool);\n278-function_definition-50-50", method="transfer(address to,uint256 value)", type_label=function_definition];
293 [label="50_ function approve(address spender, uint256 value)\n    external returns (bool);\n293-function_definition-51-52", method="approve(address spender,uint256 value)", type_label=function_definition];
308 [label="52_ function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n308-function_definition-53-54", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
369 [label="67_ mapping (address => uint256) private _balances;\n369-new_variable-68-68", method="", type_label=new_variable];
376 [label="68_ mapping (address => mapping (address => uint256)) private _allowed;\n376-new_variable-69-69", method="", type_label=new_variable];
385 [label="69_ uint256 private _totalSupply;\n385-new_variable-70-70", method="", type_label=new_variable];
390 [label="70_ mapping (address => bool)  private _frozenAccount;\n390-new_variable-71-71", method="", type_label=new_variable];
407 [label="72_ function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n407-function_definition-73-75", method="totalSupply()", type_label=function_definition];
416 [label="73_ return _totalSupply;\n416-return-74-74", method="totalSupply()", type_label=return];
418 [label="75_ function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n418-function_definition-76-78", method="balanceOf(address owner)", type_label=function_definition];
431 [label="76_ return _balances[owner];\n431-return-77-77", method="balanceOf(address owner)", type_label=return];
435 [label="78_ function isAccountFreezed(address _address) public view returns (bool) {\n    return _frozenAccount[_address];\n  }\n435-function_definition-79-81", method="isAccountFreezed(address _address)", type_label=function_definition];
448 [label="79_ return _frozenAccount[_address];\n448-return-80-80", method="isAccountFreezed(address _address)", type_label=return];
452 [label="81_ function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n452-function_definition-82-91", method="allowance(address owner,address spender)", type_label=function_definition];
469 [label="89_ return _allowed[owner][spender];\n469-return-90-90", method="allowance(address owner,address spender)", type_label=return];
475 [label="91_ function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(!_frozenAccount[msg.sender]);   \n    require(!_frozenAccount[to]);   \n    require(to != address(0));\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(msg.sender, to, value);\n    return true;\n  }\n475-function_definition-92-101", method="transfer(address to,uint256 value)", type_label=function_definition];
491 [label="92_ require(value <= _balances[msg.sender]);\n491-expression_statement-93-93", method="transfer(address to,uint256 value)", type_label=expression_statement];
502 [label="93_ require(!_frozenAccount[msg.sender]);\n502-expression_statement-94-94", method="transfer(address to,uint256 value)", type_label=expression_statement];
512 [label="94_ require(!_frozenAccount[to]);\n512-expression_statement-95-95", method="transfer(address to,uint256 value)", type_label=expression_statement];
520 [label="95_ require(to != address(0));\n520-expression_statement-96-96", method="transfer(address to,uint256 value)", type_label=expression_statement];
529 [label="96_ _balances[msg.sender] = _balances[msg.sender].sub(value);\n529-expression_statement-97-97", method="transfer(address to,uint256 value)", type_label=expression_statement];
546 [label="97_ _balances[to] = _balances[to].add(value);\n546-expression_statement-98-98", method="transfer(address to,uint256 value)", type_label=expression_statement];
569 [label="99_ return true;\n569-return-100-100", method="transfer(address to,uint256 value)", type_label=return];
572 [label="101_ function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n572-function_definition-102-107", method="approve(address spender,uint256 value)", type_label=function_definition];
588 [label="102_ require(spender != address(0));\n588-expression_statement-103-103", method="approve(address spender,uint256 value)", type_label=expression_statement];
597 [label="103_ _allowed[msg.sender][spender] = value;\n597-expression_statement-104-104", method="approve(address spender,uint256 value)", type_label=expression_statement];
617 [label="105_ return true;\n617-return-106-106", method="approve(address spender,uint256 value)", type_label=return];
620 [label="107_ function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n     require(!_frozenAccount[from]);   \n    require(!_frozenAccount[to]);   \n    require(to != address(0));\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    emit Transfer(from, to, value);\n    return true;\n  }\n620-function_definition-108-126", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
640 [label="115_ require(value <= _balances[from]);\n640-expression_statement-116-116", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
649 [label="116_ require(value <= _allowed[from][msg.sender]);\n649-expression_statement-117-117", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
662 [label="117_ require(!_frozenAccount[from]);\n662-expression_statement-118-118", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
670 [label="118_ require(!_frozenAccount[to]);\n670-expression_statement-119-119", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
678 [label="119_ require(to != address(0));\n678-expression_statement-120-120", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
687 [label="120_ _balances[from] = _balances[from].sub(value);\n687-expression_statement-121-121", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
700 [label="121_ _balances[to] = _balances[to].add(value);\n700-expression_statement-122-122", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
713 [label="122_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n713-expression_statement-123-123", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
742 [label="124_ return true;\n742-return-125-125", method="transferFrom(address from,address to,uint256 value)", type_label=return];
745 [label="126_ function _mint(address account, uint256 amount) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(amount);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n745-function_definition-127-132", method="_mint(address account,uint256 amount)", type_label=function_definition];
757 [label="127_ require(account != 0);\n757-expression_statement-128-128", method="_mint(address account,uint256 amount)", type_label=expression_statement];
764 [label="128_ _totalSupply = _totalSupply.add(amount);\n764-expression_statement-129-129", method="_mint(address account,uint256 amount)", type_label=expression_statement];
773 [label="129_ _balances[account] = _balances[account].add(amount);\n773-expression_statement-130-130", method="_mint(address account,uint256 amount)", type_label=expression_statement];
796 [label="132_ function _burn(address account, uint256 amount) internal {\n    require(account != 0);\n    require(amount <= _balances[account]);\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n796-function_definition-133-139", method="_burn(address account,uint256 amount)", type_label=function_definition];
808 [label="133_ require(account != 0);\n808-expression_statement-134-134", method="_burn(address account,uint256 amount)", type_label=expression_statement];
815 [label="134_ require(amount <= _balances[account]);\n815-expression_statement-135-135", method="_burn(address account,uint256 amount)", type_label=expression_statement];
824 [label="135_ _totalSupply = _totalSupply.sub(amount);\n824-expression_statement-136-136", method="_burn(address account,uint256 amount)", type_label=expression_statement];
833 [label="136_ _balances[account] = _balances[account].sub(amount);\n833-expression_statement-137-137", method="_burn(address account,uint256 amount)", type_label=expression_statement];
856 [label="139_ function _freezeAccount(address target, bool freeze) internal {\n    _frozenAccount[target] = freeze;\n    emit FrozenFunds(target, freeze);\n    }\n856-function_definition-140-143", method="_freezeAccount(address target,bool freeze)", type_label=function_definition];
868 [label="140_ _frozenAccount[target] = freeze;\n868-expression_statement-141-141", method="_freezeAccount(address target,bool freeze)", type_label=expression_statement];
886 [label="145_ string public constant name = \"Bitsrent\";\n886-new_variable-146-146", method="", type_label=new_variable];
893 [label="146_ string public constant symbol = \"BTR\";\n893-new_variable-147-147", method="", type_label=new_variable];
900 [label="147_ uint8 public constant decimals = 18;\n900-new_variable-148-148", method="", type_label=new_variable];
906 [label="148_ uint256 public constant INITIAL_SUPPLY=20000000000*(10 ** uint256(decimals));\n906-new_variable-149-149", method="", type_label=new_variable];
921 [label="150_ _mint(msg.sender, INITIAL_SUPPLY);\n921-expression_statement-151-151", method="", type_label=expression_statement];
930 [label="152_ function burnToken( uint256 amount)  public {\n      _burn(msg.sender,amount);\n  }\n930-function_definition-153-155", method="burnToken(uint256 amount)", type_label=function_definition];
938 [label="153_ _burn(msg.sender,amount);\n938-expression_statement-154-154", method="burnToken(uint256 amount)", type_label=expression_statement];
947 [label="155_ function freeze(address freezingAddress,bool decision)  onlyOwner public {\n      _freezeAccount(freezingAddress,decision);\n  }\n947-function_definition-156-158", method="freeze(address freezingAddress,bool decision)", type_label=function_definition];
957 [label="155_ onlyOwner\n957-expression_statement-156-156", method="freeze(address freezingAddress,bool decision)", type_label=expression_statement];
961 [label="156_ _freezeAccount(freezingAddress,decision);\n961-expression_statement-157-157", method="freeze(address freezingAddress,bool decision)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 993  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
993 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 993  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
90 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
124 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
156 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
158 -> 175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
175 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
205 -> 214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
226 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
369 -> 376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
376 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
416 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
418 -> 431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
431 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
435 -> 448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
448 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
452 -> 469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
475 -> 491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
491 -> 502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
520 -> 529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
569 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
572 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
620 -> 640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
649 -> 662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
662 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
687 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
700 -> 713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
745 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
764 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
796 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
824 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
856 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
886 -> 893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
893 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
930 -> 938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
947 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
