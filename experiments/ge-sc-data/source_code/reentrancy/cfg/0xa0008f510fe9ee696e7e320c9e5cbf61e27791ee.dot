digraph  {
12 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n12-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
1227 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
37 [label="6_ c = a * b;\n37-expression_statement-7-7", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
43 [label="7_ assert(c / a == b);\n43-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
52 [label="8_ return c;\n52-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
54 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a / b;\n  }\n54-function_definition-11-13", method="div(uint256 a,uint256 b)", type_label=function_definition];
71 [label="11_ return a / b;\n71-return-12-12", method="div(uint256 a,uint256 b)", type_label=return];
75 [label="13_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n75-function_definition-14-17", method="sub(uint256 a,uint256 b)", type_label=function_definition];
92 [label="14_ assert(b <= a);\n92-expression_statement-15-15", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
99 [label="15_ return a - b;\n99-return-16-16", method="sub(uint256 a,uint256 b)", type_label=return];
103 [label="17_ function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n103-function_definition-18-22", method="add(uint256 a,uint256 b)", type_label=function_definition];
121 [label="18_ c = a + b;\n121-expression_statement-19-19", method="add(uint256 a,uint256 b)", type_label=expression_statement];
127 [label="19_ assert(c >= a);\n127-expression_statement-20-20", method="add(uint256 a,uint256 b)", type_label=expression_statement];
134 [label="20_ return c;\n134-return-21-21", method="add(uint256 a,uint256 b)", type_label=return];
139 [label="24_ address public owner;\n139-new_variable-25-25", method="", type_label=new_variable];
162 [label="31_ owner = msg.sender;\n162-expression_statement-32-32", method="", type_label=expression_statement];
168 [label="33_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n168-expression_statement-34-37", method="", type_label=expression_statement];
171 [label="34_ require(msg.sender == owner);\n171-expression_statement-35-35", method="", type_label=expression_statement];
180 [label="35_ _;\n180-expression_statement-36-36", method="", type_label=expression_statement];
182 [label="37_ function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n182-function_definition-38-41", method="renounceOwnership()", type_label=function_definition];
185 [label="37_ onlyOwner\n185-expression_statement-38-38", method="renounceOwnership()", type_label=expression_statement];
192 [label="39_ owner = address(0);\n192-expression_statement-40-40", method="renounceOwnership()", type_label=expression_statement];
198 [label="41_ function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n198-function_definition-42-44", method="transferOwnership(address _newOwner)", type_label=function_definition];
205 [label="41_ onlyOwner\n205-expression_statement-42-42", method="transferOwnership(address _newOwner)", type_label=expression_statement];
208 [label="42_ _transferOwnership(_newOwner);\n208-expression_statement-43-43", method="transferOwnership(address _newOwner)", type_label=expression_statement];
213 [label="44_ function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n213-function_definition-45-49", method="_transferOwnership(address _newOwner)", type_label=function_definition];
221 [label="45_ require(_newOwner != address(0));\n221-expression_statement-46-46", method="_transferOwnership(address _newOwner)", type_label=expression_statement];
236 [label="47_ owner = _newOwner;\n236-expression_statement-48-48", method="_transferOwnership(address _newOwner)", type_label=expression_statement];
243 [label="51_ function totalSupply() public view returns (uint256);\n243-function_definition-52-52", method="totalSupply()", type_label=function_definition];
251 [label="52_ function balanceOf(address who) public view returns (uint256);\n251-function_definition-53-53", method="balanceOf(address who)", type_label=function_definition];
263 [label="53_ function transfer(address to, uint256 value) public returns (bool);\n263-function_definition-54-54", method="transfer(address to,uint256 value)", type_label=function_definition];
303 [label="58_ mapping(address => uint256) balances;\n303-new_variable-59-59", method="", type_label=new_variable];
309 [label="59_ uint256 totalSupply_;\n309-new_variable-60-60", method="", type_label=new_variable];
313 [label="60_ function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n313-function_definition-61-63", method="totalSupply()", type_label=function_definition];
322 [label="61_ return totalSupply_;\n322-return-62-62", method="totalSupply()", type_label=return];
324 [label="63_ function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n324-function_definition-64-71", method="transfer(address _to,uint256 _value)", type_label=function_definition];
340 [label="64_ require(_to != address(0));\n340-expression_statement-65-65", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
349 [label="65_ require(_value <= balances[msg.sender]);\n349-expression_statement-66-66", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
360 [label="66_ balances[msg.sender] = balances[msg.sender].sub(_value);\n360-expression_statement-67-67", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
377 [label="67_ balances[_to] = balances[_to].add(_value);\n377-expression_statement-68-68", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
400 [label="69_ return true;\n400-return-70-70", method="transfer(address _to,uint256 _value)", type_label=return];
403 [label="71_ function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n403-function_definition-72-74", method="balanceOf(address _owner)", type_label=function_definition];
416 [label="72_ return balances[_owner];\n416-return-73-73", method="balanceOf(address _owner)", type_label=return];
426 [label="76_ function allowance(address owner, address spender)\n    public view returns (uint256);\n426-function_definition-77-78", method="allowance(address owner,address spender)", type_label=function_definition];
442 [label="78_ function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n442-function_definition-79-80", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
461 [label="80_ function approve(address spender, uint256 value) public returns (bool);\n461-function_definition-81-81", method="approve(address spender,uint256 value)", type_label=function_definition];
499 [label="88_ mapping (address => mapping (address => uint256)) internal allowed;\n499-new_variable-89-89", method="", type_label=new_variable];
508 [label="89_ function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n508-function_definition-90-106", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
528 [label="97_ require(_to != address(0));\n528-expression_statement-98-98", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
537 [label="98_ require(_value <= balances[_from]);\n537-expression_statement-99-99", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
546 [label="99_ require(_value <= allowed[_from][msg.sender]);\n546-expression_statement-100-100", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
559 [label="100_ balances[_from] = balances[_from].sub(_value);\n559-expression_statement-101-101", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
572 [label="101_ balances[_to] = balances[_to].add(_value);\n572-expression_statement-102-102", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
585 [label="102_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n585-expression_statement-103-103", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
614 [label="104_ return true;\n614-return-105-105", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
617 [label="106_ function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n617-function_definition-107-111", method="approve(address _spender,uint256 _value)", type_label=function_definition];
633 [label="107_ allowed[msg.sender][_spender] = _value;\n633-expression_statement-108-108", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
653 [label="109_ return true;\n653-return-110-110", method="approve(address _spender,uint256 _value)", type_label=return];
656 [label="111_ function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n656-function_definition-112-121", method="allowance(address _owner,address _spender)", type_label=function_definition];
673 [label="119_ return allowed[_owner][_spender];\n673-return-120-120", method="allowance(address _owner,address _spender)", type_label=return];
679 [label="121_ function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n679-function_definition-122-133", method="increaseApproval(address _spender,uint _addedValue)", type_label=function_definition];
695 [label="128_ allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n695-expression_statement-129-130", method="increaseApproval(address _spender,uint _addedValue)", type_label=expression_statement];
733 [label="131_ return true;\n733-return-132-132", method="increaseApproval(address _spender,uint _addedValue)", type_label=return];
736 [label="133_ function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n736-function_definition-134-149", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=function_definition];
752 [label="140_ uint oldValue = allowed[msg.sender][_spender];\n752-new_variable-141-141", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=new_variable];
764 [label="141_ if__subtractedValue > oldValue\n764-if-142-146", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=if];
1961 [label="141_ end_if", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=end_if];
769 [label="142_ allowed[msg.sender][_spender] = 0;\n769-expression_statement-143-143", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=expression_statement];
780 [label="144_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n780-expression_statement-145-145", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=expression_statement];
811 [label="147_ return true;\n811-return-148-148", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=return];
835 [label="153_ bool public mintingFinished = false;\n835-new_variable-154-154", method="", type_label=new_variable];
842 [label="154_ modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n842-expression_statement-155-158", method="", type_label=expression_statement];
845 [label="155_ require(!mintingFinished);\n845-expression_statement-156-156", method="", type_label=expression_statement];
851 [label="156_ _;\n851-expression_statement-157-157", method="", type_label=expression_statement];
853 [label="158_ modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n853-expression_statement-159-162", method="", type_label=expression_statement];
856 [label="159_ require(msg.sender == owner);\n856-expression_statement-160-160", method="", type_label=expression_statement];
865 [label="160_ _;\n865-expression_statement-161-161", method="", type_label=expression_statement];
867 [label="162_ function mint(\n    address _to,\n    uint256 _amount\n  )\n    hasMintPermission\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n867-function_definition-163-177", method="mint(address _to,uint256 _amount)", type_label=function_definition];
877 [label="166_ hasMintPermission\n877-expression_statement-167-167", method="mint(address _to,uint256 _amount)", type_label=expression_statement];
879 [label="167_ canMint\n879-expression_statement-168-168", method="mint(address _to,uint256 _amount)", type_label=expression_statement];
887 [label="171_ totalSupply_ = totalSupply_.add(_amount);\n887-expression_statement-172-172", method="mint(address _to,uint256 _amount)", type_label=expression_statement];
896 [label="172_ balances[_to] = balances[_to].add(_amount);\n896-expression_statement-173-173", method="mint(address _to,uint256 _amount)", type_label=expression_statement];
925 [label="175_ return true;\n925-return-176-176", method="mint(address _to,uint256 _amount)", type_label=return];
928 [label="177_ function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n928-function_definition-178-182", method="finishMinting()", type_label=function_definition];
930 [label="177_ onlyOwner\n930-expression_statement-178-178", method="finishMinting()", type_label=expression_statement];
932 [label="177_ canMint\n932-expression_statement-178-178", method="finishMinting()", type_label=expression_statement];
940 [label="178_ mintingFinished = true;\n940-expression_statement-179-179", method="finishMinting()", type_label=expression_statement];
947 [label="180_ return true;\n947-return-181-181", method="finishMinting()", type_label=return];
956 [label="184_ uint256 public cap;\n956-new_variable-185-185", method="", type_label=new_variable];
967 [label="186_ require(_cap > 0);\n967-expression_statement-187-187", method="", type_label=expression_statement];
974 [label="187_ cap = _cap;\n974-expression_statement-188-188", method="", type_label=expression_statement];
978 [label="189_ function mint(\n    address _to,\n    uint256 _amount\n  )\n    onlyOwner\n    canMint\n    public\n    returns (bool)\n  {\n    require(totalSupply_.add(_amount) <= cap);\n    return super.mint(_to, _amount);\n  }\n978-function_definition-190-201", method="mint(address _to,uint256 _amount)", type_label=function_definition];
988 [label="193_ onlyOwner\n988-expression_statement-194-194", method="mint(address _to,uint256 _amount)", type_label=expression_statement];
990 [label="194_ canMint\n990-expression_statement-195-195", method="mint(address _to,uint256 _amount)", type_label=expression_statement];
998 [label="198_ require(totalSupply_.add(_amount) <= cap);\n998-expression_statement-199-199", method="mint(address _to,uint256 _amount)", type_label=expression_statement];
1010 [label="199_ return super.mint(_to, _amount);\n1010-return-200-200", method="mint(address _to,uint256 _amount)", type_label=return];
1030 [label="204_ string public name = \"GMB\";\n1030-new_variable-205-205", method="", type_label=new_variable];
1037 [label="205_ string public symbol = \"GMB\";\n1037-new_variable-206-206", method="", type_label=new_variable];
1044 [label="206_ uint8 public decimals = 18;\n1044-new_variable-207-207", method="", type_label=new_variable];
1070 [label="209_ address burnerRole;\n1070-new_variable-210-210", method="", type_label=new_variable];
1074 [label="210_ modifier onlyBurner() {\n    require(msg.sender == burnerRole);\n    _;\n  }\n1074-expression_statement-211-214", method="", type_label=expression_statement];
1077 [label="211_ require(msg.sender == burnerRole);\n1077-expression_statement-212-212", method="", type_label=expression_statement];
1086 [label="212_ _;\n1086-expression_statement-213-213", method="", type_label=expression_statement];
1097 [label="214_ CappedToken(_cap)\n1097-expression_statement-215-215", method="", type_label=expression_statement];
1102 [label="215_ burnerRole = _burner;\n1102-expression_statement-216-216", method="", type_label=expression_statement];
1106 [label="217_ function transferBurnRole(address newBurner) public onlyBurner {\n    require(newBurner != address(0));\n    emit BurnTransferred(burnerRole, newBurner);\n    burnerRole = newBurner;\n  }\n1106-function_definition-218-222", method="transferBurnRole(address newBurner)", type_label=function_definition];
1113 [label="217_ onlyBurner\n1113-expression_statement-218-218", method="transferBurnRole(address newBurner)", type_label=expression_statement];
1116 [label="218_ require(newBurner != address(0));\n1116-expression_statement-219-219", method="transferBurnRole(address newBurner)", type_label=expression_statement];
1131 [label="220_ burnerRole = newBurner;\n1131-expression_statement-221-221", method="transferBurnRole(address newBurner)", type_label=expression_statement];
1135 [label="222_ function burn(uint256 _value) public onlyBurner {\n    require(_value <= balances[msg.sender]);\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(msg.sender, _value);\n    emit Transfer(msg.sender, address(0), _value);\n  }\n1135-function_definition-223-229", method="burn(uint256 _value)", type_label=function_definition];
1142 [label="222_ onlyBurner\n1142-expression_statement-223-223", method="burn(uint256 _value)", type_label=expression_statement];
1145 [label="223_ require(_value <= balances[msg.sender]);\n1145-expression_statement-224-224", method="burn(uint256 _value)", type_label=expression_statement];
1156 [label="224_ balances[msg.sender] = balances[msg.sender].sub(_value);\n1156-expression_statement-225-225", method="burn(uint256 _value)", type_label=expression_statement];
1173 [label="225_ totalSupply_ = totalSupply_.sub(_value);\n1173-expression_statement-226-226", method="burn(uint256 _value)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
795;
12 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 1227  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1227 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 1227  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 43  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
43 -> 52  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
52 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
54 -> 71  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
71 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
75 -> 92  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
92 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
103 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
171 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
198 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
213 -> 221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
313 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
324 -> 340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
340 -> 349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
349 -> 360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
360 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
403 -> 416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
416 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
508 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
546 -> 559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
572 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
614 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
617 -> 633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
656 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
673 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
679 -> 695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
733 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
736 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
764 -> 769  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
764 -> 780  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1961 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
769 -> 1961  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
780 -> 1961  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
811 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
835 -> 842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
842 -> 853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
856 -> 865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
867 -> 887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
887 -> 896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
925 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
928 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
930 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
947 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
967 -> 974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
978 -> 998  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
988 -> 990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
998 -> 1010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1010 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1030 -> 1037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1037 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1070 -> 1074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1077 -> 1086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 1116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1135 -> 1145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1145 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1156 -> 1173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
