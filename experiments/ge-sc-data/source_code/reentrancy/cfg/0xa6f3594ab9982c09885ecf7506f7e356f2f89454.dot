digraph  {
13 [label="2_ function totalSupply () external view returns (uint);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ function balanceOf (address tokenOwner) external view returns (uint balance);\n21-function_definition-4-4", method="balanceOf(address tokenOwner)", type_label=function_definition];
34 [label="4_ function transfer (address to, uint tokens) external returns (bool success);\n34-function_definition-5-5", method="transfer(address to,uint tokens)", type_label=function_definition];
50 [label="5_ function transferFrom (address from, address to, uint tokens) external returns (bool success);\n50-function_definition-6-6", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
73 [label="8_ function mul (uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b);\n        return c;\n    }\n73-function_definition-9-16", method="mul(uint256 a,uint256 b)", type_label=function_definition];
91 [label="9_ if_a == 0\n91-if-10-12", method="mul(uint256 a,uint256 b)", type_label=if];
672 [label="9_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
96 [label="10_ return 0;\n96-return-11-11", method="mul(uint256 a,uint256 b)", type_label=return];
98 [label="12_ c = a * b;\n98-expression_statement-13-13", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
104 [label="13_ require(c / a == b);\n104-expression_statement-14-14", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
113 [label="14_ return c;\n113-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
115 [label="16_ function div (uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n115-function_definition-17-19", method="div(uint256 a,uint256 b)", type_label=function_definition];
132 [label="17_ return a / b;\n132-return-18-18", method="div(uint256 a,uint256 b)", type_label=return];
136 [label="19_ function sub (uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n136-function_definition-20-23", method="sub(uint256 a,uint256 b)", type_label=function_definition];
153 [label="20_ require(b <= a);\n153-expression_statement-21-21", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
160 [label="21_ return a - b;\n160-return-22-22", method="sub(uint256 a,uint256 b)", type_label=return];
164 [label="23_ function add (uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        require(c >= a);\n        return c;\n    }\n164-function_definition-24-28", method="add(uint256 a,uint256 b)", type_label=function_definition];
182 [label="24_ c = a + b;\n182-expression_statement-25-25", method="add(uint256 a,uint256 b)", type_label=expression_statement];
188 [label="25_ require(c >= a);\n188-expression_statement-26-26", method="add(uint256 a,uint256 b)", type_label=expression_statement];
195 [label="26_ return c;\n195-return-27-27", method="add(uint256 a,uint256 b)", type_label=return];
215 [label="32_ struct Beneficiary {\n        uint256 start;\n        uint256 duration;\n        uint256 cliff;\n        uint256 totalAmount;\n        uint256 releasedAmount;\n    }\n215-expression_statement-33-39", method="Beneficiary()", type_label=expression_statement];
237 [label="39_ mapping (address => Beneficiary) public beneficiary;\n237-new_variable-40-40", method="", type_label=new_variable];
245 [label="40_ ERC20TokenInterface public token;\n245-new_variable-41-41", method="", type_label=new_variable];
251 [label="41_ uint256 public nonce = 105268;\n251-new_variable-42-42", method="", type_label=new_variable];
257 [label="42_ modifier isVestedAccount (address account) { require(beneficiary[account].start != 0); _; }\n257-expression_statement-43-43", method="", type_label=expression_statement];
264 [label="42_ require(beneficiary[account].start != 0);\n264-expression_statement-43-43", method="", type_label=expression_statement];
275 [label="42_ _;\n275-expression_statement-43-43", method="", type_label=expression_statement];
284 [label="44_ require(tokenAddress != ERC20TokenInterface(0x0));\n284-expression_statement-45-45", method="", type_label=expression_statement];
294 [label="45_ token = tokenAddress;\n294-expression_statement-46-46", method="", type_label=expression_statement];
298 [label="47_ function releasableAmount (address account) public view returns (uint256) {\n        return vestedAmount(account).sub(beneficiary[account].releasedAmount);\n    }\n298-function_definition-48-50", method="releasableAmount(address account)", type_label=function_definition];
311 [label="48_ return vestedAmount(account).sub(beneficiary[account].releasedAmount);\n311-return-49-49", method="releasableAmount(address account)", type_label=return];
325 [label="50_ function release (address account) public isVestedAccount(account) {\n        uint256 unreleased = releasableAmount(account);\n        require(unreleased > 0);\n        beneficiary[account].releasedAmount = beneficiary[account].releasedAmount.add(unreleased);\n        token.transfer(account, unreleased);\n        emit Released(account, unreleased);\n        if (beneficiary[account].releasedAmount == beneficiary[account].totalAmount) {  \n            delete beneficiary[account];\n        }\n    }\n325-function_definition-51-60", method="release(address account)", type_label=function_definition];
332 [label="50_ isVestedAccount(account)\n332-expression_statement-51-51", method="release(address account)", type_label=expression_statement];
337 [label="51_ uint256 unreleased = releasableAmount(account);\n337-new_variable-52-52", method="release(address account)", type_label=new_variable];
346 [label="52_ require(unreleased > 0);\n346-expression_statement-53-53", method="release(address account)", type_label=expression_statement];
353 [label="53_ beneficiary[account].releasedAmount = beneficiary[account].releasedAmount.add(unreleased);\n353-expression_statement-54-54", method="release(address account)", type_label=expression_statement];
370 [label="54_ token.transfer(account, unreleased);\n370-expression_statement-55-55", method="release(address account)", type_label=expression_statement];
385 [label="56_ if\n385-if-57-59", method="release(address account)", type_label=if];
966 [label="56_ end_if", method="release(address account)", type_label=end_if];
398 [label="57_ delete beneficiary[account];\n398-expression_statement-58-58", method="release(address account)", type_label=expression_statement];
403 [label="60_ function addBeneficiary (\n        address account,\n        uint256 start,\n        uint256 duration,\n        uint256 cliff,\n        uint256 amount\n    ) public {\n        require(amount != 0 && start != 0 && account != address(0x0) && cliff < duration && beneficiary[account].start == 0);\n        require(token.transferFrom(msg.sender, address(this), amount));\n        beneficiary[account] = Beneficiary({\n            start: start,\n            duration: duration,\n            cliff: start.add(cliff),\n            totalAmount: amount,\n            releasedAmount: 0\n        });\n    }\n403-function_definition-61-77", method="addBeneficiary(address account,uint256 start,uint256 duration,uint256 cliff,uint256 amount)", type_label=function_definition];
427 [label="67_ require(amount != 0 && start != 0 && account != address(0x0) && cliff < duration && beneficiary[account].start == 0);\n427-expression_statement-68-68", method="addBeneficiary(address account,uint256 start,uint256 duration,uint256 cliff,uint256 amount)", type_label=expression_statement];
456 [label="68_ require(token.transferFrom(msg.sender, address(this), amount));\n456-expression_statement-69-69", method="addBeneficiary(address account,uint256 start,uint256 duration,uint256 cliff,uint256 amount)", type_label=expression_statement];
474 [label="69_ beneficiary[account] = Beneficiary({\n            start: start,\n            duration: duration,\n            cliff: start.add(cliff),\n            totalAmount: amount,\n            releasedAmount: 0\n        });\n474-expression_statement-70-76", method="addBeneficiary(address account,uint256 start,uint256 duration,uint256 cliff,uint256 amount)", type_label=expression_statement];
502 [label="77_ function vestedAmount (address account) private view returns (uint256) {\n        if (block.timestamp < beneficiary[account].cliff) {\n            return 0;\n        } else if (block.timestamp >= beneficiary[account].start.add(beneficiary[account].duration)) {\n            return beneficiary[account].totalAmount;\n        } else {\n            return beneficiary[account].totalAmount.mul(\n                block.timestamp.sub(beneficiary[account].start)\n            ).div(beneficiary[account].duration);\n        }\n    }\n502-function_definition-78-88", method="vestedAmount(address account)", type_label=function_definition];
515 [label="78_ if\n515-if-79-87", method="vestedAmount(address account)", type_label=if];
1096 [label="78_ end_if", method="vestedAmount(address account)", type_label=end_if];
526 [label="79_ return 0;\n526-return-80-80", method="vestedAmount(address account)", type_label=return];
528 [label="80_ if\n528-if-81-87", method="vestedAmount(address account)", type_label=if];
548 [label="81_ return beneficiary[account].totalAmount;\n548-return-82-82", method="vestedAmount(address account)", type_label=return];
555 [label="83_ return beneficiary[account].totalAmount.mul(\n                block.timestamp.sub(beneficiary[account].start)\n            ).div(beneficiary[account].duration);\n555-return-84-86", method="vestedAmount(address account)", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
73 -> 91  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
91 -> 96  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
91 -> 672  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
672 -> 98  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
96 -> 672  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
96 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
98 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
115 -> 132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
132 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
136 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
153 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
164 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
195 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
215 -> 237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
237 -> 245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
245 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
264 -> 275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
284 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
311 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
325 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
337 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
346 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 398  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
385 -> 966  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
966 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 966  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
403 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
456 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 526  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
515 -> 528  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1096 -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
526 -> 1096  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
526 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
528 -> 548  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
528 -> 555  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
548 -> 1096  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
548 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
555 -> 1096  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
555 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
