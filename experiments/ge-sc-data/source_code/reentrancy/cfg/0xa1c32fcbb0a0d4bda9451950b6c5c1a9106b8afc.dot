digraph  {
12 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n12-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
29 [label="3_ if_a == 0\n29-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
2342 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
34 [label="4_ return 0;\n34-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
36 [label="6_ uint256 c = a * b;\n36-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
44 [label="7_ require(c / a == b);\n44-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
53 [label="8_ return c;\n53-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
55 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n55-function_definition-11-15", method="div(uint256 a,uint256 b)", type_label=function_definition];
72 [label="11_ require(b > 0);\n72-expression_statement-12-12", method="div(uint256 a,uint256 b)", type_label=expression_statement];
79 [label="12_ uint256 c = a / b;\n79-new_variable-13-13", method="div(uint256 a,uint256 b)", type_label=new_variable];
87 [label="13_ return c;\n87-return-14-14", method="div(uint256 a,uint256 b)", type_label=return];
89 [label="15_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n89-function_definition-16-20", method="sub(uint256 a,uint256 b)", type_label=function_definition];
106 [label="16_ require(b <= a);\n106-expression_statement-17-17", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
113 [label="17_ uint256 c = a - b;\n113-new_variable-18-18", method="sub(uint256 a,uint256 b)", type_label=new_variable];
121 [label="18_ return c;\n121-return-19-19", method="sub(uint256 a,uint256 b)", type_label=return];
123 [label="20_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n123-function_definition-21-25", method="add(uint256 a,uint256 b)", type_label=function_definition];
140 [label="21_ uint256 c = a + b;\n140-new_variable-22-22", method="add(uint256 a,uint256 b)", type_label=new_variable];
148 [label="22_ require(c >= a);\n148-expression_statement-23-23", method="add(uint256 a,uint256 b)", type_label=expression_statement];
155 [label="23_ return c;\n155-return-24-24", method="add(uint256 a,uint256 b)", type_label=return];
160 [label="27_ function transfer(address to, uint256 value) external returns (bool);\n160-function_definition-28-28", method="transfer(address to,uint256 value)", type_label=function_definition];
175 [label="28_ function approve(address spender, uint256 value) external returns (bool);\n175-function_definition-29-29", method="approve(address spender,uint256 value)", type_label=function_definition];
190 [label="29_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n190-function_definition-30-30", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
209 [label="30_ function mint(address to, uint256 value) external returns (bool);\n209-function_definition-31-31", method="mint(address to,uint256 value)", type_label=function_definition];
224 [label="31_ function totalSupply() external view returns (uint256);\n224-function_definition-32-32", method="totalSupply()", type_label=function_definition];
232 [label="32_ function balanceOf(address who) external view returns (uint256);\n232-function_definition-33-33", method="balanceOf(address who)", type_label=function_definition];
244 [label="33_ function allowance(address owner, address spender) external view returns (uint256);\n244-function_definition-34-34", method="allowance(address owner,address spender)", type_label=function_definition];
299 [label="39_ mapping (address => uint256) private _balances;\n299-new_variable-40-40", method="", type_label=new_variable];
306 [label="40_ mapping (address => mapping (address => uint256)) private _allowed;\n306-new_variable-41-41", method="", type_label=new_variable];
315 [label="41_ uint256 private _totalSupply;\n315-new_variable-42-42", method="", type_label=new_variable];
320 [label="42_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n320-function_definition-43-45", method="totalSupply()", type_label=function_definition];
329 [label="43_ return _totalSupply;\n329-return-44-44", method="totalSupply()", type_label=return];
331 [label="45_ function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n331-function_definition-46-48", method="balanceOf(address owner)", type_label=function_definition];
344 [label="46_ return _balances[owner];\n344-return-47-47", method="balanceOf(address owner)", type_label=return];
348 [label="48_ function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n348-function_definition-49-51", method="allowance(address owner,address spender)", type_label=function_definition];
365 [label="49_ return _allowed[owner][spender];\n365-return-50-50", method="allowance(address owner,address spender)", type_label=return];
371 [label="51_ function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n371-function_definition-52-55", method="transfer(address to,uint256 value)", type_label=function_definition];
387 [label="52_ _transfer(msg.sender, to, value);\n387-expression_statement-53-53", method="transfer(address to,uint256 value)", type_label=expression_statement];
398 [label="53_ return true;\n398-return-54-54", method="transfer(address to,uint256 value)", type_label=return];
401 [label="55_ function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n401-function_definition-56-59", method="approve(address spender,uint256 value)", type_label=function_definition];
417 [label="56_ _approve(msg.sender, spender, value);\n417-expression_statement-57-57", method="approve(address spender,uint256 value)", type_label=expression_statement];
428 [label="57_ return true;\n428-return-58-58", method="approve(address spender,uint256 value)", type_label=return];
431 [label="59_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n431-function_definition-60-64", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
451 [label="60_ _transfer(from, to, value);\n451-expression_statement-61-61", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
460 [label="61_ _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n460-expression_statement-62-62", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
482 [label="62_ return true;\n482-return-63-63", method="transferFrom(address from,address to,uint256 value)", type_label=return];
485 [label="64_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n485-function_definition-65-68", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
501 [label="65_ _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n501-expression_statement-66-66", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
523 [label="66_ return true;\n523-return-67-67", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
526 [label="68_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n526-function_definition-69-72", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
542 [label="69_ _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n542-expression_statement-70-70", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
564 [label="70_ return true;\n564-return-71-71", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
567 [label="72_ function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n567-function_definition-73-78", method="_transfer(address from,address to,uint256 value)", type_label=function_definition];
583 [label="73_ require(to != address(0));\n583-expression_statement-74-74", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
592 [label="74_ _balances[from] = _balances[from].sub(value);\n592-expression_statement-75-75", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
605 [label="75_ _balances[to] = _balances[to].add(value);\n605-expression_statement-76-76", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
626 [label="78_ function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n626-function_definition-79-84", method="_mint(address account,uint256 value)", type_label=function_definition];
638 [label="79_ require(account != address(0));\n638-expression_statement-80-80", method="_mint(address account,uint256 value)", type_label=expression_statement];
647 [label="80_ _totalSupply = _totalSupply.add(value);\n647-expression_statement-81-81", method="_mint(address account,uint256 value)", type_label=expression_statement];
656 [label="81_ _balances[account] = _balances[account].add(value);\n656-expression_statement-82-82", method="_mint(address account,uint256 value)", type_label=expression_statement];
679 [label="84_ function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n679-function_definition-85-90", method="_burn(address account,uint256 value)", type_label=function_definition];
691 [label="85_ require(account != address(0));\n691-expression_statement-86-86", method="_burn(address account,uint256 value)", type_label=expression_statement];
700 [label="86_ _totalSupply = _totalSupply.sub(value);\n700-expression_statement-87-87", method="_burn(address account,uint256 value)", type_label=expression_statement];
709 [label="87_ _balances[account] = _balances[account].sub(value);\n709-expression_statement-88-88", method="_burn(address account,uint256 value)", type_label=expression_statement];
732 [label="90_ function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n732-function_definition-91-96", method="_approve(address owner,address spender,uint256 value)", type_label=function_definition];
748 [label="91_ require(spender != address(0));\n748-expression_statement-92-92", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
757 [label="92_ require(owner != address(0));\n757-expression_statement-93-93", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
766 [label="93_ _allowed[owner][spender] = value;\n766-expression_statement-94-94", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
782 [label="96_ function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n782-function_definition-97-100", method="_burnFrom(address account,uint256 value)", type_label=function_definition];
794 [label="97_ _burn(account, value);\n794-expression_statement-98-98", method="_burnFrom(address account,uint256 value)", type_label=expression_statement];
801 [label="98_ _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n801-expression_statement-99-99", method="_burnFrom(address account,uint256 value)", type_label=expression_statement];
826 [label="102_ struct Role {\n        mapping (address => bool) bearer;\n    }\n826-expression_statement-103-105", method="Role()", type_label=expression_statement];
834 [label="105_ function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n        role.bearer[account] = true;\n    }\n834-function_definition-106-110", method="add(Role storage role,address account)", type_label=function_definition];
847 [label="106_ require(account != address(0));\n847-expression_statement-107-107", method="add(Role storage role,address account)", type_label=expression_statement];
856 [label="107_ require(!has(role, account));\n856-expression_statement-108-108", method="add(Role storage role,address account)", type_label=expression_statement];
867 [label="108_ role.bearer[account] = true;\n867-expression_statement-109-109", method="add(Role storage role,address account)", type_label=expression_statement];
876 [label="110_ function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n        role.bearer[account] = false;\n    }\n876-function_definition-111-115", method="remove(Role storage role,address account)", type_label=function_definition];
889 [label="111_ require(account != address(0));\n889-expression_statement-112-112", method="remove(Role storage role,address account)", type_label=expression_statement];
898 [label="112_ require(has(role, account));\n898-expression_statement-113-113", method="remove(Role storage role,address account)", type_label=expression_statement];
908 [label="113_ role.bearer[account] = false;\n908-expression_statement-114-114", method="remove(Role storage role,address account)", type_label=expression_statement];
917 [label="115_ function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n917-function_definition-116-119", method="has(Role storage role,address account)", type_label=function_definition];
935 [label="116_ require(account != address(0));\n935-expression_statement-117-117", method="has(Role storage role,address account)", type_label=expression_statement];
944 [label="117_ return role.bearer[account];\n944-return-118-118", method="has(Role storage role,address account)", type_label=return];
972 [label="124_ Roles.Role private _minters;\n972-new_variable-125-125", method="", type_label=new_variable];
981 [label="126_ _addMinter(msg.sender);\n981-expression_statement-127-127", method="", type_label=expression_statement];
988 [label="128_ modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n988-expression_statement-129-132", method="", type_label=expression_statement];
991 [label="129_ require(isMinter(msg.sender));\n991-expression_statement-130-130", method="", type_label=expression_statement];
1001 [label="130_ _;\n1001-expression_statement-131-131", method="", type_label=expression_statement];
1003 [label="132_ function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n1003-function_definition-133-135", method="isMinter(address account)", type_label=function_definition];
1016 [label="133_ return _minters.has(account);\n1016-return-134-134", method="isMinter(address account)", type_label=return];
1023 [label="135_ function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n1023-function_definition-136-139", method="_addMinter(address account)", type_label=function_definition];
1031 [label="136_ _minters.add(account);\n1031-expression_statement-137-137", method="_addMinter(address account)", type_label=expression_statement];
1051 [label="141_ function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n1051-function_definition-142-145", method="mint(address to,uint256 value)", type_label=function_definition];
1062 [label="141_ onlyMinter\n1062-expression_statement-142-142", method="mint(address to,uint256 value)", type_label=expression_statement];
1069 [label="142_ _mint(to, value);\n1069-expression_statement-143-143", method="mint(address to,uint256 value)", type_label=expression_statement];
1076 [label="143_ return true;\n1076-return-144-144", method="mint(address to,uint256 value)", type_label=return];
1085 [label="147_ function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n1085-function_definition-148-150", method="burn(uint256 value)", type_label=function_definition];
1093 [label="148_ _burn(msg.sender, value);\n1093-expression_statement-149-149", method="burn(uint256 value)", type_label=expression_statement];
1102 [label="150_ function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n1102-function_definition-151-153", method="burnFrom(address from,uint256 value)", type_label=function_definition];
1114 [label="151_ _burnFrom(from, value);\n1114-expression_statement-152-152", method="burnFrom(address from,uint256 value)", type_label=expression_statement];
1130 [label="155_ string private constant _name = \"TuneTradeX\";\n1130-new_variable-156-156", method="", type_label=new_variable];
1137 [label="156_ string private constant _symbol = \"TXT\";\n1137-new_variable-157-157", method="", type_label=new_variable];
1144 [label="157_ uint8 private constant _decimals = 18;\n1144-new_variable-158-158", method="", type_label=new_variable];
1150 [label="158_ function name() public pure returns (string memory) {\n        return _name;\n    }\n1150-function_definition-159-161", method="name()", type_label=function_definition];
1159 [label="159_ return _name;\n1159-return-160-160", method="name()", type_label=return];
1161 [label="161_ function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n1161-function_definition-162-164", method="symbol()", type_label=function_definition];
1170 [label="162_ return _symbol;\n1170-return-163-163", method="symbol()", type_label=return];
1172 [label="164_ function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n1172-function_definition-165-167", method="decimals()", type_label=function_definition];
1181 [label="165_ return _decimals;\n1181-return-166-166", method="decimals()", type_label=return];
1205 [label="172_ Roles.Role private _whitelistAdmins;\n1205-new_variable-173-173", method="", type_label=new_variable];
1214 [label="174_ _addWhitelistAdmin(msg.sender);\n1214-expression_statement-175-175", method="", type_label=expression_statement];
1221 [label="176_ modifier onlyWhitelistAdmin() {\n        require(isWhitelistAdmin(msg.sender));\n        _;\n    }\n1221-expression_statement-177-180", method="", type_label=expression_statement];
1224 [label="177_ require(isWhitelistAdmin(msg.sender));\n1224-expression_statement-178-178", method="", type_label=expression_statement];
1234 [label="178_ _;\n1234-expression_statement-179-179", method="", type_label=expression_statement];
1236 [label="180_ function isWhitelistAdmin(address account) public view returns (bool) {\n        return _whitelistAdmins.has(account);\n    }\n1236-function_definition-181-183", method="isWhitelistAdmin(address account)", type_label=function_definition];
1249 [label="181_ return _whitelistAdmins.has(account);\n1249-return-182-182", method="isWhitelistAdmin(address account)", type_label=return];
1256 [label="183_ function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n        _addWhitelistAdmin(account);\n    }\n1256-function_definition-184-186", method="addWhitelistAdmin(address account)", type_label=function_definition];
1263 [label="183_ onlyWhitelistAdmin\n1263-expression_statement-184-184", method="addWhitelistAdmin(address account)", type_label=expression_statement];
1266 [label="184_ _addWhitelistAdmin(account);\n1266-expression_statement-185-185", method="addWhitelistAdmin(address account)", type_label=expression_statement];
1271 [label="186_ function renounceWhitelistAdmin() public {\n        _removeWhitelistAdmin(msg.sender);\n    }\n1271-function_definition-187-189", method="renounceWhitelistAdmin()", type_label=function_definition];
1275 [label="187_ _removeWhitelistAdmin(msg.sender);\n1275-expression_statement-188-188", method="renounceWhitelistAdmin()", type_label=expression_statement];
1282 [label="189_ function _addWhitelistAdmin(address account) internal {\n        _whitelistAdmins.add(account);\n        emit WhitelistAdminAdded(account);\n    }\n1282-function_definition-190-193", method="_addWhitelistAdmin(address account)", type_label=function_definition];
1290 [label="190_ _whitelistAdmins.add(account);\n1290-expression_statement-191-191", method="_addWhitelistAdmin(address account)", type_label=expression_statement];
1301 [label="193_ function _removeWhitelistAdmin(address account) internal {\n        _whitelistAdmins.remove(account);\n        emit WhitelistAdminRemoved(account);\n    }\n1301-function_definition-194-197", method="_removeWhitelistAdmin(address account)", type_label=function_definition];
1309 [label="194_ _whitelistAdmins.remove(account);\n1309-expression_statement-195-195", method="_removeWhitelistAdmin(address account)", type_label=expression_statement];
1345 [label="202_ Roles.Role private _whitelisteds;\n1345-new_variable-203-203", method="", type_label=new_variable];
1352 [label="203_ modifier onlyWhitelisted() {\n        require(isWhitelisted(msg.sender));\n        _;\n    }\n1352-expression_statement-204-207", method="", type_label=expression_statement];
1355 [label="204_ require(isWhitelisted(msg.sender));\n1355-expression_statement-205-205", method="", type_label=expression_statement];
1365 [label="205_ _;\n1365-expression_statement-206-206", method="", type_label=expression_statement];
1367 [label="207_ function isWhitelisted(address account) public view returns (bool) {\n        return _whitelisteds.has(account);\n    }\n1367-function_definition-208-210", method="isWhitelisted(address account)", type_label=function_definition];
1380 [label="208_ return _whitelisteds.has(account);\n1380-return-209-209", method="isWhitelisted(address account)", type_label=return];
1387 [label="210_ function removeWhitelisted(address account) public onlyWhitelistAdmin {\n        _removeWhitelisted(account);\n    }\n1387-function_definition-211-213", method="removeWhitelisted(address account)", type_label=function_definition];
1394 [label="210_ onlyWhitelistAdmin\n1394-expression_statement-211-211", method="removeWhitelisted(address account)", type_label=expression_statement];
1397 [label="211_ _removeWhitelisted(account);\n1397-expression_statement-212-212", method="removeWhitelisted(address account)", type_label=expression_statement];
1402 [label="213_ function renounceWhitelisted() public {\n        _removeWhitelisted(msg.sender);\n    }\n1402-function_definition-214-216", method="renounceWhitelisted()", type_label=function_definition];
1406 [label="214_ _removeWhitelisted(msg.sender);\n1406-expression_statement-215-215", method="renounceWhitelisted()", type_label=expression_statement];
1413 [label="216_ function _addWhitelisted(address account) internal {\n        _whitelisteds.add(account);\n        emit WhitelistedAdded(account);\n    }\n1413-function_definition-217-220", method="_addWhitelisted(address account)", type_label=function_definition];
1421 [label="217_ _whitelisteds.add(account);\n1421-expression_statement-218-218", method="_addWhitelisted(address account)", type_label=expression_statement];
1432 [label="220_ function _removeWhitelisted(address account) internal {\n        _whitelisteds.remove(account);\n        emit WhitelistedRemoved(account);\n    }\n1432-function_definition-221-224", method="_removeWhitelisted(address account)", type_label=function_definition];
1440 [label="221_ _whitelisteds.remove(account);\n1440-expression_statement-222-222", method="_removeWhitelisted(address account)", type_label=expression_statement];
1476 [label="229_ Roles.Role private _team;\n1476-new_variable-230-230", method="", type_label=new_variable];
1483 [label="230_ modifier onlyTeamMember() {\n        require(isTeamMember(msg.sender));\n        _;\n    }\n1483-expression_statement-231-234", method="", type_label=expression_statement];
1486 [label="231_ require(isTeamMember(msg.sender));\n1486-expression_statement-232-232", method="", type_label=expression_statement];
1496 [label="232_ _;\n1496-expression_statement-233-233", method="", type_label=expression_statement];
1498 [label="234_ function isTeamMember(address account) public view returns (bool) {\n        return _team.has(account);\n    }\n1498-function_definition-235-237", method="isTeamMember(address account)", type_label=function_definition];
1511 [label="235_ return _team.has(account);\n1511-return-236-236", method="isTeamMember(address account)", type_label=return];
1518 [label="237_ function _addTeam(address account) internal onlyWhitelistAdmin {\n        _team.add(account);\n        emit TeamMemberAdded(account);\n    }\n1518-function_definition-238-241", method="_addTeam(address account)", type_label=function_definition];
1525 [label="237_ onlyWhitelistAdmin\n1525-expression_statement-238-238", method="_addTeam(address account)", type_label=expression_statement];
1528 [label="238_ _team.add(account);\n1528-expression_statement-239-239", method="_addTeam(address account)", type_label=expression_statement];
1539 [label="241_ function removeTeam(address account) public onlyWhitelistAdmin {\n        _team.remove(account);\n        emit TeamMemberRemoved(account);\n    }\n1539-function_definition-242-245", method="removeTeam(address account)", type_label=function_definition];
1546 [label="241_ onlyWhitelistAdmin\n1546-expression_statement-242-242", method="removeTeam(address account)", type_label=expression_statement];
1549 [label="242_ _team.remove(account);\n1549-expression_statement-243-243", method="removeTeam(address account)", type_label=expression_statement];
1563 [label="247_ function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        require(token.transferFrom(from, to, value));\n    }\n1563-function_definition-248-250", method="safeTransferFrom(IERC20 token,address from,address to,uint256 value)", type_label=function_definition];
1584 [label="248_ require(token.transferFrom(from, to, value));\n1584-expression_statement-249-249", method="safeTransferFrom(IERC20 token,address from,address to,uint256 value)", type_label=expression_statement];
1615 [label="254_ uint256 private _remaining;\n1615-new_variable-255-255", method="", type_label=new_variable];
1620 [label="255_ uint256 private _lastReset;\n1620-new_variable-256-256", method="", type_label=new_variable];
1625 [label="256_ uint256 private constant _period = 1 days;\n1625-new_variable-257-257", method="", type_label=new_variable];
1632 [label="257_ uint256 private constant _publicLimit = 10000 * 1 ether;\n1632-new_variable-258-258", method="", type_label=new_variable];
1641 [label="258_ uint256 private constant _teamLimit = 30000 * 1 ether;\n1641-new_variable-259-259", method="", type_label=new_variable];
1650 [label="259_ uint256 private constant _contractLimit = 100000 * 1 ether;\n1650-new_variable-260-260", method="", type_label=new_variable];
1659 [label="260_ address private constant _swapMaster = 0x26a9f0b85db899237c6F07603475df43Eb366F8b;\n1659-new_variable-261-261", method="", type_label=new_variable];
1665 [label="261_ struct SwapInfo {\n        bool alreadyWhitelisted;\n        uint256 availableTokens;\n        uint256 lastSwapTimestamp;\n    }\n1665-expression_statement-262-266", method="SwapInfo()", type_label=expression_statement];
1679 [label="266_ mapping (address => SwapInfo) private _infos;\n1679-new_variable-267-267", method="", type_label=new_variable];
1687 [label="267_ IERC20 private _newToken;\n1687-new_variable-268-268", method="", type_label=new_variable];
1693 [label="268_ IERC20 private _oldToken = IERC20(0xA57a2aD52AD6b1995F215b12fC037BffD990Bc5E);\n1693-new_variable-269-269", method="", type_label=new_variable];
1741 [label="274_ _newToken = IERC20(address(new TuneTradeToken()));\n1741-expression_statement-275-275", method="", type_label=expression_statement];
1754 [label="275_ _newToken.mint(_swapMaster, 50000010000000000000000010);\n1754-expression_statement-276-276", method="", type_label=expression_statement];
1767 [label="277_ _reset();\n1767-expression_statement-278-278", method="", type_label=expression_statement];
1770 [label="279_ function approveSwap(address swapper) public onlyWhitelistAdmin {\n        require(swapper != address(0), \"approveSwap: invalid swapper address\");\n        uint256 balance = _oldToken.balanceOf(swapper);\n        require(balance > 0, \"approveSwap: the swapper token balance is zero\");\n        require(_infos[swapper].alreadyWhitelisted == false, \"approveSwap: the user already swapped his tokens\");\n        _addWhitelisted(swapper);\n        _infos[swapper] = SwapInfo({\n            alreadyWhitelisted: true,\n            availableTokens: balance,\n            lastSwapTimestamp: 0\n        });\n        emit SwapApproved(swapper, balance);\n    }\n1770-function_definition-280-292", method="approveSwap(address swapper)", type_label=function_definition];
1777 [label="279_ onlyWhitelistAdmin\n1777-expression_statement-280-280", method="approveSwap(address swapper)", type_label=expression_statement];
1780 [label="280_ require(swapper != address(0), \"approveSwap: invalid swapper address\");\n1780-expression_statement-281-281", method="approveSwap(address swapper)", type_label=expression_statement];
1792 [label="281_ uint256 balance = _oldToken.balanceOf(swapper);\n1792-new_variable-282-282", method="approveSwap(address swapper)", type_label=new_variable];
1803 [label="282_ require(balance > 0, \"approveSwap: the swapper token balance is zero\");\n1803-expression_statement-283-283", method="approveSwap(address swapper)", type_label=expression_statement];
1813 [label="283_ require(_infos[swapper].alreadyWhitelisted == false, \"approveSwap: the user already swapped his tokens\");\n1813-expression_statement-284-284", method="approveSwap(address swapper)", type_label=expression_statement];
1828 [label="284_ _addWhitelisted(swapper);\n1828-expression_statement-285-285", method="approveSwap(address swapper)", type_label=expression_statement];
1833 [label="285_ _infos[swapper] = SwapInfo({\n            alreadyWhitelisted: true,\n            availableTokens: balance,\n            lastSwapTimestamp: 0\n        });\n1833-expression_statement-286-290", method="approveSwap(address swapper)", type_label=expression_statement];
1857 [label="292_ function approveTeam(address member) external onlyWhitelistAdmin {\n        require(member != address(0), \"approveTeam: invalid team address\");\n        _addTeam(member);\n        approveSwap(member);\n    }\n1857-function_definition-293-297", method="approveTeam(address member)", type_label=function_definition];
1864 [label="292_ onlyWhitelistAdmin\n1864-expression_statement-293-293", method="approveTeam(address member)", type_label=expression_statement];
1867 [label="293_ require(member != address(0), \"approveTeam: invalid team address\");\n1867-expression_statement-294-294", method="approveTeam(address member)", type_label=expression_statement];
1879 [label="294_ _addTeam(member);\n1879-expression_statement-295-295", method="approveTeam(address member)", type_label=expression_statement];
1884 [label="295_ approveSwap(member);\n1884-expression_statement-296-296", method="approveTeam(address member)", type_label=expression_statement];
1889 [label="297_ function swap() external onlyWhitelisted {\n        if (now >= _lastReset + _period) {\n            _reset();\n        }\n        require(_remaining != 0, \"swap: no tokens available\");\n        require(_infos[msg.sender].availableTokens != 0, \"swap: no tokens available for swap\");\n        require(now >= _infos[msg.sender].lastSwapTimestamp + _period, \"swap: msg.sender can not call this method now\");\n        uint256 toSwap = _infos[msg.sender].availableTokens;\n        if (toSwap > _publicLimit) {\n            toSwap = _publicLimit;\n        }\n        if (toSwap > _remaining) {\n            toSwap = _remaining;\n        }\n        if (toSwap > _oldToken.balanceOf(msg.sender)) {\n            toSwap = _oldToken.balanceOf(msg.sender);\n        }\n        _swap(toSwap);\n        _update(toSwap);\n        _remaining = _remaining.sub(toSwap);\n        emit TokensSwapped(msg.sender, toSwap);\n    }\n1889-function_definition-298-319", method="swap()", type_label=function_definition];
1892 [label="297_ onlyWhitelisted\n1892-expression_statement-298-298", method="swap()", type_label=expression_statement];
1895 [label="298_ if_now >= _lastReset + _period\n1895-if-299-301", method="swap()", type_label=if];
4208 [label="298_ end_if", method="swap()", type_label=end_if];
1902 [label="299_ _reset();\n1902-expression_statement-300-300", method="swap()", type_label=expression_statement];
1905 [label="301_ require(_remaining != 0, \"swap: no tokens available\");\n1905-expression_statement-302-302", method="swap()", type_label=expression_statement];
1915 [label="302_ require(_infos[msg.sender].availableTokens != 0, \"swap: no tokens available for swap\");\n1915-expression_statement-303-303", method="swap()", type_label=expression_statement];
1931 [label="303_ require(now >= _infos[msg.sender].lastSwapTimestamp + _period, \"swap: msg.sender can not call this method now\");\n1931-expression_statement-304-304", method="swap()", type_label=expression_statement];
1949 [label="304_ uint256 toSwap = _infos[msg.sender].availableTokens;\n1949-new_variable-305-305", method="swap()", type_label=new_variable];
1961 [label="305_ if_toSwap > _publicLimit\n1961-if-306-308", method="swap()", type_label=if];
4274 [label="305_ end_if", method="swap()", type_label=end_if];
1966 [label="306_ toSwap = _publicLimit;\n1966-expression_statement-307-307", method="swap()", type_label=expression_statement];
1970 [label="308_ if_toSwap > _remaining\n1970-if-309-311", method="swap()", type_label=if];
4283 [label="308_ end_if", method="swap()", type_label=end_if];
1975 [label="309_ toSwap = _remaining;\n1975-expression_statement-310-310", method="swap()", type_label=expression_statement];
1979 [label="311_ if\n1979-if-312-314", method="swap()", type_label=if];
4292 [label="311_ end_if", method="swap()", type_label=end_if];
1991 [label="312_ toSwap = _oldToken.balanceOf(msg.sender);\n1991-expression_statement-313-313", method="swap()", type_label=expression_statement];
2002 [label="314_ _swap(toSwap);\n2002-expression_statement-315-315", method="swap()", type_label=expression_statement];
2007 [label="315_ _update(toSwap);\n2007-expression_statement-316-316", method="swap()", type_label=expression_statement];
2012 [label="316_ _remaining = _remaining.sub(toSwap);\n2012-expression_statement-317-317", method="swap()", type_label=expression_statement];
2029 [label="319_ function swapTeam() external onlyTeamMember {\n        require(_infos[msg.sender].availableTokens != 0, \"swapTeam: no tokens available for swap\");\n        require(now >= _infos[msg.sender].lastSwapTimestamp + _period, \"swapTeam: team member can not call this method now\");\n        uint256 toSwap = _infos[msg.sender].availableTokens;\n        if (toSwap > _teamLimit) {\n            toSwap = _teamLimit;\n        }\n        if (toSwap > _oldToken.balanceOf(msg.sender)) {\n            toSwap = _oldToken.balanceOf(msg.sender);\n        }\n        _swap(toSwap);\n        _update(toSwap);\n        emit TeamTokensSwapped(msg.sender, toSwap);\n    }\n2029-function_definition-320-333", method="swapTeam()", type_label=function_definition];
2032 [label="319_ onlyTeamMember\n2032-expression_statement-320-320", method="swapTeam()", type_label=expression_statement];
2035 [label="320_ require(_infos[msg.sender].availableTokens != 0, \"swapTeam: no tokens available for swap\");\n2035-expression_statement-321-321", method="swapTeam()", type_label=expression_statement];
2051 [label="321_ require(now >= _infos[msg.sender].lastSwapTimestamp + _period, \"swapTeam: team member can not call this method now\");\n2051-expression_statement-322-322", method="swapTeam()", type_label=expression_statement];
2069 [label="322_ uint256 toSwap = _infos[msg.sender].availableTokens;\n2069-new_variable-323-323", method="swapTeam()", type_label=new_variable];
2081 [label="323_ if_toSwap > _teamLimit\n2081-if-324-326", method="swapTeam()", type_label=if];
4394 [label="323_ end_if", method="swapTeam()", type_label=end_if];
2086 [label="324_ toSwap = _teamLimit;\n2086-expression_statement-325-325", method="swapTeam()", type_label=expression_statement];
2090 [label="326_ if\n2090-if-327-329", method="swapTeam()", type_label=if];
4403 [label="326_ end_if", method="swapTeam()", type_label=end_if];
2102 [label="327_ toSwap = _oldToken.balanceOf(msg.sender);\n2102-expression_statement-328-328", method="swapTeam()", type_label=expression_statement];
2113 [label="329_ _swap(toSwap);\n2113-expression_statement-330-330", method="swapTeam()", type_label=expression_statement];
2118 [label="330_ _update(toSwap);\n2118-expression_statement-331-331", method="swapTeam()", type_label=expression_statement];
2131 [label="333_ function swapMaster(uint256 amount) external {\n        require(msg.sender == _swapMaster, \"swapMaster: only swap master can call this methid\");\n        _swap(amount);\n        emit MasterTokensSwapped(amount);\n    }\n2131-function_definition-334-338", method="swapMaster(uint256 amount)", type_label=function_definition];
2139 [label="334_ require(msg.sender == _swapMaster, \"swapMaster: only swap master can call this methid\");\n2139-expression_statement-335-335", method="swapMaster(uint256 amount)", type_label=expression_statement];
2151 [label="335_ _swap(amount);\n2151-expression_statement-336-336", method="swapMaster(uint256 amount)", type_label=expression_statement];
2160 [label="338_ function getSwappableAmount(address swapper) external view returns (uint256) {\n        return _infos[swapper].availableTokens;\n    }\n2160-function_definition-339-341", method="getSwappableAmount(address swapper)", type_label=function_definition];
2173 [label="339_ return _infos[swapper].availableTokens;\n2173-return-340-340", method="getSwappableAmount(address swapper)", type_label=return];
2179 [label="341_ function getTimeOfLastSwap(address swapper) external view returns (uint256) {\n        return _infos[swapper].lastSwapTimestamp;\n    }\n2179-function_definition-342-344", method="getTimeOfLastSwap(address swapper)", type_label=function_definition];
2192 [label="342_ return _infos[swapper].lastSwapTimestamp;\n2192-return-343-343", method="getTimeOfLastSwap(address swapper)", type_label=return];
2198 [label="344_ function getRemaining() external view returns (uint256) {\n        return _remaining;\n    }\n2198-function_definition-345-347", method="getRemaining()", type_label=function_definition];
2207 [label="345_ return _remaining;\n2207-return-346-346", method="getRemaining()", type_label=return];
2209 [label="347_ function getLastReset() external view returns (uint256) {\n        return _lastReset;\n    }\n2209-function_definition-348-350", method="getLastReset()", type_label=function_definition];
2218 [label="348_ return _lastReset;\n2218-return-349-349", method="getLastReset()", type_label=return];
2220 [label="350_ function getTokenAddress() external view returns (address) {\n        return address(_newToken);\n    }\n2220-function_definition-351-353", method="getTokenAddress()", type_label=function_definition];
2229 [label="351_ return address(_newToken);\n2229-return-352-352", method="getTokenAddress()", type_label=return];
2233 [label="353_ function _reset() private {\n        _lastReset = now;\n        _remaining = _contractLimit;\n    }\n2233-function_definition-354-357", method="_reset()", type_label=function_definition];
2237 [label="354_ _lastReset = now;\n2237-expression_statement-355-355", method="_reset()", type_label=expression_statement];
2241 [label="355_ _remaining = _contractLimit;\n2241-expression_statement-356-356", method="_reset()", type_label=expression_statement];
2245 [label="357_ function _update(uint256 amountToSwap) private {\n        _infos[msg.sender].availableTokens = _infos[msg.sender].availableTokens.sub(amountToSwap);\n        _infos[msg.sender].lastSwapTimestamp = now;\n    }\n2245-function_definition-358-361", method="_update(uint256 amountToSwap)", type_label=function_definition];
2253 [label="358_ _infos[msg.sender].availableTokens = _infos[msg.sender].availableTokens.sub(amountToSwap);\n2253-expression_statement-359-359", method="_update(uint256 amountToSwap)", type_label=expression_statement];
2274 [label="359_ _infos[msg.sender].lastSwapTimestamp = now;\n2274-expression_statement-360-360", method="_update(uint256 amountToSwap)", type_label=expression_statement];
2284 [label="361_ function _swap(uint256 amountToSwap) private {\n        _oldToken.safeTransferFrom(msg.sender, address(this), amountToSwap);\n        _newToken.mint(msg.sender, amountToSwap);\n    }\n2284-function_definition-362-365", method="_swap(uint256 amountToSwap)", type_label=function_definition];
2292 [label="362_ _oldToken.safeTransferFrom(msg.sender, address(this), amountToSwap);\n2292-expression_statement-363-363", method="_swap(uint256 amountToSwap)", type_label=expression_statement];
2307 [label="363_ _newToken.mint(msg.sender, amountToSwap);\n2307-expression_statement-364-364", method="_swap(uint256 amountToSwap)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
29 -> 2342  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2342 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 2342  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
34 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
36 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
55 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 79  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
79 -> 87  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
89 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
123 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
148 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
299 -> 306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
306 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
331 -> 344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
344 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
348 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
371 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
401 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
431 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
460 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
485 -> 501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
526 -> 542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
542 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
567 -> 583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
583 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
626 -> 638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
647 -> 656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
691 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
700 -> 709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
732 -> 748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
748 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
782 -> 794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
794 -> 801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
834 -> 847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
847 -> 856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
856 -> 867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
876 -> 889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
889 -> 898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
898 -> 908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
917 -> 935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
944 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
991 -> 1001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 1016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1016 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1023 -> 1031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1051 -> 1069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1069 -> 1076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1085 -> 1093  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1102 -> 1114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1130 -> 1137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1137 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1150 -> 1159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1159 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1161 -> 1170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1172 -> 1181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1181 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1224 -> 1234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1236 -> 1249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1249 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1256 -> 1266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1271 -> 1275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1282 -> 1290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1301 -> 1309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1345 -> 1352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1355 -> 1365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1367 -> 1380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1380 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1387 -> 1397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1402 -> 1406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1413 -> 1421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1432 -> 1440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1476 -> 1483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1486 -> 1496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1498 -> 1511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1511 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1518 -> 1528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1539 -> 1549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1563 -> 1584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1615 -> 1620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1620 -> 1625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1625 -> 1632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1632 -> 1641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1641 -> 1650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1650 -> 1659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1659 -> 1665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1665 -> 1679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1679 -> 1687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1687 -> 1693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1741 -> 1754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1770 -> 1780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1780 -> 1792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1792 -> 1803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1803 -> 1813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1813 -> 1828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1828 -> 1833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1857 -> 1867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1867 -> 1879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1879 -> 1884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1889 -> 1895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1895 -> 1902  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1895 -> 4208  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4208 -> 1905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1902 -> 4208  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1905 -> 1915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1915 -> 1931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1931 -> 1949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1949 -> 1961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1961 -> 1966  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1961 -> 4274  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4274 -> 1970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1966 -> 4274  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1970 -> 1975  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1970 -> 4283  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4283 -> 1979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1975 -> 4283  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1979 -> 1991  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1979 -> 4292  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4292 -> 2002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1991 -> 4292  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2002 -> 2007  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2007 -> 2012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2029 -> 2035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2035 -> 2051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2051 -> 2069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2069 -> 2081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2081 -> 2086  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2081 -> 4394  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4394 -> 2090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2086 -> 4394  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2090 -> 2102  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2090 -> 4403  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4403 -> 2113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2102 -> 4403  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2113 -> 2118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2131 -> 2139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2139 -> 2151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2160 -> 2173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2173 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2179 -> 2192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2192 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2198 -> 2207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2207 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2209 -> 2218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2218 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2220 -> 2229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2229 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2233 -> 2237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2237 -> 2241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2245 -> 2253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2253 -> 2274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2284 -> 2292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2292 -> 2307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
