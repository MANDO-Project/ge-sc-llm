digraph  {
12 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n12-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
29 [label="3_ if_a == 0\n29-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
1747 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
34 [label="4_ return 0;\n34-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
36 [label="6_ uint256 c = a * b;\n36-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
44 [label="7_ assert(c / a == b);\n44-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
53 [label="8_ return c;\n53-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
55 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n55-function_definition-11-13", method="div(uint256 a,uint256 b)", type_label=function_definition];
72 [label="11_ return a / b;\n72-return-12-12", method="div(uint256 a,uint256 b)", type_label=return];
76 [label="13_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n76-function_definition-14-17", method="sub(uint256 a,uint256 b)", type_label=function_definition];
93 [label="14_ assert(b <= a);\n93-expression_statement-15-15", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
100 [label="15_ return a - b;\n100-return-16-16", method="sub(uint256 a,uint256 b)", type_label=return];
104 [label="17_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n104-function_definition-18-22", method="add(uint256 a,uint256 b)", type_label=function_definition];
121 [label="18_ uint256 c = a + b;\n121-new_variable-19-19", method="add(uint256 a,uint256 b)", type_label=new_variable];
129 [label="19_ assert(c >= a);\n129-expression_statement-20-20", method="add(uint256 a,uint256 b)", type_label=expression_statement];
136 [label="20_ return c;\n136-return-21-21", method="add(uint256 a,uint256 b)", type_label=return];
138 [label="22_ function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n138-function_definition-23-25", method="max64(uint64 a,uint64 b)", type_label=function_definition];
155 [label="23_ return a >= b ? a : b;\n155-return-24-24", method="max64(uint64 a,uint64 b)", type_label=return];
162 [label="25_ function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n162-function_definition-26-28", method="min64(uint64 a,uint64 b)", type_label=function_definition];
179 [label="26_ return a < b ? a : b;\n179-return-27-27", method="min64(uint64 a,uint64 b)", type_label=return];
186 [label="28_ function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n186-function_definition-29-31", method="max256(uint256 a,uint256 b)", type_label=function_definition];
203 [label="29_ return a >= b ? a : b;\n203-return-30-30", method="max256(uint256 a,uint256 b)", type_label=return];
210 [label="31_ function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n210-function_definition-32-34", method="min256(uint256 a,uint256 b)", type_label=function_definition];
227 [label="32_ return a < b ? a : b;\n227-return-33-33", method="min256(uint256 a,uint256 b)", type_label=return];
237 [label="36_ function totalSupply() public view returns (uint256);\n237-function_definition-37-37", method="totalSupply()", type_label=function_definition];
245 [label="37_ function balanceOf(address who) public view returns (uint256);\n245-function_definition-38-38", method="balanceOf(address who)", type_label=function_definition];
257 [label="38_ function transfer(address to, uint256 value) public returns (bool);\n257-function_definition-39-39", method="transfer(address to,uint256 value)", type_label=function_definition];
297 [label="43_ mapping(address => uint256) balances;\n297-new_variable-44-44", method="", type_label=new_variable];
303 [label="44_ uint256 totalSupply_;\n303-new_variable-45-45", method="", type_label=new_variable];
307 [label="45_ function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n307-function_definition-46-48", method="totalSupply()", type_label=function_definition];
316 [label="46_ return totalSupply_;\n316-return-47-47", method="totalSupply()", type_label=return];
318 [label="48_ function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n318-function_definition-49-56", method="transfer(address _to,uint256 _value)", type_label=function_definition];
334 [label="49_ require(_to != address(0));\n334-expression_statement-50-50", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
343 [label="50_ require(_value <= balances[msg.sender]);\n343-expression_statement-51-51", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
354 [label="51_ balances[msg.sender] = balances[msg.sender].sub(_value);\n354-expression_statement-52-52", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
371 [label="52_ balances[_to] = balances[_to].add(_value);\n371-expression_statement-53-53", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
394 [label="54_ return true;\n394-return-55-55", method="transfer(address _to,uint256 _value)", type_label=return];
397 [label="56_ function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n397-function_definition-57-59", method="balanceOf(address _owner)", type_label=function_definition];
411 [label="57_ return balances[_owner];\n411-return-58-58", method="balanceOf(address _owner)", type_label=return];
421 [label="61_ function allowance(address owner, address spender) public view returns (uint256);\n421-function_definition-62-62", method="allowance(address owner,address spender)", type_label=function_definition];
437 [label="62_ function transferFrom(address from, address to, uint256 value) public returns (bool);\n437-function_definition-63-63", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
456 [label="63_ function approve(address spender, uint256 value) public returns (bool);\n456-function_definition-64-64", method="approve(address spender,uint256 value)", type_label=function_definition];
494 [label="67_ mapping (address => mapping (address => uint256)) internal allowed;\n494-new_variable-68-68", method="", type_label=new_variable];
503 [label="68_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n503-function_definition-69-78", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
523 [label="69_ require(_to != address(0));\n523-expression_statement-70-70", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
532 [label="70_ require(_value <= balances[_from]);\n532-expression_statement-71-71", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
541 [label="71_ require(_value <= allowed[_from][msg.sender]);\n541-expression_statement-72-72", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
554 [label="72_ balances[_from] = balances[_from].sub(_value);\n554-expression_statement-73-73", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
567 [label="73_ balances[_to] = balances[_to].add(_value);\n567-expression_statement-74-74", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
580 [label="74_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n580-expression_statement-75-75", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
609 [label="76_ return true;\n609-return-77-77", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
612 [label="78_ function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n612-function_definition-79-83", method="approve(address _spender,uint256 _value)", type_label=function_definition];
628 [label="79_ allowed[msg.sender][_spender] = _value;\n628-expression_statement-80-80", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
648 [label="81_ return true;\n648-return-82-82", method="approve(address _spender,uint256 _value)", type_label=return];
651 [label="83_ function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n651-function_definition-84-86", method="allowance(address _owner,address _spender)", type_label=function_definition];
668 [label="84_ return allowed[_owner][_spender];\n668-return-85-85", method="allowance(address _owner,address _spender)", type_label=return];
674 [label="86_ function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n674-function_definition-87-91", method="increaseApproval(address _spender,uint _addedValue)", type_label=function_definition];
690 [label="87_ allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n690-expression_statement-88-88", method="increaseApproval(address _spender,uint _addedValue)", type_label=expression_statement];
727 [label="89_ return true;\n727-return-90-90", method="increaseApproval(address _spender,uint _addedValue)", type_label=return];
730 [label="91_ function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n730-function_definition-92-101", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=function_definition];
746 [label="92_ uint oldValue = allowed[msg.sender][_spender];\n746-new_variable-93-93", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=new_variable];
758 [label="93_ if__subtractedValue > oldValue\n758-if-94-98", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=if];
2476 [label="93_ end_if", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=end_if];
763 [label="94_ allowed[msg.sender][_spender] = 0;\n763-expression_statement-95-95", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=expression_statement];
774 [label="96_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n774-expression_statement-97-97", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=expression_statement];
805 [label="99_ return true;\n805-return-100-100", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=return];
811 [label="103_ address public owner;\n811-new_variable-104-104", method="", type_label=new_variable];
834 [label="110_ owner = msg.sender;\n834-expression_statement-111-111", method="", type_label=expression_statement];
840 [label="112_ modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n840-expression_statement-113-116", method="", type_label=expression_statement];
843 [label="113_ require(msg.sender == owner);\n843-expression_statement-114-114", method="", type_label=expression_statement];
852 [label="114_ _;\n852-expression_statement-115-115", method="", type_label=expression_statement];
854 [label="116_ function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n854-function_definition-117-121", method="transferOwnership(address newOwner)", type_label=function_definition];
861 [label="116_ onlyOwner\n861-expression_statement-117-117", method="transferOwnership(address newOwner)", type_label=expression_statement];
864 [label="117_ require(newOwner != address(0));\n864-expression_statement-118-118", method="transferOwnership(address newOwner)", type_label=expression_statement];
879 [label="119_ owner = newOwner;\n879-expression_statement-120-120", method="transferOwnership(address newOwner)", type_label=expression_statement];
883 [label="121_ function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n883-function_definition-122-125", method="renounceOwnership()", type_label=function_definition];
886 [label="121_ onlyOwner\n886-expression_statement-122-122", method="renounceOwnership()", type_label=expression_statement];
893 [label="123_ owner = address(0);\n893-expression_statement-124-124", method="renounceOwnership()", type_label=expression_statement];
920 [label="129_ bool public mintingFinished = false;\n920-new_variable-130-130", method="", type_label=new_variable];
927 [label="130_ modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n927-expression_statement-131-134", method="", type_label=expression_statement];
930 [label="131_ require(!mintingFinished);\n930-expression_statement-132-132", method="", type_label=expression_statement];
936 [label="132_ _;\n936-expression_statement-133-133", method="", type_label=expression_statement];
938 [label="134_ function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n938-function_definition-135-141", method="mint(address _to,uint256 _amount)", type_label=function_definition];
949 [label="134_ onlyOwner\n949-expression_statement-135-135", method="mint(address _to,uint256 _amount)", type_label=expression_statement];
951 [label="134_ canMint\n951-expression_statement-135-135", method="mint(address _to,uint256 _amount)", type_label=expression_statement];
958 [label="135_ totalSupply_ = totalSupply_.add(_amount);\n958-expression_statement-136-136", method="mint(address _to,uint256 _amount)", type_label=expression_statement];
967 [label="136_ balances[_to] = balances[_to].add(_amount);\n967-expression_statement-137-137", method="mint(address _to,uint256 _amount)", type_label=expression_statement];
996 [label="139_ return true;\n996-return-140-140", method="mint(address _to,uint256 _amount)", type_label=return];
999 [label="141_ function finishMinting() public onlyOwner canMint returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n999-function_definition-142-146", method="finishMinting()", type_label=function_definition];
1002 [label="141_ onlyOwner\n1002-expression_statement-142-142", method="finishMinting()", type_label=expression_statement];
1004 [label="141_ canMint\n1004-expression_statement-142-142", method="finishMinting()", type_label=expression_statement];
1011 [label="142_ mintingFinished = true;\n1011-expression_statement-143-143", method="finishMinting()", type_label=expression_statement];
1018 [label="144_ return true;\n1018-return-145-145", method="finishMinting()", type_label=return];
1027 [label="148_ uint256 public cap;\n1027-new_variable-149-149", method="", type_label=new_variable];
1038 [label="150_ require(_cap > 0);\n1038-expression_statement-151-151", method="", type_label=expression_statement];
1045 [label="151_ cap = _cap;\n1045-expression_statement-152-152", method="", type_label=expression_statement];
1049 [label="153_ function mint(address _to, uint256 _amount) public returns (bool) {\n        require(totalSupply_.add(_amount) <= cap);\n        return super.mint(_to, _amount);\n    }\n1049-function_definition-154-157", method="mint(address _to,uint256 _amount)", type_label=function_definition];
1065 [label="154_ require(totalSupply_.add(_amount) <= cap);\n1065-expression_statement-155-155", method="mint(address _to,uint256 _amount)", type_label=expression_statement];
1077 [label="155_ return super.mint(_to, _amount);\n1077-return-156-156", method="mint(address _to,uint256 _amount)", type_label=return];
1102 [label="160_ function burn(uint256 _value) public {\n        _burn(msg.sender, _value);\n    }\n1102-function_definition-161-163", method="burn(uint256 _value)", type_label=function_definition];
1110 [label="161_ _burn(msg.sender, _value);\n1110-expression_statement-162-162", method="burn(uint256 _value)", type_label=expression_statement];
1119 [label="163_ function _burn(address _who, uint256 _value) internal {\n        require(_value <= balances[_who]);\n        balances[_who] = balances[_who].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n1119-function_definition-164-170", method="_burn(address _who,uint256 _value)", type_label=function_definition];
1131 [label="164_ require(_value <= balances[_who]);\n1131-expression_statement-165-165", method="_burn(address _who,uint256 _value)", type_label=expression_statement];
1140 [label="165_ balances[_who] = balances[_who].sub(_value);\n1140-expression_statement-166-166", method="_burn(address _who,uint256 _value)", type_label=expression_statement];
1153 [label="166_ totalSupply_ = totalSupply_.sub(_value);\n1153-expression_statement-167-167", method="_burn(address _who,uint256 _value)", type_label=expression_statement];
1188 [label="174_ bool public paused = false;\n1188-new_variable-175-175", method="", type_label=new_variable];
1195 [label="175_ modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n1195-expression_statement-176-179", method="", type_label=expression_statement];
1198 [label="176_ require(!paused);\n1198-expression_statement-177-177", method="", type_label=expression_statement];
1204 [label="177_ _;\n1204-expression_statement-178-178", method="", type_label=expression_statement];
1206 [label="179_ modifier whenPaused() {\n        require(paused);\n        _;\n    }\n1206-expression_statement-180-183", method="", type_label=expression_statement];
1209 [label="180_ require(paused);\n1209-expression_statement-181-181", method="", type_label=expression_statement];
1214 [label="181_ _;\n1214-expression_statement-182-182", method="", type_label=expression_statement];
1216 [label="183_ function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n1216-function_definition-184-187", method="pause()", type_label=function_definition];
1219 [label="183_ onlyOwner\n1219-expression_statement-184-184", method="pause()", type_label=expression_statement];
1221 [label="183_ whenNotPaused\n1221-expression_statement-184-184", method="pause()", type_label=expression_statement];
1224 [label="184_ paused = true;\n1224-expression_statement-185-185", method="pause()", type_label=expression_statement];
1231 [label="187_ function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n1231-function_definition-188-191", method="unpause()", type_label=function_definition];
1234 [label="187_ onlyOwner\n1234-expression_statement-188-188", method="unpause()", type_label=expression_statement];
1236 [label="187_ whenPaused\n1236-expression_statement-188-188", method="unpause()", type_label=expression_statement];
1239 [label="188_ paused = false;\n1239-expression_statement-189-189", method="unpause()", type_label=expression_statement];
1255 [label="193_ function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transfer(_to, _value);\n    }\n1255-function_definition-194-196", method="transfer(address _to,uint256 _value)", type_label=function_definition];
1266 [label="193_ whenNotPaused\n1266-expression_statement-194-194", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
1273 [label="194_ return super.transfer(_to, _value);\n1273-return-195-195", method="transfer(address _to,uint256 _value)", type_label=return];
1282 [label="196_ function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n1282-function_definition-197-199", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
1297 [label="196_ whenNotPaused\n1297-expression_statement-197-197", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1304 [label="197_ return super.transferFrom(_from, _to, _value);\n1304-return-198-198", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
1315 [label="199_ function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        return super.approve(_spender, _value);\n    }\n1315-function_definition-200-202", method="approve(address _spender,uint256 _value)", type_label=function_definition];
1326 [label="199_ whenNotPaused\n1326-expression_statement-200-200", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
1333 [label="200_ return super.approve(_spender, _value);\n1333-return-201-201", method="approve(address _spender,uint256 _value)", type_label=return];
1342 [label="202_ function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n1342-function_definition-203-205", method="increaseApproval(address _spender,uint _addedValue)", type_label=function_definition];
1353 [label="202_ whenNotPaused\n1353-expression_statement-203-203", method="increaseApproval(address _spender,uint _addedValue)", type_label=expression_statement];
1361 [label="203_ return super.increaseApproval(_spender, _addedValue);\n1361-return-204-204", method="increaseApproval(address _spender,uint _addedValue)", type_label=return];
1370 [label="205_ function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n1370-function_definition-206-208", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=function_definition];
1381 [label="205_ whenNotPaused\n1381-expression_statement-206-206", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=expression_statement];
1389 [label="206_ return super.decreaseApproval(_spender, _subtractedValue);\n1389-return-207-207", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=return];
1401 [label="210_ function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n1401-function_definition-211-213", method="safeTransfer(ERC20Basic token,address to,uint256 value)", type_label=function_definition];
1418 [label="211_ require(token.transfer(to, value));\n1418-expression_statement-212-212", method="safeTransfer(ERC20Basic token,address to,uint256 value)", type_label=expression_statement];
1430 [label="213_ function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 value\n    )\n        internal\n    {\n        require(token.transferFrom(from, to, value));\n    }\n1430-function_definition-214-223", method="safeTransferFrom(ERC20 token,address from,address to,uint256 value)", type_label=function_definition];
1451 [label="221_ require(token.transferFrom(from, to, value));\n1451-expression_statement-222-222", method="safeTransferFrom(ERC20 token,address from,address to,uint256 value)", type_label=expression_statement];
1465 [label="223_ function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        require(token.approve(spender, value));\n    }\n1465-function_definition-224-226", method="safeApprove(ERC20 token,address spender,uint256 value)", type_label=function_definition];
1482 [label="224_ require(token.approve(spender, value));\n1482-expression_statement-225-225", method="safeApprove(ERC20 token,address spender,uint256 value)", type_label=expression_statement];
1503 [label="229_ ERC20Basic public token;\n1503-new_variable-230-230", method="", type_label=new_variable];
1509 [label="230_ address public beneficiary;\n1509-new_variable-231-231", method="", type_label=new_variable];
1514 [label="231_ uint256 public releaseTime;\n1514-new_variable-232-232", method="", type_label=new_variable];
1534 [label="233_ require(_releaseTime > block.timestamp);\n1534-expression_statement-234-234", method="", type_label=expression_statement];
1543 [label="234_ token = _token;\n1543-expression_statement-235-235", method="", type_label=expression_statement];
1547 [label="235_ beneficiary = _beneficiary;\n1547-expression_statement-236-236", method="", type_label=expression_statement];
1551 [label="236_ releaseTime = _releaseTime;\n1551-expression_statement-237-237", method="", type_label=expression_statement];
1555 [label="238_ function release() public {\n        require(block.timestamp >= releaseTime);  \n        uint256 amount = token.balanceOf(this);\n        require(amount > 0);\n        token.safeTransfer(beneficiary, amount);\n    }\n1555-function_definition-239-244", method="release()", type_label=function_definition];
1559 [label="239_ require(block.timestamp >= releaseTime);\n1559-expression_statement-240-240", method="release()", type_label=expression_statement];
1568 [label="240_ uint256 amount = token.balanceOf(this);\n1568-new_variable-241-241", method="release()", type_label=new_variable];
1579 [label="241_ require(amount > 0);\n1579-expression_statement-242-242", method="release()", type_label=expression_statement];
1586 [label="242_ token.safeTransfer(beneficiary, amount);\n1586-expression_statement-243-243", method="release()", type_label=expression_statement];
1612 [label="247_ string public name = \"MAX Token\";\n1612-new_variable-248-248", method="", type_label=new_variable];
1619 [label="248_ string public symbol = \"MAXT\";\n1619-new_variable-249-249", method="", type_label=new_variable];
1626 [label="249_ uint public decimals = 18;\n1626-new_variable-250-250", method="", type_label=new_variable];
1633 [label="250_ CappedToken(5e8 * 1e18)\n1633-expression_statement-251-251", method="", type_label=expression_statement];
1640 [label="252_ function mintTimelocked(address _to, uint256 _amount, uint256 _releaseTime) public \n    onlyOwner canMint returns (TokenTimelock) \n    {\n        TokenTimelock timelock = new TokenTimelock(this, _to, _releaseTime);\n        mint(timelock, _amount);\n        return timelock;\n    }\n1640-function_definition-253-259", method="mintTimelocked(address _to,uint256 _amount,uint256 _releaseTime)", type_label=function_definition];
1655 [label="253_ onlyOwner\n1655-expression_statement-254-254", method="mintTimelocked(address _to,uint256 _amount,uint256 _releaseTime)", type_label=expression_statement];
1657 [label="253_ canMint\n1657-expression_statement-254-254", method="mintTimelocked(address _to,uint256 _amount,uint256 _releaseTime)", type_label=expression_statement];
1665 [label="255_ TokenTimelock timelock = new TokenTimelock(this, _to, _releaseTime);\n1665-new_variable-256-256", method="mintTimelocked(address _to,uint256 _amount,uint256 _releaseTime)", type_label=new_variable];
1682 [label="256_ mint(timelock, _amount);\n1682-expression_statement-257-257", method="mintTimelocked(address _to,uint256 _amount,uint256 _releaseTime)", type_label=expression_statement];
1689 [label="257_ return timelock;\n1689-return-258-258", method="mintTimelocked(address _to,uint256 _amount,uint256 _releaseTime)", type_label=return];
1691 [label="259_ function _burn(address _who, uint256 _value) internal onlyOwner {\n        super._burn(_who, _value);\n        cap = cap.sub(_value);\n    }\n1691-function_definition-260-263", method="_burn(address _who,uint256 _value)", type_label=function_definition];
1702 [label="259_ onlyOwner\n1702-expression_statement-260-260", method="_burn(address _who,uint256 _value)", type_label=expression_statement];
1705 [label="260_ super._burn(_who, _value);\n1705-expression_statement-261-261", method="_burn(address _who,uint256 _value)", type_label=expression_statement];
1714 [label="261_ cap = cap.sub(_value);\n1714-expression_statement-262-262", method="_burn(address _who,uint256 _value)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
789;
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
29 -> 1747  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1747 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 1747  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
34 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
36 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
55 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
76 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
104 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
136 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
138 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
162 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
186 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
203 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
210 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
297 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
307 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
316 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
318 -> 334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
334 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
354 -> 371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
394 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
397 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
503 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
532 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
554 -> 567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
609 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
612 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
648 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
651 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
668 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
674 -> 690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
730 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 763  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
758 -> 774  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2476 -> 789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 2476  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
774 -> 2476  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
805 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
843 -> 852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
920 -> 927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
930 -> 936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
938 -> 958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
958 -> 967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
996 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
999 -> 1011  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1002 -> 1004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1018 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1038 -> 1045  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 1065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1065 -> 1077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1077 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1102 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1119 -> 1131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1131 -> 1140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1140 -> 1153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1188 -> 1195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1195 -> 1206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1198 -> 1204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1209 -> 1214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1216 -> 1224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1219 -> 1221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1231 -> 1239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1234 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1255 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1273 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1282 -> 1304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1304 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1315 -> 1333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1333 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1342 -> 1361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1361 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1370 -> 1389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1389 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1401 -> 1418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1430 -> 1451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1465 -> 1482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1503 -> 1509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1509 -> 1514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1534 -> 1543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1543 -> 1547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1547 -> 1551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1555 -> 1559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1559 -> 1568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1568 -> 1579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1579 -> 1586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1612 -> 1619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1619 -> 1626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1640 -> 1665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1655 -> 1657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1665 -> 1682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1682 -> 1689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1689 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1691 -> 1705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1705 -> 1714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
