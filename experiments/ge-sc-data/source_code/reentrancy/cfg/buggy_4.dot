digraph  {
15 [label="2_ function totalSupply() external view returns (uint256);\n15-function_definition-3-3", method="totalSupply()", type_label=function_definition];
23 [label="3_ function balanceOf(address who) external view returns (uint256);\n23-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
35 [label="4_ function transfer(address to, uint256 value) external returns (bool);\n35-function_definition-5-5", method="transfer(address to,uint256 value)", type_label=function_definition];
70 [label="8_ mapping(address => uint) userBalance_re_ent26;\n70-new_variable-9-9", method="", type_label=new_variable];
76 [label="9_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n76-function_definition-10-16", method="withdrawBalance_re_ent26()", type_label=function_definition];
80 [label="10_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n80-new_variable-11-11", method="withdrawBalance_re_ent26()", type_label=new_variable];
104 [label="11_ if\n104-if-12-14", method="withdrawBalance_re_ent26()", type_label=if];
1359 [label="11_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
110 [label="14_ userBalance_re_ent26[msg.sender] = 0;\n110-expression_statement-15-15", method="withdrawBalance_re_ent26()", type_label=expression_statement];
118 [label="16_ string public name = \"PHO\";\n118-new_variable-17-17", method="", type_label=new_variable];
125 [label="17_ bool not_called_re_ent20 = true;\n125-new_variable-18-18", method="", type_label=new_variable];
131 [label="18_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n131-function_definition-19-25", method="bug_re_ent20()", type_label=function_definition];
135 [label="19_ require(not_called_re_ent20);\n135-expression_statement-20-20", method="bug_re_ent20()", type_label=expression_statement];
140 [label="20_ if\n140-if-21-23", method="bug_re_ent20()", type_label=if];
1395 [label="20_ end_if", method="bug_re_ent20()", type_label=end_if];
155 [label="23_ not_called_re_ent20 = false;\n155-expression_statement-24-24", method="bug_re_ent20()", type_label=expression_statement];
160 [label="25_ string public symbol = \"PHO\";\n160-new_variable-26-26", method="", type_label=new_variable];
167 [label="26_ mapping(address => uint) redeemableEther_re_ent32;\n167-new_variable-27-27", method="", type_label=new_variable];
173 [label="27_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n173-function_definition-28-33", method="claimReward_re_ent32()", type_label=function_definition];
177 [label="28_ require(redeemableEther_re_ent32[msg.sender] > 0);\n177-expression_statement-29-29", method="claimReward_re_ent32()", type_label=expression_statement];
188 [label="29_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n188-new_variable-30-30", method="claimReward_re_ent32()", type_label=new_variable];
198 [label="30_ msg.sender.transfer(transferValue_re_ent32);\n198-expression_statement-31-31", method="claimReward_re_ent32()", type_label=expression_statement];
207 [label="31_ redeemableEther_re_ent32[msg.sender] = 0;\n207-expression_statement-32-32", method="claimReward_re_ent32()", type_label=expression_statement];
215 [label="33_ uint8 public decimals = 18;\n215-new_variable-34-34", method="", type_label=new_variable];
221 [label="34_ mapping(address => uint) balances_re_ent38;\n221-new_variable-35-35", method="", type_label=new_variable];
227 [label="35_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n227-function_definition-36-40", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
235 [label="36_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n235-expression_statement-37-37", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
246 [label="37_ require(msg.sender.send(_weiToWithdraw));\n246-expression_statement-38-38", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
258 [label="38_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n258-expression_statement-39-39", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
266 [label="40_ uint256 saleAmount;\n266-new_variable-41-41", method="", type_label=new_variable];
270 [label="41_ mapping(address => uint) redeemableEther_re_ent4;\n270-new_variable-42-42", method="", type_label=new_variable];
276 [label="42_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n276-function_definition-43-48", method="claimReward_re_ent4()", type_label=function_definition];
280 [label="43_ require(redeemableEther_re_ent4[msg.sender] > 0);\n280-expression_statement-44-44", method="claimReward_re_ent4()", type_label=expression_statement];
291 [label="44_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n291-new_variable-45-45", method="claimReward_re_ent4()", type_label=new_variable];
301 [label="45_ msg.sender.transfer(transferValue_re_ent4);\n301-expression_statement-46-46", method="claimReward_re_ent4()", type_label=expression_statement];
310 [label="46_ redeemableEther_re_ent4[msg.sender] = 0;\n310-expression_statement-47-47", method="claimReward_re_ent4()", type_label=expression_statement];
318 [label="48_ uint256 evtAmount;\n318-new_variable-49-49", method="", type_label=new_variable];
322 [label="49_ uint256 counter_re_ent7 =0;\n322-new_variable-50-50", method="", type_label=new_variable];
327 [label="50_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n327-function_definition-51-57", method="callme_re_ent7()", type_label=function_definition];
331 [label="51_ require(counter_re_ent7<=5);\n331-expression_statement-52-52", method="callme_re_ent7()", type_label=expression_statement];
338 [label="52_ if\n338-if-53-55", method="callme_re_ent7()", type_label=if];
1593 [label="52_ end_if", method="callme_re_ent7()", type_label=end_if];
353 [label="55_ counter_re_ent7 += 1;\n353-expression_statement-56-56", method="callme_re_ent7()", type_label=expression_statement];
357 [label="57_ uint256 teamAmount;\n357-new_variable-58-58", method="", type_label=new_variable];
361 [label="58_ address payable lastPlayer_re_ent23;\n361-new_variable-59-59", method="", type_label=new_variable];
365 [label="59_ uint jackpot_re_ent23;\n365-new_variable-60-60", method="", type_label=new_variable];
369 [label="60_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n369-function_definition-61-66", method="buyTicket_re_ent23()", type_label=function_definition];
373 [label="61_ if\n373-if-62-63", method="buyTicket_re_ent23()", type_label=if];
1628 [label="61_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
384 [label="63_ lastPlayer_re_ent23 = msg.sender;\n384-expression_statement-64-64", method="buyTicket_re_ent23()", type_label=expression_statement];
390 [label="64_ jackpot_re_ent23    = address(this).balance;\n390-expression_statement-65-65", method="buyTicket_re_ent23()", type_label=expression_statement];
398 [label="66_ uint256 _totalSupply;\n398-new_variable-67-67", method="", type_label=new_variable];
402 [label="67_ uint256 counter_re_ent14 =0;\n402-new_variable-68-68", method="", type_label=new_variable];
407 [label="68_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n407-function_definition-69-75", method="callme_re_ent14()", type_label=function_definition];
411 [label="69_ require(counter_re_ent14<=5);\n411-expression_statement-70-70", method="callme_re_ent14()", type_label=expression_statement];
418 [label="70_ if\n418-if-71-73", method="callme_re_ent14()", type_label=if];
1673 [label="70_ end_if", method="callme_re_ent14()", type_label=end_if];
433 [label="73_ counter_re_ent14 += 1;\n433-expression_statement-74-74", method="callme_re_ent14()", type_label=expression_statement];
437 [label="75_ mapping(address => uint256) balances;\n437-new_variable-76-76", method="", type_label=new_variable];
443 [label="76_ address payable lastPlayer_re_ent30;\n443-new_variable-77-77", method="", type_label=new_variable];
447 [label="77_ uint jackpot_re_ent30;\n447-new_variable-78-78", method="", type_label=new_variable];
451 [label="78_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n451-function_definition-79-84", method="buyTicket_re_ent30()", type_label=function_definition];
455 [label="79_ if\n455-if-80-81", method="buyTicket_re_ent30()", type_label=if];
1710 [label="79_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
466 [label="81_ lastPlayer_re_ent30 = msg.sender;\n466-expression_statement-82-82", method="buyTicket_re_ent30()", type_label=expression_statement];
472 [label="82_ jackpot_re_ent30    = address(this).balance;\n472-expression_statement-83-83", method="buyTicket_re_ent30()", type_label=expression_statement];
480 [label="84_ address public owner;\n480-new_variable-85-85", method="", type_label=new_variable];
485 [label="85_ mapping(address => uint) balances_re_ent8;\n485-new_variable-86-86", method="", type_label=new_variable];
491 [label="86_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n491-function_definition-87-91", method="withdraw_balances_re_ent8()", type_label=function_definition];
495 [label="87_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n495-new_variable-88-88", method="withdraw_balances_re_ent8()", type_label=new_variable];
519 [label="88_ if\n519-if-89-90", method="withdraw_balances_re_ent8()", type_label=if];
1774 [label="88_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
521 [label="89_ balances_re_ent8[msg.sender] = 0;\n521-expression_statement-90-90", method="withdraw_balances_re_ent8()", type_label=expression_statement];
529 [label="91_ address public sale;\n529-new_variable-92-92", method="", type_label=new_variable];
534 [label="92_ mapping(address => uint) redeemableEther_re_ent39;\n534-new_variable-93-93", method="", type_label=new_variable];
540 [label="93_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n540-function_definition-94-99", method="claimReward_re_ent39()", type_label=function_definition];
544 [label="94_ require(redeemableEther_re_ent39[msg.sender] > 0);\n544-expression_statement-95-95", method="claimReward_re_ent39()", type_label=expression_statement];
555 [label="95_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n555-new_variable-96-96", method="claimReward_re_ent39()", type_label=new_variable];
565 [label="96_ msg.sender.transfer(transferValue_re_ent39);\n565-expression_statement-97-97", method="claimReward_re_ent39()", type_label=expression_statement];
574 [label="97_ redeemableEther_re_ent39[msg.sender] = 0;\n574-expression_statement-98-98", method="claimReward_re_ent39()", type_label=expression_statement];
582 [label="99_ address public evt;\n582-new_variable-100-100", method="", type_label=new_variable];
587 [label="100_ mapping(address => uint) balances_re_ent36;\n587-new_variable-101-101", method="", type_label=new_variable];
593 [label="101_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n593-function_definition-102-105", method="withdraw_balances_re_ent36()", type_label=function_definition];
597 [label="102_ if\n597-if-103-104", method="withdraw_balances_re_ent36()", type_label=if];
1852 [label="102_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
610 [label="103_ balances_re_ent36[msg.sender] = 0;\n610-expression_statement-104-104", method="withdraw_balances_re_ent36()", type_label=expression_statement];
618 [label="105_ address public team;\n618-new_variable-106-106", method="", type_label=new_variable];
623 [label="106_ modifier isOwner {\n        require(owner == msg.sender);\n        _;\n    }\n623-expression_statement-107-110", method="", type_label=expression_statement];
626 [label="107_ require(owner == msg.sender);\n626-expression_statement-108-108", method="", type_label=expression_statement];
635 [label="108_ _;\n635-expression_statement-109-109", method="", type_label=expression_statement];
639 [label="111_ owner   = msg.sender;\n639-expression_statement-112-112", method="", type_label=expression_statement];
645 [label="112_ sale    = 0x071F73f4D0befd4406901AACE6D5FFD6D297c561;\n645-expression_statement-113-113", method="", type_label=expression_statement];
649 [label="113_ evt     = 0x76535ca5BF1d33434A302e5A464Df433BB1F80F6;\n649-expression_statement-114-114", method="", type_label=expression_statement];
653 [label="114_ team    = 0xD7EC5D8697e4c83Dc33D781d19dc2910fB165D5C;\n653-expression_statement-115-115", method="", type_label=expression_statement];
657 [label="115_ saleAmount    = toWei(1000000000);\n657-expression_statement-116-116", method="", type_label=expression_statement];
664 [label="116_ evtAmount     = toWei(200000000);\n664-expression_statement-117-117", method="", type_label=expression_statement];
671 [label="117_ teamAmount    = toWei(800000000);\n671-expression_statement-118-118", method="", type_label=expression_statement];
678 [label="118_ _totalSupply  = toWei(2000000000);\n678-expression_statement-119-119", method="", type_label=expression_statement];
685 [label="119_ require(_totalSupply == saleAmount + evtAmount + teamAmount );\n685-expression_statement-120-120", method="", type_label=expression_statement];
696 [label="120_ balances[owner] = _totalSupply;\n696-expression_statement-121-121", method="", type_label=expression_statement];
714 [label="122_ transfer(sale, saleAmount);\n714-expression_statement-123-123", method="", type_label=expression_statement];
721 [label="123_ transfer(evt, evtAmount);\n721-expression_statement-124-124", method="", type_label=expression_statement];
728 [label="124_ transfer(team, teamAmount);\n728-expression_statement-125-125", method="", type_label=expression_statement];
735 [label="125_ require(balances[owner] == 0);\n735-expression_statement-126-126", method="", type_label=expression_statement];
744 [label="127_ uint256 counter_re_ent35 =0;\n744-new_variable-128-128", method="", type_label=new_variable];
749 [label="128_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n749-function_definition-129-135", method="callme_re_ent35()", type_label=function_definition];
753 [label="129_ require(counter_re_ent35<=5);\n753-expression_statement-130-130", method="callme_re_ent35()", type_label=expression_statement];
760 [label="130_ if\n760-if-131-133", method="callme_re_ent35()", type_label=if];
2015 [label="130_ end_if", method="callme_re_ent35()", type_label=end_if];
775 [label="133_ counter_re_ent35 += 1;\n775-expression_statement-134-134", method="callme_re_ent35()", type_label=expression_statement];
779 [label="135_ function totalSupply() public view returns (uint) {\n        return _totalSupply;\n    }\n779-function_definition-136-138", method="totalSupply()", type_label=function_definition];
788 [label="136_ return _totalSupply;\n788-return-137-137", method="totalSupply()", type_label=return];
790 [label="138_ mapping(address => uint) userBalance_re_ent40;\n790-new_variable-139-139", method="", type_label=new_variable];
796 [label="139_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n796-function_definition-140-146", method="withdrawBalance_re_ent40()", type_label=function_definition];
800 [label="140_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n800-new_variable-141-141", method="withdrawBalance_re_ent40()", type_label=new_variable];
824 [label="141_ if\n824-if-142-144", method="withdrawBalance_re_ent40()", type_label=if];
2079 [label="141_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
830 [label="144_ userBalance_re_ent40[msg.sender] = 0;\n830-expression_statement-145-145", method="withdrawBalance_re_ent40()", type_label=expression_statement];
838 [label="146_ function balanceOf(address who) public view returns (uint256) {\n        return balances[who];\n    }\n838-function_definition-147-149", method="balanceOf(address who)", type_label=function_definition];
851 [label="147_ return balances[who];\n851-return-148-148", method="balanceOf(address who)", type_label=return];
855 [label="149_ mapping(address => uint) userBalance_re_ent33;\n855-new_variable-150-150", method="", type_label=new_variable];
861 [label="150_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n861-function_definition-151-157", method="withdrawBalance_re_ent33()", type_label=function_definition];
865 [label="151_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n865-new_variable-152-152", method="withdrawBalance_re_ent33()", type_label=new_variable];
889 [label="152_ if\n889-if-153-155", method="withdrawBalance_re_ent33()", type_label=if];
2144 [label="152_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
895 [label="155_ userBalance_re_ent33[msg.sender] = 0;\n895-expression_statement-156-156", method="withdrawBalance_re_ent33()", type_label=expression_statement];
903 [label="157_ function transfer(address to, uint256 value) public returns (bool success) {\n        require(msg.sender != to);\n        require(value > 0);\n        require( balances[msg.sender] >= value );\n        require( balances[to] + value >= balances[to] );\n        if(msg.sender == team) {\n            require(now >= 1589036400);      \n            if(balances[msg.sender] - value < toWei(600000000))\n                require(now >= 1620572400);      \n            if(balances[msg.sender] - value < toWei(400000000))\n                require(now >= 1652108400);      \n            if(balances[msg.sender] - value < toWei(200000000))\n                require(now >= 1683644400);      \n        }\n        balances[msg.sender] -= value;\n        balances[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n903-function_definition-158-176", method="transfer(address to,uint256 value)", type_label=function_definition];
920 [label="158_ require(msg.sender != to);\n920-expression_statement-159-159", method="transfer(address to,uint256 value)", type_label=expression_statement];
929 [label="159_ require(value > 0);\n929-expression_statement-160-160", method="transfer(address to,uint256 value)", type_label=expression_statement];
936 [label="160_ require( balances[msg.sender] >= value );\n936-expression_statement-161-161", method="transfer(address to,uint256 value)", type_label=expression_statement];
947 [label="161_ require( balances[to] + value >= balances[to] );\n947-expression_statement-162-162", method="transfer(address to,uint256 value)", type_label=expression_statement];
960 [label="162_ if_msg.sender == team\n960-if-163-171", method="transfer(address to,uint256 value)", type_label=if];
2215 [label="162_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
967 [label="163_ require(now >= 1589036400);\n967-expression_statement-164-164", method="transfer(address to,uint256 value)", type_label=expression_statement];
974 [label="164_ if\n974-if-165-166", method="transfer(address to,uint256 value)", type_label=if];
2229 [label="164_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
987 [label="165_ require(now >= 1620572400);\n987-expression_statement-166-166", method="transfer(address to,uint256 value)", type_label=expression_statement];
994 [label="166_ if\n994-if-167-168", method="transfer(address to,uint256 value)", type_label=if];
2249 [label="166_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
1007 [label="167_ require(now >= 1652108400);\n1007-expression_statement-168-168", method="transfer(address to,uint256 value)", type_label=expression_statement];
1014 [label="168_ if\n1014-if-169-170", method="transfer(address to,uint256 value)", type_label=if];
2269 [label="168_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
1027 [label="169_ require(now >= 1683644400);\n1027-expression_statement-170-170", method="transfer(address to,uint256 value)", type_label=expression_statement];
1034 [label="171_ balances[msg.sender] -= value;\n1034-expression_statement-172-172", method="transfer(address to,uint256 value)", type_label=expression_statement];
1042 [label="172_ balances[to] += value;\n1042-expression_statement-173-173", method="transfer(address to,uint256 value)", type_label=expression_statement];
1058 [label="174_ return true;\n1058-return-175-175", method="transfer(address to,uint256 value)", type_label=return];
1061 [label="176_ bool not_called_re_ent27 = true;\n1061-new_variable-177-177", method="", type_label=new_variable];
1067 [label="177_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n1067-function_definition-178-184", method="bug_re_ent27()", type_label=function_definition];
1071 [label="178_ require(not_called_re_ent27);\n1071-expression_statement-179-179", method="bug_re_ent27()", type_label=expression_statement];
1076 [label="179_ if\n1076-if-180-182", method="bug_re_ent27()", type_label=if];
2331 [label="179_ end_if", method="bug_re_ent27()", type_label=end_if];
1091 [label="182_ not_called_re_ent27 = false;\n1091-expression_statement-183-183", method="bug_re_ent27()", type_label=expression_statement];
1096 [label="184_ function burnCoins(uint256 value) public {\n        require(balances[msg.sender] >= value);\n        require(_totalSupply >= value);\n        balances[msg.sender] -= value;\n        _totalSupply -= value;\n        emit Transfer(msg.sender, address(0), value);\n    }\n1096-function_definition-185-191", method="burnCoins(uint256 value)", type_label=function_definition];
1104 [label="185_ require(balances[msg.sender] >= value);\n1104-expression_statement-186-186", method="burnCoins(uint256 value)", type_label=expression_statement];
1115 [label="186_ require(_totalSupply >= value);\n1115-expression_statement-187-187", method="burnCoins(uint256 value)", type_label=expression_statement];
1122 [label="187_ balances[msg.sender] -= value;\n1122-expression_statement-188-188", method="burnCoins(uint256 value)", type_label=expression_statement];
1130 [label="188_ _totalSupply -= value;\n1130-expression_statement-189-189", method="burnCoins(uint256 value)", type_label=expression_statement];
1146 [label="191_ mapping(address => uint) balances_re_ent31;\n1146-new_variable-192-192", method="", type_label=new_variable];
1152 [label="192_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n1152-function_definition-193-197", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
1160 [label="193_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n1160-expression_statement-194-194", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1171 [label="194_ require(msg.sender.send(_weiToWithdraw));\n1171-expression_statement-195-195", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1183 [label="195_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n1183-expression_statement-196-196", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1191 [label="197_ function toWei(uint256 value) private view returns (uint256) {\n        return value * (10 ** uint256(decimals));\n    }\n1191-function_definition-198-200", method="toWei(uint256 value)", type_label=function_definition];
1204 [label="198_ return value * (10 ** uint256(decimals));\n1204-return-199-199", method="toWei(uint256 value)", type_label=return];
1213 [label="200_ bool not_called_re_ent13 = true;\n1213-new_variable-201-201", method="", type_label=new_variable];
1219 [label="201_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n1219-function_definition-202-209", method="bug_re_ent13()", type_label=function_definition];
1223 [label="202_ require(not_called_re_ent13);\n1223-expression_statement-203-203", method="bug_re_ent13()", type_label=expression_statement];
1228 [label="203_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n1228-new_variable-204-204", method="bug_re_ent13()", type_label=new_variable];
1249 [label="204_ if\n1249-if-205-207", method="bug_re_ent13()", type_label=if];
2504 [label="204_ end_if", method="bug_re_ent13()", type_label=end_if];
1255 [label="207_ not_called_re_ent13 = false;\n1255-expression_statement-208-208", method="bug_re_ent13()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
76 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 1359  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
118 -> 125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
135 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 1395  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
160 -> 167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
177 -> 188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
198 -> 207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
215 -> 221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
235 -> 246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
246 -> 258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
266 -> 270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
276 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
291 -> 301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
301 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
327 -> 331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
338 -> 1593  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
357 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
369 -> 373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
373 -> 1628  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
384 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 1673  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
437 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
443 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
455 -> 1710  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
466 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
491 -> 495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 521  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
519 -> 1774  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1774 -> 529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 1774  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
529 -> 534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
555 -> 565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
565 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 610  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
597 -> 1852  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1852 -> 618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
610 -> 1852  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
618 -> 623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
626 -> 635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
645 -> 649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
649 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
671 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
714 -> 721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
721 -> 728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
728 -> 735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
749 -> 753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
753 -> 760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
760 -> 2015  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
779 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
796 -> 800  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
800 -> 824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
824 -> 2079  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
838 -> 851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
851 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
861 -> 865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
865 -> 889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
889 -> 2144  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
903 -> 920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
920 -> 929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
936 -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
947 -> 960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
960 -> 967  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
960 -> 2215  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
967 -> 974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
974 -> 987  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
974 -> 2229  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2229 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 2229  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
994 -> 1007  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
994 -> 2249  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2249 -> 1014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1007 -> 2249  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1014 -> 1027  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1014 -> 2269  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2269 -> 1034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 2269  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1034 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1058 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1067 -> 1071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1071 -> 1076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 2331  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1096 -> 1104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1104 -> 1115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1115 -> 1122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1122 -> 1130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1152 -> 1160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1160 -> 1171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1171 -> 1183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1191 -> 1204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1204 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1219 -> 1223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1223 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 1249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1249 -> 2504  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
