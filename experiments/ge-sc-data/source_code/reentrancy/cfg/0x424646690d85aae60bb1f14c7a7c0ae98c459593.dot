digraph  {
13 [label="2_ modifier validAddress(address _address) {\n        require(_address != address(0));\n        _;\n    }\n13-expression_statement-3-6", method="", type_label=expression_statement];
20 [label="3_ require(_address != address(0));\n20-expression_statement-4-4", method="", type_label=expression_statement];
29 [label="4_ _;\n29-expression_statement-5-5", method="", type_label=expression_statement];
31 [label="6_ function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        uint256 _z = _x + _y;\n        assert(_z >= _x);\n        return _z;\n    }\n31-function_definition-7-11", method="safeAdd(uint256 _x,uint256 _y)", type_label=function_definition];
48 [label="7_ uint256 _z = _x + _y;\n48-new_variable-8-8", method="safeAdd(uint256 _x,uint256 _y)", type_label=new_variable];
56 [label="8_ assert(_z >= _x);\n56-expression_statement-9-9", method="safeAdd(uint256 _x,uint256 _y)", type_label=expression_statement];
63 [label="9_ return _z;\n63-return-10-10", method="safeAdd(uint256 _x,uint256 _y)", type_label=return];
65 [label="11_ function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        assert(_x >= _y);\n        return _x - _y;\n    }\n65-function_definition-12-15", method="safeSub(uint256 _x,uint256 _y)", type_label=function_definition];
82 [label="12_ assert(_x >= _y);\n82-expression_statement-13-13", method="safeSub(uint256 _x,uint256 _y)", type_label=expression_statement];
89 [label="13_ return _x - _y;\n89-return-14-14", method="safeSub(uint256 _x,uint256 _y)", type_label=return];
93 [label="15_ function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        uint256 _z = _x * _y;\n        assert(_x == 0 || _z / _x == _y);\n        return _z;\n    }\n93-function_definition-16-20", method="safeMul(uint256 _x,uint256 _y)", type_label=function_definition];
110 [label="16_ uint256 _z = _x * _y;\n110-new_variable-17-17", method="safeMul(uint256 _x,uint256 _y)", type_label=new_variable];
118 [label="17_ assert(_x == 0 || _z / _x == _y);\n118-expression_statement-18-18", method="safeMul(uint256 _x,uint256 _y)", type_label=expression_statement];
131 [label="18_ return _z;\n131-return-19-19", method="safeMul(uint256 _x,uint256 _y)", type_label=return];
133 [label="20_ function safeDiv(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        assert(_y != 0); \n        uint256 _z = _x / _y;\n        assert(_x == _y * _z + _x % _y); \n        return _z;\n    }\n133-function_definition-21-26", method="safeDiv(uint256 _x,uint256 _y)", type_label=function_definition];
150 [label="21_ assert(_y != 0);\n150-expression_statement-22-22", method="safeDiv(uint256 _x,uint256 _y)", type_label=expression_statement];
157 [label="22_ uint256 _z = _x / _y;\n157-new_variable-23-23", method="safeDiv(uint256 _x,uint256 _y)", type_label=new_variable];
165 [label="23_ assert(_x == _y * _z + _x % _y);\n165-expression_statement-24-24", method="safeDiv(uint256 _x,uint256 _y)", type_label=expression_statement];
178 [label="24_ return _z;\n178-return-25-25", method="safeDiv(uint256 _x,uint256 _y)", type_label=return];
183 [label="28_ address public owner;\n183-new_variable-29-29", method="", type_label=new_variable];
188 [label="29_ function Ownable() public {\n        owner = msg.sender;\n    }\n188-function_definition-30-32", method="Ownable()", type_label=function_definition];
192 [label="30_ owner = msg.sender;\n192-expression_statement-31-31", method="Ownable()", type_label=expression_statement];
198 [label="32_ modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n198-expression_statement-33-36", method="", type_label=expression_statement];
201 [label="33_ require(msg.sender == owner);\n201-expression_statement-34-34", method="", type_label=expression_statement];
210 [label="34_ _;\n210-expression_statement-35-35", method="", type_label=expression_statement];
212 [label="36_ function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n212-function_definition-37-40", method="transferOwnership(address newOwner)", type_label=function_definition];
218 [label="36_ onlyOwner\n218-expression_statement-37-37", method="transferOwnership(address newOwner)", type_label=expression_statement];
222 [label="37_ require(newOwner != address(0));\n222-expression_statement-38-38", method="transferOwnership(address newOwner)", type_label=expression_statement];
231 [label="38_ owner = newOwner;\n231-expression_statement-39-39", method="transferOwnership(address newOwner)", type_label=expression_statement];
238 [label="42_ function balanceOf(address who) public constant returns (uint256);\n238-function_definition-43-43", method="balanceOf(address who)", type_label=function_definition];
245 [label="42_ constant\n245-expression_statement-43-43", method="balanceOf(address who)", type_label=expression_statement];
251 [label="43_ function transfer(address to, uint256 value) public returns (bool);\n251-function_definition-44-44", method="transfer(address to,uint256 value)", type_label=function_definition];
292 [label="47_ bool public transfersEnabled = true;\n292-new_variable-48-48", method="", type_label=new_variable];
299 [label="48_ mapping (address => uint256) public balanceOf;\n299-new_variable-49-49", method="", type_label=new_variable];
306 [label="49_ mapping (address => mapping (address => uint256)) public allowed;\n306-new_variable-50-50", method="", type_label=new_variable];
315 [label="50_ modifier transfersAllowed {\n        assert(transfersEnabled);\n        _;\n    }\n315-expression_statement-51-54", method="", type_label=expression_statement];
318 [label="51_ assert(transfersEnabled);\n318-expression_statement-52-52", method="", type_label=expression_statement];
323 [label="52_ _;\n323-expression_statement-53-53", method="", type_label=expression_statement];
325 [label="54_ function disableTransfers(bool _disable) public onlyOwner {\n        transfersEnabled = !_disable;\n    }\n325-function_definition-55-57", method="disableTransfers(bool _disable)", type_label=function_definition];
332 [label="54_ onlyOwner\n332-expression_statement-55-55", method="disableTransfers(bool _disable)", type_label=expression_statement];
335 [label="55_ transfersEnabled = !_disable;\n335-expression_statement-56-56", method="disableTransfers(bool _disable)", type_label=expression_statement];
340 [label="57_ function transfer(address _to, uint256 _value) public validAddress(_to) transfersAllowed returns (bool success){\n        require(balanceOf[msg.sender] >= _value && balanceOf[_to] + _value > balanceOf[_to]); \n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n340-function_definition-58-64", method="transfer(address _to,uint256 _value)", type_label=function_definition];
351 [label="57_ validAddress(_to)\n351-expression_statement-58-58", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
355 [label="57_ transfersAllowed\n355-expression_statement-58-58", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
363 [label="58_ require(balanceOf[msg.sender] >= _value && balanceOf[_to] + _value > balanceOf[_to]);\n363-expression_statement-59-59", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
384 [label="59_ balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n384-expression_statement-60-60", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
401 [label="60_ balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n401-expression_statement-61-61", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
414 [label="61_ Transfer(msg.sender, _to, _value);\n414-expression_statement-62-62", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
425 [label="62_ return true;\n425-return-63-63", method="transfer(address _to,uint256 _value)", type_label=return];
428 [label="64_ function balanceOf(address _owner) public validAddress(_owner) constant returns (uint256 balance) {\n        return balanceOf[_owner];\n    }\n428-function_definition-65-67", method="balanceOf(address _owner)", type_label=function_definition];
435 [label="64_ validAddress(_owner)\n435-expression_statement-65-65", method="balanceOf(address _owner)", type_label=expression_statement];
439 [label="64_ constant\n439-expression_statement-65-65", method="balanceOf(address _owner)", type_label=expression_statement];
447 [label="65_ return balanceOf[_owner];\n447-return-66-66", method="balanceOf(address _owner)", type_label=return];
457 [label="69_ string public constant name = \"Real Estate Chain\";\n457-new_variable-70-70", method="", type_label=new_variable];
464 [label="70_ string public constant symbol = \"ERCC\";\n464-new_variable-71-71", method="", type_label=new_variable];
471 [label="71_ uint8 public constant decimals = 18;\n471-new_variable-72-72", method="", type_label=new_variable];
477 [label="72_ uint256 public constant totalSupply = 5 * 10**26;\n477-new_variable-73-73", method="", type_label=new_variable];
487 [label="73_ function RCToken(){\n        balanceOf[owner] = totalSupply;\n        Transfer(0x0, owner, balanceOf[owner]);\n    }\n487-function_definition-74-77", method="RCToken()", type_label=function_definition];
490 [label="74_ balanceOf[owner] = totalSupply;\n490-expression_statement-75-75", method="RCToken()", type_label=expression_statement];
496 [label="75_ Transfer(0x0, owner, balanceOf[owner]);\n496-expression_statement-76-76", method="RCToken()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
20 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 56  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
56 -> 63  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
63 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
65 -> 82  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
82 -> 89  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
89 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
93 -> 110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
110 -> 118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
118 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
157 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
188 -> 192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
201 -> 210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
212 -> 222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
222 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
292 -> 299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
299 -> 306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
306 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
325 -> 335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
340 -> 363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
351 -> 355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
414 -> 425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
425 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
428 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
457 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
