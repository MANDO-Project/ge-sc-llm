digraph  {
21 [label="4_ function totalSupply () public view returns (uint256 supply);\n21-function_definition-5-5", method="totalSupply()", type_label=function_definition];
30 [label="5_ function balanceOf (address _owner) public view returns (uint256 balance);\n30-function_definition-6-6", method="balanceOf(address _owner)", type_label=function_definition];
43 [label="6_ function transfer (address _to, uint256 _value)\n  public returns (bool success);\n43-function_definition-7-8", method="transfer(address _to,uint256 _value)", type_label=function_definition];
59 [label="8_ function transferFrom (address _from, address _to, uint256 _value)\n  public returns (bool success);\n59-function_definition-9-10", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
79 [label="10_ function approve (address _spender, uint256 _value)\n  public returns (bool success);\n79-function_definition-11-12", method="approve(address _spender,uint256 _value)", type_label=function_definition];
95 [label="12_ function allowance (address _owner, address _spender)\n  public view returns (uint256 remaining);\n95-function_definition-13-14", method="allowance(address _owner,address _spender)", type_label=function_definition];
147 [label="20_ uint256 constant private MAX_UINT256 =\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n147-new_variable-21-22", method="", type_label=new_variable];
153 [label="22_ function safeAdd (uint256 x, uint256 y)\n  pure internal\n  returns (uint256 z) {\n    assert (x <= MAX_UINT256 - y);\n    return x + y;\n  }\n153-function_definition-23-28", method="safeAdd(uint256 x,uint256 y)", type_label=function_definition];
171 [label="25_ assert (x <= MAX_UINT256 - y);\n171-expression_statement-26-26", method="safeAdd(uint256 x,uint256 y)", type_label=expression_statement];
180 [label="26_ return x + y;\n180-return-27-27", method="safeAdd(uint256 x,uint256 y)", type_label=return];
184 [label="28_ function safeSub (uint256 x, uint256 y)\n  pure internal\n  returns (uint256 z) {\n    assert (x >= y);\n    return x - y;\n  }\n184-function_definition-29-34", method="safeSub(uint256 x,uint256 y)", type_label=function_definition];
202 [label="31_ assert (x >= y);\n202-expression_statement-32-32", method="safeSub(uint256 x,uint256 y)", type_label=expression_statement];
209 [label="32_ return x - y;\n209-return-33-33", method="safeSub(uint256 x,uint256 y)", type_label=return];
213 [label="34_ function safeMul (uint256 x, uint256 y)\n  pure internal\n  returns (uint256 z) {\n    if (y == 0) return 0;  \n    assert (x <= MAX_UINT256 / y);\n    return x * y;\n  }\n213-function_definition-35-41", method="safeMul(uint256 x,uint256 y)", type_label=function_definition];
231 [label="37_ if_y == 0\n231-if-38-38", method="safeMul(uint256 x,uint256 y)", type_label=if];
1069 [label="37_ end_if", method="safeMul(uint256 x,uint256 y)", type_label=end_if];
235 [label="37_ return 0;\n235-return-38-38", method="safeMul(uint256 x,uint256 y)", type_label=return];
237 [label="38_ assert (x <= MAX_UINT256 / y);\n237-expression_statement-39-39", method="safeMul(uint256 x,uint256 y)", type_label=expression_statement];
246 [label="39_ return x * y;\n246-return-40-40", method="safeMul(uint256 x,uint256 y)", type_label=return];
259 [label="43_ function AbstractToken () public {\n  }\n259-function_definition-44-45", method="AbstractToken()", type_label=function_definition];
263 [label="45_ function balanceOf (address _owner) public view returns (uint256 balance) {\n    return accounts [_owner];\n  }\n263-function_definition-46-48", method="balanceOf(address _owner)", type_label=function_definition];
277 [label="46_ return accounts [_owner];\n277-return-47-47", method="balanceOf(address _owner)", type_label=return];
281 [label="48_ function transfer (address _to, uint256 _value)\n  public returns (bool success) {\n    uint256 fromBalance = accounts [msg.sender];\n    if (fromBalance < _value) return false;\n    if (_value > 0 && msg.sender != _to) {\n      accounts [msg.sender] = safeSub (fromBalance, _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    Transfer (msg.sender, _to, _value);\n    return true;\n  }\n281-function_definition-49-59", method="transfer(address _to,uint256 _value)", type_label=function_definition];
298 [label="50_ uint256 fromBalance = accounts [msg.sender];\n298-new_variable-51-51", method="transfer(address _to,uint256 _value)", type_label=new_variable];
308 [label="51_ if_fromBalance < _value\n308-if-52-52", method="transfer(address _to,uint256 _value)", type_label=if];
1146 [label="51_ end_if", method="transfer(address _to,uint256 _value)", type_label=end_if];
312 [label="51_ return false;\n312-return-52-52", method="transfer(address _to,uint256 _value)", type_label=return];
315 [label="52_ if__value > 0 && msg.sender != _to\n315-if-53-56", method="transfer(address _to,uint256 _value)", type_label=if];
1153 [label="52_ end_if", method="transfer(address _to,uint256 _value)", type_label=end_if];
326 [label="53_ accounts [msg.sender] = safeSub (fromBalance, _value);\n326-expression_statement-54-54", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
339 [label="54_ accounts [_to] = safeAdd (accounts [_to], _value);\n339-expression_statement-55-55", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
352 [label="56_ Transfer (msg.sender, _to, _value);\n352-expression_statement-57-57", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
363 [label="57_ return true;\n363-return-58-58", method="transfer(address _to,uint256 _value)", type_label=return];
366 [label="59_ function transferFrom (address _from, address _to, uint256 _value)\n  public returns (bool success) {\n    uint256 spenderAllowance = allowances [_from][msg.sender];\n    if (spenderAllowance < _value) return false;\n    uint256 fromBalance = accounts [_from];\n    if (fromBalance < _value) return false;\n    allowances [_from][msg.sender] =\n      safeSub (spenderAllowance, _value);\n    if (_value > 0 && _from != _to) {\n      accounts [_from] = safeSub (fromBalance, _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    Transfer (_from, _to, _value);\n    return true;\n  }\n366-function_definition-60-74", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
387 [label="61_ uint256 spenderAllowance = allowances [_from][msg.sender];\n387-new_variable-62-62", method="transferFrom(address _from,address _to,uint256 _value)", type_label=new_variable];
399 [label="62_ if_spenderAllowance < _value\n399-if-63-63", method="transferFrom(address _from,address _to,uint256 _value)", type_label=if];
1237 [label="62_ end_if", method="transferFrom(address _from,address _to,uint256 _value)", type_label=end_if];
403 [label="62_ return false;\n403-return-63-63", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
406 [label="63_ uint256 fromBalance = accounts [_from];\n406-new_variable-64-64", method="transferFrom(address _from,address _to,uint256 _value)", type_label=new_variable];
414 [label="64_ if_fromBalance < _value\n414-if-65-65", method="transferFrom(address _from,address _to,uint256 _value)", type_label=if];
1252 [label="64_ end_if", method="transferFrom(address _from,address _to,uint256 _value)", type_label=end_if];
418 [label="64_ return false;\n418-return-65-65", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
421 [label="65_ allowances [_from][msg.sender] =\n      safeSub (spenderAllowance, _value);\n421-expression_statement-66-67", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
436 [label="67_ if__value > 0 && _from != _to\n436-if-68-71", method="transferFrom(address _from,address _to,uint256 _value)", type_label=if];
1274 [label="67_ end_if", method="transferFrom(address _from,address _to,uint256 _value)", type_label=end_if];
445 [label="68_ accounts [_from] = safeSub (fromBalance, _value);\n445-expression_statement-69-69", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
456 [label="69_ accounts [_to] = safeAdd (accounts [_to], _value);\n456-expression_statement-70-70", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
469 [label="71_ Transfer (_from, _to, _value);\n469-expression_statement-72-72", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
478 [label="72_ return true;\n478-return-73-73", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
481 [label="74_ function approve (address _spender, uint256 _value)\n  public returns (bool success) {\n    allowances [msg.sender][_spender] = _value;\n    Approval (msg.sender, _spender, _value);\n    return true;\n  }\n481-function_definition-75-80", method="approve(address _spender,uint256 _value)", type_label=function_definition];
498 [label="76_ allowances [msg.sender][_spender] = _value;\n498-expression_statement-77-77", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
508 [label="77_ Approval (msg.sender, _spender, _value);\n508-expression_statement-78-78", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
519 [label="78_ return true;\n519-return-79-79", method="approve(address _spender,uint256 _value)", type_label=return];
522 [label="80_ function allowance (address _owner, address _spender)\n  public view returns (uint256 remaining) {\n    return allowances [_owner][_spender];\n  }\n522-function_definition-81-84", method="allowance(address _owner,address _spender)", type_label=function_definition];
540 [label="82_ return allowances [_owner][_spender];\n540-return-83-83", method="allowance(address _owner,address _spender)", type_label=return];
546 [label="84_ mapping (address => uint256) internal accounts;\n546-new_variable-85-85", method="", type_label=new_variable];
553 [label="85_ mapping (address => mapping (address => uint256)) internal allowances;\n553-new_variable-86-86", method="", type_label=new_variable];
568 [label="88_ address private owner;\n568-new_variable-89-89", method="", type_label=new_variable];
573 [label="89_ uint256 tokenCount;\n573-new_variable-90-90", method="", type_label=new_variable];
577 [label="90_ bool frozen = false;\n577-new_variable-91-91", method="", type_label=new_variable];
583 [label="91_ function DroidEIP20Token (uint256 _tokenCount) public {\n    owner = msg.sender;\n    tokenCount = _tokenCount;\n    accounts [msg.sender] = _tokenCount;\n  }\n583-function_definition-92-96", method="DroidEIP20Token(uint256 _tokenCount)", type_label=function_definition];
591 [label="92_ owner = msg.sender;\n591-expression_statement-93-93", method="DroidEIP20Token(uint256 _tokenCount)", type_label=expression_statement];
597 [label="93_ tokenCount = _tokenCount;\n597-expression_statement-94-94", method="DroidEIP20Token(uint256 _tokenCount)", type_label=expression_statement];
601 [label="94_ accounts [msg.sender] = _tokenCount;\n601-expression_statement-95-95", method="DroidEIP20Token(uint256 _tokenCount)", type_label=expression_statement];
609 [label="96_ function totalSupply () public view returns (uint256 supply) {\n    return tokenCount;\n  }\n609-function_definition-97-99", method="totalSupply()", type_label=function_definition];
619 [label="97_ return tokenCount;\n619-return-98-98", method="totalSupply()", type_label=return];
621 [label="99_ function name () public pure returns (string result) {\n    return \"Droid\";\n  }\n621-function_definition-100-102", method="name()", type_label=function_definition];
631 [label="100_ return \"Droid\";\n631-return-101-101", method="name()", type_label=return];
634 [label="102_ function symbol () public pure returns (string result) {\n    return \"Droid\";\n  }\n634-function_definition-103-105", method="symbol()", type_label=function_definition];
644 [label="103_ return \"Droid\";\n644-return-104-104", method="symbol()", type_label=return];
647 [label="105_ function decimals () public pure returns (uint8 result) {\n    return 8;\n  }\n647-function_definition-106-108", method="decimals()", type_label=function_definition];
657 [label="106_ return 8;\n657-return-107-107", method="decimals()", type_label=return];
659 [label="108_ function transfer (address _to, uint256 _value)\n    public returns (bool success) {\n    if (frozen) return false;\n    else return AbstractToken.transfer (_to, _value);\n  }\n659-function_definition-109-113", method="transfer(address _to,uint256 _value)", type_label=function_definition];
676 [label="110_ if\n676-if-111-112", method="transfer(address _to,uint256 _value)", type_label=if];
1514 [label="110_ end_if", method="transfer(address _to,uint256 _value)", type_label=end_if];
678 [label="110_ return false;\n678-return-111-111", method="transfer(address _to,uint256 _value)", type_label=return];
681 [label="111_ return AbstractToken.transfer (_to, _value);\n681-return-112-112", method="transfer(address _to,uint256 _value)", type_label=return];
690 [label="113_ function transferFrom (address _from, address _to, uint256 _value)\n    public returns (bool success) {\n    if (frozen) return false;\n    else return AbstractToken.transferFrom (_from, _to, _value);\n  }\n690-function_definition-114-118", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
711 [label="115_ if\n711-if-116-117", method="transferFrom(address _from,address _to,uint256 _value)", type_label=if];
1549 [label="115_ end_if", method="transferFrom(address _from,address _to,uint256 _value)", type_label=end_if];
713 [label="115_ return false;\n713-return-116-116", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
716 [label="116_ return AbstractToken.transferFrom (_from, _to, _value);\n716-return-117-117", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
727 [label="118_ function approve (address _spender, uint256 _currentValue, uint256 _newValue)\n    public returns (bool success) {\n    if (allowance (msg.sender, _spender) == _currentValue)\n      return approve (_spender, _newValue);\n    else return false;\n  }\n727-function_definition-119-124", method="approve(address _spender,uint256 _currentValue,uint256 _newValue)", type_label=function_definition];
748 [label="120_ if_allowance (msg.sender, _spender) == _currentValue\n748-if-121-123", method="approve(address _spender,uint256 _currentValue,uint256 _newValue)", type_label=if];
1586 [label="120_ end_if", method="approve(address _spender,uint256 _currentValue,uint256 _newValue)", type_label=end_if];
759 [label="121_ return approve (_spender, _newValue);\n759-return-122-122", method="approve(address _spender,uint256 _currentValue,uint256 _newValue)", type_label=return];
766 [label="122_ return false;\n766-return-123-123", method="approve(address _spender,uint256 _currentValue,uint256 _newValue)", type_label=return];
769 [label="124_ function setOwner (address _newOwner) public {\n    require (msg.sender == owner);\n    owner = _newOwner;\n  }\n769-function_definition-125-128", method="setOwner(address _newOwner)", type_label=function_definition];
777 [label="125_ require (msg.sender == owner);\n777-expression_statement-126-126", method="setOwner(address _newOwner)", type_label=expression_statement];
786 [label="126_ owner = _newOwner;\n786-expression_statement-127-127", method="setOwner(address _newOwner)", type_label=expression_statement];
790 [label="128_ function freezeTransfers () public {\n    require (msg.sender == owner);\n    if (!frozen) {\n      frozen = true;\n      Freeze ();\n    }\n  }\n790-function_definition-129-135", method="freezeTransfers()", type_label=function_definition];
794 [label="129_ require (msg.sender == owner);\n794-expression_statement-130-130", method="freezeTransfers()", type_label=expression_statement];
803 [label="130_ if\n803-if-131-134", method="freezeTransfers()", type_label=if];
1641 [label="130_ end_if", method="freezeTransfers()", type_label=end_if];
807 [label="131_ frozen = true;\n807-expression_statement-132-132", method="freezeTransfers()", type_label=expression_statement];
812 [label="132_ Freeze ();\n812-expression_statement-133-133", method="freezeTransfers()", type_label=expression_statement];
815 [label="135_ function unfreezeTransfers () public {\n    require (msg.sender == owner);\n    if (frozen) {\n      frozen = false;\n      Unfreeze ();\n    }\n  }\n815-function_definition-136-142", method="unfreezeTransfers()", type_label=function_definition];
819 [label="136_ require (msg.sender == owner);\n819-expression_statement-137-137", method="unfreezeTransfers()", type_label=expression_statement];
828 [label="137_ if\n828-if-138-141", method="unfreezeTransfers()", type_label=if];
1666 [label="137_ end_if", method="unfreezeTransfers()", type_label=end_if];
831 [label="138_ frozen = false;\n831-expression_statement-139-139", method="unfreezeTransfers()", type_label=expression_statement];
836 [label="139_ Unfreeze ();\n836-expression_statement-140-140", method="unfreezeTransfers()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
682;
717;
767;
839;
153 -> 171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
171 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
184 -> 202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
202 -> 209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
209 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
213 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 235  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
231 -> 1069  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1069 -> 237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
235 -> 1069  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
235 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
237 -> 246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
246 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
263 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
281 -> 298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
308 -> 312  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
308 -> 1146  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1146 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
312 -> 1146  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
312 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
315 -> 326  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
315 -> 1153  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1153 -> 352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
326 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 1153  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
352 -> 363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
366 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
399 -> 403  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
399 -> 1237  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1237 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 1237  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
403 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
406 -> 414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
414 -> 418  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
414 -> 1252  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1252 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 1252  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
418 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
421 -> 436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 445  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
436 -> 1274  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1274 -> 469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
456 -> 1274  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
469 -> 478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
478 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
481 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
508 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
522 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
546 -> 553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
573 -> 577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
583 -> 591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
591 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
609 -> 619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
619 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
621 -> 631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
631 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
634 -> 644  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
644 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
647 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
659 -> 676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
676 -> 678  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
676 -> 681  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1514 -> 690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 1514  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
678 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
681 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
690 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
711 -> 713  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
711 -> 716  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1549 -> 727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
713 -> 1549  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
713 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
716 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
727 -> 748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
748 -> 759  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
748 -> 766  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1586 -> 769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
759 -> 1586  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
759 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
766 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
769 -> 777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
777 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
790 -> 794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
794 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 807  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
803 -> 1641  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1641 -> 815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
812 -> 1641  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
815 -> 819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
819 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 831  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
828 -> 1666  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1666 -> 839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
831 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 1666  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
682 -> 1514  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
717 -> 1549  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
767 -> 1586  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
