digraph  {
13 [label="2_ address private Owner;\n13-new_variable-3-3", method="", type_label=new_variable];
18 [label="3_ function IsOwner(address addr) view public returns(bool)\n	{\n	    return Owner == addr;\n	}\n18-function_definition-4-7", method="IsOwner(address addr)", type_label=function_definition];
31 [label="5_ return Owner == addr;\n31-return-6-6", method="IsOwner(address addr)", type_label=return];
35 [label="7_ function TransferOwner(address newOwner) public onlyOwner\n	{\n	    Owner = newOwner;\n	}\n35-function_definition-8-11", method="TransferOwner(address newOwner)", type_label=function_definition];
42 [label="7_ onlyOwner\n42-expression_statement-8-8", method="TransferOwner(address newOwner)", type_label=expression_statement];
45 [label="9_ Owner = newOwner;\n45-expression_statement-10-10", method="TransferOwner(address newOwner)", type_label=expression_statement];
49 [label="11_ function EtherealFoundationOwned() public\n	{\n	    Owner = msg.sender;\n	}\n49-function_definition-12-15", method="EtherealFoundationOwned()", type_label=function_definition];
53 [label="13_ Owner = msg.sender;\n53-expression_statement-14-14", method="EtherealFoundationOwned()", type_label=expression_statement];
59 [label="15_ function Terminate() public onlyOwner\n	{\n	    selfdestruct(Owner);\n	}\n59-function_definition-16-19", method="Terminate()", type_label=function_definition];
62 [label="15_ onlyOwner\n62-expression_statement-16-16", method="Terminate()", type_label=expression_statement];
65 [label="17_ selfdestruct(Owner);\n65-expression_statement-18-18", method="Terminate()", type_label=expression_statement];
70 [label="19_ modifier onlyOwner(){\n        require(msg.sender == Owner);\n        _;\n    }\n70-expression_statement-20-23", method="", type_label=expression_statement];
73 [label="20_ require(msg.sender == Owner);\n73-expression_statement-21-21", method="", type_label=expression_statement];
82 [label="21_ _;\n82-expression_statement-22-22", method="", type_label=expression_statement];
90 [label="25_ string public constant CONTRACT_NAME = \"EtherealTipJar\";\n90-new_variable-26-26", method="", type_label=new_variable];
97 [label="26_ string public constant CONTRACT_VERSION = \"A\";\n97-new_variable-27-27", method="", type_label=new_variable];
104 [label="27_ string public constant QUOTE = \"'The universe never did make sense; I suspect it was built on government contract.' -Robert A. Heinlein\";\n104-new_variable-28-28", method="", type_label=new_variable];
125 [label="30_ RecievedTip(msg.sender, msg.value);\n125-expression_statement-31-31", method="", type_label=expression_statement];
146 [label="33_ function TransferEth(address to, uint256 value) public onlyOwner{\n	    require(this.balance >= value);\n        if(value > 0)\n		{\n			to.transfer(value);\n			TransferedEth(to, value);\n		}   \n	}\n146-function_definition-34-41", method="TransferEth(address to,uint256 value)", type_label=function_definition];
157 [label="33_ onlyOwner\n157-expression_statement-34-34", method="TransferEth(address to,uint256 value)", type_label=expression_statement];
160 [label="34_ require(this.balance >= value);\n160-expression_statement-35-35", method="TransferEth(address to,uint256 value)", type_label=expression_statement];
169 [label="35_ if_value > 0\n169-if-36-40", method="TransferEth(address to,uint256 value)", type_label=if];
352 [label="35_ end_if", method="TransferEth(address to,uint256 value)", type_label=end_if];
174 [label="37_ to.transfer(value);\n174-expression_statement-38-38", method="TransferEth(address to,uint256 value)", type_label=expression_statement];
181 [label="38_ TransferedEth(to, value);\n181-expression_statement-39-39", method="TransferEth(address to,uint256 value)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
18 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
35 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
49 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
59 -> 65  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 82  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
90 -> 97  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
97 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
169 -> 174  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
169 -> 352  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
352 -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 352  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
