digraph  {
13 [label="2_ function transfer(address receiver, uint amount) public;\n13-function_definition-3-3", method="transfer(address receiver,uint amount)", type_label=function_definition];
27 [label="5_ Token public tokenReward;\n27-new_variable-6-6", method="", type_label=new_variable];
33 [label="6_ address creator;\n33-new_variable-7-7", method="", type_label=new_variable];
37 [label="7_ address owner = 0x81Ae4b8A213F3933B0bE3bF25d13A3646F293A64;\n37-new_variable-8-8", method="", type_label=new_variable];
42 [label="8_ uint256 public startDate;\n42-new_variable-9-9", method="", type_label=new_variable];
47 [label="9_ uint256 public endDate;\n47-new_variable-10-10", method="", type_label=new_variable];
52 [label="10_ uint256 public price;\n52-new_variable-11-11", method="", type_label=new_variable];
57 [label="11_ uint256 public tokenSelled = 0;\n57-new_variable-12-12", method="", type_label=new_variable];
77 [label="13_ function CELLCrowdsale() public {\n        creator = msg.sender;\n        startDate = 1515974400;          \n        price = 500;\n        tokenReward = Token(0xC42de4250cA009C767818eC6f8fb1eacBa859f38);\n    }\n77-function_definition-14-19", method="CELLCrowdsale()", type_label=function_definition];
81 [label="14_ creator = msg.sender;\n81-expression_statement-15-15", method="CELLCrowdsale()", type_label=expression_statement];
87 [label="15_ startDate = 1515974400;\n87-expression_statement-16-16", method="CELLCrowdsale()", type_label=expression_statement];
91 [label="16_ price = 500;\n91-expression_statement-17-17", method="CELLCrowdsale()", type_label=expression_statement];
95 [label="17_ tokenReward = Token(0xC42de4250cA009C767818eC6f8fb1eacBa859f38);\n95-expression_statement-18-18", method="CELLCrowdsale()", type_label=expression_statement];
102 [label="19_ function setOwner(address _owner) public {\n        require(msg.sender == creator);\n        owner = _owner;      \n    }\n102-function_definition-20-23", method="setOwner(address _owner)", type_label=function_definition];
110 [label="20_ require(msg.sender == creator);\n110-expression_statement-21-21", method="setOwner(address _owner)", type_label=expression_statement];
119 [label="21_ owner = _owner;\n119-expression_statement-22-22", method="setOwner(address _owner)", type_label=expression_statement];
123 [label="23_ function setCreator(address _creator) public {\n        require(msg.sender == creator);\n        creator = _creator;      \n    }\n123-function_definition-24-27", method="setCreator(address _creator)", type_label=function_definition];
131 [label="24_ require(msg.sender == creator);\n131-expression_statement-25-25", method="setCreator(address _creator)", type_label=expression_statement];
140 [label="25_ creator = _creator;\n140-expression_statement-26-26", method="setCreator(address _creator)", type_label=expression_statement];
144 [label="27_ function setStartDate(uint256 _startDate) public {\n        require(msg.sender == creator);\n        startDate = _startDate;      \n    }\n144-function_definition-28-31", method="setStartDate(uint256 _startDate)", type_label=function_definition];
152 [label="28_ require(msg.sender == creator);\n152-expression_statement-29-29", method="setStartDate(uint256 _startDate)", type_label=expression_statement];
161 [label="29_ startDate = _startDate;\n161-expression_statement-30-30", method="setStartDate(uint256 _startDate)", type_label=expression_statement];
165 [label="31_ function setEndDate(uint256 _endDate) public {\n        require(msg.sender == creator);\n        endDate = _endDate;      \n    }\n165-function_definition-32-35", method="setEndDate(uint256 _endDate)", type_label=function_definition];
173 [label="32_ require(msg.sender == creator);\n173-expression_statement-33-33", method="setEndDate(uint256 _endDate)", type_label=expression_statement];
182 [label="33_ endDate = _endDate;\n182-expression_statement-34-34", method="setEndDate(uint256 _endDate)", type_label=expression_statement];
186 [label="35_ function setPrice(uint256 _price) public {\n        require(msg.sender == creator);\n        price = _price;      \n    }\n186-function_definition-36-39", method="setPrice(uint256 _price)", type_label=function_definition];
194 [label="36_ require(msg.sender == creator);\n194-expression_statement-37-37", method="setPrice(uint256 _price)", type_label=expression_statement];
203 [label="37_ price = _price;\n203-expression_statement-38-38", method="setPrice(uint256 _price)", type_label=expression_statement];
207 [label="39_ function sendToken(address receiver, uint amount) public {\n        require(msg.sender == creator);\n        tokenReward.transfer(receiver, amount);\n        FundTransfer(receiver, amount, true);    \n    }\n207-function_definition-40-44", method="sendToken(address receiver,uint amount)", type_label=function_definition];
219 [label="40_ require(msg.sender == creator);\n219-expression_statement-41-41", method="sendToken(address receiver,uint amount)", type_label=expression_statement];
228 [label="41_ tokenReward.transfer(receiver, amount);\n228-expression_statement-42-42", method="sendToken(address receiver,uint amount)", type_label=expression_statement];
237 [label="42_ FundTransfer(receiver, amount, true);\n237-expression_statement-43-43", method="sendToken(address receiver,uint amount)", type_label=expression_statement];
251 [label="45_ require(msg.value > 0);\n251-expression_statement-46-46", method="", type_label=expression_statement];
260 [label="46_ require(now > startDate);\n260-expression_statement-47-47", method="", type_label=expression_statement];
267 [label="47_ require(tokenSelled < 100000001);\n267-expression_statement-48-48", method="", type_label=expression_statement];
274 [label="48_ uint amount = msg.value / 10 finney;\n274-new_variable-49-49", method="", type_label=new_variable];
285 [label="49_ require(amount > 5);\n285-expression_statement-50-50", method="", type_label=expression_statement];
292 [label="50_ uint amount20;\n292-new_variable-51-51", method="", type_label=new_variable];
297 [label="51_ if_now > startDate && now < 1518480000\n297-if-52-57", method="", type_label=if];
752 [label="51_ end_if", method="", type_label=end_if];
306 [label="52_ price = 700;\n306-expression_statement-53-53", method="", type_label=expression_statement];
310 [label="53_ amount *= price * 100;\n310-expression_statement-54-54", method="", type_label=expression_statement];
316 [label="54_ amount20 = amount / 20;\n316-expression_statement-55-55", method="", type_label=expression_statement];
322 [label="55_ amount += amount20 * 8;\n322-expression_statement-56-56", method="", type_label=expression_statement];
328 [label="57_ if_now > 1518480000 && now < 1519084800\n328-if-58-62", method="", type_label=if];
783 [label="57_ end_if", method="", type_label=end_if];
337 [label="58_ price = 625;\n337-expression_statement-59-59", method="", type_label=expression_statement];
341 [label="59_ amount *= price * 100;\n341-expression_statement-60-60", method="", type_label=expression_statement];
347 [label="60_ amount += amount / 4;\n347-expression_statement-61-61", method="", type_label=expression_statement];
353 [label="62_ if_now > 1519084800 && now < 1519689600\n353-if-63-68", method="", type_label=if];
808 [label="62_ end_if", method="", type_label=end_if];
362 [label="63_ price = 575;\n362-expression_statement-64-64", method="", type_label=expression_statement];
366 [label="64_ amount *= price * 100;\n366-expression_statement-65-65", method="", type_label=expression_statement];
372 [label="65_ amount20 = amount / 20;\n372-expression_statement-66-66", method="", type_label=expression_statement];
378 [label="66_ amount += amount20 * 3;\n378-expression_statement-67-67", method="", type_label=expression_statement];
384 [label="68_ if_now > 1519689600 && now < 1520294400\n384-if-69-73", method="", type_label=if];
839 [label="68_ end_if", method="", type_label=end_if];
393 [label="69_ price = 550;\n393-expression_statement-70-70", method="", type_label=expression_statement];
397 [label="70_ amount *= price * 100;\n397-expression_statement-71-71", method="", type_label=expression_statement];
403 [label="71_ amount += amount / 10;\n403-expression_statement-72-72", method="", type_label=expression_statement];
409 [label="73_ if_now > 1520294400\n409-if-74-77", method="", type_label=if];
864 [label="73_ end_if", method="", type_label=end_if];
414 [label="74_ price = 500;\n414-expression_statement-75-75", method="", type_label=expression_statement];
418 [label="75_ amount *= price * 100;\n418-expression_statement-76-76", method="", type_label=expression_statement];
424 [label="77_ tokenSelled += amount;\n424-expression_statement-78-78", method="", type_label=expression_statement];
428 [label="78_ tokenReward.transfer(msg.sender, amount);\n428-expression_statement-79-79", method="", type_label=expression_statement];
439 [label="79_ FundTransfer(msg.sender, amount, true);\n439-expression_statement-80-80", method="", type_label=expression_statement];
451 [label="80_ owner.transfer(msg.value);\n451-expression_statement-81-81", method="", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
27 -> 33  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
33 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
37 -> 42  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
42 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 52  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
52 -> 57  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 87  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 91  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
91 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
102 -> 110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
110 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
123 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
144 -> 152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
152 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
186 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
194 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
219 -> 228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
228 -> 237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
260 -> 267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
267 -> 274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
274 -> 285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
285 -> 292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
292 -> 297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
297 -> 306  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
297 -> 752  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
752 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
306 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
316 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 752  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
328 -> 337  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
328 -> 783  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
783 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
337 -> 341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
341 -> 347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
347 -> 783  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
353 -> 362  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
353 -> 808  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
808 -> 384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
362 -> 366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
372 -> 378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 808  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
384 -> 393  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
384 -> 839  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
839 -> 409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 839  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
409 -> 414  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
409 -> 864  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
864 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
414 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 864  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
424 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
