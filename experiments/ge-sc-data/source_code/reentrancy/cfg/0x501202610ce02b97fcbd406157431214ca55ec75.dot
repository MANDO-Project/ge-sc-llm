digraph  {
12 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n12-function_definition-3-7", method="mul(uint256 a,uint256 b)", type_label=function_definition];
29 [label="3_ uint256 c = a * b;\n29-new_variable-4-4", method="mul(uint256 a,uint256 b)", type_label=new_variable];
37 [label="4_ assert(a == 0 || c / a == b);\n37-expression_statement-5-5", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
50 [label="5_ return c;\n50-return-6-6", method="mul(uint256 a,uint256 b)", type_label=return];
52 [label="7_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n52-function_definition-8-11", method="div(uint256 a,uint256 b)", type_label=function_definition];
69 [label="8_ uint256 c = a / b;\n69-new_variable-9-9", method="div(uint256 a,uint256 b)", type_label=new_variable];
77 [label="9_ return c;\n77-return-10-10", method="div(uint256 a,uint256 b)", type_label=return];
79 [label="11_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n79-function_definition-12-15", method="sub(uint256 a,uint256 b)", type_label=function_definition];
96 [label="12_ assert(b <= a);\n96-expression_statement-13-13", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
103 [label="13_ return a - b;\n103-return-14-14", method="sub(uint256 a,uint256 b)", type_label=return];
107 [label="15_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n107-function_definition-16-20", method="add(uint256 a,uint256 b)", type_label=function_definition];
124 [label="16_ uint256 c = a + b;\n124-new_variable-17-17", method="add(uint256 a,uint256 b)", type_label=new_variable];
132 [label="17_ assert(c >= a);\n132-expression_statement-18-18", method="add(uint256 a,uint256 b)", type_label=expression_statement];
139 [label="18_ return c;\n139-return-19-19", method="add(uint256 a,uint256 b)", type_label=return];
144 [label="22_ uint256 public totalSupply;\n144-new_variable-23-23", method="", type_label=new_variable];
149 [label="23_ function balanceOf(address who) public constant returns (uint256);\n149-function_definition-24-24", method="balanceOf(address who)", type_label=function_definition];
156 [label="23_ constant\n156-expression_statement-24-24", method="balanceOf(address who)", type_label=expression_statement];
162 [label="24_ function transfer(address to, uint256 value) public returns (bool);\n162-function_definition-25-25", method="transfer(address to,uint256 value)", type_label=function_definition];
197 [label="28_ function allowance(address owner, address spender) public constant returns (uint256);\n197-function_definition-29-29", method="allowance(address owner,address spender)", type_label=function_definition];
208 [label="28_ constant\n208-expression_statement-29-29", method="allowance(address owner,address spender)", type_label=expression_statement];
214 [label="29_ function transferFrom(address from, address to, uint256 value) public returns (bool);\n214-function_definition-30-30", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
233 [label="30_ function approve(address spender, uint256 value) public returns (bool);\n233-function_definition-31-31", method="approve(address spender,uint256 value)", type_label=function_definition];
273 [label="35_ mapping(address => uint256) balances;\n273-new_variable-36-36", method="", type_label=new_variable];
279 [label="36_ function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n279-function_definition-37-44", method="transfer(address _to,uint256 _value)", type_label=function_definition];
295 [label="37_ require(_to != address(0));\n295-expression_statement-38-38", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
304 [label="38_ require(_value <= balances[msg.sender]);\n304-expression_statement-39-39", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
315 [label="39_ balances[msg.sender] = balances[msg.sender].sub(_value);\n315-expression_statement-40-40", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
332 [label="40_ balances[_to] = balances[_to].add(_value);\n332-expression_statement-41-41", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
355 [label="42_ return true;\n355-return-43-43", method="transfer(address _to,uint256 _value)", type_label=return];
358 [label="44_ function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n358-function_definition-45-47", method="balanceOf(address _owner)", type_label=function_definition];
365 [label="44_ constant\n365-expression_statement-45-45", method="balanceOf(address _owner)", type_label=expression_statement];
373 [label="45_ return balances[_owner];\n373-return-46-46", method="balanceOf(address _owner)", type_label=return];
386 [label="49_ mapping (address => mapping (address => uint256)) internal allowed;\n386-new_variable-50-50", method="", type_label=new_variable];
395 [label="50_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n395-function_definition-51-60", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
415 [label="51_ require(_to != address(0));\n415-expression_statement-52-52", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
424 [label="52_ require(_value <= balances[_from]);\n424-expression_statement-53-53", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
433 [label="53_ require(_value <= allowed[_from][msg.sender]);\n433-expression_statement-54-54", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
446 [label="54_ balances[_from] = balances[_from].sub(_value);\n446-expression_statement-55-55", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
459 [label="55_ balances[_to] = balances[_to].add(_value);\n459-expression_statement-56-56", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
472 [label="56_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n472-expression_statement-57-57", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
501 [label="58_ return true;\n501-return-59-59", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
504 [label="60_ function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n504-function_definition-61-65", method="approve(address _spender,uint256 _value)", type_label=function_definition];
520 [label="61_ allowed[msg.sender][_spender] = _value;\n520-expression_statement-62-62", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
540 [label="63_ return true;\n540-return-64-64", method="approve(address _spender,uint256 _value)", type_label=return];
543 [label="65_ function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n543-function_definition-66-68", method="allowance(address _owner,address _spender)", type_label=function_definition];
554 [label="65_ constant\n554-expression_statement-66-66", method="allowance(address _owner,address _spender)", type_label=expression_statement];
562 [label="66_ return allowed[_owner][_spender];\n562-return-67-67", method="allowance(address _owner,address _spender)", type_label=return];
568 [label="68_ function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n568-function_definition-69-73", method="increaseApproval(address _spender,uint _addedValue)", type_label=function_definition];
585 [label="69_ allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n585-expression_statement-70-70", method="increaseApproval(address _spender,uint _addedValue)", type_label=expression_statement];
622 [label="71_ return true;\n622-return-72-72", method="increaseApproval(address _spender,uint _addedValue)", type_label=return];
625 [label="73_ function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n625-function_definition-74-83", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=function_definition];
642 [label="74_ uint oldValue = allowed[msg.sender][_spender];\n642-new_variable-75-75", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=new_variable];
654 [label="75_ if__subtractedValue > oldValue\n654-if-76-80", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=if];
1461 [label="75_ end_if", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=end_if];
659 [label="76_ allowed[msg.sender][_spender] = 0;\n659-expression_statement-77-77", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=expression_statement];
670 [label="78_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n670-expression_statement-79-79", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=expression_statement];
701 [label="81_ return true;\n701-return-82-82", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=return];
707 [label="85_ address public owner;\n707-new_variable-86-86", method="", type_label=new_variable];
714 [label="87_ owner = msg.sender;\n714-expression_statement-88-88", method="", type_label=expression_statement];
720 [label="89_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n720-expression_statement-90-93", method="", type_label=expression_statement];
723 [label="90_ require(msg.sender == owner);\n723-expression_statement-91-91", method="", type_label=expression_statement];
732 [label="91_ _;\n732-expression_statement-92-92", method="", type_label=expression_statement];
734 [label="93_ function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0)); \n    owner = newOwner;\n  }\n734-function_definition-94-97", method="transferOwnership(address newOwner)", type_label=function_definition];
741 [label="93_ onlyOwner\n741-expression_statement-94-94", method="transferOwnership(address newOwner)", type_label=expression_statement];
744 [label="94_ require(newOwner != address(0));\n744-expression_statement-95-95", method="transferOwnership(address newOwner)", type_label=expression_statement];
753 [label="95_ owner = newOwner;\n753-expression_statement-96-96", method="transferOwnership(address newOwner)", type_label=expression_statement];
766 [label="100_ string public name = \"VIR\";\n766-new_variable-101-101", method="", type_label=new_variable];
773 [label="101_ string public symbol = \"Virtual Reality Token\";\n773-new_variable-102-102", method="", type_label=new_variable];
780 [label="102_ uint public decimals = 18;\n780-new_variable-103-103", method="", type_label=new_variable];
786 [label="103_ uint private constant initialSupply = 25e9 * 1e18;\n786-new_variable-104-104", method="", type_label=new_variable];
796 [label="106_ owner = msg.sender;\n796-expression_statement-107-107", method="", type_label=expression_statement];
802 [label="107_ totalSupply = initialSupply;\n802-expression_statement-108-108", method="", type_label=expression_statement];
806 [label="108_ balances[owner] = initialSupply;\n806-expression_statement-109-109", method="", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
685;
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
37 -> 50  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
50 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
52 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
69 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
79 -> 96  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
96 -> 103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
103 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
107 -> 124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
124 -> 132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
132 -> 139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
279 -> 295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
315 -> 332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
358 -> 373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
373 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
395 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
459 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
504 -> 520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
543 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
562 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
568 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
622 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
625 -> 642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
642 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
654 -> 659  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
654 -> 670  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1461 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
659 -> 1461  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
670 -> 1461  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
701 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
723 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
734 -> 744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
744 -> 753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
766 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
796 -> 802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
