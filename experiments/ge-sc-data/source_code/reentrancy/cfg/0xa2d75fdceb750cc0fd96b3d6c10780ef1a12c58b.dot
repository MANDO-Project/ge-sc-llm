digraph  {
12 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n12-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
29 [label="3_ if_a == 0\n29-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
1229 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
34 [label="4_ return 0;\n34-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
36 [label="6_ uint256 c = a * b;\n36-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
44 [label="7_ assert(c / a == b);\n44-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
53 [label="8_ return c;\n53-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
55 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a / b;\n  }\n55-function_definition-11-13", method="div(uint256 a,uint256 b)", type_label=function_definition];
72 [label="11_ return a / b;\n72-return-12-12", method="div(uint256 a,uint256 b)", type_label=return];
76 [label="13_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n76-function_definition-14-17", method="sub(uint256 a,uint256 b)", type_label=function_definition];
93 [label="14_ assert(b <= a);\n93-expression_statement-15-15", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
100 [label="15_ return a - b;\n100-return-16-16", method="sub(uint256 a,uint256 b)", type_label=return];
104 [label="17_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n104-function_definition-18-22", method="add(uint256 a,uint256 b)", type_label=function_definition];
121 [label="18_ uint256 c = a + b;\n121-new_variable-19-19", method="add(uint256 a,uint256 b)", type_label=new_variable];
129 [label="19_ assert(c >= a);\n129-expression_statement-20-20", method="add(uint256 a,uint256 b)", type_label=expression_statement];
136 [label="20_ return c;\n136-return-21-21", method="add(uint256 a,uint256 b)", type_label=return];
141 [label="24_ struct Rational {\n        uint n;   \n        uint d;   \n    }\n141-expression_statement-25-28", method="Rational()", type_label=expression_statement];
159 [label="31_ function rmul(uint256 amount, R.Rational memory r) internal pure returns (uint256) {\n        return amount.mul(r.n).div(r.d);\n    }\n159-function_definition-32-34", method="rmul(uint256 amount,R.Rational memory r)", type_label=function_definition];
178 [label="32_ return amount.mul(r.n).div(r.d);\n178-return-33-33", method="rmul(uint256 amount,R.Rational memory r)", type_label=return];
197 [label="36_ address public owner;\n197-new_variable-37-37", method="", type_label=new_variable];
212 [label="38_ function Ownable() public {\n    owner = msg.sender;\n  }\n212-function_definition-39-41", method="Ownable()", type_label=function_definition];
216 [label="39_ owner = msg.sender;\n216-expression_statement-40-40", method="Ownable()", type_label=expression_statement];
222 [label="41_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n222-expression_statement-42-45", method="", type_label=expression_statement];
225 [label="42_ require(msg.sender == owner);\n225-expression_statement-43-43", method="", type_label=expression_statement];
234 [label="43_ _;\n234-expression_statement-44-44", method="", type_label=expression_statement];
236 [label="45_ function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n236-function_definition-46-50", method="transferOwnership(address newOwner)", type_label=function_definition];
243 [label="45_ onlyOwner\n243-expression_statement-46-46", method="transferOwnership(address newOwner)", type_label=expression_statement];
246 [label="46_ require(newOwner != address(0));\n246-expression_statement-47-47", method="transferOwnership(address newOwner)", type_label=expression_statement];
261 [label="48_ owner = newOwner;\n261-expression_statement-49-49", method="transferOwnership(address newOwner)", type_label=expression_statement];
275 [label="54_ bool public paused = false;\n275-new_variable-55-55", method="", type_label=new_variable];
282 [label="55_ modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n282-expression_statement-56-59", method="", type_label=expression_statement];
285 [label="56_ require(!paused);\n285-expression_statement-57-57", method="", type_label=expression_statement];
291 [label="57_ _;\n291-expression_statement-58-58", method="", type_label=expression_statement];
293 [label="59_ modifier whenPaused() {\n    require(paused);\n    _;\n  }\n293-expression_statement-60-63", method="", type_label=expression_statement];
296 [label="60_ require(paused);\n296-expression_statement-61-61", method="", type_label=expression_statement];
301 [label="61_ _;\n301-expression_statement-62-62", method="", type_label=expression_statement];
303 [label="63_ function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n303-function_definition-64-67", method="pause()", type_label=function_definition];
305 [label="63_ onlyOwner\n305-expression_statement-64-64", method="pause()", type_label=expression_statement];
307 [label="63_ whenNotPaused\n307-expression_statement-64-64", method="pause()", type_label=expression_statement];
311 [label="64_ paused = true;\n311-expression_statement-65-65", method="pause()", type_label=expression_statement];
318 [label="67_ function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n318-function_definition-68-71", method="unpause()", type_label=function_definition];
320 [label="67_ onlyOwner\n320-expression_statement-68-68", method="unpause()", type_label=expression_statement];
322 [label="67_ whenPaused\n322-expression_statement-68-68", method="unpause()", type_label=expression_statement];
326 [label="68_ paused = false;\n326-expression_statement-69-69", method="unpause()", type_label=expression_statement];
336 [label="73_ struct Role {\n    mapping (address => bool) bearer;\n  }\n336-expression_statement-74-76", method="Role()", type_label=expression_statement];
344 [label="76_ function add(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = true;\n  }\n344-function_definition-77-81", method="add(Role storage role,address addr)", type_label=function_definition];
357 [label="79_ role.bearer[addr] = true;\n357-expression_statement-80-80", method="add(Role storage role,address addr)", type_label=expression_statement];
366 [label="81_ function remove(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = false;\n  }\n366-function_definition-82-86", method="remove(Role storage role,address addr)", type_label=function_definition];
379 [label="84_ role.bearer[addr] = false;\n379-expression_statement-85-85", method="remove(Role storage role,address addr)", type_label=expression_statement];
388 [label="86_ function check(Role storage role, address addr)\n    view\n    internal\n  {\n    require(has(role, addr));\n  }\n388-function_definition-87-92", method="check(Role storage role,address addr)", type_label=function_definition];
402 [label="90_ require(has(role, addr));\n402-expression_statement-91-91", method="check(Role storage role,address addr)", type_label=expression_statement];
412 [label="92_ function has(Role storage role, address addr)\n    view\n    internal\n    returns (bool)\n  {\n    return role.bearer[addr];\n  }\n412-function_definition-93-99", method="has(Role storage role,address addr)", type_label=function_definition];
430 [label="97_ return role.bearer[addr];\n430-return-98-98", method="has(Role storage role,address addr)", type_label=return];
446 [label="102_ mapping (string => Roles.Role) private roles;\n446-new_variable-103-103", method="", type_label=new_variable];
475 [label="105_ function checkRole(address addr, string roleName)\n    view\n    public\n  {\n    roles[roleName].check(addr);\n  }\n475-function_definition-106-111", method="checkRole(address addr,string roleName)", type_label=function_definition];
488 [label="109_ roles[roleName].check(addr);\n488-expression_statement-110-110", method="checkRole(address addr,string roleName)", type_label=expression_statement];
497 [label="111_ function hasRole(address addr, string roleName)\n    view\n    public\n    returns (bool)\n  {\n    return roles[roleName].has(addr);\n  }\n497-function_definition-112-118", method="hasRole(address addr,string roleName)", type_label=function_definition];
514 [label="116_ return roles[roleName].has(addr);\n514-return-117-117", method="hasRole(address addr,string roleName)", type_label=return];
523 [label="118_ function addRole(address addr, string roleName)\n    internal\n  {\n    roles[roleName].add(addr);\n    emit RoleAdded(addr, roleName);\n  }\n523-function_definition-119-124", method="addRole(address addr,string roleName)", type_label=function_definition];
535 [label="121_ roles[roleName].add(addr);\n535-expression_statement-122-122", method="addRole(address addr,string roleName)", type_label=expression_statement];
550 [label="124_ function removeRole(address addr, string roleName)\n    internal\n  {\n    roles[roleName].remove(addr);\n    emit RoleRemoved(addr, roleName);\n  }\n550-function_definition-125-130", method="removeRole(address addr,string roleName)", type_label=function_definition];
562 [label="127_ roles[roleName].remove(addr);\n562-expression_statement-128-128", method="removeRole(address addr,string roleName)", type_label=expression_statement];
577 [label="130_ modifier onlyRole(string roleName)\n  {\n    checkRole(msg.sender, roleName);\n    _;\n  }\n577-expression_statement-131-135", method="", type_label=expression_statement];
584 [label="132_ checkRole(msg.sender, roleName);\n584-expression_statement-133-133", method="", type_label=expression_statement];
593 [label="133_ _;\n593-expression_statement-134-134", method="", type_label=expression_statement];
598 [label="137_ function totalSupply() public view returns (uint256);\n598-function_definition-138-138", method="totalSupply()", type_label=function_definition];
606 [label="138_ function balanceOf(address who) public view returns (uint256);\n606-function_definition-139-139", method="balanceOf(address who)", type_label=function_definition];
618 [label="139_ function transfer(address to, uint256 value) public returns (bool);\n618-function_definition-140-140", method="transfer(address to,uint256 value)", type_label=function_definition];
653 [label="143_ function allowance(address owner, address spender) public view returns (uint256);\n653-function_definition-144-144", method="allowance(address owner,address spender)", type_label=function_definition];
669 [label="144_ function transferFrom(address from, address to, uint256 value) public returns (bool);\n669-function_definition-145-145", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
688 [label="145_ function approve(address spender, uint256 value) public returns (bool);\n688-function_definition-146-146", method="approve(address spender,uint256 value)", type_label=function_definition];
731 [label="150_ string constant ROLE_ORACLE = \"oracle\";\n731-new_variable-151-151", method="", type_label=new_variable];
737 [label="151_ ERC20 baseToken;\n737-new_variable-152-152", method="", type_label=new_variable];
742 [label="152_ ERC20 dai;\n742-new_variable-153-153", method="", type_label=new_variable];
747 [label="153_ address public oracle;\n747-new_variable-154-154", method="", type_label=new_variable];
752 [label="154_ R.Rational public ethRate;\n752-new_variable-155-155", method="", type_label=new_variable];
759 [label="155_ R.Rational public daiRate;\n759-new_variable-156-156", method="", type_label=new_variable];
812 [label="161_ function Exchange(\n        address _baseToken,\n        address _dai,\n        address _oracle,\n        uint256 _ethRateN,\n        uint256 _ethRateD,\n        uint256 _daiRateN,\n        uint256 _daiRateD\n    ) public {\n        baseToken = ERC20(_baseToken);\n        dai = ERC20(_dai);\n        addRole(_oracle, ROLE_ORACLE);\n        oracle = _oracle;\n        ethRate = R.Rational(_ethRateN, _ethRateD);\n        daiRate = R.Rational(_daiRateN, _daiRateD);\n    }\n812-function_definition-162-177", method="Exchange(address _baseToken,address _dai,address _oracle,uint256 _ethRateN,uint256 _ethRateD,uint256 _daiRateN,uint256 _daiRateD)", type_label=function_definition];
844 [label="170_ baseToken = ERC20(_baseToken);\n844-expression_statement-171-171", method="Exchange(address _baseToken,address _dai,address _oracle,uint256 _ethRateN,uint256 _ethRateD,uint256 _daiRateN,uint256 _daiRateD)", type_label=expression_statement];
851 [label="171_ dai = ERC20(_dai);\n851-expression_statement-172-172", method="Exchange(address _baseToken,address _dai,address _oracle,uint256 _ethRateN,uint256 _ethRateD,uint256 _daiRateN,uint256 _daiRateD)", type_label=expression_statement];
858 [label="172_ addRole(_oracle, ROLE_ORACLE);\n858-expression_statement-173-173", method="Exchange(address _baseToken,address _dai,address _oracle,uint256 _ethRateN,uint256 _ethRateD,uint256 _daiRateN,uint256 _daiRateD)", type_label=expression_statement];
865 [label="173_ oracle = _oracle;\n865-expression_statement-174-174", method="Exchange(address _baseToken,address _dai,address _oracle,uint256 _ethRateN,uint256 _ethRateD,uint256 _daiRateN,uint256 _daiRateD)", type_label=expression_statement];
869 [label="174_ ethRate = R.Rational(_ethRateN, _ethRateD);\n869-expression_statement-175-175", method="Exchange(address _baseToken,address _dai,address _oracle,uint256 _ethRateN,uint256 _ethRateD,uint256 _daiRateN,uint256 _daiRateD)", type_label=expression_statement];
880 [label="175_ daiRate = R.Rational(_daiRateN, _daiRateD);\n880-expression_statement-176-176", method="Exchange(address _baseToken,address _dai,address _oracle,uint256 _ethRateN,uint256 _ethRateD,uint256 _daiRateN,uint256 _daiRateD)", type_label=expression_statement];
891 [label="177_ function tradeETH(uint256 expectedAmountBaseToken) public whenNotPaused() payable {\n        uint256 amountBaseToken = calculateAmountForETH(msg.value);\n        require(amountBaseToken == expectedAmountBaseToken);\n        require(baseToken.transfer(msg.sender, amountBaseToken));\n        emit TradeETH(msg.value, amountBaseToken);\n    }\n891-function_definition-178-183", method="tradeETH(uint256 expectedAmountBaseToken)", type_label=function_definition];
898 [label="177_ whenNotPaused()\n898-expression_statement-178-178", method="tradeETH(uint256 expectedAmountBaseToken)", type_label=expression_statement];
902 [label="178_ uint256 amountBaseToken = calculateAmountForETH(msg.value);\n902-new_variable-179-179", method="tradeETH(uint256 expectedAmountBaseToken)", type_label=new_variable];
913 [label="179_ require(amountBaseToken == expectedAmountBaseToken);\n913-expression_statement-180-180", method="tradeETH(uint256 expectedAmountBaseToken)", type_label=expression_statement];
920 [label="180_ require(baseToken.transfer(msg.sender, amountBaseToken));\n920-expression_statement-181-181", method="tradeETH(uint256 expectedAmountBaseToken)", type_label=expression_statement];
942 [label="183_ function tradeDAI(uint256 amountDAI, uint256 expectedAmountBaseToken) public whenNotPaused() {\n        uint256 amountBaseToken = calculateAmountForDAI(amountDAI);\n        require(amountBaseToken == expectedAmountBaseToken);\n        require(dai.transferFrom(msg.sender, address(this), amountDAI));\n        require(baseToken.transfer(msg.sender, amountBaseToken));\n        emit TradeDAI(amountDAI, amountBaseToken);\n    }\n942-function_definition-184-190", method="tradeDAI(uint256 amountDAI,uint256 expectedAmountBaseToken)", type_label=function_definition];
953 [label="183_ whenNotPaused()\n953-expression_statement-184-184", method="tradeDAI(uint256 amountDAI,uint256 expectedAmountBaseToken)", type_label=expression_statement];
956 [label="184_ uint256 amountBaseToken = calculateAmountForDAI(amountDAI);\n956-new_variable-185-185", method="tradeDAI(uint256 amountDAI,uint256 expectedAmountBaseToken)", type_label=new_variable];
965 [label="185_ require(amountBaseToken == expectedAmountBaseToken);\n965-expression_statement-186-186", method="tradeDAI(uint256 amountDAI,uint256 expectedAmountBaseToken)", type_label=expression_statement];
972 [label="186_ require(dai.transferFrom(msg.sender, address(this), amountDAI));\n972-expression_statement-187-187", method="tradeDAI(uint256 amountDAI,uint256 expectedAmountBaseToken)", type_label=expression_statement];
990 [label="187_ require(baseToken.transfer(msg.sender, amountBaseToken));\n990-expression_statement-188-188", method="tradeDAI(uint256 amountDAI,uint256 expectedAmountBaseToken)", type_label=expression_statement];
1010 [label="190_ function calculateAmountForETH(uint256 amountETH) public view returns (uint256) {\n        return Rationals.rmul(amountETH, ethRate);\n    }\n1010-function_definition-191-193", method="calculateAmountForETH(uint256 amountETH)", type_label=function_definition];
1023 [label="191_ return Rationals.rmul(amountETH, ethRate);\n1023-return-192-192", method="calculateAmountForETH(uint256 amountETH)", type_label=return];
1032 [label="193_ function calculateAmountForDAI(uint256 amountDAI) public view returns (uint256) {\n        return Rationals.rmul(amountDAI, daiRate);\n    }\n1032-function_definition-194-196", method="calculateAmountForDAI(uint256 amountDAI)", type_label=function_definition];
1045 [label="194_ return Rationals.rmul(amountDAI, daiRate);\n1045-return-195-195", method="calculateAmountForDAI(uint256 amountDAI)", type_label=return];
1054 [label="196_ function setETHRate(uint256 n, uint256 d) external onlyRole(ROLE_ORACLE) {\n        ethRate = R.Rational(n, d);\n        emit RateUpdatedETH(n, d);\n    }\n1054-function_definition-197-200", method="setETHRate(uint256 n,uint256 d)", type_label=function_definition];
1065 [label="196_ onlyRole(ROLE_ORACLE)\n1065-expression_statement-197-197", method="setETHRate(uint256 n,uint256 d)", type_label=expression_statement];
1070 [label="197_ ethRate = R.Rational(n, d);\n1070-expression_statement-198-198", method="setETHRate(uint256 n,uint256 d)", type_label=expression_statement];
1087 [label="200_ function setDAIRate(uint256 n, uint256 d) external onlyRole(ROLE_ORACLE) {\n        daiRate = R.Rational(n, d);\n        emit RateUpdatedDAI(n, d);\n    }\n1087-function_definition-201-204", method="setDAIRate(uint256 n,uint256 d)", type_label=function_definition];
1098 [label="200_ onlyRole(ROLE_ORACLE)\n1098-expression_statement-201-201", method="setDAIRate(uint256 n,uint256 d)", type_label=expression_statement];
1103 [label="201_ daiRate = R.Rational(n, d);\n1103-expression_statement-202-202", method="setDAIRate(uint256 n,uint256 d)", type_label=expression_statement];
1120 [label="204_ function withdrawERC20s(address token, uint256 amount) external onlyOwner {\n        ERC20 erc20 = ERC20(token);\n        require(erc20.transfer(owner, amount));\n    }\n1120-function_definition-205-208", method="withdrawERC20s(address token,uint256 amount)", type_label=function_definition];
1131 [label="204_ onlyOwner\n1131-expression_statement-205-205", method="withdrawERC20s(address token,uint256 amount)", type_label=expression_statement];
1134 [label="205_ ERC20 erc20 = ERC20(token);\n1134-new_variable-206-206", method="withdrawERC20s(address token,uint256 amount)", type_label=new_variable];
1144 [label="206_ require(erc20.transfer(owner, amount));\n1144-expression_statement-207-207", method="withdrawERC20s(address token,uint256 amount)", type_label=expression_statement];
1156 [label="208_ function setOracle(address _oracle) external onlyOwner {\n        removeRole(oracle, ROLE_ORACLE);\n        addRole(_oracle, ROLE_ORACLE);\n        oracle = _oracle;\n        emit OracleSet(_oracle);\n    }\n1156-function_definition-209-214", method="setOracle(address _oracle)", type_label=function_definition];
1163 [label="208_ onlyOwner\n1163-expression_statement-209-209", method="setOracle(address _oracle)", type_label=expression_statement];
1166 [label="209_ removeRole(oracle, ROLE_ORACLE);\n1166-expression_statement-210-210", method="setOracle(address _oracle)", type_label=expression_statement];
1173 [label="210_ addRole(_oracle, ROLE_ORACLE);\n1173-expression_statement-211-211", method="setOracle(address _oracle)", type_label=expression_statement];
1180 [label="211_ oracle = _oracle;\n1180-expression_statement-212-212", method="setOracle(address _oracle)", type_label=expression_statement];
1188 [label="214_ function withdrawEther() external onlyOwner {\n        owner.transfer(address(this).balance);\n    }\n1188-function_definition-215-217", method="withdrawEther()", type_label=function_definition];
1191 [label="214_ onlyOwner\n1191-expression_statement-215-215", method="withdrawEther()", type_label=expression_statement];
1194 [label="215_ owner.transfer(address(this).balance);\n1194-expression_statement-216-216", method="withdrawEther()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
29 -> 1229  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1229 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 1229  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
34 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
36 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
55 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
76 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
104 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
136 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
159 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
212 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
275 -> 282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
282 -> 293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
285 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
296 -> 301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
305 -> 307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
344 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
388 -> 402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
412 -> 430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
475 -> 488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
514 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
523 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
584 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
747 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
812 -> 844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
844 -> 851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
851 -> 858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
858 -> 865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
865 -> 869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
869 -> 880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
902 -> 913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
913 -> 920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
942 -> 956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
956 -> 965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
965 -> 972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
972 -> 990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1010 -> 1023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1023 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1032 -> 1045  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1045 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1054 -> 1070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1087 -> 1103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1120 -> 1134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1134 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1156 -> 1166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1166 -> 1173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1173 -> 1180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1188 -> 1194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
