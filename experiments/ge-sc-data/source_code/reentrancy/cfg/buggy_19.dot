digraph  {
13 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n13-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
2159 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
45 [label="7_ assert(c / a == b);\n45-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
56 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n56-function_definition-11-14", method="div(uint256 a,uint256 b)", type_label=function_definition];
73 [label="11_ uint256 c = a / b;\n73-new_variable-12-12", method="div(uint256 a,uint256 b)", type_label=new_variable];
81 [label="12_ return c;\n81-return-13-13", method="div(uint256 a,uint256 b)", type_label=return];
83 [label="14_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n83-function_definition-15-18", method="sub(uint256 a,uint256 b)", type_label=function_definition];
100 [label="15_ assert(b <= a);\n100-expression_statement-16-16", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
107 [label="16_ return a - b;\n107-return-17-17", method="sub(uint256 a,uint256 b)", type_label=return];
111 [label="18_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n111-function_definition-19-23", method="add(uint256 a,uint256 b)", type_label=function_definition];
128 [label="19_ uint256 c = a + b;\n128-new_variable-20-20", method="add(uint256 a,uint256 b)", type_label=new_variable];
136 [label="20_ assert(c >= a);\n136-expression_statement-21-21", method="add(uint256 a,uint256 b)", type_label=expression_statement];
143 [label="21_ return c;\n143-return-22-22", method="add(uint256 a,uint256 b)", type_label=return];
148 [label="25_ mapping(address => uint) balances_re_ent1;\n148-new_variable-26-26", method="", type_label=new_variable];
154 [label="26_ function withdraw_balances_re_ent1 () public {\n       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent1[msg.sender] = 0;\n      }\n154-function_definition-27-31", method="withdraw_balances_re_ent1()", type_label=function_definition];
158 [label="27_ (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n158-new_variable-28-28", method="withdraw_balances_re_ent1()", type_label=new_variable];
182 [label="28_ if\n182-if-29-30", method="withdraw_balances_re_ent1()", type_label=if];
2311 [label="28_ end_if", method="withdraw_balances_re_ent1()", type_label=end_if];
184 [label="29_ balances_re_ent1[msg.sender] = 0;\n184-expression_statement-30-30", method="withdraw_balances_re_ent1()", type_label=expression_statement];
192 [label="31_ address public owner;\n192-new_variable-32-32", method="", type_label=new_variable];
199 [label="33_ owner = msg.sender;\n199-expression_statement-34-34", method="", type_label=expression_statement];
205 [label="35_ bool not_called_re_ent41 = true;\n205-new_variable-36-36", method="", type_label=new_variable];
211 [label="36_ function bug_re_ent41() public{\n        require(not_called_re_ent41);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent41 = false;\n    }\n211-function_definition-37-43", method="bug_re_ent41()", type_label=function_definition];
215 [label="37_ require(not_called_re_ent41);\n215-expression_statement-38-38", method="bug_re_ent41()", type_label=expression_statement];
220 [label="38_ if\n220-if-39-41", method="bug_re_ent41()", type_label=if];
2349 [label="38_ end_if", method="bug_re_ent41()", type_label=end_if];
235 [label="41_ not_called_re_ent41 = false;\n235-expression_statement-42-42", method="bug_re_ent41()", type_label=expression_statement];
240 [label="43_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n240-expression_statement-44-47", method="", type_label=expression_statement];
243 [label="44_ require(msg.sender == owner);\n243-expression_statement-45-45", method="", type_label=expression_statement];
252 [label="45_ _;\n252-expression_statement-46-46", method="", type_label=expression_statement];
254 [label="47_ function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n254-function_definition-48-51", method="transferOwnership(address newOwner)", type_label=function_definition];
260 [label="47_ onlyOwner\n260-expression_statement-48-48", method="transferOwnership(address newOwner)", type_label=expression_statement];
264 [label="48_ require(newOwner != address(0));\n264-expression_statement-49-49", method="transferOwnership(address newOwner)", type_label=expression_statement];
273 [label="49_ owner = newOwner;\n273-expression_statement-50-50", method="transferOwnership(address newOwner)", type_label=expression_statement];
277 [label="51_ uint256 counter_re_ent42 =0;\n277-new_variable-52-52", method="", type_label=new_variable];
282 [label="52_ function callme_re_ent42() public{\n        require(counter_re_ent42<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent42 += 1;\n    }\n282-function_definition-53-59", method="callme_re_ent42()", type_label=function_definition];
286 [label="53_ require(counter_re_ent42<=5);\n286-expression_statement-54-54", method="callme_re_ent42()", type_label=expression_statement];
293 [label="54_ if\n293-if-55-57", method="callme_re_ent42()", type_label=if];
2422 [label="54_ end_if", method="callme_re_ent42()", type_label=end_if];
308 [label="57_ counter_re_ent42 += 1;\n308-expression_statement-58-58", method="callme_re_ent42()", type_label=expression_statement];
322 [label="62_ address payable lastPlayer_re_ent2;\n322-new_variable-63-63", method="", type_label=new_variable];
326 [label="63_ uint jackpot_re_ent2;\n326-new_variable-64-64", method="", type_label=new_variable];
330 [label="64_ function buyTicket_re_ent2() public{\n	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))\n        revert();\n      lastPlayer_re_ent2 = msg.sender;\n      jackpot_re_ent2    = address(this).balance;\n    }\n330-function_definition-65-70", method="buyTicket_re_ent2()", type_label=function_definition];
334 [label="65_ if\n334-if-66-67", method="buyTicket_re_ent2()", type_label=if];
2463 [label="65_ end_if", method="buyTicket_re_ent2()", type_label=end_if];
345 [label="67_ lastPlayer_re_ent2 = msg.sender;\n345-expression_statement-68-68", method="buyTicket_re_ent2()", type_label=expression_statement];
351 [label="68_ jackpot_re_ent2    = address(this).balance;\n351-expression_statement-69-69", method="buyTicket_re_ent2()", type_label=expression_statement];
359 [label="70_ function withdrawForUser(address payable _address,uint amount) onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\");\n        _address.transfer(amount);\n    }\n359-function_definition-71-74", method="withdrawForUser(address payable _address,uint amount)", type_label=function_definition];
369 [label="70_ onlyOwner\n369-expression_statement-71-71", method="withdrawForUser(address payable _address,uint amount)", type_label=expression_statement];
373 [label="71_ require(msg.sender == owner, \"only owner can use this method\");\n373-expression_statement-72-72", method="withdrawForUser(address payable _address,uint amount)", type_label=expression_statement];
385 [label="72_ _address.transfer(amount);\n385-expression_statement-73-73", method="withdrawForUser(address payable _address,uint amount)", type_label=expression_statement];
392 [label="74_ mapping(address => uint) balances_re_ent17;\n392-new_variable-75-75", method="", type_label=new_variable];
398 [label="75_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n398-function_definition-76-81", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
406 [label="76_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n406-expression_statement-77-77", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
417 [label="77_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n417-new_variable-78-78", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
437 [label="78_ require(success);\n437-expression_statement-79-79", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
442 [label="79_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n442-expression_statement-80-80", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
450 [label="81_ function moveBrick(uint amount) onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(amount);\n    }\n450-function_definition-82-85", method="moveBrick(uint amount)", type_label=function_definition];
456 [label="81_ onlyOwner\n456-expression_statement-82-82", method="moveBrick(uint amount)", type_label=expression_statement];
460 [label="82_ require(msg.sender == owner, \"only owner can use this method\");\n460-expression_statement-83-83", method="moveBrick(uint amount)", type_label=expression_statement];
472 [label="83_ msg.sender.transfer(amount);\n472-expression_statement-84-84", method="moveBrick(uint amount)", type_label=expression_statement];
481 [label="85_ address payable lastPlayer_re_ent37;\n481-new_variable-86-86", method="", type_label=new_variable];
485 [label="86_ uint jackpot_re_ent37;\n485-new_variable-87-87", method="", type_label=new_variable];
489 [label="87_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n489-function_definition-88-93", method="buyTicket_re_ent37()", type_label=function_definition];
493 [label="88_ if\n493-if-89-90", method="buyTicket_re_ent37()", type_label=if];
2622 [label="88_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
504 [label="90_ lastPlayer_re_ent37 = msg.sender;\n504-expression_statement-91-91", method="buyTicket_re_ent37()", type_label=expression_statement];
510 [label="91_ jackpot_re_ent37    = address(this).balance;\n510-expression_statement-92-92", method="buyTicket_re_ent37()", type_label=expression_statement];
518 [label="93_ function moveBrickContracts() onlyOwner public\n    {\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n518-function_definition-94-98", method="moveBrickContracts()", type_label=function_definition];
520 [label="93_ onlyOwner\n520-expression_statement-94-94", method="moveBrickContracts()", type_label=expression_statement];
524 [label="95_ require(msg.sender == owner, \"only owner can use this method\");\n524-expression_statement-96-96", method="moveBrickContracts()", type_label=expression_statement];
536 [label="96_ msg.sender.transfer(address(this).balance);\n536-expression_statement-97-97", method="moveBrickContracts()", type_label=expression_statement];
549 [label="98_ mapping(address => uint) balances_re_ent3;\n549-new_variable-99-99", method="", type_label=new_variable];
555 [label="99_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n555-function_definition-100-105", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
563 [label="100_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n563-expression_statement-101-101", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
574 [label="101_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n574-new_variable-102-102", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
594 [label="102_ require(success);\n594-expression_statement-103-103", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
599 [label="103_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n599-expression_statement-104-104", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
607 [label="105_ function moveBrickClear() onlyOwner public {\n        require(msg.sender == owner, \"only owner can use this method\"); \n        selfdestruct(msg.sender);\n    }\n607-function_definition-106-109", method="moveBrickClear()", type_label=function_definition];
609 [label="105_ onlyOwner\n609-expression_statement-106-106", method="moveBrickClear()", type_label=expression_statement];
613 [label="106_ require(msg.sender == owner, \"only owner can use this method\");\n613-expression_statement-107-107", method="moveBrickClear()", type_label=expression_statement];
625 [label="107_ selfdestruct(msg.sender);\n625-expression_statement-108-108", method="moveBrickClear()", type_label=expression_statement];
632 [label="109_ address payable lastPlayer_re_ent9;\n632-new_variable-110-110", method="", type_label=new_variable];
636 [label="110_ uint jackpot_re_ent9;\n636-new_variable-111-111", method="", type_label=new_variable];
640 [label="111_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n640-function_definition-112-118", method="buyTicket_re_ent9()", type_label=function_definition];
644 [label="112_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n644-new_variable-113-113", method="buyTicket_re_ent9()", type_label=new_variable];
662 [label="113_ if\n662-if-114-115", method="buyTicket_re_ent9()", type_label=if];
2791 [label="113_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
667 [label="115_ lastPlayer_re_ent9 = msg.sender;\n667-expression_statement-116-116", method="buyTicket_re_ent9()", type_label=expression_statement];
673 [label="116_ jackpot_re_ent9    = address(this).balance;\n673-expression_statement-117-117", method="buyTicket_re_ent9()", type_label=expression_statement];
681 [label="118_ function joinFlexible() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n681-function_definition-119-122", method="joinFlexible()", type_label=function_definition];
683 [label="118_ onlyOwner\n683-expression_statement-119-119", method="joinFlexible()", type_label=expression_statement];
687 [label="119_ require(msg.sender == owner, \"only owner can use this method\");\n687-expression_statement-120-120", method="joinFlexible()", type_label=expression_statement];
699 [label="120_ msg.sender.transfer(address(this).balance);\n699-expression_statement-121-121", method="joinFlexible()", type_label=expression_statement];
712 [label="122_ mapping(address => uint) redeemableEther_re_ent25;\n712-new_variable-123-123", method="", type_label=new_variable];
718 [label="123_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n718-function_definition-124-129", method="claimReward_re_ent25()", type_label=function_definition];
722 [label="124_ require(redeemableEther_re_ent25[msg.sender] > 0);\n722-expression_statement-125-125", method="claimReward_re_ent25()", type_label=expression_statement];
733 [label="125_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n733-new_variable-126-126", method="claimReward_re_ent25()", type_label=new_variable];
743 [label="126_ msg.sender.transfer(transferValue_re_ent25);\n743-expression_statement-127-127", method="claimReward_re_ent25()", type_label=expression_statement];
752 [label="127_ redeemableEther_re_ent25[msg.sender] = 0;\n752-expression_statement-128-128", method="claimReward_re_ent25()", type_label=expression_statement];
760 [label="129_ function joinFixed() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n760-function_definition-130-133", method="joinFixed()", type_label=function_definition];
762 [label="129_ onlyOwner\n762-expression_statement-130-130", method="joinFixed()", type_label=expression_statement];
766 [label="130_ require(msg.sender == owner, \"only owner can use this method\");\n766-expression_statement-131-131", method="joinFixed()", type_label=expression_statement];
778 [label="131_ msg.sender.transfer(address(this).balance);\n778-expression_statement-132-132", method="joinFixed()", type_label=expression_statement];
791 [label="133_ mapping(address => uint) userBalance_re_ent19;\n791-new_variable-134-134", method="", type_label=new_variable];
797 [label="134_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n797-function_definition-135-140", method="withdrawBalance_re_ent19()", type_label=function_definition];
801 [label="135_ if\n801-if-136-138", method="withdrawBalance_re_ent19()", type_label=if];
2930 [label="135_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
819 [label="138_ userBalance_re_ent19[msg.sender] = 0;\n819-expression_statement-139-139", method="withdrawBalance_re_ent19()", type_label=expression_statement];
827 [label="140_ function staticBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n827-function_definition-141-144", method="staticBonus()", type_label=function_definition];
829 [label="140_ onlyOwner\n829-expression_statement-141-141", method="staticBonus()", type_label=expression_statement];
833 [label="141_ require(msg.sender == owner, \"only owner can use this method\");\n833-expression_statement-142-142", method="staticBonus()", type_label=expression_statement];
845 [label="142_ msg.sender.transfer(address(this).balance);\n845-expression_statement-143-143", method="staticBonus()", type_label=expression_statement];
858 [label="144_ mapping(address => uint) userBalance_re_ent26;\n858-new_variable-145-145", method="", type_label=new_variable];
864 [label="145_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n864-function_definition-146-152", method="withdrawBalance_re_ent26()", type_label=function_definition];
868 [label="146_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n868-new_variable-147-147", method="withdrawBalance_re_ent26()", type_label=new_variable];
892 [label="147_ if\n892-if-148-150", method="withdrawBalance_re_ent26()", type_label=if];
3021 [label="147_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
898 [label="150_ userBalance_re_ent26[msg.sender] = 0;\n898-expression_statement-151-151", method="withdrawBalance_re_ent26()", type_label=expression_statement];
906 [label="152_ function activeBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n906-function_definition-153-156", method="activeBonus()", type_label=function_definition];
908 [label="152_ onlyOwner\n908-expression_statement-153-153", method="activeBonus()", type_label=expression_statement];
912 [label="153_ require(msg.sender == owner, \"only owner can use this method\");\n912-expression_statement-154-154", method="activeBonus()", type_label=expression_statement];
924 [label="154_ msg.sender.transfer(address(this).balance);\n924-expression_statement-155-155", method="activeBonus()", type_label=expression_statement];
937 [label="156_ bool not_called_re_ent20 = true;\n937-new_variable-157-157", method="", type_label=new_variable];
943 [label="157_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n943-function_definition-158-164", method="bug_re_ent20()", type_label=function_definition];
947 [label="158_ require(not_called_re_ent20);\n947-expression_statement-159-159", method="bug_re_ent20()", type_label=expression_statement];
952 [label="159_ if\n952-if-160-162", method="bug_re_ent20()", type_label=if];
3081 [label="159_ end_if", method="bug_re_ent20()", type_label=end_if];
967 [label="162_ not_called_re_ent20 = false;\n967-expression_statement-163-163", method="bug_re_ent20()", type_label=expression_statement];
972 [label="164_ function teamAddBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n972-function_definition-165-168", method="teamAddBonus()", type_label=function_definition];
974 [label="164_ onlyOwner\n974-expression_statement-165-165", method="teamAddBonus()", type_label=expression_statement];
978 [label="165_ require(msg.sender == owner, \"only owner can use this method\");\n978-expression_statement-166-166", method="teamAddBonus()", type_label=expression_statement];
990 [label="166_ msg.sender.transfer(address(this).balance);\n990-expression_statement-167-167", method="teamAddBonus()", type_label=expression_statement];
1003 [label="168_ mapping(address => uint) redeemableEther_re_ent32;\n1003-new_variable-169-169", method="", type_label=new_variable];
1009 [label="169_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n1009-function_definition-170-175", method="claimReward_re_ent32()", type_label=function_definition];
1013 [label="170_ require(redeemableEther_re_ent32[msg.sender] > 0);\n1013-expression_statement-171-171", method="claimReward_re_ent32()", type_label=expression_statement];
1024 [label="171_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n1024-new_variable-172-172", method="claimReward_re_ent32()", type_label=new_variable];
1034 [label="172_ msg.sender.transfer(transferValue_re_ent32);\n1034-expression_statement-173-173", method="claimReward_re_ent32()", type_label=expression_statement];
1043 [label="173_ redeemableEther_re_ent32[msg.sender] = 0;\n1043-expression_statement-174-174", method="claimReward_re_ent32()", type_label=expression_statement];
1051 [label="175_ function staticBonusCacl() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1051-function_definition-176-179", method="staticBonusCacl()", type_label=function_definition];
1053 [label="175_ onlyOwner\n1053-expression_statement-176-176", method="staticBonusCacl()", type_label=expression_statement];
1057 [label="176_ require(msg.sender == owner, \"only owner can use this method\");\n1057-expression_statement-177-177", method="staticBonusCacl()", type_label=expression_statement];
1069 [label="177_ msg.sender.transfer(address(this).balance);\n1069-expression_statement-178-178", method="staticBonusCacl()", type_label=expression_statement];
1082 [label="179_ mapping(address => uint) balances_re_ent38;\n1082-new_variable-180-180", method="", type_label=new_variable];
1088 [label="180_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n1088-function_definition-181-185", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
1096 [label="181_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n1096-expression_statement-182-182", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1107 [label="182_ require(msg.sender.send(_weiToWithdraw));\n1107-expression_statement-183-183", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1119 [label="183_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n1119-expression_statement-184-184", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1127 [label="185_ function activeBonusCacl_1() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1127-function_definition-186-189", method="activeBonusCacl_1()", type_label=function_definition];
1129 [label="185_ onlyOwner\n1129-expression_statement-186-186", method="activeBonusCacl_1()", type_label=expression_statement];
1133 [label="186_ require(msg.sender == owner, \"only owner can use this method\");\n1133-expression_statement-187-187", method="activeBonusCacl_1()", type_label=expression_statement];
1145 [label="187_ msg.sender.transfer(address(this).balance);\n1145-expression_statement-188-188", method="activeBonusCacl_1()", type_label=expression_statement];
1158 [label="189_ mapping(address => uint) redeemableEther_re_ent4;\n1158-new_variable-190-190", method="", type_label=new_variable];
1164 [label="190_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n1164-function_definition-191-196", method="claimReward_re_ent4()", type_label=function_definition];
1168 [label="191_ require(redeemableEther_re_ent4[msg.sender] > 0);\n1168-expression_statement-192-192", method="claimReward_re_ent4()", type_label=expression_statement];
1179 [label="192_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n1179-new_variable-193-193", method="claimReward_re_ent4()", type_label=new_variable];
1189 [label="193_ msg.sender.transfer(transferValue_re_ent4);\n1189-expression_statement-194-194", method="claimReward_re_ent4()", type_label=expression_statement];
1198 [label="194_ redeemableEther_re_ent4[msg.sender] = 0;\n1198-expression_statement-195-195", method="claimReward_re_ent4()", type_label=expression_statement];
1206 [label="196_ function activeBonusCacl_2() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1206-function_definition-197-200", method="activeBonusCacl_2()", type_label=function_definition];
1208 [label="196_ onlyOwner\n1208-expression_statement-197-197", method="activeBonusCacl_2()", type_label=expression_statement];
1212 [label="197_ require(msg.sender == owner, \"only owner can use this method\");\n1212-expression_statement-198-198", method="activeBonusCacl_2()", type_label=expression_statement];
1224 [label="198_ msg.sender.transfer(address(this).balance);\n1224-expression_statement-199-199", method="activeBonusCacl_2()", type_label=expression_statement];
1237 [label="200_ uint256 counter_re_ent7 =0;\n1237-new_variable-201-201", method="", type_label=new_variable];
1242 [label="201_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n1242-function_definition-202-208", method="callme_re_ent7()", type_label=function_definition];
1246 [label="202_ require(counter_re_ent7<=5);\n1246-expression_statement-203-203", method="callme_re_ent7()", type_label=expression_statement];
1253 [label="203_ if\n1253-if-204-206", method="callme_re_ent7()", type_label=if];
3382 [label="203_ end_if", method="callme_re_ent7()", type_label=end_if];
1268 [label="206_ counter_re_ent7 += 1;\n1268-expression_statement-207-207", method="callme_re_ent7()", type_label=expression_statement];
1272 [label="208_ function activeBonusCacl_3() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1272-function_definition-209-212", method="activeBonusCacl_3()", type_label=function_definition];
1274 [label="208_ onlyOwner\n1274-expression_statement-209-209", method="activeBonusCacl_3()", type_label=expression_statement];
1278 [label="209_ require(msg.sender == owner, \"only owner can use this method\");\n1278-expression_statement-210-210", method="activeBonusCacl_3()", type_label=expression_statement];
1290 [label="210_ msg.sender.transfer(address(this).balance);\n1290-expression_statement-211-211", method="activeBonusCacl_3()", type_label=expression_statement];
1303 [label="212_ address payable lastPlayer_re_ent23;\n1303-new_variable-213-213", method="", type_label=new_variable];
1307 [label="213_ uint jackpot_re_ent23;\n1307-new_variable-214-214", method="", type_label=new_variable];
1311 [label="214_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n1311-function_definition-215-220", method="buyTicket_re_ent23()", type_label=function_definition];
1315 [label="215_ if\n1315-if-216-217", method="buyTicket_re_ent23()", type_label=if];
3444 [label="215_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
1326 [label="217_ lastPlayer_re_ent23 = msg.sender;\n1326-expression_statement-218-218", method="buyTicket_re_ent23()", type_label=expression_statement];
1332 [label="218_ jackpot_re_ent23    = address(this).balance;\n1332-expression_statement-219-219", method="buyTicket_re_ent23()", type_label=expression_statement];
1340 [label="220_ function activeBonusCacl_4() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1340-function_definition-221-224", method="activeBonusCacl_4()", type_label=function_definition];
1342 [label="220_ onlyOwner\n1342-expression_statement-221-221", method="activeBonusCacl_4()", type_label=expression_statement];
1346 [label="221_ require(msg.sender == owner, \"only owner can use this method\");\n1346-expression_statement-222-222", method="activeBonusCacl_4()", type_label=expression_statement];
1358 [label="222_ msg.sender.transfer(address(this).balance);\n1358-expression_statement-223-223", method="activeBonusCacl_4()", type_label=expression_statement];
1371 [label="224_ uint256 counter_re_ent14 =0;\n1371-new_variable-225-225", method="", type_label=new_variable];
1376 [label="225_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n1376-function_definition-226-232", method="callme_re_ent14()", type_label=function_definition];
1380 [label="226_ require(counter_re_ent14<=5);\n1380-expression_statement-227-227", method="callme_re_ent14()", type_label=expression_statement];
1387 [label="227_ if\n1387-if-228-230", method="callme_re_ent14()", type_label=if];
3516 [label="227_ end_if", method="callme_re_ent14()", type_label=end_if];
1402 [label="230_ counter_re_ent14 += 1;\n1402-expression_statement-231-231", method="callme_re_ent14()", type_label=expression_statement];
1406 [label="232_ function activeBonusCacl_5() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1406-function_definition-233-236", method="activeBonusCacl_5()", type_label=function_definition];
1408 [label="232_ onlyOwner\n1408-expression_statement-233-233", method="activeBonusCacl_5()", type_label=expression_statement];
1412 [label="233_ require(msg.sender == owner, \"only owner can use this method\");\n1412-expression_statement-234-234", method="activeBonusCacl_5()", type_label=expression_statement];
1424 [label="234_ msg.sender.transfer(address(this).balance);\n1424-expression_statement-235-235", method="activeBonusCacl_5()", type_label=expression_statement];
1437 [label="236_ address payable lastPlayer_re_ent30;\n1437-new_variable-237-237", method="", type_label=new_variable];
1441 [label="237_ uint jackpot_re_ent30;\n1441-new_variable-238-238", method="", type_label=new_variable];
1445 [label="238_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n1445-function_definition-239-244", method="buyTicket_re_ent30()", type_label=function_definition];
1449 [label="239_ if\n1449-if-240-241", method="buyTicket_re_ent30()", type_label=if];
3578 [label="239_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
1460 [label="241_ lastPlayer_re_ent30 = msg.sender;\n1460-expression_statement-242-242", method="buyTicket_re_ent30()", type_label=expression_statement];
1466 [label="242_ jackpot_re_ent30    = address(this).balance;\n1466-expression_statement-243-243", method="buyTicket_re_ent30()", type_label=expression_statement];
1474 [label="244_ function activeBonusCacl_6() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1474-function_definition-245-248", method="activeBonusCacl_6()", type_label=function_definition];
1476 [label="244_ onlyOwner\n1476-expression_statement-245-245", method="activeBonusCacl_6()", type_label=expression_statement];
1480 [label="245_ require(msg.sender == owner, \"only owner can use this method\");\n1480-expression_statement-246-246", method="activeBonusCacl_6()", type_label=expression_statement];
1492 [label="246_ msg.sender.transfer(address(this).balance);\n1492-expression_statement-247-247", method="activeBonusCacl_6()", type_label=expression_statement];
1505 [label="248_ mapping(address => uint) balances_re_ent8;\n1505-new_variable-249-249", method="", type_label=new_variable];
1511 [label="249_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n1511-function_definition-250-254", method="withdraw_balances_re_ent8()", type_label=function_definition];
1515 [label="250_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n1515-new_variable-251-251", method="withdraw_balances_re_ent8()", type_label=new_variable];
1539 [label="251_ if\n1539-if-252-253", method="withdraw_balances_re_ent8()", type_label=if];
3668 [label="251_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
1541 [label="252_ balances_re_ent8[msg.sender] = 0;\n1541-expression_statement-253-253", method="withdraw_balances_re_ent8()", type_label=expression_statement];
1549 [label="254_ function activeBonusCacl_7() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1549-function_definition-255-258", method="activeBonusCacl_7()", type_label=function_definition];
1551 [label="254_ onlyOwner\n1551-expression_statement-255-255", method="activeBonusCacl_7()", type_label=expression_statement];
1555 [label="255_ require(msg.sender == owner, \"only owner can use this method\");\n1555-expression_statement-256-256", method="activeBonusCacl_7()", type_label=expression_statement];
1567 [label="256_ msg.sender.transfer(address(this).balance);\n1567-expression_statement-257-257", method="activeBonusCacl_7()", type_label=expression_statement];
1580 [label="258_ mapping(address => uint) redeemableEther_re_ent39;\n1580-new_variable-259-259", method="", type_label=new_variable];
1586 [label="259_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n1586-function_definition-260-265", method="claimReward_re_ent39()", type_label=function_definition];
1590 [label="260_ require(redeemableEther_re_ent39[msg.sender] > 0);\n1590-expression_statement-261-261", method="claimReward_re_ent39()", type_label=expression_statement];
1601 [label="261_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n1601-new_variable-262-262", method="claimReward_re_ent39()", type_label=new_variable];
1611 [label="262_ msg.sender.transfer(transferValue_re_ent39);\n1611-expression_statement-263-263", method="claimReward_re_ent39()", type_label=expression_statement];
1620 [label="263_ redeemableEther_re_ent39[msg.sender] = 0;\n1620-expression_statement-264-264", method="claimReward_re_ent39()", type_label=expression_statement];
1628 [label="265_ function activeBonusCacl_8() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1628-function_definition-266-269", method="activeBonusCacl_8()", type_label=function_definition];
1630 [label="265_ onlyOwner\n1630-expression_statement-266-266", method="activeBonusCacl_8()", type_label=expression_statement];
1634 [label="266_ require(msg.sender == owner, \"only owner can use this method\");\n1634-expression_statement-267-267", method="activeBonusCacl_8()", type_label=expression_statement];
1646 [label="267_ msg.sender.transfer(address(this).balance);\n1646-expression_statement-268-268", method="activeBonusCacl_8()", type_label=expression_statement];
1659 [label="269_ mapping(address => uint) balances_re_ent36;\n1659-new_variable-270-270", method="", type_label=new_variable];
1665 [label="270_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n1665-function_definition-271-274", method="withdraw_balances_re_ent36()", type_label=function_definition];
1669 [label="271_ if\n1669-if-272-273", method="withdraw_balances_re_ent36()", type_label=if];
3798 [label="271_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
1682 [label="272_ balances_re_ent36[msg.sender] = 0;\n1682-expression_statement-273-273", method="withdraw_balances_re_ent36()", type_label=expression_statement];
1690 [label="274_ function activeBonusCacl_9() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1690-function_definition-275-278", method="activeBonusCacl_9()", type_label=function_definition];
1692 [label="274_ onlyOwner\n1692-expression_statement-275-275", method="activeBonusCacl_9()", type_label=expression_statement];
1696 [label="275_ require(msg.sender == owner, \"only owner can use this method\");\n1696-expression_statement-276-276", method="activeBonusCacl_9()", type_label=expression_statement];
1708 [label="276_ msg.sender.transfer(address(this).balance);\n1708-expression_statement-277-277", method="activeBonusCacl_9()", type_label=expression_statement];
1721 [label="278_ uint256 counter_re_ent35 =0;\n1721-new_variable-279-279", method="", type_label=new_variable];
1726 [label="279_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n1726-function_definition-280-286", method="callme_re_ent35()", type_label=function_definition];
1730 [label="280_ require(counter_re_ent35<=5);\n1730-expression_statement-281-281", method="callme_re_ent35()", type_label=expression_statement];
1737 [label="281_ if\n1737-if-282-284", method="callme_re_ent35()", type_label=if];
3866 [label="281_ end_if", method="callme_re_ent35()", type_label=end_if];
1752 [label="284_ counter_re_ent35 += 1;\n1752-expression_statement-285-285", method="callme_re_ent35()", type_label=expression_statement];
1756 [label="286_ function teamAddBonusCacl() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1756-function_definition-287-290", method="teamAddBonusCacl()", type_label=function_definition];
1758 [label="286_ onlyOwner\n1758-expression_statement-287-287", method="teamAddBonusCacl()", type_label=expression_statement];
1762 [label="287_ require(msg.sender == owner, \"only owner can use this method\");\n1762-expression_statement-288-288", method="teamAddBonusCacl()", type_label=expression_statement];
1774 [label="288_ msg.sender.transfer(address(this).balance);\n1774-expression_statement-289-289", method="teamAddBonusCacl()", type_label=expression_statement];
1787 [label="290_ mapping(address => uint) userBalance_re_ent40;\n1787-new_variable-291-291", method="", type_label=new_variable];
1793 [label="291_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n1793-function_definition-292-298", method="withdrawBalance_re_ent40()", type_label=function_definition];
1797 [label="292_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n1797-new_variable-293-293", method="withdrawBalance_re_ent40()", type_label=new_variable];
1821 [label="293_ if\n1821-if-294-296", method="withdrawBalance_re_ent40()", type_label=if];
3950 [label="293_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
1827 [label="296_ userBalance_re_ent40[msg.sender] = 0;\n1827-expression_statement-297-297", method="withdrawBalance_re_ent40()", type_label=expression_statement];
1835 [label="298_ function caclTeamPerformance() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1835-function_definition-299-302", method="caclTeamPerformance()", type_label=function_definition];
1837 [label="298_ onlyOwner\n1837-expression_statement-299-299", method="caclTeamPerformance()", type_label=expression_statement];
1841 [label="299_ require(msg.sender == owner, \"only owner can use this method\");\n1841-expression_statement-300-300", method="caclTeamPerformance()", type_label=expression_statement];
1853 [label="300_ msg.sender.transfer(address(this).balance);\n1853-expression_statement-301-301", method="caclTeamPerformance()", type_label=expression_statement];
1866 [label="302_ mapping(address => uint) userBalance_re_ent33;\n1866-new_variable-303-303", method="", type_label=new_variable];
1872 [label="303_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n1872-function_definition-304-310", method="withdrawBalance_re_ent33()", type_label=function_definition];
1876 [label="304_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n1876-new_variable-305-305", method="withdrawBalance_re_ent33()", type_label=new_variable];
1900 [label="305_ if\n1900-if-306-308", method="withdrawBalance_re_ent33()", type_label=if];
4029 [label="305_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
1906 [label="308_ userBalance_re_ent33[msg.sender] = 0;\n1906-expression_statement-309-309", method="withdrawBalance_re_ent33()", type_label=expression_statement];
1914 [label="310_ function releaStaticBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1914-function_definition-311-314", method="releaStaticBonus()", type_label=function_definition];
1916 [label="310_ onlyOwner\n1916-expression_statement-311-311", method="releaStaticBonus()", type_label=expression_statement];
1920 [label="311_ require(msg.sender == owner, \"only owner can use this method\");\n1920-expression_statement-312-312", method="releaStaticBonus()", type_label=expression_statement];
1932 [label="312_ msg.sender.transfer(address(this).balance);\n1932-expression_statement-313-313", method="releaStaticBonus()", type_label=expression_statement];
1945 [label="314_ bool not_called_re_ent27 = true;\n1945-new_variable-315-315", method="", type_label=new_variable];
1951 [label="315_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n1951-function_definition-316-322", method="bug_re_ent27()", type_label=function_definition];
1955 [label="316_ require(not_called_re_ent27);\n1955-expression_statement-317-317", method="bug_re_ent27()", type_label=expression_statement];
1960 [label="317_ if\n1960-if-318-320", method="bug_re_ent27()", type_label=if];
4089 [label="317_ end_if", method="bug_re_ent27()", type_label=end_if];
1975 [label="320_ not_called_re_ent27 = false;\n1975-expression_statement-321-321", method="bug_re_ent27()", type_label=expression_statement];
1980 [label="322_ function releaActiveBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1980-function_definition-323-326", method="releaActiveBonus()", type_label=function_definition];
1982 [label="322_ onlyOwner\n1982-expression_statement-323-323", method="releaActiveBonus()", type_label=expression_statement];
1986 [label="323_ require(msg.sender == owner, \"only owner can use this method\");\n1986-expression_statement-324-324", method="releaActiveBonus()", type_label=expression_statement];
1998 [label="324_ msg.sender.transfer(address(this).balance);\n1998-expression_statement-325-325", method="releaActiveBonus()", type_label=expression_statement];
2011 [label="326_ mapping(address => uint) balances_re_ent31;\n2011-new_variable-327-327", method="", type_label=new_variable];
2017 [label="327_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n2017-function_definition-328-332", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
2025 [label="328_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n2025-expression_statement-329-329", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
2036 [label="329_ require(msg.sender.send(_weiToWithdraw));\n2036-expression_statement-330-330", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
2048 [label="330_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n2048-expression_statement-331-331", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
2056 [label="332_ function releaTeamAddBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n2056-function_definition-333-336", method="releaTeamAddBonus()", type_label=function_definition];
2058 [label="332_ onlyOwner\n2058-expression_statement-333-333", method="releaTeamAddBonus()", type_label=expression_statement];
2062 [label="333_ require(msg.sender == owner, \"only owner can use this method\");\n2062-expression_statement-334-334", method="releaTeamAddBonus()", type_label=expression_statement];
2074 [label="334_ msg.sender.transfer(address(this).balance);\n2074-expression_statement-335-335", method="releaTeamAddBonus()", type_label=expression_statement];
2087 [label="336_ bool not_called_re_ent13 = true;\n2087-new_variable-337-337", method="", type_label=new_variable];
2093 [label="337_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n2093-function_definition-338-345", method="bug_re_ent13()", type_label=function_definition];
2097 [label="338_ require(not_called_re_ent13);\n2097-expression_statement-339-339", method="bug_re_ent13()", type_label=expression_statement];
2102 [label="339_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n2102-new_variable-340-340", method="bug_re_ent13()", type_label=new_variable];
2123 [label="340_ if\n2123-if-341-343", method="bug_re_ent13()", type_label=if];
4252 [label="340_ end_if", method="bug_re_ent13()", type_label=end_if];
2129 [label="343_ not_called_re_ent13 = false;\n2129-expression_statement-344-344", method="bug_re_ent13()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 2159  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2159 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 2159  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
83 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
136 -> 143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
143 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
154 -> 158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
158 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 184  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
182 -> 2311  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2311 -> 192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
184 -> 2311  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
211 -> 215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
215 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 2349  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
243 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
254 -> 264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
264 -> 273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
282 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
293 -> 2422  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
322 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
334 -> 2463  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
345 -> 351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
359 -> 373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
373 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
460 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
481 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 2622  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
504 -> 510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
555 -> 563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
574 -> 594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
594 -> 599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 644  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
644 -> 662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
662 -> 2791  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
667 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
681 -> 687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
687 -> 699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
718 -> 722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
722 -> 733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
733 -> 743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
743 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
760 -> 766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
766 -> 778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
797 -> 801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
801 -> 2930  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
827 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
864 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
892 -> 3021  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
906 -> 912  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
912 -> 924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
947 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
952 -> 3081  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
972 -> 978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
978 -> 990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1009 -> 1013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1013 -> 1024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1024 -> 1034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1034 -> 1043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1051 -> 1057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1057 -> 1069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1088 -> 1096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1096 -> 1107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1107 -> 1119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1127 -> 1133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1133 -> 1145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1164 -> 1168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1168 -> 1179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1179 -> 1189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1189 -> 1198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1206 -> 1212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1212 -> 1224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1242 -> 1246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1246 -> 1253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1253 -> 3382  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1272 -> 1278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1278 -> 1290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1303 -> 1307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1311 -> 1315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1315 -> 3444  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1326 -> 1332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1340 -> 1346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1346 -> 1358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1376 -> 1380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1380 -> 1387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1387 -> 3516  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1406 -> 1412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1412 -> 1424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1437 -> 1441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1445 -> 1449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1449 -> 3578  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1460 -> 1466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1474 -> 1480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1480 -> 1492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1511 -> 1515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1515 -> 1539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1539 -> 1541  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1539 -> 3668  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3668 -> 1549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1541 -> 3668  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1549 -> 1555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1555 -> 1567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1586 -> 1590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1590 -> 1601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1601 -> 1611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1611 -> 1620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1628 -> 1634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1634 -> 1646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1665 -> 1669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1669 -> 1682  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1669 -> 3798  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3798 -> 1690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1682 -> 3798  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1690 -> 1696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1696 -> 1708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1726 -> 1730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1730 -> 1737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1737 -> 3866  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1756 -> 1762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1762 -> 1774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1793 -> 1797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1797 -> 1821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1821 -> 3950  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1835 -> 1841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1841 -> 1853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1872 -> 1876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1876 -> 1900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1900 -> 4029  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1914 -> 1920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1920 -> 1932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1951 -> 1955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1955 -> 1960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1960 -> 4089  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1980 -> 1986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1986 -> 1998  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2017 -> 2025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2025 -> 2036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2036 -> 2048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2056 -> 2062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2062 -> 2074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2093 -> 2097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2097 -> 2102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2102 -> 2123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2123 -> 4252  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
