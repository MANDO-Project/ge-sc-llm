digraph  {
13 [label="2_ bool not_called_re_ent27 = true;\n13-new_variable-3-3", method="", type_label=new_variable];
19 [label="3_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n19-function_definition-4-10", method="bug_re_ent27()", type_label=function_definition];
23 [label="4_ require(not_called_re_ent27);\n23-expression_statement-5-5", method="bug_re_ent27()", type_label=expression_statement];
28 [label="5_ if\n28-if-6-8", method="bug_re_ent27()", type_label=if];
1412 [label="5_ end_if", method="bug_re_ent27()", type_label=end_if];
43 [label="8_ not_called_re_ent27 = false;\n43-expression_statement-9-9", method="bug_re_ent27()", type_label=expression_statement];
62 [label="11_ mapping(address => uint) balances_re_ent31;\n62-new_variable-12-12", method="", type_label=new_variable];
68 [label="12_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n68-function_definition-13-17", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
76 [label="13_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n76-expression_statement-14-14", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
87 [label="14_ require(msg.sender.send(_weiToWithdraw));\n87-expression_statement-15-15", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
99 [label="15_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n99-expression_statement-16-16", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
121 [label="18_ bool not_called_re_ent13 = true;\n121-new_variable-19-19", method="", type_label=new_variable];
127 [label="19_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n127-function_definition-20-27", method="bug_re_ent13()", type_label=function_definition];
131 [label="20_ require(not_called_re_ent13);\n131-expression_statement-21-21", method="bug_re_ent13()", type_label=expression_statement];
136 [label="21_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n136-new_variable-22-22", method="bug_re_ent13()", type_label=new_variable];
157 [label="22_ if\n157-if-23-25", method="bug_re_ent13()", type_label=if];
1541 [label="22_ end_if", method="bug_re_ent13()", type_label=end_if];
163 [label="25_ not_called_re_ent13 = false;\n163-expression_statement-26-26", method="bug_re_ent13()", type_label=expression_statement];
182 [label="28_ mapping(address => uint) redeemableEther_re_ent25;\n182-new_variable-29-29", method="", type_label=new_variable];
188 [label="29_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n188-function_definition-30-35", method="claimReward_re_ent25()", type_label=function_definition];
192 [label="30_ require(redeemableEther_re_ent25[msg.sender] > 0);\n192-expression_statement-31-31", method="claimReward_re_ent25()", type_label=expression_statement];
203 [label="31_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n203-new_variable-32-32", method="claimReward_re_ent25()", type_label=new_variable];
213 [label="32_ msg.sender.transfer(transferValue_re_ent25);\n213-expression_statement-33-33", method="claimReward_re_ent25()", type_label=expression_statement];
222 [label="33_ redeemableEther_re_ent25[msg.sender] = 0;\n222-expression_statement-34-34", method="claimReward_re_ent25()", type_label=expression_statement];
230 [label="35_ uint256 public totalSupply;\n230-new_variable-36-36", method="", type_label=new_variable];
235 [label="36_ mapping(address => uint) userBalance_re_ent19;\n235-new_variable-37-37", method="", type_label=new_variable];
241 [label="37_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n241-function_definition-38-43", method="withdrawBalance_re_ent19()", type_label=function_definition];
245 [label="38_ if\n245-if-39-41", method="withdrawBalance_re_ent19()", type_label=if];
1629 [label="38_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
263 [label="41_ userBalance_re_ent19[msg.sender] = 0;\n263-expression_statement-42-42", method="withdrawBalance_re_ent19()", type_label=expression_statement];
271 [label="43_ string public name;\n271-new_variable-44-44", method="", type_label=new_variable];
276 [label="44_ mapping(address => uint) userBalance_re_ent26;\n276-new_variable-45-45", method="", type_label=new_variable];
282 [label="45_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n282-function_definition-46-52", method="withdrawBalance_re_ent26()", type_label=function_definition];
286 [label="46_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n286-new_variable-47-47", method="withdrawBalance_re_ent26()", type_label=new_variable];
310 [label="47_ if\n310-if-48-50", method="withdrawBalance_re_ent26()", type_label=if];
1694 [label="47_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
316 [label="50_ userBalance_re_ent26[msg.sender] = 0;\n316-expression_statement-51-51", method="withdrawBalance_re_ent26()", type_label=expression_statement];
324 [label="52_ uint8 public decimals;\n324-new_variable-53-53", method="", type_label=new_variable];
329 [label="53_ bool not_called_re_ent20 = true;\n329-new_variable-54-54", method="", type_label=new_variable];
335 [label="54_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n335-function_definition-55-61", method="bug_re_ent20()", type_label=function_definition];
339 [label="55_ require(not_called_re_ent20);\n339-expression_statement-56-56", method="bug_re_ent20()", type_label=expression_statement];
344 [label="56_ if\n344-if-57-59", method="bug_re_ent20()", type_label=if];
1728 [label="56_ end_if", method="bug_re_ent20()", type_label=end_if];
359 [label="59_ not_called_re_ent20 = false;\n359-expression_statement-60-60", method="bug_re_ent20()", type_label=expression_statement];
364 [label="61_ string public symbol;\n364-new_variable-62-62", method="", type_label=new_variable];
369 [label="62_ mapping(address => uint) redeemableEther_re_ent32;\n369-new_variable-63-63", method="", type_label=new_variable];
375 [label="63_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n375-function_definition-64-69", method="claimReward_re_ent32()", type_label=function_definition];
379 [label="64_ require(redeemableEther_re_ent32[msg.sender] > 0);\n379-expression_statement-65-65", method="claimReward_re_ent32()", type_label=expression_statement];
390 [label="65_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n390-new_variable-66-66", method="claimReward_re_ent32()", type_label=new_variable];
400 [label="66_ msg.sender.transfer(transferValue_re_ent32);\n400-expression_statement-67-67", method="claimReward_re_ent32()", type_label=expression_statement];
409 [label="67_ redeemableEther_re_ent32[msg.sender] = 0;\n409-expression_statement-68-68", method="claimReward_re_ent32()", type_label=expression_statement];
417 [label="69_ address public owner;\n417-new_variable-70-70", method="", type_label=new_variable];
422 [label="70_ mapping(address => uint) balances_re_ent38;\n422-new_variable-71-71", method="", type_label=new_variable];
428 [label="71_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n428-function_definition-72-76", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
436 [label="72_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n436-expression_statement-73-73", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
447 [label="73_ require(msg.sender.send(_weiToWithdraw));\n447-expression_statement-74-74", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
459 [label="74_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n459-expression_statement-75-75", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
467 [label="76_ mapping (address => uint256) public balances;\n467-new_variable-77-77", method="", type_label=new_variable];
474 [label="77_ mapping(address => uint) redeemableEther_re_ent4;\n474-new_variable-78-78", method="", type_label=new_variable];
480 [label="78_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n480-function_definition-79-84", method="claimReward_re_ent4()", type_label=function_definition];
484 [label="79_ require(redeemableEther_re_ent4[msg.sender] > 0);\n484-expression_statement-80-80", method="claimReward_re_ent4()", type_label=expression_statement];
495 [label="80_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n495-new_variable-81-81", method="claimReward_re_ent4()", type_label=new_variable];
505 [label="81_ msg.sender.transfer(transferValue_re_ent4);\n505-expression_statement-82-82", method="claimReward_re_ent4()", type_label=expression_statement];
514 [label="82_ redeemableEther_re_ent4[msg.sender] = 0;\n514-expression_statement-83-83", method="claimReward_re_ent4()", type_label=expression_statement];
522 [label="84_ mapping (address => mapping (address => uint256)) public allowed;\n522-new_variable-85-85", method="", type_label=new_variable];
531 [label="85_ uint256 counter_re_ent7 =0;\n531-new_variable-86-86", method="", type_label=new_variable];
536 [label="86_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n536-function_definition-87-93", method="callme_re_ent7()", type_label=function_definition];
540 [label="87_ require(counter_re_ent7<=5);\n540-expression_statement-88-88", method="callme_re_ent7()", type_label=expression_statement];
547 [label="88_ if\n547-if-89-91", method="callme_re_ent7()", type_label=if];
1931 [label="88_ end_if", method="callme_re_ent7()", type_label=end_if];
562 [label="91_ counter_re_ent7 += 1;\n562-expression_statement-92-92", method="callme_re_ent7()", type_label=expression_statement];
566 [label="93_ bool isTransPaused=false;\n566-new_variable-94-94", method="", type_label=new_variable];
582 [label="98_ owner=msg.sender;\n582-expression_statement-99-99", method="", type_label=expression_statement];
588 [label="99_ if__initialAmount<=0\n588-if-100-106", method="", type_label=if];
1972 [label="99_ end_if", method="", type_label=end_if];
593 [label="100_ totalSupply = 100000000000000000;\n593-expression_statement-101-101", method="", type_label=expression_statement];
597 [label="101_ balances[owner]=totalSupply;\n597-expression_statement-102-102", method="", type_label=expression_statement];
604 [label="103_ totalSupply = _initialAmount;\n604-expression_statement-104-104", method="", type_label=expression_statement];
608 [label="104_ balances[owner]=_initialAmount;\n608-expression_statement-105-105", method="", type_label=expression_statement];
614 [label="106_ if__decimalUnits<=0\n614-if-107-111", method="", type_label=if];
1998 [label="106_ end_if", method="", type_label=end_if];
619 [label="107_ decimals=2;\n619-expression_statement-108-108", method="", type_label=expression_statement];
624 [label="109_ decimals = _decimalUnits;\n624-expression_statement-110-110", method="", type_label=expression_statement];
628 [label="111_ name = \"CareerOn Chain Token\";\n628-expression_statement-112-112", method="", type_label=expression_statement];
633 [label="112_ symbol = \"COT\";\n633-expression_statement-113-113", method="", type_label=expression_statement];
638 [label="114_ address payable lastPlayer_re_ent23;\n638-new_variable-115-115", method="", type_label=new_variable];
642 [label="115_ uint jackpot_re_ent23;\n642-new_variable-116-116", method="", type_label=new_variable];
646 [label="116_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n646-function_definition-117-122", method="buyTicket_re_ent23()", type_label=function_definition];
650 [label="117_ if\n650-if-118-119", method="buyTicket_re_ent23()", type_label=if];
2034 [label="117_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
661 [label="119_ lastPlayer_re_ent23 = msg.sender;\n661-expression_statement-120-120", method="buyTicket_re_ent23()", type_label=expression_statement];
667 [label="120_ jackpot_re_ent23    = address(this).balance;\n667-expression_statement-121-121", method="buyTicket_re_ent23()", type_label=expression_statement];
675 [label="122_ function transfer(\n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n        balances[msg.sender] -= _value; \n        balances[_to] += _value; \n		if(msg.sender==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(msg.sender, _to, _value); \n		}\n        return true;\n    }\n675-function_definition-123-140", method="transfer(address _to,uint256 _value)", type_label=function_definition];
692 [label="126_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n692-expression_statement-127-131", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
722 [label="131_ balances[msg.sender] -= _value;\n722-expression_statement-132-132", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
730 [label="132_ balances[_to] += _value;\n730-expression_statement-133-133", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
736 [label="133_ if_msg.sender==owner\n736-if-134-138", method="transfer(address _to,uint256 _value)", type_label=if];
2120 [label="133_ end_if", method="transfer(address _to,uint256 _value)", type_label=end_if];
764 [label="138_ return true;\n764-return-139-139", method="transfer(address _to,uint256 _value)", type_label=return];
767 [label="140_ uint256 counter_re_ent14 =0;\n767-new_variable-141-141", method="", type_label=new_variable];
772 [label="141_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n772-function_definition-142-148", method="callme_re_ent14()", type_label=function_definition];
776 [label="142_ require(counter_re_ent14<=5);\n776-expression_statement-143-143", method="callme_re_ent14()", type_label=expression_statement];
783 [label="143_ if\n783-if-144-146", method="callme_re_ent14()", type_label=if];
2167 [label="143_ end_if", method="callme_re_ent14()", type_label=end_if];
798 [label="146_ counter_re_ent14 += 1;\n798-expression_statement-147-147", method="callme_re_ent14()", type_label=expression_statement];
802 [label="148_ function transferFrom(\n        address _from, \n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n        balances[_to] += _value; \n        balances[_from] -= _value;  \n        allowed[_from][msg.sender] -= _value; \n        if(_from==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(_from, _to, _value); \n		}\n        return true;\n    }\n802-function_definition-149-169", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
823 [label="153_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n823-expression_statement-154-159", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
863 [label="159_ balances[_to] += _value;\n863-expression_statement-160-160", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
869 [label="160_ balances[_from] -= _value;\n869-expression_statement-161-161", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
875 [label="161_ allowed[_from][msg.sender] -= _value;\n875-expression_statement-162-162", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
885 [label="162_ if__from==owner\n885-if-163-167", method="transferFrom(address _from,address _to,uint256 _value)", type_label=if];
2269 [label="162_ end_if", method="transferFrom(address _from,address _to,uint256 _value)", type_label=end_if];
909 [label="167_ return true;\n909-return-168-168", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
912 [label="169_ address payable lastPlayer_re_ent30;\n912-new_variable-170-170", method="", type_label=new_variable];
916 [label="170_ uint jackpot_re_ent30;\n916-new_variable-171-171", method="", type_label=new_variable];
920 [label="171_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n920-function_definition-172-177", method="buyTicket_re_ent30()", type_label=function_definition];
924 [label="172_ if\n924-if-173-174", method="buyTicket_re_ent30()", type_label=if];
2308 [label="172_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
935 [label="174_ lastPlayer_re_ent30 = msg.sender;\n935-expression_statement-175-175", method="buyTicket_re_ent30()", type_label=expression_statement];
941 [label="175_ jackpot_re_ent30    = address(this).balance;\n941-expression_statement-176-176", method="buyTicket_re_ent30()", type_label=expression_statement];
949 [label="177_ function approve(address _spender, uint256 _value) public returns (bool success) \n    { \n        assert(msg.sender!=_spender && _value>0);\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n949-function_definition-178-184", method="approve(address _spender,uint256 _value)", type_label=function_definition];
966 [label="179_ assert(msg.sender!=_spender && _value>0);\n966-expression_statement-180-180", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
979 [label="180_ allowed[msg.sender][_spender] = _value;\n979-expression_statement-181-181", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
999 [label="182_ return true;\n999-return-183-183", method="approve(address _spender,uint256 _value)", type_label=return];
1002 [label="184_ mapping(address => uint) balances_re_ent8;\n1002-new_variable-185-185", method="", type_label=new_variable];
1008 [label="185_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n1008-function_definition-186-190", method="withdraw_balances_re_ent8()", type_label=function_definition];
1012 [label="186_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n1012-new_variable-187-187", method="withdraw_balances_re_ent8()", type_label=new_variable];
1036 [label="187_ if\n1036-if-188-189", method="withdraw_balances_re_ent8()", type_label=if];
2420 [label="187_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
1038 [label="188_ balances_re_ent8[msg.sender] = 0;\n1038-expression_statement-189-189", method="withdraw_balances_re_ent8()", type_label=expression_statement];
1046 [label="190_ function allowance(\n        address _owner, \n        address _spender) public view returns (uint256 remaining) \n    {\n        return allowed[_owner][_spender]; \n    }\n1046-function_definition-191-196", method="allowance(address _owner,address _spender)", type_label=function_definition];
1064 [label="194_ return allowed[_owner][_spender];\n1064-return-195-195", method="allowance(address _owner,address _spender)", type_label=return];
1070 [label="196_ mapping(address => uint) redeemableEther_re_ent39;\n1070-new_variable-197-197", method="", type_label=new_variable];
1076 [label="197_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n1076-function_definition-198-203", method="claimReward_re_ent39()", type_label=function_definition];
1080 [label="198_ require(redeemableEther_re_ent39[msg.sender] > 0);\n1080-expression_statement-199-199", method="claimReward_re_ent39()", type_label=expression_statement];
1091 [label="199_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n1091-new_variable-200-200", method="claimReward_re_ent39()", type_label=new_variable];
1101 [label="200_ msg.sender.transfer(transferValue_re_ent39);\n1101-expression_statement-201-201", method="claimReward_re_ent39()", type_label=expression_statement];
1110 [label="201_ redeemableEther_re_ent39[msg.sender] = 0;\n1110-expression_statement-202-202", method="claimReward_re_ent39()", type_label=expression_statement];
1118 [label="203_ function changeOwner(address newOwner) public{\n        assert(msg.sender==owner && msg.sender!=newOwner);\n        balances[newOwner]=balances[owner];\n        balances[owner]=0;\n        owner=newOwner;\n        emit OwnerChang(msg.sender,newOwner,balances[owner]); \n    }\n1118-function_definition-204-210", method="changeOwner(address newOwner)", type_label=function_definition];
1126 [label="204_ assert(msg.sender==owner && msg.sender!=newOwner);\n1126-expression_statement-205-205", method="changeOwner(address newOwner)", type_label=expression_statement];
1141 [label="205_ balances[newOwner]=balances[owner];\n1141-expression_statement-206-206", method="changeOwner(address newOwner)", type_label=expression_statement];
1149 [label="206_ balances[owner]=0;\n1149-expression_statement-207-207", method="changeOwner(address newOwner)", type_label=expression_statement];
1155 [label="207_ owner=newOwner;\n1155-expression_statement-208-208", method="changeOwner(address newOwner)", type_label=expression_statement];
1171 [label="210_ mapping(address => uint) balances_re_ent36;\n1171-new_variable-211-211", method="", type_label=new_variable];
1177 [label="211_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n1177-function_definition-212-215", method="withdraw_balances_re_ent36()", type_label=function_definition];
1181 [label="212_ if\n1181-if-213-214", method="withdraw_balances_re_ent36()", type_label=if];
2565 [label="212_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
1194 [label="213_ balances_re_ent36[msg.sender] = 0;\n1194-expression_statement-214-214", method="withdraw_balances_re_ent36()", type_label=expression_statement];
1202 [label="215_ function setPauseStatus(bool isPaused)public{\n        assert(msg.sender==owner);\n        isTransPaused=isPaused;\n    }\n1202-function_definition-216-219", method="setPauseStatus(bool isPaused)", type_label=function_definition];
1210 [label="216_ assert(msg.sender==owner);\n1210-expression_statement-217-217", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
1219 [label="217_ isTransPaused=isPaused;\n1219-expression_statement-218-218", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
1223 [label="219_ uint256 counter_re_ent35 =0;\n1223-new_variable-220-220", method="", type_label=new_variable];
1228 [label="220_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n1228-function_definition-221-227", method="callme_re_ent35()", type_label=function_definition];
1232 [label="221_ require(counter_re_ent35<=5);\n1232-expression_statement-222-222", method="callme_re_ent35()", type_label=expression_statement];
1239 [label="222_ if\n1239-if-223-225", method="callme_re_ent35()", type_label=if];
2623 [label="222_ end_if", method="callme_re_ent35()", type_label=end_if];
1254 [label="225_ counter_re_ent35 += 1;\n1254-expression_statement-226-226", method="callme_re_ent35()", type_label=expression_statement];
1258 [label="227_ function changeContractName(string memory _newName,string memory _newSymbol) public {\n        assert(msg.sender==owner);\n        name=_newName;\n        symbol=_newSymbol;\n    }\n1258-function_definition-228-232", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=function_definition];
1270 [label="228_ assert(msg.sender==owner);\n1270-expression_statement-229-229", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1279 [label="229_ name=_newName;\n1279-expression_statement-230-230", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1283 [label="230_ symbol=_newSymbol;\n1283-expression_statement-231-231", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1287 [label="232_ mapping(address => uint) userBalance_re_ent40;\n1287-new_variable-233-233", method="", type_label=new_variable];
1293 [label="233_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n1293-function_definition-234-240", method="withdrawBalance_re_ent40()", type_label=function_definition];
1297 [label="234_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n1297-new_variable-235-235", method="withdrawBalance_re_ent40()", type_label=new_variable];
1321 [label="235_ if\n1321-if-236-238", method="withdrawBalance_re_ent40()", type_label=if];
2705 [label="235_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
1327 [label="238_ userBalance_re_ent40[msg.sender] = 0;\n1327-expression_statement-239-239", method="withdrawBalance_re_ent40()", type_label=expression_statement];
1341 [label="243_ mapping(address => uint) userBalance_re_ent33;\n1341-new_variable-244-244", method="", type_label=new_variable];
1347 [label="244_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n1347-function_definition-245-251", method="withdrawBalance_re_ent33()", type_label=function_definition];
1351 [label="245_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n1351-new_variable-246-246", method="withdrawBalance_re_ent33()", type_label=new_variable];
1375 [label="246_ if\n1375-if-247-249", method="withdrawBalance_re_ent33()", type_label=if];
2759 [label="246_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
1381 [label="249_ userBalance_re_ent33[msg.sender] = 0;\n1381-expression_statement-250-250", method="withdrawBalance_re_ent33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
754;
901;
19 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
23 -> 28  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
28 -> 1412  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
68 -> 76  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
76 -> 87  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
136 -> 157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
157 -> 1541  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
188 -> 192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
192 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
203 -> 213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
213 -> 222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
241 -> 245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
245 -> 1629  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
271 -> 276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
282 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 1694  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
324 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
335 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
344 -> 1728  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
364 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
375 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
390 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
484 -> 495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
522 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
536 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
547 -> 1931  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
582 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 593  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
588 -> 604  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1972 -> 614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 1972  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
604 -> 608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
608 -> 1972  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
614 -> 619  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
614 -> 624  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1998 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
619 -> 1998  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
624 -> 1998  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
628 -> 633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
646 -> 650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
650 -> 2034  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
661 -> 667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
675 -> 692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
692 -> 722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
722 -> 730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
730 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
764 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
772 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
776 -> 783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
783 -> 2167  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
802 -> 823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
823 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
863 -> 869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
869 -> 875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
875 -> 885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
909 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
912 -> 916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
920 -> 924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
924 -> 2308  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
935 -> 941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
966 -> 979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1008 -> 1012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1012 -> 1036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1036 -> 1038  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1036 -> 2420  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2420 -> 1046  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 2420  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1046 -> 1064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1064 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1076 -> 1080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1080 -> 1091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1091 -> 1101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1101 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1118 -> 1126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1126 -> 1141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1141 -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1149 -> 1155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1177 -> 1181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1181 -> 1194  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1181 -> 2565  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2565 -> 1202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1194 -> 2565  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1202 -> 1210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1210 -> 1219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 1232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1232 -> 1239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1239 -> 2623  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1258 -> 1270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1270 -> 1279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1279 -> 1283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1293 -> 1297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1297 -> 1321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1321 -> 2705  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1347 -> 1351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1351 -> 1375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1375 -> 2759  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
754 -> 2120  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
901 -> 2269  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
