digraph  {
12 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n12-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
29 [label="3_ if_a == 0\n29-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
3654 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
34 [label="4_ return 0;\n34-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
36 [label="6_ uint256 c = a * b;\n36-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
44 [label="7_ require(c / a == b);\n44-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
53 [label="8_ return c;\n53-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
55 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);  \n        uint256 c = a / b;\n        return c;\n    }\n55-function_definition-11-15", method="div(uint256 a,uint256 b)", type_label=function_definition];
72 [label="11_ require(b > 0);\n72-expression_statement-12-12", method="div(uint256 a,uint256 b)", type_label=expression_statement];
79 [label="12_ uint256 c = a / b;\n79-new_variable-13-13", method="div(uint256 a,uint256 b)", type_label=new_variable];
87 [label="13_ return c;\n87-return-14-14", method="div(uint256 a,uint256 b)", type_label=return];
89 [label="15_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n89-function_definition-16-20", method="sub(uint256 a,uint256 b)", type_label=function_definition];
106 [label="16_ require(b <= a);\n106-expression_statement-17-17", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
113 [label="17_ uint256 c = a - b;\n113-new_variable-18-18", method="sub(uint256 a,uint256 b)", type_label=new_variable];
121 [label="18_ return c;\n121-return-19-19", method="sub(uint256 a,uint256 b)", type_label=return];
123 [label="20_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n123-function_definition-21-25", method="add(uint256 a,uint256 b)", type_label=function_definition];
140 [label="21_ uint256 c = a + b;\n140-new_variable-22-22", method="add(uint256 a,uint256 b)", type_label=new_variable];
148 [label="22_ require(c >= a);\n148-expression_statement-23-23", method="add(uint256 a,uint256 b)", type_label=expression_statement];
155 [label="23_ return c;\n155-return-24-24", method="add(uint256 a,uint256 b)", type_label=return];
157 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n157-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
174 [label="26_ require(b != 0);\n174-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
181 [label="27_ return a % b;\n181-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
193 [label="32_ struct participant {\n        address eth_address;  \n        uint256 topl_address;  \n        uint256 arbits;  \n        uint256 num_of_pro_rata_tokens_alloted;\n        bool arbits_kyc_whitelist;  \n        uint8 num_of_uses;\n    }\n193-expression_statement-33-40", method="participant()", type_label=expression_statement];
219 [label="40_ mapping(address => bool) public sale_owners;\n219-new_variable-41-41", method="", type_label=new_variable];
226 [label="41_ mapping(address => bool) public owners;\n226-new_variable-42-42", method="", type_label=new_variable];
233 [label="42_ mapping(address => bool) public masters;\n233-new_variable-43-43", method="", type_label=new_variable];
240 [label="43_ mapping(address => bool) public kycers;\n240-new_variable-44-44", method="", type_label=new_variable];
247 [label="44_ mapping(address => participant) public participants;\n247-new_variable-45-45", method="", type_label=new_variable];
255 [label="45_ address[] public participant_keys;\n255-new_variable-46-46", method="", type_label=new_variable];
261 [label="46_ bool public arbits_presale_open = false;\n261-new_variable-47-47", method="", type_label=new_variable];
268 [label="47_ bool public iconiq_presale_open = false;\n268-new_variable-48-48", method="", type_label=new_variable];
275 [label="48_ bool public arbits_sale_open = false;\n275-new_variable-49-49", method="", type_label=new_variable];
282 [label="49_ uint256 public pre_kyc_bonus_denominator;\n282-new_variable-50-50", method="", type_label=new_variable];
287 [label="50_ uint256 public pre_kyc_bonus_numerator;\n287-new_variable-51-51", method="", type_label=new_variable];
292 [label="51_ uint256 public pre_kyc_iconiq_bonus_denominator;\n292-new_variable-52-52", method="", type_label=new_variable];
297 [label="52_ uint256 public pre_kyc_iconiq_bonus_numerator;\n297-new_variable-53-53", method="", type_label=new_variable];
302 [label="53_ uint256 public contrib_arbits_min;\n302-new_variable-54-54", method="", type_label=new_variable];
307 [label="54_ uint256 public contrib_arbits_max;\n307-new_variable-55-55", method="", type_label=new_variable];
312 [label="55_ uint256 public presale_arbits_per_ether;\n312-new_variable-56-56", method="", type_label=new_variable];
317 [label="56_ uint256 public presale_iconiq_arbits_per_ether;\n317-new_variable-57-57", method="", type_label=new_variable];
322 [label="57_ uint256 public presale_arbits_total = 18000000;\n322-new_variable-58-58", method="", type_label=new_variable];
328 [label="58_ uint256 public presale_arbits_sold;\n328-new_variable-59-59", method="", type_label=new_variable];
333 [label="59_ uint256 public sale_arbits_per_ether;\n333-new_variable-60-60", method="", type_label=new_variable];
338 [label="60_ uint256 public sale_arbits_total;\n338-new_variable-61-61", method="", type_label=new_variable];
343 [label="61_ uint256 public sale_arbits_sold;\n343-new_variable-62-62", method="", type_label=new_variable];
350 [label="63_ owners[msg.sender] = true;\n350-expression_statement-64-64", method="", type_label=expression_statement];
359 [label="65_ function add_owner(address __subject) public only_owner {\n        owners[__subject] = true;\n    }\n359-function_definition-66-68", method="add_owner(address __subject)", type_label=function_definition];
366 [label="65_ only_owner\n366-expression_statement-66-66", method="add_owner(address __subject)", type_label=expression_statement];
369 [label="66_ owners[__subject] = true;\n369-expression_statement-67-67", method="add_owner(address __subject)", type_label=expression_statement];
376 [label="68_ function remove_owner(address __subject) public only_owner {\n        owners[__subject] = false;\n    }\n376-function_definition-69-71", method="remove_owner(address __subject)", type_label=function_definition];
383 [label="68_ only_owner\n383-expression_statement-69-69", method="remove_owner(address __subject)", type_label=expression_statement];
386 [label="69_ owners[__subject] = false;\n386-expression_statement-70-70", method="remove_owner(address __subject)", type_label=expression_statement];
393 [label="71_ function add_master(address _subject) public only_owner {\n        masters[_subject] = true;\n    }\n393-function_definition-72-74", method="add_master(address _subject)", type_label=function_definition];
400 [label="71_ only_owner\n400-expression_statement-72-72", method="add_master(address _subject)", type_label=expression_statement];
403 [label="72_ masters[_subject] = true;\n403-expression_statement-73-73", method="add_master(address _subject)", type_label=expression_statement];
410 [label="74_ function remove_master(address _subject) public only_owner {\n        masters[_subject] = false;\n    }\n410-function_definition-75-77", method="remove_master(address _subject)", type_label=function_definition];
417 [label="74_ only_owner\n417-expression_statement-75-75", method="remove_master(address _subject)", type_label=expression_statement];
420 [label="75_ masters[_subject] = false;\n420-expression_statement-76-76", method="remove_master(address _subject)", type_label=expression_statement];
427 [label="77_ function add_kycer(address _subject) public only_owner {\n        kycers[_subject] = true;\n    }\n427-function_definition-78-80", method="add_kycer(address _subject)", type_label=function_definition];
434 [label="77_ only_owner\n434-expression_statement-78-78", method="add_kycer(address _subject)", type_label=expression_statement];
437 [label="78_ kycers[_subject] = true;\n437-expression_statement-79-79", method="add_kycer(address _subject)", type_label=expression_statement];
444 [label="80_ function remove_kycer(address _subject) public only_owner {\n        kycers[_subject] = false;\n    }\n444-function_definition-81-83", method="remove_kycer(address _subject)", type_label=function_definition];
451 [label="80_ only_owner\n451-expression_statement-81-81", method="remove_kycer(address _subject)", type_label=expression_statement];
454 [label="81_ kycers[_subject] = false;\n454-expression_statement-82-82", method="remove_kycer(address _subject)", type_label=expression_statement];
461 [label="83_ modifier log_participant_update(address __eth_address) {\n        participant_keys.push(__eth_address);  \n        _;\n    }\n461-expression_statement-84-87", method="", type_label=expression_statement];
468 [label="84_ participant_keys.push(__eth_address);\n468-expression_statement-85-85", method="", type_label=expression_statement];
475 [label="85_ _;\n475-expression_statement-86-86", method="", type_label=expression_statement];
477 [label="87_ modifier only_owner() {\n        require(owners[msg.sender]);\n        _;\n    }\n477-expression_statement-88-91", method="", type_label=expression_statement];
480 [label="88_ require(owners[msg.sender]);\n480-expression_statement-89-89", method="", type_label=expression_statement];
489 [label="89_ _;\n489-expression_statement-90-90", method="", type_label=expression_statement];
491 [label="91_ modifier only_kycer() {\n        require(kycers[msg.sender]);\n        _;\n    }\n491-expression_statement-92-95", method="", type_label=expression_statement];
494 [label="92_ require(kycers[msg.sender]);\n494-expression_statement-93-93", method="", type_label=expression_statement];
503 [label="93_ _;\n503-expression_statement-94-94", method="", type_label=expression_statement];
505 [label="95_ modifier only_master_or_owner() {\n        require(masters[msg.sender] || owners[msg.sender]);\n        _;\n    }\n505-expression_statement-96-99", method="", type_label=expression_statement];
508 [label="96_ require(masters[msg.sender] || owners[msg.sender]);\n508-expression_statement-97-97", method="", type_label=expression_statement];
523 [label="97_ _;\n523-expression_statement-98-98", method="", type_label=expression_statement];
525 [label="99_ function get_sale_owner(address _a) public view returns(bool) {\n        return sale_owners[_a];\n    }\n525-function_definition-100-102", method="get_sale_owner(address _a)", type_label=function_definition];
538 [label="100_ return sale_owners[_a];\n538-return-101-101", method="get_sale_owner(address _a)", type_label=return];
542 [label="102_ function get_contrib_arbits_min() public view returns(uint256) {\n        return contrib_arbits_min;\n    }\n542-function_definition-103-105", method="get_contrib_arbits_min()", type_label=function_definition];
551 [label="103_ return contrib_arbits_min;\n551-return-104-104", method="get_contrib_arbits_min()", type_label=return];
553 [label="105_ function get_contrib_arbits_max() public view returns(uint256) {\n        return contrib_arbits_max;\n    }\n553-function_definition-106-108", method="get_contrib_arbits_max()", type_label=function_definition];
562 [label="106_ return contrib_arbits_max;\n562-return-107-107", method="get_contrib_arbits_max()", type_label=return];
564 [label="108_ function get_pre_kyc_bonus_numerator() public view returns(uint256) {\n        return pre_kyc_bonus_numerator;\n    }\n564-function_definition-109-111", method="get_pre_kyc_bonus_numerator()", type_label=function_definition];
573 [label="109_ return pre_kyc_bonus_numerator;\n573-return-110-110", method="get_pre_kyc_bonus_numerator()", type_label=return];
575 [label="111_ function get_pre_kyc_bonus_denominator() public view returns(uint256) {\n        return pre_kyc_bonus_denominator;\n    }\n575-function_definition-112-114", method="get_pre_kyc_bonus_denominator()", type_label=function_definition];
584 [label="112_ return pre_kyc_bonus_denominator;\n584-return-113-113", method="get_pre_kyc_bonus_denominator()", type_label=return];
586 [label="114_ function get_pre_kyc_iconiq_bonus_numerator() public view returns(uint256) {\n        return pre_kyc_iconiq_bonus_numerator;\n    }\n586-function_definition-115-117", method="get_pre_kyc_iconiq_bonus_numerator()", type_label=function_definition];
595 [label="115_ return pre_kyc_iconiq_bonus_numerator;\n595-return-116-116", method="get_pre_kyc_iconiq_bonus_numerator()", type_label=return];
597 [label="117_ function get_pre_kyc_iconiq_bonus_denominator() public view returns(uint256) {\n        return pre_kyc_iconiq_bonus_denominator;\n    }\n597-function_definition-118-120", method="get_pre_kyc_iconiq_bonus_denominator()", type_label=function_definition];
606 [label="118_ return pre_kyc_iconiq_bonus_denominator;\n606-return-119-119", method="get_pre_kyc_iconiq_bonus_denominator()", type_label=return];
608 [label="120_ function get_presale_iconiq_arbits_per_ether() public view returns(uint256) {\n        return (presale_iconiq_arbits_per_ether);\n    }\n608-function_definition-121-123", method="get_presale_iconiq_arbits_per_ether()", type_label=function_definition];
617 [label="121_ return (presale_iconiq_arbits_per_ether);\n617-return-122-122", method="get_presale_iconiq_arbits_per_ether()", type_label=return];
620 [label="123_ function get_presale_arbits_per_ether() public view returns(uint256) {\n        return (presale_arbits_per_ether);\n    }\n620-function_definition-124-126", method="get_presale_arbits_per_ether()", type_label=function_definition];
629 [label="124_ return (presale_arbits_per_ether);\n629-return-125-125", method="get_presale_arbits_per_ether()", type_label=return];
632 [label="126_ function get_presale_arbits_total() public view returns(uint256) {\n        return (presale_arbits_total);\n    }\n632-function_definition-127-129", method="get_presale_arbits_total()", type_label=function_definition];
641 [label="127_ return (presale_arbits_total);\n641-return-128-128", method="get_presale_arbits_total()", type_label=return];
644 [label="129_ function get_presale_arbits_sold() public view returns(uint256) {\n        return (presale_arbits_sold);\n    }\n644-function_definition-130-132", method="get_presale_arbits_sold()", type_label=function_definition];
653 [label="130_ return (presale_arbits_sold);\n653-return-131-131", method="get_presale_arbits_sold()", type_label=return];
656 [label="132_ function get_sale_arbits_per_ether() public view returns(uint256) {\n        return (sale_arbits_per_ether);\n    }\n656-function_definition-133-135", method="get_sale_arbits_per_ether()", type_label=function_definition];
665 [label="133_ return (sale_arbits_per_ether);\n665-return-134-134", method="get_sale_arbits_per_ether()", type_label=return];
668 [label="135_ function get_sale_arbits_total() public view returns(uint256) {\n        return (sale_arbits_total);\n    }\n668-function_definition-136-138", method="get_sale_arbits_total()", type_label=function_definition];
677 [label="136_ return (sale_arbits_total);\n677-return-137-137", method="get_sale_arbits_total()", type_label=return];
680 [label="138_ function get_sale_arbits_sold() public view returns(uint256) {\n        return (sale_arbits_sold);\n    }\n680-function_definition-139-141", method="get_sale_arbits_sold()", type_label=function_definition];
689 [label="139_ return (sale_arbits_sold);\n689-return-140-140", method="get_sale_arbits_sold()", type_label=return];
692 [label="141_ function set_sale_owner(address _a, bool _v) public only_master_or_owner {\n        sale_owners[_a] = _v;\n    }\n692-function_definition-142-144", method="set_sale_owner(address _a,bool _v)", type_label=function_definition];
703 [label="141_ only_master_or_owner\n703-expression_statement-142-142", method="set_sale_owner(address _a,bool _v)", type_label=expression_statement];
706 [label="142_ sale_owners[_a] = _v;\n706-expression_statement-143-143", method="set_sale_owner(address _a,bool _v)", type_label=expression_statement];
712 [label="144_ function set_contrib_arbits_min(uint256 _v) public only_master_or_owner {\n        contrib_arbits_min = _v;\n    }\n712-function_definition-145-147", method="set_contrib_arbits_min(uint256 _v)", type_label=function_definition];
719 [label="144_ only_master_or_owner\n719-expression_statement-145-145", method="set_contrib_arbits_min(uint256 _v)", type_label=expression_statement];
722 [label="145_ contrib_arbits_min = _v;\n722-expression_statement-146-146", method="set_contrib_arbits_min(uint256 _v)", type_label=expression_statement];
726 [label="147_ function set_contrib_arbits_max(uint256 _v) public only_master_or_owner {\n        contrib_arbits_max = _v;\n    }\n726-function_definition-148-150", method="set_contrib_arbits_max(uint256 _v)", type_label=function_definition];
733 [label="147_ only_master_or_owner\n733-expression_statement-148-148", method="set_contrib_arbits_max(uint256 _v)", type_label=expression_statement];
736 [label="148_ contrib_arbits_max = _v;\n736-expression_statement-149-149", method="set_contrib_arbits_max(uint256 _v)", type_label=expression_statement];
740 [label="150_ function set_pre_kyc_bonus_numerator(uint256 _v) public only_master_or_owner {\n        pre_kyc_bonus_numerator = _v;\n    }\n740-function_definition-151-153", method="set_pre_kyc_bonus_numerator(uint256 _v)", type_label=function_definition];
747 [label="150_ only_master_or_owner\n747-expression_statement-151-151", method="set_pre_kyc_bonus_numerator(uint256 _v)", type_label=expression_statement];
750 [label="151_ pre_kyc_bonus_numerator = _v;\n750-expression_statement-152-152", method="set_pre_kyc_bonus_numerator(uint256 _v)", type_label=expression_statement];
754 [label="153_ function set_pre_kyc_bonus_denominator(uint256 _v) public only_master_or_owner {\n        pre_kyc_bonus_denominator = _v;\n    }\n754-function_definition-154-156", method="set_pre_kyc_bonus_denominator(uint256 _v)", type_label=function_definition];
761 [label="153_ only_master_or_owner\n761-expression_statement-154-154", method="set_pre_kyc_bonus_denominator(uint256 _v)", type_label=expression_statement];
764 [label="154_ pre_kyc_bonus_denominator = _v;\n764-expression_statement-155-155", method="set_pre_kyc_bonus_denominator(uint256 _v)", type_label=expression_statement];
768 [label="156_ function set_pre_kyc_iconiq_bonus_numerator(uint256 _v) public only_master_or_owner {\n        pre_kyc_iconiq_bonus_numerator = _v;\n    }\n768-function_definition-157-159", method="set_pre_kyc_iconiq_bonus_numerator(uint256 _v)", type_label=function_definition];
775 [label="156_ only_master_or_owner\n775-expression_statement-157-157", method="set_pre_kyc_iconiq_bonus_numerator(uint256 _v)", type_label=expression_statement];
778 [label="157_ pre_kyc_iconiq_bonus_numerator = _v;\n778-expression_statement-158-158", method="set_pre_kyc_iconiq_bonus_numerator(uint256 _v)", type_label=expression_statement];
782 [label="159_ function set_pre_kyc_iconiq_bonus_denominator(uint256 _v) public only_master_or_owner {\n        pre_kyc_iconiq_bonus_denominator = _v;\n    }\n782-function_definition-160-162", method="set_pre_kyc_iconiq_bonus_denominator(uint256 _v)", type_label=function_definition];
789 [label="159_ only_master_or_owner\n789-expression_statement-160-160", method="set_pre_kyc_iconiq_bonus_denominator(uint256 _v)", type_label=expression_statement];
792 [label="160_ pre_kyc_iconiq_bonus_denominator = _v;\n792-expression_statement-161-161", method="set_pre_kyc_iconiq_bonus_denominator(uint256 _v)", type_label=expression_statement];
796 [label="162_ function set_presale_iconiq_arbits_per_ether(uint256 _v) public only_master_or_owner {\n        presale_iconiq_arbits_per_ether = _v;\n    }\n796-function_definition-163-165", method="set_presale_iconiq_arbits_per_ether(uint256 _v)", type_label=function_definition];
803 [label="162_ only_master_or_owner\n803-expression_statement-163-163", method="set_presale_iconiq_arbits_per_ether(uint256 _v)", type_label=expression_statement];
806 [label="163_ presale_iconiq_arbits_per_ether = _v;\n806-expression_statement-164-164", method="set_presale_iconiq_arbits_per_ether(uint256 _v)", type_label=expression_statement];
810 [label="165_ function set_presale_arbits_per_ether(uint256 _v) public only_master_or_owner {\n        presale_arbits_per_ether = _v;\n    }\n810-function_definition-166-168", method="set_presale_arbits_per_ether(uint256 _v)", type_label=function_definition];
817 [label="165_ only_master_or_owner\n817-expression_statement-166-166", method="set_presale_arbits_per_ether(uint256 _v)", type_label=expression_statement];
820 [label="166_ presale_arbits_per_ether = _v;\n820-expression_statement-167-167", method="set_presale_arbits_per_ether(uint256 _v)", type_label=expression_statement];
824 [label="168_ function set_presale_arbits_total(uint256 _v) public only_master_or_owner {\n        presale_arbits_total = _v;\n    }\n824-function_definition-169-171", method="set_presale_arbits_total(uint256 _v)", type_label=function_definition];
831 [label="168_ only_master_or_owner\n831-expression_statement-169-169", method="set_presale_arbits_total(uint256 _v)", type_label=expression_statement];
834 [label="169_ presale_arbits_total = _v;\n834-expression_statement-170-170", method="set_presale_arbits_total(uint256 _v)", type_label=expression_statement];
838 [label="171_ function set_presale_arbits_sold(uint256 _v) public only_master_or_owner {\n        presale_arbits_sold = _v;\n    }\n838-function_definition-172-174", method="set_presale_arbits_sold(uint256 _v)", type_label=function_definition];
845 [label="171_ only_master_or_owner\n845-expression_statement-172-172", method="set_presale_arbits_sold(uint256 _v)", type_label=expression_statement];
848 [label="172_ presale_arbits_sold = _v;\n848-expression_statement-173-173", method="set_presale_arbits_sold(uint256 _v)", type_label=expression_statement];
852 [label="174_ function set_sale_arbits_per_ether(uint256 _v) public only_master_or_owner {\n        sale_arbits_per_ether = _v;\n    }\n852-function_definition-175-177", method="set_sale_arbits_per_ether(uint256 _v)", type_label=function_definition];
859 [label="174_ only_master_or_owner\n859-expression_statement-175-175", method="set_sale_arbits_per_ether(uint256 _v)", type_label=expression_statement];
862 [label="175_ sale_arbits_per_ether = _v;\n862-expression_statement-176-176", method="set_sale_arbits_per_ether(uint256 _v)", type_label=expression_statement];
866 [label="177_ function set_sale_arbits_total(uint256 _v) public only_master_or_owner {\n        sale_arbits_total = _v;\n    }\n866-function_definition-178-180", method="set_sale_arbits_total(uint256 _v)", type_label=function_definition];
873 [label="177_ only_master_or_owner\n873-expression_statement-178-178", method="set_sale_arbits_total(uint256 _v)", type_label=expression_statement];
876 [label="178_ sale_arbits_total = _v;\n876-expression_statement-179-179", method="set_sale_arbits_total(uint256 _v)", type_label=expression_statement];
880 [label="180_ function set_sale_arbits_sold(uint256 _v) public only_master_or_owner {\n        sale_arbits_sold = _v;\n    }\n880-function_definition-181-183", method="set_sale_arbits_sold(uint256 _v)", type_label=function_definition];
887 [label="180_ only_master_or_owner\n887-expression_statement-181-181", method="set_sale_arbits_sold(uint256 _v)", type_label=expression_statement];
890 [label="181_ sale_arbits_sold = _v;\n890-expression_statement-182-182", method="set_sale_arbits_sold(uint256 _v)", type_label=expression_statement];
894 [label="183_ function get_participant(address _a) public view returns(\n        address,\n        uint256,\n        uint256,\n        uint256,\n        bool,\n        uint8\n    ) {\n        participant storage subject = participants[_a];\n        return (\n            subject.eth_address,\n            subject.topl_address,\n            subject.arbits,\n            subject.num_of_pro_rata_tokens_alloted,\n            subject.arbits_kyc_whitelist,\n            subject.num_of_uses\n        );\n    }\n894-function_definition-184-201", method="get_participant(address _a)", type_label=function_definition];
922 [label="191_ participant storage subject = participants[_a];\n922-new_variable-192-192", method="get_participant(address _a)", type_label=new_variable];
931 [label="192_ return (\n            subject.eth_address,\n            subject.topl_address,\n            subject.arbits,\n            subject.num_of_pro_rata_tokens_alloted,\n            subject.arbits_kyc_whitelist,\n            subject.num_of_uses\n        );\n931-return-193-200", method="get_participant(address _a)", type_label=return];
951 [label="201_ function get_participant_num_of_uses(address _a) public view returns(uint8) {\n        return (participants[_a].num_of_uses);\n    }\n951-function_definition-202-204", method="get_participant_num_of_uses(address _a)", type_label=function_definition];
964 [label="202_ return (participants[_a].num_of_uses);\n964-return-203-203", method="get_participant_num_of_uses(address _a)", type_label=return];
971 [label="204_ function get_participant_topl_address(address _a) public view returns(uint256) {\n        return (participants[_a].topl_address);\n    }\n971-function_definition-205-207", method="get_participant_topl_address(address _a)", type_label=function_definition];
984 [label="205_ return (participants[_a].topl_address);\n984-return-206-206", method="get_participant_topl_address(address _a)", type_label=return];
991 [label="207_ function get_participant_arbits(address _a) public view returns(uint256) {\n        return (participants[_a].arbits);\n    }\n991-function_definition-208-210", method="get_participant_arbits(address _a)", type_label=function_definition];
1004 [label="208_ return (participants[_a].arbits);\n1004-return-209-209", method="get_participant_arbits(address _a)", type_label=return];
1011 [label="210_ function get_participant_num_of_pro_rata_tokens_alloted(address _a) public view returns(uint256) {\n        return (participants[_a].num_of_pro_rata_tokens_alloted);\n    }\n1011-function_definition-211-213", method="get_participant_num_of_pro_rata_tokens_alloted(address _a)", type_label=function_definition];
1024 [label="211_ return (participants[_a].num_of_pro_rata_tokens_alloted);\n1024-return-212-212", method="get_participant_num_of_pro_rata_tokens_alloted(address _a)", type_label=return];
1031 [label="213_ function get_participant_arbits_kyc_whitelist(address _a) public view returns(bool) {\n        return (participants[_a].arbits_kyc_whitelist);\n    }\n1031-function_definition-214-216", method="get_participant_arbits_kyc_whitelist(address _a)", type_label=function_definition];
1044 [label="214_ return (participants[_a].arbits_kyc_whitelist);\n1044-return-215-215", method="get_participant_arbits_kyc_whitelist(address _a)", type_label=return];
1051 [label="216_ function set_participant(\n        address _a,\n        uint256 _ta,\n        uint256 _arbits,\n        uint256 _prta,\n        bool _v3,\n        uint8 _nou\n    ) public only_master_or_owner log_participant_update(_a) {\n        participant storage subject = participants[_a];\n        subject.eth_address = _a;\n        subject.topl_address = _ta;\n        subject.arbits = _arbits;\n        subject.num_of_pro_rata_tokens_alloted = _prta;\n        subject.arbits_kyc_whitelist = _v3;\n        subject.num_of_uses = _nou;\n    }\n1051-function_definition-217-232", method="set_participant(address _a,uint256 _ta,uint256 _arbits,uint256 _prta,bool _v3,uint8 _nou)", type_label=function_definition];
1078 [label="223_ only_master_or_owner\n1078-expression_statement-224-224", method="set_participant(address _a,uint256 _ta,uint256 _arbits,uint256 _prta,bool _v3,uint8 _nou)", type_label=expression_statement];
1080 [label="223_ log_participant_update(_a)\n1080-expression_statement-224-224", method="set_participant(address _a,uint256 _ta,uint256 _arbits,uint256 _prta,bool _v3,uint8 _nou)", type_label=expression_statement];
1085 [label="224_ participant storage subject = participants[_a];\n1085-new_variable-225-225", method="set_participant(address _a,uint256 _ta,uint256 _arbits,uint256 _prta,bool _v3,uint8 _nou)", type_label=new_variable];
1094 [label="225_ subject.eth_address = _a;\n1094-expression_statement-226-226", method="set_participant(address _a,uint256 _ta,uint256 _arbits,uint256 _prta,bool _v3,uint8 _nou)", type_label=expression_statement];
1100 [label="226_ subject.topl_address = _ta;\n1100-expression_statement-227-227", method="set_participant(address _a,uint256 _ta,uint256 _arbits,uint256 _prta,bool _v3,uint8 _nou)", type_label=expression_statement];
1106 [label="227_ subject.arbits = _arbits;\n1106-expression_statement-228-228", method="set_participant(address _a,uint256 _ta,uint256 _arbits,uint256 _prta,bool _v3,uint8 _nou)", type_label=expression_statement];
1112 [label="228_ subject.num_of_pro_rata_tokens_alloted = _prta;\n1112-expression_statement-229-229", method="set_participant(address _a,uint256 _ta,uint256 _arbits,uint256 _prta,bool _v3,uint8 _nou)", type_label=expression_statement];
1118 [label="229_ subject.arbits_kyc_whitelist = _v3;\n1118-expression_statement-230-230", method="set_participant(address _a,uint256 _ta,uint256 _arbits,uint256 _prta,bool _v3,uint8 _nou)", type_label=expression_statement];
1124 [label="230_ subject.num_of_uses = _nou;\n1124-expression_statement-231-231", method="set_participant(address _a,uint256 _ta,uint256 _arbits,uint256 _prta,bool _v3,uint8 _nou)", type_label=expression_statement];
1130 [label="232_ function set_participant_num_of_uses(\n        address _a,\n        uint8 _v\n    ) public only_master_or_owner log_participant_update(_a) {\n        participants[_a].num_of_uses = _v;\n    }\n1130-function_definition-233-238", method="set_participant_num_of_uses(address _a,uint8 _v)", type_label=function_definition];
1141 [label="235_ only_master_or_owner\n1141-expression_statement-236-236", method="set_participant_num_of_uses(address _a,uint8 _v)", type_label=expression_statement];
1143 [label="235_ log_participant_update(_a)\n1143-expression_statement-236-236", method="set_participant_num_of_uses(address _a,uint8 _v)", type_label=expression_statement];
1148 [label="236_ participants[_a].num_of_uses = _v;\n1148-expression_statement-237-237", method="set_participant_num_of_uses(address _a,uint8 _v)", type_label=expression_statement];
1156 [label="238_ function set_participant_topl_address(\n        address _a,\n        uint256 _ta\n    ) public only_master_or_owner log_participant_update(_a) {\n        participants[_a].topl_address = _ta;\n    }\n1156-function_definition-239-244", method="set_participant_topl_address(address _a,uint256 _ta)", type_label=function_definition];
1167 [label="241_ only_master_or_owner\n1167-expression_statement-242-242", method="set_participant_topl_address(address _a,uint256 _ta)", type_label=expression_statement];
1169 [label="241_ log_participant_update(_a)\n1169-expression_statement-242-242", method="set_participant_topl_address(address _a,uint256 _ta)", type_label=expression_statement];
1174 [label="242_ participants[_a].topl_address = _ta;\n1174-expression_statement-243-243", method="set_participant_topl_address(address _a,uint256 _ta)", type_label=expression_statement];
1182 [label="244_ function set_participant_arbits(\n        address _a,\n        uint256 _v\n    ) public only_master_or_owner log_participant_update(_a) {\n        participants[_a].arbits = _v;\n    }\n1182-function_definition-245-250", method="set_participant_arbits(address _a,uint256 _v)", type_label=function_definition];
1193 [label="247_ only_master_or_owner\n1193-expression_statement-248-248", method="set_participant_arbits(address _a,uint256 _v)", type_label=expression_statement];
1195 [label="247_ log_participant_update(_a)\n1195-expression_statement-248-248", method="set_participant_arbits(address _a,uint256 _v)", type_label=expression_statement];
1200 [label="248_ participants[_a].arbits = _v;\n1200-expression_statement-249-249", method="set_participant_arbits(address _a,uint256 _v)", type_label=expression_statement];
1208 [label="250_ function set_participant_num_of_pro_rata_tokens_alloted(\n        address _a,\n        uint256 _v\n    ) public only_master_or_owner log_participant_update(_a) {\n        participants[_a].num_of_pro_rata_tokens_alloted = _v;\n    }\n1208-function_definition-251-256", method="set_participant_num_of_pro_rata_tokens_alloted(address _a,uint256 _v)", type_label=function_definition];
1219 [label="253_ only_master_or_owner\n1219-expression_statement-254-254", method="set_participant_num_of_pro_rata_tokens_alloted(address _a,uint256 _v)", type_label=expression_statement];
1221 [label="253_ log_participant_update(_a)\n1221-expression_statement-254-254", method="set_participant_num_of_pro_rata_tokens_alloted(address _a,uint256 _v)", type_label=expression_statement];
1226 [label="254_ participants[_a].num_of_pro_rata_tokens_alloted = _v;\n1226-expression_statement-255-255", method="set_participant_num_of_pro_rata_tokens_alloted(address _a,uint256 _v)", type_label=expression_statement];
1234 [label="256_ function set_participant_arbits_kyc_whitelist(\n        address _a,\n        bool _v\n    ) public only_kycer log_participant_update(_a) {\n        participants[_a].arbits_kyc_whitelist = _v;\n    }\n1234-function_definition-257-262", method="set_participant_arbits_kyc_whitelist(address _a,bool _v)", type_label=function_definition];
1245 [label="259_ only_kycer\n1245-expression_statement-260-260", method="set_participant_arbits_kyc_whitelist(address _a,bool _v)", type_label=expression_statement];
1247 [label="259_ log_participant_update(_a)\n1247-expression_statement-260-260", method="set_participant_arbits_kyc_whitelist(address _a,bool _v)", type_label=expression_statement];
1252 [label="260_ participants[_a].arbits_kyc_whitelist = _v;\n1252-expression_statement-261-261", method="set_participant_arbits_kyc_whitelist(address _a,bool _v)", type_label=expression_statement];
1260 [label="262_ function get_iconiq_presale_open() public view only_master_or_owner returns(bool) {\n        return iconiq_presale_open;\n    }\n1260-function_definition-263-265", method="get_iconiq_presale_open()", type_label=function_definition];
1264 [label="262_ only_master_or_owner\n1264-expression_statement-263-263", method="get_iconiq_presale_open()", type_label=expression_statement];
1271 [label="263_ return iconiq_presale_open;\n1271-return-264-264", method="get_iconiq_presale_open()", type_label=return];
1273 [label="265_ function get_arbits_presale_open() public view only_master_or_owner returns(bool) {\n        return arbits_presale_open;\n    }\n1273-function_definition-266-268", method="get_arbits_presale_open()", type_label=function_definition];
1277 [label="265_ only_master_or_owner\n1277-expression_statement-266-266", method="get_arbits_presale_open()", type_label=expression_statement];
1284 [label="266_ return arbits_presale_open;\n1284-return-267-267", method="get_arbits_presale_open()", type_label=return];
1286 [label="268_ function get_arbits_sale_open() public view only_master_or_owner returns(bool) {\n        return arbits_sale_open;\n    }\n1286-function_definition-269-271", method="get_arbits_sale_open()", type_label=function_definition];
1290 [label="268_ only_master_or_owner\n1290-expression_statement-269-269", method="get_arbits_sale_open()", type_label=expression_statement];
1297 [label="269_ return arbits_sale_open;\n1297-return-270-270", method="get_arbits_sale_open()", type_label=return];
1299 [label="271_ function set_iconiq_presale_open(bool _v) public only_master_or_owner {\n        iconiq_presale_open = _v;\n    }\n1299-function_definition-272-274", method="set_iconiq_presale_open(bool _v)", type_label=function_definition];
1306 [label="271_ only_master_or_owner\n1306-expression_statement-272-272", method="set_iconiq_presale_open(bool _v)", type_label=expression_statement];
1309 [label="272_ iconiq_presale_open = _v;\n1309-expression_statement-273-273", method="set_iconiq_presale_open(bool _v)", type_label=expression_statement];
1313 [label="274_ function set_arbits_presale_open(bool _v) public only_master_or_owner {\n        arbits_presale_open = _v;\n    }\n1313-function_definition-275-277", method="set_arbits_presale_open(bool _v)", type_label=function_definition];
1320 [label="274_ only_master_or_owner\n1320-expression_statement-275-275", method="set_arbits_presale_open(bool _v)", type_label=expression_statement];
1323 [label="275_ arbits_presale_open = _v;\n1323-expression_statement-276-276", method="set_arbits_presale_open(bool _v)", type_label=expression_statement];
1327 [label="277_ function set_arbits_sale_open(bool _v) public only_master_or_owner {\n        arbits_sale_open = _v;\n    }\n1327-function_definition-278-280", method="set_arbits_sale_open(bool _v)", type_label=function_definition];
1334 [label="277_ only_master_or_owner\n1334-expression_statement-278-278", method="set_arbits_sale_open(bool _v)", type_label=expression_statement];
1337 [label="278_ arbits_sale_open = _v;\n1337-expression_statement-279-279", method="set_arbits_sale_open(bool _v)", type_label=expression_statement];
1344 [label="282_ function get_participant(address db, address _a) internal view returns(\n        address,\n        uint256,\n        uint256,\n        uint256,\n        bool,\n        uint8\n    ) {\n        return database(db).get_participant(_a);\n    }\n1344-function_definition-283-292", method="get_participant(address db,address _a)", type_label=function_definition];
1376 [label="290_ return database(db).get_participant(_a);\n1376-return-291-291", method="get_participant(address db,address _a)", type_label=return];
1386 [label="292_ function get_topl_address(address db, address _a) internal view returns(uint256) {\n        return database(db).get_participant_topl_address(_a);\n    }\n1386-function_definition-293-295", method="get_topl_address(address db,address _a)", type_label=function_definition];
1403 [label="293_ return database(db).get_participant_topl_address(_a);\n1403-return-294-294", method="get_topl_address(address db,address _a)", type_label=return];
1413 [label="295_ function get_arbits(address db, address _a) internal view returns(uint256) {\n        return database(db).get_participant_arbits(_a);\n    }\n1413-function_definition-296-298", method="get_arbits(address db,address _a)", type_label=function_definition];
1430 [label="296_ return database(db).get_participant_arbits(_a);\n1430-return-297-297", method="get_arbits(address db,address _a)", type_label=return];
1440 [label="298_ function get_iconiq_tokens(address db, address _a) internal view returns(uint256) {\n        return database(db).get_participant_num_of_pro_rata_tokens_alloted(_a);\n    }\n1440-function_definition-299-301", method="get_iconiq_tokens(address db,address _a)", type_label=function_definition];
1457 [label="299_ return database(db).get_participant_num_of_pro_rata_tokens_alloted(_a);\n1457-return-300-300", method="get_iconiq_tokens(address db,address _a)", type_label=return];
1467 [label="301_ function get_arbits_whitelist(address db, address _a) internal view returns(bool) {\n        return database(db).get_participant_arbits_kyc_whitelist(_a);\n    }\n1467-function_definition-302-304", method="get_arbits_whitelist(address db,address _a)", type_label=function_definition];
1484 [label="302_ return database(db).get_participant_arbits_kyc_whitelist(_a);\n1484-return-303-303", method="get_arbits_whitelist(address db,address _a)", type_label=return];
1494 [label="304_ function get_num_of_uses(address db, address _a) internal view returns(uint8) {\n        return database(db).get_participant_num_of_uses(_a);\n    }\n1494-function_definition-305-307", method="get_num_of_uses(address db,address _a)", type_label=function_definition];
1511 [label="305_ return database(db).get_participant_num_of_uses(_a);\n1511-return-306-306", method="get_num_of_uses(address db,address _a)", type_label=return];
1521 [label="307_ function set_participant(\n        address db,\n        address _a,\n        uint256 _ta,\n        uint256 _arbits,\n        uint256 _prta,\n        bool _v3,\n        uint8 _nou\n    ) internal {\n        database(db).set_participant(_a, _ta, _arbits, _prta, _v3, _nou);\n        emit e_set_participant(_a, _ta, _arbits, _prta, _v3, _nou);\n    }\n1521-function_definition-308-319", method="set_participant(address db,address _a,uint256 _ta,uint256 _arbits,uint256 _prta,bool _v3,uint8 _nou)", type_label=function_definition];
1553 [label="316_ database(db).set_participant(_a, _ta, _arbits, _prta, _v3, _nou);\n1553-expression_statement-317-317", method="set_participant(address db,address _a,uint256 _ta,uint256 _arbits,uint256 _prta,bool _v3,uint8 _nou)", type_label=expression_statement];
1587 [label="319_ function set_topl_address(address db, address _a, uint256 _ta) internal {\n        database(db).set_participant_topl_address(_a, _ta);\n        emit e_set_topl_address(_a, _ta);\n    }\n1587-function_definition-320-323", method="set_topl_address(address db,address _a,uint256 _ta)", type_label=function_definition];
1603 [label="320_ database(db).set_participant_topl_address(_a, _ta);\n1603-expression_statement-321-321", method="set_topl_address(address db,address _a,uint256 _ta)", type_label=expression_statement];
1621 [label="323_ function set_arbits(address db, address _a, uint256 _v) internal {\n        database(db).set_participant_arbits(_a, _v);\n        emit e_set_arbits(_a, _v);\n    }\n1621-function_definition-324-327", method="set_arbits(address db,address _a,uint256 _v)", type_label=function_definition];
1637 [label="324_ database(db).set_participant_arbits(_a, _v);\n1637-expression_statement-325-325", method="set_arbits(address db,address _a,uint256 _v)", type_label=expression_statement];
1655 [label="327_ function set_iconiq_tokens(address db, address _a, uint256 _v) internal {\n        database(db).set_participant_num_of_pro_rata_tokens_alloted(_a, _v);\n        emit e_set_iconiq_tokens(_a, _v);\n    }\n1655-function_definition-328-331", method="set_iconiq_tokens(address db,address _a,uint256 _v)", type_label=function_definition];
1671 [label="328_ database(db).set_participant_num_of_pro_rata_tokens_alloted(_a, _v);\n1671-expression_statement-329-329", method="set_iconiq_tokens(address db,address _a,uint256 _v)", type_label=expression_statement];
1689 [label="331_ function set_arbits_whitelist(address db, address _a, bool _v) internal {\n        database(db).set_participant_arbits_kyc_whitelist(_a, _v);\n        emit e_set_arbits_whitelist(_a, _v);\n    }\n1689-function_definition-332-335", method="set_arbits_whitelist(address db,address _a,bool _v)", type_label=function_definition];
1705 [label="332_ database(db).set_participant_arbits_kyc_whitelist(_a, _v);\n1705-expression_statement-333-333", method="set_arbits_whitelist(address db,address _a,bool _v)", type_label=expression_statement];
1723 [label="335_ function set_num_of_uses(address db, address _a, uint8 _v) internal {\n        database(db).set_participant_num_of_uses(_a, _v);\n        emit e_set_num_of_uses(_a, _v);\n    }\n1723-function_definition-336-339", method="set_num_of_uses(address db,address _a,uint8 _v)", type_label=function_definition];
1739 [label="336_ database(db).set_participant_num_of_uses(_a, _v);\n1739-expression_statement-337-337", method="set_num_of_uses(address db,address _a,uint8 _v)", type_label=expression_statement];
1757 [label="339_ function add_arbits(address db, address _a, uint256 _v) internal {\n        uint256 c = database(db).get_participant_arbits(_a) + _v;      \n        assert(c >= database(db).get_participant_arbits(_a));  \n        database(db).set_participant_arbits(\n            _a,\n            (database(db).get_participant_arbits(_a) + _v)\n        );\n        emit e_add_arbits(_a, _v);\n    }\n1757-function_definition-340-348", method="add_arbits(address db,address _a,uint256 _v)", type_label=function_definition];
1773 [label="340_ uint256 c = database(db).get_participant_arbits(_a) + _v;\n1773-new_variable-341-341", method="add_arbits(address db,address _a,uint256 _v)", type_label=new_variable];
1789 [label="341_ assert(c >= database(db).get_participant_arbits(_a));\n1789-expression_statement-342-342", method="add_arbits(address db,address _a,uint256 _v)", type_label=expression_statement];
1804 [label="342_ database(db).set_participant_arbits(\n            _a,\n            (database(db).get_participant_arbits(_a) + _v)\n        );\n1804-expression_statement-343-346", method="add_arbits(address db,address _a,uint256 _v)", type_label=expression_statement];
1833 [label="348_ function sub_arbits(address db, address _a, uint256 _v) internal {\n        assert(_v <= database(db).get_participant_arbits(_a));  \n        database(db).set_participant_arbits(\n            _a,\n            (database(db).get_participant_arbits(_a) - _v)\n        );\n        emit e_sub_arbits(_a, _v);\n    }\n1833-function_definition-349-356", method="sub_arbits(address db,address _a,uint256 _v)", type_label=function_definition];
1849 [label="349_ assert(_v <= database(db).get_participant_arbits(_a));\n1849-expression_statement-350-350", method="sub_arbits(address db,address _a,uint256 _v)", type_label=expression_statement];
1864 [label="350_ database(db).set_participant_arbits(\n            _a,\n            (database(db).get_participant_arbits(_a) - _v)\n        );\n1864-expression_statement-351-354", method="sub_arbits(address db,address _a,uint256 _v)", type_label=expression_statement];
1893 [label="356_ function get_pre_kyc_iconiq_bonus_numerator(address db) internal view returns(uint256) {\n        return database(db).get_pre_kyc_iconiq_bonus_numerator();\n    }\n1893-function_definition-357-359", method="get_pre_kyc_iconiq_bonus_numerator(address db)", type_label=function_definition];
1906 [label="357_ return database(db).get_pre_kyc_iconiq_bonus_numerator();\n1906-return-358-358", method="get_pre_kyc_iconiq_bonus_numerator(address db)", type_label=return];
1914 [label="359_ function get_pre_kyc_iconiq_bonus_denominator(address db) internal view returns(uint256) {\n        return database(db).get_pre_kyc_iconiq_bonus_denominator();\n    }\n1914-function_definition-360-362", method="get_pre_kyc_iconiq_bonus_denominator(address db)", type_label=function_definition];
1927 [label="360_ return database(db).get_pre_kyc_iconiq_bonus_denominator();\n1927-return-361-361", method="get_pre_kyc_iconiq_bonus_denominator(address db)", type_label=return];
1935 [label="362_ function get_iconiq_presale_open(address db) internal view returns(bool) {\n        return database(db).get_iconiq_presale_open();\n    }\n1935-function_definition-363-365", method="get_iconiq_presale_open(address db)", type_label=function_definition];
1948 [label="363_ return database(db).get_iconiq_presale_open();\n1948-return-364-364", method="get_iconiq_presale_open(address db)", type_label=return];
1956 [label="365_ function get_presale_iconiq_arbits_per_ether(address db) internal view returns(uint256) {\n        return database(db).get_presale_iconiq_arbits_per_ether();\n    }\n1956-function_definition-366-368", method="get_presale_iconiq_arbits_per_ether(address db)", type_label=function_definition];
1969 [label="366_ return database(db).get_presale_iconiq_arbits_per_ether();\n1969-return-367-367", method="get_presale_iconiq_arbits_per_ether(address db)", type_label=return];
1977 [label="368_ function set_pre_kyc_iconiq_bonus_numerator(address db, uint256 _v) internal {\n        database(db).set_pre_kyc_iconiq_bonus_numerator(_v);\n        emit e_set_pre_kyc_iconiq_bonus_numerator(_v);\n    }\n1977-function_definition-369-372", method="set_pre_kyc_iconiq_bonus_numerator(address db,uint256 _v)", type_label=function_definition];
1989 [label="369_ database(db).set_pre_kyc_iconiq_bonus_numerator(_v);\n1989-expression_statement-370-370", method="set_pre_kyc_iconiq_bonus_numerator(address db,uint256 _v)", type_label=expression_statement];
2003 [label="372_ function set_pre_kyc_iconiq_bonus_denominator(address db, uint256 _v) internal {\n        database(db).set_pre_kyc_iconiq_bonus_denominator(_v);\n        emit e_set_pre_kyc_iconiq_bonus_denominator(_v);\n    }\n2003-function_definition-373-376", method="set_pre_kyc_iconiq_bonus_denominator(address db,uint256 _v)", type_label=function_definition];
2015 [label="373_ database(db).set_pre_kyc_iconiq_bonus_denominator(_v);\n2015-expression_statement-374-374", method="set_pre_kyc_iconiq_bonus_denominator(address db,uint256 _v)", type_label=expression_statement];
2029 [label="376_ function set_iconiq_presale_open(address db, bool _v) internal {\n        database(db).set_iconiq_presale_open(_v);\n        emit e_set_iconiq_presale_open(_v);\n    }\n2029-function_definition-377-380", method="set_iconiq_presale_open(address db,bool _v)", type_label=function_definition];
2041 [label="377_ database(db).set_iconiq_presale_open(_v);\n2041-expression_statement-378-378", method="set_iconiq_presale_open(address db,bool _v)", type_label=expression_statement];
2055 [label="380_ function set_presale_iconiq_arbits_per_ether(address db, uint256 _v) internal {\n        database(db).set_presale_iconiq_arbits_per_ether(_v);\n        emit e_set_presale_iconiq_arbits_per_ether(_v);\n    }\n2055-function_definition-381-384", method="set_presale_iconiq_arbits_per_ether(address db,uint256 _v)", type_label=function_definition];
2067 [label="381_ database(db).set_presale_iconiq_arbits_per_ether(_v);\n2067-expression_statement-382-382", method="set_presale_iconiq_arbits_per_ether(address db,uint256 _v)", type_label=expression_statement];
2081 [label="384_ function get_pre_kyc_bonus_numerator(address db) internal view returns(uint256) {\n        return database(db).get_pre_kyc_bonus_numerator();\n    }\n2081-function_definition-385-387", method="get_pre_kyc_bonus_numerator(address db)", type_label=function_definition];
2094 [label="385_ return database(db).get_pre_kyc_bonus_numerator();\n2094-return-386-386", method="get_pre_kyc_bonus_numerator(address db)", type_label=return];
2102 [label="387_ function get_pre_kyc_bonus_denominator(address db) internal view returns(uint256) {\n        return database(db).get_pre_kyc_bonus_denominator();\n    }\n2102-function_definition-388-390", method="get_pre_kyc_bonus_denominator(address db)", type_label=function_definition];
2115 [label="388_ return database(db).get_pre_kyc_bonus_denominator();\n2115-return-389-389", method="get_pre_kyc_bonus_denominator(address db)", type_label=return];
2123 [label="390_ function get_arbits_presale_open(address db) internal view returns(bool) {\n        return database(db).get_arbits_presale_open();\n    }\n2123-function_definition-391-393", method="get_arbits_presale_open(address db)", type_label=function_definition];
2136 [label="391_ return database(db).get_arbits_presale_open();\n2136-return-392-392", method="get_arbits_presale_open(address db)", type_label=return];
2144 [label="393_ function get_presale_arbits_per_ether(address db) internal view returns(uint256) {\n        return database(db).get_presale_arbits_per_ether();\n    }\n2144-function_definition-394-396", method="get_presale_arbits_per_ether(address db)", type_label=function_definition];
2157 [label="394_ return database(db).get_presale_arbits_per_ether();\n2157-return-395-395", method="get_presale_arbits_per_ether(address db)", type_label=return];
2165 [label="396_ function set_pre_kyc_bonus_numerator(address db, uint256 _v) internal {\n        database(db).set_pre_kyc_bonus_numerator(_v);\n        emit e_set_pre_kyc_bonus_numerator(_v);\n    }\n2165-function_definition-397-400", method="set_pre_kyc_bonus_numerator(address db,uint256 _v)", type_label=function_definition];
2177 [label="397_ database(db).set_pre_kyc_bonus_numerator(_v);\n2177-expression_statement-398-398", method="set_pre_kyc_bonus_numerator(address db,uint256 _v)", type_label=expression_statement];
2191 [label="400_ function set_pre_kyc_bonus_denominator(address db, uint256 _v) internal {\n        database(db).set_pre_kyc_bonus_denominator(_v);\n        emit e_set_pre_kyc_bonus_denominator(_v);\n    }\n2191-function_definition-401-404", method="set_pre_kyc_bonus_denominator(address db,uint256 _v)", type_label=function_definition];
2203 [label="401_ database(db).set_pre_kyc_bonus_denominator(_v);\n2203-expression_statement-402-402", method="set_pre_kyc_bonus_denominator(address db,uint256 _v)", type_label=expression_statement];
2217 [label="404_ function set_arbits_presale_open(address db, bool _v) internal {\n        database(db).set_arbits_presale_open(_v);\n        emit e_set_arbits_presale_open(_v);\n    }\n2217-function_definition-405-408", method="set_arbits_presale_open(address db,bool _v)", type_label=function_definition];
2229 [label="405_ database(db).set_arbits_presale_open(_v);\n2229-expression_statement-406-406", method="set_arbits_presale_open(address db,bool _v)", type_label=expression_statement];
2243 [label="408_ function set_presale_arbits_per_ether(address db, uint256 _v) internal {\n        database(db).set_presale_arbits_per_ether(_v);\n        emit e_set_presale_arbits_per_ether(_v);\n    }\n2243-function_definition-409-412", method="set_presale_arbits_per_ether(address db,uint256 _v)", type_label=function_definition];
2255 [label="409_ database(db).set_presale_arbits_per_ether(_v);\n2255-expression_statement-410-410", method="set_presale_arbits_per_ether(address db,uint256 _v)", type_label=expression_statement];
2269 [label="412_ function get_presale_arbits_total(address db) internal view returns(uint256) {\n        return database(db).get_presale_arbits_total();\n    }\n2269-function_definition-413-415", method="get_presale_arbits_total(address db)", type_label=function_definition];
2282 [label="413_ return database(db).get_presale_arbits_total();\n2282-return-414-414", method="get_presale_arbits_total(address db)", type_label=return];
2290 [label="415_ function get_presale_arbits_sold(address db) internal view returns(uint256) {\n        return database(db).get_presale_arbits_sold();\n    }\n2290-function_definition-416-418", method="get_presale_arbits_sold(address db)", type_label=function_definition];
2303 [label="416_ return database(db).get_presale_arbits_sold();\n2303-return-417-417", method="get_presale_arbits_sold(address db)", type_label=return];
2311 [label="418_ function get_arbits_max_contribution(address db) internal view returns(uint256) {\n        return database(db).get_contrib_arbits_max();\n    }\n2311-function_definition-419-421", method="get_arbits_max_contribution(address db)", type_label=function_definition];
2324 [label="419_ return database(db).get_contrib_arbits_max();\n2324-return-420-420", method="get_arbits_max_contribution(address db)", type_label=return];
2332 [label="421_ function get_arbits_min_contribution(address db) internal view returns(uint256) {\n        return database(db).get_contrib_arbits_min();\n    }\n2332-function_definition-422-424", method="get_arbits_min_contribution(address db)", type_label=function_definition];
2345 [label="422_ return database(db).get_contrib_arbits_min();\n2345-return-423-423", method="get_arbits_min_contribution(address db)", type_label=return];
2353 [label="424_ function set_presale_arbits_total(address db, uint256 _v) internal {\n        database(db).set_presale_arbits_total(_v);\n        emit e_set_presale_arbits_total(_v);\n    }\n2353-function_definition-425-428", method="set_presale_arbits_total(address db,uint256 _v)", type_label=function_definition];
2365 [label="425_ database(db).set_presale_arbits_total(_v);\n2365-expression_statement-426-426", method="set_presale_arbits_total(address db,uint256 _v)", type_label=expression_statement];
2379 [label="428_ function set_presale_arbits_sold(address db, uint256 _v) internal {\n        database(db).set_presale_arbits_sold(_v);\n        emit e_set_presale_arbits_sold(_v);\n    }\n2379-function_definition-429-432", method="set_presale_arbits_sold(address db,uint256 _v)", type_label=function_definition];
2391 [label="429_ database(db).set_presale_arbits_sold(_v);\n2391-expression_statement-430-430", method="set_presale_arbits_sold(address db,uint256 _v)", type_label=expression_statement];
2405 [label="432_ function set_arbits_max_contribution(address db, uint256 _v) internal {\n        database(db).set_contrib_arbits_max(_v);\n        emit e_set_arbits_max_contribution(_v);\n    }\n2405-function_definition-433-436", method="set_arbits_max_contribution(address db,uint256 _v)", type_label=function_definition];
2417 [label="433_ database(db).set_contrib_arbits_max(_v);\n2417-expression_statement-434-434", method="set_arbits_max_contribution(address db,uint256 _v)", type_label=expression_statement];
2431 [label="436_ function set_arbits_min_contribution(address db, uint256 _v) internal {\n        database(db).set_contrib_arbits_min(_v);\n        emit e_set_arbits_min_contribution(_v);\n    }\n2431-function_definition-437-440", method="set_arbits_min_contribution(address db,uint256 _v)", type_label=function_definition];
2443 [label="437_ database(db).set_contrib_arbits_min(_v);\n2443-expression_statement-438-438", method="set_arbits_min_contribution(address db,uint256 _v)", type_label=expression_statement];
2457 [label="440_ function add_presale_arbits_sold(address db, uint256 _v) internal {\n        uint256 c = database(db).get_presale_arbits_sold() + _v;      \n        assert(c >= database(db).get_presale_arbits_sold());  \n        database(db).set_presale_arbits_sold(\n            (database(db).get_presale_arbits_sold() + _v)\n        );\n        emit e_add_presale_arbits_sold(_v);\n    }\n2457-function_definition-441-448", method="add_presale_arbits_sold(address db,uint256 _v)", type_label=function_definition];
2469 [label="441_ uint256 c = database(db).get_presale_arbits_sold() + _v;\n2469-new_variable-442-442", method="add_presale_arbits_sold(address db,uint256 _v)", type_label=new_variable];
2483 [label="442_ assert(c >= database(db).get_presale_arbits_sold());\n2483-expression_statement-443-443", method="add_presale_arbits_sold(address db,uint256 _v)", type_label=expression_statement];
2496 [label="443_ database(db).set_presale_arbits_sold(\n            (database(db).get_presale_arbits_sold() + _v)\n        );\n2496-expression_statement-444-446", method="add_presale_arbits_sold(address db,uint256 _v)", type_label=expression_statement];
2519 [label="448_ function sub_presale_arbits_sold(address db, uint256 _v) internal {\n        assert(_v <= database(db).get_presale_arbits_sold());  \n        database(db).set_presale_arbits_sold(\n            (database(db).get_presale_arbits_sold() - _v)\n        );\n        emit e_sub_presale_arbits_sold(_v);\n    }\n2519-function_definition-449-455", method="sub_presale_arbits_sold(address db,uint256 _v)", type_label=function_definition];
2531 [label="449_ assert(_v <= database(db).get_presale_arbits_sold());\n2531-expression_statement-450-450", method="sub_presale_arbits_sold(address db,uint256 _v)", type_label=expression_statement];
2544 [label="450_ database(db).set_presale_arbits_sold(\n            (database(db).get_presale_arbits_sold() - _v)\n        );\n2544-expression_statement-451-453", method="sub_presale_arbits_sold(address db,uint256 _v)", type_label=expression_statement];
2567 [label="455_ function set_sale_owner(address db, address _a, bool _v) internal {\n        database(db).set_sale_owner(_a, _v);\n    }\n2567-function_definition-456-458", method="set_sale_owner(address db,address _a,bool _v)", type_label=function_definition];
2583 [label="456_ database(db).set_sale_owner(_a, _v);\n2583-expression_statement-457-457", method="set_sale_owner(address db,address _a,bool _v)", type_label=expression_statement];
2595 [label="458_ function get_sale_owner(address db, address _a) internal view returns(bool) {\n        return database(db).get_sale_owner(_a);\n    }\n2595-function_definition-459-461", method="get_sale_owner(address db,address _a)", type_label=function_definition];
2612 [label="459_ return database(db).get_sale_owner(_a);\n2612-return-460-460", method="get_sale_owner(address db,address _a)", type_label=return];
2789 [label="488_ address public owner;\n2789-new_variable-489-489", method="", type_label=new_variable];
2794 [label="489_ address public db;\n2794-new_variable-490-490", method="", type_label=new_variable];
2799 [label="490_ struct participant {\n        address eth_address;  \n        uint256 topl_address;  \n        uint256 arbits;  \n        uint256 num_of_pro_rata_tokens_alloted;\n        bool arbits_kyc_whitelist;  \n        uint8 num_of_uses;\n    }\n2799-expression_statement-491-498", method="participant()", type_label=expression_statement];
2831 [label="499_ db = __db;\n2831-expression_statement-500-500", method="", type_label=expression_statement];
2835 [label="500_ owner = msg.sender;\n2835-expression_statement-501-501", method="", type_label=expression_statement];
2841 [label="502_ function owner_linkage() public {  \n        db.set_sale_owner(owner, true);\n    }\n2841-function_definition-503-505", method="owner_linkage()", type_label=function_definition];
2845 [label="503_ db.set_sale_owner(owner, true);\n2845-expression_statement-504-504", method="owner_linkage()", type_label=expression_statement];
2855 [label="505_ modifier only_owner() {\n        require(db.get_sale_owner(msg.sender));\n        _;\n    }\n2855-expression_statement-506-509", method="", type_label=expression_statement];
2858 [label="506_ require(db.get_sale_owner(msg.sender));\n2858-expression_statement-507-507", method="", type_label=expression_statement];
2870 [label="507_ _;\n2870-expression_statement-508-508", method="", type_label=expression_statement];
2872 [label="509_ function add_owner(address __subject) public only_owner {\n        db.set_sale_owner(__subject, true);\n        emit e_add_owner(msg.sender, __subject);\n    }\n2872-function_definition-510-513", method="add_owner(address __subject)", type_label=function_definition];
2879 [label="509_ only_owner\n2879-expression_statement-510-510", method="add_owner(address __subject)", type_label=expression_statement];
2882 [label="510_ db.set_sale_owner(__subject, true);\n2882-expression_statement-511-511", method="add_owner(address __subject)", type_label=expression_statement];
2900 [label="513_ function remove_owner(address __subject) public only_owner {\n        db.set_sale_owner(__subject, false);\n        emit e_remove_owner(msg.sender, __subject);\n    }\n2900-function_definition-514-517", method="remove_owner(address __subject)", type_label=function_definition];
2907 [label="513_ only_owner\n2907-expression_statement-514-514", method="remove_owner(address __subject)", type_label=expression_statement];
2910 [label="514_ db.set_sale_owner(__subject, false);\n2910-expression_statement-515-515", method="remove_owner(address __subject)", type_label=expression_statement];
2928 [label="517_ modifier presale_open() {\n        require(db.get_arbits_presale_open());\n        _;\n    }\n2928-expression_statement-518-521", method="", type_label=expression_statement];
2931 [label="518_ require(db.get_arbits_presale_open());\n2931-expression_statement-519-519", method="", type_label=expression_statement];
2939 [label="519_ _;\n2939-expression_statement-520-520", method="", type_label=expression_statement];
2941 [label="521_ modifier use_count() {\n        uint8 uses = db.get_num_of_uses(msg.sender);\n        require(uses < 5);\n        db.set_num_of_uses(msg.sender, uses + 1);\n        _;\n    }\n2941-expression_statement-522-527", method="", type_label=expression_statement];
2944 [label="522_ uint8 uses = db.get_num_of_uses(msg.sender);\n2944-new_variable-523-523", method="", type_label=new_variable];
2957 [label="523_ require(uses < 5);\n2957-expression_statement-524-524", method="", type_label=expression_statement];
2964 [label="524_ db.set_num_of_uses(msg.sender, uses + 1);\n2964-expression_statement-525-525", method="", type_label=expression_statement];
2977 [label="525_ _;\n2977-expression_statement-526-526", method="", type_label=expression_statement];
2979 [label="527_ function participate_in_arbits_presale_crypto() public payable presale_open use_count {\n        (                                                                   \n            address p1,                                                     \n            uint256 p2,                                                     \n            uint256 p3,                                                     \n            uint256 p4,                                                     \n            bool p5,                                                        \n            uint8 p6                                                        \n        ) = db.get_participant(msg.sender);                                 \n        participant memory subject = participant(p1, p2, p3, p4, p5, p6);   \n        uint256 subject_tokens_to_add = msg.value.mul(db.get_presale_arbits_per_ether()).div(1 ether);                                     \n        if (subject.arbits_kyc_whitelist) {                                                                                                \n            subject_tokens_to_add = subject_tokens_to_add.mul(db.get_pre_kyc_bonus_numerator()).div(db.get_pre_kyc_bonus_denominator());   \n        }                                                                                                                                  \n        require(db.get_presale_arbits_total() >= db.get_presale_arbits_sold().add(subject_tokens_to_add));   \n        require(db.get_arbits_max_contribution() >= subject_tokens_to_add);  \n        require(db.get_arbits_min_contribution() <= subject_tokens_to_add);  \n        db.add_presale_arbits_sold(subject_tokens_to_add);  \n        db.add_arbits(msg.sender, subject_tokens_to_add);  \n        emit e_participate_in_arbits_presale_crypto(msg.sender, msg.value);   \n    }\n2979-function_definition-528-548", method="participate_in_arbits_presale_crypto()", type_label=function_definition];
2983 [label="527_ presale_open\n2983-expression_statement-528-528", method="participate_in_arbits_presale_crypto()", type_label=expression_statement];
2985 [label="527_ use_count\n2985-expression_statement-528-528", method="participate_in_arbits_presale_crypto()", type_label=expression_statement];
2988 [label="528_ (                                                                   \n            address p1,                                                     \n            uint256 p2,                                                     \n            uint256 p3,                                                     \n            uint256 p4,                                                     \n            bool p5,                                                        \n            uint8 p6                                                        \n        ) = db.get_participant(msg.sender);\n2988-new_variable-529-536", method="participate_in_arbits_presale_crypto()", type_label=new_variable];
3022 [label="536_ participant memory subject = participant(p1, p2, p3, p4, p5, p6);\n3022-new_variable-537-537", method="participate_in_arbits_presale_crypto()", type_label=new_variable];
3042 [label="537_ uint256 subject_tokens_to_add = msg.value.mul(db.get_presale_arbits_per_ether()).div(1 ether);\n3042-new_variable-538-538", method="participate_in_arbits_presale_crypto()", type_label=new_variable];
3064 [label="538_ if\n3064-if-539-541", method="participate_in_arbits_presale_crypto()", type_label=if];
6689 [label="538_ end_if", method="participate_in_arbits_presale_crypto()", type_label=end_if];
3069 [label="539_ subject_tokens_to_add = subject_tokens_to_add.mul(db.get_pre_kyc_bonus_numerator()).div(db.get_pre_kyc_bonus_denominator());\n3069-expression_statement-540-540", method="participate_in_arbits_presale_crypto()", type_label=expression_statement];
3089 [label="541_ require(db.get_presale_arbits_total() >= db.get_presale_arbits_sold().add(subject_tokens_to_add));\n3089-expression_statement-542-542", method="participate_in_arbits_presale_crypto()", type_label=expression_statement];
3107 [label="542_ require(db.get_arbits_max_contribution() >= subject_tokens_to_add);\n3107-expression_statement-543-543", method="participate_in_arbits_presale_crypto()", type_label=expression_statement];
3117 [label="543_ require(db.get_arbits_min_contribution() <= subject_tokens_to_add);\n3117-expression_statement-544-544", method="participate_in_arbits_presale_crypto()", type_label=expression_statement];
3127 [label="544_ db.add_presale_arbits_sold(subject_tokens_to_add);\n3127-expression_statement-545-545", method="participate_in_arbits_presale_crypto()", type_label=expression_statement];
3134 [label="545_ db.add_arbits(msg.sender, subject_tokens_to_add);\n3134-expression_statement-546-546", method="participate_in_arbits_presale_crypto()", type_label=expression_statement];
3155 [label="548_ function participate_in_arbits_presale_fiat(address _a, uint256 _t) public only_owner {\n        db.add_presale_arbits_sold(_t);  \n        db.add_arbits(_a, _t);  \n        emit e_participate_in_arbits_presale_fiat(_a, _t);   \n    }\n3155-function_definition-549-553", method="participate_in_arbits_presale_fiat(address _a,uint256 _t)", type_label=function_definition];
3166 [label="548_ only_owner\n3166-expression_statement-549-549", method="participate_in_arbits_presale_fiat(address _a,uint256 _t)", type_label=expression_statement];
3169 [label="549_ db.add_presale_arbits_sold(_t);\n3169-expression_statement-550-550", method="participate_in_arbits_presale_fiat(address _a,uint256 _t)", type_label=expression_statement];
3176 [label="550_ db.add_arbits(_a, _t);\n3176-expression_statement-551-551", method="participate_in_arbits_presale_fiat(address _a,uint256 _t)", type_label=expression_statement];
3195 [label="554_ participate_in_arbits_presale_crypto();\n3195-expression_statement-555-555", method="", type_label=expression_statement];
3208 [label="557_ function kill_and_withdraw(address withdraw_to) public only_owner {\n        emit e_kill_and_withdraw(withdraw_to);\n        selfdestruct(withdraw_to);\n    }\n3208-function_definition-558-561", method="kill_and_withdraw(address withdraw_to)", type_label=function_definition];
3215 [label="557_ only_owner\n3215-expression_statement-558-558", method="kill_and_withdraw(address withdraw_to)", type_label=expression_statement];
3222 [label="559_ selfdestruct(withdraw_to);\n3222-expression_statement-560-560", method="kill_and_withdraw(address withdraw_to)", type_label=expression_statement];
3227 [label="561_ function withdraw_some_amount(address withdraw_to, uint256 amount) public only_owner {\n        withdraw_to.transfer(amount);  \n        emit e_withdraw_some_amount(withdraw_to, amount);\n    }\n3227-function_definition-562-565", method="withdraw_some_amount(address withdraw_to,uint256 amount)", type_label=function_definition];
3238 [label="561_ only_owner\n3238-expression_statement-562-562", method="withdraw_some_amount(address withdraw_to,uint256 amount)", type_label=expression_statement];
3241 [label="562_ withdraw_to.transfer(amount);\n3241-expression_statement-563-563", method="withdraw_some_amount(address withdraw_to,uint256 amount)", type_label=expression_statement];
3254 [label="565_ function set_sale_open() public only_owner {\n        require(db.get_presale_arbits_per_ether() > 0);\n        require(db.get_arbits_max_contribution() > 0);\n        require(db.get_arbits_min_contribution() > 0);\n        require(db.get_pre_kyc_bonus_numerator() > 0);\n        require(db.get_pre_kyc_bonus_denominator() > 0);\n        db.set_arbits_presale_open(true);\n    }\n3254-function_definition-566-573", method="set_sale_open()", type_label=function_definition];
3257 [label="565_ only_owner\n3257-expression_statement-566-566", method="set_sale_open()", type_label=expression_statement];
3260 [label="566_ require(db.get_presale_arbits_per_ether() > 0);\n3260-expression_statement-567-567", method="set_sale_open()", type_label=expression_statement];
3270 [label="567_ require(db.get_arbits_max_contribution() > 0);\n3270-expression_statement-568-568", method="set_sale_open()", type_label=expression_statement];
3280 [label="568_ require(db.get_arbits_min_contribution() > 0);\n3280-expression_statement-569-569", method="set_sale_open()", type_label=expression_statement];
3290 [label="569_ require(db.get_pre_kyc_bonus_numerator() > 0);\n3290-expression_statement-570-570", method="set_sale_open()", type_label=expression_statement];
3300 [label="570_ require(db.get_pre_kyc_bonus_denominator() > 0);\n3300-expression_statement-571-571", method="set_sale_open()", type_label=expression_statement];
3310 [label="571_ db.set_arbits_presale_open(true);\n3310-expression_statement-572-572", method="set_sale_open()", type_label=expression_statement];
3318 [label="573_ function set_sale_closed() public only_owner {\n        db.set_arbits_presale_open(false);\n    }\n3318-function_definition-574-576", method="set_sale_closed()", type_label=function_definition];
3321 [label="573_ only_owner\n3321-expression_statement-574-574", method="set_sale_closed()", type_label=expression_statement];
3324 [label="574_ db.set_arbits_presale_open(false);\n3324-expression_statement-575-575", method="set_sale_closed()", type_label=expression_statement];
3332 [label="576_ function set_tokens_per_ether(uint256 _v) public only_owner {\n        db.set_presale_arbits_per_ether(_v);\n    }\n3332-function_definition-577-579", method="set_tokens_per_ether(uint256 _v)", type_label=function_definition];
3339 [label="576_ only_owner\n3339-expression_statement-577-577", method="set_tokens_per_ether(uint256 _v)", type_label=expression_statement];
3342 [label="577_ db.set_presale_arbits_per_ether(_v);\n3342-expression_statement-578-578", method="set_tokens_per_ether(uint256 _v)", type_label=expression_statement];
3349 [label="579_ function set_pre_kyc_bonus_numerator(uint256 _v) public only_owner {\n        db.set_pre_kyc_bonus_numerator(_v);\n    }\n3349-function_definition-580-582", method="set_pre_kyc_bonus_numerator(uint256 _v)", type_label=function_definition];
3356 [label="579_ only_owner\n3356-expression_statement-580-580", method="set_pre_kyc_bonus_numerator(uint256 _v)", type_label=expression_statement];
3359 [label="580_ db.set_pre_kyc_bonus_numerator(_v);\n3359-expression_statement-581-581", method="set_pre_kyc_bonus_numerator(uint256 _v)", type_label=expression_statement];
3366 [label="582_ function set_pre_kyc_bonus_denominator(uint256 _v) public only_owner {\n        db.set_pre_kyc_bonus_denominator(_v);\n    }\n3366-function_definition-583-585", method="set_pre_kyc_bonus_denominator(uint256 _v)", type_label=function_definition];
3373 [label="582_ only_owner\n3373-expression_statement-583-583", method="set_pre_kyc_bonus_denominator(uint256 _v)", type_label=expression_statement];
3376 [label="583_ db.set_pre_kyc_bonus_denominator(_v);\n3376-expression_statement-584-584", method="set_pre_kyc_bonus_denominator(uint256 _v)", type_label=expression_statement];
3383 [label="585_ function add_to_whitelist(address _a) public only_owner {\n        db.set_arbits_whitelist(_a, true);\n        emit e_add_to_whitelist(msg.sender, _a);\n    }\n3383-function_definition-586-589", method="add_to_whitelist(address _a)", type_label=function_definition];
3390 [label="585_ only_owner\n3390-expression_statement-586-586", method="add_to_whitelist(address _a)", type_label=expression_statement];
3393 [label="586_ db.set_arbits_whitelist(_a, true);\n3393-expression_statement-587-587", method="add_to_whitelist(address _a)", type_label=expression_statement];
3411 [label="589_ function remove_from_whitelist(address _a) public only_owner {\n        db.set_arbits_whitelist(_a, false);\n        emit e_remove_from_whitelist(msg.sender, _a);\n    }\n3411-function_definition-590-593", method="remove_from_whitelist(address _a)", type_label=function_definition];
3418 [label="589_ only_owner\n3418-expression_statement-590-590", method="remove_from_whitelist(address _a)", type_label=expression_statement];
3421 [label="590_ db.set_arbits_whitelist(_a, false);\n3421-expression_statement-591-591", method="remove_from_whitelist(address _a)", type_label=expression_statement];
3439 [label="593_ function set_max_contribution(uint256 _v) public only_owner {\n        db.set_arbits_max_contribution(_v);\n    }\n3439-function_definition-594-596", method="set_max_contribution(uint256 _v)", type_label=function_definition];
3446 [label="593_ only_owner\n3446-expression_statement-594-594", method="set_max_contribution(uint256 _v)", type_label=expression_statement];
3449 [label="594_ db.set_arbits_max_contribution(_v);\n3449-expression_statement-595-595", method="set_max_contribution(uint256 _v)", type_label=expression_statement];
3456 [label="596_ function set_min_contribution(uint256 _v) public only_owner {\n        db.set_arbits_min_contribution(_v);\n    }\n3456-function_definition-597-599", method="set_min_contribution(uint256 _v)", type_label=function_definition];
3463 [label="596_ only_owner\n3463-expression_statement-597-597", method="set_min_contribution(uint256 _v)", type_label=expression_statement];
3466 [label="597_ db.set_arbits_min_contribution(_v);\n3466-expression_statement-598-598", method="set_min_contribution(uint256 _v)", type_label=expression_statement];
3473 [label="599_ function set_tokens_total(uint256 _v) public only_owner {\n        db.set_presale_arbits_total(_v);\n    }\n3473-function_definition-600-602", method="set_tokens_total(uint256 _v)", type_label=function_definition];
3480 [label="599_ only_owner\n3480-expression_statement-600-600", method="set_tokens_total(uint256 _v)", type_label=expression_statement];
3483 [label="600_ db.set_presale_arbits_total(_v);\n3483-expression_statement-601-601", method="set_tokens_total(uint256 _v)", type_label=expression_statement];
3490 [label="602_ function set_tokens_sold(uint256 _v) public only_owner {\n        db.set_presale_arbits_sold(_v);\n    }\n3490-function_definition-603-605", method="set_tokens_sold(uint256 _v)", type_label=function_definition];
3497 [label="602_ only_owner\n3497-expression_statement-603-603", method="set_tokens_sold(uint256 _v)", type_label=expression_statement];
3500 [label="603_ db.set_presale_arbits_sold(_v);\n3500-expression_statement-604-604", method="set_tokens_sold(uint256 _v)", type_label=expression_statement];
3507 [label="605_ function is_presale_open() public view returns(bool) {\n        return db.get_arbits_presale_open();\n    }\n3507-function_definition-606-608", method="is_presale_open()", type_label=function_definition];
3516 [label="606_ return db.get_arbits_presale_open();\n3516-return-607-607", method="is_presale_open()", type_label=return];
3521 [label="608_ function am_i_on_the_whitelist() public view returns(bool) {\n        return db.get_arbits_whitelist(msg.sender);\n    }\n3521-function_definition-609-611", method="am_i_on_the_whitelist()", type_label=function_definition];
3530 [label="609_ return db.get_arbits_whitelist(msg.sender);\n3530-return-610-610", method="am_i_on_the_whitelist()", type_label=return];
3539 [label="611_ function how_many_arbits_do_i_have() public view returns(uint256) {\n        return db.get_arbits(msg.sender);\n    }\n3539-function_definition-612-614", method="how_many_arbits_do_i_have()", type_label=function_definition];
3548 [label="612_ return db.get_arbits(msg.sender);\n3548-return-613-613", method="how_many_arbits_do_i_have()", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
29 -> 3654  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3654 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 3654  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
34 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
36 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
55 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 79  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
79 -> 87  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
89 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
123 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
148 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
157 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
193 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
219 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
226 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
240 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
268 -> 275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
275 -> 282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
282 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
292 -> 297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
297 -> 302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
302 -> 307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
307 -> 312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
312 -> 317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
317 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
328 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
338 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
359 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
376 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
491 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
508 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
538 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
542 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
553 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
562 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
564 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
573 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
575 -> 584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
584 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
586 -> 595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
595 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
597 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
608 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
620 -> 629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
629 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
632 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
641 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
644 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
656 -> 665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
668 -> 677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
680 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
689 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
692 -> 706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
726 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
740 -> 750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
754 -> 764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
768 -> 778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
782 -> 792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
796 -> 806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
810 -> 820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
824 -> 834  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
852 -> 862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
866 -> 876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
880 -> 890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
894 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
931 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
951 -> 964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
964 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
971 -> 984  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
984 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
991 -> 1004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1011 -> 1024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1024 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1031 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1044 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1051 -> 1085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1078 -> 1080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1085 -> 1094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1094 -> 1100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1100 -> 1106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 1118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1118 -> 1124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1130 -> 1148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1141 -> 1143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1156 -> 1174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1167 -> 1169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1182 -> 1200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1193 -> 1195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1208 -> 1226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1219 -> 1221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1234 -> 1252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1245 -> 1247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1260 -> 1271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1271 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1273 -> 1284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1284 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1286 -> 1297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1297 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1299 -> 1309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1313 -> 1323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1327 -> 1337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1344 -> 1376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1376 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1386 -> 1403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1403 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1413 -> 1430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1430 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1440 -> 1457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1457 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1467 -> 1484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1484 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1494 -> 1511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1511 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1521 -> 1553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1587 -> 1603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1621 -> 1637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1655 -> 1671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1689 -> 1705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1723 -> 1739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1757 -> 1773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1773 -> 1789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1789 -> 1804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1833 -> 1849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1849 -> 1864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1893 -> 1906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1906 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1914 -> 1927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1927 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1935 -> 1948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1948 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1956 -> 1969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1969 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1977 -> 1989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2003 -> 2015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2029 -> 2041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2055 -> 2067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2081 -> 2094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2094 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2102 -> 2115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2115 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2123 -> 2136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2136 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2144 -> 2157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2157 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2165 -> 2177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2191 -> 2203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2217 -> 2229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2243 -> 2255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2269 -> 2282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2282 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2290 -> 2303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2303 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2311 -> 2324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2324 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2332 -> 2345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2345 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2353 -> 2365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2379 -> 2391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2405 -> 2417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2431 -> 2443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2457 -> 2469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2469 -> 2483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2483 -> 2496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2519 -> 2531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2531 -> 2544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2567 -> 2583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2595 -> 2612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2612 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2789 -> 2794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2794 -> 2799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2831 -> 2835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2841 -> 2845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2858 -> 2870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2872 -> 2882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2900 -> 2910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2928 -> 2941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2931 -> 2939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2944 -> 2957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2957 -> 2964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2964 -> 2977  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2979 -> 2988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2983 -> 2985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2988 -> 3022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3022 -> 3042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3042 -> 3064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3064 -> 3069  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3064 -> 6689  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6689 -> 3089  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3069 -> 6689  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3089 -> 3107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3107 -> 3117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3117 -> 3127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3127 -> 3134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3155 -> 3169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3169 -> 3176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3208 -> 3222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3227 -> 3241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3254 -> 3260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3260 -> 3270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3270 -> 3280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3280 -> 3290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3290 -> 3300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3300 -> 3310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3318 -> 3324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3332 -> 3342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3349 -> 3359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3366 -> 3376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3383 -> 3393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3411 -> 3421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3439 -> 3449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3456 -> 3466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3473 -> 3483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3490 -> 3500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3507 -> 3516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3516 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3521 -> 3530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3530 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3539 -> 3548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3548 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
