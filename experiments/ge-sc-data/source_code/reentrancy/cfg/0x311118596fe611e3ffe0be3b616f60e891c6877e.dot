digraph  {
13 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n13-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
588 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
45 [label="7_ require(c / a == b);\n45-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
56 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n	    return c;\n    }\n56-function_definition-11-15", method="div(uint256 a,uint256 b)", type_label=function_definition];
73 [label="11_ require(b > 0);\n73-expression_statement-12-12", method="div(uint256 a,uint256 b)", type_label=expression_statement];
80 [label="12_ uint256 c = a / b;\n80-new_variable-13-13", method="div(uint256 a,uint256 b)", type_label=new_variable];
88 [label="13_ return c;\n88-return-14-14", method="div(uint256 a,uint256 b)", type_label=return];
90 [label="15_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n90-function_definition-16-20", method="sub(uint256 a,uint256 b)", type_label=function_definition];
107 [label="16_ require(b <= a);\n107-expression_statement-17-17", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
114 [label="17_ uint256 c = a - b;\n114-new_variable-18-18", method="sub(uint256 a,uint256 b)", type_label=new_variable];
122 [label="18_ return c;\n122-return-19-19", method="sub(uint256 a,uint256 b)", type_label=return];
124 [label="20_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n124-function_definition-21-25", method="add(uint256 a,uint256 b)", type_label=function_definition];
141 [label="21_ uint256 c = a + b;\n141-new_variable-22-22", method="add(uint256 a,uint256 b)", type_label=new_variable];
149 [label="22_ require(c >= a);\n149-expression_statement-23-23", method="add(uint256 a,uint256 b)", type_label=expression_statement];
156 [label="23_ return c;\n156-return-24-24", method="add(uint256 a,uint256 b)", type_label=return];
158 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n158-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
175 [label="26_ require(b != 0);\n175-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
182 [label="27_ return a % b;\n182-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
194 [label="32_ uint public totalSupply;\n194-new_variable-33-33", method="", type_label=new_variable];
199 [label="33_ string public name;\n199-new_variable-34-34", method="", type_label=new_variable];
204 [label="34_ uint8 public decimals;\n204-new_variable-35-35", method="", type_label=new_variable];
209 [label="35_ string public symbol;\n209-new_variable-36-36", method="", type_label=new_variable];
214 [label="36_ string public version;\n214-new_variable-37-37", method="", type_label=new_variable];
219 [label="37_ mapping (address => uint256) balances;\n219-new_variable-38-38", method="", type_label=new_variable];
225 [label="38_ mapping (address => mapping (address => uint)) allowed;\n225-new_variable-39-39", method="", type_label=new_variable];
233 [label="39_ modifier onlyPayloadSize(uint size) {\n		assert(msg.data.length == size + 4);\n		_;\n	}\n233-expression_statement-40-43", method="", type_label=expression_statement];
240 [label="40_ assert(msg.data.length == size + 4);\n240-expression_statement-41-41", method="", type_label=expression_statement];
253 [label="41_ _;\n253-expression_statement-42-42", method="", type_label=expression_statement];
255 [label="43_ function balanceOf(address _owner) public view returns (uint balance) {\n		return balances[_owner];\n	}\n255-function_definition-44-46", method="balanceOf(address _owner)", type_label=function_definition];
269 [label="44_ return balances[_owner];\n269-return-45-45", method="balanceOf(address _owner)", type_label=return];
273 [label="46_ function transfer(address _recipient, uint _value) public onlyPayloadSize(2*32) {\n	    require(balances[msg.sender] >= _value && _value > 0);\n	    balances[msg.sender] = balances[msg.sender].sub(_value);\n	    balances[_recipient] = balances[_recipient].add(_value);\n	    emit Transfer(msg.sender, _recipient, _value);\n    }\n273-function_definition-47-52", method="transfer(address _recipient,uint _value)", type_label=function_definition];
284 [label="46_ onlyPayloadSize(2*32)\n284-expression_statement-47-47", method="transfer(address _recipient,uint _value)", type_label=expression_statement];
291 [label="47_ require(balances[msg.sender] >= _value && _value > 0);\n291-expression_statement-48-48", method="transfer(address _recipient,uint _value)", type_label=expression_statement];
306 [label="48_ balances[msg.sender] = balances[msg.sender].sub(_value);\n306-expression_statement-49-49", method="transfer(address _recipient,uint _value)", type_label=expression_statement];
323 [label="49_ balances[_recipient] = balances[_recipient].add(_value);\n323-expression_statement-50-50", method="transfer(address _recipient,uint _value)", type_label=expression_statement];
346 [label="52_ function transferFrom(address _from, address _to, uint _value) public {\n	    require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\n            balances[_to] = balances[_to].add(_value);\n            balances[_from] = balances[_from].sub(_value);\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n            emit Transfer(_from, _to, _value);\n    }\n346-function_definition-53-59", method="transferFrom(address _from,address _to,uint _value)", type_label=function_definition];
362 [label="53_ require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\n362-expression_statement-54-54", method="transferFrom(address _from,address _to,uint _value)", type_label=expression_statement];
385 [label="54_ balances[_to] = balances[_to].add(_value);\n385-expression_statement-55-55", method="transferFrom(address _from,address _to,uint _value)", type_label=expression_statement];
398 [label="55_ balances[_from] = balances[_from].sub(_value);\n398-expression_statement-56-56", method="transferFrom(address _from,address _to,uint _value)", type_label=expression_statement];
411 [label="56_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n411-expression_statement-57-57", method="transferFrom(address _from,address _to,uint _value)", type_label=expression_statement];
440 [label="59_ function  approve(address _spender, uint _value) public {\n		allowed[msg.sender][_spender] = _value;\n		emit Approval(msg.sender, _spender, _value);\n	}\n440-function_definition-60-63", method="approve(address _spender,uint _value)", type_label=function_definition];
452 [label="60_ allowed[msg.sender][_spender] = _value;\n452-expression_statement-61-61", method="approve(address _spender,uint _value)", type_label=expression_statement];
472 [label="63_ function allowance(address _spender, address _owner) public view returns (uint balance) {\n		return allowed[_owner][_spender];\n	}\n472-function_definition-64-66", method="allowance(address _spender,address _owner)", type_label=function_definition];
490 [label="64_ return allowed[_owner][_spender];\n490-return-65-65", method="allowance(address _spender,address _owner)", type_label=return];
532 [label="79_ totalSupply = 200000000000000000000000000;\n532-expression_statement-80-80", method="", type_label=expression_statement];
536 [label="80_ name = \"Blockchain Invest Platform Token\";\n536-expression_statement-81-81", method="", type_label=expression_statement];
541 [label="81_ decimals = 18;\n541-expression_statement-82-82", method="", type_label=expression_statement];
545 [label="82_ symbol = \"BIP\";\n545-expression_statement-83-83", method="", type_label=expression_statement];
550 [label="83_ version = \"2.0\";\n550-expression_statement-84-84", method="", type_label=expression_statement];
555 [label="84_ balances[msg.sender] = totalSupply;\n555-expression_statement-85-85", method="", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 588  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
588 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 588  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
90 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
124 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
156 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
158 -> 175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
175 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
194 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
204 -> 209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
209 -> 214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
219 -> 225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
240 -> 253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
273 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
291 -> 306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
306 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
346 -> 362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
362 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
440 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
472 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
532 -> 536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
536 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
