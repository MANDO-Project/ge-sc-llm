digraph  {
13 [label="2_ function totalSupply() public view returns (uint256);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ function balanceOf(address who) public view returns (uint256);\n21-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
33 [label="4_ function transfer(address to, uint256 value) public returns (bool);\n33-function_definition-5-5", method="transfer(address to,uint256 value)", type_label=function_definition];
68 [label="8_ function allowance(address owner, address spender) public view returns (uint256);\n68-function_definition-9-9", method="allowance(address owner,address spender)", type_label=function_definition];
84 [label="9_ function transferFrom(address from, address to, uint256 value) public returns (bool);\n84-function_definition-10-10", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
103 [label="10_ function approve(address spender, uint256 value) public returns (bool);\n103-function_definition-11-11", method="approve(address spender,uint256 value)", type_label=function_definition];
135 [label="14_ function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n135-function_definition-15-17", method="safeTransfer(ERC20Basic token,address to,uint256 value)", type_label=function_definition];
152 [label="15_ assert(token.transfer(to, value));\n152-expression_statement-16-16", method="safeTransfer(ERC20Basic token,address to,uint256 value)", type_label=expression_statement];
164 [label="17_ function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n164-function_definition-18-20", method="safeTransferFrom(ERC20 token,address from,address to,uint256 value)", type_label=function_definition];
185 [label="18_ assert(token.transferFrom(from, to, value));\n185-expression_statement-19-19", method="safeTransferFrom(ERC20 token,address from,address to,uint256 value)", type_label=expression_statement];
199 [label="20_ function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n199-function_definition-21-23", method="safeApprove(ERC20 token,address spender,uint256 value)", type_label=function_definition];
216 [label="21_ assert(token.approve(spender, value));\n216-expression_statement-22-22", method="safeApprove(ERC20 token,address spender,uint256 value)", type_label=expression_statement];
237 [label="26_ ERC20Basic public token;\n237-new_variable-27-27", method="", type_label=new_variable];
243 [label="27_ address public beneficiary;\n243-new_variable-28-28", method="", type_label=new_variable];
248 [label="28_ uint256 public releaseTime;\n248-new_variable-29-29", method="", type_label=new_variable];
253 [label="29_ function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n    require(_releaseTime > now);\n    token = _token;\n    beneficiary = _beneficiary;\n    releaseTime = _releaseTime;\n  }\n253-function_definition-30-35", method="TokenTimelock(ERC20Basic _token,address _beneficiary,uint256 _releaseTime)", type_label=function_definition];
270 [label="30_ require(_releaseTime > now);\n270-expression_statement-31-31", method="TokenTimelock(ERC20Basic _token,address _beneficiary,uint256 _releaseTime)", type_label=expression_statement];
277 [label="31_ token = _token;\n277-expression_statement-32-32", method="TokenTimelock(ERC20Basic _token,address _beneficiary,uint256 _releaseTime)", type_label=expression_statement];
281 [label="32_ beneficiary = _beneficiary;\n281-expression_statement-33-33", method="TokenTimelock(ERC20Basic _token,address _beneficiary,uint256 _releaseTime)", type_label=expression_statement];
285 [label="33_ releaseTime = _releaseTime;\n285-expression_statement-34-34", method="TokenTimelock(ERC20Basic _token,address _beneficiary,uint256 _releaseTime)", type_label=expression_statement];
289 [label="35_ function release() public {\n    require(now >= releaseTime);\n    uint256 amount = token.balanceOf(this);\n    require(amount > 0);\n    token.safeTransfer(beneficiary, amount);\n  }\n289-function_definition-36-41", method="release()", type_label=function_definition];
293 [label="36_ require(now >= releaseTime);\n293-expression_statement-37-37", method="release()", type_label=expression_statement];
300 [label="37_ uint256 amount = token.balanceOf(this);\n300-new_variable-38-38", method="release()", type_label=new_variable];
311 [label="38_ require(amount > 0);\n311-expression_statement-39-39", method="release()", type_label=expression_statement];
318 [label="39_ token.safeTransfer(beneficiary, amount);\n318-expression_statement-40-40", method="release()", type_label=expression_statement];
330 [label="43_ function create(ERC20Basic _token, address _beneficiary) public\n   {\n       emit Created(new TokenTimelock(_token, _beneficiary, now + 180 days));\n   }\n330-function_definition-44-47", method="create(ERC20Basic _token,address _beneficiary)", type_label=function_definition];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
135 -> 152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
237 -> 243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
243 -> 248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
253 -> 270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
270 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
281 -> 285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
293 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
311 -> 318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
