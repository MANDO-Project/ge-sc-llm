digraph  {
13 [label="2_ function add(uint a, uint b) internal pure returns(uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n13-function_definition-3-6", method="add(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a + b;\n31-expression_statement-4-4", method="add(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(c >= a);\n37-expression_statement-5-5", method="add(uint a,uint b)", type_label=expression_statement];
44 [label="6_ function sub(uint a, uint b) internal pure returns(uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n44-function_definition-7-10", method="sub(uint a,uint b)", type_label=function_definition];
62 [label="7_ require(b <= a);\n62-expression_statement-8-8", method="sub(uint a,uint b)", type_label=expression_statement];
69 [label="8_ c = a - b;\n69-expression_statement-9-9", method="sub(uint a,uint b)", type_label=expression_statement];
75 [label="10_ function mul(uint a, uint b) internal pure returns(uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n75-function_definition-11-14", method="mul(uint a,uint b)", type_label=function_definition];
93 [label="11_ c = a * b;\n93-expression_statement-12-12", method="mul(uint a,uint b)", type_label=expression_statement];
99 [label="12_ require(a == 0 || c / a == b);\n99-expression_statement-13-13", method="mul(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function div(uint a, uint b) internal pure returns(uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n112-function_definition-15-18", method="div(uint a,uint b)", type_label=function_definition];
130 [label="15_ require(b > 0);\n130-expression_statement-16-16", method="div(uint a,uint b)", type_label=expression_statement];
137 [label="16_ c = a / b;\n137-expression_statement-17-17", method="div(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function limitLessThan(uint a, uint b) internal pure returns(uint c) {\n        if (a > b) return b;\n        return a;\n    }\n146-function_definition-21-24", method="limitLessThan(uint a,uint b)", type_label=function_definition];
164 [label="21_ if_a > b\n164-if-22-22", method="limitLessThan(uint a,uint b)", type_label=if];
3509 [label="21_ end_if", method="limitLessThan(uint a,uint b)", type_label=end_if];
168 [label="21_ return b;\n168-return-22-22", method="limitLessThan(uint a,uint b)", type_label=return];
170 [label="22_ return a;\n170-return-23-23", method="limitLessThan(uint a,uint b)", type_label=return];
175 [label="26_ function totalSupply() public view returns(uint);\n175-function_definition-27-27", method="totalSupply()", type_label=function_definition];
183 [label="27_ uint256 counter_re_ent21 =0;\n183-new_variable-28-28", method="", type_label=new_variable];
188 [label="28_ function callme_re_ent21() public{\n        require(counter_re_ent21<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent21 += 1;\n    }\n188-function_definition-29-35", method="callme_re_ent21()", type_label=function_definition];
192 [label="29_ require(counter_re_ent21<=5);\n192-expression_statement-30-30", method="callme_re_ent21()", type_label=expression_statement];
199 [label="30_ if\n199-if-31-33", method="callme_re_ent21()", type_label=if];
3544 [label="30_ end_if", method="callme_re_ent21()", type_label=end_if];
214 [label="33_ counter_re_ent21 += 1;\n214-expression_statement-34-34", method="callme_re_ent21()", type_label=expression_statement];
218 [label="35_ function balanceOf(address tokenOwner) public view returns(uint balance);\n218-function_definition-36-36", method="balanceOf(address tokenOwner)", type_label=function_definition];
231 [label="36_ mapping(address => uint) balances_re_ent10;\n231-new_variable-37-37", method="", type_label=new_variable];
237 [label="37_ function withdrawFunds_re_ent10 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent10[msg.sender] -= _weiToWithdraw;\n    }\n237-function_definition-38-42", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=function_definition];
245 [label="38_ require(balances_re_ent10[msg.sender] >= _weiToWithdraw);\n245-expression_statement-39-39", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
256 [label="39_ require(msg.sender.send(_weiToWithdraw));\n256-expression_statement-40-40", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
268 [label="40_ balances_re_ent10[msg.sender] -= _weiToWithdraw;\n268-expression_statement-41-41", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
276 [label="42_ function allowance(address tokenOwner, address spender) public view returns(uint remaining);\n276-function_definition-43-43", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
293 [label="43_ mapping(address => uint) balances_re_ent21;\n293-new_variable-44-44", method="", type_label=new_variable];
299 [label="44_ function withdraw_balances_re_ent21 () public {\n       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent21[msg.sender] = 0;\n      }\n299-function_definition-45-49", method="withdraw_balances_re_ent21()", type_label=function_definition];
303 [label="45_ (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n303-new_variable-46-46", method="withdraw_balances_re_ent21()", type_label=new_variable];
327 [label="46_ if\n327-if-47-48", method="withdraw_balances_re_ent21()", type_label=if];
3672 [label="46_ end_if", method="withdraw_balances_re_ent21()", type_label=end_if];
329 [label="47_ balances_re_ent21[msg.sender] = 0;\n329-expression_statement-48-48", method="withdraw_balances_re_ent21()", type_label=expression_statement];
337 [label="49_ function transfer(address to, uint tokens) public returns(bool success);\n337-function_definition-50-50", method="transfer(address to,uint tokens)", type_label=function_definition];
353 [label="50_ mapping(address => uint) userBalance_re_ent12;\n353-new_variable-51-51", method="", type_label=new_variable];
359 [label="51_ function withdrawBalance_re_ent12() public{\n        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent12[msg.sender] = 0;\n    }\n359-function_definition-52-57", method="withdrawBalance_re_ent12()", type_label=function_definition];
363 [label="52_ if\n363-if-53-55", method="withdrawBalance_re_ent12()", type_label=if];
3708 [label="52_ end_if", method="withdrawBalance_re_ent12()", type_label=end_if];
381 [label="55_ userBalance_re_ent12[msg.sender] = 0;\n381-expression_statement-56-56", method="withdrawBalance_re_ent12()", type_label=expression_statement];
389 [label="57_ function approve(address spender, uint tokens) public returns(bool success);\n389-function_definition-58-58", method="approve(address spender,uint tokens)", type_label=function_definition];
405 [label="58_ mapping(address => uint) redeemableEther_re_ent11;\n405-new_variable-59-59", method="", type_label=new_variable];
411 [label="59_ function claimReward_re_ent11() public {        \n        require(redeemableEther_re_ent11[msg.sender] > 0);\n        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n        msg.sender.transfer(transferValue_re_ent11);    \n        redeemableEther_re_ent11[msg.sender] = 0;\n    }\n411-function_definition-60-65", method="claimReward_re_ent11()", type_label=function_definition];
415 [label="60_ require(redeemableEther_re_ent11[msg.sender] > 0);\n415-expression_statement-61-61", method="claimReward_re_ent11()", type_label=expression_statement];
426 [label="61_ uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n426-new_variable-62-62", method="claimReward_re_ent11()", type_label=new_variable];
436 [label="62_ msg.sender.transfer(transferValue_re_ent11);\n436-expression_statement-63-63", method="claimReward_re_ent11()", type_label=expression_statement];
445 [label="63_ redeemableEther_re_ent11[msg.sender] = 0;\n445-expression_statement-64-64", method="claimReward_re_ent11()", type_label=expression_statement];
453 [label="65_ function transferFrom(address from, address to, uint tokens) public returns(bool success);\n453-function_definition-66-66", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
473 [label="66_ mapping(address => uint) balances_re_ent1;\n473-new_variable-67-67", method="", type_label=new_variable];
479 [label="67_ function withdraw_balances_re_ent1 () public {\n       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent1[msg.sender] = 0;\n      }\n479-function_definition-68-72", method="withdraw_balances_re_ent1()", type_label=function_definition];
483 [label="68_ (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n483-new_variable-69-69", method="withdraw_balances_re_ent1()", type_label=new_variable];
507 [label="69_ if\n507-if-70-71", method="withdraw_balances_re_ent1()", type_label=if];
3852 [label="69_ end_if", method="withdraw_balances_re_ent1()", type_label=end_if];
509 [label="70_ balances_re_ent1[msg.sender] = 0;\n509-expression_statement-71-71", method="withdraw_balances_re_ent1()", type_label=expression_statement];
517 [label="72_ mapping(address => uint) userBalance_re_ent33;\n517-new_variable-73-73", method="", type_label=new_variable];
523 [label="73_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n523-function_definition-74-80", method="withdrawBalance_re_ent33()", type_label=function_definition];
527 [label="74_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n527-new_variable-75-75", method="withdrawBalance_re_ent33()", type_label=new_variable];
551 [label="75_ if\n551-if-76-78", method="withdrawBalance_re_ent33()", type_label=if];
3896 [label="75_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
557 [label="78_ userBalance_re_ent33[msg.sender] = 0;\n557-expression_statement-79-79", method="withdrawBalance_re_ent33()", type_label=expression_statement];
579 [label="81_ bool not_called_re_ent27 = true;\n579-new_variable-82-82", method="", type_label=new_variable];
585 [label="82_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n585-function_definition-83-89", method="bug_re_ent27()", type_label=function_definition];
589 [label="83_ require(not_called_re_ent27);\n589-expression_statement-84-84", method="bug_re_ent27()", type_label=expression_statement];
594 [label="84_ if\n594-if-85-87", method="bug_re_ent27()", type_label=if];
3939 [label="84_ end_if", method="bug_re_ent27()", type_label=end_if];
609 [label="87_ not_called_re_ent27 = false;\n609-expression_statement-88-88", method="bug_re_ent27()", type_label=expression_statement];
631 [label="92_ function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n631-function_definition-93-93", method="receiveApproval(address from,uint256 tokens,address token,bytes memory data)", type_label=function_definition];
650 [label="93_ bool not_called_re_ent41 = true;\n650-new_variable-94-94", method="", type_label=new_variable];
656 [label="94_ function bug_re_ent41() public{\n        require(not_called_re_ent41);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent41 = false;\n    }\n656-function_definition-95-101", method="bug_re_ent41()", type_label=function_definition];
660 [label="95_ require(not_called_re_ent41);\n660-expression_statement-96-96", method="bug_re_ent41()", type_label=expression_statement];
665 [label="96_ if\n665-if-97-99", method="bug_re_ent41()", type_label=if];
4010 [label="96_ end_if", method="bug_re_ent41()", type_label=end_if];
680 [label="99_ not_called_re_ent41 = false;\n680-expression_statement-100-100", method="bug_re_ent41()", type_label=expression_statement];
688 [label="103_ address public owner;\n688-new_variable-104-104", method="", type_label=new_variable];
693 [label="104_ address public newOwner;\n693-new_variable-105-105", method="", type_label=new_variable];
698 [label="105_ mapping(address => uint) balances_re_ent31;\n698-new_variable-106-106", method="", type_label=new_variable];
704 [label="106_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n704-function_definition-107-111", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
712 [label="107_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n712-expression_statement-108-108", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
723 [label="108_ require(msg.sender.send(_weiToWithdraw));\n723-expression_statement-109-109", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
735 [label="109_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n735-expression_statement-110-110", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
755 [label="113_ owner = msg.sender;\n755-expression_statement-114-114", method="", type_label=expression_statement];
761 [label="115_ uint256 counter_re_ent42 =0;\n761-new_variable-116-116", method="", type_label=new_variable];
766 [label="116_ function callme_re_ent42() public{\n        require(counter_re_ent42<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent42 += 1;\n    }\n766-function_definition-117-123", method="callme_re_ent42()", type_label=function_definition];
770 [label="117_ require(counter_re_ent42<=5);\n770-expression_statement-118-118", method="callme_re_ent42()", type_label=expression_statement];
777 [label="118_ if\n777-if-119-121", method="callme_re_ent42()", type_label=if];
4122 [label="118_ end_if", method="callme_re_ent42()", type_label=end_if];
792 [label="121_ counter_re_ent42 += 1;\n792-expression_statement-122-122", method="callme_re_ent42()", type_label=expression_statement];
796 [label="123_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n796-expression_statement-124-127", method="", type_label=expression_statement];
799 [label="124_ require(msg.sender == owner);\n799-expression_statement-125-125", method="", type_label=expression_statement];
808 [label="125_ _;\n808-expression_statement-126-126", method="", type_label=expression_statement];
810 [label="127_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n810-function_definition-128-130", method="transferOwnership(address _newOwner)", type_label=function_definition];
817 [label="127_ onlyOwner\n817-expression_statement-128-128", method="transferOwnership(address _newOwner)", type_label=expression_statement];
820 [label="128_ newOwner = _newOwner;\n820-expression_statement-129-129", method="transferOwnership(address _newOwner)", type_label=expression_statement];
824 [label="130_ address payable lastPlayer_re_ent2;\n824-new_variable-131-131", method="", type_label=new_variable];
828 [label="131_ uint jackpot_re_ent2;\n828-new_variable-132-132", method="", type_label=new_variable];
832 [label="132_ function buyTicket_re_ent2() public{\n	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))\n        revert();\n      lastPlayer_re_ent2 = msg.sender;\n      jackpot_re_ent2    = address(this).balance;\n    }\n832-function_definition-133-138", method="buyTicket_re_ent2()", type_label=function_definition];
836 [label="133_ if\n836-if-134-135", method="buyTicket_re_ent2()", type_label=if];
4181 [label="133_ end_if", method="buyTicket_re_ent2()", type_label=end_if];
847 [label="135_ lastPlayer_re_ent2 = msg.sender;\n847-expression_statement-136-136", method="buyTicket_re_ent2()", type_label=expression_statement];
853 [label="136_ jackpot_re_ent2    = address(this).balance;\n853-expression_statement-137-137", method="buyTicket_re_ent2()", type_label=expression_statement];
861 [label="138_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n861-function_definition-139-144", method="acceptOwnership()", type_label=function_definition];
865 [label="139_ require(msg.sender == newOwner);\n865-expression_statement-140-140", method="acceptOwnership()", type_label=expression_statement];
880 [label="141_ owner = newOwner;\n880-expression_statement-142-142", method="acceptOwnership()", type_label=expression_statement];
884 [label="142_ newOwner = address(0);\n884-expression_statement-143-143", method="acceptOwnership()", type_label=expression_statement];
890 [label="144_ mapping(address => uint) balances_re_ent17;\n890-new_variable-145-145", method="", type_label=new_variable];
896 [label="145_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n896-function_definition-146-151", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
904 [label="146_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n904-expression_statement-147-147", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
915 [label="147_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n915-new_variable-148-148", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
935 [label="148_ require(success);\n935-expression_statement-149-149", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
940 [label="149_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n940-expression_statement-150-150", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
967 [label="155_ string public symbol;\n967-new_variable-156-156", method="", type_label=new_variable];
972 [label="156_ string public name;\n972-new_variable-157-157", method="", type_label=new_variable];
977 [label="157_ uint8 public decimals;\n977-new_variable-158-158", method="", type_label=new_variable];
982 [label="158_ uint public _totalSupply;\n982-new_variable-159-159", method="", type_label=new_variable];
987 [label="159_ uint public latestDifficultyPeriodStarted;\n987-new_variable-160-160", method="", type_label=new_variable];
992 [label="160_ uint public epochCount;\n992-new_variable-161-161", method="", type_label=new_variable];
997 [label="161_ uint public _BLOCKS_PER_READJUSTMENT = 1024;\n997-new_variable-162-162", method="", type_label=new_variable];
1003 [label="162_ uint public _MINIMUM_TARGET = 2 ** 16;\n1003-new_variable-163-163", method="", type_label=new_variable];
1011 [label="163_ uint public _MAXIMUM_TARGET = 2 ** 234;\n1011-new_variable-164-164", method="", type_label=new_variable];
1019 [label="164_ uint public miningTarget;\n1019-new_variable-165-165", method="", type_label=new_variable];
1024 [label="165_ bytes32 public challengeNumber;\n1024-new_variable-166-166", method="", type_label=new_variable];
1029 [label="166_ uint public rewardEra;\n1029-new_variable-167-167", method="", type_label=new_variable];
1034 [label="167_ mapping(address => uint) redeemableEther_re_ent18;\n1034-new_variable-168-168", method="", type_label=new_variable];
1040 [label="168_ function claimReward_re_ent18() public {        \n        require(redeemableEther_re_ent18[msg.sender] > 0);\n        uint transferValue_re_ent18 = redeemableEther_re_ent18[msg.sender];\n        msg.sender.transfer(transferValue_re_ent18);    \n        redeemableEther_re_ent18[msg.sender] = 0;\n    }\n1040-function_definition-169-174", method="claimReward_re_ent18()", type_label=function_definition];
1044 [label="169_ require(redeemableEther_re_ent18[msg.sender] > 0);\n1044-expression_statement-170-170", method="claimReward_re_ent18()", type_label=expression_statement];
1055 [label="170_ uint transferValue_re_ent18 = redeemableEther_re_ent18[msg.sender];\n1055-new_variable-171-171", method="claimReward_re_ent18()", type_label=new_variable];
1065 [label="171_ msg.sender.transfer(transferValue_re_ent18);\n1065-expression_statement-172-172", method="claimReward_re_ent18()", type_label=expression_statement];
1074 [label="172_ redeemableEther_re_ent18[msg.sender] = 0;\n1074-expression_statement-173-173", method="claimReward_re_ent18()", type_label=expression_statement];
1082 [label="174_ uint public maxSupplyForEra;\n1082-new_variable-175-175", method="", type_label=new_variable];
1087 [label="175_ mapping(address => uint) balances_re_ent29;\n1087-new_variable-176-176", method="", type_label=new_variable];
1093 [label="176_ function withdraw_balances_re_ent29 () public {\n       if (msg.sender.send(balances_re_ent29[msg.sender ]))\n          balances_re_ent29[msg.sender] = 0;\n      }\n1093-function_definition-177-180", method="withdraw_balances_re_ent29()", type_label=function_definition];
1097 [label="177_ if\n1097-if-178-179", method="withdraw_balances_re_ent29()", type_label=if];
4442 [label="177_ end_if", method="withdraw_balances_re_ent29()", type_label=end_if];
1110 [label="178_ balances_re_ent29[msg.sender] = 0;\n1110-expression_statement-179-179", method="withdraw_balances_re_ent29()", type_label=expression_statement];
1118 [label="180_ address public lastRewardTo;\n1118-new_variable-181-181", method="", type_label=new_variable];
1123 [label="181_ bool not_called_re_ent6 = true;\n1123-new_variable-182-182", method="", type_label=new_variable];
1129 [label="182_ function bug_re_ent6() public{\n        require(not_called_re_ent6);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent6 = false;\n    }\n1129-function_definition-183-189", method="bug_re_ent6()", type_label=function_definition];
1133 [label="183_ require(not_called_re_ent6);\n1133-expression_statement-184-184", method="bug_re_ent6()", type_label=expression_statement];
1138 [label="184_ if\n1138-if-185-187", method="bug_re_ent6()", type_label=if];
4483 [label="184_ end_if", method="bug_re_ent6()", type_label=end_if];
1153 [label="187_ not_called_re_ent6 = false;\n1153-expression_statement-188-188", method="bug_re_ent6()", type_label=expression_statement];
1158 [label="189_ uint public lastRewardAmount;\n1158-new_variable-190-190", method="", type_label=new_variable];
1163 [label="190_ address payable lastPlayer_re_ent16;\n1163-new_variable-191-191", method="", type_label=new_variable];
1167 [label="191_ uint jackpot_re_ent16;\n1167-new_variable-192-192", method="", type_label=new_variable];
1171 [label="192_ function buyTicket_re_ent16() public{\n	    if (!(lastPlayer_re_ent16.send(jackpot_re_ent16)))\n        revert();\n      lastPlayer_re_ent16 = msg.sender;\n      jackpot_re_ent16    = address(this).balance;\n    }\n1171-function_definition-193-198", method="buyTicket_re_ent16()", type_label=function_definition];
1175 [label="193_ if\n1175-if-194-195", method="buyTicket_re_ent16()", type_label=if];
4520 [label="193_ end_if", method="buyTicket_re_ent16()", type_label=end_if];
1186 [label="195_ lastPlayer_re_ent16 = msg.sender;\n1186-expression_statement-196-196", method="buyTicket_re_ent16()", type_label=expression_statement];
1192 [label="196_ jackpot_re_ent16    = address(this).balance;\n1192-expression_statement-197-197", method="buyTicket_re_ent16()", type_label=expression_statement];
1200 [label="198_ uint public lastRewardEthBlockNumber;\n1200-new_variable-199-199", method="", type_label=new_variable];
1205 [label="199_ mapping(address => uint) balances_re_ent24;\n1205-new_variable-200-200", method="", type_label=new_variable];
1211 [label="200_ function withdrawFunds_re_ent24 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent24[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent24[msg.sender] -= _weiToWithdraw;\n    }\n1211-function_definition-201-205", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=function_definition];
1219 [label="201_ require(balances_re_ent24[msg.sender] >= _weiToWithdraw);\n1219-expression_statement-202-202", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=expression_statement];
1230 [label="202_ require(msg.sender.send(_weiToWithdraw));\n1230-expression_statement-203-203", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=expression_statement];
1242 [label="203_ balances_re_ent24[msg.sender] -= _weiToWithdraw;\n1242-expression_statement-204-204", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=expression_statement];
1250 [label="205_ bool locked = false;\n1250-new_variable-206-206", method="", type_label=new_variable];
1256 [label="206_ mapping(address => uint) userBalance_re_ent5;\n1256-new_variable-207-207", method="", type_label=new_variable];
1262 [label="207_ function withdrawBalance_re_ent5() public{\n        if( ! (msg.sender.send(userBalance_re_ent5[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent5[msg.sender] = 0;\n    }\n1262-function_definition-208-213", method="withdrawBalance_re_ent5()", type_label=function_definition];
1266 [label="208_ if\n1266-if-209-211", method="withdrawBalance_re_ent5()", type_label=if];
4611 [label="208_ end_if", method="withdrawBalance_re_ent5()", type_label=end_if];
1284 [label="211_ userBalance_re_ent5[msg.sender] = 0;\n1284-expression_statement-212-212", method="withdrawBalance_re_ent5()", type_label=expression_statement];
1292 [label="213_ mapping(bytes32 => bytes32) solutionForChallenge;\n1292-new_variable-214-214", method="", type_label=new_variable];
1298 [label="214_ mapping(address => uint) balances_re_ent15;\n1298-new_variable-215-215", method="", type_label=new_variable];
1304 [label="215_ function withdraw_balances_re_ent15 () public {\n       if (msg.sender.send(balances_re_ent15[msg.sender ]))\n          balances_re_ent15[msg.sender] = 0;\n      }\n1304-function_definition-216-219", method="withdraw_balances_re_ent15()", type_label=function_definition];
1308 [label="216_ if\n1308-if-217-218", method="withdraw_balances_re_ent15()", type_label=if];
4653 [label="216_ end_if", method="withdraw_balances_re_ent15()", type_label=end_if];
1321 [label="217_ balances_re_ent15[msg.sender] = 0;\n1321-expression_statement-218-218", method="withdraw_balances_re_ent15()", type_label=expression_statement];
1329 [label="219_ uint public tokensMinted;\n1329-new_variable-220-220", method="", type_label=new_variable];
1334 [label="220_ mapping(address => uint) balances;\n1334-new_variable-221-221", method="", type_label=new_variable];
1340 [label="221_ uint256 counter_re_ent28 =0;\n1340-new_variable-222-222", method="", type_label=new_variable];
1345 [label="222_ function callme_re_ent28() public{\n        require(counter_re_ent28<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent28 += 1;\n    }\n1345-function_definition-223-229", method="callme_re_ent28()", type_label=function_definition];
1349 [label="223_ require(counter_re_ent28<=5);\n1349-expression_statement-224-224", method="callme_re_ent28()", type_label=expression_statement];
1356 [label="224_ if\n1356-if-225-227", method="callme_re_ent28()", type_label=if];
4701 [label="224_ end_if", method="callme_re_ent28()", type_label=end_if];
1371 [label="227_ counter_re_ent28 += 1;\n1371-expression_statement-228-228", method="callme_re_ent28()", type_label=expression_statement];
1375 [label="229_ mapping(address => mapping(address => uint)) allowed;\n1375-new_variable-230-230", method="", type_label=new_variable];
1383 [label="230_ bool not_called_re_ent34 = true;\n1383-new_variable-231-231", method="", type_label=new_variable];
1389 [label="231_ function bug_re_ent34() public{\n        require(not_called_re_ent34);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent34 = false;\n    }\n1389-function_definition-232-238", method="bug_re_ent34()", type_label=function_definition];
1393 [label="232_ require(not_called_re_ent34);\n1393-expression_statement-233-233", method="bug_re_ent34()", type_label=expression_statement];
1398 [label="233_ if\n1398-if-234-236", method="bug_re_ent34()", type_label=if];
4743 [label="233_ end_if", method="bug_re_ent34()", type_label=end_if];
1413 [label="236_ not_called_re_ent34 = false;\n1413-expression_statement-237-237", method="bug_re_ent34()", type_label=expression_statement];
1418 [label="238_ uint public burnPercent;\n1418-new_variable-239-239", method="", type_label=new_variable];
1423 [label="239_ bool not_called_re_ent13 = true;\n1423-new_variable-240-240", method="", type_label=new_variable];
1429 [label="240_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n1429-function_definition-241-248", method="bug_re_ent13()", type_label=function_definition];
1433 [label="241_ require(not_called_re_ent13);\n1433-expression_statement-242-242", method="bug_re_ent13()", type_label=expression_statement];
1438 [label="242_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n1438-new_variable-243-243", method="bug_re_ent13()", type_label=new_variable];
1459 [label="243_ if\n1459-if-244-246", method="bug_re_ent13()", type_label=if];
4804 [label="243_ end_if", method="bug_re_ent13()", type_label=end_if];
1465 [label="246_ not_called_re_ent13 = false;\n1465-expression_statement-247-247", method="bug_re_ent13()", type_label=expression_statement];
1489 [label="249_ onlyOwner\n1489-expression_statement-250-250", method="", type_label=expression_statement];
1492 [label="250_ symbol = \"YESBUZ\";\n1492-expression_statement-251-251", method="", type_label=expression_statement];
1497 [label="251_ name = \"Yesbuzz\";\n1497-expression_statement-252-252", method="", type_label=expression_statement];
1502 [label="252_ decimals = 8;\n1502-expression_statement-253-253", method="", type_label=expression_statement];
1506 [label="253_ _totalSupply = 21000000 * 10 ** uint(decimals);\n1506-expression_statement-254-254", method="", type_label=expression_statement];
1516 [label="254_ if\n1516-if-255-255", method="", type_label=if];
4861 [label="254_ end_if", method="", type_label=end_if];
1520 [label="255_ locked = true;\n1520-expression_statement-256-256", method="", type_label=expression_statement];
1525 [label="256_ tokensMinted = 0;\n1525-expression_statement-257-257", method="", type_label=expression_statement];
1529 [label="257_ rewardEra = 0;\n1529-expression_statement-258-258", method="", type_label=expression_statement];
1533 [label="258_ maxSupplyForEra = _totalSupply.div(2);\n1533-expression_statement-259-259", method="", type_label=expression_statement];
1542 [label="259_ miningTarget = _MAXIMUM_TARGET;\n1542-expression_statement-260-260", method="", type_label=expression_statement];
1546 [label="260_ latestDifficultyPeriodStarted = block.number;\n1546-expression_statement-261-261", method="", type_label=expression_statement];
1552 [label="261_ burnPercent = 10;\n1552-expression_statement-262-262", method="", type_label=expression_statement];
1556 [label="262_ _startNewMiningEpoch();\n1556-expression_statement-263-263", method="", type_label=expression_statement];
1559 [label="264_ address payable lastPlayer_re_ent37;\n1559-new_variable-265-265", method="", type_label=new_variable];
1563 [label="265_ uint jackpot_re_ent37;\n1563-new_variable-266-266", method="", type_label=new_variable];
1567 [label="266_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n1567-function_definition-267-272", method="buyTicket_re_ent37()", type_label=function_definition];
1571 [label="267_ if\n1571-if-268-269", method="buyTicket_re_ent37()", type_label=if];
4916 [label="267_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
1582 [label="269_ lastPlayer_re_ent37 = msg.sender;\n1582-expression_statement-270-270", method="buyTicket_re_ent37()", type_label=expression_statement];
1588 [label="270_ jackpot_re_ent37    = address(this).balance;\n1588-expression_statement-271-271", method="buyTicket_re_ent37()", type_label=expression_statement];
1596 [label="272_ function mint(uint256 nonce, bytes32 challenge_digest) public returns(bool success) {\n        bytes32 digest = keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce));\n        if (digest != challenge_digest) revert();\n        if (uint256(digest) > miningTarget) revert();\n        bytes32 solution = solutionForChallenge[challengeNumber];\n        solutionForChallenge[challengeNumber] = digest;\n        if (solution != 0x0) revert();  \n        uint reward_amount = getMiningReward();\n        balances[msg.sender] = balances[msg.sender].add(reward_amount);\n        tokensMinted = tokensMinted.add(reward_amount);\n        assert(tokensMinted <= maxSupplyForEra);\n        lastRewardTo = msg.sender;\n        lastRewardAmount = reward_amount;\n        lastRewardEthBlockNumber = block.number;\n        _startNewMiningEpoch();\n        emit Mint(msg.sender, reward_amount, epochCount, challengeNumber);\n        return true;\n    }\n1596-function_definition-273-290", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=function_definition];
1613 [label="273_ bytes32 digest = keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce));\n1613-new_variable-274-274", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=new_variable];
1633 [label="274_ if_digest != challenge_digest\n1633-if-275-275", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=if];
4978 [label="274_ end_if", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=end_if];
1639 [label="275_ if_uint256(digest) > miningTarget\n1639-if-276-276", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=if];
4984 [label="275_ end_if", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=end_if];
1647 [label="276_ bytes32 solution = solutionForChallenge[challengeNumber];\n1647-new_variable-277-277", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=new_variable];
1655 [label="277_ solutionForChallenge[challengeNumber] = digest;\n1655-expression_statement-278-278", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1661 [label="278_ if_solution != 0x0\n1661-if-279-279", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=if];
5006 [label="278_ end_if", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=end_if];
1667 [label="279_ uint reward_amount = getMiningReward();\n1667-new_variable-280-280", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=new_variable];
1674 [label="280_ balances[msg.sender] = balances[msg.sender].add(reward_amount);\n1674-expression_statement-281-281", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1691 [label="281_ tokensMinted = tokensMinted.add(reward_amount);\n1691-expression_statement-282-282", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1700 [label="282_ assert(tokensMinted <= maxSupplyForEra);\n1700-expression_statement-283-283", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1707 [label="283_ lastRewardTo = msg.sender;\n1707-expression_statement-284-284", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1713 [label="284_ lastRewardAmount = reward_amount;\n1713-expression_statement-285-285", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1717 [label="285_ lastRewardEthBlockNumber = block.number;\n1717-expression_statement-286-286", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1723 [label="286_ _startNewMiningEpoch();\n1723-expression_statement-287-287", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1738 [label="288_ return true;\n1738-return-289-289", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=return];
1741 [label="290_ mapping(address => uint) balances_re_ent3;\n1741-new_variable-291-291", method="", type_label=new_variable];
1747 [label="291_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n1747-function_definition-292-297", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
1755 [label="292_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n1755-expression_statement-293-293", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1766 [label="293_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n1766-new_variable-294-294", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
1786 [label="294_ require(success);\n1786-expression_statement-295-295", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1791 [label="295_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n1791-expression_statement-296-296", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1799 [label="297_ function _startNewMiningEpoch() internal {\n        if (tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39) {\n            rewardEra = rewardEra + 1;\n        }\n        maxSupplyForEra = _totalSupply - _totalSupply.div(2 ** (rewardEra + 1));\n        epochCount = epochCount.add(1);\n        if (epochCount % _BLOCKS_PER_READJUSTMENT == 0) {\n            _reAdjustDifficulty();\n        }\n        challengeNumber = blockhash(block.number - 1);\n    }\n1799-function_definition-298-308", method="_startNewMiningEpoch()", type_label=function_definition];
1803 [label="298_ if_tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39\n1803-if-299-301", method="_startNewMiningEpoch()", type_label=if];
5148 [label="298_ end_if", method="_startNewMiningEpoch()", type_label=end_if];
1818 [label="299_ rewardEra = rewardEra + 1;\n1818-expression_statement-300-300", method="_startNewMiningEpoch()", type_label=expression_statement];
1824 [label="301_ maxSupplyForEra = _totalSupply - _totalSupply.div(2 ** (rewardEra + 1));\n1824-expression_statement-302-302", method="_startNewMiningEpoch()", type_label=expression_statement];
1840 [label="302_ epochCount = epochCount.add(1);\n1840-expression_statement-303-303", method="_startNewMiningEpoch()", type_label=expression_statement];
1849 [label="303_ if_epochCount % _BLOCKS_PER_READJUSTMENT == 0\n1849-if-304-306", method="_startNewMiningEpoch()", type_label=if];
5194 [label="303_ end_if", method="_startNewMiningEpoch()", type_label=end_if];
1856 [label="304_ _reAdjustDifficulty();\n1856-expression_statement-305-305", method="_startNewMiningEpoch()", type_label=expression_statement];
1859 [label="306_ challengeNumber = blockhash(block.number - 1);\n1859-expression_statement-307-307", method="_startNewMiningEpoch()", type_label=expression_statement];
1870 [label="308_ address payable lastPlayer_re_ent9;\n1870-new_variable-309-309", method="", type_label=new_variable];
1874 [label="309_ uint jackpot_re_ent9;\n1874-new_variable-310-310", method="", type_label=new_variable];
1878 [label="310_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n1878-function_definition-311-317", method="buyTicket_re_ent9()", type_label=function_definition];
1882 [label="311_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n1882-new_variable-312-312", method="buyTicket_re_ent9()", type_label=new_variable];
1900 [label="312_ if\n1900-if-313-314", method="buyTicket_re_ent9()", type_label=if];
5245 [label="312_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
1905 [label="314_ lastPlayer_re_ent9 = msg.sender;\n1905-expression_statement-315-315", method="buyTicket_re_ent9()", type_label=expression_statement];
1911 [label="315_ jackpot_re_ent9    = address(this).balance;\n1911-expression_statement-316-316", method="buyTicket_re_ent9()", type_label=expression_statement];
1919 [label="317_ function _reAdjustDifficulty() internal {\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n        uint epochsMined = _BLOCKS_PER_READJUSTMENT;  \n        uint targetEthBlocksPerDiffPeriod = epochsMined * 60;  \n        if (ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod) {\n            uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod);\n            uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n            miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));  \n        } else {\n            uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod);\n            uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);  \n            miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));  \n        }\n        latestDifficultyPeriodStarted = block.number;\n        if (miningTarget < _MINIMUM_TARGET)  \n        {\n            miningTarget = _MINIMUM_TARGET;\n        }\n        if (miningTarget > _MAXIMUM_TARGET)  \n        {\n            miningTarget = _MAXIMUM_TARGET;\n        }\n    }\n1919-function_definition-318-340", method="_reAdjustDifficulty()", type_label=function_definition];
1923 [label="318_ uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n1923-new_variable-319-319", method="_reAdjustDifficulty()", type_label=new_variable];
1933 [label="319_ uint epochsMined = _BLOCKS_PER_READJUSTMENT;\n1933-new_variable-320-320", method="_reAdjustDifficulty()", type_label=new_variable];
1939 [label="320_ uint targetEthBlocksPerDiffPeriod = epochsMined * 60;\n1939-new_variable-321-321", method="_reAdjustDifficulty()", type_label=new_variable];
1947 [label="321_ if_ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod\n1947-if-322-330", method="_reAdjustDifficulty()", type_label=if];
5292 [label="321_ end_if", method="_reAdjustDifficulty()", type_label=end_if];
1952 [label="322_ uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod);\n1952-new_variable-323-323", method="_reAdjustDifficulty()", type_label=new_variable];
1969 [label="323_ uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n1969-new_variable-324-324", method="_reAdjustDifficulty()", type_label=new_variable];
1985 [label="324_ miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));\n1985-expression_statement-325-325", method="_reAdjustDifficulty()", type_label=expression_statement];
2005 [label="326_ uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod);\n2005-new_variable-327-327", method="_reAdjustDifficulty()", type_label=new_variable];
2022 [label="327_ uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);\n2022-new_variable-328-328", method="_reAdjustDifficulty()", type_label=new_variable];
2038 [label="328_ miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));\n2038-expression_statement-329-329", method="_reAdjustDifficulty()", type_label=expression_statement];
2057 [label="330_ latestDifficultyPeriodStarted = block.number;\n2057-expression_statement-331-331", method="_reAdjustDifficulty()", type_label=expression_statement];
2063 [label="331_ if_miningTarget < _MINIMUM_TARGET\n2063-if-332-335", method="_reAdjustDifficulty()", type_label=if];
5408 [label="331_ end_if", method="_reAdjustDifficulty()", type_label=end_if];
2068 [label="333_ miningTarget = _MINIMUM_TARGET;\n2068-expression_statement-334-334", method="_reAdjustDifficulty()", type_label=expression_statement];
2072 [label="335_ if_miningTarget > _MAXIMUM_TARGET\n2072-if-336-339", method="_reAdjustDifficulty()", type_label=if];
5417 [label="335_ end_if", method="_reAdjustDifficulty()", type_label=end_if];
2077 [label="337_ miningTarget = _MAXIMUM_TARGET;\n2077-expression_statement-338-338", method="_reAdjustDifficulty()", type_label=expression_statement];
2081 [label="340_ mapping(address => uint) redeemableEther_re_ent25;\n2081-new_variable-341-341", method="", type_label=new_variable];
2087 [label="341_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n2087-function_definition-342-347", method="claimReward_re_ent25()", type_label=function_definition];
2091 [label="342_ require(redeemableEther_re_ent25[msg.sender] > 0);\n2091-expression_statement-343-343", method="claimReward_re_ent25()", type_label=expression_statement];
2102 [label="343_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n2102-new_variable-344-344", method="claimReward_re_ent25()", type_label=new_variable];
2112 [label="344_ msg.sender.transfer(transferValue_re_ent25);\n2112-expression_statement-345-345", method="claimReward_re_ent25()", type_label=expression_statement];
2121 [label="345_ redeemableEther_re_ent25[msg.sender] = 0;\n2121-expression_statement-346-346", method="claimReward_re_ent25()", type_label=expression_statement];
2129 [label="347_ function getChallengeNumber() public view returns(bytes32) {\n        return challengeNumber;\n    }\n2129-function_definition-348-350", method="getChallengeNumber()", type_label=function_definition];
2138 [label="348_ return challengeNumber;\n2138-return-349-349", method="getChallengeNumber()", type_label=return];
2140 [label="350_ mapping(address => uint) userBalance_re_ent19;\n2140-new_variable-351-351", method="", type_label=new_variable];
2146 [label="351_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n2146-function_definition-352-357", method="withdrawBalance_re_ent19()", type_label=function_definition];
2150 [label="352_ if\n2150-if-353-355", method="withdrawBalance_re_ent19()", type_label=if];
5495 [label="352_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
2168 [label="355_ userBalance_re_ent19[msg.sender] = 0;\n2168-expression_statement-356-356", method="withdrawBalance_re_ent19()", type_label=expression_statement];
2176 [label="357_ function getMiningDifficulty() public view returns(uint) {\n        return _MAXIMUM_TARGET.div(miningTarget);\n    }\n2176-function_definition-358-360", method="getMiningDifficulty()", type_label=function_definition];
2185 [label="358_ return _MAXIMUM_TARGET.div(miningTarget);\n2185-return-359-359", method="getMiningDifficulty()", type_label=return];
2192 [label="360_ mapping(address => uint) userBalance_re_ent26;\n2192-new_variable-361-361", method="", type_label=new_variable];
2198 [label="361_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n2198-function_definition-362-368", method="withdrawBalance_re_ent26()", type_label=function_definition];
2202 [label="362_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n2202-new_variable-363-363", method="withdrawBalance_re_ent26()", type_label=new_variable];
2226 [label="363_ if\n2226-if-364-366", method="withdrawBalance_re_ent26()", type_label=if];
5571 [label="363_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
2232 [label="366_ userBalance_re_ent26[msg.sender] = 0;\n2232-expression_statement-367-367", method="withdrawBalance_re_ent26()", type_label=expression_statement];
2240 [label="368_ function getMiningTarget() public view returns(uint) {\n        return miningTarget;\n    }\n2240-function_definition-369-371", method="getMiningTarget()", type_label=function_definition];
2249 [label="369_ return miningTarget;\n2249-return-370-370", method="getMiningTarget()", type_label=return];
2251 [label="371_ bool not_called_re_ent20 = true;\n2251-new_variable-372-372", method="", type_label=new_variable];
2257 [label="372_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n2257-function_definition-373-379", method="bug_re_ent20()", type_label=function_definition];
2261 [label="373_ require(not_called_re_ent20);\n2261-expression_statement-374-374", method="bug_re_ent20()", type_label=expression_statement];
2266 [label="374_ if\n2266-if-375-377", method="bug_re_ent20()", type_label=if];
5611 [label="374_ end_if", method="bug_re_ent20()", type_label=end_if];
2281 [label="377_ not_called_re_ent20 = false;\n2281-expression_statement-378-378", method="bug_re_ent20()", type_label=expression_statement];
2286 [label="379_ function getMiningReward() public view returns(uint) {\n        return (50 * 10 ** uint(decimals)).div(2 ** rewardEra);\n    }\n2286-function_definition-380-382", method="getMiningReward()", type_label=function_definition];
2295 [label="380_ return (50 * 10 ** uint(decimals)).div(2 ** rewardEra);\n2295-return-381-381", method="getMiningReward()", type_label=return];
2311 [label="382_ mapping(address => uint) redeemableEther_re_ent32;\n2311-new_variable-383-383", method="", type_label=new_variable];
2317 [label="383_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n2317-function_definition-384-389", method="claimReward_re_ent32()", type_label=function_definition];
2321 [label="384_ require(redeemableEther_re_ent32[msg.sender] > 0);\n2321-expression_statement-385-385", method="claimReward_re_ent32()", type_label=expression_statement];
2332 [label="385_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n2332-new_variable-386-386", method="claimReward_re_ent32()", type_label=new_variable];
2342 [label="386_ msg.sender.transfer(transferValue_re_ent32);\n2342-expression_statement-387-387", method="claimReward_re_ent32()", type_label=expression_statement];
2351 [label="387_ redeemableEther_re_ent32[msg.sender] = 0;\n2351-expression_statement-388-388", method="claimReward_re_ent32()", type_label=expression_statement];
2359 [label="389_ function getMintDigest(uint256 nonce, bytes32 challenge_number) public view returns(bytes32 digesttest) {\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n        return digest;\n    }\n2359-function_definition-390-393", method="getMintDigest(uint256 nonce,bytes32 challenge_number)", type_label=function_definition];
2377 [label="390_ bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n2377-new_variable-391-391", method="getMintDigest(uint256 nonce,bytes32 challenge_number)", type_label=new_variable];
2397 [label="391_ return digest;\n2397-return-392-392", method="getMintDigest(uint256 nonce,bytes32 challenge_number)", type_label=return];
2399 [label="393_ mapping(address => uint) balances_re_ent38;\n2399-new_variable-394-394", method="", type_label=new_variable];
2405 [label="394_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n2405-function_definition-395-399", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
2413 [label="395_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n2413-expression_statement-396-396", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
2424 [label="396_ require(msg.sender.send(_weiToWithdraw));\n2424-expression_statement-397-397", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
2436 [label="397_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n2436-expression_statement-398-398", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
2444 [label="399_ function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns(bool success) {\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n        if (uint256(digest) > testTarget) revert();\n        return (digest == challenge_digest);\n    }\n2444-function_definition-400-404", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=function_definition];
2470 [label="400_ bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n2470-new_variable-401-401", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=new_variable];
2490 [label="401_ if_uint256(digest) > testTarget\n2490-if-402-402", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=if];
5835 [label="401_ end_if", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=end_if];
2498 [label="402_ return (digest == challenge_digest);\n2498-return-403-403", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=return];
2503 [label="404_ mapping(address => uint) redeemableEther_re_ent4;\n2503-new_variable-405-405", method="", type_label=new_variable];
2509 [label="405_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n2509-function_definition-406-411", method="claimReward_re_ent4()", type_label=function_definition];
2513 [label="406_ require(redeemableEther_re_ent4[msg.sender] > 0);\n2513-expression_statement-407-407", method="claimReward_re_ent4()", type_label=expression_statement];
2524 [label="407_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n2524-new_variable-408-408", method="claimReward_re_ent4()", type_label=new_variable];
2534 [label="408_ msg.sender.transfer(transferValue_re_ent4);\n2534-expression_statement-409-409", method="claimReward_re_ent4()", type_label=expression_statement];
2543 [label="409_ redeemableEther_re_ent4[msg.sender] = 0;\n2543-expression_statement-410-410", method="claimReward_re_ent4()", type_label=expression_statement];
2551 [label="411_ function totalSupply() public view returns(uint) {\n        return _totalSupply - balances[address(0)];\n    }\n2551-function_definition-412-414", method="totalSupply()", type_label=function_definition];
2560 [label="412_ return _totalSupply - balances[address(0)];\n2560-return-413-413", method="totalSupply()", type_label=return];
2568 [label="414_ uint256 counter_re_ent7 =0;\n2568-new_variable-415-415", method="", type_label=new_variable];
2573 [label="415_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n2573-function_definition-416-422", method="callme_re_ent7()", type_label=function_definition];
2577 [label="416_ require(counter_re_ent7<=5);\n2577-expression_statement-417-417", method="callme_re_ent7()", type_label=expression_statement];
2584 [label="417_ if\n2584-if-418-420", method="callme_re_ent7()", type_label=if];
5929 [label="417_ end_if", method="callme_re_ent7()", type_label=end_if];
2599 [label="420_ counter_re_ent7 += 1;\n2599-expression_statement-421-421", method="callme_re_ent7()", type_label=expression_statement];
2603 [label="422_ function balanceOf(address tokenOwner) public view returns(uint balance) {\n        return balances[tokenOwner];\n    }\n2603-function_definition-423-425", method="balanceOf(address tokenOwner)", type_label=function_definition];
2617 [label="423_ return balances[tokenOwner];\n2617-return-424-424", method="balanceOf(address tokenOwner)", type_label=return];
2621 [label="425_ address payable lastPlayer_re_ent23;\n2621-new_variable-426-426", method="", type_label=new_variable];
2625 [label="426_ uint jackpot_re_ent23;\n2625-new_variable-427-427", method="", type_label=new_variable];
2629 [label="427_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n2629-function_definition-428-433", method="buyTicket_re_ent23()", type_label=function_definition];
2633 [label="428_ if\n2633-if-429-430", method="buyTicket_re_ent23()", type_label=if];
5978 [label="428_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
2644 [label="430_ lastPlayer_re_ent23 = msg.sender;\n2644-expression_statement-431-431", method="buyTicket_re_ent23()", type_label=expression_statement];
2650 [label="431_ jackpot_re_ent23    = address(this).balance;\n2650-expression_statement-432-432", method="buyTicket_re_ent23()", type_label=expression_statement];
2658 [label="433_ function transfer(address to, uint tokens) public returns(bool success) {\n        uint toBurn = tokens.mul(burnPercent).div(1000);\n        uint toSend = tokens.sub(toBurn);\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(toSend);\n        emit Transfer(msg.sender, to, toSend);\n        balances[address(0)] = balances[address(0)].add(toBurn);\n        emit Transfer(msg.sender, address(0), toBurn);\n        return true;\n    }\n2658-function_definition-434-443", method="transfer(address to,uint tokens)", type_label=function_definition];
2675 [label="434_ uint toBurn = tokens.mul(burnPercent).div(1000);\n2675-new_variable-435-435", method="transfer(address to,uint tokens)", type_label=new_variable];
2691 [label="435_ uint toSend = tokens.sub(toBurn);\n2691-new_variable-436-436", method="transfer(address to,uint tokens)", type_label=new_variable];
2702 [label="436_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n2702-expression_statement-437-437", method="transfer(address to,uint tokens)", type_label=expression_statement];
2719 [label="437_ balances[to] = balances[to].add(toSend);\n2719-expression_statement-438-438", method="transfer(address to,uint tokens)", type_label=expression_statement];
2742 [label="439_ balances[address(0)] = balances[address(0)].add(toBurn);\n2742-expression_statement-440-440", method="transfer(address to,uint tokens)", type_label=expression_statement];
2771 [label="441_ return true;\n2771-return-442-442", method="transfer(address to,uint tokens)", type_label=return];
2774 [label="443_ uint256 counter_re_ent14 =0;\n2774-new_variable-444-444", method="", type_label=new_variable];
2779 [label="444_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n2779-function_definition-445-451", method="callme_re_ent14()", type_label=function_definition];
2783 [label="445_ require(counter_re_ent14<=5);\n2783-expression_statement-446-446", method="callme_re_ent14()", type_label=expression_statement];
2790 [label="446_ if\n2790-if-447-449", method="callme_re_ent14()", type_label=if];
6135 [label="446_ end_if", method="callme_re_ent14()", type_label=end_if];
2805 [label="449_ counter_re_ent14 += 1;\n2805-expression_statement-450-450", method="callme_re_ent14()", type_label=expression_statement];
2809 [label="451_ function approve(address spender, uint tokens) public returns(bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n2809-function_definition-452-456", method="approve(address spender,uint tokens)", type_label=function_definition];
2826 [label="452_ allowed[msg.sender][spender] = tokens;\n2826-expression_statement-453-453", method="approve(address spender,uint tokens)", type_label=expression_statement];
2846 [label="454_ return true;\n2846-return-455-455", method="approve(address spender,uint tokens)", type_label=return];
2849 [label="456_ address payable lastPlayer_re_ent30;\n2849-new_variable-457-457", method="", type_label=new_variable];
2853 [label="457_ uint jackpot_re_ent30;\n2853-new_variable-458-458", method="", type_label=new_variable];
2857 [label="458_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n2857-function_definition-459-464", method="buyTicket_re_ent30()", type_label=function_definition];
2861 [label="459_ if\n2861-if-460-461", method="buyTicket_re_ent30()", type_label=if];
6206 [label="459_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
2872 [label="461_ lastPlayer_re_ent30 = msg.sender;\n2872-expression_statement-462-462", method="buyTicket_re_ent30()", type_label=expression_statement];
2878 [label="462_ jackpot_re_ent30    = address(this).balance;\n2878-expression_statement-463-463", method="buyTicket_re_ent30()", type_label=expression_statement];
2886 [label="464_ function transferFrom(address from, address to, uint tokens) public returns(bool success) {\n        uint toBurn = tokens.mul(burnPercent).div(1000);\n        uint toSend = tokens.sub(toBurn);\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(toSend);\n        emit Transfer(from, to, toSend);\n        balances[address(0)] = balances[address(0)].add(toBurn);\n        emit Transfer(from, address(0), toBurn);\n        return true;\n    }\n2886-function_definition-465-475", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
2907 [label="465_ uint toBurn = tokens.mul(burnPercent).div(1000);\n2907-new_variable-466-466", method="transferFrom(address from,address to,uint tokens)", type_label=new_variable];
2923 [label="466_ uint toSend = tokens.sub(toBurn);\n2923-new_variable-467-467", method="transferFrom(address from,address to,uint tokens)", type_label=new_variable];
2934 [label="467_ balances[from] = balances[from].sub(tokens);\n2934-expression_statement-468-468", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2947 [label="468_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n2947-expression_statement-469-469", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2968 [label="469_ balances[to] = balances[to].add(toSend);\n2968-expression_statement-470-470", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2989 [label="471_ balances[address(0)] = balances[address(0)].add(toBurn);\n2989-expression_statement-472-472", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
3016 [label="473_ return true;\n3016-return-474-474", method="transferFrom(address from,address to,uint tokens)", type_label=return];
3019 [label="475_ mapping(address => uint) balances_re_ent8;\n3019-new_variable-476-476", method="", type_label=new_variable];
3025 [label="476_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n3025-function_definition-477-481", method="withdraw_balances_re_ent8()", type_label=function_definition];
3029 [label="477_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n3029-new_variable-478-478", method="withdraw_balances_re_ent8()", type_label=new_variable];
3053 [label="478_ if\n3053-if-479-480", method="withdraw_balances_re_ent8()", type_label=if];
6398 [label="478_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
3055 [label="479_ balances_re_ent8[msg.sender] = 0;\n3055-expression_statement-480-480", method="withdraw_balances_re_ent8()", type_label=expression_statement];
3063 [label="481_ function allowance(address tokenOwner, address spender) public view returns(uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n3063-function_definition-482-484", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
3081 [label="482_ return allowed[tokenOwner][spender];\n3081-return-483-483", method="allowance(address tokenOwner,address spender)", type_label=return];
3087 [label="484_ mapping(address => uint) redeemableEther_re_ent39;\n3087-new_variable-485-485", method="", type_label=new_variable];
3093 [label="485_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n3093-function_definition-486-491", method="claimReward_re_ent39()", type_label=function_definition];
3097 [label="486_ require(redeemableEther_re_ent39[msg.sender] > 0);\n3097-expression_statement-487-487", method="claimReward_re_ent39()", type_label=expression_statement];
3108 [label="487_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n3108-new_variable-488-488", method="claimReward_re_ent39()", type_label=new_variable];
3118 [label="488_ msg.sender.transfer(transferValue_re_ent39);\n3118-expression_statement-489-489", method="claimReward_re_ent39()", type_label=expression_statement];
3127 [label="489_ redeemableEther_re_ent39[msg.sender] = 0;\n3127-expression_statement-490-490", method="claimReward_re_ent39()", type_label=expression_statement];
3135 [label="491_ function approveAndCall(address spender, uint tokens, bytes memory data) public returns(bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n3135-function_definition-492-497", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=function_definition];
3156 [label="492_ allowed[msg.sender][spender] = tokens;\n3156-expression_statement-493-493", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
3176 [label="494_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n3176-expression_statement-495-495", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
3196 [label="495_ return true;\n3196-return-496-496", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=return];
3199 [label="497_ mapping(address => uint) balances_re_ent36;\n3199-new_variable-498-498", method="", type_label=new_variable];
3205 [label="498_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n3205-function_definition-499-502", method="withdraw_balances_re_ent36()", type_label=function_definition];
3209 [label="499_ if\n3209-if-500-501", method="withdraw_balances_re_ent36()", type_label=if];
6554 [label="499_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
3222 [label="500_ balances_re_ent36[msg.sender] = 0;\n3222-expression_statement-501-501", method="withdraw_balances_re_ent36()", type_label=expression_statement];
3236 [label="505_ uint256 counter_re_ent35 =0;\n3236-new_variable-506-506", method="", type_label=new_variable];
3241 [label="506_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n3241-function_definition-507-513", method="callme_re_ent35()", type_label=function_definition];
3245 [label="507_ require(counter_re_ent35<=5);\n3245-expression_statement-508-508", method="callme_re_ent35()", type_label=expression_statement];
3252 [label="508_ if\n3252-if-509-511", method="callme_re_ent35()", type_label=if];
6597 [label="508_ end_if", method="callme_re_ent35()", type_label=end_if];
3267 [label="511_ counter_re_ent35 += 1;\n3267-expression_statement-512-512", method="callme_re_ent35()", type_label=expression_statement];
3271 [label="513_ function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns(bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n3271-function_definition-514-516", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=function_definition];
3282 [label="513_ onlyOwner\n3282-expression_statement-514-514", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=expression_statement];
3290 [label="514_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n3290-return-515-515", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=return];
3302 [label="516_ mapping(address => uint) userBalance_re_ent40;\n3302-new_variable-517-517", method="", type_label=new_variable];
3308 [label="517_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n3308-function_definition-518-524", method="withdrawBalance_re_ent40()", type_label=function_definition];
3312 [label="518_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n3312-new_variable-519-519", method="withdrawBalance_re_ent40()", type_label=new_variable];
3336 [label="519_ if\n3336-if-520-522", method="withdrawBalance_re_ent40()", type_label=if];
6681 [label="519_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
3342 [label="522_ userBalance_re_ent40[msg.sender] = 0;\n3342-expression_statement-523-523", method="withdrawBalance_re_ent40()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
3230;
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 168  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
164 -> 3509  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3509 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 3509  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
188 -> 192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
192 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 3544  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
237 -> 245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
245 -> 256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
256 -> 268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
299 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
327 -> 329  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
327 -> 3672  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3672 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 3672  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
359 -> 363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 3708  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
411 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
426 -> 436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
507 -> 509  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
507 -> 3852  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3852 -> 517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 3852  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
523 -> 527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
527 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 3896  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
585 -> 589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
589 -> 594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
594 -> 3939  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
656 -> 660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
660 -> 665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 4010  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
688 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
704 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
723 -> 735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
766 -> 770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
770 -> 777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
777 -> 4122  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
799 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
810 -> 820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
824 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
832 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 4181  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
847 -> 853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
880 -> 884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
896 -> 904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
915 -> 935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
967 -> 972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
972 -> 977  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
977 -> 982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
982 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
997 -> 1003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 1011  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1011 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 1024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1024 -> 1029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 1034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1040 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1044 -> 1055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1055 -> 1065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1065 -> 1074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1082 -> 1087  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1093 -> 1097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1097 -> 1110  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1097 -> 4442  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4442 -> 1118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1110 -> 4442  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1118 -> 1123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 1133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1133 -> 1138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1138 -> 4483  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1158 -> 1163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1163 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1171 -> 1175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1175 -> 4520  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1186 -> 1192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1200 -> 1205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1211 -> 1219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1219 -> 1230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1230 -> 1242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1250 -> 1256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1262 -> 1266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1266 -> 4611  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1292 -> 1298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1304 -> 1308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1308 -> 1321  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1308 -> 4653  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4653 -> 1329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1321 -> 4653  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1329 -> 1334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1334 -> 1340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1345 -> 1349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1349 -> 1356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1356 -> 4701  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1375 -> 1383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1389 -> 1393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1393 -> 1398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1398 -> 4743  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1418 -> 1423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1429 -> 1433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1433 -> 1438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1438 -> 1459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1459 -> 4804  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1492 -> 1497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1497 -> 1502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1502 -> 1506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1506 -> 1516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1516 -> 4861  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1520 -> 1525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1525 -> 1529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1529 -> 1533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1533 -> 1542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1542 -> 1546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1546 -> 1552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1552 -> 1556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1559 -> 1563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1567 -> 1571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1571 -> 4916  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1582 -> 1588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1596 -> 1613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1613 -> 1633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1633 -> 4978  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1639 -> 4984  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1647 -> 1655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1655 -> 1661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1661 -> 5006  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1667 -> 1674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1674 -> 1691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1691 -> 1700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1700 -> 1707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1707 -> 1713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1713 -> 1717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1717 -> 1723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1738 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1747 -> 1755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1755 -> 1766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1766 -> 1786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1786 -> 1791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1799 -> 1803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1803 -> 1818  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1803 -> 5148  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5148 -> 1824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1818 -> 5148  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1824 -> 1840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1840 -> 1849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1849 -> 1856  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1849 -> 5194  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5194 -> 1859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1856 -> 5194  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1870 -> 1874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1878 -> 1882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1882 -> 1900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1900 -> 5245  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1905 -> 1911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1919 -> 1923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1923 -> 1933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1933 -> 1939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1939 -> 1947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1947 -> 1952  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1947 -> 2005  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5292 -> 2057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1952 -> 1969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1969 -> 1985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1985 -> 5292  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2005 -> 2022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2022 -> 2038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2038 -> 5292  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2057 -> 2063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2063 -> 2068  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2063 -> 5408  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5408 -> 2072  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2068 -> 5408  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2072 -> 2077  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2072 -> 5417  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5417 -> 2081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2077 -> 5417  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2087 -> 2091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2091 -> 2102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2102 -> 2112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2112 -> 2121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2129 -> 2138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2138 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2146 -> 2150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2150 -> 5495  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2176 -> 2185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2185 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2198 -> 2202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2202 -> 2226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2226 -> 5571  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2240 -> 2249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2249 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2257 -> 2261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2261 -> 2266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2266 -> 5611  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2286 -> 2295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2295 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2317 -> 2321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2321 -> 2332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2332 -> 2342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2342 -> 2351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2359 -> 2377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2377 -> 2397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2397 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2405 -> 2413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2413 -> 2424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2424 -> 2436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2444 -> 2470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2470 -> 2490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2490 -> 5835  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2498 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2509 -> 2513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2513 -> 2524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2524 -> 2534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2534 -> 2543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2551 -> 2560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2560 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2573 -> 2577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2577 -> 2584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2584 -> 5929  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2603 -> 2617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2617 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2621 -> 2625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2629 -> 2633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2633 -> 5978  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2644 -> 2650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2658 -> 2675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2675 -> 2691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2691 -> 2702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2702 -> 2719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2771 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2779 -> 2783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2783 -> 2790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2790 -> 6135  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2809 -> 2826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2846 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2849 -> 2853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2857 -> 2861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2861 -> 6206  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2872 -> 2878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2886 -> 2907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2907 -> 2923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2923 -> 2934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2934 -> 2947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2947 -> 2968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3016 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3025 -> 3029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3029 -> 3053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3053 -> 3055  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3053 -> 6398  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6398 -> 3063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3055 -> 6398  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3063 -> 3081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3081 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3093 -> 3097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3097 -> 3108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3108 -> 3118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3118 -> 3127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3135 -> 3156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3176 -> 3196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3196 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3205 -> 3209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3209 -> 3222  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3209 -> 6554  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6554 -> 3230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3222 -> 6554  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3241 -> 3245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3245 -> 3252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3252 -> 6597  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3271 -> 3290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3290 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3308 -> 3312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3312 -> 3336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3336 -> 6681  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
