digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n50-function_definition-8-12", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ require(b <= a, \"SafeMath: subtraction overflow\");\n67-expression_statement-9-9", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
77 [label="9_ uint256 c = a - b;\n77-new_variable-10-10", method="sub(uint256 a,uint256 b)", type_label=new_variable];
85 [label="10_ return c;\n85-return-11-11", method="sub(uint256 a,uint256 b)", type_label=return];
87 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n87-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
104 [label="13_ if_a == 0\n104-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
3520 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
109 [label="14_ return 0;\n109-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
111 [label="16_ uint256 c = a * b;\n111-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
119 [label="17_ require(c / a == b, \"SafeMath: multiplication overflow\");\n119-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
131 [label="18_ return c;\n131-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
133 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n133-function_definition-21-25", method="div(uint256 a,uint256 b)", type_label=function_definition];
150 [label="21_ require(b > 0, \"SafeMath: division by zero\");\n150-expression_statement-22-22", method="div(uint256 a,uint256 b)", type_label=expression_statement];
160 [label="22_ uint256 c = a / b;\n160-new_variable-23-23", method="div(uint256 a,uint256 b)", type_label=new_variable];
168 [label="23_ return c;\n168-return-24-24", method="div(uint256 a,uint256 b)", type_label=return];
170 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n170-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
187 [label="26_ require(b != 0, \"SafeMath: modulo by zero\");\n187-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
197 [label="27_ return a % b;\n197-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
204 [label="31_ bool not_called_re_ent34 = true;\n204-new_variable-32-32", method="", type_label=new_variable];
210 [label="32_ function bug_re_ent34() public{\n        require(not_called_re_ent34);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent34 = false;\n    }\n210-function_definition-33-39", method="bug_re_ent34()", type_label=function_definition];
214 [label="33_ require(not_called_re_ent34);\n214-expression_statement-34-34", method="bug_re_ent34()", type_label=expression_statement];
219 [label="34_ if\n219-if-35-37", method="bug_re_ent34()", type_label=if];
3635 [label="34_ end_if", method="bug_re_ent34()", type_label=end_if];
234 [label="37_ not_called_re_ent34 = false;\n234-expression_statement-38-38", method="bug_re_ent34()", type_label=expression_statement];
239 [label="39_ address public owner;\n239-new_variable-40-40", method="", type_label=new_variable];
244 [label="40_ uint256 counter_re_ent21 =0;\n244-new_variable-41-41", method="", type_label=new_variable];
249 [label="41_ function callme_re_ent21() public{\n        require(counter_re_ent21<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent21 += 1;\n    }\n249-function_definition-42-48", method="callme_re_ent21()", type_label=function_definition];
253 [label="42_ require(counter_re_ent21<=5);\n253-expression_statement-43-43", method="callme_re_ent21()", type_label=expression_statement];
260 [label="43_ if\n260-if-44-46", method="callme_re_ent21()", type_label=if];
3676 [label="43_ end_if", method="callme_re_ent21()", type_label=end_if];
275 [label="46_ counter_re_ent21 += 1;\n275-expression_statement-47-47", method="callme_re_ent21()", type_label=expression_statement];
279 [label="48_ address private newOwner;\n279-new_variable-49-49", method="", type_label=new_variable];
284 [label="49_ mapping(address => uint) balances_re_ent36;\n284-new_variable-50-50", method="", type_label=new_variable];
290 [label="50_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n290-function_definition-51-54", method="withdraw_balances_re_ent36()", type_label=function_definition];
294 [label="51_ if\n294-if-52-53", method="withdraw_balances_re_ent36()", type_label=if];
3710 [label="51_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
307 [label="52_ balances_re_ent36[msg.sender] = 0;\n307-expression_statement-53-53", method="withdraw_balances_re_ent36()", type_label=expression_statement];
331 [label="56_ owner = msg.sender;\n331-expression_statement-57-57", method="", type_label=expression_statement];
337 [label="58_ uint256 counter_re_ent42 =0;\n337-new_variable-59-59", method="", type_label=new_variable];
342 [label="59_ function callme_re_ent42() public{\n        require(counter_re_ent42<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent42 += 1;\n    }\n342-function_definition-60-66", method="callme_re_ent42()", type_label=function_definition];
346 [label="60_ require(counter_re_ent42<=5);\n346-expression_statement-61-61", method="callme_re_ent42()", type_label=expression_statement];
353 [label="61_ if\n353-if-62-64", method="callme_re_ent42()", type_label=if];
3769 [label="61_ end_if", method="callme_re_ent42()", type_label=end_if];
368 [label="64_ counter_re_ent42 += 1;\n368-expression_statement-65-65", method="callme_re_ent42()", type_label=expression_statement];
372 [label="66_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n372-expression_statement-67-70", method="", type_label=expression_statement];
375 [label="67_ require(msg.sender == owner);\n375-expression_statement-68-68", method="", type_label=expression_statement];
384 [label="68_ _;\n384-expression_statement-69-69", method="", type_label=expression_statement];
386 [label="70_ function onlyOwnerTransferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n386-function_definition-71-73", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=function_definition];
393 [label="70_ onlyOwner\n393-expression_statement-71-71", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=expression_statement];
396 [label="71_ newOwner = _newOwner;\n396-expression_statement-72-72", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=expression_statement];
400 [label="73_ address payable lastPlayer_re_ent2;\n400-new_variable-74-74", method="", type_label=new_variable];
404 [label="74_ uint jackpot_re_ent2;\n404-new_variable-75-75", method="", type_label=new_variable];
408 [label="75_ function buyTicket_re_ent2() public{\n	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))\n        revert();\n      lastPlayer_re_ent2 = msg.sender;\n      jackpot_re_ent2    = address(this).balance;\n    }\n408-function_definition-76-81", method="buyTicket_re_ent2()", type_label=function_definition];
412 [label="76_ if\n412-if-77-78", method="buyTicket_re_ent2()", type_label=if];
3828 [label="76_ end_if", method="buyTicket_re_ent2()", type_label=end_if];
423 [label="78_ lastPlayer_re_ent2 = msg.sender;\n423-expression_statement-79-79", method="buyTicket_re_ent2()", type_label=expression_statement];
429 [label="79_ jackpot_re_ent2    = address(this).balance;\n429-expression_statement-80-80", method="buyTicket_re_ent2()", type_label=expression_statement];
437 [label="81_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(now, owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n437-function_definition-82-87", method="acceptOwnership()", type_label=function_definition];
441 [label="82_ require(msg.sender == newOwner);\n441-expression_statement-83-83", method="acceptOwnership()", type_label=expression_statement];
458 [label="84_ owner = newOwner;\n458-expression_statement-85-85", method="acceptOwnership()", type_label=expression_statement];
462 [label="85_ newOwner = address(0);\n462-expression_statement-86-86", method="acceptOwnership()", type_label=expression_statement];
468 [label="87_ mapping(address => uint) balances_re_ent17;\n468-new_variable-88-88", method="", type_label=new_variable];
474 [label="88_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n474-function_definition-89-94", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
482 [label="89_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n482-expression_statement-90-90", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
493 [label="90_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n493-new_variable-91-91", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
513 [label="91_ require(success);\n513-expression_statement-92-92", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
518 [label="92_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n518-expression_statement-93-93", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
529 [label="97_ function transfer(address _to, uint256 _amount) external returns (bool);\n529-function_definition-98-98", method="transfer(address _to,uint256 _amount)", type_label=function_definition];
544 [label="98_ function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\n544-function_definition-99-99", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=function_definition];
574 [label="102_ mapping(address => uint) balances_re_ent10;\n574-new_variable-103-103", method="", type_label=new_variable];
580 [label="103_ function withdrawFunds_re_ent10 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent10[msg.sender] -= _weiToWithdraw;\n    }\n580-function_definition-104-108", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=function_definition];
588 [label="104_ require(balances_re_ent10[msg.sender] >= _weiToWithdraw);\n588-expression_statement-105-105", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
599 [label="105_ require(msg.sender.send(_weiToWithdraw));\n599-expression_statement-106-106", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
611 [label="106_ balances_re_ent10[msg.sender] -= _weiToWithdraw;\n611-expression_statement-107-107", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
619 [label="108_ bool public safeGuard;\n619-new_variable-109-109", method="", type_label=new_variable];
624 [label="109_ mapping(address => uint) balances_re_ent21;\n624-new_variable-110-110", method="", type_label=new_variable];
630 [label="110_ function withdraw_balances_re_ent21 () public {\n       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent21[msg.sender] = 0;\n      }\n630-function_definition-111-115", method="withdraw_balances_re_ent21()", type_label=function_definition];
634 [label="111_ (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n634-new_variable-112-112", method="withdraw_balances_re_ent21()", type_label=new_variable];
658 [label="112_ if\n658-if-113-114", method="withdraw_balances_re_ent21()", type_label=if];
4074 [label="112_ end_if", method="withdraw_balances_re_ent21()", type_label=end_if];
660 [label="113_ balances_re_ent21[msg.sender] = 0;\n660-expression_statement-114-114", method="withdraw_balances_re_ent21()", type_label=expression_statement];
668 [label="115_ address public feeAccount;\n668-new_variable-116-116", method="", type_label=new_variable];
673 [label="116_ mapping(address => uint) userBalance_re_ent12;\n673-new_variable-117-117", method="", type_label=new_variable];
679 [label="117_ function withdrawBalance_re_ent12() public{\n        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent12[msg.sender] = 0;\n    }\n679-function_definition-118-123", method="withdrawBalance_re_ent12()", type_label=function_definition];
683 [label="118_ if\n683-if-119-121", method="withdrawBalance_re_ent12()", type_label=if];
4099 [label="118_ end_if", method="withdrawBalance_re_ent12()", type_label=end_if];
701 [label="121_ userBalance_re_ent12[msg.sender] = 0;\n701-expression_statement-122-122", method="withdrawBalance_re_ent12()", type_label=expression_statement];
709 [label="123_ uint public tradingFee = 50;\n709-new_variable-124-124", method="", type_label=new_variable];
715 [label="124_ mapping(address => uint) redeemableEther_re_ent11;\n715-new_variable-125-125", method="", type_label=new_variable];
721 [label="125_ function claimReward_re_ent11() public {        \n        require(redeemableEther_re_ent11[msg.sender] > 0);\n        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n        msg.sender.transfer(transferValue_re_ent11);    \n        redeemableEther_re_ent11[msg.sender] = 0;\n    }\n721-function_definition-126-131", method="claimReward_re_ent11()", type_label=function_definition];
725 [label="126_ require(redeemableEther_re_ent11[msg.sender] > 0);\n725-expression_statement-127-127", method="claimReward_re_ent11()", type_label=expression_statement];
736 [label="127_ uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n736-new_variable-128-128", method="claimReward_re_ent11()", type_label=new_variable];
746 [label="128_ msg.sender.transfer(transferValue_re_ent11);\n746-expression_statement-129-129", method="claimReward_re_ent11()", type_label=expression_statement];
755 [label="129_ redeemableEther_re_ent11[msg.sender] = 0;\n755-expression_statement-130-130", method="claimReward_re_ent11()", type_label=expression_statement];
763 [label="131_ mapping (address => mapping (address => uint)) public tokens;\n763-new_variable-132-132", method="", type_label=new_variable];
772 [label="132_ mapping(address => uint) balances_re_ent1;\n772-new_variable-133-133", method="", type_label=new_variable];
778 [label="133_ function withdraw_balances_re_ent1 () public {\n       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent1[msg.sender] = 0;\n      }\n778-function_definition-134-138", method="withdraw_balances_re_ent1()", type_label=function_definition];
782 [label="134_ (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n782-new_variable-135-135", method="withdraw_balances_re_ent1()", type_label=new_variable];
806 [label="135_ if\n806-if-136-137", method="withdraw_balances_re_ent1()", type_label=if];
4222 [label="135_ end_if", method="withdraw_balances_re_ent1()", type_label=end_if];
808 [label="136_ balances_re_ent1[msg.sender] = 0;\n808-expression_statement-137-137", method="withdraw_balances_re_ent1()", type_label=expression_statement];
816 [label="138_ mapping (address => mapping (bytes32 => bool)) public orders;\n816-new_variable-139-139", method="", type_label=new_variable];
825 [label="139_ bool not_called_re_ent41 = true;\n825-new_variable-140-140", method="", type_label=new_variable];
831 [label="140_ function bug_re_ent41() public{\n        require(not_called_re_ent41);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent41 = false;\n    }\n831-function_definition-141-147", method="bug_re_ent41()", type_label=function_definition];
835 [label="141_ require(not_called_re_ent41);\n835-expression_statement-142-142", method="bug_re_ent41()", type_label=expression_statement];
840 [label="142_ if\n840-if-143-145", method="bug_re_ent41()", type_label=if];
4256 [label="142_ end_if", method="bug_re_ent41()", type_label=end_if];
855 [label="145_ not_called_re_ent41 = false;\n855-expression_statement-146-146", method="bug_re_ent41()", type_label=expression_statement];
860 [label="147_ mapping (address => mapping (bytes32 => uint)) public orderFills;\n860-new_variable-148-148", method="", type_label=new_variable];
869 [label="148_ uint256 counter_re_ent35 =0;\n869-new_variable-149-149", method="", type_label=new_variable];
874 [label="149_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n874-function_definition-150-156", method="callme_re_ent35()", type_label=function_definition];
878 [label="150_ require(counter_re_ent35<=5);\n878-expression_statement-151-151", method="callme_re_ent35()", type_label=expression_statement];
885 [label="151_ if\n885-if-152-154", method="callme_re_ent35()", type_label=if];
4301 [label="151_ end_if", method="callme_re_ent35()", type_label=end_if];
900 [label="154_ counter_re_ent35 += 1;\n900-expression_statement-155-155", method="callme_re_ent35()", type_label=expression_statement];
938 [label="157_ mapping(address => uint) userBalance_re_ent40;\n938-new_variable-158-158", method="", type_label=new_variable];
944 [label="158_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n944-function_definition-159-165", method="withdrawBalance_re_ent40()", type_label=function_definition];
948 [label="159_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n948-new_variable-160-160", method="withdrawBalance_re_ent40()", type_label=new_variable];
972 [label="160_ if\n972-if-161-163", method="withdrawBalance_re_ent40()", type_label=if];
4388 [label="160_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
978 [label="163_ userBalance_re_ent40[msg.sender] = 0;\n978-expression_statement-164-164", method="withdrawBalance_re_ent40()", type_label=expression_statement];
1032 [label="166_ mapping(address => uint) userBalance_re_ent33;\n1032-new_variable-167-167", method="", type_label=new_variable];
1038 [label="167_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n1038-function_definition-168-174", method="withdrawBalance_re_ent33()", type_label=function_definition];
1042 [label="168_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n1042-new_variable-169-169", method="withdrawBalance_re_ent33()", type_label=new_variable];
1066 [label="169_ if\n1066-if-170-172", method="withdrawBalance_re_ent33()", type_label=if];
4482 [label="169_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
1072 [label="172_ userBalance_re_ent33[msg.sender] = 0;\n1072-expression_statement-173-173", method="withdrawBalance_re_ent33()", type_label=expression_statement];
1110 [label="175_ bool not_called_re_ent27 = true;\n1110-new_variable-176-176", method="", type_label=new_variable];
1116 [label="176_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n1116-function_definition-177-183", method="bug_re_ent27()", type_label=function_definition];
1120 [label="177_ require(not_called_re_ent27);\n1120-expression_statement-178-178", method="bug_re_ent27()", type_label=expression_statement];
1125 [label="178_ if\n1125-if-179-181", method="bug_re_ent27()", type_label=if];
4541 [label="178_ end_if", method="bug_re_ent27()", type_label=end_if];
1140 [label="181_ not_called_re_ent27 = false;\n1140-expression_statement-182-182", method="bug_re_ent27()", type_label=expression_statement];
1167 [label="184_ mapping(address => uint) balances_re_ent31;\n1167-new_variable-185-185", method="", type_label=new_variable];
1173 [label="185_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n1173-function_definition-186-190", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
1181 [label="186_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n1181-expression_statement-187-187", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1192 [label="187_ require(msg.sender.send(_weiToWithdraw));\n1192-expression_statement-188-188", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1204 [label="188_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n1204-expression_statement-189-189", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1234 [label="191_ bool not_called_re_ent13 = true;\n1234-new_variable-192-192", method="", type_label=new_variable];
1240 [label="192_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n1240-function_definition-193-200", method="bug_re_ent13()", type_label=function_definition];
1244 [label="193_ require(not_called_re_ent13);\n1244-expression_statement-194-194", method="bug_re_ent13()", type_label=expression_statement];
1249 [label="194_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n1249-new_variable-195-195", method="bug_re_ent13()", type_label=new_variable];
1270 [label="195_ if\n1270-if-196-198", method="bug_re_ent13()", type_label=if];
4686 [label="195_ end_if", method="bug_re_ent13()", type_label=end_if];
1276 [label="198_ not_called_re_ent13 = false;\n1276-expression_statement-199-199", method="bug_re_ent13()", type_label=expression_statement];
1293 [label="202_ feeAccount = msg.sender;\n1293-expression_statement-203-203", method="", type_label=expression_statement];
1299 [label="204_ address payable lastPlayer_re_ent37;\n1299-new_variable-205-205", method="", type_label=new_variable];
1303 [label="205_ uint jackpot_re_ent37;\n1303-new_variable-206-206", method="", type_label=new_variable];
1307 [label="206_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n1307-function_definition-207-212", method="buyTicket_re_ent37()", type_label=function_definition];
1311 [label="207_ if\n1311-if-208-209", method="buyTicket_re_ent37()", type_label=if];
4727 [label="207_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
1322 [label="209_ lastPlayer_re_ent37 = msg.sender;\n1322-expression_statement-210-210", method="buyTicket_re_ent37()", type_label=expression_statement];
1328 [label="210_ jackpot_re_ent37    = address(this).balance;\n1328-expression_statement-211-211", method="buyTicket_re_ent37()", type_label=expression_statement];
1336 [label="212_ function changeSafeguardStatus() onlyOwner public\n    {\n        if (safeGuard == false)\n        {\n            safeGuard = true;\n        }\n        else\n        {\n            safeGuard = false;    \n        }\n    }\n1336-function_definition-213-223", method="changeSafeguardStatus()", type_label=function_definition];
1338 [label="212_ onlyOwner\n1338-expression_statement-213-213", method="changeSafeguardStatus()", type_label=expression_statement];
1342 [label="214_ if_safeGuard == false\n1342-if-215-222", method="changeSafeguardStatus()", type_label=if];
4758 [label="214_ end_if", method="changeSafeguardStatus()", type_label=end_if];
1348 [label="216_ safeGuard = true;\n1348-expression_statement-217-217", method="changeSafeguardStatus()", type_label=expression_statement];
1354 [label="220_ safeGuard = false;\n1354-expression_statement-221-221", method="changeSafeguardStatus()", type_label=expression_statement];
1359 [label="223_ mapping(address => uint) balances_re_ent3;\n1359-new_variable-224-224", method="", type_label=new_variable];
1365 [label="224_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n1365-function_definition-225-230", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
1373 [label="225_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n1373-expression_statement-226-226", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1384 [label="226_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n1384-new_variable-227-227", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
1404 [label="227_ require(success);\n1404-expression_statement-228-228", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1409 [label="228_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n1409-expression_statement-229-229", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1417 [label="230_ function calculatePercentage(uint256 PercentOf, uint256 percentTo ) internal pure returns (uint256) \n    {\n        uint256 factor = 10000;\n        require(percentTo <= factor);\n        uint256 c = PercentOf.mul(percentTo).div(factor);\n        return c;\n    }\n1417-function_definition-231-237", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=function_definition];
1434 [label="232_ uint256 factor = 10000;\n1434-new_variable-233-233", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=new_variable];
1440 [label="233_ require(percentTo <= factor);\n1440-expression_statement-234-234", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=expression_statement];
1447 [label="234_ uint256 c = PercentOf.mul(percentTo).div(factor);\n1447-new_variable-235-235", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=new_variable];
1463 [label="235_ return c;\n1463-return-236-236", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=return];
1465 [label="237_ address payable lastPlayer_re_ent9;\n1465-new_variable-238-238", method="", type_label=new_variable];
1469 [label="238_ uint jackpot_re_ent9;\n1469-new_variable-239-239", method="", type_label=new_variable];
1473 [label="239_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n1473-function_definition-240-246", method="buyTicket_re_ent9()", type_label=function_definition];
1477 [label="240_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n1477-new_variable-241-241", method="buyTicket_re_ent9()", type_label=new_variable];
1495 [label="241_ if\n1495-if-242-243", method="buyTicket_re_ent9()", type_label=if];
4911 [label="241_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
1500 [label="243_ lastPlayer_re_ent9 = msg.sender;\n1500-expression_statement-244-244", method="buyTicket_re_ent9()", type_label=expression_statement];
1506 [label="244_ jackpot_re_ent9    = address(this).balance;\n1506-expression_statement-245-245", method="buyTicket_re_ent9()", type_label=expression_statement];
1514 [label="246_ function changeFeeAccount(address feeAccount_) public onlyOwner {\n    feeAccount = feeAccount_;\n  }\n1514-function_definition-247-249", method="changeFeeAccount(address feeAccount_)", type_label=function_definition];
1521 [label="246_ onlyOwner\n1521-expression_statement-247-247", method="changeFeeAccount(address feeAccount_)", type_label=expression_statement];
1524 [label="247_ feeAccount = feeAccount_;\n1524-expression_statement-248-248", method="changeFeeAccount(address feeAccount_)", type_label=expression_statement];
1528 [label="249_ mapping(address => uint) redeemableEther_re_ent25;\n1528-new_variable-250-250", method="", type_label=new_variable];
1534 [label="250_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n1534-function_definition-251-256", method="claimReward_re_ent25()", type_label=function_definition];
1538 [label="251_ require(redeemableEther_re_ent25[msg.sender] > 0);\n1538-expression_statement-252-252", method="claimReward_re_ent25()", type_label=expression_statement];
1549 [label="252_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n1549-new_variable-253-253", method="claimReward_re_ent25()", type_label=new_variable];
1559 [label="253_ msg.sender.transfer(transferValue_re_ent25);\n1559-expression_statement-254-254", method="claimReward_re_ent25()", type_label=expression_statement];
1568 [label="254_ redeemableEther_re_ent25[msg.sender] = 0;\n1568-expression_statement-255-255", method="claimReward_re_ent25()", type_label=expression_statement];
1576 [label="256_ function changetradingFee(uint tradingFee_) public onlyOwner{\n    tradingFee = tradingFee_;\n  }\n1576-function_definition-257-259", method="changetradingFee(uint tradingFee_)", type_label=function_definition];
1583 [label="256_ onlyOwner\n1583-expression_statement-257-257", method="changetradingFee(uint tradingFee_)", type_label=expression_statement];
1586 [label="257_ tradingFee = tradingFee_;\n1586-expression_statement-258-258", method="changetradingFee(uint tradingFee_)", type_label=expression_statement];
1590 [label="259_ mapping(address => uint) userBalance_re_ent19;\n1590-new_variable-260-260", method="", type_label=new_variable];
1596 [label="260_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n1596-function_definition-261-266", method="withdrawBalance_re_ent19()", type_label=function_definition];
1600 [label="261_ if\n1600-if-262-264", method="withdrawBalance_re_ent19()", type_label=if];
5016 [label="261_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
1618 [label="264_ userBalance_re_ent19[msg.sender] = 0;\n1618-expression_statement-265-265", method="withdrawBalance_re_ent19()", type_label=expression_statement];
1626 [label="266_ function availableTradingFeeOwner() public view returns(uint256){\n      return tokens[address(0)][feeAccount];\n  }\n1626-function_definition-267-269", method="availableTradingFeeOwner()", type_label=function_definition];
1635 [label="267_ return tokens[address(0)][feeAccount];\n1635-return-268-268", method="availableTradingFeeOwner()", type_label=return];
1643 [label="269_ mapping(address => uint) userBalance_re_ent26;\n1643-new_variable-270-270", method="", type_label=new_variable];
1649 [label="270_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n1649-function_definition-271-277", method="withdrawBalance_re_ent26()", type_label=function_definition];
1653 [label="271_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n1653-new_variable-272-272", method="withdrawBalance_re_ent26()", type_label=new_variable];
1677 [label="272_ if\n1677-if-273-275", method="withdrawBalance_re_ent26()", type_label=if];
5093 [label="272_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
1683 [label="275_ userBalance_re_ent26[msg.sender] = 0;\n1683-expression_statement-276-276", method="withdrawBalance_re_ent26()", type_label=expression_statement];
1691 [label="277_ function withdrawTradingFeeOwner() public onlyOwner returns (string memory){\n      uint256 amount = availableTradingFeeOwner();\n      require (amount > 0, 'Nothing to withdraw');\n      tokens[address(0)][feeAccount] = 0;\n      msg.sender.transfer(amount);\n      emit OwnerWithdrawTradingFee(owner, amount);\n  }\n1691-function_definition-278-284", method="withdrawTradingFeeOwner()", type_label=function_definition];
1694 [label="277_ onlyOwner\n1694-expression_statement-278-278", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1701 [label="278_ uint256 amount = availableTradingFeeOwner();\n1701-new_variable-279-279", method="withdrawTradingFeeOwner()", type_label=new_variable];
1708 [label="279_ require (amount > 0, 'Nothing to withdraw');\n1708-expression_statement-280-280", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1718 [label="280_ tokens[address(0)][feeAccount] = 0;\n1718-expression_statement-281-281", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1728 [label="281_ msg.sender.transfer(amount);\n1728-expression_statement-282-282", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1743 [label="284_ bool not_called_re_ent20 = true;\n1743-new_variable-285-285", method="", type_label=new_variable];
1749 [label="285_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n1749-function_definition-286-292", method="bug_re_ent20()", type_label=function_definition];
1753 [label="286_ require(not_called_re_ent20);\n1753-expression_statement-287-287", method="bug_re_ent20()", type_label=expression_statement];
1758 [label="287_ if\n1758-if-288-290", method="bug_re_ent20()", type_label=if];
5174 [label="287_ end_if", method="bug_re_ent20()", type_label=end_if];
1773 [label="290_ not_called_re_ent20 = false;\n1773-expression_statement-291-291", method="bug_re_ent20()", type_label=expression_statement];
1778 [label="292_ function deposit() public payable {\n    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);\n    emit Deposit(now, address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);\n  }\n1778-function_definition-293-296", method="deposit()", type_label=function_definition];
1783 [label="293_ tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);\n1783-expression_statement-294-294", method="deposit()", type_label=expression_statement];
1836 [label="296_ mapping(address => uint) redeemableEther_re_ent32;\n1836-new_variable-297-297", method="", type_label=new_variable];
1842 [label="297_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n1842-function_definition-298-303", method="claimReward_re_ent32()", type_label=function_definition];
1846 [label="298_ require(redeemableEther_re_ent32[msg.sender] > 0);\n1846-expression_statement-299-299", method="claimReward_re_ent32()", type_label=expression_statement];
1857 [label="299_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n1857-new_variable-300-300", method="claimReward_re_ent32()", type_label=new_variable];
1867 [label="300_ msg.sender.transfer(transferValue_re_ent32);\n1867-expression_statement-301-301", method="claimReward_re_ent32()", type_label=expression_statement];
1876 [label="301_ redeemableEther_re_ent32[msg.sender] = 0;\n1876-expression_statement-302-302", method="claimReward_re_ent32()", type_label=expression_statement];
1884 [label="303_ function withdraw(uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    require(tokens[address(0)][msg.sender] >= amount);\n    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);\n    msg.sender.transfer(amount);\n    emit Withdraw(now, address(0), msg.sender, amount, tokens[address(0)][msg.sender]);\n  }\n1884-function_definition-304-310", method="withdraw(uint amount)", type_label=function_definition];
1892 [label="304_ require(!safeGuard,\"System Paused by Admin\");\n1892-expression_statement-305-305", method="withdraw(uint amount)", type_label=expression_statement];
1901 [label="305_ require(tokens[address(0)][msg.sender] >= amount);\n1901-expression_statement-306-306", method="withdraw(uint amount)", type_label=expression_statement];
1916 [label="306_ tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);\n1916-expression_statement-307-307", method="withdraw(uint amount)", type_label=expression_statement];
1941 [label="307_ msg.sender.transfer(amount);\n1941-expression_statement-308-308", method="withdraw(uint amount)", type_label=expression_statement];
1974 [label="310_ mapping(address => uint) balances_re_ent38;\n1974-new_variable-311-311", method="", type_label=new_variable];
1980 [label="311_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n1980-function_definition-312-316", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
1988 [label="312_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n1988-expression_statement-313-313", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1999 [label="313_ require(msg.sender.send(_weiToWithdraw));\n1999-expression_statement-314-314", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
2011 [label="314_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n2011-expression_statement-315-315", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
2019 [label="316_ function depositToken(address token, uint amount) public {\n    require(token!=address(0));\n    require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount));\n    tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\n    emit Deposit(now, token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n2019-function_definition-317-322", method="depositToken(address token,uint amount)", type_label=function_definition];
2031 [label="317_ require(token!=address(0));\n2031-expression_statement-318-318", method="depositToken(address token,uint amount)", type_label=expression_statement];
2040 [label="318_ require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount));\n2040-expression_statement-319-319", method="depositToken(address token,uint amount)", type_label=expression_statement];
2061 [label="319_ tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\n2061-expression_statement-320-320", method="depositToken(address token,uint amount)", type_label=expression_statement];
2102 [label="322_ mapping(address => uint) redeemableEther_re_ent4;\n2102-new_variable-323-323", method="", type_label=new_variable];
2108 [label="323_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n2108-function_definition-324-329", method="claimReward_re_ent4()", type_label=function_definition];
2112 [label="324_ require(redeemableEther_re_ent4[msg.sender] > 0);\n2112-expression_statement-325-325", method="claimReward_re_ent4()", type_label=expression_statement];
2123 [label="325_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n2123-new_variable-326-326", method="claimReward_re_ent4()", type_label=new_variable];
2133 [label="326_ msg.sender.transfer(transferValue_re_ent4);\n2133-expression_statement-327-327", method="claimReward_re_ent4()", type_label=expression_statement];
2142 [label="327_ redeemableEther_re_ent4[msg.sender] = 0;\n2142-expression_statement-328-328", method="claimReward_re_ent4()", type_label=expression_statement];
2150 [label="329_ function withdrawToken(address token, uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    require(token!=address(0));\n    require(tokens[token][msg.sender] >= amount);\n    tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\n	  ERC20Essential(token).transfer(msg.sender, amount);\n    emit Withdraw(now, token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n2150-function_definition-330-337", method="withdrawToken(address token,uint amount)", type_label=function_definition];
2162 [label="330_ require(!safeGuard,\"System Paused by Admin\");\n2162-expression_statement-331-331", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
2171 [label="331_ require(token!=address(0));\n2171-expression_statement-332-332", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
2180 [label="332_ require(tokens[token][msg.sender] >= amount);\n2180-expression_statement-333-333", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
2193 [label="333_ tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\n2193-expression_statement-334-334", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
2214 [label="334_ ERC20Essential(token).transfer(msg.sender, amount);\n2214-expression_statement-335-335", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
2248 [label="337_ uint256 counter_re_ent7 =0;\n2248-new_variable-338-338", method="", type_label=new_variable];
2253 [label="338_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n2253-function_definition-339-345", method="callme_re_ent7()", type_label=function_definition];
2257 [label="339_ require(counter_re_ent7<=5);\n2257-expression_statement-340-340", method="callme_re_ent7()", type_label=expression_statement];
2264 [label="340_ if\n2264-if-341-343", method="callme_re_ent7()", type_label=if];
5680 [label="340_ end_if", method="callme_re_ent7()", type_label=end_if];
2279 [label="343_ counter_re_ent7 += 1;\n2279-expression_statement-344-344", method="callme_re_ent7()", type_label=expression_statement];
2283 [label="345_ function balanceOf(address token, address user) public view returns (uint) {\n    return tokens[token][user];\n  }\n2283-function_definition-346-348", method="balanceOf(address token,address user)", type_label=function_definition];
2300 [label="346_ return tokens[token][user];\n2300-return-347-347", method="balanceOf(address token,address user)", type_label=return];
2306 [label="348_ address payable lastPlayer_re_ent23;\n2306-new_variable-349-349", method="", type_label=new_variable];
2310 [label="349_ uint jackpot_re_ent23;\n2310-new_variable-350-350", method="", type_label=new_variable];
2314 [label="350_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n2314-function_definition-351-356", method="buyTicket_re_ent23()", type_label=function_definition];
2318 [label="351_ if\n2318-if-352-353", method="buyTicket_re_ent23()", type_label=if];
5734 [label="351_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
2329 [label="353_ lastPlayer_re_ent23 = msg.sender;\n2329-expression_statement-354-354", method="buyTicket_re_ent23()", type_label=expression_statement];
2335 [label="354_ jackpot_re_ent23    = address(this).balance;\n2335-expression_statement-355-355", method="buyTicket_re_ent23()", type_label=expression_statement];
2343 [label="356_ function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce) public {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    orders[msg.sender][hash] = true;\n    emit Order(now, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender);\n  }\n2343-function_definition-357-361", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=function_definition];
2371 [label="357_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2371-new_variable-358-358", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=new_variable];
2397 [label="358_ orders[msg.sender][hash] = true;\n2397-expression_statement-359-359", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=expression_statement];
2428 [label="361_ uint256 counter_re_ent14 =0;\n2428-new_variable-362-362", method="", type_label=new_variable];
2433 [label="362_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n2433-function_definition-363-369", method="callme_re_ent14()", type_label=function_definition];
2437 [label="363_ require(counter_re_ent14<=5);\n2437-expression_statement-364-364", method="callme_re_ent14()", type_label=expression_statement];
2444 [label="364_ if\n2444-if-365-367", method="callme_re_ent14()", type_label=if];
5860 [label="364_ end_if", method="callme_re_ent14()", type_label=end_if];
2459 [label="367_ counter_re_ent14 += 1;\n2459-expression_statement-368-368", method="callme_re_ent14()", type_label=expression_statement];
2463 [label="369_ function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    require((\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires &&\n      orderFills[user][hash].add(amount) <= amountGet\n    ));\n    tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n    orderFills[user][hash] = orderFills[user][hash].add(amount);\n    emit Trade(now, tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender);\n  }\n2463-function_definition-370-381", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=function_definition];
2511 [label="370_ require(!safeGuard,\"System Paused by Admin\");\n2511-expression_statement-371-371", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
2520 [label="371_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2520-new_variable-372-372", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=new_variable];
2546 [label="372_ require((\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires &&\n      orderFills[user][hash].add(amount) <= amountGet\n    ));\n2546-expression_statement-373-377", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
2600 [label="377_ tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n2600-expression_statement-378-378", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
2615 [label="378_ orderFills[user][hash] = orderFills[user][hash].add(amount);\n2615-expression_statement-379-379", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
2654 [label="381_ function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) internal {\n    uint tradingFeeXfer = calculatePercentage(amount,tradingFee);\n    tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer));\n    tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer));\n    tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer);\n    tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet);\n    tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet);\n  }\n2654-function_definition-382-389", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=function_definition];
2682 [label="382_ uint tradingFeeXfer = calculatePercentage(amount,tradingFee);\n2682-new_variable-383-383", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=new_variable];
2693 [label="383_ tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer));\n2693-expression_statement-384-384", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2719 [label="384_ tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer));\n2719-expression_statement-385-385", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2741 [label="385_ tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer);\n2741-expression_statement-386-386", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2762 [label="386_ tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet);\n2762-expression_statement-387-387", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2786 [label="387_ tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet);\n2786-expression_statement-388-388", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2814 [label="389_ address payable lastPlayer_re_ent30;\n2814-new_variable-390-390", method="", type_label=new_variable];
2818 [label="390_ uint jackpot_re_ent30;\n2818-new_variable-391-391", method="", type_label=new_variable];
2822 [label="391_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n2822-function_definition-392-397", method="buyTicket_re_ent30()", type_label=function_definition];
2826 [label="392_ if\n2826-if-393-394", method="buyTicket_re_ent30()", type_label=if];
6242 [label="392_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
2837 [label="394_ lastPlayer_re_ent30 = msg.sender;\n2837-expression_statement-395-395", method="buyTicket_re_ent30()", type_label=expression_statement];
2843 [label="395_ jackpot_re_ent30    = address(this).balance;\n2843-expression_statement-396-396", method="buyTicket_re_ent30()", type_label=expression_statement];
2851 [label="397_ function testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) public view returns(bool) {\n    if (!(\n      tokens[tokenGet][sender] >= amount &&\n      availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount\n    )) return false;\n    return true;\n  }\n2851-function_definition-398-404", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=function_definition];
2908 [label="398_ if\n2908-if-399-402", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=if];
6324 [label="398_ end_if", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=end_if];
2943 [label="401_ return false;\n2943-return-402-402", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=return];
2946 [label="402_ return true;\n2946-return-403-403", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=return];
2949 [label="404_ mapping(address => uint) balances_re_ent8;\n2949-new_variable-405-405", method="", type_label=new_variable];
2955 [label="405_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n2955-function_definition-406-410", method="withdraw_balances_re_ent8()", type_label=function_definition];
2959 [label="406_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n2959-new_variable-407-407", method="withdraw_balances_re_ent8()", type_label=new_variable];
2983 [label="407_ if\n2983-if-408-409", method="withdraw_balances_re_ent8()", type_label=if];
6399 [label="407_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
2985 [label="408_ balances_re_ent8[msg.sender] = 0;\n2985-expression_statement-409-409", method="withdraw_balances_re_ent8()", type_label=expression_statement];
2993 [label="410_ function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) public view returns(uint) {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    uint available1;\n    if (!(\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires\n    )) return 0;\n    available1 = tokens[tokenGive][user].mul(amountGet) / amountGive;\n    if (amountGet.sub(orderFills[user][hash])<available1) return amountGet.sub(orderFills[user][hash]);\n    return available1;\n  }\n2993-function_definition-411-421", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
3042 [label="411_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n3042-new_variable-412-412", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
3068 [label="412_ uint available1;\n3068-new_variable-413-413", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
3073 [label="413_ if\n3073-if-414-417", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=if];
6489 [label="413_ end_if", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
3112 [label="416_ return 0;\n3112-return-417-417", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
3114 [label="417_ available1 = tokens[tokenGive][user].mul(amountGet) / amountGive;\n3114-expression_statement-418-418", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
3129 [label="418_ if_amountGet.sub(orderFills[user][hash])<available1\n3129-if-419-419", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=if];
6545 [label="418_ end_if", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
3142 [label="418_ return amountGet.sub(orderFills[user][hash]);\n3142-return-419-419", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
3153 [label="419_ return available1;\n3153-return-420-420", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
3155 [label="421_ function amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user) public view returns(uint) {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    return orderFills[user][hash];\n  }\n3155-function_definition-422-425", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=function_definition];
3192 [label="422_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n3192-new_variable-423-423", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=new_variable];
3218 [label="423_ return orderFills[user][hash];\n3218-return-424-424", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=return];
3224 [label="425_ mapping(address => uint) redeemableEther_re_ent39;\n3224-new_variable-426-426", method="", type_label=new_variable];
3230 [label="426_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n3230-function_definition-427-432", method="claimReward_re_ent39()", type_label=function_definition];
3234 [label="427_ require(redeemableEther_re_ent39[msg.sender] > 0);\n3234-expression_statement-428-428", method="claimReward_re_ent39()", type_label=expression_statement];
3245 [label="428_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n3245-new_variable-429-429", method="claimReward_re_ent39()", type_label=new_variable];
3255 [label="429_ msg.sender.transfer(transferValue_re_ent39);\n3255-expression_statement-430-430", method="claimReward_re_ent39()", type_label=expression_statement];
3264 [label="430_ redeemableEther_re_ent39[msg.sender] = 0;\n3264-expression_statement-431-431", method="claimReward_re_ent39()", type_label=expression_statement];
3272 [label="432_ function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    require((orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == msg.sender));\n    orderFills[msg.sender][hash] = amountGet;\n    emit Cancel(now, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);\n  }\n3272-function_definition-433-439", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
3312 [label="433_ require(!safeGuard,\"System Paused by Admin\");\n3312-expression_statement-434-434", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
3321 [label="434_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n3321-new_variable-435-435", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
3347 [label="435_ require((orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == msg.sender));\n3347-expression_statement-436-436", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
3385 [label="436_ orderFills[msg.sender][hash] = amountGet;\n3385-expression_statement-437-437", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
315;
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
87 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 109  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
104 -> 3520  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3520 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 3520  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
109 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
210 -> 214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
219 -> 3635  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
239 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
253 -> 260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
260 -> 3676  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
279 -> 284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
290 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 307  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
294 -> 3710  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3710 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
307 -> 3710  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
342 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
346 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 3769  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
375 -> 384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
412 -> 3828  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
423 -> 429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
474 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
599 -> 611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
619 -> 624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
634 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 660  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
658 -> 4074  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4074 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
660 -> 4074  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
668 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
683 -> 4099  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
709 -> 715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
721 -> 725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
778 -> 782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
782 -> 806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
806 -> 808  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
806 -> 4222  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4222 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 4222  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
816 -> 825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
831 -> 835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
835 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 4256  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
860 -> 869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
874 -> 878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
878 -> 885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 4301  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
944 -> 948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
972 -> 4388  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1038 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 1066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1066 -> 4482  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1116 -> 1120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1120 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1125 -> 4541  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1173 -> 1181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1181 -> 1192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1192 -> 1204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1240 -> 1244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1244 -> 1249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1249 -> 1270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1270 -> 4686  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1299 -> 1303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1307 -> 1311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1311 -> 4727  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1322 -> 1328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1336 -> 1342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1342 -> 1348  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1342 -> 1354  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4758 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1348 -> 4758  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1354 -> 4758  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1365 -> 1373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1373 -> 1384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1384 -> 1404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1404 -> 1409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1417 -> 1434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1434 -> 1440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1440 -> 1447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1447 -> 1463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1463 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1465 -> 1469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1473 -> 1477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1477 -> 1495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1495 -> 4911  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1500 -> 1506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1514 -> 1524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1534 -> 1538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1538 -> 1549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1549 -> 1559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1559 -> 1568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1576 -> 1586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1596 -> 1600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1600 -> 5016  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1626 -> 1635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1635 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1649 -> 1653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1653 -> 1677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1677 -> 5093  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1691 -> 1701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1701 -> 1708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1708 -> 1718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1718 -> 1728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1749 -> 1753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1753 -> 1758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1758 -> 5174  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1778 -> 1783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1842 -> 1846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1846 -> 1857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1857 -> 1867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1867 -> 1876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1884 -> 1892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1892 -> 1901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1901 -> 1916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1916 -> 1941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1980 -> 1988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1988 -> 1999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1999 -> 2011  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2019 -> 2031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2031 -> 2040  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2040 -> 2061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2108 -> 2112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2112 -> 2123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2123 -> 2133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2133 -> 2142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2150 -> 2162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2162 -> 2171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2171 -> 2180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2180 -> 2193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2193 -> 2214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2253 -> 2257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2257 -> 2264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2264 -> 5680  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2283 -> 2300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2300 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2306 -> 2310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2314 -> 2318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2318 -> 5734  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2329 -> 2335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2343 -> 2371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2371 -> 2397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2433 -> 2437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2437 -> 2444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2444 -> 5860  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2463 -> 2511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2511 -> 2520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2520 -> 2546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2546 -> 2600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2600 -> 2615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2654 -> 2682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2682 -> 2693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2693 -> 2719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2719 -> 2741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2741 -> 2762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2762 -> 2786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2814 -> 2818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2822 -> 2826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2826 -> 6242  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2837 -> 2843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2851 -> 2908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2908 -> 2943  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2908 -> 6324  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6324 -> 2946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2943 -> 6324  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2943 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2946 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2955 -> 2959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2959 -> 2983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2983 -> 2985  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2983 -> 6399  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6399 -> 2993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2985 -> 6399  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2993 -> 3042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3042 -> 3068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3068 -> 3073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3073 -> 3112  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3073 -> 6489  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6489 -> 3114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3112 -> 6489  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3112 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3114 -> 3129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3129 -> 3142  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3129 -> 6545  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6545 -> 3153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3142 -> 6545  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3142 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3153 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3155 -> 3192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3192 -> 3218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3218 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3230 -> 3234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3234 -> 3245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3245 -> 3255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3255 -> 3264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3272 -> 3312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3312 -> 3321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3321 -> 3347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3347 -> 3385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
