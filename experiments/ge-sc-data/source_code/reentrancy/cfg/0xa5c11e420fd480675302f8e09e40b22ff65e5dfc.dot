digraph  {
17 [label="3_ address public constant promotionAddress = 0x22e483dBeb45EDBC74d4fE25d79B5C28eA6Aa8Dd;\n17-new_variable-4-4", method="", type_label=new_variable];
23 [label="4_ address public constant adminAddress = 0x3C1FD40A99066266A60F60d17d5a7c51434d74bB;\n23-new_variable-5-5", method="", type_label=new_variable];
29 [label="5_ mapping (address => uint256) public deposit;\n29-new_variable-6-6", method="", type_label=new_variable];
36 [label="6_ mapping (address => uint256) public withdrawals;\n36-new_variable-7-7", method="", type_label=new_variable];
43 [label="7_ mapping (address => uint256) public time;\n43-new_variable-8-8", method="", type_label=new_variable];
50 [label="8_ uint256 public minimum = 0.01 ether;\n50-new_variable-9-9", method="", type_label=new_variable];
57 [label="9_ uint public promotionPercent = 10;\n57-new_variable-10-10", method="", type_label=new_variable];
63 [label="10_ uint public adminPercent = 2;\n63-new_variable-11-11", method="", type_label=new_variable];
69 [label="11_ uint256 public countOfInvestors;\n69-new_variable-12-12", method="", type_label=new_variable];
74 [label="12_ function getPhasePercent() view public returns (uint){\n        uint contractBalance = address(this).balance;\n        if (contractBalance < 300 ether) {\n            return 2;\n        }\n        if (contractBalance >= 300 ether && contractBalance < 1200 ether) {\n            return 3;\n        }\n        if (contractBalance >= 1200 ether) {\n            return 4;\n        }\n    }\n74-function_definition-13-24", method="getPhasePercent()", type_label=function_definition];
83 [label="13_ uint contractBalance = address(this).balance;\n83-new_variable-14-14", method="getPhasePercent()", type_label=new_variable];
93 [label="14_ if_contractBalance < 300 ether\n93-if-15-17", method="getPhasePercent()", type_label=if];
661 [label="14_ end_if", method="getPhasePercent()", type_label=end_if];
99 [label="15_ return 2;\n99-return-16-16", method="getPhasePercent()", type_label=return];
101 [label="17_ if_contractBalance >= 300 ether && contractBalance < 1200 ether\n101-if-18-20", method="getPhasePercent()", type_label=if];
669 [label="17_ end_if", method="getPhasePercent()", type_label=end_if];
112 [label="18_ return 3;\n112-return-19-19", method="getPhasePercent()", type_label=return];
114 [label="20_ if_contractBalance >= 1200 ether\n114-if-21-23", method="getPhasePercent()", type_label=if];
682 [label="20_ end_if", method="getPhasePercent()", type_label=end_if];
120 [label="21_ return 4;\n120-return-22-22", method="getPhasePercent()", type_label=return];
122 [label="24_ function getUserBalance(address _address) view public returns (uint256) {\n        uint percent = getPhasePercent();\n        uint256 differentTime = now.sub(time[_address]).div(1 hours);\n        uint256 differentPercent = deposit[_address].mul(percent).div(100);\n        uint256 payout = differentPercent.mul(differentTime).div(24);\n        return payout;\n    }\n122-function_definition-25-31", method="getUserBalance(address _address)", type_label=function_definition];
135 [label="25_ uint percent = getPhasePercent();\n135-new_variable-26-26", method="getUserBalance(address _address)", type_label=new_variable];
142 [label="26_ uint256 differentTime = now.sub(time[_address]).div(1 hours);\n142-new_variable-27-27", method="getUserBalance(address _address)", type_label=new_variable];
161 [label="27_ uint256 differentPercent = deposit[_address].mul(percent).div(100);\n161-new_variable-28-28", method="getUserBalance(address _address)", type_label=new_variable];
179 [label="28_ uint256 payout = differentPercent.mul(differentTime).div(24);\n179-new_variable-29-29", method="getUserBalance(address _address)", type_label=new_variable];
195 [label="29_ return payout;\n195-return-30-30", method="getUserBalance(address _address)", type_label=return];
197 [label="31_ function withdraw(address _address) private {\n        uint256 balance = getUserBalance(_address);\n        if (deposit[_address] > 0 && address(this).balance >= balance && balance > 0) {\n            withdrawals[_address] = withdrawals[_address].add(balance);\n            time[_address] = now;\n            if (withdrawals[_address] >= deposit[_address].mul(2)){\n                deposit[_address] = 0;\n                time[_address] = 0;\n                withdrawals[_address] = 0;\n                countOfInvestors--;\n            }\n            _address.transfer(balance);\n        }\n    }\n197-function_definition-32-45", method="withdraw(address _address)", type_label=function_definition];
205 [label="32_ uint256 balance = getUserBalance(_address);\n205-new_variable-33-33", method="withdraw(address _address)", type_label=new_variable];
214 [label="33_ if_deposit[_address] > 0 && address(this).balance >= balance && balance > 0\n214-if-34-44", method="withdraw(address _address)", type_label=if];
782 [label="33_ end_if", method="withdraw(address _address)", type_label=end_if];
233 [label="34_ withdrawals[_address] = withdrawals[_address].add(balance);\n233-expression_statement-35-35", method="withdraw(address _address)", type_label=expression_statement];
246 [label="35_ time[_address] = now;\n246-expression_statement-36-36", method="withdraw(address _address)", type_label=expression_statement];
252 [label="36_ if\n252-if-37-42", method="withdraw(address _address)", type_label=if];
820 [label="36_ end_if", method="withdraw(address _address)", type_label=end_if];
266 [label="37_ deposit[_address] = 0;\n266-expression_statement-38-38", method="withdraw(address _address)", type_label=expression_statement];
272 [label="38_ time[_address] = 0;\n272-expression_statement-39-39", method="withdraw(address _address)", type_label=expression_statement];
278 [label="39_ withdrawals[_address] = 0;\n278-expression_statement-40-40", method="withdraw(address _address)", type_label=expression_statement];
284 [label="40_ countOfInvestors--;\n284-expression_statement-41-41", method="withdraw(address _address)", type_label=expression_statement];
285 [label="40_ countOfInvestors--\n285-expression_statement-41-41", method="withdraw(address _address)", type_label=expression_statement];
287 [label="42_ _address.transfer(balance);\n287-expression_statement-43-43", method="withdraw(address _address)", type_label=expression_statement];
298 [label="46_ if_msg.value >= minimum\n298-if-47-58", method="", type_label=if];
866 [label="46_ end_if", method="", type_label=end_if];
305 [label="47_ promotionAddress.transfer(msg.value.mul(promotionPercent).div(100));\n305-expression_statement-48-48", method="", type_label=expression_statement];
324 [label="48_ adminAddress.transfer(msg.value.mul(adminPercent).div(100));\n324-expression_statement-49-49", method="", type_label=expression_statement];
343 [label="49_ withdraw(msg.sender);\n343-expression_statement-50-50", method="", type_label=expression_statement];
350 [label="50_ if_deposit[msg.sender] == 0\n350-if-51-53", method="", type_label=if];
918 [label="50_ end_if", method="", type_label=end_if];
359 [label="51_ countOfInvestors++;\n359-expression_statement-52-52", method="", type_label=expression_statement];
360 [label="51_ countOfInvestors++\n360-expression_statement-52-52", method="", type_label=expression_statement];
362 [label="53_ deposit[msg.sender] = deposit[msg.sender].add(msg.value);\n362-expression_statement-54-54", method="", type_label=expression_statement];
381 [label="54_ time[msg.sender] = now;\n381-expression_statement-55-55", method="", type_label=expression_statement];
390 [label="56_ withdraw(msg.sender);\n390-expression_statement-57-57", method="", type_label=expression_statement];
400 [label="61_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n400-function_definition-62-69", method="mul(uint256 a,uint256 b)", type_label=function_definition];
417 [label="62_ if_a == 0\n417-if-63-65", method="mul(uint256 a,uint256 b)", type_label=if];
985 [label="62_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
422 [label="63_ return 0;\n422-return-64-64", method="mul(uint256 a,uint256 b)", type_label=return];
424 [label="65_ uint256 c = a * b;\n424-new_variable-66-66", method="mul(uint256 a,uint256 b)", type_label=new_variable];
432 [label="66_ require(c / a == b);\n432-expression_statement-67-67", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
441 [label="67_ return c;\n441-return-68-68", method="mul(uint256 a,uint256 b)", type_label=return];
443 [label="69_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);  \n        uint256 c = a / b;\n        return c;\n    }\n443-function_definition-70-74", method="div(uint256 a,uint256 b)", type_label=function_definition];
460 [label="70_ require(b > 0);\n460-expression_statement-71-71", method="div(uint256 a,uint256 b)", type_label=expression_statement];
467 [label="71_ uint256 c = a / b;\n467-new_variable-72-72", method="div(uint256 a,uint256 b)", type_label=new_variable];
475 [label="72_ return c;\n475-return-73-73", method="div(uint256 a,uint256 b)", type_label=return];
477 [label="74_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n477-function_definition-75-79", method="sub(uint256 a,uint256 b)", type_label=function_definition];
494 [label="75_ require(b <= a);\n494-expression_statement-76-76", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
501 [label="76_ uint256 c = a - b;\n501-new_variable-77-77", method="sub(uint256 a,uint256 b)", type_label=new_variable];
509 [label="77_ return c;\n509-return-78-78", method="sub(uint256 a,uint256 b)", type_label=return];
511 [label="79_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n511-function_definition-80-84", method="add(uint256 a,uint256 b)", type_label=function_definition];
528 [label="80_ uint256 c = a + b;\n528-new_variable-81-81", method="add(uint256 a,uint256 b)", type_label=new_variable];
536 [label="81_ require(c >= a);\n536-expression_statement-82-82", method="add(uint256 a,uint256 b)", type_label=expression_statement];
543 [label="82_ return c;\n543-return-83-83", method="add(uint256 a,uint256 b)", type_label=return];
545 [label="84_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n545-function_definition-85-88", method="mod(uint256 a,uint256 b)", type_label=function_definition];
562 [label="85_ require(b != 0);\n562-expression_statement-86-86", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
569 [label="86_ return a % b;\n569-return-87-87", method="mod(uint256 a,uint256 b)", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
294;
397;
17 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
23 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
36 -> 43  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
43 -> 50  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
50 -> 57  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
57 -> 63  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
63 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
74 -> 83  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
83 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
93 -> 661  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
661 -> 101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 661  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
99 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
101 -> 112  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
101 -> 669  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
669 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 669  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
112 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
114 -> 120  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
114 -> 682  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
682 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 682  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
120 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
122 -> 135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
135 -> 142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
142 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
195 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
197 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
205 -> 214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 233  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
214 -> 782  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
782 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
246 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 266  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
252 -> 820  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
820 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
266 -> 272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
272 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
284 -> 820  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
287 -> 782  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
298 -> 305  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
298 -> 390  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
866 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
305 -> 324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
324 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 359  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
350 -> 918  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
918 -> 362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
359 -> 918  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
362 -> 381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
381 -> 866  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
390 -> 866  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
400 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 422  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
417 -> 985  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
985 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
422 -> 985  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
422 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
424 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
432 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
441 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
443 -> 460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
460 -> 467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
475 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
477 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
511 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
536 -> 543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
543 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
545 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
562 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
569 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
