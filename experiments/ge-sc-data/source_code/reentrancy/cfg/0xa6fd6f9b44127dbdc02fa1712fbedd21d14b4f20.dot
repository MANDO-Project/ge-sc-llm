digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ assert(c >= a);\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
45 [label="5_ return c;\n45-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
47 [label="7_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n47-function_definition-8-11", method="div(uint256 a,uint256 b)", type_label=function_definition];
64 [label="8_ uint256 c = a / b;\n64-new_variable-9-9", method="div(uint256 a,uint256 b)", type_label=new_variable];
72 [label="9_ return c;\n72-return-10-10", method="div(uint256 a,uint256 b)", type_label=return];
74 [label="11_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n74-function_definition-12-16", method="mul(uint256 a,uint256 b)", type_label=function_definition];
91 [label="12_ uint256 c = a * b;\n91-new_variable-13-13", method="mul(uint256 a,uint256 b)", type_label=new_variable];
99 [label="13_ assert(a == 0 || c / a == b);\n99-expression_statement-14-14", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
112 [label="14_ return c;\n112-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
114 [label="16_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n114-function_definition-17-20", method="sub(uint256 a,uint256 b)", type_label=function_definition];
131 [label="17_ assert(b <= a);\n131-expression_statement-18-18", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
138 [label="18_ return a - b;\n138-return-19-19", method="sub(uint256 a,uint256 b)", type_label=return];
150 [label="23_ uint public constant _totalSupply = 21000000;\n150-new_variable-24-24", method="", type_label=new_variable];
156 [label="24_ string public constant symbol = \"BCE\";\n156-new_variable-25-25", method="", type_label=new_variable];
163 [label="25_ string public constant name = \"Bitcoin Ether\";\n163-new_variable-26-26", method="", type_label=new_variable];
170 [label="26_ uint8 public constant decimals = 18;\n170-new_variable-27-27", method="", type_label=new_variable];
176 [label="27_ uint256 public constant RATE = 500;\n176-new_variable-28-28", method="", type_label=new_variable];
210 [label="30_ mapping (address => uint256) balances;\n210-new_variable-31-31", method="", type_label=new_variable];
216 [label="31_ mapping (address => mapping (address => uint256)) allowed;\n216-new_variable-32-32", method="", type_label=new_variable];
224 [label="32_ function BCEToken() public {\n        balances[msg.sender] = _totalSupply;\n    }\n224-function_definition-33-35", method="BCEToken()", type_label=function_definition];
228 [label="33_ balances[msg.sender] = _totalSupply;\n228-expression_statement-34-34", method="BCEToken()", type_label=expression_statement];
236 [label="35_ function totalSupply() public pure returns (uint256) {\n        return _totalSupply;\n    }\n236-function_definition-36-38", method="totalSupply()", type_label=function_definition];
245 [label="36_ return _totalSupply;\n245-return-37-37", method="totalSupply()", type_label=return];
247 [label="38_ function balanceOf(address _owner) public constant returns (uint256 balance){\n        return balances[_owner];\n    }\n247-function_definition-39-41", method="balanceOf(address _owner)", type_label=function_definition];
254 [label="38_ constant\n254-expression_statement-39-39", method="balanceOf(address _owner)", type_label=expression_statement];
262 [label="39_ return balances[_owner];\n262-return-40-40", method="balanceOf(address _owner)", type_label=return];
266 [label="41_ function transfer(address _to, uint256 _value) internal returns (bool success) {\n		require(_to != 0x0);\n        require(balances[msg.sender] >= _value && _value > 0);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n266-function_definition-42-49", method="transfer(address _to,uint256 _value)", type_label=function_definition];
283 [label="42_ require(_to != 0x0);\n283-expression_statement-43-43", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
290 [label="43_ require(balances[msg.sender] >= _value && _value > 0);\n290-expression_statement-44-44", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
305 [label="44_ balances[msg.sender] = balances[msg.sender].sub(_value);\n305-expression_statement-45-45", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
322 [label="45_ balances[_to] = balances[_to].add(_value);\n322-expression_statement-46-46", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
335 [label="46_ Transfer(msg.sender, _to, _value);\n335-expression_statement-47-47", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
346 [label="47_ return true;\n346-return-48-48", method="transfer(address _to,uint256 _value)", type_label=return];
349 [label="49_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\n		require(_to != 0x0);\n        require(allowed [_from][msg.sender] >= 0 && balances[_from] >= _value && _value > 0);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n349-function_definition-50-58", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
370 [label="50_ require(_to != 0x0);\n370-expression_statement-51-51", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
377 [label="51_ require(allowed [_from][msg.sender] >= 0 && balances[_from] >= _value && _value > 0);\n377-expression_statement-52-52", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
400 [label="52_ balances[_from] = balances[_from].sub(_value);\n400-expression_statement-53-53", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
413 [label="53_ balances[_to] = balances[_to].add(_value);\n413-expression_statement-54-54", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
426 [label="54_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n426-expression_statement-55-55", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
447 [label="55_ Transfer(_from, _to, _value);\n447-expression_statement-56-56", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
456 [label="56_ return true;\n456-return-57-57", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
459 [label="58_ function approve(address _spender, uint256 _value) public returns (bool success){\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n459-function_definition-59-63", method="approve(address _spender,uint256 _value)", type_label=function_definition];
476 [label="59_ allowed[msg.sender][_spender] = _value;\n476-expression_statement-60-60", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
486 [label="60_ Approval(msg.sender, _spender, _value);\n486-expression_statement-61-61", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
497 [label="61_ return true;\n497-return-62-62", method="approve(address _spender,uint256 _value)", type_label=return];
500 [label="63_ function allowance(address _owner, address _spender) public constant returns (uint256 remaining){\n        return allowed[_owner][_spender];\n    }\n500-function_definition-64-66", method="allowance(address _owner,address _spender)", type_label=function_definition];
511 [label="63_ constant\n511-expression_statement-64-64", method="allowance(address _owner,address _spender)", type_label=expression_statement];
519 [label="64_ return allowed[_owner][_spender];\n519-return-65-65", method="allowance(address _owner,address _spender)", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
47 -> 64  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
64 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
74 -> 91  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
91 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
114 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
138 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
150 -> 156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
156 -> 163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
163 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
210 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
224 -> 228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
245 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
247 -> 262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
266 -> 283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
283 -> 290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
290 -> 305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
305 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
335 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
346 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
349 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
370 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
413 -> 426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
426 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
456 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
459 -> 476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
500 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
