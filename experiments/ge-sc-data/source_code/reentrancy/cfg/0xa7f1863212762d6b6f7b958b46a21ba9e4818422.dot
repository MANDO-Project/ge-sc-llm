digraph  {
13 [label="2_ function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n13-function_definition-3-6", method="add(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a + b;\n31-expression_statement-4-4", method="add(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(c >= a);\n37-expression_statement-5-5", method="add(uint a,uint b)", type_label=expression_statement];
44 [label="6_ function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n44-function_definition-7-10", method="sub(uint a,uint b)", type_label=function_definition];
62 [label="7_ require(b <= a);\n62-expression_statement-8-8", method="sub(uint a,uint b)", type_label=expression_statement];
69 [label="8_ c = a - b;\n69-expression_statement-9-9", method="sub(uint a,uint b)", type_label=expression_statement];
75 [label="10_ function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n75-function_definition-11-14", method="mul(uint a,uint b)", type_label=function_definition];
93 [label="11_ c = a * b;\n93-expression_statement-12-12", method="mul(uint a,uint b)", type_label=expression_statement];
99 [label="12_ require(a == 0 || c / a == b);\n99-expression_statement-13-13", method="mul(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n112-function_definition-15-18", method="div(uint a,uint b)", type_label=function_definition];
130 [label="15_ require(b > 0);\n130-expression_statement-16-16", method="div(uint a,uint b)", type_label=expression_statement];
137 [label="16_ c = a / b;\n137-expression_statement-17-17", method="div(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function totalSupply() public view returns (uint);\n146-function_definition-21-21", method="totalSupply()", type_label=function_definition];
154 [label="21_ function balanceOf(address tokenOwner) public view returns (uint balance);\n154-function_definition-22-22", method="balanceOf(address tokenOwner)", type_label=function_definition];
167 [label="22_ function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n167-function_definition-23-23", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
184 [label="23_ function transfer(address to, uint tokens) public returns (bool success);\n184-function_definition-24-24", method="transfer(address to,uint tokens)", type_label=function_definition];
200 [label="24_ function approve(address spender, uint tokens) public returns (bool success);\n200-function_definition-25-25", method="approve(address spender,uint tokens)", type_label=function_definition];
216 [label="25_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n216-function_definition-26-26", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
267 [label="30_ function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n267-function_definition-31-31", method="receiveApproval(address from,uint256 tokens,address token,bytes memory data)", type_label=function_definition];
289 [label="33_ address public owner;\n289-new_variable-34-34", method="", type_label=new_variable];
294 [label="34_ address public newOwner;\n294-new_variable-35-35", method="", type_label=new_variable];
311 [label="37_ owner = 0x1d9E8E5c8Fe34a9D17e541E34AEB218607453Dad;\n311-expression_statement-38-38", method="", type_label=expression_statement];
315 [label="39_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n315-expression_statement-40-43", method="", type_label=expression_statement];
318 [label="40_ require(msg.sender == owner);\n318-expression_statement-41-41", method="", type_label=expression_statement];
327 [label="41_ _;\n327-expression_statement-42-42", method="", type_label=expression_statement];
329 [label="43_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n329-function_definition-44-46", method="transferOwnership(address _newOwner)", type_label=function_definition];
336 [label="43_ onlyOwner\n336-expression_statement-44-44", method="transferOwnership(address _newOwner)", type_label=expression_statement];
339 [label="44_ newOwner = _newOwner;\n339-expression_statement-45-45", method="transferOwnership(address _newOwner)", type_label=expression_statement];
343 [label="46_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n343-function_definition-47-52", method="acceptOwnership()", type_label=function_definition];
347 [label="47_ require(msg.sender == newOwner);\n347-expression_statement-48-48", method="acceptOwnership()", type_label=expression_statement];
362 [label="49_ owner = newOwner;\n362-expression_statement-50-50", method="acceptOwnership()", type_label=expression_statement];
366 [label="50_ newOwner = address(0);\n366-expression_statement-51-51", method="acceptOwnership()", type_label=expression_statement];
386 [label="55_ string public symbol;\n386-new_variable-56-56", method="", type_label=new_variable];
391 [label="56_ string public  name;\n391-new_variable-57-57", method="", type_label=new_variable];
396 [label="57_ uint8 public decimals;\n396-new_variable-58-58", method="", type_label=new_variable];
401 [label="58_ uint _totalSupply;\n401-new_variable-59-59", method="", type_label=new_variable];
405 [label="59_ mapping(address => uint) balances;\n405-new_variable-60-60", method="", type_label=new_variable];
411 [label="60_ mapping(address => mapping(address => uint)) allowed;\n411-new_variable-61-61", method="", type_label=new_variable];
421 [label="62_ symbol = \"BWT\";\n421-expression_statement-63-63", method="", type_label=expression_statement];
426 [label="63_ name = \"Bitwin Token\";\n426-expression_statement-64-64", method="", type_label=expression_statement];
431 [label="64_ decimals = 18;\n431-expression_statement-65-65", method="", type_label=expression_statement];
435 [label="65_ _totalSupply = 450000000 * 10**uint(decimals);\n435-expression_statement-66-66", method="", type_label=expression_statement];
445 [label="66_ balances[owner] = _totalSupply;\n445-expression_statement-67-67", method="", type_label=expression_statement];
461 [label="69_ function totalSupply() public view returns (uint) {\n        return _totalSupply.sub(balances[address(0)]);\n    }\n461-function_definition-70-72", method="totalSupply()", type_label=function_definition];
470 [label="70_ return _totalSupply.sub(balances[address(0)]);\n470-return-71-71", method="totalSupply()", type_label=return];
481 [label="72_ function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n481-function_definition-73-75", method="balanceOf(address tokenOwner)", type_label=function_definition];
495 [label="73_ return balances[tokenOwner];\n495-return-74-74", method="balanceOf(address tokenOwner)", type_label=return];
499 [label="75_ function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n499-function_definition-76-81", method="transfer(address to,uint tokens)", type_label=function_definition];
516 [label="76_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n516-expression_statement-77-77", method="transfer(address to,uint tokens)", type_label=expression_statement];
533 [label="77_ balances[to] = balances[to].add(tokens);\n533-expression_statement-78-78", method="transfer(address to,uint tokens)", type_label=expression_statement];
556 [label="79_ return true;\n556-return-80-80", method="transfer(address to,uint tokens)", type_label=return];
559 [label="81_ function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n559-function_definition-82-86", method="approve(address spender,uint tokens)", type_label=function_definition];
576 [label="82_ allowed[msg.sender][spender] = tokens;\n576-expression_statement-83-83", method="approve(address spender,uint tokens)", type_label=expression_statement];
596 [label="84_ return true;\n596-return-85-85", method="approve(address spender,uint tokens)", type_label=return];
599 [label="86_ function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n599-function_definition-87-93", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
620 [label="87_ balances[from] = balances[from].sub(tokens);\n620-expression_statement-88-88", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
633 [label="88_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n633-expression_statement-89-89", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
654 [label="89_ balances[to] = balances[to].add(tokens);\n654-expression_statement-90-90", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
675 [label="91_ return true;\n675-return-92-92", method="transferFrom(address from,address to,uint tokens)", type_label=return];
678 [label="93_ function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n678-function_definition-94-96", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
696 [label="94_ return allowed[tokenOwner][spender];\n696-return-95-95", method="allowance(address tokenOwner,address spender)", type_label=return];
702 [label="96_ function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n702-function_definition-97-102", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=function_definition];
723 [label="97_ allowed[msg.sender][spender] = tokens;\n723-expression_statement-98-98", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
743 [label="99_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n743-expression_statement-100-100", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
763 [label="100_ return true;\n763-return-101-101", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=return];
772 [label="105_ function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n772-function_definition-106-108", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=function_definition];
783 [label="105_ onlyOwner\n783-expression_statement-106-106", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=expression_statement];
791 [label="106_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n791-return-107-107", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
362 -> 366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
405 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
426 -> 431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
431 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
470 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
481 -> 495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
499 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
516 -> 533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
556 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
559 -> 576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
599 -> 620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
620 -> 633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
633 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
675 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
678 -> 696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
696 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
702 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
743 -> 763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
772 -> 791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
791 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
