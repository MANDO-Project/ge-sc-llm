digraph  {
13 [label="2_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n13-function_definition-3-7", method="sub(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ require(b <= a, \"SafeMath: subtraction overflow\");\n30-expression_statement-4-4", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
40 [label="4_ uint256 c = a - b;\n40-new_variable-5-5", method="sub(uint256 a,uint256 b)", type_label=new_variable];
48 [label="5_ return c;\n48-return-6-6", method="sub(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n50-function_definition-8-12", method="add(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ uint256 c = a + b;\n67-new_variable-9-9", method="add(uint256 a,uint256 b)", type_label=new_variable];
75 [label="9_ require(c >= a, \"SafeMath: addition overflow\");\n75-expression_statement-10-10", method="add(uint256 a,uint256 b)", type_label=expression_statement];
85 [label="10_ return c;\n85-return-11-11", method="add(uint256 a,uint256 b)", type_label=return];
90 [label="14_ function balanceOf(address _owner) public view returns (uint256 value);\n90-function_definition-15-15", method="balanceOf(address _owner)", type_label=function_definition];
103 [label="15_ mapping(address => uint) redeemableEther_re_ent4;\n103-new_variable-16-16", method="", type_label=new_variable];
109 [label="16_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n109-function_definition-17-22", method="claimReward_re_ent4()", type_label=function_definition];
113 [label="17_ require(redeemableEther_re_ent4[msg.sender] > 0);\n113-expression_statement-18-18", method="claimReward_re_ent4()", type_label=expression_statement];
124 [label="18_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n124-new_variable-19-19", method="claimReward_re_ent4()", type_label=new_variable];
134 [label="19_ msg.sender.transfer(transferValue_re_ent4);\n134-expression_statement-20-20", method="claimReward_re_ent4()", type_label=expression_statement];
143 [label="20_ redeemableEther_re_ent4[msg.sender] = 0;\n143-expression_statement-21-21", method="claimReward_re_ent4()", type_label=expression_statement];
151 [label="22_ function transfer(address _to, uint256 _value) public returns (bool success);\n151-function_definition-23-23", method="transfer(address _to,uint256 _value)", type_label=function_definition];
167 [label="23_ uint256 counter_re_ent7 =0;\n167-new_variable-24-24", method="", type_label=new_variable];
172 [label="24_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n172-function_definition-25-31", method="callme_re_ent7()", type_label=function_definition];
176 [label="25_ require(counter_re_ent7<=5);\n176-expression_statement-26-26", method="callme_re_ent7()", type_label=expression_statement];
183 [label="26_ if\n183-if-27-29", method="callme_re_ent7()", type_label=if];
1586 [label="26_ end_if", method="callme_re_ent7()", type_label=end_if];
198 [label="29_ counter_re_ent7 += 1;\n198-expression_statement-30-30", method="callme_re_ent7()", type_label=expression_statement];
202 [label="31_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n202-function_definition-32-32", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
222 [label="32_ address payable lastPlayer_re_ent23;\n222-new_variable-33-33", method="", type_label=new_variable];
226 [label="33_ uint jackpot_re_ent23;\n226-new_variable-34-34", method="", type_label=new_variable];
230 [label="34_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n230-function_definition-35-40", method="buyTicket_re_ent23()", type_label=function_definition];
234 [label="35_ if\n234-if-36-37", method="buyTicket_re_ent23()", type_label=if];
1637 [label="35_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
245 [label="37_ lastPlayer_re_ent23 = msg.sender;\n245-expression_statement-38-38", method="buyTicket_re_ent23()", type_label=expression_statement];
251 [label="38_ jackpot_re_ent23    = address(this).balance;\n251-expression_statement-39-39", method="buyTicket_re_ent23()", type_label=expression_statement];
259 [label="40_ function approve(address _spender, uint256 _value) public returns (bool success);\n259-function_definition-41-41", method="approve(address _spender,uint256 _value)", type_label=function_definition];
275 [label="41_ uint256 counter_re_ent14 =0;\n275-new_variable-42-42", method="", type_label=new_variable];
280 [label="42_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n280-function_definition-43-49", method="callme_re_ent14()", type_label=function_definition];
284 [label="43_ require(counter_re_ent14<=5);\n284-expression_statement-44-44", method="callme_re_ent14()", type_label=expression_statement];
291 [label="44_ if\n291-if-45-47", method="callme_re_ent14()", type_label=if];
1694 [label="44_ end_if", method="callme_re_ent14()", type_label=end_if];
306 [label="47_ counter_re_ent14 += 1;\n306-expression_statement-48-48", method="callme_re_ent14()", type_label=expression_statement];
310 [label="49_ function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n310-function_definition-50-50", method="allowance(address _owner,address _spender)", type_label=function_definition];
327 [label="50_ address payable lastPlayer_re_ent30;\n327-new_variable-51-51", method="", type_label=new_variable];
331 [label="51_ uint jackpot_re_ent30;\n331-new_variable-52-52", method="", type_label=new_variable];
335 [label="52_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n335-function_definition-53-58", method="buyTicket_re_ent30()", type_label=function_definition];
339 [label="53_ if\n339-if-54-55", method="buyTicket_re_ent30()", type_label=if];
1742 [label="53_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
350 [label="55_ lastPlayer_re_ent30 = msg.sender;\n350-expression_statement-56-56", method="buyTicket_re_ent30()", type_label=expression_statement];
356 [label="56_ jackpot_re_ent30    = address(this).balance;\n356-expression_statement-57-57", method="buyTicket_re_ent30()", type_label=expression_statement];
375 [label="61_ address payable lastPlayer_re_ent9;\n375-new_variable-62-62", method="", type_label=new_variable];
379 [label="62_ uint jackpot_re_ent9;\n379-new_variable-63-63", method="", type_label=new_variable];
383 [label="63_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n383-function_definition-64-70", method="buyTicket_re_ent9()", type_label=function_definition];
387 [label="64_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n387-new_variable-65-65", method="buyTicket_re_ent9()", type_label=new_variable];
405 [label="65_ if\n405-if-66-67", method="buyTicket_re_ent9()", type_label=if];
1808 [label="65_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
410 [label="67_ lastPlayer_re_ent9 = msg.sender;\n410-expression_statement-68-68", method="buyTicket_re_ent9()", type_label=expression_statement];
416 [label="68_ jackpot_re_ent9    = address(this).balance;\n416-expression_statement-69-69", method="buyTicket_re_ent9()", type_label=expression_statement];
424 [label="70_ uint256 public totalSupply;\n424-new_variable-71-71", method="", type_label=new_variable];
429 [label="71_ mapping(address => uint) redeemableEther_re_ent25;\n429-new_variable-72-72", method="", type_label=new_variable];
435 [label="72_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n435-function_definition-73-78", method="claimReward_re_ent25()", type_label=function_definition];
439 [label="73_ require(redeemableEther_re_ent25[msg.sender] > 0);\n439-expression_statement-74-74", method="claimReward_re_ent25()", type_label=expression_statement];
450 [label="74_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n450-new_variable-75-75", method="claimReward_re_ent25()", type_label=new_variable];
460 [label="75_ msg.sender.transfer(transferValue_re_ent25);\n460-expression_statement-76-76", method="claimReward_re_ent25()", type_label=expression_statement];
469 [label="76_ redeemableEther_re_ent25[msg.sender] = 0;\n469-expression_statement-77-77", method="claimReward_re_ent25()", type_label=expression_statement];
477 [label="78_ mapping (address => uint256) balances;\n477-new_variable-79-79", method="", type_label=new_variable];
483 [label="79_ mapping(address => uint) userBalance_re_ent19;\n483-new_variable-80-80", method="", type_label=new_variable];
489 [label="80_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n489-function_definition-81-86", method="withdrawBalance_re_ent19()", type_label=function_definition];
493 [label="81_ if\n493-if-82-84", method="withdrawBalance_re_ent19()", type_label=if];
1896 [label="81_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
511 [label="84_ userBalance_re_ent19[msg.sender] = 0;\n511-expression_statement-85-85", method="withdrawBalance_re_ent19()", type_label=expression_statement];
519 [label="86_ mapping (address => mapping (address => uint256)) allowed;\n519-new_variable-87-87", method="", type_label=new_variable];
527 [label="87_ function balanceOf(address _owner) public view returns (uint256 value) {\n        return balances[_owner];\n    }\n527-function_definition-88-90", method="balanceOf(address _owner)", type_label=function_definition];
541 [label="88_ return balances[_owner];\n541-return-89-89", method="balanceOf(address _owner)", type_label=return];
545 [label="90_ mapping(address => uint) balances_re_ent8;\n545-new_variable-91-91", method="", type_label=new_variable];
551 [label="91_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n551-function_definition-92-96", method="withdraw_balances_re_ent8()", type_label=function_definition];
555 [label="92_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n555-new_variable-93-93", method="withdraw_balances_re_ent8()", type_label=new_variable];
579 [label="93_ if\n579-if-94-95", method="withdraw_balances_re_ent8()", type_label=if];
1982 [label="93_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
581 [label="94_ balances_re_ent8[msg.sender] = 0;\n581-expression_statement-95-95", method="withdraw_balances_re_ent8()", type_label=expression_statement];
589 [label="96_ function transfer(address _to, uint256 _value) public returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n589-function_definition-97-102", method="transfer(address _to,uint256 _value)", type_label=function_definition];
606 [label="97_ balances[msg.sender] = balances[msg.sender].sub(_value);\n606-expression_statement-98-98", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
623 [label="98_ balances[_to] = balances[_to].add(_value);\n623-expression_statement-99-99", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
646 [label="100_ return true;\n646-return-101-101", method="transfer(address _to,uint256 _value)", type_label=return];
649 [label="102_ mapping(address => uint) redeemableEther_re_ent39;\n649-new_variable-103-103", method="", type_label=new_variable];
655 [label="103_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n655-function_definition-104-109", method="claimReward_re_ent39()", type_label=function_definition];
659 [label="104_ require(redeemableEther_re_ent39[msg.sender] > 0);\n659-expression_statement-105-105", method="claimReward_re_ent39()", type_label=expression_statement];
670 [label="105_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n670-new_variable-106-106", method="claimReward_re_ent39()", type_label=new_variable];
680 [label="106_ msg.sender.transfer(transferValue_re_ent39);\n680-expression_statement-107-107", method="claimReward_re_ent39()", type_label=expression_statement];
689 [label="107_ redeemableEther_re_ent39[msg.sender] = 0;\n689-expression_statement-108-108", method="claimReward_re_ent39()", type_label=expression_statement];
697 [label="109_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n697-function_definition-110-116", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
718 [label="110_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n718-expression_statement-111-111", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
739 [label="111_ balances[_from] = balances[_from].sub(_value);\n739-expression_statement-112-112", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
752 [label="112_ balances[_to] = balances[_to].add(_value);\n752-expression_statement-113-113", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
773 [label="114_ return true;\n773-return-115-115", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
776 [label="116_ mapping(address => uint) balances_re_ent36;\n776-new_variable-117-117", method="", type_label=new_variable];
782 [label="117_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n782-function_definition-118-121", method="withdraw_balances_re_ent36()", type_label=function_definition];
786 [label="118_ if\n786-if-119-120", method="withdraw_balances_re_ent36()", type_label=if];
2189 [label="118_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
799 [label="119_ balances_re_ent36[msg.sender] = 0;\n799-expression_statement-120-120", method="withdraw_balances_re_ent36()", type_label=expression_statement];
807 [label="121_ function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n807-function_definition-122-126", method="approve(address _spender,uint256 _value)", type_label=function_definition];
824 [label="122_ allowed[msg.sender][_spender] = _value;\n824-expression_statement-123-123", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
844 [label="124_ return true;\n844-return-125-125", method="approve(address _spender,uint256 _value)", type_label=return];
847 [label="126_ uint256 counter_re_ent35 =0;\n847-new_variable-127-127", method="", type_label=new_variable];
852 [label="127_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n852-function_definition-128-134", method="callme_re_ent35()", type_label=function_definition];
856 [label="128_ require(counter_re_ent35<=5);\n856-expression_statement-129-129", method="callme_re_ent35()", type_label=expression_statement];
863 [label="129_ if\n863-if-130-132", method="callme_re_ent35()", type_label=if];
2266 [label="129_ end_if", method="callme_re_ent35()", type_label=end_if];
878 [label="132_ counter_re_ent35 += 1;\n878-expression_statement-133-133", method="callme_re_ent35()", type_label=expression_statement];
882 [label="134_ function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n882-function_definition-135-137", method="allowance(address _owner,address _spender)", type_label=function_definition];
900 [label="135_ return allowed[_owner][_spender];\n900-return-136-136", method="allowance(address _owner,address _spender)", type_label=return];
906 [label="137_ mapping(address => uint) userBalance_re_ent40;\n906-new_variable-138-138", method="", type_label=new_variable];
912 [label="138_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n912-function_definition-139-145", method="withdrawBalance_re_ent40()", type_label=function_definition];
916 [label="139_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n916-new_variable-140-140", method="withdrawBalance_re_ent40()", type_label=new_variable];
940 [label="140_ if\n940-if-141-143", method="withdrawBalance_re_ent40()", type_label=if];
2343 [label="140_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
946 [label="143_ userBalance_re_ent40[msg.sender] = 0;\n946-expression_statement-144-144", method="withdrawBalance_re_ent40()", type_label=expression_statement];
954 [label="145_ mapping(address => uint) balances_re_ent31;\n954-new_variable-146-146", method="", type_label=new_variable];
960 [label="146_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n960-function_definition-147-151", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
968 [label="147_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n968-expression_statement-148-148", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
979 [label="148_ require(msg.sender.send(_weiToWithdraw));\n979-expression_statement-149-149", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
991 [label="149_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n991-expression_statement-150-150", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1013 [label="152_ bool not_called_re_ent13 = true;\n1013-new_variable-153-153", method="", type_label=new_variable];
1019 [label="153_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n1019-function_definition-154-161", method="bug_re_ent13()", type_label=function_definition];
1023 [label="154_ require(not_called_re_ent13);\n1023-expression_statement-155-155", method="bug_re_ent13()", type_label=expression_statement];
1028 [label="155_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n1028-new_variable-156-156", method="bug_re_ent13()", type_label=new_variable];
1049 [label="156_ if\n1049-if-157-159", method="bug_re_ent13()", type_label=if];
2452 [label="156_ end_if", method="bug_re_ent13()", type_label=end_if];
1055 [label="159_ not_called_re_ent13 = false;\n1055-expression_statement-160-160", method="bug_re_ent13()", type_label=expression_statement];
1080 [label="164_ mapping(address => uint) userBalance_re_ent26;\n1080-new_variable-165-165", method="", type_label=new_variable];
1086 [label="165_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n1086-function_definition-166-172", method="withdrawBalance_re_ent26()", type_label=function_definition];
1090 [label="166_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n1090-new_variable-167-167", method="withdrawBalance_re_ent26()", type_label=new_variable];
1114 [label="167_ if\n1114-if-168-170", method="withdrawBalance_re_ent26()", type_label=if];
2517 [label="167_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
1120 [label="170_ userBalance_re_ent26[msg.sender] = 0;\n1120-expression_statement-171-171", method="withdrawBalance_re_ent26()", type_label=expression_statement];
1128 [label="172_ string public name = 'Electronic Gram';\n1128-new_variable-173-173", method="", type_label=new_variable];
1135 [label="173_ bool not_called_re_ent20 = true;\n1135-new_variable-174-174", method="", type_label=new_variable];
1141 [label="174_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n1141-function_definition-175-181", method="bug_re_ent20()", type_label=function_definition];
1145 [label="175_ require(not_called_re_ent20);\n1145-expression_statement-176-176", method="bug_re_ent20()", type_label=expression_statement];
1150 [label="176_ if\n1150-if-177-179", method="bug_re_ent20()", type_label=if];
2553 [label="176_ end_if", method="bug_re_ent20()", type_label=end_if];
1165 [label="179_ not_called_re_ent20 = false;\n1165-expression_statement-180-180", method="bug_re_ent20()", type_label=expression_statement];
1170 [label="181_ uint8 public decimals = 3;\n1170-new_variable-182-182", method="", type_label=new_variable];
1176 [label="182_ mapping(address => uint) redeemableEther_re_ent32;\n1176-new_variable-183-183", method="", type_label=new_variable];
1182 [label="183_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n1182-function_definition-184-189", method="claimReward_re_ent32()", type_label=function_definition];
1186 [label="184_ require(redeemableEther_re_ent32[msg.sender] > 0);\n1186-expression_statement-185-185", method="claimReward_re_ent32()", type_label=expression_statement];
1197 [label="185_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n1197-new_variable-186-186", method="claimReward_re_ent32()", type_label=new_variable];
1207 [label="186_ msg.sender.transfer(transferValue_re_ent32);\n1207-expression_statement-187-187", method="claimReward_re_ent32()", type_label=expression_statement];
1216 [label="187_ redeemableEther_re_ent32[msg.sender] = 0;\n1216-expression_statement-188-188", method="claimReward_re_ent32()", type_label=expression_statement];
1224 [label="189_ string public symbol = 'eGram';\n1224-new_variable-190-190", method="", type_label=new_variable];
1231 [label="190_ mapping(address => uint) balances_re_ent38;\n1231-new_variable-191-191", method="", type_label=new_variable];
1237 [label="191_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n1237-function_definition-192-196", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
1245 [label="192_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n1245-expression_statement-193-193", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1256 [label="193_ require(msg.sender.send(_weiToWithdraw));\n1256-expression_statement-194-194", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1268 [label="194_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n1268-expression_statement-195-195", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1276 [label="196_ string public version = '2';\n1276-new_variable-197-197", method="", type_label=new_variable];
1285 [label="198_ address initialOwner = 0xac775cD446889ac167da466692449ece5439fc12;\n1285-new_variable-199-199", method="", type_label=new_variable];
1291 [label="199_ totalSupply = 180000000 * (10**uint256(decimals));\n1291-expression_statement-200-200", method="", type_label=expression_statement];
1302 [label="200_ balances[initialOwner] = totalSupply;\n1302-expression_statement-201-201", method="", type_label=expression_statement];
1320 [label="203_ mapping(address => uint) userBalance_re_ent33;\n1320-new_variable-204-204", method="", type_label=new_variable];
1326 [label="204_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n1326-function_definition-205-211", method="withdrawBalance_re_ent33()", type_label=function_definition];
1330 [label="205_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n1330-new_variable-206-206", method="withdrawBalance_re_ent33()", type_label=new_variable];
1354 [label="206_ if\n1354-if-207-209", method="withdrawBalance_re_ent33()", type_label=if];
2757 [label="206_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
1360 [label="209_ userBalance_re_ent33[msg.sender] = 0;\n1360-expression_statement-210-210", method="withdrawBalance_re_ent33()", type_label=expression_statement];
1373 [label="214_ bool not_called_re_ent27 = true;\n1373-new_variable-215-215", method="", type_label=new_variable];
1379 [label="215_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n1379-function_definition-216-222", method="bug_re_ent27()", type_label=function_definition];
1383 [label="216_ require(not_called_re_ent27);\n1383-expression_statement-217-217", method="bug_re_ent27()", type_label=expression_statement];
1388 [label="217_ if\n1388-if-218-220", method="bug_re_ent27()", type_label=if];
2791 [label="217_ end_if", method="bug_re_ent27()", type_label=end_if];
1403 [label="220_ not_called_re_ent27 = false;\n1403-expression_statement-221-221", method="bug_re_ent27()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 40  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
40 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
109 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
124 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
172 -> 176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
176 -> 183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
183 -> 1586  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
222 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
234 -> 1637  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
245 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
284 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
291 -> 1694  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
327 -> 331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
335 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 1742  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
350 -> 356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
375 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
383 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
405 -> 1808  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
410 -> 416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
460 -> 469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 1896  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
527 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
551 -> 555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
555 -> 579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 581  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
579 -> 1982  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1982 -> 589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
581 -> 1982  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
589 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
646 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
655 -> 659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
659 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
697 -> 718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
718 -> 739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
739 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
782 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 799  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
786 -> 2189  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2189 -> 807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 2189  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
807 -> 824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
844 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
852 -> 856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
856 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
863 -> 2266  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
882 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
912 -> 916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
916 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 2343  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
960 -> 968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
968 -> 979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
979 -> 991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 1023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1023 -> 1028  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1028 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 2452  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1086 -> 1090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1090 -> 1114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1114 -> 2517  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1128 -> 1135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1141 -> 1145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1145 -> 1150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1150 -> 2553  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1170 -> 1176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1182 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 1197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1197 -> 1207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1207 -> 1216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1224 -> 1231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 1245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1245 -> 1256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 1268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1285 -> 1291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1291 -> 1302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1326 -> 1330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1330 -> 1354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1354 -> 2757  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1379 -> 1383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1383 -> 1388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1388 -> 2791  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
