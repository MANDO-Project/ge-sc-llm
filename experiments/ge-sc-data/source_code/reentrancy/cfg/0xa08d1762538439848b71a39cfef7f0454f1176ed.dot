digraph  {
13 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n13-function_definition-3-7", method="mul(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a * b;\n30-new_variable-4-4", method="mul(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ assert(a == 0 || c / a == b);\n38-expression_statement-5-5", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
51 [label="5_ return c;\n51-return-6-6", method="mul(uint256 a,uint256 b)", type_label=return];
53 [label="7_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n53-function_definition-8-11", method="div(uint256 a,uint256 b)", type_label=function_definition];
70 [label="8_ uint256 c = a / b;\n70-new_variable-9-9", method="div(uint256 a,uint256 b)", type_label=new_variable];
78 [label="9_ return c;\n78-return-10-10", method="div(uint256 a,uint256 b)", type_label=return];
80 [label="11_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n80-function_definition-12-15", method="sub(uint256 a,uint256 b)", type_label=function_definition];
97 [label="12_ assert(b <= a);\n97-expression_statement-13-13", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
104 [label="13_ return a - b;\n104-return-14-14", method="sub(uint256 a,uint256 b)", type_label=return];
108 [label="15_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n108-function_definition-16-20", method="add(uint256 a,uint256 b)", type_label=function_definition];
125 [label="16_ uint256 c = a + b;\n125-new_variable-17-17", method="add(uint256 a,uint256 b)", type_label=new_variable];
133 [label="17_ assert(c >= a);\n133-expression_statement-18-18", method="add(uint256 a,uint256 b)", type_label=expression_statement];
140 [label="18_ return c;\n140-return-19-19", method="add(uint256 a,uint256 b)", type_label=return];
150 [label="23_ string public name;\n150-new_variable-24-24", method="", type_label=new_variable];
155 [label="24_ string public symbol;\n155-new_variable-25-25", method="", type_label=new_variable];
160 [label="25_ uint8 public decimals = 18;\n160-new_variable-26-26", method="", type_label=new_variable];
166 [label="26_ uint256 public totalSupply;\n166-new_variable-27-27", method="", type_label=new_variable];
171 [label="27_ mapping(address => uint256) public balanceOf;\n171-new_variable-28-28", method="", type_label=new_variable];
178 [label="28_ mapping(address => mapping(address => uint256)) public allowance;\n178-new_variable-29-29", method="", type_label=new_variable];
225 [label="32_ totalSupply = initialSupply * 10 ** uint256(decimals);\n225-expression_statement-33-33", method="", type_label=expression_statement];
235 [label="33_ balanceOf[msg.sender] = totalSupply;\n235-expression_statement-34-34", method="", type_label=expression_statement];
243 [label="34_ name = tokenName;\n243-expression_statement-35-35", method="", type_label=expression_statement];
247 [label="35_ symbol = tokenSymbol;\n247-expression_statement-36-36", method="", type_label=expression_statement];
251 [label="37_ function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n251-function_definition-38-47", method="_transfer(address _from,address _to,uint _value)", type_label=function_definition];
267 [label="38_ require(_to != address(0));\n267-expression_statement-39-39", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
276 [label="39_ require(balanceOf[_from] >= _value);\n276-expression_statement-40-40", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
285 [label="40_ require(balanceOf[_to] + _value > balanceOf[_to]);\n285-expression_statement-41-41", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
298 [label="41_ uint previousBalances = balanceOf[_from] + balanceOf[_to];\n298-new_variable-42-42", method="_transfer(address _from,address _to,uint _value)", type_label=new_variable];
310 [label="42_ balanceOf[_from] -= _value;\n310-expression_statement-43-43", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
316 [label="43_ balanceOf[_to] += _value;\n316-expression_statement-44-44", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
330 [label="45_ assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n330-expression_statement-46-46", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
343 [label="47_ function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n343-function_definition-48-50", method="transfer(address _to,uint256 _value)", type_label=function_definition];
355 [label="48_ _transfer(msg.sender, _to, _value);\n355-expression_statement-49-49", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
366 [label="50_ function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\n        require(_value <= allowance[_from][msg.sender]); \n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n366-function_definition-51-56", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
387 [label="51_ require(_value <= allowance[_from][msg.sender]);\n387-expression_statement-52-52", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
400 [label="52_ allowance[_from][msg.sender] -= _value;\n400-expression_statement-53-53", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
410 [label="53_ _transfer(_from, _to, _value);\n410-expression_statement-54-54", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
419 [label="54_ return true;\n419-return-55-55", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
422 [label="56_ function approve(address _spender, uint256 _value) public\n    returns(bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n422-function_definition-57-61", method="approve(address _spender,uint256 _value)", type_label=function_definition];
439 [label="58_ allowance[msg.sender][_spender] = _value;\n439-expression_statement-59-59", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
449 [label="59_ return true;\n449-return-60-60", method="approve(address _spender,uint256 _value)", type_label=return];
452 [label="61_ function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n    public\n    returns(bool success) {\n        if (approve(_spender, _value)) {\n            _spender.call(abi.encodeWithSelector(bytes4(keccak256(\"receiveApproval(address,uint256,address,bytes)\")),msg.sender, _value, this, _extraData));\n             return true;\n        }\n        else\n            return false;\n    }\n452-function_definition-62-71", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=function_definition];
473 [label="64_ if\n473-if-65-70", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=if];
1098 [label="64_ end_if", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=end_if];
481 [label="65_ _spender.call(abi.encodeWithSelector(bytes4(keccak256(\"receiveApproval(address,uint256,address,bytes)\")),msg.sender, _value, this, _extraData));\n481-expression_statement-66-66", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=expression_statement];
509 [label="66_ return true;\n509-return-67-67", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=return];
512 [label="69_ return false;\n512-return-70-70", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=return];
515 [label="71_ function burn(uint256 _value) public returns(bool success) {\n        require(balanceOf[msg.sender] >= _value); \n        balanceOf[msg.sender] -= _value; \n        totalSupply -= _value; \n        emit Burn(msg.sender, _value);\n        return true;\n    }\n515-function_definition-72-78", method="burn(uint256 _value)", type_label=function_definition];
528 [label="72_ require(balanceOf[msg.sender] >= _value);\n528-expression_statement-73-73", method="burn(uint256 _value)", type_label=expression_statement];
539 [label="73_ balanceOf[msg.sender] -= _value;\n539-expression_statement-74-74", method="burn(uint256 _value)", type_label=expression_statement];
547 [label="74_ totalSupply -= _value;\n547-expression_statement-75-75", method="burn(uint256 _value)", type_label=expression_statement];
559 [label="76_ return true;\n559-return-77-77", method="burn(uint256 _value)", type_label=return];
562 [label="78_ function burnFrom(address _from, uint256 _value) public returns(bool success) {\n        require(balanceOf[_from] >= _value); \n        require(_value <= allowance[_from][msg.sender]); \n        balanceOf[_from] -= _value; \n        allowance[_from][msg.sender] -= _value; \n        totalSupply -= _value; \n        emit Burn(_from, _value);\n        return true;\n    }\n562-function_definition-79-87", method="burnFrom(address _from,uint256 _value)", type_label=function_definition];
579 [label="79_ require(balanceOf[_from] >= _value);\n579-expression_statement-80-80", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
588 [label="80_ require(_value <= allowance[_from][msg.sender]);\n588-expression_statement-81-81", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
601 [label="81_ balanceOf[_from] -= _value;\n601-expression_statement-82-82", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
607 [label="82_ allowance[_from][msg.sender] -= _value;\n607-expression_statement-83-83", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
617 [label="83_ totalSupply -= _value;\n617-expression_statement-84-84", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
627 [label="85_ return true;\n627-return-86-86", method="burnFrom(address _from,uint256 _value)", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
513;
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 51  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
53 -> 70  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
70 -> 78  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
78 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
80 -> 97  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
97 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
108 -> 125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
125 -> 133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
133 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
150 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
166 -> 171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
171 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
235 -> 243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
243 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
267 -> 276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
276 -> 285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
285 -> 298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
422 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
452 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 481  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
473 -> 512  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1098 -> 515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
481 -> 509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 1098  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
509 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
512 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
515 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
562 -> 579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
627 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
513 -> 1098  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
