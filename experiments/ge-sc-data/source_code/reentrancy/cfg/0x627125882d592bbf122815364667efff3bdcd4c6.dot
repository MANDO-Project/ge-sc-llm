digraph  {
12 [label="2_ function totalSupply() external view returns (uint256);\n12-function_definition-3-3", method="totalSupply()", type_label=function_definition];
20 [label="3_ function balanceOf(address who) external view returns (uint256);\n20-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
32 [label="4_ function allowance(address approver, address spender) external view returns (uint256);\n32-function_definition-5-5", method="allowance(address approver,address spender)", type_label=function_definition];
48 [label="5_ function transfer(address to, uint256 value) external returns (bool);\n48-function_definition-6-6", method="transfer(address to,uint256 value)", type_label=function_definition];
63 [label="6_ function approve(address spender, uint256 value) external returns (bool);\n63-function_definition-7-7", method="approve(address spender,uint256 value)", type_label=function_definition];
78 [label="7_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n78-function_definition-8-8", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
128 [label="12_ address public owner;\n128-new_variable-13-13", method="", type_label=new_variable];
135 [label="14_ owner = msg.sender;\n135-expression_statement-15-15", method="", type_label=expression_statement];
141 [label="16_ modifier onlyOwner {\n        require(msg.sender == owner, \"Only the owner can call this function.\");\n        _;\n    }\n141-expression_statement-17-20", method="", type_label=expression_statement];
144 [label="17_ require(msg.sender == owner, \"Only the owner can call this function.\");\n144-expression_statement-18-18", method="", type_label=expression_statement];
156 [label="18_ _;\n156-expression_statement-19-19", method="", type_label=expression_statement];
161 [label="22_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n161-function_definition-23-30", method="mul(uint256 a,uint256 b)", type_label=function_definition];
178 [label="23_ if_a == 0\n178-if-24-26", method="mul(uint256 a,uint256 b)", type_label=if];
1597 [label="23_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
183 [label="24_ return 0;\n183-return-25-25", method="mul(uint256 a,uint256 b)", type_label=return];
185 [label="26_ uint256 c = a * b;\n185-new_variable-27-27", method="mul(uint256 a,uint256 b)", type_label=new_variable];
193 [label="27_ assert(c / a == b);\n193-expression_statement-28-28", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
202 [label="28_ return c;\n202-return-29-29", method="mul(uint256 a,uint256 b)", type_label=return];
204 [label="30_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n204-function_definition-31-33", method="div(uint256 a,uint256 b)", type_label=function_definition];
221 [label="31_ return a / b;\n221-return-32-32", method="div(uint256 a,uint256 b)", type_label=return];
225 [label="33_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n225-function_definition-34-37", method="sub(uint256 a,uint256 b)", type_label=function_definition];
242 [label="34_ assert(b <= a);\n242-expression_statement-35-35", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
249 [label="35_ return a - b;\n249-return-36-36", method="sub(uint256 a,uint256 b)", type_label=return];
253 [label="37_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n253-function_definition-38-42", method="add(uint256 a,uint256 b)", type_label=function_definition];
270 [label="38_ uint256 c = a + b;\n270-new_variable-39-39", method="add(uint256 a,uint256 b)", type_label=new_variable];
278 [label="39_ assert(c >= a);\n278-expression_statement-40-40", method="add(uint256 a,uint256 b)", type_label=expression_statement];
285 [label="40_ return c;\n285-return-41-41", method="add(uint256 a,uint256 b)", type_label=return];
301 [label="45_ modifier onlyKycProvider {\n        require(msg.sender == regulatorApprovedKycProvider, \"Only the KYC Provider can call this function.\");\n        _;\n    }\n301-expression_statement-46-49", method="", type_label=expression_statement];
304 [label="46_ require(msg.sender == regulatorApprovedKycProvider, \"Only the KYC Provider can call this function.\");\n304-expression_statement-47-47", method="", type_label=expression_statement];
316 [label="47_ _;\n316-expression_statement-48-48", method="", type_label=expression_statement];
318 [label="49_ modifier onlyIssuer {\n        require(msg.sender == issuer, \"Only the Issuer can call this function.\");\n        _;\n    }\n318-expression_statement-50-53", method="", type_label=expression_statement];
321 [label="50_ require(msg.sender == issuer, \"Only the Issuer can call this function.\");\n321-expression_statement-51-51", method="", type_label=expression_statement];
333 [label="51_ _;\n333-expression_statement-52-52", method="", type_label=expression_statement];
335 [label="53_ address public regulatorApprovedKycProvider;\n335-new_variable-54-54", method="", type_label=new_variable];
340 [label="54_ address public issuer;\n340-new_variable-55-55", method="", type_label=new_variable];
345 [label="55_ string public name;\n345-new_variable-56-56", method="", type_label=new_variable];
350 [label="56_ string public symbol;\n350-new_variable-57-57", method="", type_label=new_variable];
355 [label="57_ uint8 public decimals = 18;\n355-new_variable-58-58", method="", type_label=new_variable];
361 [label="58_ uint256 public totalSupply_;\n361-new_variable-59-59", method="", type_label=new_variable];
366 [label="59_ uint256 public rewardPool_;\n366-new_variable-60-60", method="", type_label=new_variable];
371 [label="60_ bool public isIcoComplete;\n371-new_variable-61-61", method="", type_label=new_variable];
376 [label="61_ mapping (address => uint256) public balances;\n376-new_variable-62-62", method="", type_label=new_variable];
383 [label="62_ bytes32[] public kycHashes;\n383-new_variable-63-63", method="", type_label=new_variable];
389 [label="63_ address[] public kycValidated;\n389-new_variable-64-64", method="", type_label=new_variable];
395 [label="64_ mapping (address => mapping (address => uint256)) internal allowanceCollection;\n395-new_variable-65-65", method="", type_label=new_variable];
404 [label="65_ mapping (address => address) public referredBy;\n404-new_variable-66-66", method="", type_label=new_variable];
465 [label="71_ name = _name;\n465-expression_statement-72-72", method="", type_label=expression_statement];
469 [label="72_ symbol = _symbol;\n469-expression_statement-73-73", method="", type_label=expression_statement];
473 [label="73_ totalSupply_ = totalSupply * 10 ** uint256(decimals);\n473-expression_statement-74-74", method="", type_label=expression_statement];
483 [label="74_ balances[msg.sender] = totalSupply_;\n483-expression_statement-75-75", method="", type_label=expression_statement];
491 [label="75_ rewardPool_ = _rewardPool * 10 ** uint256(decimals);\n491-expression_statement-76-76", method="", type_label=expression_statement];
501 [label="76_ setKycProvider(msg.sender);\n501-expression_statement-77-77", method="", type_label=expression_statement];
508 [label="77_ setIssuer(msg.sender);\n508-expression_statement-78-78", method="", type_label=expression_statement];
515 [label="79_ function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n515-function_definition-80-82", method="totalSupply()", type_label=function_definition];
524 [label="80_ return totalSupply_;\n524-return-81-81", method="totalSupply()", type_label=return];
526 [label="82_ function rewardPool() public onlyOwner view returns (uint256) {\n        return rewardPool_;\n    }\n526-function_definition-83-85", method="rewardPool()", type_label=function_definition];
529 [label="82_ onlyOwner\n529-expression_statement-83-83", method="rewardPool()", type_label=expression_statement];
537 [label="83_ return rewardPool_;\n537-return-84-84", method="rewardPool()", type_label=return];
539 [label="85_ function balanceOf(address who) public view returns (uint256 balance) {\n        return balances[who];\n    }\n539-function_definition-86-88", method="balanceOf(address who)", type_label=function_definition];
553 [label="86_ return balances[who];\n553-return-87-87", method="balanceOf(address who)", type_label=return];
557 [label="88_ function allowance(address _approver, address _spender) public view returns (uint256) {\n        return allowanceCollection[_approver][_spender];\n    }\n557-function_definition-89-91", method="allowance(address _approver,address _spender)", type_label=function_definition];
574 [label="89_ return allowanceCollection[_approver][_spender];\n574-return-90-90", method="allowance(address _approver,address _spender)", type_label=return];
580 [label="91_ function refer(address referrer, address referee) public onlyOwner {\n        require(referrer != address(0x0), \"Referrer cannot be null\");\n        require(referee != address(0x0), \"Referee cannot be null\");\n        require(!isIcoComplete, \"Cannot add new referrals after ICO is complete.\");\n        referredBy[referee] = referrer;\n    }\n580-function_definition-92-97", method="refer(address referrer,address referee)", type_label=function_definition];
591 [label="91_ onlyOwner\n591-expression_statement-92-92", method="refer(address referrer,address referee)", type_label=expression_statement];
594 [label="92_ require(referrer != address(0x0), \"Referrer cannot be null\");\n594-expression_statement-93-93", method="refer(address referrer,address referee)", type_label=expression_statement];
606 [label="93_ require(referee != address(0x0), \"Referee cannot be null\");\n606-expression_statement-94-94", method="refer(address referrer,address referee)", type_label=expression_statement];
618 [label="94_ require(!isIcoComplete, \"Cannot add new referrals after ICO is complete.\");\n618-expression_statement-95-95", method="refer(address referrer,address referee)", type_label=expression_statement];
627 [label="95_ referredBy[referee] = referrer;\n627-expression_statement-96-96", method="refer(address referrer,address referee)", type_label=expression_statement];
633 [label="97_ function transfer(address to, uint256 value) public returns (bool) {\n        return _transfer(msg.sender, to, value);\n    }\n633-function_definition-98-100", method="transfer(address to,uint256 value)", type_label=function_definition];
649 [label="98_ return _transfer(msg.sender, to, value);\n649-return-99-99", method="transfer(address to,uint256 value)", type_label=return];
660 [label="100_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(value <= allowanceCollection[from][msg.sender], \"Amount to transfer is greater than allowance.\");\n        allowanceCollection[from][msg.sender] = allowanceCollection[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        return true;\n    }\n660-function_definition-101-106", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
680 [label="101_ require(value <= allowanceCollection[from][msg.sender], \"Amount to transfer is greater than allowance.\");\n680-expression_statement-102-102", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
696 [label="102_ allowanceCollection[from][msg.sender] = allowanceCollection[from][msg.sender].sub(value);\n696-expression_statement-103-103", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
717 [label="103_ _transfer(from, to, value);\n717-expression_statement-104-104", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
726 [label="104_ return true;\n726-return-105-105", method="transferFrom(address from,address to,uint256 value)", type_label=return];
729 [label="106_ function approve(address _spender, uint256 _value) public returns (bool) {\n        if(allowanceCollection[msg.sender][_spender] > 0 && _value != 0) {\n            revert(\"You cannot set a non-zero allowance to another non-zero, you must zero it first.\");\n        }\n        allowanceCollection[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n729-function_definition-107-114", method="approve(address _spender,uint256 _value)", type_label=function_definition];
745 [label="107_ if_allowanceCollection[msg.sender][_spender] > 0 && _value != 0\n745-if-108-110", method="approve(address _spender,uint256 _value)", type_label=if];
2164 [label="107_ end_if", method="approve(address _spender,uint256 _value)", type_label=end_if];
764 [label="110_ allowanceCollection[msg.sender][_spender] = _value;\n764-expression_statement-111-111", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
784 [label="112_ return true;\n784-return-113-113", method="approve(address _spender,uint256 _value)", type_label=return];
787 [label="114_ function safeApprove(address spender, uint256 value, uint256 oldValue) public returns (bool) {\n        require(spender != address(0x0), \"Cannot approve null address.\");\n        require(oldValue == allowanceCollection[msg.sender][spender], \"The expected old value did not match current allowance.\");\n        allowanceCollection[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n787-function_definition-115-121", method="safeApprove(address spender,uint256 value,uint256 oldValue)", type_label=function_definition];
807 [label="115_ require(spender != address(0x0), \"Cannot approve null address.\");\n807-expression_statement-116-116", method="safeApprove(address spender,uint256 value,uint256 oldValue)", type_label=expression_statement];
819 [label="116_ require(oldValue == allowanceCollection[msg.sender][spender], \"The expected old value did not match current allowance.\");\n819-expression_statement-117-117", method="safeApprove(address spender,uint256 value,uint256 oldValue)", type_label=expression_statement];
835 [label="117_ allowanceCollection[msg.sender][spender] = value;\n835-expression_statement-118-118", method="safeApprove(address spender,uint256 value,uint256 oldValue)", type_label=expression_statement];
855 [label="119_ return true;\n855-return-120-120", method="safeApprove(address spender,uint256 value,uint256 oldValue)", type_label=return];
858 [label="121_ function setKycHash(bytes32 sha) public onlyOwner {\n        require(!isIcoComplete, \"The ICO phase has ended, you can no longer set KYC hashes.\");\n        kycHashes.push(sha);\n    }\n858-function_definition-122-125", method="setKycHash(bytes32 sha)", type_label=function_definition];
865 [label="121_ onlyOwner\n865-expression_statement-122-122", method="setKycHash(bytes32 sha)", type_label=expression_statement];
868 [label="122_ require(!isIcoComplete, \"The ICO phase has ended, you can no longer set KYC hashes.\");\n868-expression_statement-123-123", method="setKycHash(bytes32 sha)", type_label=expression_statement];
877 [label="123_ kycHashes.push(sha);\n877-expression_statement-124-124", method="setKycHash(bytes32 sha)", type_label=expression_statement];
884 [label="125_ function kycApproved(address who) public onlyKycProvider {\n        require(!isIcoComplete, \"The ICO phase has ended, you can no longer approve.\");\n        require(who != address(0x0), \"Cannot approve a null address.\");\n        kycValidated.push(who);\n    }\n884-function_definition-126-130", method="kycApproved(address who)", type_label=function_definition];
891 [label="125_ onlyKycProvider\n891-expression_statement-126-126", method="kycApproved(address who)", type_label=expression_statement];
894 [label="126_ require(!isIcoComplete, \"The ICO phase has ended, you can no longer approve.\");\n894-expression_statement-127-127", method="kycApproved(address who)", type_label=expression_statement];
903 [label="127_ require(who != address(0x0), \"Cannot approve a null address.\");\n903-expression_statement-128-128", method="kycApproved(address who)", type_label=expression_statement];
915 [label="128_ kycValidated.push(who);\n915-expression_statement-129-129", method="kycApproved(address who)", type_label=expression_statement];
922 [label="130_ function setKycProvider(address who) public onlyOwner {\n        regulatorApprovedKycProvider = who;\n    }\n922-function_definition-131-133", method="setKycProvider(address who)", type_label=function_definition];
929 [label="130_ onlyOwner\n929-expression_statement-131-131", method="setKycProvider(address who)", type_label=expression_statement];
932 [label="131_ regulatorApprovedKycProvider = who;\n932-expression_statement-132-132", method="setKycProvider(address who)", type_label=expression_statement];
936 [label="133_ function setIssuer(address who) public onlyOwner {\n        issuer = who;\n    }\n936-function_definition-134-136", method="setIssuer(address who)", type_label=function_definition];
943 [label="133_ onlyOwner\n943-expression_statement-134-134", method="setIssuer(address who)", type_label=expression_statement];
946 [label="134_ issuer = who;\n946-expression_statement-135-135", method="setIssuer(address who)", type_label=expression_statement];
950 [label="136_ function getKycHash(uint256 index) public view returns (bytes32) {\n        return kycHashes[index];\n    }\n950-function_definition-137-139", method="getKycHash(uint256 index)", type_label=function_definition];
963 [label="137_ return kycHashes[index];\n963-return-138-138", method="getKycHash(uint256 index)", type_label=return];
967 [label="139_ function getKycApproved(uint256 index) public view returns (address) {\n        return kycValidated[index];\n    }\n967-function_definition-140-142", method="getKycApproved(uint256 index)", type_label=function_definition];
980 [label="140_ return kycValidated[index];\n980-return-141-141", method="getKycApproved(uint256 index)", type_label=return];
984 [label="142_ function awardReferralBonus(address referee, address referrer, uint256 value) private {\n        uint256 bonus = value / 100;\n        balances[owner] = balances[owner].sub(bonus);\n        balances[referrer] = balances[referrer].add(bonus);\n        rewardPool_ -= bonus;\n        emit ReferralRedeemed(referee, referrer, bonus);\n    }\n984-function_definition-143-149", method="awardReferralBonus(address referee,address referrer,uint256 value)", type_label=function_definition];
1000 [label="143_ uint256 bonus = value / 100;\n1000-new_variable-144-144", method="awardReferralBonus(address referee,address referrer,uint256 value)", type_label=new_variable];
1008 [label="144_ balances[owner] = balances[owner].sub(bonus);\n1008-expression_statement-145-145", method="awardReferralBonus(address referee,address referrer,uint256 value)", type_label=expression_statement];
1021 [label="145_ balances[referrer] = balances[referrer].add(bonus);\n1021-expression_statement-146-146", method="awardReferralBonus(address referee,address referrer,uint256 value)", type_label=expression_statement];
1034 [label="146_ rewardPool_ -= bonus;\n1034-expression_statement-147-147", method="awardReferralBonus(address referee,address referrer,uint256 value)", type_label=expression_statement];
1046 [label="149_ function icoTransfer(address to, uint256 value) public onlyOwner {\n        require(!isIcoComplete, \"ICO is complete, use transfer().\");\n        uint256 toTransfer = (value > (balances[msg.sender] - rewardPool_ )) ? (balances[msg.sender] - rewardPool_) : value;\n        _transfer(msg.sender, to, toTransfer);\n        address referrer = referredBy[to];\n        if(referrer != address(0x0)) {\n            referredBy[to] = address(0x0);\n            awardReferralBonus(to, referrer, toTransfer);\n        }\n    }\n1046-function_definition-150-159", method="icoTransfer(address to,uint256 value)", type_label=function_definition];
1057 [label="149_ onlyOwner\n1057-expression_statement-150-150", method="icoTransfer(address to,uint256 value)", type_label=expression_statement];
1060 [label="150_ require(!isIcoComplete, \"ICO is complete, use transfer().\");\n1060-expression_statement-151-151", method="icoTransfer(address to,uint256 value)", type_label=expression_statement];
1069 [label="151_ uint256 toTransfer = (value > (balances[msg.sender] - rewardPool_ )) ? (balances[msg.sender] - rewardPool_) : value;\n1069-new_variable-152-152", method="icoTransfer(address to,uint256 value)", type_label=new_variable];
1095 [label="152_ _transfer(msg.sender, to, toTransfer);\n1095-expression_statement-153-153", method="icoTransfer(address to,uint256 value)", type_label=expression_statement];
1106 [label="153_ address referrer = referredBy[to];\n1106-new_variable-154-154", method="icoTransfer(address to,uint256 value)", type_label=new_variable];
1114 [label="154_ if_referrer != address(0x0)\n1114-if-155-158", method="icoTransfer(address to,uint256 value)", type_label=if];
2533 [label="154_ end_if", method="icoTransfer(address to,uint256 value)", type_label=end_if];
1121 [label="155_ referredBy[to] = address(0x0);\n1121-expression_statement-156-156", method="icoTransfer(address to,uint256 value)", type_label=expression_statement];
1129 [label="156_ awardReferralBonus(to, referrer, toTransfer);\n1129-expression_statement-157-157", method="icoTransfer(address to,uint256 value)", type_label=expression_statement];
1138 [label="159_ function closeIco() public onlyOwner {\n        require(!isIcoComplete, \"The ICO phase has already ended, you cannot close it again.\");\n        require((balances[owner] - rewardPool_) == 0, \"Cannot close ICO when a balance remains in the owner account.\");\n        isIcoComplete = true;\n        delete kycHashes;\n        delete kycValidated;\n        emit IcoComplete();\n    }\n1138-function_definition-160-167", method="closeIco()", type_label=function_definition];
1141 [label="159_ onlyOwner\n1141-expression_statement-160-160", method="closeIco()", type_label=expression_statement];
1144 [label="160_ require(!isIcoComplete, \"The ICO phase has already ended, you cannot close it again.\");\n1144-expression_statement-161-161", method="closeIco()", type_label=expression_statement];
1153 [label="161_ require((balances[owner] - rewardPool_) == 0, \"Cannot close ICO when a balance remains in the owner account.\");\n1153-expression_statement-162-162", method="closeIco()", type_label=expression_statement];
1168 [label="162_ isIcoComplete = true;\n1168-expression_statement-163-163", method="closeIco()", type_label=expression_statement];
1173 [label="163_ delete kycHashes;\n1173-expression_statement-164-164", method="closeIco()", type_label=expression_statement];
1176 [label="164_ delete kycValidated;\n1176-expression_statement-165-165", method="closeIco()", type_label=expression_statement];
1181 [label="167_ function _transfer(address from, address to, uint256 value) internal returns (bool) {\n        require(from != address(0x0), \"Cannot send tokens from null address\");\n        require(to != address(0x0), \"Cannot transfer tokens to null\");\n        require(balances[from] >= value, \"Insufficient funds\");\n        if(value == 0)\n            return true;\n        balances[from] = balances[from].sub(value);\n        balances[to] = balances[to].add(value);\n        if (to == owner) {\n            _burn(to, value);\n        }\n        return true;\n    }\n1181-function_definition-168-180", method="_transfer(address from,address to,uint256 value)", type_label=function_definition];
1201 [label="168_ require(from != address(0x0), \"Cannot send tokens from null address\");\n1201-expression_statement-169-169", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1213 [label="169_ require(to != address(0x0), \"Cannot transfer tokens to null\");\n1213-expression_statement-170-170", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1225 [label="170_ require(balances[from] >= value, \"Insufficient funds\");\n1225-expression_statement-171-171", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1237 [label="171_ if_value == 0\n1237-if-172-173", method="_transfer(address from,address to,uint256 value)", type_label=if];
2656 [label="171_ end_if", method="_transfer(address from,address to,uint256 value)", type_label=end_if];
1241 [label="172_ return true;\n1241-return-173-173", method="_transfer(address from,address to,uint256 value)", type_label=return];
1244 [label="173_ balances[from] = balances[from].sub(value);\n1244-expression_statement-174-174", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1257 [label="174_ balances[to] = balances[to].add(value);\n1257-expression_statement-175-175", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1270 [label="175_ if_to == owner\n1270-if-176-178", method="_transfer(address from,address to,uint256 value)", type_label=if];
2689 [label="175_ end_if", method="_transfer(address from,address to,uint256 value)", type_label=end_if];
1275 [label="176_ _burn(to, value);\n1275-expression_statement-177-177", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1282 [label="178_ return true;\n1282-return-179-179", method="_transfer(address from,address to,uint256 value)", type_label=return];
1285 [label="180_ function mint(uint256 value) public onlyIssuer {\n        require(value > 0, \"Tokens to mint must be greater than zero\");\n        balances[owner] = balances[owner].add(value);\n        totalSupply_ = totalSupply_.add(value);\n        emit Mint(msg.sender, value);\n    }\n1285-function_definition-181-186", method="mint(uint256 value)", type_label=function_definition];
1292 [label="180_ onlyIssuer\n1292-expression_statement-181-181", method="mint(uint256 value)", type_label=expression_statement];
1295 [label="181_ require(value > 0, \"Tokens to mint must be greater than zero\");\n1295-expression_statement-182-182", method="mint(uint256 value)", type_label=expression_statement];
1305 [label="182_ balances[owner] = balances[owner].add(value);\n1305-expression_statement-183-183", method="mint(uint256 value)", type_label=expression_statement];
1318 [label="183_ totalSupply_ = totalSupply_.add(value);\n1318-expression_statement-184-184", method="mint(uint256 value)", type_label=expression_statement];
1335 [label="186_ function burn(uint256 value) public onlyIssuer {\n        _burn(owner, value);\n    }\n1335-function_definition-187-189", method="burn(uint256 value)", type_label=function_definition];
1342 [label="186_ onlyIssuer\n1342-expression_statement-187-187", method="burn(uint256 value)", type_label=expression_statement];
1345 [label="187_ _burn(owner, value);\n1345-expression_statement-188-188", method="burn(uint256 value)", type_label=expression_statement];
1352 [label="189_ function _burn(address addressToBurn, uint256 value) private returns (bool success) {\n        require(value > 0, \"Tokens to burn must be greater than zero\");\n        require(balances[addressToBurn] >= value, \"Tokens to burn exceeds balance\");\n        balances[addressToBurn] = balances[addressToBurn].sub(value);\n        totalSupply_ = totalSupply_.sub(value);\n        emit Burn(msg.sender, value);\n        return true;\n    }\n1352-function_definition-190-197", method="_burn(address addressToBurn,uint256 value)", type_label=function_definition];
1369 [label="190_ require(value > 0, \"Tokens to burn must be greater than zero\");\n1369-expression_statement-191-191", method="_burn(address addressToBurn,uint256 value)", type_label=expression_statement];
1379 [label="191_ require(balances[addressToBurn] >= value, \"Tokens to burn exceeds balance\");\n1379-expression_statement-192-192", method="_burn(address addressToBurn,uint256 value)", type_label=expression_statement];
1391 [label="192_ balances[addressToBurn] = balances[addressToBurn].sub(value);\n1391-expression_statement-193-193", method="_burn(address addressToBurn,uint256 value)", type_label=expression_statement];
1404 [label="193_ totalSupply_ = totalSupply_.sub(value);\n1404-expression_statement-194-194", method="_burn(address addressToBurn,uint256 value)", type_label=expression_statement];
1421 [label="195_ return true;\n1421-return-196-196", method="_burn(address addressToBurn,uint256 value)", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
144 -> 156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 183  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
178 -> 1597  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1597 -> 185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
183 -> 1597  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
183 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
185 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
202 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
204 -> 221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
221 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
225 -> 242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
253 -> 270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
270 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
285 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
301 -> 318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
335 -> 340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
340 -> 345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
376 -> 383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
383 -> 389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
389 -> 395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
465 -> 469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
491 -> 501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
526 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
539 -> 553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
553 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
557 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
574 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
580 -> 594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
594 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
618 -> 627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
633 -> 649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
649 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
660 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
696 -> 717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
717 -> 726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
726 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
729 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
745 -> 2164  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
784 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
787 -> 807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
819 -> 835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
858 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
884 -> 894  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
894 -> 903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
903 -> 915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
936 -> 946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
950 -> 963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
963 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
967 -> 980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
980 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
984 -> 1000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1008 -> 1021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 1034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1046 -> 1060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1060 -> 1069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1069 -> 1095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1095 -> 1106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 1114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1114 -> 1121  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1114 -> 2533  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2533 -> 1138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1121 -> 1129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 2533  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1138 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 1153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1153 -> 1168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1168 -> 1173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1173 -> 1176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1181 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1201 -> 1213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1213 -> 1225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1225 -> 1237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 1241  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1237 -> 2656  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2656 -> 1244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1241 -> 2656  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1241 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1244 -> 1257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1257 -> 1270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1270 -> 1275  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1270 -> 2689  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2689 -> 1282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1275 -> 2689  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1282 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1285 -> 1295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1295 -> 1305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1305 -> 1318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1335 -> 1345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1352 -> 1369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1369 -> 1379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1379 -> 1391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1391 -> 1404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1421 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
