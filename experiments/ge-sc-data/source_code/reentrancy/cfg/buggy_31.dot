digraph  {
13 [label="2_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n13-function_definition-3-3", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
35 [label="5_ function signer() external view returns (address _signer);\n35-function_definition-6-6", method="signer()", type_label=function_definition];
47 [label="8_ function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        if (signature.length != 65) {\n            return (address(0));\n        }\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return address(0);\n        }\n        if (v != 27 && v != 28) {\n            return address(0);\n        }\n        return ecrecover(hash, v, r, s);\n    }\n47-function_definition-9-28", method="recover(bytes32 hash,bytes memory signature)", type_label=function_definition];
64 [label="9_ if_signature.length != 65\n64-if-10-12", method="recover(bytes32 hash,bytes memory signature)", type_label=if];
1197 [label="9_ end_if", method="recover(bytes32 hash,bytes memory signature)", type_label=end_if];
71 [label="10_ return (address(0));\n71-return-11-11", method="recover(bytes32 hash,bytes memory signature)", type_label=return];
76 [label="12_ bytes32 r;\n76-new_variable-13-13", method="recover(bytes32 hash,bytes memory signature)", type_label=new_variable];
81 [label="13_ bytes32 s;\n81-new_variable-14-14", method="recover(bytes32 hash,bytes memory signature)", type_label=new_variable];
86 [label="14_ uint8 v;\n86-new_variable-15-15", method="recover(bytes32 hash,bytes memory signature)", type_label=new_variable];
131 [label="20_ if_uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\n131-if-21-23", method="recover(bytes32 hash,bytes memory signature)", type_label=if];
1264 [label="20_ end_if", method="recover(bytes32 hash,bytes memory signature)", type_label=end_if];
138 [label="21_ return address(0);\n138-return-22-22", method="recover(bytes32 hash,bytes memory signature)", type_label=return];
142 [label="23_ if_v != 27 && v != 28\n142-if-24-26", method="recover(bytes32 hash,bytes memory signature)", type_label=if];
1275 [label="23_ end_if", method="recover(bytes32 hash,bytes memory signature)", type_label=end_if];
151 [label="24_ return address(0);\n151-return-25-25", method="recover(bytes32 hash,bytes memory signature)", type_label=return];
155 [label="26_ return ecrecover(hash, v, r, s);\n155-return-27-27", method="recover(bytes32 hash,bytes memory signature)", type_label=return];
169 [label="30_ mapping(address => uint) balances_re_ent38;\n169-new_variable-31-31", method="", type_label=new_variable];
175 [label="31_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n175-function_definition-32-36", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
183 [label="32_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n183-expression_statement-33-33", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
194 [label="33_ require(msg.sender.send(_weiToWithdraw));\n194-expression_statement-34-34", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
206 [label="34_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n206-expression_statement-35-35", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
214 [label="36_ address private _owner;\n214-new_variable-37-37", method="", type_label=new_variable];
219 [label="37_ mapping(address => uint) balances_re_ent31;\n219-new_variable-38-38", method="", type_label=new_variable];
225 [label="38_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n225-function_definition-39-43", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
233 [label="39_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n233-expression_statement-40-40", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
244 [label="40_ require(msg.sender.send(_weiToWithdraw));\n244-expression_statement-41-41", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
256 [label="41_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n256-expression_statement-42-42", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
276 [label="45_ _owner = msg.sender;\n276-expression_statement-46-46", method="", type_label=expression_statement];
290 [label="48_ uint256 counter_re_ent14 =0;\n290-new_variable-49-49", method="", type_label=new_variable];
295 [label="49_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n295-function_definition-50-56", method="callme_re_ent14()", type_label=function_definition];
299 [label="50_ require(counter_re_ent14<=5);\n299-expression_statement-51-51", method="callme_re_ent14()", type_label=expression_statement];
306 [label="51_ if\n306-if-52-54", method="callme_re_ent14()", type_label=if];
1439 [label="51_ end_if", method="callme_re_ent14()", type_label=end_if];
321 [label="54_ counter_re_ent14 += 1;\n321-expression_statement-55-55", method="callme_re_ent14()", type_label=expression_statement];
325 [label="56_ function owner() public view returns (address) {\n        return _owner;\n    }\n325-function_definition-57-59", method="owner()", type_label=function_definition];
334 [label="57_ return _owner;\n334-return-58-58", method="owner()", type_label=return];
336 [label="59_ address payable lastPlayer_re_ent30;\n336-new_variable-60-60", method="", type_label=new_variable];
340 [label="60_ uint jackpot_re_ent30;\n340-new_variable-61-61", method="", type_label=new_variable];
344 [label="61_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n344-function_definition-62-67", method="buyTicket_re_ent30()", type_label=function_definition];
348 [label="62_ if\n348-if-63-64", method="buyTicket_re_ent30()", type_label=if];
1481 [label="62_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
359 [label="64_ lastPlayer_re_ent30 = msg.sender;\n359-expression_statement-65-65", method="buyTicket_re_ent30()", type_label=expression_statement];
365 [label="65_ jackpot_re_ent30    = address(this).balance;\n365-expression_statement-66-66", method="buyTicket_re_ent30()", type_label=expression_statement];
373 [label="67_ modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n373-expression_statement-68-71", method="", type_label=expression_statement];
376 [label="68_ require(isOwner(), \"Ownable: caller is not the owner\");\n376-expression_statement-69-69", method="", type_label=expression_statement];
385 [label="69_ _;\n385-expression_statement-70-70", method="", type_label=expression_statement];
387 [label="71_ function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n387-function_definition-72-74", method="isOwner()", type_label=function_definition];
396 [label="72_ return msg.sender == _owner;\n396-return-73-73", method="isOwner()", type_label=return];
402 [label="74_ mapping(address => uint) balances_re_ent8;\n402-new_variable-75-75", method="", type_label=new_variable];
408 [label="75_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n408-function_definition-76-80", method="withdraw_balances_re_ent8()", type_label=function_definition];
412 [label="76_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n412-new_variable-77-77", method="withdraw_balances_re_ent8()", type_label=new_variable];
436 [label="77_ if\n436-if-78-79", method="withdraw_balances_re_ent8()", type_label=if];
1569 [label="77_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
438 [label="78_ balances_re_ent8[msg.sender] = 0;\n438-expression_statement-79-79", method="withdraw_balances_re_ent8()", type_label=expression_statement];
446 [label="80_ function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n446-function_definition-81-83", method="transferOwnership(address newOwner)", type_label=function_definition];
453 [label="80_ onlyOwner\n453-expression_statement-81-81", method="transferOwnership(address newOwner)", type_label=expression_statement];
456 [label="81_ _transferOwnership(newOwner);\n456-expression_statement-82-82", method="transferOwnership(address newOwner)", type_label=expression_statement];
461 [label="83_ mapping(address => uint) redeemableEther_re_ent39;\n461-new_variable-84-84", method="", type_label=new_variable];
467 [label="84_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n467-function_definition-85-90", method="claimReward_re_ent39()", type_label=function_definition];
471 [label="85_ require(redeemableEther_re_ent39[msg.sender] > 0);\n471-expression_statement-86-86", method="claimReward_re_ent39()", type_label=expression_statement];
482 [label="86_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n482-new_variable-87-87", method="claimReward_re_ent39()", type_label=new_variable];
492 [label="87_ msg.sender.transfer(transferValue_re_ent39);\n492-expression_statement-88-88", method="claimReward_re_ent39()", type_label=expression_statement];
501 [label="88_ redeemableEther_re_ent39[msg.sender] = 0;\n501-expression_statement-89-89", method="claimReward_re_ent39()", type_label=expression_statement];
509 [label="90_ function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n509-function_definition-91-95", method="_transferOwnership(address newOwner)", type_label=function_definition];
517 [label="91_ require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n517-expression_statement-92-92", method="_transferOwnership(address newOwner)", type_label=expression_statement];
535 [label="93_ _owner = newOwner;\n535-expression_statement-94-94", method="_transferOwnership(address newOwner)", type_label=expression_statement];
539 [label="95_ mapping(address => uint) balances_re_ent36;\n539-new_variable-96-96", method="", type_label=new_variable];
545 [label="96_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n545-function_definition-97-100", method="withdraw_balances_re_ent36()", type_label=function_definition];
549 [label="97_ if\n549-if-98-99", method="withdraw_balances_re_ent36()", type_label=if];
1682 [label="97_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
562 [label="98_ balances_re_ent36[msg.sender] = 0;\n562-expression_statement-99-99", method="withdraw_balances_re_ent36()", type_label=expression_statement];
573 [label="102_ mapping(address => uint) redeemableEther_re_ent4;\n573-new_variable-103-103", method="", type_label=new_variable];
579 [label="103_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n579-function_definition-104-109", method="claimReward_re_ent4()", type_label=function_definition];
583 [label="104_ require(redeemableEther_re_ent4[msg.sender] > 0);\n583-expression_statement-105-105", method="claimReward_re_ent4()", type_label=expression_statement];
594 [label="105_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n594-new_variable-106-106", method="claimReward_re_ent4()", type_label=new_variable];
604 [label="106_ msg.sender.transfer(transferValue_re_ent4);\n604-expression_statement-107-107", method="claimReward_re_ent4()", type_label=expression_statement];
613 [label="107_ redeemableEther_re_ent4[msg.sender] = 0;\n613-expression_statement-108-108", method="claimReward_re_ent4()", type_label=expression_statement];
621 [label="109_ uint256 private _guardCounter;\n621-new_variable-110-110", method="", type_label=new_variable];
628 [label="111_ _guardCounter = 1;\n628-expression_statement-112-112", method="", type_label=expression_statement];
632 [label="113_ uint256 counter_re_ent35 =0;\n632-new_variable-114-114", method="", type_label=new_variable];
637 [label="114_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n637-function_definition-115-121", method="callme_re_ent35()", type_label=function_definition];
641 [label="115_ require(counter_re_ent35<=5);\n641-expression_statement-116-116", method="callme_re_ent35()", type_label=expression_statement];
648 [label="116_ if\n648-if-117-119", method="callme_re_ent35()", type_label=if];
1781 [label="116_ end_if", method="callme_re_ent35()", type_label=end_if];
663 [label="119_ counter_re_ent35 += 1;\n663-expression_statement-120-120", method="callme_re_ent35()", type_label=expression_statement];
667 [label="121_ modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n    }\n667-expression_statement-122-127", method="", type_label=expression_statement];
670 [label="122_ _guardCounter += 1;\n670-expression_statement-123-123", method="", type_label=expression_statement];
674 [label="123_ uint256 localCounter = _guardCounter;\n674-new_variable-124-124", method="", type_label=new_variable];
680 [label="124_ _;\n680-expression_statement-125-125", method="", type_label=expression_statement];
682 [label="125_ require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n682-expression_statement-126-126", method="", type_label=expression_statement];
701 [label="129_ uint256 counter_re_ent7 =0;\n701-new_variable-130-130", method="", type_label=new_variable];
706 [label="130_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n706-function_definition-131-137", method="callme_re_ent7()", type_label=function_definition];
710 [label="131_ require(counter_re_ent7<=5);\n710-expression_statement-132-132", method="callme_re_ent7()", type_label=expression_statement];
717 [label="132_ if\n717-if-133-135", method="callme_re_ent7()", type_label=if];
1850 [label="132_ end_if", method="callme_re_ent7()", type_label=end_if];
732 [label="135_ counter_re_ent7 += 1;\n732-expression_statement-136-136", method="callme_re_ent7()", type_label=expression_statement];
736 [label="137_ IERC20 public token;\n736-new_variable-138-138", method="", type_label=new_variable];
742 [label="138_ address payable lastPlayer_re_ent23;\n742-new_variable-139-139", method="", type_label=new_variable];
746 [label="139_ uint jackpot_re_ent23;\n746-new_variable-140-140", method="", type_label=new_variable];
750 [label="140_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n750-function_definition-141-146", method="buyTicket_re_ent23()", type_label=function_definition];
754 [label="141_ if\n754-if-142-143", method="buyTicket_re_ent23()", type_label=if];
1887 [label="141_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
765 [label="143_ lastPlayer_re_ent23 = msg.sender;\n765-expression_statement-144-144", method="buyTicket_re_ent23()", type_label=expression_statement];
771 [label="144_ jackpot_re_ent23    = address(this).balance;\n771-expression_statement-145-145", method="buyTicket_re_ent23()", type_label=expression_statement];
779 [label="146_ address public relayer;\n779-new_variable-147-147", method="", type_label=new_variable];
784 [label="147_ bool not_called_re_ent13 = true;\n784-new_variable-148-148", method="", type_label=new_variable];
790 [label="148_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n790-function_definition-149-156", method="bug_re_ent13()", type_label=function_definition];
794 [label="149_ require(not_called_re_ent13);\n794-expression_statement-150-150", method="bug_re_ent13()", type_label=expression_statement];
799 [label="150_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n799-new_variable-151-151", method="bug_re_ent13()", type_label=new_variable];
820 [label="151_ if\n820-if-152-154", method="bug_re_ent13()", type_label=if];
1953 [label="151_ end_if", method="bug_re_ent13()", type_label=end_if];
826 [label="154_ not_called_re_ent13 = false;\n826-expression_statement-155-155", method="bug_re_ent13()", type_label=expression_statement];
851 [label="158_ relayer = _relayer;\n851-expression_statement-159-159", method="", type_label=expression_statement];
855 [label="159_ token = IERC20(_tokenAddress);\n855-expression_statement-160-160", method="", type_label=expression_statement];
862 [label="161_ mapping(address => uint) userBalance_re_ent40;\n862-new_variable-162-162", method="", type_label=new_variable];
868 [label="162_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n868-function_definition-163-169", method="withdrawBalance_re_ent40()", type_label=function_definition];
872 [label="163_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n872-new_variable-164-164", method="withdrawBalance_re_ent40()", type_label=new_variable];
896 [label="164_ if\n896-if-165-167", method="withdrawBalance_re_ent40()", type_label=if];
2029 [label="164_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
902 [label="167_ userBalance_re_ent40[msg.sender] = 0;\n902-expression_statement-168-168", method="withdrawBalance_re_ent40()", type_label=expression_statement];
910 [label="169_ function execute(\n        address _to, \n        uint256 _value, \n        uint256 _fee, \n        bytes calldata _signature\n    ) nonReentrant external {\n        require(tx.origin == relayer, \"Invalid transaction origin\");\n        Marmo marmo = Marmo(msg.sender);\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                _to,\n                _value,\n                _fee\n            )\n        );\n        require(marmo.signer() == ECDSA.recover(hash, _signature), \"Invalid signature\");\n        require(token.transferFrom(msg.sender, _to, _value));\n        require(token.transferFrom(msg.sender, relayer, _fee));\n    }\n910-function_definition-170-188", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=function_definition];
928 [label="174_ nonReentrant\n928-expression_statement-175-175", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=expression_statement];
932 [label="175_ require(tx.origin == relayer, \"Invalid transaction origin\");\n932-expression_statement-176-176", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=expression_statement];
944 [label="176_ Marmo marmo = Marmo(msg.sender);\n944-new_variable-177-177", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=new_variable];
956 [label="177_ bytes32 hash = keccak256(\n            abi.encodePacked(\n                _to,\n                _value,\n                _fee\n            )\n        );\n956-new_variable-178-184", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=new_variable];
974 [label="184_ require(marmo.signer() == ECDSA.recover(hash, _signature), \"Invalid signature\");\n974-expression_statement-185-185", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=expression_statement];
994 [label="185_ require(token.transferFrom(msg.sender, _to, _value));\n994-expression_statement-186-186", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=expression_statement];
1010 [label="186_ require(token.transferFrom(msg.sender, relayer, _fee));\n1010-expression_statement-187-187", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=expression_statement];
1026 [label="188_ mapping(address => uint) userBalance_re_ent33;\n1026-new_variable-189-189", method="", type_label=new_variable];
1032 [label="189_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n1032-function_definition-190-196", method="withdrawBalance_re_ent33()", type_label=function_definition];
1036 [label="190_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n1036-new_variable-191-191", method="withdrawBalance_re_ent33()", type_label=new_variable];
1060 [label="191_ if\n1060-if-192-194", method="withdrawBalance_re_ent33()", type_label=if];
2193 [label="191_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
1066 [label="194_ userBalance_re_ent33[msg.sender] = 0;\n1066-expression_statement-195-195", method="withdrawBalance_re_ent33()", type_label=expression_statement];
1074 [label="196_ function setRelayer(address _newRelayer) onlyOwner external {\n        require(_newRelayer != address(0));\n        emit NewRelayer(relayer, _newRelayer);\n        relayer = _newRelayer;\n    }\n1074-function_definition-197-201", method="setRelayer(address _newRelayer)", type_label=function_definition];
1080 [label="196_ onlyOwner\n1080-expression_statement-197-197", method="setRelayer(address _newRelayer)", type_label=expression_statement];
1084 [label="197_ require(_newRelayer != address(0));\n1084-expression_statement-198-198", method="setRelayer(address _newRelayer)", type_label=expression_statement];
1099 [label="199_ relayer = _newRelayer;\n1099-expression_statement-200-200", method="setRelayer(address _newRelayer)", type_label=expression_statement];
1103 [label="201_ bool not_called_re_ent27 = true;\n1103-new_variable-202-202", method="", type_label=new_variable];
1109 [label="202_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n1109-function_definition-203-209", method="bug_re_ent27()", type_label=function_definition];
1113 [label="203_ require(not_called_re_ent27);\n1113-expression_statement-204-204", method="bug_re_ent27()", type_label=expression_statement];
1118 [label="204_ if\n1118-if-205-207", method="bug_re_ent27()", type_label=if];
2251 [label="204_ end_if", method="bug_re_ent27()", type_label=end_if];
1133 [label="207_ not_called_re_ent27 = false;\n1133-expression_statement-208-208", method="bug_re_ent27()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
570;
47 -> 64  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
64 -> 71  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
64 -> 1197  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1197 -> 76  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
71 -> 1197  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
71 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
76 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 86  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 138  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
131 -> 1264  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1264 -> 142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
138 -> 1264  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
138 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
142 -> 151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
142 -> 1275  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1275 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 1275  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
155 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
175 -> 183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
183 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
194 -> 206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
299 -> 306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
306 -> 1439  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
325 -> 334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
334 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
336 -> 340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
344 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
348 -> 1481  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
359 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
376 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
408 -> 412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
412 -> 436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 438  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
436 -> 1569  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1569 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
438 -> 1569  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
446 -> 456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
492 -> 501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 562  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
549 -> 1682  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1682 -> 570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
562 -> 1682  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
579 -> 583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
583 -> 594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
594 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
637 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
641 -> 648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
648 -> 1781  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
670 -> 674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
674 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
706 -> 710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
710 -> 717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
717 -> 1850  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
736 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
750 -> 754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
754 -> 1887  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
765 -> 771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
779 -> 784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
790 -> 794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
794 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
820 -> 1953  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
851 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
872 -> 896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
896 -> 2029  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
910 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
944 -> 956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
956 -> 974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
974 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 1010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1032 -> 1036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1036 -> 1060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1060 -> 2193  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1074 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1109 -> 1113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1113 -> 1118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1118 -> 2251  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
