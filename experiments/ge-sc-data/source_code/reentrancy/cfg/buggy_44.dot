digraph  {
13 [label="2_ mapping(address => uint) userBalance_re_ent40;\n13-new_variable-3-3", method="", type_label=new_variable];
19 [label="3_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n19-function_definition-4-10", method="withdrawBalance_re_ent40()", type_label=function_definition];
23 [label="4_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n23-new_variable-5-5", method="withdrawBalance_re_ent40()", type_label=new_variable];
47 [label="5_ if\n47-if-6-8", method="withdrawBalance_re_ent40()", type_label=if];
2337 [label="5_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
53 [label="8_ userBalance_re_ent40[msg.sender] = 0;\n53-expression_statement-9-9", method="withdrawBalance_re_ent40()", type_label=expression_statement];
67 [label="11_ function _setMetadata(bytes memory metadata) internal {\n        emit MetadataSet(metadata);\n    }\n67-function_definition-12-14", method="_setMetadata(bytes memory metadata)", type_label=function_definition];
79 [label="14_ bool not_called_re_ent41 = true;\n79-new_variable-15-15", method="", type_label=new_variable];
85 [label="15_ function bug_re_ent41() public{\n        require(not_called_re_ent41);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent41 = false;\n    }\n85-function_definition-16-22", method="bug_re_ent41()", type_label=function_definition];
89 [label="16_ require(not_called_re_ent41);\n89-expression_statement-17-17", method="bug_re_ent41()", type_label=expression_statement];
94 [label="17_ if\n94-if-18-20", method="bug_re_ent41()", type_label=if];
2384 [label="17_ end_if", method="bug_re_ent41()", type_label=end_if];
109 [label="20_ not_called_re_ent41 = false;\n109-expression_statement-21-21", method="bug_re_ent41()", type_label=expression_statement];
117 [label="24_ mapping(address => uint) userBalance_re_ent12;\n117-new_variable-25-25", method="", type_label=new_variable];
123 [label="25_ function withdrawBalance_re_ent12() public{\n        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent12[msg.sender] = 0;\n    }\n123-function_definition-26-31", method="withdrawBalance_re_ent12()", type_label=function_definition];
127 [label="26_ if\n127-if-27-29", method="withdrawBalance_re_ent12()", type_label=if];
2417 [label="26_ end_if", method="withdrawBalance_re_ent12()", type_label=end_if];
145 [label="29_ userBalance_re_ent12[msg.sender] = 0;\n145-expression_statement-30-30", method="withdrawBalance_re_ent12()", type_label=expression_statement];
153 [label="31_ address private _operator;\n153-new_variable-32-32", method="", type_label=new_variable];
158 [label="32_ mapping(address => uint) redeemableEther_re_ent11;\n158-new_variable-33-33", method="", type_label=new_variable];
164 [label="33_ function claimReward_re_ent11() public {        \n        require(redeemableEther_re_ent11[msg.sender] > 0);\n        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n        msg.sender.transfer(transferValue_re_ent11);    \n        redeemableEther_re_ent11[msg.sender] = 0;\n    }\n164-function_definition-34-39", method="claimReward_re_ent11()", type_label=function_definition];
168 [label="34_ require(redeemableEther_re_ent11[msg.sender] > 0);\n168-expression_statement-35-35", method="claimReward_re_ent11()", type_label=expression_statement];
179 [label="35_ uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n179-new_variable-36-36", method="claimReward_re_ent11()", type_label=new_variable];
189 [label="36_ msg.sender.transfer(transferValue_re_ent11);\n189-expression_statement-37-37", method="claimReward_re_ent11()", type_label=expression_statement];
198 [label="37_ redeemableEther_re_ent11[msg.sender] = 0;\n198-expression_statement-38-38", method="claimReward_re_ent11()", type_label=expression_statement];
206 [label="39_ bool private _status;\n206-new_variable-40-40", method="", type_label=new_variable];
211 [label="40_ mapping(address => uint) userBalance_re_ent33;\n211-new_variable-41-41", method="", type_label=new_variable];
217 [label="41_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n217-function_definition-42-48", method="withdrawBalance_re_ent33()", type_label=function_definition];
221 [label="42_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n221-new_variable-43-43", method="withdrawBalance_re_ent33()", type_label=new_variable];
245 [label="43_ if\n245-if-44-46", method="withdrawBalance_re_ent33()", type_label=if];
2535 [label="43_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
251 [label="46_ userBalance_re_ent33[msg.sender] = 0;\n251-expression_statement-47-47", method="withdrawBalance_re_ent33()", type_label=expression_statement];
269 [label="49_ function _setOperator(address operator) internal {\n        require(_operator != operator, \"cannot set same operator\");\n        _operator = operator;\n        emit OperatorUpdated(operator, hasActiveOperator());\n    }\n269-function_definition-50-54", method="_setOperator(address operator)", type_label=function_definition];
277 [label="50_ require(_operator != operator, \"cannot set same operator\");\n277-expression_statement-51-51", method="_setOperator(address operator)", type_label=expression_statement];
287 [label="51_ _operator = operator;\n287-expression_statement-52-52", method="_setOperator(address operator)", type_label=expression_statement];
298 [label="54_ uint256 counter_re_ent42 =0;\n298-new_variable-55-55", method="", type_label=new_variable];
303 [label="55_ function callme_re_ent42() public{\n        require(counter_re_ent42<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent42 += 1;\n    }\n303-function_definition-56-62", method="callme_re_ent42()", type_label=function_definition];
307 [label="56_ require(counter_re_ent42<=5);\n307-expression_statement-57-57", method="callme_re_ent42()", type_label=expression_statement];
314 [label="57_ if\n314-if-58-60", method="callme_re_ent42()", type_label=if];
2604 [label="57_ end_if", method="callme_re_ent42()", type_label=end_if];
329 [label="60_ counter_re_ent42 += 1;\n329-expression_statement-61-61", method="callme_re_ent42()", type_label=expression_statement];
333 [label="62_ function _transferOperator(address operator) internal {\n        require(_operator != address(0), \"operator not set\");\n        _setOperator(operator);\n    }\n333-function_definition-63-66", method="_transferOperator(address operator)", type_label=function_definition];
341 [label="63_ require(_operator != address(0), \"operator not set\");\n341-expression_statement-64-64", method="_transferOperator(address operator)", type_label=expression_statement];
353 [label="64_ _setOperator(operator);\n353-expression_statement-65-65", method="_transferOperator(address operator)", type_label=expression_statement];
358 [label="66_ address payable lastPlayer_re_ent2;\n358-new_variable-67-67", method="", type_label=new_variable];
362 [label="67_ uint jackpot_re_ent2;\n362-new_variable-68-68", method="", type_label=new_variable];
366 [label="68_ function buyTicket_re_ent2() public{\n	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))\n        revert();\n      lastPlayer_re_ent2 = msg.sender;\n      jackpot_re_ent2    = address(this).balance;\n    }\n366-function_definition-69-74", method="buyTicket_re_ent2()", type_label=function_definition];
370 [label="69_ if\n370-if-70-71", method="buyTicket_re_ent2()", type_label=if];
2660 [label="69_ end_if", method="buyTicket_re_ent2()", type_label=end_if];
381 [label="71_ lastPlayer_re_ent2 = msg.sender;\n381-expression_statement-72-72", method="buyTicket_re_ent2()", type_label=expression_statement];
387 [label="72_ jackpot_re_ent2    = address(this).balance;\n387-expression_statement-73-73", method="buyTicket_re_ent2()", type_label=expression_statement];
395 [label="74_ function _renounceOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _operator = address(0);\n        _status = false;\n        emit OperatorUpdated(address(0), false);\n    }\n395-function_definition-75-80", method="_renounceOperator()", type_label=function_definition];
399 [label="75_ require(hasActiveOperator(), \"only when operator active\");\n399-expression_statement-76-76", method="_renounceOperator()", type_label=expression_statement];
408 [label="76_ _operator = address(0);\n408-expression_statement-77-77", method="_renounceOperator()", type_label=expression_statement];
414 [label="77_ _status = false;\n414-expression_statement-78-78", method="_renounceOperator()", type_label=expression_statement];
428 [label="80_ mapping(address => uint) balances_re_ent17;\n428-new_variable-81-81", method="", type_label=new_variable];
434 [label="81_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n434-function_definition-82-87", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
442 [label="82_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n442-expression_statement-83-83", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
453 [label="83_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n453-new_variable-84-84", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
473 [label="84_ require(success);\n473-expression_statement-85-85", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
478 [label="85_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n478-expression_statement-86-86", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
486 [label="87_ function _activateOperator() internal {\n        require(!hasActiveOperator(), \"only when operator not active\");\n        _status = true;\n        emit OperatorUpdated(_operator, true);\n    }\n486-function_definition-88-92", method="_activateOperator()", type_label=function_definition];
490 [label="88_ require(!hasActiveOperator(), \"only when operator not active\");\n490-expression_statement-89-89", method="_activateOperator()", type_label=expression_statement];
500 [label="89_ _status = true;\n500-expression_statement-90-90", method="_activateOperator()", type_label=expression_statement];
512 [label="92_ address payable lastPlayer_re_ent37;\n512-new_variable-93-93", method="", type_label=new_variable];
516 [label="93_ uint jackpot_re_ent37;\n516-new_variable-94-94", method="", type_label=new_variable];
520 [label="94_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n520-function_definition-95-100", method="buyTicket_re_ent37()", type_label=function_definition];
524 [label="95_ if\n524-if-96-97", method="buyTicket_re_ent37()", type_label=if];
2814 [label="95_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
535 [label="97_ lastPlayer_re_ent37 = msg.sender;\n535-expression_statement-98-98", method="buyTicket_re_ent37()", type_label=expression_statement];
541 [label="98_ jackpot_re_ent37    = address(this).balance;\n541-expression_statement-99-99", method="buyTicket_re_ent37()", type_label=expression_statement];
549 [label="100_ function _deactivateOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _status = false;\n        emit OperatorUpdated(_operator, false);\n    }\n549-function_definition-101-105", method="_deactivateOperator()", type_label=function_definition];
553 [label="101_ require(hasActiveOperator(), \"only when operator active\");\n553-expression_statement-102-102", method="_deactivateOperator()", type_label=expression_statement];
562 [label="102_ _status = false;\n562-expression_statement-103-103", method="_deactivateOperator()", type_label=expression_statement];
574 [label="105_ mapping(address => uint) balances_re_ent3;\n574-new_variable-106-106", method="", type_label=new_variable];
580 [label="106_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n580-function_definition-107-112", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
588 [label="107_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n588-expression_statement-108-108", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
599 [label="108_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n599-new_variable-109-109", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
619 [label="109_ require(success);\n619-expression_statement-110-110", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
624 [label="110_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n624-expression_statement-111-111", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
632 [label="112_ function getOperator() public view returns (address operator) {\n        operator = _operator;\n    }\n632-function_definition-113-115", method="getOperator()", type_label=function_definition];
642 [label="113_ operator = _operator;\n642-expression_statement-114-114", method="getOperator()", type_label=expression_statement];
646 [label="115_ address payable lastPlayer_re_ent9;\n646-new_variable-116-116", method="", type_label=new_variable];
650 [label="116_ uint jackpot_re_ent9;\n650-new_variable-117-117", method="", type_label=new_variable];
654 [label="117_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n654-function_definition-118-124", method="buyTicket_re_ent9()", type_label=function_definition];
658 [label="118_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n658-new_variable-119-119", method="buyTicket_re_ent9()", type_label=new_variable];
676 [label="119_ if\n676-if-120-121", method="buyTicket_re_ent9()", type_label=if];
2966 [label="119_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
681 [label="121_ lastPlayer_re_ent9 = msg.sender;\n681-expression_statement-122-122", method="buyTicket_re_ent9()", type_label=expression_statement];
687 [label="122_ jackpot_re_ent9    = address(this).balance;\n687-expression_statement-123-123", method="buyTicket_re_ent9()", type_label=expression_statement];
695 [label="124_ function isOperator(address caller) public view returns (bool ok) {\n        return (caller == getOperator());\n    }\n695-function_definition-125-127", method="isOperator(address caller)", type_label=function_definition];
709 [label="125_ return (caller == getOperator());\n709-return-126-126", method="isOperator(address caller)", type_label=return];
715 [label="127_ mapping(address => uint) redeemableEther_re_ent25;\n715-new_variable-128-128", method="", type_label=new_variable];
721 [label="128_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n721-function_definition-129-134", method="claimReward_re_ent25()", type_label=function_definition];
725 [label="129_ require(redeemableEther_re_ent25[msg.sender] > 0);\n725-expression_statement-130-130", method="claimReward_re_ent25()", type_label=expression_statement];
736 [label="130_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n736-new_variable-131-131", method="claimReward_re_ent25()", type_label=new_variable];
746 [label="131_ msg.sender.transfer(transferValue_re_ent25);\n746-expression_statement-132-132", method="claimReward_re_ent25()", type_label=expression_statement];
755 [label="132_ redeemableEther_re_ent25[msg.sender] = 0;\n755-expression_statement-133-133", method="claimReward_re_ent25()", type_label=expression_statement];
763 [label="134_ function hasActiveOperator() public view returns (bool ok) {\n        return _status;\n    }\n763-function_definition-135-137", method="hasActiveOperator()", type_label=function_definition];
773 [label="135_ return _status;\n773-return-136-136", method="hasActiveOperator()", type_label=return];
775 [label="137_ mapping(address => uint) userBalance_re_ent19;\n775-new_variable-138-138", method="", type_label=new_variable];
781 [label="138_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n781-function_definition-139-144", method="withdrawBalance_re_ent19()", type_label=function_definition];
785 [label="139_ if\n785-if-140-142", method="withdrawBalance_re_ent19()", type_label=if];
3075 [label="139_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
803 [label="142_ userBalance_re_ent19[msg.sender] = 0;\n803-expression_statement-143-143", method="withdrawBalance_re_ent19()", type_label=expression_statement];
811 [label="144_ function isActiveOperator(address caller) public view returns (bool ok) {\n        return (isOperator(caller) && hasActiveOperator());\n    }\n811-function_definition-145-147", method="isActiveOperator(address caller)", type_label=function_definition];
825 [label="145_ return (isOperator(caller) && hasActiveOperator());\n825-return-146-146", method="isActiveOperator(address caller)", type_label=return];
834 [label="147_ mapping(address => uint) userBalance_re_ent26;\n834-new_variable-148-148", method="", type_label=new_variable];
840 [label="148_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n840-function_definition-149-155", method="withdrawBalance_re_ent26()", type_label=function_definition];
844 [label="149_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n844-new_variable-150-150", method="withdrawBalance_re_ent26()", type_label=new_variable];
868 [label="150_ if\n868-if-151-153", method="withdrawBalance_re_ent26()", type_label=if];
3158 [label="150_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
874 [label="153_ userBalance_re_ent26[msg.sender] = 0;\n874-expression_statement-154-154", method="withdrawBalance_re_ent26()", type_label=expression_statement];
885 [label="157_ bool not_called_re_ent27 = true;\n885-new_variable-158-158", method="", type_label=new_variable];
891 [label="158_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n891-function_definition-159-165", method="bug_re_ent27()", type_label=function_definition];
895 [label="159_ require(not_called_re_ent27);\n895-expression_statement-160-160", method="bug_re_ent27()", type_label=expression_statement];
900 [label="160_ if\n900-if-161-163", method="bug_re_ent27()", type_label=if];
3190 [label="160_ end_if", method="bug_re_ent27()", type_label=end_if];
915 [label="163_ not_called_re_ent27 = false;\n915-expression_statement-164-164", method="bug_re_ent27()", type_label=expression_statement];
930 [label="166_ mapping(address => uint) balances_re_ent31;\n930-new_variable-167-167", method="", type_label=new_variable];
936 [label="167_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n936-function_definition-168-172", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
944 [label="168_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n944-expression_statement-169-169", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
955 [label="169_ require(msg.sender.send(_weiToWithdraw));\n955-expression_statement-170-170", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
967 [label="170_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n967-expression_statement-171-171", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
981 [label="173_ function _setMultiHashFormat(uint8 hashFunction, uint8 digestSize) internal {\n        emit HashFormatSet(hashFunction, digestSize);\n    }\n981-function_definition-174-176", method="_setMultiHashFormat(uint8 hashFunction,uint8 digestSize)", type_label=function_definition];
999 [label="176_ bool not_called_re_ent20 = true;\n999-new_variable-177-177", method="", type_label=new_variable];
1005 [label="177_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n1005-function_definition-178-184", method="bug_re_ent20()", type_label=function_definition];
1009 [label="178_ require(not_called_re_ent20);\n1009-expression_statement-179-179", method="bug_re_ent20()", type_label=expression_statement];
1014 [label="179_ if\n1014-if-180-182", method="bug_re_ent20()", type_label=if];
3304 [label="179_ end_if", method="bug_re_ent20()", type_label=end_if];
1029 [label="182_ not_called_re_ent20 = false;\n1029-expression_statement-183-183", method="bug_re_ent20()", type_label=expression_statement];
1034 [label="184_ function _submitHash(bytes32 hash) internal {\n        emit HashSubmitted(hash);\n    }\n1034-function_definition-185-187", method="_submitHash(bytes32 hash)", type_label=function_definition];
1046 [label="187_ mapping(address => uint) redeemableEther_re_ent32;\n1046-new_variable-188-188", method="", type_label=new_variable];
1052 [label="188_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n1052-function_definition-189-194", method="claimReward_re_ent32()", type_label=function_definition];
1056 [label="189_ require(redeemableEther_re_ent32[msg.sender] > 0);\n1056-expression_statement-190-190", method="claimReward_re_ent32()", type_label=expression_statement];
1067 [label="190_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n1067-new_variable-191-191", method="claimReward_re_ent32()", type_label=new_variable];
1077 [label="191_ msg.sender.transfer(transferValue_re_ent32);\n1077-expression_statement-192-192", method="claimReward_re_ent32()", type_label=expression_statement];
1086 [label="192_ redeemableEther_re_ent32[msg.sender] = 0;\n1086-expression_statement-193-193", method="claimReward_re_ent32()", type_label=expression_statement];
1097 [label="196_ struct MultiHash {\n        bytes32 hash;\n        uint8 hashFunction;\n        uint8 digestSize;\n    }\n1097-expression_statement-197-201", method="MultiHash()", type_label=expression_statement];
1111 [label="201_ function _combineMultiHash(MultiHash memory multihash) internal pure returns (bytes memory) {\n        bytes memory out = new bytes(34);\n        out[0] = byte(multihash.hashFunction);\n        out[1] = byte(multihash.digestSize);\n        uint8 i;\n        for (i = 0; i < 32; i++) {\n          out[i+2] = multihash.hash[i];\n        }\n        return out;\n    }\n1111-function_definition-202-211", method="_combineMultiHash(MultiHash memory multihash)", type_label=function_definition];
1125 [label="202_ bytes memory out = new bytes(34);\n1125-new_variable-203-203", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
1136 [label="203_ out[0] = byte(multihash.hashFunction);\n1136-expression_statement-204-204", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
1146 [label="204_ out[1] = byte(multihash.digestSize);\n1146-expression_statement-205-205", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
1156 [label="205_ uint8 i;\n1156-new_variable-206-206", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
1161 [label="206_ for(i < 32;;i++)\n1161-for-207-209", method="_combineMultiHash(MultiHash memory multihash)", type_label=for];
3451 [label="206_ end_loop", method="_combineMultiHash(MultiHash memory multihash)", type_label=end_loop];
1170 [label="206_ i++\n1170-expression_statement-207-207", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
1173 [label="207_ out[i+2] = multihash.hash[i];\n1173-expression_statement-208-208", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
1185 [label="209_ return out;\n1185-return-210-210", method="_combineMultiHash(MultiHash memory multihash)", type_label=return];
1187 [label="211_ mapping(address => uint) balances_re_ent38;\n1187-new_variable-212-212", method="", type_label=new_variable];
1193 [label="212_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n1193-function_definition-213-217", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
1201 [label="213_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n1201-expression_statement-214-214", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1212 [label="214_ require(msg.sender.send(_weiToWithdraw));\n1212-expression_statement-215-215", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1224 [label="215_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n1224-expression_statement-216-216", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1232 [label="217_ function _splitMultiHash(bytes memory source) internal pure returns (MultiHash memory) {\n        require(source.length == 34, \"length of source must be 34\");\n        uint8 hashFunction = uint8(source[0]);\n        uint8 digestSize = uint8(source[1]);\n        bytes32 hash;\n        assembly {\n          hash := mload(add(source, 34))\n        }\n        return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n    }\n1232-function_definition-218-231", method="_splitMultiHash(bytes memory source)", type_label=function_definition];
1246 [label="218_ require(source.length == 34, \"length of source must be 34\");\n1246-expression_statement-219-219", method="_splitMultiHash(bytes memory source)", type_label=expression_statement];
1258 [label="219_ uint8 hashFunction = uint8(source[0]);\n1258-new_variable-220-220", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
1268 [label="220_ uint8 digestSize = uint8(source[1]);\n1268-new_variable-221-221", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
1278 [label="221_ bytes32 hash;\n1278-new_variable-222-222", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
1296 [label="225_ return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n1296-return-226-230", method="_splitMultiHash(bytes memory source)", type_label=return];
1310 [label="231_ mapping(address => uint) redeemableEther_re_ent4;\n1310-new_variable-232-232", method="", type_label=new_variable];
1316 [label="232_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n1316-function_definition-233-238", method="claimReward_re_ent4()", type_label=function_definition];
1320 [label="233_ require(redeemableEther_re_ent4[msg.sender] > 0);\n1320-expression_statement-234-234", method="claimReward_re_ent4()", type_label=expression_statement];
1331 [label="234_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n1331-new_variable-235-235", method="claimReward_re_ent4()", type_label=new_variable];
1341 [label="235_ msg.sender.transfer(transferValue_re_ent4);\n1341-expression_statement-236-236", method="claimReward_re_ent4()", type_label=expression_statement];
1350 [label="236_ redeemableEther_re_ent4[msg.sender] = 0;\n1350-expression_statement-237-237", method="claimReward_re_ent4()", type_label=expression_statement];
1379 [label="241_ function create(bytes calldata initData) external returns (address instance);\n1379-function_definition-242-242", method="create(bytes calldata initData)", type_label=function_definition];
1391 [label="242_ function createSalty(bytes calldata initData, bytes32 salt) external returns (address instance);\n1391-function_definition-243-243", method="createSalty(bytes calldata initData,bytes32 salt)", type_label=function_definition];
1407 [label="243_ function getInitSelector() external view returns (bytes4 initSelector);\n1407-function_definition-244-244", method="getInitSelector()", type_label=function_definition];
1416 [label="244_ function getInstanceRegistry() external view returns (address instanceRegistry);\n1416-function_definition-245-245", method="getInstanceRegistry()", type_label=function_definition];
1425 [label="245_ function getTemplate() external view returns (address template);\n1425-function_definition-246-246", method="getTemplate()", type_label=function_definition];
1434 [label="246_ function getSaltyInstance(bytes calldata, bytes32 salt) external view returns (address instance);\n1434-function_definition-247-247", method="getSaltyInstance(bytes calldata,bytes32 salt)", type_label=function_definition];
1450 [label="247_ function getNextInstance(bytes calldata) external view returns (address instance);\n1450-function_definition-248-248", method="getNextInstance(bytes calldata)", type_label=function_definition];
1462 [label="248_ function getInstanceCreator(address instance) external view returns (address creator);\n1462-function_definition-249-249", method="getInstanceCreator(address instance)", type_label=function_definition];
1475 [label="249_ function getInstanceType() external view returns (bytes4 instanceType);\n1475-function_definition-250-250", method="getInstanceType()", type_label=function_definition];
1484 [label="250_ function getInstanceCount() external view returns (uint256 count);\n1484-function_definition-251-251", method="getInstanceCount()", type_label=function_definition];
1493 [label="251_ function getInstance(uint256 index) external view returns (address instance);\n1493-function_definition-252-252", method="getInstance(uint256 index)", type_label=function_definition];
1506 [label="252_ function getInstances() external view returns (address[] memory instances);\n1506-function_definition-253-253", method="getInstances()", type_label=function_definition];
1516 [label="253_ function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);\n1516-function_definition-254-254", method="getPaginatedInstances(uint256 startIndex,uint256 endIndex)", type_label=function_definition];
1537 [label="256_ mapping(address => uint) balances_re_ent1;\n1537-new_variable-257-257", method="", type_label=new_variable];
1543 [label="257_ function withdraw_balances_re_ent1 () public {\n       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent1[msg.sender] = 0;\n      }\n1543-function_definition-258-262", method="withdraw_balances_re_ent1()", type_label=function_definition];
1547 [label="258_ (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n1547-new_variable-259-259", method="withdraw_balances_re_ent1()", type_label=new_variable];
1571 [label="259_ if\n1571-if-260-261", method="withdraw_balances_re_ent1()", type_label=if];
3861 [label="259_ end_if", method="withdraw_balances_re_ent1()", type_label=end_if];
1573 [label="260_ balances_re_ent1[msg.sender] = 0;\n1573-expression_statement-261-261", method="withdraw_balances_re_ent1()", type_label=expression_statement];
1581 [label="262_ address private _factory;\n1581-new_variable-263-263", method="", type_label=new_variable];
1586 [label="263_ modifier initializeTemplate() {\n        _factory = msg.sender;\n        uint32 codeSize;\n        assembly { codeSize := extcodesize(address) }\n        require(codeSize == 0, \"must be called within contract constructor\");\n        _;\n    }\n1586-expression_statement-264-270", method="", type_label=expression_statement];
1589 [label="264_ _factory = msg.sender;\n1589-expression_statement-265-265", method="", type_label=expression_statement];
1595 [label="265_ uint32 codeSize;\n1595-new_variable-266-266", method="", type_label=new_variable];
1609 [label="267_ require(codeSize == 0, \"must be called within contract constructor\");\n1609-expression_statement-268-268", method="", type_label=expression_statement];
1619 [label="268_ _;\n1619-expression_statement-269-269", method="", type_label=expression_statement];
1621 [label="270_ function getCreator() public view returns (address creator) {\n        creator = iFactory(_factory).getInstanceCreator(address(this));\n    }\n1621-function_definition-271-273", method="getCreator()", type_label=function_definition];
1631 [label="271_ creator = iFactory(_factory).getInstanceCreator(address(this));\n1631-expression_statement-272-272", method="getCreator()", type_label=expression_statement];
1645 [label="273_ uint256 counter_re_ent7 =0;\n1645-new_variable-274-274", method="", type_label=new_variable];
1650 [label="274_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n1650-function_definition-275-281", method="callme_re_ent7()", type_label=function_definition];
1654 [label="275_ require(counter_re_ent7<=5);\n1654-expression_statement-276-276", method="callme_re_ent7()", type_label=expression_statement];
1661 [label="276_ if\n1661-if-277-279", method="callme_re_ent7()", type_label=if];
3951 [label="276_ end_if", method="callme_re_ent7()", type_label=end_if];
1676 [label="279_ counter_re_ent7 += 1;\n1676-expression_statement-280-280", method="callme_re_ent7()", type_label=expression_statement];
1680 [label="281_ function isCreator(address caller) public view returns (bool ok) {\n        ok = (caller == getCreator());\n    }\n1680-function_definition-282-284", method="isCreator(address caller)", type_label=function_definition];
1694 [label="282_ ok = (caller == getCreator());\n1694-expression_statement-283-283", method="isCreator(address caller)", type_label=expression_statement];
1702 [label="284_ address payable lastPlayer_re_ent23;\n1702-new_variable-285-285", method="", type_label=new_variable];
1706 [label="285_ uint jackpot_re_ent23;\n1706-new_variable-286-286", method="", type_label=new_variable];
1710 [label="286_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n1710-function_definition-287-292", method="buyTicket_re_ent23()", type_label=function_definition];
1714 [label="287_ if\n1714-if-288-289", method="buyTicket_re_ent23()", type_label=if];
4004 [label="287_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
1725 [label="289_ lastPlayer_re_ent23 = msg.sender;\n1725-expression_statement-290-290", method="buyTicket_re_ent23()", type_label=expression_statement];
1731 [label="290_ jackpot_re_ent23    = address(this).balance;\n1731-expression_statement-291-291", method="buyTicket_re_ent23()", type_label=expression_statement];
1739 [label="292_ function getFactory() public view returns (address factory) {\n        factory = _factory;\n    }\n1739-function_definition-293-295", method="getFactory()", type_label=function_definition];
1749 [label="293_ factory = _factory;\n1749-expression_statement-294-294", method="getFactory()", type_label=expression_statement];
1753 [label="295_ uint256 counter_re_ent14 =0;\n1753-new_variable-296-296", method="", type_label=new_variable];
1758 [label="296_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n1758-function_definition-297-303", method="callme_re_ent14()", type_label=function_definition];
1762 [label="297_ require(counter_re_ent14<=5);\n1762-expression_statement-298-298", method="callme_re_ent14()", type_label=expression_statement];
1769 [label="298_ if\n1769-if-299-301", method="callme_re_ent14()", type_label=if];
4059 [label="298_ end_if", method="callme_re_ent14()", type_label=end_if];
1784 [label="301_ counter_re_ent14 += 1;\n1784-expression_statement-302-302", method="callme_re_ent14()", type_label=expression_statement];
1806 [label="305_ bool not_called_re_ent13 = true;\n1806-new_variable-306-306", method="", type_label=new_variable];
1812 [label="306_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n1812-function_definition-307-314", method="bug_re_ent13()", type_label=function_definition];
1816 [label="307_ require(not_called_re_ent13);\n1816-expression_statement-308-308", method="bug_re_ent13()", type_label=expression_statement];
1821 [label="308_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n1821-new_variable-309-309", method="bug_re_ent13()", type_label=new_variable];
1842 [label="309_ if\n1842-if-310-312", method="bug_re_ent13()", type_label=if];
4132 [label="309_ end_if", method="bug_re_ent13()", type_label=end_if];
1848 [label="312_ not_called_re_ent13 = false;\n1848-expression_statement-313-313", method="bug_re_ent13()", type_label=expression_statement];
1867 [label="315_ function initialize(\n        address operator,\n        bytes memory multihash,\n        bytes memory metadata\n    ) public initializeTemplate() {\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n            Operated._activateOperator();\n        }\n        if (multihash.length != 0) {\n            MultiHashWrapper.MultiHash memory multihashObj = MultiHashWrapper._splitMultiHash(multihash);\n            ProofHashes._setMultiHashFormat(multihashObj.hashFunction, multihashObj.digestSize);\n            ProofHashes._submitHash(multihashObj.hash);\n        }\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n        emit Initialized(operator, multihash, metadata);\n    }\n1867-function_definition-316-334", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=function_definition];
1882 [label="319_ initializeTemplate()\n1882-expression_statement-320-320", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1885 [label="320_ if_operator != address(0)\n1885-if-321-324", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
4175 [label="320_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1892 [label="321_ Operated._setOperator(operator);\n1892-expression_statement-322-322", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1899 [label="322_ Operated._activateOperator();\n1899-expression_statement-323-323", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1904 [label="324_ if_multihash.length != 0\n1904-if-325-329", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
4194 [label="324_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1911 [label="325_ MultiHashWrapper.MultiHash memory multihashObj = MultiHashWrapper._splitMultiHash(multihash);\n1911-new_variable-326-326", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=new_variable];
1924 [label="326_ ProofHashes._setMultiHashFormat(multihashObj.hashFunction, multihashObj.digestSize);\n1924-expression_statement-327-327", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1937 [label="327_ ProofHashes._submitHash(multihashObj.hash);\n1937-expression_statement-328-328", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1946 [label="329_ if_metadata.length != 0\n1946-if-330-332", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
4236 [label="329_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1953 [label="330_ EventMetadata._setMetadata(metadata);\n1953-expression_statement-331-331", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1968 [label="334_ address payable lastPlayer_re_ent30;\n1968-new_variable-335-335", method="", type_label=new_variable];
1972 [label="335_ uint jackpot_re_ent30;\n1972-new_variable-336-336", method="", type_label=new_variable];
1976 [label="336_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n1976-function_definition-337-342", method="buyTicket_re_ent30()", type_label=function_definition];
1980 [label="337_ if\n1980-if-338-339", method="buyTicket_re_ent30()", type_label=if];
4270 [label="337_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
1991 [label="339_ lastPlayer_re_ent30 = msg.sender;\n1991-expression_statement-340-340", method="buyTicket_re_ent30()", type_label=expression_statement];
1997 [label="340_ jackpot_re_ent30    = address(this).balance;\n1997-expression_statement-341-341", method="buyTicket_re_ent30()", type_label=expression_statement];
2005 [label="342_ function submitHash(bytes32 multihash) public {\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n        ProofHashes._submitHash(multihash);\n    }\n2005-function_definition-343-346", method="submitHash(bytes32 multihash)", type_label=function_definition];
2013 [label="343_ require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n2013-expression_statement-344-344", method="submitHash(bytes32 multihash)", type_label=expression_statement];
2037 [label="344_ ProofHashes._submitHash(multihash);\n2037-expression_statement-345-345", method="submitHash(bytes32 multihash)", type_label=expression_statement];
2044 [label="346_ mapping(address => uint) balances_re_ent8;\n2044-new_variable-347-347", method="", type_label=new_variable];
2050 [label="347_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n2050-function_definition-348-352", method="withdraw_balances_re_ent8()", type_label=function_definition];
2054 [label="348_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n2054-new_variable-349-349", method="withdraw_balances_re_ent8()", type_label=new_variable];
2078 [label="349_ if\n2078-if-350-351", method="withdraw_balances_re_ent8()", type_label=if];
4368 [label="349_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
2080 [label="350_ balances_re_ent8[msg.sender] = 0;\n2080-expression_statement-351-351", method="withdraw_balances_re_ent8()", type_label=expression_statement];
2088 [label="352_ function setMetadata(bytes memory metadata) public {\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n        EventMetadata._setMetadata(metadata);\n    }\n2088-function_definition-353-356", method="setMetadata(bytes memory metadata)", type_label=function_definition];
2096 [label="353_ require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n2096-expression_statement-354-354", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
2120 [label="354_ EventMetadata._setMetadata(metadata);\n2120-expression_statement-355-355", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
2127 [label="356_ mapping(address => uint) redeemableEther_re_ent39;\n2127-new_variable-357-357", method="", type_label=new_variable];
2133 [label="357_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n2133-function_definition-358-363", method="claimReward_re_ent39()", type_label=function_definition];
2137 [label="358_ require(redeemableEther_re_ent39[msg.sender] > 0);\n2137-expression_statement-359-359", method="claimReward_re_ent39()", type_label=expression_statement];
2148 [label="359_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n2148-new_variable-360-360", method="claimReward_re_ent39()", type_label=new_variable];
2158 [label="360_ msg.sender.transfer(transferValue_re_ent39);\n2158-expression_statement-361-361", method="claimReward_re_ent39()", type_label=expression_statement];
2167 [label="361_ redeemableEther_re_ent39[msg.sender] = 0;\n2167-expression_statement-362-362", method="claimReward_re_ent39()", type_label=expression_statement];
2175 [label="363_ function transferOperator(address operator) public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._transferOperator(operator);\n    }\n2175-function_definition-364-367", method="transferOperator(address operator)", type_label=function_definition];
2183 [label="364_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n2183-expression_statement-365-365", method="transferOperator(address operator)", type_label=expression_statement];
2198 [label="365_ Operated._transferOperator(operator);\n2198-expression_statement-366-366", method="transferOperator(address operator)", type_label=expression_statement];
2205 [label="367_ mapping(address => uint) balances_re_ent36;\n2205-new_variable-368-368", method="", type_label=new_variable];
2211 [label="368_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n2211-function_definition-369-372", method="withdraw_balances_re_ent36()", type_label=function_definition];
2215 [label="369_ if\n2215-if-370-371", method="withdraw_balances_re_ent36()", type_label=if];
4505 [label="369_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
2228 [label="370_ balances_re_ent36[msg.sender] = 0;\n2228-expression_statement-371-371", method="withdraw_balances_re_ent36()", type_label=expression_statement];
2236 [label="372_ function renounceOperator() public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._renounceOperator();\n    }\n2236-function_definition-373-376", method="renounceOperator()", type_label=function_definition];
2240 [label="373_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n2240-expression_statement-374-374", method="renounceOperator()", type_label=expression_statement];
2255 [label="374_ Operated._renounceOperator();\n2255-expression_statement-375-375", method="renounceOperator()", type_label=expression_statement];
2260 [label="376_ uint256 counter_re_ent35 =0;\n2260-new_variable-377-377", method="", type_label=new_variable];
2265 [label="377_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n2265-function_definition-378-384", method="callme_re_ent35()", type_label=function_definition];
2269 [label="378_ require(counter_re_ent35<=5);\n2269-expression_statement-379-379", method="callme_re_ent35()", type_label=expression_statement];
2276 [label="379_ if\n2276-if-380-382", method="callme_re_ent35()", type_label=if];
4566 [label="379_ end_if", method="callme_re_ent35()", type_label=end_if];
2291 [label="382_ counter_re_ent35 += 1;\n2291-expression_statement-383-383", method="callme_re_ent35()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1960;
19 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
23 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 2337  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
85 -> 89  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
89 -> 94  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
94 -> 2384  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
123 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 2417  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
153 -> 158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
217 -> 221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
221 -> 245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
245 -> 2535  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
269 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
307 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 2604  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
333 -> 341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
341 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
358 -> 362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
370 -> 2660  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
381 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
399 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
442 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
520 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 2814  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
535 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
553 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
599 -> 619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
619 -> 624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
646 -> 650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
654 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
676 -> 2966  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
681 -> 687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
695 -> 709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
709 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
721 -> 725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
781 -> 785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
785 -> 3075  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
811 -> 825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
825 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
840 -> 844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
844 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 3158  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
891 -> 895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
895 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 3190  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
936 -> 944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
944 -> 955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
955 -> 967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1009 -> 1014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1014 -> 3304  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1052 -> 1056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1056 -> 1067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1067 -> 1077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1077 -> 1086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1111 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1125 -> 1136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1136 -> 1146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1146 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1156 -> 1161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1161 -> 1173  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1161 -> 3451  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3451 -> 1185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1170 -> 1161  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1173 -> 1170  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1185 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1193 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1201 -> 1212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1212 -> 1224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1232 -> 1246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1246 -> 1258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1258 -> 1268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1268 -> 1278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1296 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1316 -> 1320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1320 -> 1331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 1341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1341 -> 1350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1543 -> 1547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1547 -> 1571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1571 -> 1573  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1571 -> 3861  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3861 -> 1581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1573 -> 3861  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1581 -> 1586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1589 -> 1595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1609 -> 1619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1621 -> 1631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1650 -> 1654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1654 -> 1661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1661 -> 3951  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1680 -> 1694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1702 -> 1706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1710 -> 1714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1714 -> 4004  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1725 -> 1731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1739 -> 1749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1758 -> 1762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1762 -> 1769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1769 -> 4059  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1812 -> 1816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1816 -> 1821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1821 -> 1842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1842 -> 4132  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1867 -> 1885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1885 -> 1892  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1885 -> 4175  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4175 -> 1904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1892 -> 1899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1899 -> 4175  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1904 -> 1911  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1904 -> 4194  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4194 -> 1946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1911 -> 1924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1924 -> 1937  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1937 -> 4194  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1946 -> 1953  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1946 -> 4236  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4236 -> 1960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1953 -> 4236  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1968 -> 1972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1976 -> 1980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1980 -> 4270  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1991 -> 1997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2005 -> 2013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2013 -> 2037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2050 -> 2054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2054 -> 2078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2078 -> 2080  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2078 -> 4368  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4368 -> 2088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2080 -> 4368  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2088 -> 2096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2096 -> 2120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2133 -> 2137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2137 -> 2148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2148 -> 2158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2158 -> 2167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2175 -> 2183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2183 -> 2198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2211 -> 2215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2215 -> 2228  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2215 -> 4505  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4505 -> 2236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2228 -> 4505  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2236 -> 2240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2240 -> 2255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2265 -> 2269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2269 -> 2276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2276 -> 4566  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
