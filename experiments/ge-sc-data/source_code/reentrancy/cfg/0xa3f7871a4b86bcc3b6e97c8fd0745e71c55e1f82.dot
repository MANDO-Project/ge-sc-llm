digraph  {
13 [label="2_ function totalSupply() external view returns (uint256);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ function balanceOf(address who) external view returns (uint256);\n21-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
33 [label="4_ function allowance(address owner, address spender) external view returns (uint256);\n33-function_definition-5-5", method="allowance(address owner,address spender)", type_label=function_definition];
49 [label="5_ function transfer(address to, uint256 value) external returns (bool);\n49-function_definition-6-6", method="transfer(address to,uint256 value)", type_label=function_definition];
64 [label="6_ function approve(address spender, uint256 value) external returns (bool);\n64-function_definition-7-7", method="approve(address spender,uint256 value)", type_label=function_definition];
79 [label="7_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n79-function_definition-8-8", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
129 [label="12_ int256 constant private INT256_MIN = -2**255;\n129-new_variable-13-13", method="", type_label=new_variable];
138 [label="13_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n138-function_definition-14-21", method="mul(uint256 a,uint256 b)", type_label=function_definition];
155 [label="14_ if_a == 0\n155-if-15-17", method="mul(uint256 a,uint256 b)", type_label=if];
1199 [label="14_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
160 [label="15_ return 0;\n160-return-16-16", method="mul(uint256 a,uint256 b)", type_label=return];
162 [label="17_ uint256 c = a * b;\n162-new_variable-18-18", method="mul(uint256 a,uint256 b)", type_label=new_variable];
170 [label="18_ require(c / a == b);\n170-expression_statement-19-19", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
179 [label="19_ return c;\n179-return-20-20", method="mul(uint256 a,uint256 b)", type_label=return];
181 [label="21_ function mul(int256 a, int256 b) internal pure returns (int256) {\n        if (a == 0) {\n            return 0;\n        }\n        require(!(a == -1 && b == INT256_MIN));  \n        int256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n181-function_definition-22-30", method="mul(int256 a,int256 b)", type_label=function_definition];
198 [label="22_ if_a == 0\n198-if-23-25", method="mul(int256 a,int256 b)", type_label=if];
1242 [label="22_ end_if", method="mul(int256 a,int256 b)", type_label=end_if];
203 [label="23_ return 0;\n203-return-24-24", method="mul(int256 a,int256 b)", type_label=return];
205 [label="25_ require(!(a == -1 && b == INT256_MIN));\n205-expression_statement-26-26", method="mul(int256 a,int256 b)", type_label=expression_statement];
219 [label="26_ int256 c = a * b;\n219-new_variable-27-27", method="mul(int256 a,int256 b)", type_label=new_variable];
227 [label="27_ require(c / a == b);\n227-expression_statement-28-28", method="mul(int256 a,int256 b)", type_label=expression_statement];
236 [label="28_ return c;\n236-return-29-29", method="mul(int256 a,int256 b)", type_label=return];
238 [label="30_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n238-function_definition-31-35", method="div(uint256 a,uint256 b)", type_label=function_definition];
255 [label="31_ require(b > 0);\n255-expression_statement-32-32", method="div(uint256 a,uint256 b)", type_label=expression_statement];
262 [label="32_ uint256 c = a / b;\n262-new_variable-33-33", method="div(uint256 a,uint256 b)", type_label=new_variable];
270 [label="33_ return c;\n270-return-34-34", method="div(uint256 a,uint256 b)", type_label=return];
272 [label="35_ function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0);  \n        require(!(b == -1 && a == INT256_MIN));  \n        int256 c = a / b;\n        return c;\n    }\n272-function_definition-36-41", method="div(int256 a,int256 b)", type_label=function_definition];
289 [label="36_ require(b != 0);\n289-expression_statement-37-37", method="div(int256 a,int256 b)", type_label=expression_statement];
296 [label="37_ require(!(b == -1 && a == INT256_MIN));\n296-expression_statement-38-38", method="div(int256 a,int256 b)", type_label=expression_statement];
310 [label="38_ int256 c = a / b;\n310-new_variable-39-39", method="div(int256 a,int256 b)", type_label=new_variable];
318 [label="39_ return c;\n318-return-40-40", method="div(int256 a,int256 b)", type_label=return];
320 [label="41_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n320-function_definition-42-46", method="sub(uint256 a,uint256 b)", type_label=function_definition];
337 [label="42_ require(b <= a);\n337-expression_statement-43-43", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
344 [label="43_ uint256 c = a - b;\n344-new_variable-44-44", method="sub(uint256 a,uint256 b)", type_label=new_variable];
352 [label="44_ return c;\n352-return-45-45", method="sub(uint256 a,uint256 b)", type_label=return];
354 [label="46_ function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n        return c;\n    }\n354-function_definition-47-51", method="sub(int256 a,int256 b)", type_label=function_definition];
371 [label="47_ int256 c = a - b;\n371-new_variable-48-48", method="sub(int256 a,int256 b)", type_label=new_variable];
379 [label="48_ require((b >= 0 && c <= a) || (b < 0 && c > a));\n379-expression_statement-49-49", method="sub(int256 a,int256 b)", type_label=expression_statement];
400 [label="49_ return c;\n400-return-50-50", method="sub(int256 a,int256 b)", type_label=return];
402 [label="51_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n402-function_definition-52-56", method="add(uint256 a,uint256 b)", type_label=function_definition];
419 [label="52_ uint256 c = a + b;\n419-new_variable-53-53", method="add(uint256 a,uint256 b)", type_label=new_variable];
427 [label="53_ require(c >= a);\n427-expression_statement-54-54", method="add(uint256 a,uint256 b)", type_label=expression_statement];
434 [label="54_ return c;\n434-return-55-55", method="add(uint256 a,uint256 b)", type_label=return];
436 [label="56_ function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n        return c;\n    }\n436-function_definition-57-61", method="add(int256 a,int256 b)", type_label=function_definition];
453 [label="57_ int256 c = a + b;\n453-new_variable-58-58", method="add(int256 a,int256 b)", type_label=new_variable];
461 [label="58_ require((b >= 0 && c >= a) || (b < 0 && c < a));\n461-expression_statement-59-59", method="add(int256 a,int256 b)", type_label=expression_statement];
482 [label="59_ return c;\n482-return-60-60", method="add(int256 a,int256 b)", type_label=return];
484 [label="61_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n484-function_definition-62-65", method="mod(uint256 a,uint256 b)", type_label=function_definition];
501 [label="62_ require(b != 0);\n501-expression_statement-63-63", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
508 [label="63_ return a % b;\n508-return-64-64", method="mod(uint256 a,uint256 b)", type_label=return];
523 [label="68_ mapping (address => uint256) private _balances;\n523-new_variable-69-69", method="", type_label=new_variable];
530 [label="69_ mapping (address => mapping (address => uint256)) private _allowed;\n530-new_variable-70-70", method="", type_label=new_variable];
539 [label="70_ uint256 private _totalSupply;\n539-new_variable-71-71", method="", type_label=new_variable];
544 [label="71_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n544-function_definition-72-74", method="totalSupply()", type_label=function_definition];
553 [label="72_ return _totalSupply;\n553-return-73-73", method="totalSupply()", type_label=return];
555 [label="74_ function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n555-function_definition-75-77", method="balanceOf(address owner)", type_label=function_definition];
568 [label="75_ return _balances[owner];\n568-return-76-76", method="balanceOf(address owner)", type_label=return];
572 [label="77_ function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n572-function_definition-78-80", method="allowance(address owner,address spender)", type_label=function_definition];
589 [label="78_ return _allowed[owner][spender];\n589-return-79-79", method="allowance(address owner,address spender)", type_label=return];
595 [label="80_ function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n595-function_definition-81-84", method="transfer(address to,uint256 value)", type_label=function_definition];
611 [label="81_ _transfer(msg.sender, to, value);\n611-expression_statement-82-82", method="transfer(address to,uint256 value)", type_label=expression_statement];
622 [label="82_ return true;\n622-return-83-83", method="transfer(address to,uint256 value)", type_label=return];
625 [label="84_ function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0), \"Cannot approve for 0x0 address\");\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n625-function_definition-85-90", method="approve(address spender,uint256 value)", type_label=function_definition];
641 [label="85_ require(spender != address(0), \"Cannot approve for 0x0 address\");\n641-expression_statement-86-86", method="approve(address spender,uint256 value)", type_label=expression_statement];
653 [label="86_ _allowed[msg.sender][spender] = value;\n653-expression_statement-87-87", method="approve(address spender,uint256 value)", type_label=expression_statement];
673 [label="88_ return true;\n673-return-89-89", method="approve(address spender,uint256 value)", type_label=return];
676 [label="90_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n676-function_definition-91-96", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
696 [label="91_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n696-expression_statement-92-92", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
717 [label="92_ _transfer(from, to, value);\n717-expression_statement-93-93", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
742 [label="94_ return true;\n742-return-95-95", method="transferFrom(address from,address to,uint256 value)", type_label=return];
745 [label="96_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0), \"Cannot increaseAllowance for 0x0 address\");\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n745-function_definition-97-102", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
761 [label="97_ require(spender != address(0), \"Cannot increaseAllowance for 0x0 address\");\n761-expression_statement-98-98", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
773 [label="98_ _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n773-expression_statement-99-99", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
810 [label="100_ return true;\n810-return-101-101", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
813 [label="102_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0), \"Cannot decreaseAllowance for 0x0 address\");\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n813-function_definition-103-108", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
829 [label="103_ require(spender != address(0), \"Cannot decreaseAllowance for 0x0 address\");\n829-expression_statement-104-104", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
841 [label="104_ _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n841-expression_statement-105-105", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
878 [label="106_ return true;\n878-return-107-107", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
881 [label="108_ function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0), \"Cannot transfer to 0x0 address\");\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n881-function_definition-109-114", method="_transfer(address from,address to,uint256 value)", type_label=function_definition];
897 [label="109_ require(to != address(0), \"Cannot transfer to 0x0 address\");\n897-expression_statement-110-110", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
909 [label="110_ _balances[from] = _balances[from].sub(value);\n909-expression_statement-111-111", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
922 [label="111_ _balances[to] = _balances[to].add(value);\n922-expression_statement-112-112", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
943 [label="114_ function _mint(address account, uint256 value) internal {\n        require(account != address(0), \"Cannot mint to 0x0 address\");\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n943-function_definition-115-120", method="_mint(address account,uint256 value)", type_label=function_definition];
955 [label="115_ require(account != address(0), \"Cannot mint to 0x0 address\");\n955-expression_statement-116-116", method="_mint(address account,uint256 value)", type_label=expression_statement];
967 [label="116_ _totalSupply = _totalSupply.add(value);\n967-expression_statement-117-117", method="_mint(address account,uint256 value)", type_label=expression_statement];
976 [label="117_ _balances[account] = _balances[account].add(value);\n976-expression_statement-118-118", method="_mint(address account,uint256 value)", type_label=expression_statement];
1005 [label="122_ string public constant name = \"Coineru Platinum\";\n1005-new_variable-123-123", method="", type_label=new_variable];
1012 [label="123_ string public constant symbol = \"CPLT\";\n1012-new_variable-124-124", method="", type_label=new_variable];
1019 [label="124_ uint8 public constant decimals = 8;\n1019-new_variable-125-125", method="", type_label=new_variable];
1025 [label="125_ uint256 public constant INITIAL_SUPPLY = 26000000000 * (10 ** uint256(decimals));\n1025-new_variable-126-126", method="", type_label=new_variable];
1040 [label="127_ _mint(msg.sender, INITIAL_SUPPLY);\n1040-expression_statement-128-128", method="", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
138 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 160  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
155 -> 1199  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1199 -> 162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 1199  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
160 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
162 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
181 -> 198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
198 -> 203  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
198 -> 1242  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1242 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
203 -> 1242  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
203 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
205 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
219 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
238 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
270 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
272 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
296 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
320 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
337 -> 344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
344 -> 352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
352 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
354 -> 371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
402 -> 419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
436 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
484 -> 501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
508 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
523 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
530 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
553 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
555 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
572 -> 589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
589 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
595 -> 611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
622 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
625 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
641 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
673 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
676 -> 696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
696 -> 717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
745 -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
761 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
810 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
813 -> 829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
829 -> 841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
878 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
881 -> 897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
897 -> 909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
909 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
955 -> 967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
967 -> 976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 1012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1012 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 1025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
