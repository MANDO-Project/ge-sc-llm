digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n50-function_definition-8-10", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ return sub(a, b, \"SafeMath: subtraction overflow\");\n67-return-9-9", method="sub(uint256 a,uint256 b)", type_label=return];
77 [label="10_ function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n77-function_definition-11-15", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
98 [label="11_ require(b <= a, errorMessage);\n98-expression_statement-12-12", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
107 [label="12_ uint256 c = a - b;\n107-new_variable-13-13", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=new_variable];
115 [label="13_ return c;\n115-return-14-14", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
117 [label="15_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n117-function_definition-16-23", method="mul(uint256 a,uint256 b)", type_label=function_definition];
134 [label="16_ if_a == 0\n134-if-17-19", method="mul(uint256 a,uint256 b)", type_label=if];
5579 [label="16_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
139 [label="17_ return 0;\n139-return-18-18", method="mul(uint256 a,uint256 b)", type_label=return];
141 [label="19_ uint256 c = a * b;\n141-new_variable-20-20", method="mul(uint256 a,uint256 b)", type_label=new_variable];
149 [label="20_ require(c / a == b, \"SafeMath: multiplication overflow\");\n149-expression_statement-21-21", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
161 [label="21_ return c;\n161-return-22-22", method="mul(uint256 a,uint256 b)", type_label=return];
163 [label="23_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n163-function_definition-24-26", method="div(uint256 a,uint256 b)", type_label=function_definition];
180 [label="24_ return div(a, b, \"SafeMath: division by zero\");\n180-return-25-25", method="div(uint256 a,uint256 b)", type_label=return];
190 [label="26_ function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n190-function_definition-27-31", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
211 [label="27_ require(b > 0, errorMessage);\n211-expression_statement-28-28", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
220 [label="28_ uint256 c = a / b;\n220-new_variable-29-29", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=new_variable];
228 [label="29_ return c;\n228-return-30-30", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
230 [label="31_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n230-function_definition-32-34", method="mod(uint256 a,uint256 b)", type_label=function_definition];
247 [label="32_ return mod(a, b, \"SafeMath: modulo by zero\");\n247-return-33-33", method="mod(uint256 a,uint256 b)", type_label=return];
257 [label="34_ function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n257-function_definition-35-38", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
278 [label="35_ require(b != 0, errorMessage);\n278-expression_statement-36-36", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
287 [label="36_ return a % b;\n287-return-37-37", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
303 [label="42_ struct User {\n        uint256 totalInvestCount;\n        uint256 totalInvestAmount;\n        uint256 totalStaticCommissionWithdrawAmount;\n        uint256 totalDynamicCommissionWithdrawAmount;\n        uint256 totalWithdrawAmount;\n        uint256 downlineCount;\n        uint256 nodeCount;\n        uint256 totalDownlineInvestAmount;\n        uint256 currentInvestTime;\n        uint256 currentInvestAmount;\n        uint256 currentInvestCycle;\n        uint256 currentlevel;\n        uint256 currentStaticCommissionRatio;\n        uint256 currentStaticCommissionWithdrawAmount;\n        uint256 staticCommissionBalance;\n        uint256 dynamicCommissionBalance;\n        uint256 calcDynamicCommissionAmount;\n        address sponsorAddress;\n    }\n303-expression_statement-43-62", method="User()", type_label=expression_statement];
377 [label="62_ struct InvestRecord {\n        uint256 time;\n        uint256 amount;\n        uint256 cycle;\n    }\n377-expression_statement-63-67", method="InvestRecord()", type_label=expression_statement];
391 [label="67_ struct CommissionRecord {\n        uint256 time;\n        uint256 amount;\n    }\n391-expression_statement-68-71", method="CommissionRecord()", type_label=expression_statement];
401 [label="71_ uint256 private constant ONE_ETH = 1 ether;\n401-new_variable-72-72", method="", type_label=new_variable];
408 [label="72_ uint256 private constant ONE_DAY = 1 days;\n408-new_variable-73-73", method="", type_label=new_variable];
415 [label="73_ address private constant GENESIS_USER_ADDRESS = 0xe00d13D53Ba180EAD5F4838BD56b15629026A8C9;\n415-new_variable-74-74", method="", type_label=new_variable];
421 [label="74_ address private constant ENGINEER_ADDRESS = 0xddf0bB01f81059CCdB3D5bF5b1C7Bd540aDDFEac;\n421-new_variable-75-75", method="", type_label=new_variable];
427 [label="75_ bool private initialized = false;\n427-new_variable-76-76", method="", type_label=new_variable];
434 [label="76_ address public owner;\n434-new_variable-77-77", method="", type_label=new_variable];
439 [label="77_ mapping(address => uint) redeemableEther_re_ent18;\n439-new_variable-78-78", method="", type_label=new_variable];
445 [label="78_ function claimReward_re_ent18() public {        \n        require(redeemableEther_re_ent18[msg.sender] > 0);\n        uint transferValue_re_ent18 = redeemableEther_re_ent18[msg.sender];\n        msg.sender.transfer(transferValue_re_ent18);    \n        redeemableEther_re_ent18[msg.sender] = 0;\n    }\n445-function_definition-79-84", method="claimReward_re_ent18()", type_label=function_definition];
449 [label="79_ require(redeemableEther_re_ent18[msg.sender] > 0);\n449-expression_statement-80-80", method="claimReward_re_ent18()", type_label=expression_statement];
460 [label="80_ uint transferValue_re_ent18 = redeemableEther_re_ent18[msg.sender];\n460-new_variable-81-81", method="claimReward_re_ent18()", type_label=new_variable];
470 [label="81_ msg.sender.transfer(transferValue_re_ent18);\n470-expression_statement-82-82", method="claimReward_re_ent18()", type_label=expression_statement];
479 [label="82_ redeemableEther_re_ent18[msg.sender] = 0;\n479-expression_statement-83-83", method="claimReward_re_ent18()", type_label=expression_statement];
487 [label="84_ uint256 public totalInvestCount;\n487-new_variable-85-85", method="", type_label=new_variable];
492 [label="85_ mapping(address => uint) balances_re_ent29;\n492-new_variable-86-86", method="", type_label=new_variable];
498 [label="86_ function withdraw_balances_re_ent29 () public {\n       if (msg.sender.send(balances_re_ent29[msg.sender ]))\n          balances_re_ent29[msg.sender] = 0;\n      }\n498-function_definition-87-90", method="withdraw_balances_re_ent29()", type_label=function_definition];
502 [label="87_ if\n502-if-88-89", method="withdraw_balances_re_ent29()", type_label=if];
5947 [label="87_ end_if", method="withdraw_balances_re_ent29()", type_label=end_if];
515 [label="88_ balances_re_ent29[msg.sender] = 0;\n515-expression_statement-89-89", method="withdraw_balances_re_ent29()", type_label=expression_statement];
523 [label="90_ uint256 public totalInvestAmount;\n523-new_variable-91-91", method="", type_label=new_variable];
528 [label="91_ bool not_called_re_ent6 = true;\n528-new_variable-92-92", method="", type_label=new_variable];
534 [label="92_ function bug_re_ent6() public{\n        require(not_called_re_ent6);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent6 = false;\n    }\n534-function_definition-93-99", method="bug_re_ent6()", type_label=function_definition];
538 [label="93_ require(not_called_re_ent6);\n538-expression_statement-94-94", method="bug_re_ent6()", type_label=expression_statement];
543 [label="94_ if\n543-if-95-97", method="bug_re_ent6()", type_label=if];
5988 [label="94_ end_if", method="bug_re_ent6()", type_label=end_if];
558 [label="97_ not_called_re_ent6 = false;\n558-expression_statement-98-98", method="bug_re_ent6()", type_label=expression_statement];
563 [label="99_ uint256 public totalStaticCommissionWithdrawAmount;\n563-new_variable-100-100", method="", type_label=new_variable];
568 [label="100_ address payable lastPlayer_re_ent16;\n568-new_variable-101-101", method="", type_label=new_variable];
572 [label="101_ uint jackpot_re_ent16;\n572-new_variable-102-102", method="", type_label=new_variable];
576 [label="102_ function buyTicket_re_ent16() public{\n	    if (!(lastPlayer_re_ent16.send(jackpot_re_ent16)))\n        revert();\n      lastPlayer_re_ent16 = msg.sender;\n      jackpot_re_ent16    = address(this).balance;\n    }\n576-function_definition-103-108", method="buyTicket_re_ent16()", type_label=function_definition];
580 [label="103_ if\n580-if-104-105", method="buyTicket_re_ent16()", type_label=if];
6025 [label="103_ end_if", method="buyTicket_re_ent16()", type_label=end_if];
591 [label="105_ lastPlayer_re_ent16 = msg.sender;\n591-expression_statement-106-106", method="buyTicket_re_ent16()", type_label=expression_statement];
597 [label="106_ jackpot_re_ent16    = address(this).balance;\n597-expression_statement-107-107", method="buyTicket_re_ent16()", type_label=expression_statement];
605 [label="108_ uint256 public totalDynamicCommissionWithdrawAmount;\n605-new_variable-109-109", method="", type_label=new_variable];
610 [label="109_ mapping(address => uint) balances_re_ent24;\n610-new_variable-110-110", method="", type_label=new_variable];
616 [label="110_ function withdrawFunds_re_ent24 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent24[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent24[msg.sender] -= _weiToWithdraw;\n    }\n616-function_definition-111-115", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=function_definition];
624 [label="111_ require(balances_re_ent24[msg.sender] >= _weiToWithdraw);\n624-expression_statement-112-112", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=expression_statement];
635 [label="112_ require(msg.sender.send(_weiToWithdraw));\n635-expression_statement-113-113", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=expression_statement];
647 [label="113_ balances_re_ent24[msg.sender] -= _weiToWithdraw;\n647-expression_statement-114-114", method="withdrawFunds_re_ent24(uint256 _weiToWithdraw)", type_label=expression_statement];
655 [label="115_ uint256 public totalWithdrawAmount;\n655-new_variable-116-116", method="", type_label=new_variable];
660 [label="116_ mapping(address => uint) userBalance_re_ent5;\n660-new_variable-117-117", method="", type_label=new_variable];
666 [label="117_ function withdrawBalance_re_ent5() public{\n        if( ! (msg.sender.send(userBalance_re_ent5[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent5[msg.sender] = 0;\n    }\n666-function_definition-118-123", method="withdrawBalance_re_ent5()", type_label=function_definition];
670 [label="118_ if\n670-if-119-121", method="withdrawBalance_re_ent5()", type_label=if];
6115 [label="118_ end_if", method="withdrawBalance_re_ent5()", type_label=end_if];
688 [label="121_ userBalance_re_ent5[msg.sender] = 0;\n688-expression_statement-122-122", method="withdrawBalance_re_ent5()", type_label=expression_statement];
696 [label="123_ uint256 public totalUserCount;\n696-new_variable-124-124", method="", type_label=new_variable];
701 [label="124_ mapping(address => uint) balances_re_ent15;\n701-new_variable-125-125", method="", type_label=new_variable];
707 [label="125_ function withdraw_balances_re_ent15 () public {\n       if (msg.sender.send(balances_re_ent15[msg.sender ]))\n          balances_re_ent15[msg.sender] = 0;\n      }\n707-function_definition-126-129", method="withdraw_balances_re_ent15()", type_label=function_definition];
711 [label="126_ if\n711-if-127-128", method="withdraw_balances_re_ent15()", type_label=if];
6156 [label="126_ end_if", method="withdraw_balances_re_ent15()", type_label=end_if];
724 [label="127_ balances_re_ent15[msg.sender] = 0;\n724-expression_statement-128-128", method="withdraw_balances_re_ent15()", type_label=expression_statement];
732 [label="129_ uint256 public engineerFunds;\n732-new_variable-130-130", method="", type_label=new_variable];
737 [label="130_ uint256 counter_re_ent28 =0;\n737-new_variable-131-131", method="", type_label=new_variable];
742 [label="131_ function callme_re_ent28() public{\n        require(counter_re_ent28<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent28 += 1;\n    }\n742-function_definition-132-138", method="callme_re_ent28()", type_label=function_definition];
746 [label="132_ require(counter_re_ent28<=5);\n746-expression_statement-133-133", method="callme_re_ent28()", type_label=expression_statement];
753 [label="133_ if\n753-if-134-136", method="callme_re_ent28()", type_label=if];
6198 [label="133_ end_if", method="callme_re_ent28()", type_label=end_if];
768 [label="136_ counter_re_ent28 += 1;\n768-expression_statement-137-137", method="callme_re_ent28()", type_label=expression_statement];
772 [label="138_ uint256 public engineerWithdrawAmount;\n772-new_variable-139-139", method="", type_label=new_variable];
777 [label="139_ bool not_called_re_ent34 = true;\n777-new_variable-140-140", method="", type_label=new_variable];
783 [label="140_ function bug_re_ent34() public{\n        require(not_called_re_ent34);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent34 = false;\n    }\n783-function_definition-141-147", method="bug_re_ent34()", type_label=function_definition];
787 [label="141_ require(not_called_re_ent34);\n787-expression_statement-142-142", method="bug_re_ent34()", type_label=expression_statement];
792 [label="142_ if\n792-if-143-145", method="bug_re_ent34()", type_label=if];
6237 [label="142_ end_if", method="bug_re_ent34()", type_label=end_if];
807 [label="145_ not_called_re_ent34 = false;\n807-expression_statement-146-146", method="bug_re_ent34()", type_label=expression_statement];
812 [label="147_ uint256 public operatorFunds;\n812-new_variable-148-148", method="", type_label=new_variable];
817 [label="148_ uint256 counter_re_ent21 =0;\n817-new_variable-149-149", method="", type_label=new_variable];
822 [label="149_ function callme_re_ent21() public{\n        require(counter_re_ent21<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent21 += 1;\n    }\n822-function_definition-150-156", method="callme_re_ent21()", type_label=function_definition];
826 [label="150_ require(counter_re_ent21<=5);\n826-expression_statement-151-151", method="callme_re_ent21()", type_label=expression_statement];
833 [label="151_ if\n833-if-152-154", method="callme_re_ent21()", type_label=if];
6278 [label="151_ end_if", method="callme_re_ent21()", type_label=end_if];
848 [label="154_ counter_re_ent21 += 1;\n848-expression_statement-155-155", method="callme_re_ent21()", type_label=expression_statement];
852 [label="156_ uint256 public operatorWithdrawAmount;\n852-new_variable-157-157", method="", type_label=new_variable];
857 [label="157_ mapping(address => uint) balances_re_ent10;\n857-new_variable-158-158", method="", type_label=new_variable];
863 [label="158_ function withdrawFunds_re_ent10 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent10[msg.sender] -= _weiToWithdraw;\n    }\n863-function_definition-159-163", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=function_definition];
871 [label="159_ require(balances_re_ent10[msg.sender] >= _weiToWithdraw);\n871-expression_statement-160-160", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
882 [label="160_ require(msg.sender.send(_weiToWithdraw));\n882-expression_statement-161-161", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
894 [label="161_ balances_re_ent10[msg.sender] -= _weiToWithdraw;\n894-expression_statement-162-162", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
902 [label="163_ mapping (address => User) private userMapping;\n902-new_variable-164-164", method="", type_label=new_variable];
910 [label="164_ mapping(address => uint) balances_re_ent21;\n910-new_variable-165-165", method="", type_label=new_variable];
916 [label="165_ function withdraw_balances_re_ent21 () public {\n       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent21[msg.sender] = 0;\n      }\n916-function_definition-166-170", method="withdraw_balances_re_ent21()", type_label=function_definition];
920 [label="166_ (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n920-new_variable-167-167", method="withdraw_balances_re_ent21()", type_label=new_variable];
944 [label="167_ if\n944-if-168-169", method="withdraw_balances_re_ent21()", type_label=if];
6389 [label="167_ end_if", method="withdraw_balances_re_ent21()", type_label=end_if];
946 [label="168_ balances_re_ent21[msg.sender] = 0;\n946-expression_statement-169-169", method="withdraw_balances_re_ent21()", type_label=expression_statement];
954 [label="170_ mapping (uint256 => address) private addressMapping;\n954-new_variable-171-171", method="", type_label=new_variable];
961 [label="171_ mapping(address => uint) userBalance_re_ent12;\n961-new_variable-172-172", method="", type_label=new_variable];
967 [label="172_ function withdrawBalance_re_ent12() public{\n        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent12[msg.sender] = 0;\n    }\n967-function_definition-173-178", method="withdrawBalance_re_ent12()", type_label=function_definition];
971 [label="173_ if\n971-if-174-176", method="withdrawBalance_re_ent12()", type_label=if];
6416 [label="173_ end_if", method="withdrawBalance_re_ent12()", type_label=end_if];
989 [label="176_ userBalance_re_ent12[msg.sender] = 0;\n989-expression_statement-177-177", method="withdrawBalance_re_ent12()", type_label=expression_statement];
997 [label="178_ mapping (address => InvestRecord[9]) private investRecordMapping;\n997-new_variable-179-179", method="", type_label=new_variable];
1007 [label="179_ mapping(address => uint) redeemableEther_re_ent11;\n1007-new_variable-180-180", method="", type_label=new_variable];
1013 [label="180_ function claimReward_re_ent11() public {        \n        require(redeemableEther_re_ent11[msg.sender] > 0);\n        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n        msg.sender.transfer(transferValue_re_ent11);    \n        redeemableEther_re_ent11[msg.sender] = 0;\n    }\n1013-function_definition-181-186", method="claimReward_re_ent11()", type_label=function_definition];
1017 [label="181_ require(redeemableEther_re_ent11[msg.sender] > 0);\n1017-expression_statement-182-182", method="claimReward_re_ent11()", type_label=expression_statement];
1028 [label="182_ uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n1028-new_variable-183-183", method="claimReward_re_ent11()", type_label=new_variable];
1038 [label="183_ msg.sender.transfer(transferValue_re_ent11);\n1038-expression_statement-184-184", method="claimReward_re_ent11()", type_label=expression_statement];
1047 [label="184_ redeemableEther_re_ent11[msg.sender] = 0;\n1047-expression_statement-185-185", method="claimReward_re_ent11()", type_label=expression_statement];
1055 [label="186_ mapping (address => CommissionRecord[9]) private staticCommissionRecordMapping;\n1055-new_variable-187-187", method="", type_label=new_variable];
1065 [label="187_ mapping(address => uint) balances_re_ent1;\n1065-new_variable-188-188", method="", type_label=new_variable];
1071 [label="188_ function withdraw_balances_re_ent1 () public {\n       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent1[msg.sender] = 0;\n      }\n1071-function_definition-189-193", method="withdraw_balances_re_ent1()", type_label=function_definition];
1075 [label="189_ (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n1075-new_variable-190-190", method="withdraw_balances_re_ent1()", type_label=new_variable];
1099 [label="190_ if\n1099-if-191-192", method="withdraw_balances_re_ent1()", type_label=if];
6544 [label="190_ end_if", method="withdraw_balances_re_ent1()", type_label=end_if];
1101 [label="191_ balances_re_ent1[msg.sender] = 0;\n1101-expression_statement-192-192", method="withdraw_balances_re_ent1()", type_label=expression_statement];
1109 [label="193_ mapping (address => CommissionRecord[9]) private dynamicCommissionRecordMapping;\n1109-new_variable-194-194", method="", type_label=new_variable];
1119 [label="194_ function initialize() public {\n        require(!initialized, \"already initialized\");\n        owner = msg.sender;\n        userMapping[GENESIS_USER_ADDRESS] = User(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, address(0));\n        initialized = true;\n    }\n1119-function_definition-195-200", method="initialize()", type_label=function_definition];
1123 [label="195_ require(!initialized, \"already initialized\");\n1123-expression_statement-196-196", method="initialize()", type_label=expression_statement];
1132 [label="196_ owner = msg.sender;\n1132-expression_statement-197-197", method="initialize()", type_label=expression_statement];
1138 [label="197_ userMapping[GENESIS_USER_ADDRESS] = User(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, address(0));\n1138-expression_statement-198-198", method="initialize()", type_label=expression_statement];
1183 [label="198_ initialized = true;\n1183-expression_statement-199-199", method="initialize()", type_label=expression_statement];
1188 [label="200_ bool not_called_re_ent41 = true;\n1188-new_variable-201-201", method="", type_label=new_variable];
1194 [label="201_ function bug_re_ent41() public{\n        require(not_called_re_ent41);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent41 = false;\n    }\n1194-function_definition-202-208", method="bug_re_ent41()", type_label=function_definition];
1198 [label="202_ require(not_called_re_ent41);\n1198-expression_statement-203-203", method="bug_re_ent41()", type_label=expression_statement];
1203 [label="203_ if\n1203-if-204-206", method="bug_re_ent41()", type_label=if];
6648 [label="203_ end_if", method="bug_re_ent41()", type_label=end_if];
1218 [label="206_ not_called_re_ent41 = false;\n1218-expression_statement-207-207", method="bug_re_ent41()", type_label=expression_statement];
1225 [label="209_ initialize();\n1225-expression_statement-210-210", method="", type_label=expression_statement];
1228 [label="211_ uint256 counter_re_ent42 =0;\n1228-new_variable-212-212", method="", type_label=new_variable];
1233 [label="212_ function callme_re_ent42() public{\n        require(counter_re_ent42<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent42 += 1;\n    }\n1233-function_definition-213-219", method="callme_re_ent42()", type_label=function_definition];
1237 [label="213_ require(counter_re_ent42<=5);\n1237-expression_statement-214-214", method="callme_re_ent42()", type_label=expression_statement];
1244 [label="214_ if\n1244-if-215-217", method="callme_re_ent42()", type_label=if];
6689 [label="214_ end_if", method="callme_re_ent42()", type_label=end_if];
1259 [label="217_ counter_re_ent42 += 1;\n1259-expression_statement-218-218", method="callme_re_ent42()", type_label=expression_statement];
1263 [label="219_ modifier onlyOwner() {\n        require(msg.sender == owner, \"onlyOwner\");\n        _;\n    }\n1263-expression_statement-220-223", method="", type_label=expression_statement];
1266 [label="220_ require(msg.sender == owner, \"onlyOwner\");\n1266-expression_statement-221-221", method="", type_label=expression_statement];
1278 [label="221_ _;\n1278-expression_statement-222-222", method="", type_label=expression_statement];
1280 [label="223_ modifier onlyEngineer() {\n        require(msg.sender == ENGINEER_ADDRESS, \"onlyEngineer\");\n        _;\n    }\n1280-expression_statement-224-227", method="", type_label=expression_statement];
1283 [label="224_ require(msg.sender == ENGINEER_ADDRESS, \"onlyEngineer\");\n1283-expression_statement-225-225", method="", type_label=expression_statement];
1295 [label="225_ _;\n1295-expression_statement-226-226", method="", type_label=expression_statement];
1297 [label="227_ function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"cannot transfer ownership to address zero\");\n        owner = newOwner;\n    }\n1297-function_definition-228-231", method="transferOwnership(address newOwner)", type_label=function_definition];
1304 [label="227_ onlyOwner\n1304-expression_statement-228-228", method="transferOwnership(address newOwner)", type_label=expression_statement];
1307 [label="228_ require(newOwner != address(0), \"cannot transfer ownership to address zero\");\n1307-expression_statement-229-229", method="transferOwnership(address newOwner)", type_label=expression_statement];
1319 [label="229_ owner = newOwner;\n1319-expression_statement-230-230", method="transferOwnership(address newOwner)", type_label=expression_statement];
1323 [label="231_ address payable lastPlayer_re_ent2;\n1323-new_variable-232-232", method="", type_label=new_variable];
1327 [label="232_ uint jackpot_re_ent2;\n1327-new_variable-233-233", method="", type_label=new_variable];
1331 [label="233_ function buyTicket_re_ent2() public{\n	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))\n        revert();\n      lastPlayer_re_ent2 = msg.sender;\n      jackpot_re_ent2    = address(this).balance;\n    }\n1331-function_definition-234-239", method="buyTicket_re_ent2()", type_label=function_definition];
1335 [label="234_ if\n1335-if-235-236", method="buyTicket_re_ent2()", type_label=if];
6780 [label="234_ end_if", method="buyTicket_re_ent2()", type_label=end_if];
1346 [label="236_ lastPlayer_re_ent2 = msg.sender;\n1346-expression_statement-237-237", method="buyTicket_re_ent2()", type_label=expression_statement];
1352 [label="237_ jackpot_re_ent2    = address(this).balance;\n1352-expression_statement-238-238", method="buyTicket_re_ent2()", type_label=expression_statement];
1360 [label="239_ function getLevelByInvestAmount(uint256 investAmount) private pure returns (uint256 level) {\n        if (investAmount >= ONE_ETH.mul(11)) {\n            level = 3;\n        } else if (investAmount >= ONE_ETH.mul(6)) {\n            level = 2;\n        } else {\n            level = 1;\n        }\n    }\n1360-function_definition-240-248", method="getLevelByInvestAmount(uint256 investAmount)", type_label=function_definition];
1374 [label="240_ if\n1374-if-241-247", method="getLevelByInvestAmount(uint256 investAmount)", type_label=if];
6819 [label="240_ end_if", method="getLevelByInvestAmount(uint256 investAmount)", type_label=end_if];
1384 [label="241_ level = 3;\n1384-expression_statement-242-242", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
1388 [label="242_ if\n1388-if-243-247", method="getLevelByInvestAmount(uint256 investAmount)", type_label=if];
1398 [label="243_ level = 2;\n1398-expression_statement-244-244", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
1403 [label="245_ level = 1;\n1403-expression_statement-246-246", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
1407 [label="248_ mapping(address => uint) balances_re_ent17;\n1407-new_variable-249-249", method="", type_label=new_variable];
1413 [label="249_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n1413-function_definition-250-255", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
1421 [label="250_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n1421-expression_statement-251-251", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
1432 [label="251_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n1432-new_variable-252-252", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
1452 [label="252_ require(success);\n1452-expression_statement-253-253", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
1457 [label="253_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n1457-expression_statement-254-254", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
1465 [label="255_ function isInvestExpired(User memory user) private view returns (bool expired) {\n        expired = (user.currentInvestTime.add(user.currentInvestCycle.mul(ONE_DAY)) < now);\n    }\n1465-function_definition-256-258", method="isInvestExpired(User memory user)", type_label=function_definition];
1480 [label="256_ expired = (user.currentInvestTime.add(user.currentInvestCycle.mul(ONE_DAY)) < now);\n1480-expression_statement-257-257", method="isInvestExpired(User memory user)", type_label=expression_statement];
1501 [label="258_ address payable lastPlayer_re_ent37;\n1501-new_variable-259-259", method="", type_label=new_variable];
1505 [label="259_ uint jackpot_re_ent37;\n1505-new_variable-260-260", method="", type_label=new_variable];
1509 [label="260_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n1509-function_definition-261-266", method="buyTicket_re_ent37()", type_label=function_definition];
1513 [label="261_ if\n1513-if-262-263", method="buyTicket_re_ent37()", type_label=if];
6958 [label="261_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
1524 [label="263_ lastPlayer_re_ent37 = msg.sender;\n1524-expression_statement-264-264", method="buyTicket_re_ent37()", type_label=expression_statement];
1530 [label="264_ jackpot_re_ent37    = address(this).balance;\n1530-expression_statement-265-265", method="buyTicket_re_ent37()", type_label=expression_statement];
1538 [label="266_ function getAbortInvestAmount(User memory user) private view returns (uint256 amount) {\n        uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n        require(commissionDays >= 3, \"Invest time must >= 3days\");\n        uint256 lossRatio = 15;\n        if (commissionDays >= 60) {\n            lossRatio = 5;\n        } else if (commissionDays >= 30) {\n            lossRatio = 10;\n        }\n        amount = user.currentInvestAmount;\n        amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100));\n    }\n1538-function_definition-267-278", method="getAbortInvestAmount(User memory user)", type_label=function_definition];
1553 [label="267_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n1553-new_variable-268-268", method="getAbortInvestAmount(User memory user)", type_label=new_variable];
1571 [label="268_ require(commissionDays >= 3, \"Invest time must >= 3days\");\n1571-expression_statement-269-269", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1581 [label="269_ uint256 lossRatio = 15;\n1581-new_variable-270-270", method="getAbortInvestAmount(User memory user)", type_label=new_variable];
1587 [label="270_ if_commissionDays >= 60\n1587-if-271-275", method="getAbortInvestAmount(User memory user)", type_label=if];
7032 [label="270_ end_if", method="getAbortInvestAmount(User memory user)", type_label=end_if];
1592 [label="271_ lossRatio = 5;\n1592-expression_statement-272-272", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1596 [label="272_ if_commissionDays >= 30\n1596-if-273-275", method="getAbortInvestAmount(User memory user)", type_label=if];
1601 [label="273_ lossRatio = 10;\n1601-expression_statement-274-274", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1605 [label="275_ amount = user.currentInvestAmount;\n1605-expression_statement-276-276", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1611 [label="276_ amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100));\n1611-expression_statement-277-277", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1632 [label="278_ mapping(address => uint) balances_re_ent3;\n1632-new_variable-279-279", method="", type_label=new_variable];
1638 [label="279_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n1638-function_definition-280-285", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
1646 [label="280_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n1646-expression_statement-281-281", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1657 [label="281_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n1657-new_variable-282-282", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
1677 [label="282_ require(success);\n1677-expression_statement-283-283", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1682 [label="283_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n1682-expression_statement-284-284", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1690 [label="285_ function getStaticCommissionRatio(uint256 level, uint256 investCycle) private pure returns (uint256 ratio) {\n        if (level == 1) {\n            if (investCycle == 30) {\n                ratio = 7;\n            } else if(investCycle == 60) {\n                ratio = 8;\n            } else {\n                ratio = 9;\n            }\n        } else if (level == 2) {\n            if (investCycle == 30) {\n                ratio = 8;\n            } else if(investCycle == 60) {\n                ratio = 9;\n            } else {\n                ratio = 10;\n            }\n        } else {\n            if (investCycle == 30) {\n                ratio = 11;\n            } else if(investCycle == 60) {\n                ratio = 12;\n            } else {\n                ratio = 13;\n            }\n        }\n    }\n1690-function_definition-286-312", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=function_definition];
1708 [label="286_ if_level == 1\n1708-if-287-311", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
7153 [label="286_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1713 [label="287_ if_investCycle == 30\n1713-if-288-294", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
7158 [label="287_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1718 [label="288_ ratio = 7;\n1718-expression_statement-289-289", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1722 [label="289_ if_investCycle == 60\n1722-if-290-294", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1727 [label="290_ ratio = 8;\n1727-expression_statement-291-291", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1732 [label="292_ ratio = 9;\n1732-expression_statement-293-293", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1736 [label="294_ if_level == 2\n1736-if-295-311", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1741 [label="295_ if_investCycle == 30\n1741-if-296-302", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
7186 [label="295_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1746 [label="296_ ratio = 8;\n1746-expression_statement-297-297", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1750 [label="297_ if_investCycle == 60\n1750-if-298-302", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1755 [label="298_ ratio = 9;\n1755-expression_statement-299-299", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1760 [label="300_ ratio = 10;\n1760-expression_statement-301-301", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1765 [label="303_ if_investCycle == 30\n1765-if-304-310", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
7210 [label="303_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1770 [label="304_ ratio = 11;\n1770-expression_statement-305-305", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1774 [label="305_ if_investCycle == 60\n1774-if-306-310", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1779 [label="306_ ratio = 12;\n1779-expression_statement-307-307", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1784 [label="308_ ratio = 13;\n1784-expression_statement-309-309", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1788 [label="312_ address payable lastPlayer_re_ent9;\n1788-new_variable-313-313", method="", type_label=new_variable];
1792 [label="313_ uint jackpot_re_ent9;\n1792-new_variable-314-314", method="", type_label=new_variable];
1796 [label="314_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n1796-function_definition-315-321", method="buyTicket_re_ent9()", type_label=function_definition];
1800 [label="315_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n1800-new_variable-316-316", method="buyTicket_re_ent9()", type_label=new_variable];
1818 [label="316_ if\n1818-if-317-318", method="buyTicket_re_ent9()", type_label=if];
7263 [label="316_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
1823 [label="318_ lastPlayer_re_ent9 = msg.sender;\n1823-expression_statement-319-319", method="buyTicket_re_ent9()", type_label=expression_statement];
1829 [label="319_ jackpot_re_ent9    = address(this).balance;\n1829-expression_statement-320-320", method="buyTicket_re_ent9()", type_label=expression_statement];
1837 [label="321_ function getDynamicCommissionRatio(User memory user, uint256 depth) private pure returns (uint256 ratio) {\n        if (user.currentlevel == 1) {\n            if (depth == 1) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else if (user.currentlevel == 2) {\n            if (depth == 1) {\n                ratio = 70;\n            } else if (depth == 2) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else {\n            if (depth == 1) {\n                ratio = 100;\n            } else if (depth == 2) {\n                ratio = 70;\n            } else if (depth == 3) {\n                ratio = 50;\n            } else if (depth >= 4 && depth <= 10) {\n                ratio = 10;\n            } else if (depth >= 11 && depth <= 20) {\n                ratio = 5;\n            } else {\n                ratio = 1;\n            }\n        }\n    }\n1837-function_definition-322-352", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=function_definition];
1856 [label="322_ if_user.currentlevel == 1\n1856-if-323-351", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
7301 [label="322_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1863 [label="323_ if_depth == 1\n1863-if-324-328", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
7308 [label="323_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1868 [label="324_ ratio = 50;\n1868-expression_statement-325-325", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1873 [label="326_ ratio = 0;\n1873-expression_statement-327-327", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1877 [label="328_ if_user.currentlevel == 2\n1877-if-329-351", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1884 [label="329_ if_depth == 1\n1884-if-330-336", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
7329 [label="329_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1889 [label="330_ ratio = 70;\n1889-expression_statement-331-331", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1893 [label="331_ if_depth == 2\n1893-if-332-336", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1898 [label="332_ ratio = 50;\n1898-expression_statement-333-333", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1903 [label="334_ ratio = 0;\n1903-expression_statement-335-335", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1908 [label="337_ if_depth == 1\n1908-if-338-350", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
7353 [label="337_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1913 [label="338_ ratio = 100;\n1913-expression_statement-339-339", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1917 [label="339_ if_depth == 2\n1917-if-340-350", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1922 [label="340_ ratio = 70;\n1922-expression_statement-341-341", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1926 [label="341_ if_depth == 3\n1926-if-342-350", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1931 [label="342_ ratio = 50;\n1931-expression_statement-343-343", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1935 [label="343_ if_depth >= 4 && depth <= 10\n1935-if-344-350", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1944 [label="344_ ratio = 10;\n1944-expression_statement-345-345", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1948 [label="345_ if_depth >= 11 && depth <= 20\n1948-if-346-350", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1957 [label="346_ ratio = 5;\n1957-expression_statement-347-347", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1962 [label="348_ ratio = 1;\n1962-expression_statement-349-349", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1966 [label="352_ mapping(address => uint) redeemableEther_re_ent25;\n1966-new_variable-353-353", method="", type_label=new_variable];
1972 [label="353_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n1972-function_definition-354-359", method="claimReward_re_ent25()", type_label=function_definition];
1976 [label="354_ require(redeemableEther_re_ent25[msg.sender] > 0);\n1976-expression_statement-355-355", method="claimReward_re_ent25()", type_label=expression_statement];
1987 [label="355_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n1987-new_variable-356-356", method="claimReward_re_ent25()", type_label=new_variable];
1997 [label="356_ msg.sender.transfer(transferValue_re_ent25);\n1997-expression_statement-357-357", method="claimReward_re_ent25()", type_label=expression_statement];
2006 [label="357_ redeemableEther_re_ent25[msg.sender] = 0;\n2006-expression_statement-358-358", method="claimReward_re_ent25()", type_label=expression_statement];
2014 [label="359_ function getAvaliableStaticCommissionAmount(User memory user) private view returns (uint256 amount) {\n        if (user.currentInvestAmount == 0) {\n            amount = 0;\n        } else {\n            uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n            if (commissionDays > user.currentInvestCycle) {\n                commissionDays = user.currentInvestCycle;\n            }\n            amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n            amount = amount.div(1000);\n            amount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n        }\n    }\n2014-function_definition-360-372", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=function_definition];
2029 [label="360_ if_user.currentInvestAmount == 0\n2029-if-361-371", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=if];
7474 [label="360_ end_if", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=end_if];
2036 [label="361_ amount = 0;\n2036-expression_statement-362-362", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
2041 [label="363_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n2041-new_variable-364-364", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=new_variable];
2059 [label="364_ if_commissionDays > user.currentInvestCycle\n2059-if-365-367", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=if];
7504 [label="364_ end_if", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=end_if];
2066 [label="365_ commissionDays = user.currentInvestCycle;\n2066-expression_statement-366-366", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
2072 [label="367_ amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n2072-expression_statement-368-368", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
2090 [label="368_ amount = amount.div(1000);\n2090-expression_statement-369-369", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
2099 [label="369_ amount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n2099-expression_statement-370-370", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
2110 [label="372_ mapping(address => uint) userBalance_re_ent19;\n2110-new_variable-373-373", method="", type_label=new_variable];
2116 [label="373_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n2116-function_definition-374-379", method="withdrawBalance_re_ent19()", type_label=function_definition];
2120 [label="374_ if\n2120-if-375-377", method="withdrawBalance_re_ent19()", type_label=if];
7565 [label="374_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
2138 [label="377_ userBalance_re_ent19[msg.sender] = 0;\n2138-expression_statement-378-378", method="withdrawBalance_re_ent19()", type_label=expression_statement];
2146 [label="379_ function addInvestRecord(address userAddress, uint256 time, uint256 amount, uint256 cycle) private {\n        InvestRecord[9] storage records = investRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            InvestRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = InvestRecord(time, amount, cycle);\n    }\n2146-function_definition-380-387", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=function_definition];
2166 [label="380_ InvestRecord[9] storage records = investRecordMapping[userAddress];\n2166-new_variable-381-381", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=new_variable];
2177 [label="381_ for(i > 0;;--i)\n2177-for-382-385", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=for];
7622 [label="381_ end_loop", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=end_loop];
2188 [label="381_ --i\n2188-expression_statement-382-382", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
2191 [label="382_ InvestRecord memory prevRecord = records[i - 1];\n2191-new_variable-383-383", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=new_variable];
2202 [label="383_ records[i] = prevRecord;\n2202-expression_statement-384-384", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
2208 [label="385_ records[0] = InvestRecord(time, amount, cycle);\n2208-expression_statement-386-386", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
2221 [label="387_ mapping(address => uint) userBalance_re_ent26;\n2221-new_variable-388-388", method="", type_label=new_variable];
2227 [label="388_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n2227-function_definition-389-395", method="withdrawBalance_re_ent26()", type_label=function_definition];
2231 [label="389_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n2231-new_variable-390-390", method="withdrawBalance_re_ent26()", type_label=new_variable];
2255 [label="390_ if\n2255-if-391-393", method="withdrawBalance_re_ent26()", type_label=if];
7700 [label="390_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
2261 [label="393_ userBalance_re_ent26[msg.sender] = 0;\n2261-expression_statement-394-394", method="withdrawBalance_re_ent26()", type_label=expression_statement];
2269 [label="395_ function addStaticCommissionRecord(address userAddress, uint256 time, uint256 amount) private {\n        CommissionRecord[9] storage records = staticCommissionRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = CommissionRecord(time, amount);\n    }\n2269-function_definition-396-403", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=function_definition];
2285 [label="396_ CommissionRecord[9] storage records = staticCommissionRecordMapping[userAddress];\n2285-new_variable-397-397", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2296 [label="397_ for(i > 0;;--i)\n2296-for-398-401", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=for];
7741 [label="397_ end_loop", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=end_loop];
2307 [label="397_ --i\n2307-expression_statement-398-398", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2310 [label="398_ CommissionRecord memory prevRecord = records[i - 1];\n2310-new_variable-399-399", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2321 [label="399_ records[i] = prevRecord;\n2321-expression_statement-400-400", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2327 [label="401_ records[0] = CommissionRecord(time, amount);\n2327-expression_statement-402-402", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2338 [label="403_ bool not_called_re_ent20 = true;\n2338-new_variable-404-404", method="", type_label=new_variable];
2344 [label="404_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n2344-function_definition-405-411", method="bug_re_ent20()", type_label=function_definition];
2348 [label="405_ require(not_called_re_ent20);\n2348-expression_statement-406-406", method="bug_re_ent20()", type_label=expression_statement];
2353 [label="406_ if\n2353-if-407-409", method="bug_re_ent20()", type_label=if];
7798 [label="406_ end_if", method="bug_re_ent20()", type_label=end_if];
2368 [label="409_ not_called_re_ent20 = false;\n2368-expression_statement-410-410", method="bug_re_ent20()", type_label=expression_statement];
2373 [label="411_ function addDynamicCommissionRecord(address userAddress, uint256 time, uint256 amount) private {\n        CommissionRecord[9] storage records = dynamicCommissionRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = CommissionRecord(time, amount);\n    }\n2373-function_definition-412-419", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=function_definition];
2389 [label="412_ CommissionRecord[9] storage records = dynamicCommissionRecordMapping[userAddress];\n2389-new_variable-413-413", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2400 [label="413_ for(i > 0;;--i)\n2400-for-414-417", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=for];
7845 [label="413_ end_loop", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=end_loop];
2411 [label="413_ --i\n2411-expression_statement-414-414", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2414 [label="414_ CommissionRecord memory prevRecord = records[i - 1];\n2414-new_variable-415-415", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2425 [label="415_ records[i] = prevRecord;\n2425-expression_statement-416-416", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2431 [label="417_ records[0] = CommissionRecord(time, amount);\n2431-expression_statement-418-418", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2442 [label="419_ mapping(address => uint) redeemableEther_re_ent32;\n2442-new_variable-420-420", method="", type_label=new_variable];
2448 [label="420_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n2448-function_definition-421-426", method="claimReward_re_ent32()", type_label=function_definition];
2452 [label="421_ require(redeemableEther_re_ent32[msg.sender] > 0);\n2452-expression_statement-422-422", method="claimReward_re_ent32()", type_label=expression_statement];
2463 [label="422_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n2463-new_variable-423-423", method="claimReward_re_ent32()", type_label=new_variable];
2473 [label="423_ msg.sender.transfer(transferValue_re_ent32);\n2473-expression_statement-424-424", method="claimReward_re_ent32()", type_label=expression_statement];
2482 [label="424_ redeemableEther_re_ent32[msg.sender] = 0;\n2482-expression_statement-425-425", method="claimReward_re_ent32()", type_label=expression_statement];
2490 [label="426_ function invest(address sponsorAddress, uint256 investCycle) external payable {\n        User storage sponsor = userMapping[sponsorAddress];\n        require(sponsor.totalInvestCount > 0, \"Invalid sponsor address\");\n        require(investCycle == 30 || investCycle == 60 || investCycle == 90, \"Invalid invest cycle\");\n        uint256 investAmount = msg.value.div(ONE_ETH);\n        investAmount = investAmount.mul(ONE_ETH);\n        require(investAmount == msg.value, \"Invest amount is not integer\");\n        require(investAmount >= ONE_ETH.mul(1) && investAmount <= ONE_ETH.mul(15), \"Invalid invest amount\");\n        User memory user = userMapping[msg.sender];\n        uint256 level = getLevelByInvestAmount(investAmount);\n        if (user.totalInvestCount > 0) {\n            require(user.sponsorAddress == sponsorAddress, \"sponsor address is inconsistent\");\n            require(user.currentInvestAmount == 0, \"Dumplicate invest\");\n            require(user.currentInvestTime == 0, \"Invalid state\");\n            require(user.currentInvestCycle == 0, \"Invalid state\");\n            require(user.currentlevel == 0, \"Invalid state\");\n            require(user.currentStaticCommissionRatio == 0, \"Invalid state\");\n            require(user.currentStaticCommissionWithdrawAmount == 0, \"Invalid state\");\n            user.totalInvestCount = user.totalInvestCount.add(1);\n            user.totalInvestAmount = user.totalInvestAmount.add(investAmount);\n            user.currentInvestTime = now;\n            user.currentInvestAmount = investAmount;\n            user.currentInvestCycle = investCycle;\n            user.currentlevel = level;\n            user.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);\n            userMapping[msg.sender] = user;\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        } else {\n            userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount,\n                                           now, investAmount, investCycle, level,\n                                           getStaticCommissionRatio(level, investCycle),\n                                           0, 0, 0, 0, sponsorAddress);\n            addressMapping[totalUserCount] = msg.sender;\n            totalUserCount = totalUserCount.add(1);\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.downlineCount = sponsor.downlineCount.add(1);\n                if (addressWalker == sponsorAddress) {\n                    sponsor.nodeCount = sponsor.nodeCount.add(1);\n                }\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        }\n        addInvestRecord(msg.sender, now, investAmount, investCycle);\n        totalInvestCount = totalInvestCount.add(1);\n        totalInvestAmount = totalInvestAmount.add(investAmount);\n        engineerFunds = engineerFunds.add(investAmount.div(50));\n        operatorFunds = operatorFunds.add(investAmount.mul(3).div(100));\n    }\n2490-function_definition-427-482", method="invest(address sponsorAddress,uint256 investCycle)", type_label=function_definition];
2503 [label="427_ User storage sponsor = userMapping[sponsorAddress];\n2503-new_variable-428-428", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2512 [label="428_ require(sponsor.totalInvestCount > 0, \"Invalid sponsor address\");\n2512-expression_statement-429-429", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2524 [label="429_ require(investCycle == 30 || investCycle == 60 || investCycle == 90, \"Invalid invest cycle\");\n2524-expression_statement-430-430", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2542 [label="430_ uint256 investAmount = msg.value.div(ONE_ETH);\n2542-new_variable-431-431", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2555 [label="431_ investAmount = investAmount.mul(ONE_ETH);\n2555-expression_statement-432-432", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2564 [label="432_ require(investAmount == msg.value, \"Invest amount is not integer\");\n2564-expression_statement-433-433", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2576 [label="433_ require(investAmount >= ONE_ETH.mul(1) && investAmount <= ONE_ETH.mul(15), \"Invalid invest amount\");\n2576-expression_statement-434-434", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2600 [label="434_ User memory user = userMapping[msg.sender];\n2600-new_variable-435-435", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2611 [label="435_ uint256 level = getLevelByInvestAmount(investAmount);\n2611-new_variable-436-436", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2620 [label="436_ if_user.totalInvestCount > 0\n2620-if-437-476", method="invest(address sponsorAddress,uint256 investCycle)", type_label=if];
8065 [label="436_ end_if", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_if];
2627 [label="437_ require(user.sponsorAddress == sponsorAddress, \"sponsor address is inconsistent\");\n2627-expression_statement-438-438", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2639 [label="438_ require(user.currentInvestAmount == 0, \"Dumplicate invest\");\n2639-expression_statement-439-439", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2651 [label="439_ require(user.currentInvestTime == 0, \"Invalid state\");\n2651-expression_statement-440-440", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2663 [label="440_ require(user.currentInvestCycle == 0, \"Invalid state\");\n2663-expression_statement-441-441", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2675 [label="441_ require(user.currentlevel == 0, \"Invalid state\");\n2675-expression_statement-442-442", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2687 [label="442_ require(user.currentStaticCommissionRatio == 0, \"Invalid state\");\n2687-expression_statement-443-443", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2699 [label="443_ require(user.currentStaticCommissionWithdrawAmount == 0, \"Invalid state\");\n2699-expression_statement-444-444", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2711 [label="444_ user.totalInvestCount = user.totalInvestCount.add(1);\n2711-expression_statement-445-445", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2724 [label="445_ user.totalInvestAmount = user.totalInvestAmount.add(investAmount);\n2724-expression_statement-446-446", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2737 [label="446_ user.currentInvestTime = now;\n2737-expression_statement-447-447", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2743 [label="447_ user.currentInvestAmount = investAmount;\n2743-expression_statement-448-448", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2749 [label="448_ user.currentInvestCycle = investCycle;\n2749-expression_statement-449-449", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2755 [label="449_ user.currentlevel = level;\n2755-expression_statement-450-450", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2761 [label="450_ user.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);\n2761-expression_statement-451-451", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2772 [label="451_ userMapping[msg.sender] = user;\n2772-expression_statement-452-452", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2780 [label="452_ address addressWalker = sponsorAddress;\n2780-new_variable-453-453", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2786 [label="453_ while\n2786-while-454-458", method="invest(address sponsorAddress,uint256 investCycle)", type_label=while];
8231 [label="453_ end_loop", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_loop];
2791 [label="454_ sponsor = userMapping[addressWalker];\n2791-expression_statement-455-455", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2797 [label="455_ sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n2797-expression_statement-456-456", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2810 [label="456_ addressWalker = sponsor.sponsorAddress;\n2810-expression_statement-457-457", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2817 [label="459_ userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount,\n                                           now, investAmount, investCycle, level,\n                                           getStaticCommissionRatio(level, investCycle),\n                                           0, 0, 0, 0, sponsorAddress);\n2817-expression_statement-460-463", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2867 [label="463_ addressMapping[totalUserCount] = msg.sender;\n2867-expression_statement-464-464", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2875 [label="464_ totalUserCount = totalUserCount.add(1);\n2875-expression_statement-465-465", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2884 [label="465_ address addressWalker = sponsorAddress;\n2884-new_variable-466-466", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2890 [label="466_ while\n2890-while-467-475", method="invest(address sponsorAddress,uint256 investCycle)", type_label=while];
8335 [label="466_ end_loop", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_loop];
2895 [label="467_ sponsor = userMapping[addressWalker];\n2895-expression_statement-468-468", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2901 [label="468_ sponsor.downlineCount = sponsor.downlineCount.add(1);\n2901-expression_statement-469-469", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2914 [label="469_ if_addressWalker == sponsorAddress\n2914-if-470-472", method="invest(address sponsorAddress,uint256 investCycle)", type_label=if];
8359 [label="469_ end_if", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_if];
2919 [label="470_ sponsor.nodeCount = sponsor.nodeCount.add(1);\n2919-expression_statement-471-471", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2932 [label="472_ sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n2932-expression_statement-473-473", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2945 [label="473_ addressWalker = sponsor.sponsorAddress;\n2945-expression_statement-474-474", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2951 [label="476_ addInvestRecord(msg.sender, now, investAmount, investCycle);\n2951-expression_statement-477-477", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2964 [label="477_ totalInvestCount = totalInvestCount.add(1);\n2964-expression_statement-478-478", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2973 [label="478_ totalInvestAmount = totalInvestAmount.add(investAmount);\n2973-expression_statement-479-479", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2982 [label="479_ engineerFunds = engineerFunds.add(investAmount.div(50));\n2982-expression_statement-480-480", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2996 [label="480_ operatorFunds = operatorFunds.add(investAmount.mul(3).div(100));\n2996-expression_statement-481-481", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3015 [label="482_ mapping(address => uint) balances_re_ent38;\n3015-new_variable-483-483", method="", type_label=new_variable];
3021 [label="483_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n3021-function_definition-484-488", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
3029 [label="484_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n3029-expression_statement-485-485", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
3040 [label="485_ require(msg.sender.send(_weiToWithdraw));\n3040-expression_statement-486-486", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
3052 [label="486_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n3052-expression_statement-487-487", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
3060 [label="488_ function userWithdraw() external {\n        User storage user = userMapping[msg.sender];\n        if (user.currentInvestAmount > 0) {\n            uint256 avaliableIA = user.currentInvestAmount;\n            if (!isInvestExpired(user)) {\n                avaliableIA = getAbortInvestAmount(user);\n            }\n            uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n            user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA);\n            user.currentInvestTime = 0;\n            user.currentInvestAmount = 0;\n            user.currentInvestCycle = 0;\n            user.currentlevel = 0;\n            user.currentStaticCommissionRatio = 0;\n            user.currentStaticCommissionWithdrawAmount = 0;\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA);\n            msg.sender.transfer(avaliableIA);\n        }\n    }\n3060-function_definition-489-508", method="userWithdraw()", type_label=function_definition];
3064 [label="489_ User storage user = userMapping[msg.sender];\n3064-new_variable-490-490", method="userWithdraw()", type_label=new_variable];
3075 [label="490_ if_user.currentInvestAmount > 0\n3075-if-491-507", method="userWithdraw()", type_label=if];
8520 [label="490_ end_if", method="userWithdraw()", type_label=end_if];
3082 [label="491_ uint256 avaliableIA = user.currentInvestAmount;\n3082-new_variable-492-492", method="userWithdraw()", type_label=new_variable];
3090 [label="492_ if\n3090-if-493-495", method="userWithdraw()", type_label=if];
8535 [label="492_ end_if", method="userWithdraw()", type_label=end_if];
3097 [label="493_ avaliableIA = getAbortInvestAmount(user);\n3097-expression_statement-494-494", method="userWithdraw()", type_label=expression_statement];
3104 [label="495_ uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n3104-new_variable-496-496", method="userWithdraw()", type_label=new_variable];
3113 [label="496_ user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA);\n3113-expression_statement-497-497", method="userWithdraw()", type_label=expression_statement];
3126 [label="497_ user.currentInvestTime = 0;\n3126-expression_statement-498-498", method="userWithdraw()", type_label=expression_statement];
3132 [label="498_ user.currentInvestAmount = 0;\n3132-expression_statement-499-499", method="userWithdraw()", type_label=expression_statement];
3138 [label="499_ user.currentInvestCycle = 0;\n3138-expression_statement-500-500", method="userWithdraw()", type_label=expression_statement];
3144 [label="500_ user.currentlevel = 0;\n3144-expression_statement-501-501", method="userWithdraw()", type_label=expression_statement];
3150 [label="501_ user.currentStaticCommissionRatio = 0;\n3150-expression_statement-502-502", method="userWithdraw()", type_label=expression_statement];
3156 [label="502_ user.currentStaticCommissionWithdrawAmount = 0;\n3156-expression_statement-503-503", method="userWithdraw()", type_label=expression_statement];
3162 [label="503_ user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA);\n3162-expression_statement-504-504", method="userWithdraw()", type_label=expression_statement];
3175 [label="504_ totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA);\n3175-expression_statement-505-505", method="userWithdraw()", type_label=expression_statement];
3184 [label="505_ msg.sender.transfer(avaliableIA);\n3184-expression_statement-506-506", method="userWithdraw()", type_label=expression_statement];
3193 [label="508_ mapping(address => uint) redeemableEther_re_ent4;\n3193-new_variable-509-509", method="", type_label=new_variable];
3199 [label="509_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n3199-function_definition-510-515", method="claimReward_re_ent4()", type_label=function_definition];
3203 [label="510_ require(redeemableEther_re_ent4[msg.sender] > 0);\n3203-expression_statement-511-511", method="claimReward_re_ent4()", type_label=expression_statement];
3214 [label="511_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n3214-new_variable-512-512", method="claimReward_re_ent4()", type_label=new_variable];
3224 [label="512_ msg.sender.transfer(transferValue_re_ent4);\n3224-expression_statement-513-513", method="claimReward_re_ent4()", type_label=expression_statement];
3233 [label="513_ redeemableEther_re_ent4[msg.sender] = 0;\n3233-expression_statement-514-514", method="claimReward_re_ent4()", type_label=expression_statement];
3241 [label="515_ function userWithdrawCommission() external {\n        User storage user = userMapping[msg.sender];\n        uint256 avaliableDCB = user.dynamicCommissionBalance;\n        uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n        uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA);\n        uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB);\n        if (avaliableWithdrawAmount >= ONE_ETH.div(10)) {\n            user.staticCommissionBalance = 0;\n            user.dynamicCommissionBalance = 0;\n            user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA);\n            user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount);\n            totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount);\n            if (avaliableSCB > 0) {\n                addStaticCommissionRecord(msg.sender, now, avaliableSCB);\n            }\n            msg.sender.transfer(avaliableWithdrawAmount);\n        }\n    }\n3241-function_definition-516-537", method="userWithdrawCommission()", type_label=function_definition];
3245 [label="516_ User storage user = userMapping[msg.sender];\n3245-new_variable-517-517", method="userWithdrawCommission()", type_label=new_variable];
3256 [label="517_ uint256 avaliableDCB = user.dynamicCommissionBalance;\n3256-new_variable-518-518", method="userWithdrawCommission()", type_label=new_variable];
3264 [label="518_ uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n3264-new_variable-519-519", method="userWithdrawCommission()", type_label=new_variable];
3273 [label="519_ uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA);\n3273-new_variable-520-520", method="userWithdrawCommission()", type_label=new_variable];
3286 [label="520_ uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB);\n3286-new_variable-521-521", method="userWithdrawCommission()", type_label=new_variable];
3297 [label="521_ if\n3297-if-522-536", method="userWithdrawCommission()", type_label=if];
8742 [label="521_ end_if", method="userWithdrawCommission()", type_label=end_if];
3307 [label="522_ user.staticCommissionBalance = 0;\n3307-expression_statement-523-523", method="userWithdrawCommission()", type_label=expression_statement];
3313 [label="523_ user.dynamicCommissionBalance = 0;\n3313-expression_statement-524-524", method="userWithdrawCommission()", type_label=expression_statement];
3319 [label="524_ user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA);\n3319-expression_statement-525-525", method="userWithdrawCommission()", type_label=expression_statement];
3332 [label="525_ user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n3332-expression_statement-526-526", method="userWithdrawCommission()", type_label=expression_statement];
3345 [label="526_ user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n3345-expression_statement-527-527", method="userWithdrawCommission()", type_label=expression_statement];
3358 [label="527_ user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount);\n3358-expression_statement-528-528", method="userWithdrawCommission()", type_label=expression_statement];
3371 [label="528_ totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n3371-expression_statement-529-529", method="userWithdrawCommission()", type_label=expression_statement];
3380 [label="529_ totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n3380-expression_statement-530-530", method="userWithdrawCommission()", type_label=expression_statement];
3389 [label="530_ totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount);\n3389-expression_statement-531-531", method="userWithdrawCommission()", type_label=expression_statement];
3398 [label="531_ if_avaliableSCB > 0\n3398-if-532-534", method="userWithdrawCommission()", type_label=if];
8843 [label="531_ end_if", method="userWithdrawCommission()", type_label=end_if];
3403 [label="532_ addStaticCommissionRecord(msg.sender, now, avaliableSCB);\n3403-expression_statement-533-533", method="userWithdrawCommission()", type_label=expression_statement];
3414 [label="534_ msg.sender.transfer(avaliableWithdrawAmount);\n3414-expression_statement-535-535", method="userWithdrawCommission()", type_label=expression_statement];
3423 [label="537_ uint256 counter_re_ent7 =0;\n3423-new_variable-538-538", method="", type_label=new_variable];
3428 [label="538_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n3428-function_definition-539-545", method="callme_re_ent7()", type_label=function_definition];
3432 [label="539_ require(counter_re_ent7<=5);\n3432-expression_statement-540-540", method="callme_re_ent7()", type_label=expression_statement];
3439 [label="540_ if\n3439-if-541-543", method="callme_re_ent7()", type_label=if];
8884 [label="540_ end_if", method="callme_re_ent7()", type_label=end_if];
3454 [label="543_ counter_re_ent7 += 1;\n3454-expression_statement-544-544", method="callme_re_ent7()", type_label=expression_statement];
3458 [label="545_ function engineerWithdraw() external onlyEngineer {\n        uint256 avaliableAmount = engineerFunds;\n        if (avaliableAmount > 0) {\n            engineerFunds = 0;\n            engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }\n    }\n3458-function_definition-546-553", method="engineerWithdraw()", type_label=function_definition];
3461 [label="545_ onlyEngineer\n3461-expression_statement-546-546", method="engineerWithdraw()", type_label=expression_statement];
3464 [label="546_ uint256 avaliableAmount = engineerFunds;\n3464-new_variable-547-547", method="engineerWithdraw()", type_label=new_variable];
3470 [label="547_ if_avaliableAmount > 0\n3470-if-548-552", method="engineerWithdraw()", type_label=if];
8915 [label="547_ end_if", method="engineerWithdraw()", type_label=end_if];
3475 [label="548_ engineerFunds = 0;\n3475-expression_statement-549-549", method="engineerWithdraw()", type_label=expression_statement];
3479 [label="549_ engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount);\n3479-expression_statement-550-550", method="engineerWithdraw()", type_label=expression_statement];
3488 [label="550_ msg.sender.transfer(avaliableAmount);\n3488-expression_statement-551-551", method="engineerWithdraw()", type_label=expression_statement];
3497 [label="553_ address payable lastPlayer_re_ent23;\n3497-new_variable-554-554", method="", type_label=new_variable];
3501 [label="554_ uint jackpot_re_ent23;\n3501-new_variable-555-555", method="", type_label=new_variable];
3505 [label="555_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n3505-function_definition-556-561", method="buyTicket_re_ent23()", type_label=function_definition];
3509 [label="556_ if\n3509-if-557-558", method="buyTicket_re_ent23()", type_label=if];
8954 [label="556_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
3520 [label="558_ lastPlayer_re_ent23 = msg.sender;\n3520-expression_statement-559-559", method="buyTicket_re_ent23()", type_label=expression_statement];
3526 [label="559_ jackpot_re_ent23    = address(this).balance;\n3526-expression_statement-560-560", method="buyTicket_re_ent23()", type_label=expression_statement];
3534 [label="561_ function operatorWithdraw() external onlyOwner {\n        uint256 avaliableAmount = operatorFunds;\n        if (avaliableAmount > 0) {\n            operatorFunds = 0;\n            operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }\n    }\n3534-function_definition-562-569", method="operatorWithdraw()", type_label=function_definition];
3537 [label="561_ onlyOwner\n3537-expression_statement-562-562", method="operatorWithdraw()", type_label=expression_statement];
3540 [label="562_ uint256 avaliableAmount = operatorFunds;\n3540-new_variable-563-563", method="operatorWithdraw()", type_label=new_variable];
3546 [label="563_ if_avaliableAmount > 0\n3546-if-564-568", method="operatorWithdraw()", type_label=if];
8991 [label="563_ end_if", method="operatorWithdraw()", type_label=end_if];
3551 [label="564_ operatorFunds = 0;\n3551-expression_statement-565-565", method="operatorWithdraw()", type_label=expression_statement];
3555 [label="565_ operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount);\n3555-expression_statement-566-566", method="operatorWithdraw()", type_label=expression_statement];
3564 [label="566_ msg.sender.transfer(avaliableAmount);\n3564-expression_statement-567-567", method="operatorWithdraw()", type_label=expression_statement];
3573 [label="569_ uint256 counter_re_ent14 =0;\n3573-new_variable-570-570", method="", type_label=new_variable];
3578 [label="570_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n3578-function_definition-571-577", method="callme_re_ent14()", type_label=function_definition];
3582 [label="571_ require(counter_re_ent14<=5);\n3582-expression_statement-572-572", method="callme_re_ent14()", type_label=expression_statement];
3589 [label="572_ if\n3589-if-573-575", method="callme_re_ent14()", type_label=if];
9034 [label="572_ end_if", method="callme_re_ent14()", type_label=end_if];
3604 [label="575_ counter_re_ent14 += 1;\n3604-expression_statement-576-576", method="callme_re_ent14()", type_label=expression_statement];
3608 [label="577_ function getSummary() public view returns (uint256[11] memory) {\n        return ([address(this).balance, totalInvestCount, totalInvestAmount,\n                 totalStaticCommissionWithdrawAmount,\n                 totalDynamicCommissionWithdrawAmount,\n                 totalWithdrawAmount,\n                 totalUserCount,\n                 engineerFunds, engineerWithdrawAmount,\n                 operatorFunds, operatorWithdrawAmount]);\n    }\n3608-function_definition-578-586", method="getSummary()", type_label=function_definition];
3619 [label="578_ return ([address(this).balance, totalInvestCount, totalInvestAmount,\n                 totalStaticCommissionWithdrawAmount,\n                 totalDynamicCommissionWithdrawAmount,\n                 totalWithdrawAmount,\n                 totalUserCount,\n                 engineerFunds, engineerWithdrawAmount,\n                 operatorFunds, operatorWithdrawAmount]);\n3619-return-579-585", method="getSummary()", type_label=return];
3637 [label="586_ address payable lastPlayer_re_ent30;\n3637-new_variable-587-587", method="", type_label=new_variable];
3641 [label="587_ uint jackpot_re_ent30;\n3641-new_variable-588-588", method="", type_label=new_variable];
3645 [label="588_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n3645-function_definition-589-594", method="buyTicket_re_ent30()", type_label=function_definition];
3649 [label="589_ if\n3649-if-590-591", method="buyTicket_re_ent30()", type_label=if];
9094 [label="589_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
3660 [label="591_ lastPlayer_re_ent30 = msg.sender;\n3660-expression_statement-592-592", method="buyTicket_re_ent30()", type_label=expression_statement];
3666 [label="592_ jackpot_re_ent30    = address(this).balance;\n3666-expression_statement-593-593", method="buyTicket_re_ent30()", type_label=expression_statement];
3674 [label="594_ function getUserByAddress(address userAddress) public view returns(uint256[16] memory,\n                                                                       address) {\n        User memory user = userMapping[userAddress];\n        return ([user.totalInvestCount, user.totalInvestAmount,\n                 user.totalStaticCommissionWithdrawAmount,\n                 user.totalDynamicCommissionWithdrawAmount,\n                 user.totalWithdrawAmount,\n                 user.downlineCount, user.nodeCount,\n                 user.totalDownlineInvestAmount,\n                 user.currentInvestTime, user.currentInvestAmount,\n                 user.currentInvestCycle, user.currentlevel,\n                 user.currentStaticCommissionRatio,\n                 user.staticCommissionBalance.add(getAvaliableStaticCommissionAmount(user)),\n                 user.dynamicCommissionBalance,\n                 user.calcDynamicCommissionAmount],\n                user.sponsorAddress);\n    }\n3674-function_definition-595-611", method="getUserByAddress(address userAddress)", type_label=function_definition];
3692 [label="596_ User memory user = userMapping[userAddress];\n3692-new_variable-597-597", method="getUserByAddress(address userAddress)", type_label=new_variable];
3701 [label="597_ return ([user.totalInvestCount, user.totalInvestAmount,\n                 user.totalStaticCommissionWithdrawAmount,\n                 user.totalDynamicCommissionWithdrawAmount,\n                 user.totalWithdrawAmount,\n                 user.downlineCount, user.nodeCount,\n                 user.totalDownlineInvestAmount,\n                 user.currentInvestTime, user.currentInvestAmount,\n                 user.currentInvestCycle, user.currentlevel,\n                 user.currentStaticCommissionRatio,\n                 user.staticCommissionBalance.add(getAvaliableStaticCommissionAmount(user)),\n                 user.dynamicCommissionBalance,\n                 user.calcDynamicCommissionAmount],\n                user.sponsorAddress);\n3701-return-598-610", method="getUserByAddress(address userAddress)", type_label=return];
3763 [label="611_ mapping(address => uint) balances_re_ent8;\n3763-new_variable-612-612", method="", type_label=new_variable];
3769 [label="612_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n3769-function_definition-613-617", method="withdraw_balances_re_ent8()", type_label=function_definition];
3773 [label="613_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n3773-new_variable-614-614", method="withdraw_balances_re_ent8()", type_label=new_variable];
3797 [label="614_ if\n3797-if-615-616", method="withdraw_balances_re_ent8()", type_label=if];
9242 [label="614_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
3799 [label="615_ balances_re_ent8[msg.sender] = 0;\n3799-expression_statement-616-616", method="withdraw_balances_re_ent8()", type_label=expression_statement];
3807 [label="617_ function getUserByIndex(uint256 index) external view onlyOwner returns(uint256[16] memory,\n                                                                           address) {\n        return getUserByAddress(addressMapping[index]);\n    }\n3807-function_definition-618-621", method="getUserByIndex(uint256 index)", type_label=function_definition];
3815 [label="617_ onlyOwner\n3815-expression_statement-618-618", method="getUserByIndex(uint256 index)", type_label=expression_statement];
3827 [label="619_ return getUserByAddress(addressMapping[index]);\n3827-return-620-620", method="getUserByIndex(uint256 index)", type_label=return];
3834 [label="621_ mapping(address => uint) redeemableEther_re_ent39;\n3834-new_variable-622-622", method="", type_label=new_variable];
3840 [label="622_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n3840-function_definition-623-628", method="claimReward_re_ent39()", type_label=function_definition];
3844 [label="623_ require(redeemableEther_re_ent39[msg.sender] > 0);\n3844-expression_statement-624-624", method="claimReward_re_ent39()", type_label=expression_statement];
3855 [label="624_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n3855-new_variable-625-625", method="claimReward_re_ent39()", type_label=new_variable];
3865 [label="625_ msg.sender.transfer(transferValue_re_ent39);\n3865-expression_statement-626-626", method="claimReward_re_ent39()", type_label=expression_statement];
3874 [label="626_ redeemableEther_re_ent39[msg.sender] = 0;\n3874-expression_statement-627-627", method="claimReward_re_ent39()", type_label=expression_statement];
3882 [label="628_ function getInvestRecords(address userAddress) external view returns(uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory) {\n        InvestRecord[9] memory records = investRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount, records[0].cycle],\n                [records[1].time, records[1].amount, records[1].cycle],\n                [records[2].time, records[2].amount, records[2].cycle],\n                [records[3].time, records[3].amount, records[3].cycle],\n                [records[4].time, records[4].amount, records[4].cycle],\n                [records[5].time, records[5].amount, records[5].cycle],\n                [records[6].time, records[6].amount, records[6].cycle],\n                [records[7].time, records[7].amount, records[7].cycle],\n                [records[8].time, records[8].amount, records[8].cycle]);\n    }\n3882-function_definition-629-648", method="getInvestRecords(address userAddress)", type_label=function_definition];
3937 [label="637_ InvestRecord[9] memory records = investRecordMapping[userAddress];\n3937-new_variable-638-638", method="getInvestRecords(address userAddress)", type_label=new_variable];
3948 [label="638_ return ([records[0].time, records[0].amount, records[0].cycle],\n                [records[1].time, records[1].amount, records[1].cycle],\n                [records[2].time, records[2].amount, records[2].cycle],\n                [records[3].time, records[3].amount, records[3].cycle],\n                [records[4].time, records[4].amount, records[4].cycle],\n                [records[5].time, records[5].amount, records[5].cycle],\n                [records[6].time, records[6].amount, records[6].cycle],\n                [records[7].time, records[7].amount, records[7].cycle],\n                [records[8].time, records[8].amount, records[8].cycle]);\n3948-return-639-647", method="getInvestRecords(address userAddress)", type_label=return];
4094 [label="648_ mapping(address => uint) balances_re_ent36;\n4094-new_variable-649-649", method="", type_label=new_variable];
4100 [label="649_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n4100-function_definition-650-653", method="withdraw_balances_re_ent36()", type_label=function_definition];
4104 [label="650_ if\n4104-if-651-652", method="withdraw_balances_re_ent36()", type_label=if];
9549 [label="650_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
4117 [label="651_ balances_re_ent36[msg.sender] = 0;\n4117-expression_statement-652-652", method="withdraw_balances_re_ent36()", type_label=expression_statement];
4125 [label="653_ function getStaticCommissionRecords(address userAddress) external view returns(uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory) {\n        CommissionRecord[9] memory records = staticCommissionRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n    }\n4125-function_definition-654-673", method="getStaticCommissionRecords(address userAddress)", type_label=function_definition];
4180 [label="662_ CommissionRecord[9] memory records = staticCommissionRecordMapping[userAddress];\n4180-new_variable-663-663", method="getStaticCommissionRecords(address userAddress)", type_label=new_variable];
4191 [label="663_ return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n4191-return-664-672", method="getStaticCommissionRecords(address userAddress)", type_label=return];
4292 [label="673_ uint256 counter_re_ent35 =0;\n4292-new_variable-674-674", method="", type_label=new_variable];
4297 [label="674_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n4297-function_definition-675-681", method="callme_re_ent35()", type_label=function_definition];
4301 [label="675_ require(counter_re_ent35<=5);\n4301-expression_statement-676-676", method="callme_re_ent35()", type_label=expression_statement];
4308 [label="676_ if\n4308-if-677-679", method="callme_re_ent35()", type_label=if];
9753 [label="676_ end_if", method="callme_re_ent35()", type_label=end_if];
4323 [label="679_ counter_re_ent35 += 1;\n4323-expression_statement-680-680", method="callme_re_ent35()", type_label=expression_statement];
4327 [label="681_ function getDynamicCommissionRecords(address userAddress) external view returns(uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory) {\n        CommissionRecord[9] memory records = dynamicCommissionRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n    }\n4327-function_definition-682-701", method="getDynamicCommissionRecords(address userAddress)", type_label=function_definition];
4382 [label="690_ CommissionRecord[9] memory records = dynamicCommissionRecordMapping[userAddress];\n4382-new_variable-691-691", method="getDynamicCommissionRecords(address userAddress)", type_label=new_variable];
4393 [label="691_ return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n4393-return-692-700", method="getDynamicCommissionRecords(address userAddress)", type_label=return];
4494 [label="701_ mapping(address => uint) userBalance_re_ent40;\n4494-new_variable-702-702", method="", type_label=new_variable];
4500 [label="702_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n4500-function_definition-703-709", method="withdrawBalance_re_ent40()", type_label=function_definition];
4504 [label="703_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n4504-new_variable-704-704", method="withdrawBalance_re_ent40()", type_label=new_variable];
4528 [label="704_ if\n4528-if-705-707", method="withdrawBalance_re_ent40()", type_label=if];
9973 [label="704_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
4534 [label="707_ userBalance_re_ent40[msg.sender] = 0;\n4534-expression_statement-708-708", method="withdrawBalance_re_ent40()", type_label=expression_statement];
4542 [label="709_ function calcDynamicCommission() external onlyOwner {\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }\n    }\n4542-function_definition-710-757", method="calcDynamicCommission()", type_label=function_definition];
4545 [label="709_ onlyOwner\n4545-expression_statement-710-710", method="calcDynamicCommission()", type_label=expression_statement];
4548 [label="710_ for(i < totalUserCount;;++i)\n4548-for-711-714", method="calcDynamicCommission()", type_label=for];
9993 [label="710_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4559 [label="710_ ++i\n4559-expression_statement-711-711", method="calcDynamicCommission()", type_label=expression_statement];
4562 [label="711_ User storage user = userMapping[addressMapping[i]];\n4562-new_variable-712-712", method="calcDynamicCommission()", type_label=new_variable];
4573 [label="712_ user.calcDynamicCommissionAmount = 0;\n4573-expression_statement-713-713", method="calcDynamicCommission()", type_label=expression_statement];
4579 [label="714_ for(i < totalUserCount;;++i)\n4579-for-715-748", method="calcDynamicCommission()", type_label=for];
10024 [label="714_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4590 [label="714_ ++i\n4590-expression_statement-715-715", method="calcDynamicCommission()", type_label=expression_statement];
4593 [label="715_ User memory user = userMapping[addressMapping[i]];\n4593-new_variable-716-716", method="calcDynamicCommission()", type_label=new_variable];
4604 [label="716_ if_user.currentInvestAmount > 0\n4604-if-717-747", method="calcDynamicCommission()", type_label=if];
10049 [label="716_ end_if", method="calcDynamicCommission()", type_label=end_if];
4611 [label="717_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n4611-new_variable-718-718", method="calcDynamicCommission()", type_label=new_variable];
4629 [label="718_ if_commissionDays >= 1 && commissionDays <= user.currentInvestCycle\n4629-if-719-746", method="calcDynamicCommission()", type_label=if];
10074 [label="718_ end_if", method="calcDynamicCommission()", type_label=end_if];
4640 [label="719_ uint256 depth = 1;\n4640-new_variable-720-720", method="calcDynamicCommission()", type_label=new_variable];
4646 [label="720_ address addressWalker = user.sponsorAddress;\n4646-new_variable-721-721", method="calcDynamicCommission()", type_label=new_variable];
4654 [label="721_ while\n4654-while-722-745", method="calcDynamicCommission()", type_label=while];
10099 [label="721_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4659 [label="722_ User storage sponsor = userMapping[addressWalker];\n4659-new_variable-723-723", method="calcDynamicCommission()", type_label=new_variable];
4668 [label="723_ if_sponsor.currentInvestAmount > 0\n4668-if-724-742", method="calcDynamicCommission()", type_label=if];
10113 [label="723_ end_if", method="calcDynamicCommission()", type_label=end_if];
4675 [label="724_ uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n4675-new_variable-725-725", method="calcDynamicCommission()", type_label=new_variable];
4686 [label="725_ if_dynamicCommissionRatio > 0\n4686-if-726-741", method="calcDynamicCommission()", type_label=if];
10131 [label="725_ end_if", method="calcDynamicCommission()", type_label=end_if];
4691 [label="726_ uint256 dynamicCA = sponsor.currentInvestAmount;\n4691-new_variable-727-727", method="calcDynamicCommission()", type_label=new_variable];
4699 [label="727_ if_dynamicCA > user.currentInvestAmount\n4699-if-728-730", method="calcDynamicCommission()", type_label=if];
10144 [label="727_ end_if", method="calcDynamicCommission()", type_label=end_if];
4706 [label="728_ dynamicCA = user.currentInvestAmount;\n4706-expression_statement-729-729", method="calcDynamicCommission()", type_label=expression_statement];
4712 [label="730_ dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n4712-expression_statement-731-731", method="calcDynamicCommission()", type_label=expression_statement];
4723 [label="731_ dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n4723-expression_statement-732-732", method="calcDynamicCommission()", type_label=expression_statement];
4732 [label="732_ if_sponsor.currentlevel == 1\n4732-if-733-739", method="calcDynamicCommission()", type_label=if];
10177 [label="732_ end_if", method="calcDynamicCommission()", type_label=end_if];
4739 [label="733_ dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n4739-expression_statement-734-734", method="calcDynamicCommission()", type_label=expression_statement];
4757 [label="734_ if_sponsor.currentlevel == 2\n4757-if-735-739", method="calcDynamicCommission()", type_label=if];
4764 [label="735_ dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n4764-expression_statement-736-736", method="calcDynamicCommission()", type_label=expression_statement];
4783 [label="737_ dynamicCA = dynamicCA.div(1000 * 100);\n4783-expression_statement-738-738", method="calcDynamicCommission()", type_label=expression_statement];
4794 [label="739_ sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n4794-expression_statement-740-740", method="calcDynamicCommission()", type_label=expression_statement];
4807 [label="742_ addressWalker = sponsor.sponsorAddress;\n4807-expression_statement-743-743", method="calcDynamicCommission()", type_label=expression_statement];
4813 [label="743_ depth = depth.add(1);\n4813-expression_statement-744-744", method="calcDynamicCommission()", type_label=expression_statement];
4822 [label="748_ for(i < totalUserCount;;++i)\n4822-for-749-756", method="calcDynamicCommission()", type_label=for];
10267 [label="748_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4833 [label="748_ ++i\n4833-expression_statement-749-749", method="calcDynamicCommission()", type_label=expression_statement];
4836 [label="749_ address userAddress = addressMapping[i];\n4836-new_variable-750-750", method="calcDynamicCommission()", type_label=new_variable];
4844 [label="750_ User storage user = userMapping[userAddress];\n4844-new_variable-751-751", method="calcDynamicCommission()", type_label=new_variable];
4853 [label="751_ if_user.calcDynamicCommissionAmount > 0\n4853-if-752-755", method="calcDynamicCommission()", type_label=if];
10298 [label="751_ end_if", method="calcDynamicCommission()", type_label=end_if];
4860 [label="752_ user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n4860-expression_statement-753-753", method="calcDynamicCommission()", type_label=expression_statement];
4875 [label="753_ addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n4875-expression_statement-754-754", method="calcDynamicCommission()", type_label=expression_statement];
4886 [label="757_ mapping(address => uint) userBalance_re_ent33;\n4886-new_variable-758-758", method="", type_label=new_variable];
4892 [label="758_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n4892-function_definition-759-765", method="withdrawBalance_re_ent33()", type_label=function_definition];
4896 [label="759_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n4896-new_variable-760-760", method="withdrawBalance_re_ent33()", type_label=new_variable];
4920 [label="760_ if\n4920-if-761-763", method="withdrawBalance_re_ent33()", type_label=if];
10365 [label="760_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
4926 [label="763_ userBalance_re_ent33[msg.sender] = 0;\n4926-expression_statement-764-764", method="withdrawBalance_re_ent33()", type_label=expression_statement];
4934 [label="765_ function calcDynamicCommissionBegin(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }\n    }\n4934-function_definition-766-771", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=function_definition];
4945 [label="765_ onlyOwner\n4945-expression_statement-766-766", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
4948 [label="766_ for(i < (index + length);;++i)\n4948-for-767-770", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=for];
10393 [label="766_ end_loop", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=end_loop];
4962 [label="766_ ++i\n4962-expression_statement-767-767", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
4965 [label="767_ User storage user = userMapping[addressMapping[i]];\n4965-new_variable-768-768", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=new_variable];
4976 [label="768_ user.calcDynamicCommissionAmount = 0;\n4976-expression_statement-769-769", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
4982 [label="771_ bool not_called_re_ent27 = true;\n4982-new_variable-772-772", method="", type_label=new_variable];
4988 [label="772_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n4988-function_definition-773-779", method="bug_re_ent27()", type_label=function_definition];
4992 [label="773_ require(not_called_re_ent27);\n4992-expression_statement-774-774", method="bug_re_ent27()", type_label=expression_statement];
4997 [label="774_ if\n4997-if-775-777", method="bug_re_ent27()", type_label=if];
10442 [label="774_ end_if", method="bug_re_ent27()", type_label=end_if];
5012 [label="777_ not_called_re_ent27 = false;\n5012-expression_statement-778-778", method="bug_re_ent27()", type_label=expression_statement];
5017 [label="779_ function calcDynamicCommissionRange(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }\n    }\n5017-function_definition-780-815", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=function_definition];
5028 [label="779_ onlyOwner\n5028-expression_statement-780-780", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
5031 [label="780_ for(i < (index + length);;++i)\n5031-for-781-814", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=for];
10476 [label="780_ end_loop", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_loop];
5045 [label="780_ ++i\n5045-expression_statement-781-781", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
5048 [label="781_ User memory user = userMapping[addressMapping[i]];\n5048-new_variable-782-782", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
5059 [label="782_ if_user.currentInvestAmount > 0\n5059-if-783-813", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
10504 [label="782_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
5066 [label="783_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n5066-new_variable-784-784", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
5084 [label="784_ if_commissionDays >= 1 && commissionDays <= user.currentInvestCycle\n5084-if-785-812", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
10529 [label="784_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
5095 [label="785_ uint256 depth = 1;\n5095-new_variable-786-786", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
5101 [label="786_ address addressWalker = user.sponsorAddress;\n5101-new_variable-787-787", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
5109 [label="787_ while\n5109-while-788-811", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=while];
10554 [label="787_ end_loop", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_loop];
5114 [label="788_ User storage sponsor = userMapping[addressWalker];\n5114-new_variable-789-789", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
5123 [label="789_ if_sponsor.currentInvestAmount > 0\n5123-if-790-808", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
10568 [label="789_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
5130 [label="790_ uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n5130-new_variable-791-791", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
5141 [label="791_ if_dynamicCommissionRatio > 0\n5141-if-792-807", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
10586 [label="791_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
5146 [label="792_ uint256 dynamicCA = sponsor.currentInvestAmount;\n5146-new_variable-793-793", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
5154 [label="793_ if_dynamicCA > user.currentInvestAmount\n5154-if-794-796", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
10599 [label="793_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
5161 [label="794_ dynamicCA = user.currentInvestAmount;\n5161-expression_statement-795-795", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
5167 [label="796_ dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n5167-expression_statement-797-797", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
5178 [label="797_ dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n5178-expression_statement-798-798", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
5187 [label="798_ if_sponsor.currentlevel == 1\n5187-if-799-805", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
10632 [label="798_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
5194 [label="799_ dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n5194-expression_statement-800-800", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
5212 [label="800_ if_sponsor.currentlevel == 2\n5212-if-801-805", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
5219 [label="801_ dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n5219-expression_statement-802-802", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
5238 [label="803_ dynamicCA = dynamicCA.div(1000 * 100);\n5238-expression_statement-804-804", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
5249 [label="805_ sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n5249-expression_statement-806-806", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
5262 [label="808_ addressWalker = sponsor.sponsorAddress;\n5262-expression_statement-809-809", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
5268 [label="809_ depth = depth.add(1);\n5268-expression_statement-810-810", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
5277 [label="815_ mapping(address => uint) balances_re_ent31;\n5277-new_variable-816-816", method="", type_label=new_variable];
5283 [label="816_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n5283-function_definition-817-821", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
5291 [label="817_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n5291-expression_statement-818-818", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
5302 [label="818_ require(msg.sender.send(_weiToWithdraw));\n5302-expression_statement-819-819", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
5314 [label="819_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n5314-expression_statement-820-820", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
5322 [label="821_ function calcDynamicCommissionEnd(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }\n    }\n5322-function_definition-822-831", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=function_definition];
5333 [label="821_ onlyOwner\n5333-expression_statement-822-822", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
5336 [label="822_ for(i < (index + length);;++i)\n5336-for-823-830", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=for];
10781 [label="822_ end_loop", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=end_loop];
5350 [label="822_ ++i\n5350-expression_statement-823-823", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
5353 [label="823_ address userAddress = addressMapping[i];\n5353-new_variable-824-824", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=new_variable];
5361 [label="824_ User storage user = userMapping[userAddress];\n5361-new_variable-825-825", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=new_variable];
5370 [label="825_ if_user.calcDynamicCommissionAmount > 0\n5370-if-826-829", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=if];
10815 [label="825_ end_if", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=end_if];
5377 [label="826_ user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n5377-expression_statement-827-827", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
5392 [label="827_ addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n5392-expression_statement-828-828", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
5403 [label="831_ bool not_called_re_ent13 = true;\n5403-new_variable-832-832", method="", type_label=new_variable];
5409 [label="832_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n5409-function_definition-833-840", method="bug_re_ent13()", type_label=function_definition];
5413 [label="833_ require(not_called_re_ent13);\n5413-expression_statement-834-834", method="bug_re_ent13()", type_label=expression_statement];
5418 [label="834_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n5418-new_variable-835-835", method="bug_re_ent13()", type_label=new_variable];
5439 [label="835_ if\n5439-if-836-838", method="bug_re_ent13()", type_label=if];
10884 [label="835_ end_if", method="bug_re_ent13()", type_label=end_if];
5445 [label="838_ not_called_re_ent13 = false;\n5445-expression_statement-839-839", method="bug_re_ent13()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
77 -> 98  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
98 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
115 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
117 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 139  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
134 -> 5579  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5579 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 5579  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
139 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
163 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
190 -> 211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
211 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
228 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
230 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
257 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
303 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
460 -> 470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
470 -> 479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 515  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
502 -> 5947  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5947 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 5947  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
523 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
534 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
538 -> 543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
543 -> 5988  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
563 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
576 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 6025  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
591 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
605 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
616 -> 624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
624 -> 635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
635 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
655 -> 660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 6115  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
696 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
711 -> 724  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
711 -> 6156  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6156 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
724 -> 6156  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
732 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
753 -> 6198  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
772 -> 777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
783 -> 787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
792 -> 6237  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
812 -> 817  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
822 -> 826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
826 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 6278  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
852 -> 857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
863 -> 871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
882 -> 894  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
902 -> 910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
916 -> 920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
920 -> 944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
944 -> 946  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
944 -> 6389  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6389 -> 954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
946 -> 6389  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
954 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
967 -> 971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
971 -> 6416  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
997 -> 1007  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1013 -> 1017  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 1028  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1028 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 1047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1055 -> 1065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1071 -> 1075  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1075 -> 1099  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1099 -> 1101  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1099 -> 6544  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6544 -> 1109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1101 -> 6544  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1119 -> 1123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1123 -> 1132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1132 -> 1138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1138 -> 1183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1194 -> 1198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1198 -> 1203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1203 -> 6648  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1233 -> 1237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 1244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1244 -> 6689  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1263 -> 1280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1266 -> 1278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 1295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1297 -> 1307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1307 -> 1319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1323 -> 1327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 1335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1335 -> 6780  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1346 -> 1352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1360 -> 1374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1374 -> 1384  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1374 -> 1388  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6819 -> 1407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1384 -> 6819  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1388 -> 1398  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1388 -> 1403  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1398 -> 6819  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1403 -> 6819  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1413 -> 1421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1421 -> 1432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1432 -> 1452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1452 -> 1457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1465 -> 1480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1501 -> 1505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1509 -> 1513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1513 -> 6958  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1524 -> 1530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1538 -> 1553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1553 -> 1571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1571 -> 1581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1581 -> 1587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1587 -> 1592  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1587 -> 1596  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7032 -> 1605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1592 -> 7032  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1596 -> 1601  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1596 -> 7032  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1601 -> 7032  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1605 -> 1611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1638 -> 1646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1646 -> 1657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1657 -> 1677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1677 -> 1682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1690 -> 1708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1708 -> 1713  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1708 -> 1736  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1713 -> 1718  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1713 -> 1722  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7158 -> 1736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1718 -> 7158  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1722 -> 1727  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1722 -> 1732  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1727 -> 7158  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1732 -> 7158  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1736 -> 1741  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1736 -> 1765  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1741 -> 7153  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1741 -> 1746  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1741 -> 1750  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7186 -> 1765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1746 -> 7186  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1750 -> 1755  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1750 -> 1760  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1755 -> 7186  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1760 -> 7186  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1765 -> 7153  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1765 -> 1770  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1765 -> 1774  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7210 -> 1788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1770 -> 7210  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1774 -> 1779  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1774 -> 1784  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1779 -> 7210  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1784 -> 7210  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1788 -> 1792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1796 -> 1800  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1800 -> 1818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1818 -> 7263  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1823 -> 1829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1837 -> 1856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1856 -> 1863  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1856 -> 1877  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1863 -> 1868  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1863 -> 1873  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7308 -> 1877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1868 -> 7308  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1873 -> 7308  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1877 -> 1884  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1877 -> 1908  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1884 -> 7301  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1884 -> 1889  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1884 -> 1893  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7329 -> 1908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1889 -> 7329  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1893 -> 1898  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1893 -> 1903  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1898 -> 7329  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1903 -> 7329  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1908 -> 7301  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1908 -> 1913  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1908 -> 1917  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7353 -> 1966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1913 -> 7353  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1917 -> 1922  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1917 -> 1926  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1922 -> 7353  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1926 -> 1931  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1926 -> 1935  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1931 -> 7353  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1935 -> 1944  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1935 -> 1948  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1944 -> 7353  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1948 -> 1957  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1948 -> 1962  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1957 -> 7353  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1962 -> 7353  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1972 -> 1976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1976 -> 1987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1987 -> 1997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1997 -> 2006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2014 -> 2029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2029 -> 2036  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2029 -> 2041  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7474 -> 2110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2036 -> 7474  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2041 -> 2059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2059 -> 2066  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2059 -> 7504  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7504 -> 2072  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2066 -> 7504  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2072 -> 2090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2090 -> 2099  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2099 -> 7474  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2116 -> 2120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2120 -> 7565  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2146 -> 2166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2166 -> 2177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2177 -> 2191  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2177 -> 7622  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7622 -> 2208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2188 -> 2177  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2191 -> 2202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2202 -> 2188  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2227 -> 2231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2231 -> 2255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2255 -> 7700  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2269 -> 2285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2285 -> 2296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2296 -> 2310  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2296 -> 7741  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7741 -> 2327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2307 -> 2296  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2310 -> 2321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2321 -> 2307  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2344 -> 2348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2348 -> 2353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2353 -> 7798  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2373 -> 2389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2389 -> 2400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2400 -> 2414  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2400 -> 7845  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7845 -> 2431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2411 -> 2400  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2414 -> 2425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2425 -> 2411  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2448 -> 2452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2452 -> 2463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2463 -> 2473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2473 -> 2482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2490 -> 2503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2503 -> 2512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2512 -> 2524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2524 -> 2542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2542 -> 2555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2555 -> 2564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2564 -> 2576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2576 -> 2600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2600 -> 2611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2611 -> 2620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2620 -> 2627  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2620 -> 2817  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2627 -> 2639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2639 -> 2651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2651 -> 2663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2663 -> 2675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2675 -> 2687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2687 -> 2699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2699 -> 2711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2711 -> 2724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2724 -> 2737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2737 -> 2743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2743 -> 2749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2749 -> 2755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2755 -> 2761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2761 -> 2772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2772 -> 2780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2780 -> 2786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2786 -> 2791  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2786 -> 8231  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8231 -> 2817  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2791 -> 2797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2797 -> 2810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2810 -> 2786  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2817 -> 2867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2867 -> 2875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2875 -> 2884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2884 -> 2890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2890 -> 8065  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2890 -> 2895  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2890 -> 8335  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8335 -> 2951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2895 -> 2901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2901 -> 2914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2914 -> 2919  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2914 -> 8359  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8359 -> 2932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2919 -> 8359  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2932 -> 2945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2945 -> 2890  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2951 -> 2964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2964 -> 2973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2973 -> 2982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2982 -> 2996  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3021 -> 3029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3029 -> 3040  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3040 -> 3052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3060 -> 3064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3064 -> 3075  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3075 -> 3082  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3075 -> 8520  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8520 -> 3193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3082 -> 3090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3090 -> 3097  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3090 -> 8535  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8535 -> 3104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3097 -> 8535  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3104 -> 3113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3113 -> 3126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3126 -> 3132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3132 -> 3138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3138 -> 3144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3144 -> 3150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3150 -> 3156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3156 -> 3162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3162 -> 3175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3175 -> 3184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3184 -> 8520  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3199 -> 3203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3203 -> 3214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3214 -> 3224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3224 -> 3233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3241 -> 3245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3245 -> 3256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3256 -> 3264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3264 -> 3273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3273 -> 3286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3286 -> 3297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3297 -> 3307  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3297 -> 8742  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8742 -> 3423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3307 -> 3313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3313 -> 3319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3319 -> 3332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3332 -> 3345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3345 -> 3358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3358 -> 3371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3371 -> 3380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3380 -> 3389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3389 -> 3398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3398 -> 3403  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3398 -> 8843  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8843 -> 3414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3403 -> 8843  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3414 -> 8742  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3428 -> 3432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3432 -> 3439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3439 -> 8884  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3458 -> 3464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3464 -> 3470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3470 -> 3475  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3470 -> 8915  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8915 -> 3497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3475 -> 3479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3479 -> 3488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3488 -> 8915  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3497 -> 3501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3505 -> 3509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3509 -> 8954  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3520 -> 3526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3534 -> 3540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3540 -> 3546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3546 -> 3551  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3546 -> 8991  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8991 -> 3573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3551 -> 3555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3555 -> 3564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3564 -> 8991  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3578 -> 3582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3582 -> 3589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3589 -> 9034  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3608 -> 3619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3619 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3637 -> 3641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3645 -> 3649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3649 -> 9094  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3660 -> 3666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3674 -> 3692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3692 -> 3701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3701 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3769 -> 3773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3773 -> 3797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3797 -> 3799  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3797 -> 9242  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9242 -> 3807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3799 -> 9242  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3807 -> 3827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3827 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3840 -> 3844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3844 -> 3855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3855 -> 3865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3865 -> 3874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3882 -> 3937  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3937 -> 3948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3948 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4100 -> 4104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4104 -> 4117  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4104 -> 9549  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9549 -> 4125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4117 -> 9549  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4125 -> 4180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4180 -> 4191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4191 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4297 -> 4301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4301 -> 4308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4308 -> 9753  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4327 -> 4382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4382 -> 4393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4393 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4500 -> 4504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4504 -> 4528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4528 -> 9973  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4542 -> 4548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4548 -> 4562  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4548 -> 9993  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9993 -> 4579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4559 -> 4548  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4562 -> 4573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4573 -> 4559  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4579 -> 4593  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4579 -> 10024  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10024 -> 4822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4590 -> 4579  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4593 -> 4604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4604 -> 4611  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4604 -> 10049  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10049 -> 4590  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4611 -> 4629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4629 -> 4640  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4629 -> 10074  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4640 -> 4646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4646 -> 4654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4654 -> 4659  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4654 -> 10099  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10099 -> 4590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4659 -> 4668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4668 -> 4675  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4668 -> 10113  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4675 -> 4686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4686 -> 4691  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4686 -> 10131  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10131 -> 4807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4691 -> 4699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4699 -> 4706  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4699 -> 10144  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10144 -> 4712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4706 -> 10144  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4712 -> 4723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4723 -> 4732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4732 -> 4739  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4732 -> 4757  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10177 -> 4794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4739 -> 10177  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4757 -> 4764  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4757 -> 4783  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4764 -> 10177  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4783 -> 10177  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4794 -> 10131  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4807 -> 4813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4813 -> 4654  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4822 -> 4836  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4822 -> 10267  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10267 -> 4886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4833 -> 4822  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4836 -> 4844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4844 -> 4853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4853 -> 4860  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4853 -> 10298  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10298 -> 4833  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
10298 -> 4833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
4860 -> 4875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4875 -> 10298  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4892 -> 4896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4896 -> 4920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4920 -> 10365  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4934 -> 4948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4948 -> 4965  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4948 -> 10393  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10393 -> 4982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4962 -> 4948  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4965 -> 4976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4976 -> 4962  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4988 -> 4992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4992 -> 4997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4997 -> 10442  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5017 -> 5031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5031 -> 5048  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5031 -> 10476  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10476 -> 5277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5045 -> 5031  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
5048 -> 5059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5059 -> 5066  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5059 -> 10504  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10504 -> 5045  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
5066 -> 5084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5084 -> 5095  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5084 -> 10529  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5095 -> 5101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5101 -> 5109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5109 -> 5114  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5109 -> 10554  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10554 -> 5045  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5114 -> 5123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5123 -> 5130  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5123 -> 10568  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5130 -> 5141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5141 -> 5146  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5141 -> 10586  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10586 -> 5262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5146 -> 5154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5154 -> 5161  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5154 -> 10599  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10599 -> 5167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5161 -> 10599  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5167 -> 5178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5178 -> 5187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5187 -> 5194  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5187 -> 5212  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10632 -> 5249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5194 -> 10632  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5212 -> 5219  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5212 -> 5238  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5219 -> 10632  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5238 -> 10632  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5249 -> 10586  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5262 -> 5268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5268 -> 5109  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
5283 -> 5291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5291 -> 5302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5302 -> 5314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5322 -> 5336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5336 -> 5353  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5336 -> 10781  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10781 -> 5403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5350 -> 5336  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
5353 -> 5361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5361 -> 5370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5370 -> 5377  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5370 -> 10815  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10815 -> 5350  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
10815 -> 5350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
5377 -> 5392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5392 -> 10815  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5409 -> 5413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5413 -> 5418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5418 -> 5439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5439 -> 10884  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
