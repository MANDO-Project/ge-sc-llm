digraph  {
13 [label="2_ uint256 public totalSupply = 99e26;\n13-new_variable-3-3", method="", type_label=new_variable];
19 [label="3_ function balanceOf(address who) public view returns (uint256);\n19-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
31 [label="4_ function transfer(address to, uint256 value) public returns (bool);\n31-function_definition-5-5", method="transfer(address to,uint256 value)", type_label=function_definition];
66 [label="8_ bytes32 public name = \"VIP\";\n66-new_variable-9-9", method="", type_label=new_variable];
73 [label="9_ bytes32 public symbol = \"VIP\";\n73-new_variable-10-10", method="", type_label=new_variable];
80 [label="10_ uint256 public decimals = 18;\n80-new_variable-11-11", method="", type_label=new_variable];
86 [label="11_ address private owner = address(0);\n86-new_variable-12-12", method="", type_label=new_variable];
94 [label="12_ bool private active = false;\n94-new_variable-13-13", method="", type_label=new_variable];
101 [label="13_ mapping(address => uint256) private balances;\n101-new_variable-14-14", method="", type_label=new_variable];
120 [label="16_ owner = msg.sender;\n120-expression_statement-17-17", method="", type_label=expression_statement];
126 [label="17_ balances[owner] = totalSupply;\n126-expression_statement-18-18", method="", type_label=expression_statement];
132 [label="18_ active = true;\n132-expression_statement-19-19", method="", type_label=expression_statement];
137 [label="20_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n137-expression_statement-21-24", method="", type_label=expression_statement];
140 [label="21_ require(msg.sender == owner);\n140-expression_statement-22-22", method="", type_label=expression_statement];
149 [label="22_ _;\n149-expression_statement-23-23", method="", type_label=expression_statement];
151 [label="24_ function transfer(address _to, uint256 _value) public returns (bool) {\n    require(active);\n    require(_to != address(0));\n    require(_to != msg.sender);\n    require(_value <= balances[msg.sender]);\n    uint256 bal = balances[_to] + _value;\n    require(bal >= balances[_to]);\n    balances[msg.sender] = balances[msg.sender] - _value;\n    balances[_to] = bal;\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n151-function_definition-25-36", method="transfer(address _to,uint256 _value)", type_label=function_definition];
167 [label="25_ require(active);\n167-expression_statement-26-26", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
172 [label="26_ require(_to != address(0));\n172-expression_statement-27-27", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
181 [label="27_ require(_to != msg.sender);\n181-expression_statement-28-28", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
190 [label="28_ require(_value <= balances[msg.sender]);\n190-expression_statement-29-29", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
201 [label="29_ uint256 bal = balances[_to] + _value;\n201-new_variable-30-30", method="transfer(address _to,uint256 _value)", type_label=new_variable];
211 [label="30_ require(bal >= balances[_to]);\n211-expression_statement-31-31", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
220 [label="31_ balances[msg.sender] = balances[msg.sender] - _value;\n220-expression_statement-32-32", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
234 [label="32_ balances[_to] = bal;\n234-expression_statement-33-33", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
250 [label="34_ return true;\n250-return-35-35", method="transfer(address _to,uint256 _value)", type_label=return];
253 [label="36_ function balanceOf(address _owner) public view returns (uint256 bal) {\n    require(active);\n    return balances[_owner];\n  }\n253-function_definition-37-40", method="balanceOf(address _owner)", type_label=function_definition];
267 [label="37_ require(active);\n267-expression_statement-38-38", method="balanceOf(address _owner)", type_label=expression_statement];
272 [label="38_ return balances[_owner];\n272-return-39-39", method="balanceOf(address _owner)", type_label=return];
276 [label="40_ function deactivate() public onlyOwner {\n    active = false;\n  }\n276-function_definition-41-43", method="deactivate()", type_label=function_definition];
279 [label="40_ onlyOwner\n279-expression_statement-41-41", method="deactivate()", type_label=expression_statement];
282 [label="41_ active = false;\n282-expression_statement-42-42", method="deactivate()", type_label=expression_statement];
287 [label="43_ function activate() public onlyOwner {\n    active = true;\n  }\n287-function_definition-44-46", method="activate()", type_label=function_definition];
290 [label="43_ onlyOwner\n290-expression_statement-44-44", method="activate()", type_label=expression_statement];
293 [label="44_ active = true;\n293-expression_statement-45-45", method="activate()", type_label=expression_statement];
298 [label="46_ function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n298-function_definition-47-51", method="transferOwnership(address newOwner)", type_label=function_definition];
305 [label="46_ onlyOwner\n305-expression_statement-47-47", method="transferOwnership(address newOwner)", type_label=expression_statement];
308 [label="47_ require(newOwner != address(0));\n308-expression_statement-48-48", method="transferOwnership(address newOwner)", type_label=expression_statement];
323 [label="49_ owner = newOwner;\n323-expression_statement-50-50", method="transferOwnership(address newOwner)", type_label=expression_statement];
327 [label="51_ function kill() public onlyOwner {\n    require(!active);\n    selfdestruct(msg.sender);\n  }\n327-function_definition-52-55", method="kill()", type_label=function_definition];
330 [label="51_ onlyOwner\n330-expression_statement-52-52", method="kill()", type_label=expression_statement];
333 [label="52_ require(!active);\n333-expression_statement-53-53", method="kill()", type_label=expression_statement];
339 [label="53_ selfdestruct(msg.sender);\n339-expression_statement-54-54", method="kill()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
66 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 86  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
86 -> 94  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
94 -> 101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
126 -> 132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
167 -> 172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
172 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
190 -> 201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
201 -> 211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
211 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
250 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
253 -> 267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
267 -> 272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
272 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
276 -> 282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
327 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
