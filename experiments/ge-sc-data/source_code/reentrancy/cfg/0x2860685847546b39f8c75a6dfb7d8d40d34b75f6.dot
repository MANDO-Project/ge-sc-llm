digraph  {
12 [label="3_ address public owner;\n12-new_variable-4-4", method="", type_label=new_variable];
35 [label="11_ owner = msg.sender;\n35-expression_statement-12-12", method="", type_label=expression_statement];
41 [label="13_ modifier onlyOwner() \n    {\n        require(msg.sender == owner, \"Incorrect Owner\");\n        _;\n    }\n41-expression_statement-14-18", method="", type_label=expression_statement];
44 [label="15_ require(msg.sender == owner, \"Incorrect Owner\");\n44-expression_statement-16-16", method="", type_label=expression_statement];
56 [label="16_ _;\n56-expression_statement-17-17", method="", type_label=expression_statement];
58 [label="18_ function transferOwnership(address _newOwner) public\n    onlyOwner \n    {\n        require(_newOwner != address(0), \"Address should not be 0x0\");\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n58-function_definition-19-25", method="transferOwnership(address _newOwner)", type_label=function_definition];
65 [label="19_ onlyOwner\n65-expression_statement-20-20", method="transferOwnership(address _newOwner)", type_label=expression_statement];
68 [label="21_ require(_newOwner != address(0), \"Address should not be 0x0\");\n68-expression_statement-22-22", method="transferOwnership(address _newOwner)", type_label=expression_statement];
86 [label="23_ owner = _newOwner;\n86-expression_statement-24-24", method="transferOwnership(address _newOwner)", type_label=expression_statement];
90 [label="25_ function renounceOwnership() public \n    onlyOwner \n    {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n90-function_definition-26-31", method="renounceOwnership()", type_label=function_definition];
93 [label="26_ onlyOwner\n93-expression_statement-27-27", method="renounceOwnership()", type_label=expression_statement];
100 [label="29_ owner = address(0);\n100-expression_statement-30-30", method="renounceOwnership()", type_label=expression_statement];
109 [label="34_ function mul(uint256 a, uint256 b) internal pure \n    returns (uint256 c) \n    {\n        if (a == 0) \n        {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n109-function_definition-35-45", method="mul(uint256 a,uint256 b)", type_label=function_definition];
127 [label="37_ if_a == 0\n127-if-38-41", method="mul(uint256 a,uint256 b)", type_label=if];
1335 [label="37_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
132 [label="39_ return 0;\n132-return-40-40", method="mul(uint256 a,uint256 b)", type_label=return];
134 [label="41_ c = a * b;\n134-expression_statement-42-42", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
140 [label="42_ assert(c / a == b);\n140-expression_statement-43-43", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
149 [label="43_ return c;\n149-return-44-44", method="mul(uint256 a,uint256 b)", type_label=return];
151 [label="45_ function div(uint256 a, uint256 b) internal pure \n    returns (uint256) \n    {\n        return a / b;\n    }\n151-function_definition-46-50", method="div(uint256 a,uint256 b)", type_label=function_definition];
168 [label="48_ return a / b;\n168-return-49-49", method="div(uint256 a,uint256 b)", type_label=return];
172 [label="50_ function sub(uint256 a, uint256 b) internal pure \n    returns (uint256) \n    {\n        assert(b <= a);\n        return a - b;\n    }\n172-function_definition-51-56", method="sub(uint256 a,uint256 b)", type_label=function_definition];
189 [label="53_ assert(b <= a);\n189-expression_statement-54-54", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
196 [label="54_ return a - b;\n196-return-55-55", method="sub(uint256 a,uint256 b)", type_label=return];
200 [label="56_ function add(uint256 a, uint256 b) internal pure \n    returns (uint256 c) \n    {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n200-function_definition-57-63", method="add(uint256 a,uint256 b)", type_label=function_definition];
218 [label="59_ c = a + b;\n218-expression_statement-60-60", method="add(uint256 a,uint256 b)", type_label=expression_statement];
224 [label="60_ assert(c >= a);\n224-expression_statement-61-61", method="add(uint256 a,uint256 b)", type_label=expression_statement];
231 [label="61_ return c;\n231-return-62-62", method="add(uint256 a,uint256 b)", type_label=return];
236 [label="66_ function totalSupply() public view returns (uint256);\n236-function_definition-67-67", method="totalSupply()", type_label=function_definition];
244 [label="67_ function balanceOf(address who) public view returns (uint256);\n244-function_definition-68-68", method="balanceOf(address who)", type_label=function_definition];
256 [label="68_ function transfer(address to, uint256 value) public returns (bool);\n256-function_definition-69-69", method="transfer(address to,uint256 value)", type_label=function_definition];
296 [label="74_ mapping(address => uint256) public balances;\n296-new_variable-75-75", method="", type_label=new_variable];
303 [label="75_ uint256 public totalSupply_;\n303-new_variable-76-76", method="", type_label=new_variable];
308 [label="76_ function totalSupply() public view \n    returns (uint256) \n    {\n        return totalSupply_;\n    }\n308-function_definition-77-81", method="totalSupply()", type_label=function_definition];
317 [label="79_ return totalSupply_;\n317-return-80-80", method="totalSupply()", type_label=return];
319 [label="81_ function transfer(address _to, uint256 _value) public \n    returns (bool) \n    {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n319-function_definition-82-91", method="transfer(address _to,uint256 _value)", type_label=function_definition];
335 [label="84_ require(_to != address(0));\n335-expression_statement-85-85", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
344 [label="85_ require(_value <= balances[msg.sender]);\n344-expression_statement-86-86", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
355 [label="86_ balances[msg.sender] = balances[msg.sender].sub(_value);\n355-expression_statement-87-87", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
372 [label="87_ balances[_to] = balances[_to].add(_value);\n372-expression_statement-88-88", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
395 [label="89_ return true;\n395-return-90-90", method="transfer(address _to,uint256 _value)", type_label=return];
398 [label="91_ function balanceOf(address _owner) public view \n    returns (uint256) \n    {\n        return balances[_owner];\n    }\n398-function_definition-92-96", method="balanceOf(address _owner)", type_label=function_definition];
411 [label="94_ return balances[_owner];\n411-return-95-95", method="balanceOf(address _owner)", type_label=return];
434 [label="100_ function burn(uint256 value) public\n    onlyOwner\n    {\n        address burnAddress = msg.sender;\n        require(value <= balances[burnAddress]);\n        balances[burnAddress] = balances[burnAddress].sub(value);\n        totalSupply_ = totalSupply_.sub(value);\n        emit Burn(burnAddress, value);\n    }\n434-function_definition-101-109", method="burn(uint256 value)", type_label=function_definition];
441 [label="101_ onlyOwner\n441-expression_statement-102-102", method="burn(uint256 value)", type_label=expression_statement];
444 [label="103_ address burnAddress = msg.sender;\n444-new_variable-104-104", method="burn(uint256 value)", type_label=new_variable];
452 [label="104_ require(value <= balances[burnAddress]);\n452-expression_statement-105-105", method="burn(uint256 value)", type_label=expression_statement];
461 [label="105_ balances[burnAddress] = balances[burnAddress].sub(value);\n461-expression_statement-106-106", method="burn(uint256 value)", type_label=expression_statement];
474 [label="106_ totalSupply_ = totalSupply_.sub(value);\n474-expression_statement-107-107", method="burn(uint256 value)", type_label=expression_statement];
495 [label="112_ function allowance(address owner, address spender) public view returns (uint256);\n495-function_definition-113-113", method="allowance(address owner,address spender)", type_label=function_definition];
511 [label="113_ function transferFrom(address from, address to, uint256 value) public returns (bool);\n511-function_definition-114-114", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
530 [label="114_ function approve(address spender, uint256 value) public returns (bool);\n530-function_definition-115-115", method="approve(address spender,uint256 value)", type_label=function_definition];
568 [label="119_ mapping (address => mapping (address => uint256)) internal allowed;\n568-new_variable-120-120", method="", type_label=new_variable];
577 [label="120_ function transferFrom(address _from, address _to, uint256 _value) public\n    returns (bool)\n    {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n577-function_definition-121-132", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
597 [label="123_ require(_to != address(0));\n597-expression_statement-124-124", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
606 [label="124_ require(_value <= balances[_from]);\n606-expression_statement-125-125", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
615 [label="125_ require(_value <= allowed[_from][msg.sender]);\n615-expression_statement-126-126", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
628 [label="126_ balances[_from] = balances[_from].sub(_value);\n628-expression_statement-127-127", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
641 [label="127_ balances[_to] = balances[_to].add(_value);\n641-expression_statement-128-128", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
654 [label="128_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n654-expression_statement-129-129", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
683 [label="130_ return true;\n683-return-131-131", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
686 [label="132_ function approve(address _spender, uint256 _value) public \n    returns (bool) \n    {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n686-function_definition-133-139", method="approve(address _spender,uint256 _value)", type_label=function_definition];
702 [label="135_ allowed[msg.sender][_spender] = _value;\n702-expression_statement-136-136", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
722 [label="137_ return true;\n722-return-138-138", method="approve(address _spender,uint256 _value)", type_label=return];
725 [label="139_ function allowance(address _owner, address _spender) public view\n    returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n725-function_definition-140-144", method="allowance(address _owner,address _spender)", type_label=function_definition];
742 [label="142_ return allowed[_owner][_spender];\n742-return-143-143", method="allowance(address _owner,address _spender)", type_label=return];
748 [label="144_ function increaseApproval(address _spender, uint256 _addedValue) public\n    returns (bool)\n    {\n        allowed[msg.sender][_spender] = (\n        allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n748-function_definition-145-152", method="increaseApproval(address _spender,uint256 _addedValue)", type_label=function_definition];
764 [label="147_ allowed[msg.sender][_spender] = (\n        allowed[msg.sender][_spender].add(_addedValue));\n764-expression_statement-148-149", method="increaseApproval(address _spender,uint256 _addedValue)", type_label=expression_statement];
802 [label="150_ return true;\n802-return-151-151", method="increaseApproval(address _spender,uint256 _addedValue)", type_label=return];
805 [label="152_ function decreaseApproval(address _spender, uint256 _subtractedValue) public\n    returns (bool)\n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) \n        {\n            allowed[msg.sender][_spender] = 0;\n        } \n        else \n        {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n805-function_definition-153-167", method="decreaseApproval(address _spender,uint256 _subtractedValue)", type_label=function_definition];
821 [label="155_ uint256 oldValue = allowed[msg.sender][_spender];\n821-new_variable-156-156", method="decreaseApproval(address _spender,uint256 _subtractedValue)", type_label=new_variable];
833 [label="156_ if__subtractedValue > oldValue\n833-if-157-164", method="decreaseApproval(address _spender,uint256 _subtractedValue)", type_label=if];
2041 [label="156_ end_if", method="decreaseApproval(address _spender,uint256 _subtractedValue)", type_label=end_if];
838 [label="158_ allowed[msg.sender][_spender] = 0;\n838-expression_statement-159-159", method="decreaseApproval(address _spender,uint256 _subtractedValue)", type_label=expression_statement];
849 [label="162_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n849-expression_statement-163-163", method="decreaseApproval(address _spender,uint256 _subtractedValue)", type_label=expression_statement];
880 [label="165_ return true;\n880-return-166-166", method="decreaseApproval(address _spender,uint256 _subtractedValue)", type_label=return];
902 [label="171_ function mint(address _to, uint256 _amount) public\n    onlyOwner\n    returns (bool)\n    {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n902-function_definition-172-181", method="mint(address _to,uint256 _amount)", type_label=function_definition];
913 [label="172_ onlyOwner\n913-expression_statement-173-173", method="mint(address _to,uint256 _amount)", type_label=expression_statement];
920 [label="175_ totalSupply_ = totalSupply_.add(_amount);\n920-expression_statement-176-176", method="mint(address _to,uint256 _amount)", type_label=expression_statement];
929 [label="176_ balances[_to] = balances[_to].add(_amount);\n929-expression_statement-177-177", method="mint(address _to,uint256 _amount)", type_label=expression_statement];
958 [label="179_ return true;\n958-return-180-180", method="mint(address _to,uint256 _amount)", type_label=return];
971 [label="186_ bool public paused = false;\n971-new_variable-187-187", method="", type_label=new_variable];
978 [label="187_ modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n978-expression_statement-188-191", method="", type_label=expression_statement];
981 [label="188_ require(!paused);\n981-expression_statement-189-189", method="", type_label=expression_statement];
987 [label="189_ _;\n987-expression_statement-190-190", method="", type_label=expression_statement];
989 [label="191_ modifier whenPaused() {\n        require(paused);\n        _;\n    }\n989-expression_statement-192-195", method="", type_label=expression_statement];
992 [label="192_ require(paused);\n992-expression_statement-193-193", method="", type_label=expression_statement];
997 [label="193_ _;\n997-expression_statement-194-194", method="", type_label=expression_statement];
999 [label="195_ function pause() public\n    onlyOwner \n    whenNotPaused  \n    {\n        paused = true;\n        emit Pause();\n    }\n999-function_definition-196-202", method="pause()", type_label=function_definition];
1002 [label="196_ onlyOwner\n1002-expression_statement-197-197", method="pause()", type_label=expression_statement];
1004 [label="197_ whenNotPaused\n1004-expression_statement-198-198", method="pause()", type_label=expression_statement];
1007 [label="199_ paused = true;\n1007-expression_statement-200-200", method="pause()", type_label=expression_statement];
1014 [label="202_ function unpause() public\n    onlyOwner \n    whenPaused  \n    {\n        paused = false;\n        emit Unpause();\n    }\n1014-function_definition-203-209", method="unpause()", type_label=function_definition];
1017 [label="203_ onlyOwner\n1017-expression_statement-204-204", method="unpause()", type_label=expression_statement];
1019 [label="204_ whenPaused\n1019-expression_statement-205-205", method="unpause()", type_label=expression_statement];
1022 [label="206_ paused = false;\n1022-expression_statement-207-207", method="unpause()", type_label=expression_statement];
1038 [label="212_ function transfer(address _to, uint256 _value) public\n    whenNotPaused\n    returns (bool)\n    {\n        return super.transfer(_to, _value);\n    }\n1038-function_definition-213-218", method="transfer(address _to,uint256 _value)", type_label=function_definition];
1049 [label="213_ whenNotPaused\n1049-expression_statement-214-214", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
1056 [label="216_ return super.transfer(_to, _value);\n1056-return-217-217", method="transfer(address _to,uint256 _value)", type_label=return];
1065 [label="218_ function transferFrom(address _from, address _to, uint256 _value) public\n    whenNotPaused\n    returns (bool)\n    {\n        return super.transferFrom(_from, _to, _value);\n    }\n1065-function_definition-219-224", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
1080 [label="219_ whenNotPaused\n1080-expression_statement-220-220", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1087 [label="222_ return super.transferFrom(_from, _to, _value);\n1087-return-223-223", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
1098 [label="224_ function approve(address _spender, uint256 _value) public\n    whenNotPaused\n    returns (bool)\n    {\n        return super.approve(_spender, _value);\n    }\n1098-function_definition-225-230", method="approve(address _spender,uint256 _value)", type_label=function_definition];
1109 [label="225_ whenNotPaused\n1109-expression_statement-226-226", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
1116 [label="228_ return super.approve(_spender, _value);\n1116-return-229-229", method="approve(address _spender,uint256 _value)", type_label=return];
1125 [label="230_ function increaseApproval(address _spender, uint _addedValue) public\n    whenNotPaused\n    returns (bool success)\n    {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n1125-function_definition-231-236", method="increaseApproval(address _spender,uint _addedValue)", type_label=function_definition];
1136 [label="231_ whenNotPaused\n1136-expression_statement-232-232", method="increaseApproval(address _spender,uint _addedValue)", type_label=expression_statement];
1144 [label="234_ return super.increaseApproval(_spender, _addedValue);\n1144-return-235-235", method="increaseApproval(address _spender,uint _addedValue)", type_label=return];
1153 [label="236_ function decreaseApproval(address _spender, uint _subtractedValue) public\n    whenNotPaused\n    returns (bool success)\n    {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n1153-function_definition-237-242", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=function_definition];
1164 [label="237_ whenNotPaused\n1164-expression_statement-238-238", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=expression_statement];
1172 [label="240_ return super.decreaseApproval(_spender, _subtractedValue);\n1172-return-241-241", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=return];
1193 [label="245_ string constant public name = \"DQR 10\";\n1193-new_variable-246-246", method="", type_label=new_variable];
1200 [label="246_ string constant public symbol = \"dqr10\";\n1200-new_variable-247-247", method="", type_label=new_variable];
1207 [label="247_ uint public decimals = 18;\n1207-new_variable-248-248", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
864;
44 -> 56  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
58 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
90 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 132  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
127 -> 1335  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1335 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
132 -> 1335  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
132 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
134 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
151 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
172 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
196 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
200 -> 218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
218 -> 224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
224 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
296 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
308 -> 317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
317 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
319 -> 335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
335 -> 344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
344 -> 355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
398 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
434 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
452 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
615 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
628 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
641 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
683 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
686 -> 702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
722 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
725 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
748 -> 764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
805 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 838  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
833 -> 849  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2041 -> 864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 2041  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
849 -> 2041  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
880 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
902 -> 920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
920 -> 929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
958 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
971 -> 978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
978 -> 989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
981 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 1007  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1002 -> 1004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1014 -> 1022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 1056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1056 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1065 -> 1087  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1087 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1098 -> 1116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1116 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1125 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1153 -> 1172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1172 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1193 -> 1200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1200 -> 1207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
