digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n50-function_definition-8-12", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ require(b <= a, \"SafeMath: subtraction overflow\");\n67-expression_statement-9-9", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
77 [label="9_ uint256 c = a - b;\n77-new_variable-10-10", method="sub(uint256 a,uint256 b)", type_label=new_variable];
85 [label="10_ return c;\n85-return-11-11", method="sub(uint256 a,uint256 b)", type_label=return];
87 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n87-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
104 [label="13_ if_a == 0\n104-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
1115 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
109 [label="14_ return 0;\n109-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
111 [label="16_ uint256 c = a * b;\n111-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
119 [label="17_ require(c / a == b, \"SafeMath: multiplication overflow\");\n119-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
131 [label="18_ return c;\n131-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
133 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n133-function_definition-21-25", method="div(uint256 a,uint256 b)", type_label=function_definition];
150 [label="21_ require(b > 0, \"SafeMath: division by zero\");\n150-expression_statement-22-22", method="div(uint256 a,uint256 b)", type_label=expression_statement];
160 [label="22_ uint256 c = a / b;\n160-new_variable-23-23", method="div(uint256 a,uint256 b)", type_label=new_variable];
168 [label="23_ return c;\n168-return-24-24", method="div(uint256 a,uint256 b)", type_label=return];
170 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n170-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
187 [label="26_ require(b != 0, \"SafeMath: modulo by zero\");\n187-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
197 [label="27_ return a % b;\n197-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
204 [label="31_ function totalSupply() external view returns (uint256);\n204-function_definition-32-32", method="totalSupply()", type_label=function_definition];
212 [label="32_ function balanceOf(address account) external view returns (uint256);\n212-function_definition-33-33", method="balanceOf(address account)", type_label=function_definition];
224 [label="33_ function transfer(address recipient, uint256 amount) external returns (bool);\n224-function_definition-34-34", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
239 [label="34_ function allowance(address owner, address spender) external view returns (uint256);\n239-function_definition-35-35", method="allowance(address owner,address spender)", type_label=function_definition];
255 [label="35_ function approve(address spender, uint256 amount) external returns (bool);\n255-function_definition-36-36", method="approve(address spender,uint256 amount)", type_label=function_definition];
270 [label="36_ function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n270-function_definition-37-37", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
320 [label="41_ address private _owner;\n320-new_variable-42-42", method="", type_label=new_variable];
337 [label="44_ _owner = msg.sender;\n337-expression_statement-45-45", method="", type_label=expression_statement];
351 [label="47_ function owner() public view returns (address) {\n        return _owner;\n    }\n351-function_definition-48-50", method="owner()", type_label=function_definition];
360 [label="48_ return _owner;\n360-return-49-49", method="owner()", type_label=return];
362 [label="50_ modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n362-expression_statement-51-54", method="", type_label=expression_statement];
365 [label="51_ require(isOwner(), \"Ownable: caller is not the owner\");\n365-expression_statement-52-52", method="", type_label=expression_statement];
374 [label="52_ _;\n374-expression_statement-53-53", method="", type_label=expression_statement];
376 [label="54_ function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n376-function_definition-55-57", method="isOwner()", type_label=function_definition];
385 [label="55_ return msg.sender == _owner;\n385-return-56-56", method="isOwner()", type_label=return];
391 [label="57_ function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n391-function_definition-58-61", method="renounceOwnership()", type_label=function_definition];
394 [label="57_ onlyOwner\n394-expression_statement-58-58", method="renounceOwnership()", type_label=expression_statement];
405 [label="59_ _owner = address(0);\n405-expression_statement-60-60", method="renounceOwnership()", type_label=expression_statement];
411 [label="61_ function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n411-function_definition-62-64", method="transferOwnership(address newOwner)", type_label=function_definition];
418 [label="61_ onlyOwner\n418-expression_statement-62-62", method="transferOwnership(address newOwner)", type_label=expression_statement];
421 [label="62_ _transferOwnership(newOwner);\n421-expression_statement-63-63", method="transferOwnership(address newOwner)", type_label=expression_statement];
426 [label="64_ function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n426-function_definition-65-69", method="_transferOwnership(address newOwner)", type_label=function_definition];
434 [label="65_ require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n434-expression_statement-66-66", method="_transferOwnership(address newOwner)", type_label=expression_statement];
452 [label="67_ _owner = newOwner;\n452-expression_statement-68-68", method="_transferOwnership(address newOwner)", type_label=expression_statement];
462 [label="71_ function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\n        IERC20(tokenAddress).transfer(owner(), tokenAmount);\n    }\n462-function_definition-72-74", method="recoverERC20(address tokenAddress,uint256 tokenAmount)", type_label=function_definition];
473 [label="71_ onlyOwner\n473-expression_statement-72-72", method="recoverERC20(address tokenAddress,uint256 tokenAmount)", type_label=expression_statement];
476 [label="72_ IERC20(tokenAddress).transfer(owner(), tokenAmount);\n476-expression_statement-73-73", method="recoverERC20(address tokenAddress,uint256 tokenAmount)", type_label=expression_statement];
492 [label="76_ struct Role {\n        mapping (address => bool) bearer;\n    }\n492-expression_statement-77-79", method="Role()", type_label=expression_statement];
500 [label="79_ function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n500-function_definition-80-83", method="add(Role storage role,address account)", type_label=function_definition];
513 [label="80_ require(!has(role, account), \"Roles: account already has role\");\n513-expression_statement-81-81", method="add(Role storage role,address account)", type_label=expression_statement];
527 [label="81_ role.bearer[account] = true;\n527-expression_statement-82-82", method="add(Role storage role,address account)", type_label=expression_statement];
536 [label="83_ function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n536-function_definition-84-87", method="remove(Role storage role,address account)", type_label=function_definition];
549 [label="84_ require(has(role, account), \"Roles: account does not have role\");\n549-expression_statement-85-85", method="remove(Role storage role,address account)", type_label=expression_statement];
562 [label="85_ role.bearer[account] = false;\n562-expression_statement-86-86", method="remove(Role storage role,address account)", type_label=expression_statement];
571 [label="87_ function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n571-function_definition-88-91", method="has(Role storage role,address account)", type_label=function_definition];
589 [label="88_ require(account != address(0), \"Roles: account is the zero address\");\n589-expression_statement-89-89", method="has(Role storage role,address account)", type_label=expression_statement];
601 [label="89_ return role.bearer[account];\n601-return-90-90", method="has(Role storage role,address account)", type_label=return];
629 [label="96_ Roles.Role private _operators;\n629-new_variable-97-97", method="", type_label=new_variable];
638 [label="98_ _addOperator(msg.sender);\n638-expression_statement-99-99", method="", type_label=expression_statement];
645 [label="100_ modifier onlyOperator() {\n        require(isOperator(msg.sender));\n        _;\n    }\n645-expression_statement-101-104", method="", type_label=expression_statement];
648 [label="101_ require(isOperator(msg.sender));\n648-expression_statement-102-102", method="", type_label=expression_statement];
658 [label="102_ _;\n658-expression_statement-103-103", method="", type_label=expression_statement];
660 [label="104_ function isOperator(address account) public view returns (bool) {\n        return _operators.has(account);\n    }\n660-function_definition-105-107", method="isOperator(address account)", type_label=function_definition];
673 [label="105_ return _operators.has(account);\n673-return-106-106", method="isOperator(address account)", type_label=return];
680 [label="107_ function addOperator(address account) public onlyOperator {\n        _addOperator(account);\n    }\n680-function_definition-108-110", method="addOperator(address account)", type_label=function_definition];
687 [label="107_ onlyOperator\n687-expression_statement-108-108", method="addOperator(address account)", type_label=expression_statement];
690 [label="108_ _addOperator(account);\n690-expression_statement-109-109", method="addOperator(address account)", type_label=expression_statement];
695 [label="110_ function renounceOperator() public {\n        _removeOperator(msg.sender);\n    }\n695-function_definition-111-113", method="renounceOperator()", type_label=function_definition];
699 [label="111_ _removeOperator(msg.sender);\n699-expression_statement-112-112", method="renounceOperator()", type_label=expression_statement];
706 [label="113_ function _addOperator(address account) internal {\n        _operators.add(account);\n        emit OperatorAdded(account);\n    }\n706-function_definition-114-117", method="_addOperator(address account)", type_label=function_definition];
714 [label="114_ _operators.add(account);\n714-expression_statement-115-115", method="_addOperator(address account)", type_label=expression_statement];
725 [label="117_ function _removeOperator(address account) internal {\n        _operators.remove(account);\n        emit OperatorRemoved(account);\n    }\n725-function_definition-118-121", method="_removeOperator(address account)", type_label=function_definition];
733 [label="118_ _operators.remove(account);\n733-expression_statement-119-119", method="_removeOperator(address account)", type_label=expression_statement];
758 [label="124_ struct Contributor {\n        uint256 weiAmount;\n        uint256 tokenAmount;\n        bool exists;\n    }\n758-expression_statement-125-129", method="Contributor()", type_label=expression_statement];
772 [label="129_ uint256 private _totalSoldTokens;\n772-new_variable-130-130", method="", type_label=new_variable];
777 [label="130_ uint256 private _totalWeiRaised;\n777-new_variable-131-131", method="", type_label=new_variable];
782 [label="131_ address[] private _addresses;\n782-new_variable-132-132", method="", type_label=new_variable];
788 [label="132_ mapping(address => Contributor) private _contributors;\n788-new_variable-133-133", method="", type_label=new_variable];
798 [label="134_ function totalSoldTokens() public view returns (uint256) {\n        return _totalSoldTokens;\n    }\n798-function_definition-135-137", method="totalSoldTokens()", type_label=function_definition];
807 [label="135_ return _totalSoldTokens;\n807-return-136-136", method="totalSoldTokens()", type_label=return];
809 [label="137_ function totalWeiRaised() public view returns (uint256) {\n        return _totalWeiRaised;\n    }\n809-function_definition-138-140", method="totalWeiRaised()", type_label=function_definition];
818 [label="138_ return _totalWeiRaised;\n818-return-139-139", method="totalWeiRaised()", type_label=return];
820 [label="140_ function getContributorAddress(uint256 index) public view returns (address) {\n        return _addresses[index];\n    }\n820-function_definition-141-143", method="getContributorAddress(uint256 index)", type_label=function_definition];
833 [label="141_ return _addresses[index];\n833-return-142-142", method="getContributorAddress(uint256 index)", type_label=return];
837 [label="143_ function getContributorsLength() public view returns (uint) {\n        return _addresses.length;\n    }\n837-function_definition-144-146", method="getContributorsLength()", type_label=function_definition];
846 [label="144_ return _addresses.length;\n846-return-145-145", method="getContributorsLength()", type_label=return];
850 [label="146_ function weiContribution(address account) public view returns (uint256) {\n        return _contributors[account].weiAmount;\n    }\n850-function_definition-147-149", method="weiContribution(address account)", type_label=function_definition];
863 [label="147_ return _contributors[account].weiAmount;\n863-return-148-148", method="weiContribution(address account)", type_label=return];
869 [label="149_ function tokenBalance(address account) public view returns (uint256) {\n        return _contributors[account].tokenAmount;\n    }\n869-function_definition-150-152", method="tokenBalance(address account)", type_label=function_definition];
882 [label="150_ return _contributors[account].tokenAmount;\n882-return-151-151", method="tokenBalance(address account)", type_label=return];
888 [label="152_ function contributorExists(address account) public view returns (bool) {\n        return _contributors[account].exists;\n    }\n888-function_definition-153-155", method="contributorExists(address account)", type_label=function_definition];
901 [label="153_ return _contributors[account].exists;\n901-return-154-154", method="contributorExists(address account)", type_label=return];
907 [label="155_ function addBalance(address account, uint256 weiAmount, uint256 tokenAmount) public onlyOperator {\n        if (!_contributors[account].exists) {\n            _addresses.push(account);\n            _contributors[account].exists = true;\n        }\n        _contributors[account].weiAmount = _contributors[account].weiAmount.add(weiAmount);\n        _contributors[account].tokenAmount = _contributors[account].tokenAmount.add(tokenAmount);\n        _totalWeiRaised = _totalWeiRaised.add(weiAmount);\n        _totalSoldTokens = _totalSoldTokens.add(tokenAmount);\n    }\n907-function_definition-156-165", method="addBalance(address account,uint256 weiAmount,uint256 tokenAmount)", type_label=function_definition];
922 [label="155_ onlyOperator\n922-expression_statement-156-156", method="addBalance(address account,uint256 weiAmount,uint256 tokenAmount)", type_label=expression_statement];
925 [label="156_ if\n925-if-157-160", method="addBalance(address account,uint256 weiAmount,uint256 tokenAmount)", type_label=if];
1936 [label="156_ end_if", method="addBalance(address account,uint256 weiAmount,uint256 tokenAmount)", type_label=end_if];
933 [label="157_ _addresses.push(account);\n933-expression_statement-158-158", method="addBalance(address account,uint256 weiAmount,uint256 tokenAmount)", type_label=expression_statement];
940 [label="158_ _contributors[account].exists = true;\n940-expression_statement-159-159", method="addBalance(address account,uint256 weiAmount,uint256 tokenAmount)", type_label=expression_statement];
949 [label="160_ _contributors[account].weiAmount = _contributors[account].weiAmount.add(weiAmount);\n949-expression_statement-161-161", method="addBalance(address account,uint256 weiAmount,uint256 tokenAmount)", type_label=expression_statement];
966 [label="161_ _contributors[account].tokenAmount = _contributors[account].tokenAmount.add(tokenAmount);\n966-expression_statement-162-162", method="addBalance(address account,uint256 weiAmount,uint256 tokenAmount)", type_label=expression_statement];
983 [label="162_ _totalWeiRaised = _totalWeiRaised.add(weiAmount);\n983-expression_statement-163-163", method="addBalance(address account,uint256 weiAmount,uint256 tokenAmount)", type_label=expression_statement];
992 [label="163_ _totalSoldTokens = _totalSoldTokens.add(tokenAmount);\n992-expression_statement-164-164", method="addBalance(address account,uint256 weiAmount,uint256 tokenAmount)", type_label=expression_statement];
1001 [label="165_ function removeOperator(address account) public onlyOwner {\n        _removeOperator(account);\n    }\n1001-function_definition-166-168", method="removeOperator(address account)", type_label=function_definition];
1008 [label="165_ onlyOwner\n1008-expression_statement-166-166", method="removeOperator(address account)", type_label=expression_statement];
1011 [label="166_ _removeOperator(account);\n1011-expression_statement-167-167", method="removeOperator(address account)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
87 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 109  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
104 -> 1115  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1115 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 1115  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
109 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
351 -> 360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
360 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
365 -> 374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
376 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
391 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
426 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
462 -> 476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
500 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
536 -> 549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
571 -> 589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
589 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
648 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
660 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
673 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
680 -> 690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
695 -> 699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
706 -> 714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
772 -> 777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
777 -> 782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
782 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
798 -> 807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
809 -> 818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
818 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
820 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
837 -> 846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
846 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
850 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
863 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
869 -> 882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
882 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
888 -> 901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
901 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
907 -> 925  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
925 -> 933  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
925 -> 1936  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1936 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
933 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 1936  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
949 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
966 -> 983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
983 -> 992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1001 -> 1011  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
