digraph  {
13 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    require(c / a == b);\n    return c;\n  }\n13-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
1563 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
45 [label="7_ require(c / a == b);\n45-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
56 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0);\n    uint256 c = a / b;\n    return c;\n  }\n56-function_definition-11-15", method="div(uint256 a,uint256 b)", type_label=function_definition];
73 [label="11_ require(b > 0);\n73-expression_statement-12-12", method="div(uint256 a,uint256 b)", type_label=expression_statement];
80 [label="12_ uint256 c = a / b;\n80-new_variable-13-13", method="div(uint256 a,uint256 b)", type_label=new_variable];
88 [label="13_ return c;\n88-return-14-14", method="div(uint256 a,uint256 b)", type_label=return];
90 [label="15_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n    return c;\n  }\n90-function_definition-16-20", method="sub(uint256 a,uint256 b)", type_label=function_definition];
107 [label="16_ require(b <= a);\n107-expression_statement-17-17", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
114 [label="17_ uint256 c = a - b;\n114-new_variable-18-18", method="sub(uint256 a,uint256 b)", type_label=new_variable];
122 [label="18_ return c;\n122-return-19-19", method="sub(uint256 a,uint256 b)", type_label=return];
124 [label="20_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n    return c;\n  }\n124-function_definition-21-25", method="add(uint256 a,uint256 b)", type_label=function_definition];
141 [label="21_ uint256 c = a + b;\n141-new_variable-22-22", method="add(uint256 a,uint256 b)", type_label=new_variable];
149 [label="22_ require(c >= a);\n149-expression_statement-23-23", method="add(uint256 a,uint256 b)", type_label=expression_statement];
156 [label="23_ return c;\n156-return-24-24", method="add(uint256 a,uint256 b)", type_label=return];
161 [label="27_ function totalSupply() external view returns (uint256);\n161-function_definition-28-28", method="totalSupply()", type_label=function_definition];
169 [label="28_ function balanceOf(address who) external view returns (uint256);\n169-function_definition-29-29", method="balanceOf(address who)", type_label=function_definition];
181 [label="29_ function allowance(address owner, address spender) external view returns (uint256);\n181-function_definition-30-30", method="allowance(address owner,address spender)", type_label=function_definition];
197 [label="30_ function transfer(address to, uint256 value) external returns (bool);\n197-function_definition-31-31", method="transfer(address to,uint256 value)", type_label=function_definition];
212 [label="31_ function approve(address spender, uint256 value) external returns (bool);\n212-function_definition-32-32", method="approve(address spender,uint256 value)", type_label=function_definition];
227 [label="32_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n227-function_definition-33-33", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
277 [label="37_ address owner;\n277-new_variable-38-38", method="", type_label=new_variable];
283 [label="39_ owner = msg.sender;\n283-expression_statement-40-40", method="", type_label=expression_statement];
289 [label="41_ modifier onlyOwner {\n    require(msg.sender == owner,\"Only owner can do it.\");\n    _;\n  }\n289-expression_statement-42-45", method="", type_label=expression_statement];
292 [label="42_ require(msg.sender == owner,\"Only owner can do it.\");\n292-expression_statement-43-43", method="", type_label=expression_statement];
304 [label="43_ _;\n304-expression_statement-44-44", method="", type_label=expression_statement];
315 [label="47_ string public constant name = \"IGCcoin\";\n315-new_variable-48-48", method="", type_label=new_variable];
322 [label="48_ string public constant symbol = \"IGC\";\n322-new_variable-49-49", method="", type_label=new_variable];
329 [label="49_ uint8 public constant decimals = 18;\n329-new_variable-50-50", method="", type_label=new_variable];
335 [label="50_ uint256 private constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n335-new_variable-51-51", method="", type_label=new_variable];
348 [label="51_ uint256 public role1_balance = INITIAL_SUPPLY.mul(4).div(100);\n348-new_variable-52-52", method="", type_label=new_variable];
369 [label="53_ mapping (address => uint256) private _balances;\n369-new_variable-54-54", method="", type_label=new_variable];
376 [label="54_ mapping (address => mapping (address => uint256)) private _allowed;\n376-new_variable-55-55", method="", type_label=new_variable];
385 [label="55_ uint256 private _totalSupply;\n385-new_variable-56-56", method="", type_label=new_variable];
390 [label="56_ uint256 public beginTime = 1559361600;\n390-new_variable-57-57", method="", type_label=new_variable];
396 [label="57_ function setBeginTime(uint256 _begin) onlyOwner public{\n    beginTime = _begin;\n  }\n396-function_definition-58-60", method="setBeginTime(uint256 _begin)", type_label=function_definition];
402 [label="57_ onlyOwner\n402-expression_statement-58-58", method="setBeginTime(uint256 _begin)", type_label=expression_statement];
406 [label="58_ beginTime = _begin;\n406-expression_statement-59-59", method="setBeginTime(uint256 _begin)", type_label=expression_statement];
410 [label="60_ struct Role {\n    uint256 releaseTime;\n    uint256 nolockRate;\n    uint256 releaseRate;\n  }\n410-expression_statement-61-65", method="Role()", type_label=expression_statement];
424 [label="65_ struct Account {\n    uint8 roleType;\n    uint256 ownAmount;\n    uint256 releasedAmount;\n  }\n424-expression_statement-66-70", method="Account()", type_label=expression_statement];
438 [label="70_ mapping(address => Account) private accountMapping;\n438-new_variable-71-71", method="", type_label=new_variable];
446 [label="71_ mapping(address => bool) private nolockReleasedMapping;\n446-new_variable-72-72", method="", type_label=new_variable];
453 [label="72_ mapping(address => uint256) private releasedRateMapping;\n453-new_variable-73-73", method="", type_label=new_variable];
460 [label="73_ function allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType) onlyOwner public {\n    require(accountAddress != address(0x0), \"accountAddress not right\");\n    require(roleType <=5 ,\"roleType must be 0~5\");\n    require(now < beginTime ,\"beginTime <= now, so can not set\");\n    amount = amount.mul(10 ** uint256(decimals));\n    Account memory _account = accountMapping[accountAddress];\n    if(_account.ownAmount == 0){\n         accountMapping[accountAddress] = Account(roleType,amount,0);\n    }else{\n        require(roleType == _account.roleType ,\"roleType must be same!\");\n        accountMapping[accountAddress].ownAmount = _account.ownAmount.add(amount);\n        accountMapping[accountAddress].releasedAmount = 0;\n        delete nolockReleasedMapping[accountAddress];\n        delete releasedRateMapping[accountAddress];\n    }\n    _balances[accountAddress] = _balances[accountAddress].add(amount);\n    _balances[msg.sender] = _balances[msg.sender].sub(amount);\n    if(roleType == 1){\n        role1_balance = role1_balance.sub(amount);\n    }\n    releaseToken(accountAddress);\n  }\n460-function_definition-74-95", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=function_definition];
474 [label="73_ onlyOwner\n474-expression_statement-74-74", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=expression_statement];
478 [label="74_ require(accountAddress != address(0x0), \"accountAddress not right\");\n478-expression_statement-75-75", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=expression_statement];
490 [label="75_ require(roleType <=5 ,\"roleType must be 0~5\");\n490-expression_statement-76-76", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=expression_statement];
500 [label="76_ require(now < beginTime ,\"beginTime <= now, so can not set\");\n500-expression_statement-77-77", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=expression_statement];
510 [label="77_ amount = amount.mul(10 ** uint256(decimals));\n510-expression_statement-78-78", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=expression_statement];
523 [label="78_ Account memory _account = accountMapping[accountAddress];\n523-new_variable-79-79", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=new_variable];
532 [label="79_ if__account.ownAmount == 0\n532-if-80-88", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=if];
2065 [label="79_ end_if", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=end_if];
539 [label="80_ accountMapping[accountAddress] = Account(roleType,amount,0);\n539-expression_statement-81-81", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=expression_statement];
553 [label="82_ require(roleType == _account.roleType ,\"roleType must be same!\");\n553-expression_statement-83-83", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=expression_statement];
565 [label="83_ accountMapping[accountAddress].ownAmount = _account.ownAmount.add(amount);\n565-expression_statement-84-84", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=expression_statement];
580 [label="84_ accountMapping[accountAddress].releasedAmount = 0;\n580-expression_statement-85-85", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=expression_statement];
588 [label="85_ delete nolockReleasedMapping[accountAddress];\n588-expression_statement-86-86", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=expression_statement];
593 [label="86_ delete releasedRateMapping[accountAddress];\n593-expression_statement-87-87", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=expression_statement];
598 [label="88_ _balances[accountAddress] = _balances[accountAddress].add(amount);\n598-expression_statement-89-89", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=expression_statement];
611 [label="89_ _balances[msg.sender] = _balances[msg.sender].sub(amount);\n611-expression_statement-90-90", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=expression_statement];
628 [label="90_ if_roleType == 1\n628-if-91-93", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=if];
2161 [label="90_ end_if", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=end_if];
633 [label="91_ role1_balance = role1_balance.sub(amount);\n633-expression_statement-92-92", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=expression_statement];
642 [label="93_ releaseToken(accountAddress);\n642-expression_statement-94-94", method="allocateTokenByType(address accountAddress,uint256 amount,uint8 roleType)", type_label=expression_statement];
657 [label="96_ function burn(uint256 _value, uint8 _roleType) onlyOwner public returns (bool success) {\n    require(_value > 0, \"_value > 0\");\n    _value = _value.mul(10 ** uint256(decimals));\n    require(_balances[msg.sender] >= _value);\n    _balances[msg.sender] = _balances[msg.sender].sub(_value);\n    _totalSupply = _totalSupply.sub(_value);\n    if(_roleType == 1){\n        role1_balance = role1_balance.sub(_value);\n    }\n    emit Burn(msg.sender, _value);\n    return true;\n  }\n657-function_definition-97-108", method="burn(uint256 _value,uint8 _roleType)", type_label=function_definition];
667 [label="96_ onlyOwner\n667-expression_statement-97-97", method="burn(uint256 _value,uint8 _roleType)", type_label=expression_statement];
676 [label="97_ require(_value > 0, \"_value > 0\");\n676-expression_statement-98-98", method="burn(uint256 _value,uint8 _roleType)", type_label=expression_statement];
686 [label="98_ _value = _value.mul(10 ** uint256(decimals));\n686-expression_statement-99-99", method="burn(uint256 _value,uint8 _roleType)", type_label=expression_statement];
699 [label="99_ require(_balances[msg.sender] >= _value);\n699-expression_statement-100-100", method="burn(uint256 _value,uint8 _roleType)", type_label=expression_statement];
710 [label="100_ _balances[msg.sender] = _balances[msg.sender].sub(_value);\n710-expression_statement-101-101", method="burn(uint256 _value,uint8 _roleType)", type_label=expression_statement];
727 [label="101_ _totalSupply = _totalSupply.sub(_value);\n727-expression_statement-102-102", method="burn(uint256 _value,uint8 _roleType)", type_label=expression_statement];
736 [label="102_ if__roleType == 1\n736-if-103-105", method="burn(uint256 _value,uint8 _roleType)", type_label=if];
2269 [label="102_ end_if", method="burn(uint256 _value,uint8 _roleType)", type_label=end_if];
741 [label="103_ role1_balance = role1_balance.sub(_value);\n741-expression_statement-104-104", method="burn(uint256 _value,uint8 _roleType)", type_label=expression_statement];
758 [label="106_ return true;\n758-return-107-107", method="burn(uint256 _value,uint8 _roleType)", type_label=return];
761 [label="108_ function releaseToken(address accountAddress) private returns (bool) {\n    require(accountAddress != address(0x0), \"accountAddress not right\");\n    Account memory _account = accountMapping[accountAddress];\n    if(_account.ownAmount == 0){\n      return true;\n    }\n    if(_account.releasedAmount == _account.ownAmount){\n      return true;\n    }\n    uint256 _releasedAmount = 0;\n    uint256 releaseTime;\n    uint256 nolockRate;\n    uint256 releaseRate;\n    (releaseTime,nolockRate,releaseRate) = getRoles(_account.roleType);\n    if(nolockRate > 0 && nolockReleasedMapping[accountAddress] != true){\n      _releasedAmount = _releasedAmount.add(_account.ownAmount.mul(nolockRate).div(100));\n      nolockReleasedMapping[accountAddress] = true;\n    }\n    if(releaseTime <= now){\n      uint256 _momth = now.sub(releaseTime).div(30 days).add(1);\n      if(releasedRateMapping[accountAddress] <=  _momth) {\n        _releasedAmount = _releasedAmount.add(_account.ownAmount.mul(_momth-releasedRateMapping[accountAddress]).mul(releaseRate).div(100));\n        releasedRateMapping[accountAddress] = _momth;\n      }\n    }\n    if(_releasedAmount > 0){\n        if(accountMapping[accountAddress].releasedAmount.add(_releasedAmount) <= _account.ownAmount){\n            accountMapping[accountAddress].releasedAmount = accountMapping[accountAddress].releasedAmount.add(_releasedAmount);\n        }else{\n            accountMapping[accountAddress].releasedAmount = _account.ownAmount;\n        }\n    }\n    return true;\n  }\n761-function_definition-109-142", method="releaseToken(address accountAddress)", type_label=function_definition];
773 [label="109_ require(accountAddress != address(0x0), \"accountAddress not right\");\n773-expression_statement-110-110", method="releaseToken(address accountAddress)", type_label=expression_statement];
785 [label="110_ Account memory _account = accountMapping[accountAddress];\n785-new_variable-111-111", method="releaseToken(address accountAddress)", type_label=new_variable];
794 [label="111_ if__account.ownAmount == 0\n794-if-112-114", method="releaseToken(address accountAddress)", type_label=if];
2327 [label="111_ end_if", method="releaseToken(address accountAddress)", type_label=end_if];
801 [label="112_ return true;\n801-return-113-113", method="releaseToken(address accountAddress)", type_label=return];
804 [label="114_ if__account.releasedAmount == _account.ownAmount\n804-if-115-117", method="releaseToken(address accountAddress)", type_label=if];
2337 [label="114_ end_if", method="releaseToken(address accountAddress)", type_label=end_if];
813 [label="115_ return true;\n813-return-116-116", method="releaseToken(address accountAddress)", type_label=return];
816 [label="117_ uint256 _releasedAmount = 0;\n816-new_variable-118-118", method="releaseToken(address accountAddress)", type_label=new_variable];
822 [label="118_ uint256 releaseTime;\n822-new_variable-119-119", method="releaseToken(address accountAddress)", type_label=new_variable];
827 [label="119_ uint256 nolockRate;\n827-new_variable-120-120", method="releaseToken(address accountAddress)", type_label=new_variable];
832 [label="120_ uint256 releaseRate;\n832-new_variable-121-121", method="releaseToken(address accountAddress)", type_label=new_variable];
837 [label="121_ (releaseTime,nolockRate,releaseRate) = getRoles(_account.roleType);\n837-expression_statement-122-122", method="releaseToken(address accountAddress)", type_label=expression_statement];
849 [label="122_ if_nolockRate > 0 && nolockReleasedMapping[accountAddress] != true\n849-if-123-126", method="releaseToken(address accountAddress)", type_label=if];
2382 [label="122_ end_if", method="releaseToken(address accountAddress)", type_label=end_if];
861 [label="123_ _releasedAmount = _releasedAmount.add(_account.ownAmount.mul(nolockRate).div(100));\n861-expression_statement-124-124", method="releaseToken(address accountAddress)", type_label=expression_statement];
882 [label="124_ nolockReleasedMapping[accountAddress] = true;\n882-expression_statement-125-125", method="releaseToken(address accountAddress)", type_label=expression_statement];
889 [label="126_ if_releaseTime <= now\n889-if-127-133", method="releaseToken(address accountAddress)", type_label=if];
2422 [label="126_ end_if", method="releaseToken(address accountAddress)", type_label=end_if];
894 [label="127_ uint256 _momth = now.sub(releaseTime).div(30 days).add(1);\n894-new_variable-128-128", method="releaseToken(address accountAddress)", type_label=new_variable];
916 [label="128_ if_releasedRateMapping[accountAddress] <=  _momth\n916-if-129-132", method="releaseToken(address accountAddress)", type_label=if];
2449 [label="128_ end_if", method="releaseToken(address accountAddress)", type_label=end_if];
923 [label="129_ _releasedAmount = _releasedAmount.add(_account.ownAmount.mul(_momth-releasedRateMapping[accountAddress]).mul(releaseRate).div(100));\n923-expression_statement-130-130", method="releaseToken(address accountAddress)", type_label=expression_statement];
953 [label="130_ releasedRateMapping[accountAddress] = _momth;\n953-expression_statement-131-131", method="releaseToken(address accountAddress)", type_label=expression_statement];
959 [label="133_ if__releasedAmount > 0\n959-if-134-140", method="releaseToken(address accountAddress)", type_label=if];
2492 [label="133_ end_if", method="releaseToken(address accountAddress)", type_label=end_if];
964 [label="134_ if_accountMapping[accountAddress].releasedAmount.add(_releasedAmount) <= _account.ownAmount\n964-if-135-139", method="releaseToken(address accountAddress)", type_label=if];
2497 [label="134_ end_if", method="releaseToken(address accountAddress)", type_label=end_if];
980 [label="135_ accountMapping[accountAddress].releasedAmount = accountMapping[accountAddress].releasedAmount.add(_releasedAmount);\n980-expression_statement-136-136", method="releaseToken(address accountAddress)", type_label=expression_statement];
998 [label="137_ accountMapping[accountAddress].releasedAmount = _account.ownAmount;\n998-expression_statement-138-138", method="releaseToken(address accountAddress)", type_label=expression_statement];
1008 [label="140_ return true;\n1008-return-141-141", method="releaseToken(address accountAddress)", type_label=return];
1011 [label="142_ function getRoles(uint8 _type) private pure returns(uint256,uint256,uint256) {\n    require(_type <= 5);\n    if(_type == 0){\n      return (1559361600,0,100);\n    }\n    if(_type == 1){\n      return (1564632000,0,10);\n    }\n    if(_type == 2){\n      return (1575172800,0,2);\n    }\n    if(_type == 3){\n      return (1567310400,20,10);\n    }\n    if(_type == 4){\n      return (1559361600,10,5);\n    }\n    if(_type == 5){\n      return (1559361600,0,100);\n    }\n  }\n1011-function_definition-143-163", method="getRoles(uint8 _type)", type_label=function_definition];
1030 [label="143_ require(_type <= 5);\n1030-expression_statement-144-144", method="getRoles(uint8 _type)", type_label=expression_statement];
1037 [label="144_ if__type == 0\n1037-if-145-147", method="getRoles(uint8 _type)", type_label=if];
2570 [label="144_ end_if", method="getRoles(uint8 _type)", type_label=end_if];
1042 [label="145_ return (1559361600,0,100);\n1042-return-146-146", method="getRoles(uint8 _type)", type_label=return];
1047 [label="147_ if__type == 1\n1047-if-148-150", method="getRoles(uint8 _type)", type_label=if];
2580 [label="147_ end_if", method="getRoles(uint8 _type)", type_label=end_if];
1052 [label="148_ return (1564632000,0,10);\n1052-return-149-149", method="getRoles(uint8 _type)", type_label=return];
1057 [label="150_ if__type == 2\n1057-if-151-153", method="getRoles(uint8 _type)", type_label=if];
2590 [label="150_ end_if", method="getRoles(uint8 _type)", type_label=end_if];
1062 [label="151_ return (1575172800,0,2);\n1062-return-152-152", method="getRoles(uint8 _type)", type_label=return];
1067 [label="153_ if__type == 3\n1067-if-154-156", method="getRoles(uint8 _type)", type_label=if];
2600 [label="153_ end_if", method="getRoles(uint8 _type)", type_label=end_if];
1072 [label="154_ return (1567310400,20,10);\n1072-return-155-155", method="getRoles(uint8 _type)", type_label=return];
1077 [label="156_ if__type == 4\n1077-if-157-159", method="getRoles(uint8 _type)", type_label=if];
2610 [label="156_ end_if", method="getRoles(uint8 _type)", type_label=end_if];
1082 [label="157_ return (1559361600,10,5);\n1082-return-158-158", method="getRoles(uint8 _type)", type_label=return];
1087 [label="159_ if__type == 5\n1087-if-160-162", method="getRoles(uint8 _type)", type_label=if];
2620 [label="159_ end_if", method="getRoles(uint8 _type)", type_label=end_if];
1092 [label="160_ return (1559361600,0,100);\n1092-return-161-161", method="getRoles(uint8 _type)", type_label=return];
1099 [label="164_ _mint(msg.sender, INITIAL_SUPPLY);\n1099-expression_statement-165-165", method="", type_label=expression_statement];
1108 [label="166_ function _mint(address account, uint256 value) internal {\n    require(account != address(0x0));\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n1108-function_definition-167-172", method="_mint(address account,uint256 value)", type_label=function_definition];
1120 [label="167_ require(account != address(0x0));\n1120-expression_statement-168-168", method="_mint(address account,uint256 value)", type_label=expression_statement];
1129 [label="168_ _totalSupply = _totalSupply.add(value);\n1129-expression_statement-169-169", method="_mint(address account,uint256 value)", type_label=expression_statement];
1138 [label="169_ _balances[account] = _balances[account].add(value);\n1138-expression_statement-170-170", method="_mint(address account,uint256 value)", type_label=expression_statement];
1161 [label="172_ function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n1161-function_definition-173-175", method="totalSupply()", type_label=function_definition];
1170 [label="173_ return _totalSupply;\n1170-return-174-174", method="totalSupply()", type_label=return];
1172 [label="175_ function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n1172-function_definition-176-178", method="balanceOf(address owner)", type_label=function_definition];
1185 [label="176_ return _balances[owner];\n1185-return-177-177", method="balanceOf(address owner)", type_label=return];
1189 [label="178_ function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n1189-function_definition-179-188", method="allowance(address owner,address spender)", type_label=function_definition];
1206 [label="186_ return _allowed[owner][spender];\n1206-return-187-187", method="allowance(address owner,address spender)", type_label=return];
1212 [label="188_ function transfer(address to, uint256 value) public returns (bool) {\n    if(_canTransfer(msg.sender,value)){ \n      _transfer(msg.sender, to, value);\n      return true;\n    } else {\n      return false;\n    }\n  }\n1212-function_definition-189-196", method="transfer(address to,uint256 value)", type_label=function_definition];
1228 [label="189_ if\n1228-if-190-195", method="transfer(address to,uint256 value)", type_label=if];
2761 [label="189_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
1238 [label="190_ _transfer(msg.sender, to, value);\n1238-expression_statement-191-191", method="transfer(address to,uint256 value)", type_label=expression_statement];
1249 [label="191_ return true;\n1249-return-192-192", method="transfer(address to,uint256 value)", type_label=return];
1253 [label="193_ return false;\n1253-return-194-194", method="transfer(address to,uint256 value)", type_label=return];
1256 [label="196_ function _canTransfer(address from,uint256 _amount) private returns (bool) {\n    if(now < beginTime){\n      return false;\n    }\n    if((balanceOf(from))<=0){\n      return false;\n    }\n    releaseToken(from);\n    Account memory _account = accountMapping[from];\n    if(_account.ownAmount == 0){\n      return true;\n    }\n    if(balanceOf(from).sub(_amount) < _account.ownAmount.sub(_account.releasedAmount)){\n      return false;\n    }\n    return true;\n  }\n1256-function_definition-197-213", method="_canTransfer(address from,uint256 _amount)", type_label=function_definition];
1272 [label="197_ if_now < beginTime\n1272-if-198-200", method="_canTransfer(address from,uint256 _amount)", type_label=if];
2805 [label="197_ end_if", method="_canTransfer(address from,uint256 _amount)", type_label=end_if];
1277 [label="198_ return false;\n1277-return-199-199", method="_canTransfer(address from,uint256 _amount)", type_label=return];
1280 [label="200_ if_(balanceOf(from))<=0\n1280-if-201-203", method="_canTransfer(address from,uint256 _amount)", type_label=if];
2813 [label="200_ end_if", method="_canTransfer(address from,uint256 _amount)", type_label=end_if];
1289 [label="201_ return false;\n1289-return-202-202", method="_canTransfer(address from,uint256 _amount)", type_label=return];
1292 [label="203_ releaseToken(from);\n1292-expression_statement-204-204", method="_canTransfer(address from,uint256 _amount)", type_label=expression_statement];
1297 [label="204_ Account memory _account = accountMapping[from];\n1297-new_variable-205-205", method="_canTransfer(address from,uint256 _amount)", type_label=new_variable];
1306 [label="205_ if__account.ownAmount == 0\n1306-if-206-208", method="_canTransfer(address from,uint256 _amount)", type_label=if];
2839 [label="205_ end_if", method="_canTransfer(address from,uint256 _amount)", type_label=end_if];
1313 [label="206_ return true;\n1313-return-207-207", method="_canTransfer(address from,uint256 _amount)", type_label=return];
1316 [label="208_ if\n1316-if-209-211", method="_canTransfer(address from,uint256 _amount)", type_label=if];
2849 [label="208_ end_if", method="_canTransfer(address from,uint256 _amount)", type_label=end_if];
1338 [label="209_ return false;\n1338-return-210-210", method="_canTransfer(address from,uint256 _amount)", type_label=return];
1341 [label="211_ return true;\n1341-return-212-212", method="_canTransfer(address from,uint256 _amount)", type_label=return];
1344 [label="213_ function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n1344-function_definition-214-219", method="approve(address spender,uint256 value)", type_label=function_definition];
1360 [label="214_ require(spender != address(0));\n1360-expression_statement-215-215", method="approve(address spender,uint256 value)", type_label=expression_statement];
1369 [label="215_ _allowed[msg.sender][spender] = value;\n1369-expression_statement-216-216", method="approve(address spender,uint256 value)", type_label=expression_statement];
1389 [label="217_ return true;\n1389-return-218-218", method="approve(address spender,uint256 value)", type_label=return];
1392 [label="219_ function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n    if (_canTransfer(from, value)) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        return true;\n    } else {\n        return false;\n    }\n  }\n1392-function_definition-220-236", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
1412 [label="227_ require(value <= _allowed[from][msg.sender]);\n1412-expression_statement-228-228", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1425 [label="228_ if\n1425-if-229-235", method="transferFrom(address from,address to,uint256 value)", type_label=if];
2958 [label="228_ end_if", method="transferFrom(address from,address to,uint256 value)", type_label=end_if];
1433 [label="229_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n1433-expression_statement-230-230", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1454 [label="230_ _transfer(from, to, value);\n1454-expression_statement-231-231", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1463 [label="231_ return true;\n1463-return-232-232", method="transferFrom(address from,address to,uint256 value)", type_label=return];
1467 [label="233_ return false;\n1467-return-234-234", method="transferFrom(address from,address to,uint256 value)", type_label=return];
1470 [label="236_ function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n1470-function_definition-237-243", method="_transfer(address from,address to,uint256 value)", type_label=function_definition];
1486 [label="237_ require(value <= _balances[from]);\n1486-expression_statement-238-238", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1495 [label="238_ require(to != address(0));\n1495-expression_statement-239-239", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1504 [label="239_ _balances[from] = _balances[from].sub(value);\n1504-expression_statement-240-240", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1517 [label="240_ _balances[to] = _balances[to].add(value);\n1517-expression_statement-241-241", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
750;
1097;
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 1563  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1563 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 1563  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
90 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
124 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
156 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
292 -> 304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
315 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
335 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
369 -> 376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
376 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
438 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
460 -> 478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
478 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
500 -> 510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
532 -> 539  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
532 -> 553  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2065 -> 598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 2065  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
553 -> 565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
565 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 2065  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
598 -> 611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
628 -> 633  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
628 -> 2161  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2161 -> 642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
633 -> 2161  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
657 -> 676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
676 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
686 -> 699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
699 -> 710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
710 -> 727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 741  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
736 -> 2269  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2269 -> 750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
741 -> 2269  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
758 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
761 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
785 -> 794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
794 -> 801  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
794 -> 2327  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2327 -> 804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
801 -> 2327  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
801 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
804 -> 813  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
804 -> 2337  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2337 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
813 -> 2337  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
813 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
816 -> 822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
822 -> 827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
827 -> 832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
832 -> 837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 861  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
849 -> 2382  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2382 -> 889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
882 -> 2382  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
889 -> 894  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
889 -> 2422  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
894 -> 916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
916 -> 923  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
916 -> 2449  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2449 -> 959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
923 -> 953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
953 -> 2449  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
959 -> 964  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
959 -> 2492  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
964 -> 980  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
964 -> 998  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2497 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
980 -> 2497  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
998 -> 2497  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1008 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1011 -> 1030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1030 -> 1037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1037 -> 1042  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1037 -> 2570  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2570 -> 1047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 2570  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1042 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1047 -> 1052  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1047 -> 2580  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2580 -> 1057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1052 -> 2580  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1052 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1057 -> 1062  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1057 -> 2590  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2590 -> 1067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1062 -> 2590  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1062 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1067 -> 1072  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1067 -> 2600  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2600 -> 1077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1072 -> 2600  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1072 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1077 -> 1082  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1077 -> 2610  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2610 -> 1087  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1082 -> 2610  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1082 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1087 -> 1092  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1087 -> 2620  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2620 -> 1097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1092 -> 2620  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1092 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1108 -> 1120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1120 -> 1129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 1138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1161 -> 1170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1172 -> 1185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1185 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1189 -> 1206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1206 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1212 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 1238  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1228 -> 1253  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2761 -> 1256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1238 -> 1249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1249 -> 2761  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1249 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1253 -> 2761  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1253 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1256 -> 1272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1272 -> 1277  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1272 -> 2805  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2805 -> 1280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1277 -> 2805  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1277 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1280 -> 1289  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1280 -> 2813  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2813 -> 1292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1289 -> 2813  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1289 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1292 -> 1297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1297 -> 1306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1306 -> 1313  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1306 -> 2839  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2839 -> 1316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1313 -> 2839  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1313 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1316 -> 1338  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1316 -> 2849  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2849 -> 1341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1338 -> 2849  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1338 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1341 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1344 -> 1360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1360 -> 1369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1389 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1392 -> 1412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1412 -> 1425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1425 -> 1433  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1425 -> 1467  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2958 -> 1470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1433 -> 1454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1454 -> 1463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1463 -> 2958  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1463 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1467 -> 2958  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1467 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1470 -> 1486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1486 -> 1495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1495 -> 1504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1504 -> 1517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
