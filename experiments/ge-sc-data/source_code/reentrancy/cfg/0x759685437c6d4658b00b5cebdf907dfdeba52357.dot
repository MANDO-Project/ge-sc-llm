digraph  {
12 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    require(c / a == b);\n    return c;\n  }\n12-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
29 [label="3_ if_a == 0\n29-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
749 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
34 [label="4_ return 0;\n34-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
36 [label="6_ uint256 c = a * b;\n36-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
44 [label="7_ require(c / a == b);\n44-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
53 [label="8_ return c;\n53-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
55 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0);  \n    uint256 c = a / b;\n    return c;\n  }\n55-function_definition-11-15", method="div(uint256 a,uint256 b)", type_label=function_definition];
72 [label="11_ require(b > 0);\n72-expression_statement-12-12", method="div(uint256 a,uint256 b)", type_label=expression_statement];
79 [label="12_ uint256 c = a / b;\n79-new_variable-13-13", method="div(uint256 a,uint256 b)", type_label=new_variable];
87 [label="13_ return c;\n87-return-14-14", method="div(uint256 a,uint256 b)", type_label=return];
89 [label="15_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n    return c;\n  }\n89-function_definition-16-20", method="sub(uint256 a,uint256 b)", type_label=function_definition];
106 [label="16_ require(b <= a);\n106-expression_statement-17-17", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
113 [label="17_ uint256 c = a - b;\n113-new_variable-18-18", method="sub(uint256 a,uint256 b)", type_label=new_variable];
121 [label="18_ return c;\n121-return-19-19", method="sub(uint256 a,uint256 b)", type_label=return];
123 [label="20_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n    return c;\n  }\n123-function_definition-21-25", method="add(uint256 a,uint256 b)", type_label=function_definition];
140 [label="21_ uint256 c = a + b;\n140-new_variable-22-22", method="add(uint256 a,uint256 b)", type_label=new_variable];
148 [label="22_ require(c >= a);\n148-expression_statement-23-23", method="add(uint256 a,uint256 b)", type_label=expression_statement];
155 [label="23_ return c;\n155-return-24-24", method="add(uint256 a,uint256 b)", type_label=return];
157 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n157-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
174 [label="26_ require(b != 0);\n174-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
181 [label="27_ return a % b;\n181-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
193 [label="32_ mapping (address => uint256) private _balances;\n193-new_variable-33-33", method="", type_label=new_variable];
200 [label="33_ mapping (address => mapping (address => uint256)) private _allowed;\n200-new_variable-34-34", method="", type_label=new_variable];
209 [label="34_ uint256 private _totalSupply;\n209-new_variable-35-35", method="", type_label=new_variable];
214 [label="35_ string private _name;\n214-new_variable-36-36", method="", type_label=new_variable];
219 [label="36_ string private _symbol;\n219-new_variable-37-37", method="", type_label=new_variable];
224 [label="37_ uint8 private _decimals;\n224-new_variable-38-38", method="", type_label=new_variable];
231 [label="39_ _name = \"Dukas Coins\";\n231-expression_statement-40-40", method="", type_label=expression_statement];
236 [label="40_ _symbol = \"DUK+\";\n236-expression_statement-41-41", method="", type_label=expression_statement];
241 [label="41_ _decimals = 4;\n241-expression_statement-42-42", method="", type_label=expression_statement];
245 [label="42_ _totalSupply = 200000000000000;\n245-expression_statement-43-43", method="", type_label=expression_statement];
249 [label="43_ _balances[msg.sender] = _totalSupply;\n249-expression_statement-44-44", method="", type_label=expression_statement];
269 [label="46_ function name() public view returns(string memory) {\n    return _name;\n  }\n269-function_definition-47-49", method="name()", type_label=function_definition];
278 [label="47_ return _name;\n278-return-48-48", method="name()", type_label=return];
280 [label="49_ function symbol() public view returns(string memory) {\n    return _symbol;\n  }\n280-function_definition-50-52", method="symbol()", type_label=function_definition];
289 [label="50_ return _symbol;\n289-return-51-51", method="symbol()", type_label=return];
291 [label="52_ function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n291-function_definition-53-55", method="decimals()", type_label=function_definition];
300 [label="53_ return _decimals;\n300-return-54-54", method="decimals()", type_label=return];
302 [label="55_ function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n302-function_definition-56-58", method="totalSupply()", type_label=function_definition];
311 [label="56_ return _totalSupply;\n311-return-57-57", method="totalSupply()", type_label=return];
313 [label="58_ function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n313-function_definition-59-61", method="balanceOf(address owner)", type_label=function_definition];
326 [label="59_ return _balances[owner];\n326-return-60-60", method="balanceOf(address owner)", type_label=return];
330 [label="61_ function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n330-function_definition-62-71", method="allowance(address owner,address spender)", type_label=function_definition];
347 [label="69_ return _allowed[owner][spender];\n347-return-70-70", method="allowance(address owner,address spender)", type_label=return];
353 [label="71_ function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n353-function_definition-72-75", method="transfer(address to,uint256 value)", type_label=function_definition];
369 [label="72_ _transfer(msg.sender, to, value);\n369-expression_statement-73-73", method="transfer(address to,uint256 value)", type_label=expression_statement];
380 [label="73_ return true;\n380-return-74-74", method="transfer(address to,uint256 value)", type_label=return];
383 [label="75_ function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n383-function_definition-76-81", method="approve(address spender,uint256 value)", type_label=function_definition];
399 [label="76_ require(spender != address(0));\n399-expression_statement-77-77", method="approve(address spender,uint256 value)", type_label=expression_statement];
408 [label="77_ _allowed[msg.sender][spender] = value;\n408-expression_statement-78-78", method="approve(address spender,uint256 value)", type_label=expression_statement];
428 [label="79_ return true;\n428-return-80-80", method="approve(address spender,uint256 value)", type_label=return];
431 [label="81_ function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n431-function_definition-82-94", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
451 [label="89_ require(value <= _allowed[from][msg.sender]);\n451-expression_statement-90-90", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
464 [label="90_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n464-expression_statement-91-91", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
485 [label="91_ _transfer(from, to, value);\n485-expression_statement-92-92", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
494 [label="92_ return true;\n494-return-93-93", method="transferFrom(address from,address to,uint256 value)", type_label=return];
497 [label="94_ function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n497-function_definition-95-107", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
513 [label="101_ require(spender != address(0));\n513-expression_statement-102-102", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
522 [label="102_ _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n522-expression_statement-103-104", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
560 [label="105_ return true;\n560-return-106-106", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
563 [label="107_ function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n563-function_definition-108-120", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
579 [label="114_ require(spender != address(0));\n579-expression_statement-115-115", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
588 [label="115_ _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n588-expression_statement-116-117", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
626 [label="118_ return true;\n626-return-119-119", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
629 [label="120_ function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n629-function_definition-121-127", method="_transfer(address from,address to,uint256 value)", type_label=function_definition];
645 [label="121_ require(value <= _balances[from]);\n645-expression_statement-122-122", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
654 [label="122_ require(to != address(0));\n654-expression_statement-123-123", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
663 [label="123_ _balances[from] = _balances[from].sub(value);\n663-expression_statement-124-124", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
676 [label="124_ _balances[to] = _balances[to].add(value);\n676-expression_statement-125-125", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
29 -> 749  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
749 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 749  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
34 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
36 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
55 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 79  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
79 -> 87  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
89 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
123 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
148 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
157 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
193 -> 200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
200 -> 209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
209 -> 214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
219 -> 224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
241 -> 245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
245 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
280 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
291 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
302 -> 311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
311 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
313 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
326 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
330 -> 347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
347 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
353 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
369 -> 380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
380 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
383 -> 399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
399 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
431 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
485 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
497 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
560 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
563 -> 579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
626 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
629 -> 645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
645 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
654 -> 663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
