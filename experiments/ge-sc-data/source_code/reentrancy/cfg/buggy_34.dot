digraph  {
13 [label="2_ mapping(address => uint) balances_re_ent15;\n13-new_variable-3-3", method="", type_label=new_variable];
19 [label="3_ function withdraw_balances_re_ent15 () public {\n       if (msg.sender.send(balances_re_ent15[msg.sender ]))\n          balances_re_ent15[msg.sender] = 0;\n      }\n19-function_definition-4-7", method="withdraw_balances_re_ent15()", type_label=function_definition];
23 [label="4_ if\n23-if-5-6", method="withdraw_balances_re_ent15()", type_label=if];
2757 [label="4_ end_if", method="withdraw_balances_re_ent15()", type_label=end_if];
36 [label="5_ balances_re_ent15[msg.sender] = 0;\n36-expression_statement-6-6", method="withdraw_balances_re_ent15()", type_label=expression_statement];
44 [label="7_ address payable public owner;\n44-new_variable-8-8", method="", type_label=new_variable];
49 [label="8_ bool not_called_re_ent27 = true;\n49-new_variable-9-9", method="", type_label=new_variable];
55 [label="9_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n55-function_definition-10-16", method="bug_re_ent27()", type_label=function_definition];
59 [label="10_ require(not_called_re_ent27);\n59-expression_statement-11-11", method="bug_re_ent27()", type_label=expression_statement];
64 [label="11_ if\n64-if-12-14", method="bug_re_ent27()", type_label=if];
2798 [label="11_ end_if", method="bug_re_ent27()", type_label=end_if];
79 [label="14_ not_called_re_ent27 = false;\n79-expression_statement-15-15", method="bug_re_ent27()", type_label=expression_statement];
96 [label="18_ owner = msg.sender;\n96-expression_statement-19-19", method="", type_label=expression_statement];
102 [label="20_ address payable lastPlayer_re_ent2;\n102-new_variable-21-21", method="", type_label=new_variable];
106 [label="21_ uint jackpot_re_ent2;\n106-new_variable-22-22", method="", type_label=new_variable];
110 [label="22_ function buyTicket_re_ent2() public{\n	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))\n        revert();\n      lastPlayer_re_ent2 = msg.sender;\n      jackpot_re_ent2    = address(this).balance;\n    }\n110-function_definition-23-28", method="buyTicket_re_ent2()", type_label=function_definition];
114 [label="23_ if\n114-if-24-25", method="buyTicket_re_ent2()", type_label=if];
2848 [label="23_ end_if", method="buyTicket_re_ent2()", type_label=end_if];
125 [label="25_ lastPlayer_re_ent2 = msg.sender;\n125-expression_statement-26-26", method="buyTicket_re_ent2()", type_label=expression_statement];
131 [label="26_ jackpot_re_ent2    = address(this).balance;\n131-expression_statement-27-27", method="buyTicket_re_ent2()", type_label=expression_statement];
139 [label="28_ modifier onlyOwner {\n       require(msg.sender == owner);\n       _;\n   }\n139-expression_statement-29-32", method="", type_label=expression_statement];
142 [label="29_ require(msg.sender == owner);\n142-expression_statement-30-30", method="", type_label=expression_statement];
151 [label="30_ _;\n151-expression_statement-31-31", method="", type_label=expression_statement];
153 [label="32_ function transferOwnership(address payable _newOwner) public onlyOwner {\n       owner = _newOwner;\n   }\n153-function_definition-33-35", method="transferOwnership(address payable _newOwner)", type_label=function_definition];
160 [label="32_ onlyOwner\n160-expression_statement-33-33", method="transferOwnership(address payable _newOwner)", type_label=expression_statement];
163 [label="33_ owner = _newOwner;\n163-expression_statement-34-34", method="transferOwnership(address payable _newOwner)", type_label=expression_statement];
167 [label="35_ mapping(address => uint) balances_re_ent17;\n167-new_variable-36-36", method="", type_label=new_variable];
173 [label="36_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n173-function_definition-37-42", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
181 [label="37_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n181-expression_statement-38-38", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
192 [label="38_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n192-new_variable-39-39", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
212 [label="39_ require(success);\n212-expression_statement-40-40", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
217 [label="40_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n217-expression_statement-41-41", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
228 [label="44_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n228-function_definition-45-49", method="add(uint256 a,uint256 b)", type_label=function_definition];
245 [label="45_ uint256 c = a + b;\n245-new_variable-46-46", method="add(uint256 a,uint256 b)", type_label=new_variable];
253 [label="46_ require(c >= a, \"SafeMath: addition overflow\");\n253-expression_statement-47-47", method="add(uint256 a,uint256 b)", type_label=expression_statement];
263 [label="47_ return c;\n263-return-48-48", method="add(uint256 a,uint256 b)", type_label=return];
265 [label="49_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n265-function_definition-50-54", method="sub(uint256 a,uint256 b)", type_label=function_definition];
282 [label="50_ require(b <= a, \"SafeMath: subtraction overflow\");\n282-expression_statement-51-51", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
292 [label="51_ uint256 c = a - b;\n292-new_variable-52-52", method="sub(uint256 a,uint256 b)", type_label=new_variable];
300 [label="52_ return c;\n300-return-53-53", method="sub(uint256 a,uint256 b)", type_label=return];
302 [label="54_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n302-function_definition-55-62", method="mul(uint256 a,uint256 b)", type_label=function_definition];
319 [label="55_ if_a == 0\n319-if-56-58", method="mul(uint256 a,uint256 b)", type_label=if];
3053 [label="55_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
324 [label="56_ return 0;\n324-return-57-57", method="mul(uint256 a,uint256 b)", type_label=return];
326 [label="58_ uint256 c = a * b;\n326-new_variable-59-59", method="mul(uint256 a,uint256 b)", type_label=new_variable];
334 [label="59_ require(c / a == b, \"SafeMath: multiplication overflow\");\n334-expression_statement-60-60", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
346 [label="60_ return c;\n346-return-61-61", method="mul(uint256 a,uint256 b)", type_label=return];
348 [label="62_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n348-function_definition-63-67", method="div(uint256 a,uint256 b)", type_label=function_definition];
365 [label="63_ require(b > 0, \"SafeMath: division by zero\");\n365-expression_statement-64-64", method="div(uint256 a,uint256 b)", type_label=expression_statement];
375 [label="64_ uint256 c = a / b;\n375-new_variable-65-65", method="div(uint256 a,uint256 b)", type_label=new_variable];
383 [label="65_ return c;\n383-return-66-66", method="div(uint256 a,uint256 b)", type_label=return];
385 [label="67_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n385-function_definition-68-71", method="mod(uint256 a,uint256 b)", type_label=function_definition];
402 [label="68_ require(b != 0, \"SafeMath: modulo by zero\");\n402-expression_statement-69-69", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
412 [label="69_ return a % b;\n412-return-70-70", method="mod(uint256 a,uint256 b)", type_label=return];
427 [label="74_ uint256 counter_re_ent28 =0;\n427-new_variable-75-75", method="", type_label=new_variable];
432 [label="75_ function callme_re_ent28() public{\n        require(counter_re_ent28<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent28 += 1;\n    }\n432-function_definition-76-82", method="callme_re_ent28()", type_label=function_definition];
436 [label="76_ require(counter_re_ent28<=5);\n436-expression_statement-77-77", method="callme_re_ent28()", type_label=expression_statement];
443 [label="77_ if\n443-if-78-80", method="callme_re_ent28()", type_label=if];
3177 [label="77_ end_if", method="callme_re_ent28()", type_label=end_if];
458 [label="80_ counter_re_ent28 += 1;\n458-expression_statement-81-81", method="callme_re_ent28()", type_label=expression_statement];
462 [label="82_ mapping (address => transferMapping) private _balances;\n462-new_variable-83-83", method="", type_label=new_variable];
470 [label="83_ bool not_called_re_ent34 = true;\n470-new_variable-84-84", method="", type_label=new_variable];
476 [label="84_ function bug_re_ent34() public{\n        require(not_called_re_ent34);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent34 = false;\n    }\n476-function_definition-85-91", method="bug_re_ent34()", type_label=function_definition];
480 [label="85_ require(not_called_re_ent34);\n480-expression_statement-86-86", method="bug_re_ent34()", type_label=expression_statement];
485 [label="86_ if\n485-if-87-89", method="bug_re_ent34()", type_label=if];
3219 [label="86_ end_if", method="bug_re_ent34()", type_label=end_if];
500 [label="89_ not_called_re_ent34 = false;\n500-expression_statement-90-90", method="bug_re_ent34()", type_label=expression_statement];
505 [label="91_ mapping (address => mapping (address => uint256)) private _allowances;\n505-new_variable-92-92", method="", type_label=new_variable];
514 [label="92_ uint256 counter_re_ent21 =0;\n514-new_variable-93-93", method="", type_label=new_variable];
519 [label="93_ function callme_re_ent21() public{\n        require(counter_re_ent21<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent21 += 1;\n    }\n519-function_definition-94-100", method="callme_re_ent21()", type_label=function_definition];
523 [label="94_ require(counter_re_ent21<=5);\n523-expression_statement-95-95", method="callme_re_ent21()", type_label=expression_statement];
530 [label="95_ if\n530-if-96-98", method="callme_re_ent21()", type_label=if];
3264 [label="95_ end_if", method="callme_re_ent21()", type_label=end_if];
545 [label="98_ counter_re_ent21 += 1;\n545-expression_statement-99-99", method="callme_re_ent21()", type_label=expression_statement];
549 [label="100_ uint256 private _totalSupply;\n549-new_variable-101-101", method="", type_label=new_variable];
554 [label="101_ mapping(address => uint) balances_re_ent10;\n554-new_variable-102-102", method="", type_label=new_variable];
560 [label="102_ function withdrawFunds_re_ent10 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent10[msg.sender] -= _weiToWithdraw;\n    }\n560-function_definition-103-107", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=function_definition];
568 [label="103_ require(balances_re_ent10[msg.sender] >= _weiToWithdraw);\n568-expression_statement-104-104", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
579 [label="104_ require(msg.sender.send(_weiToWithdraw));\n579-expression_statement-105-105", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
591 [label="105_ balances_re_ent10[msg.sender] -= _weiToWithdraw;\n591-expression_statement-106-106", method="withdrawFunds_re_ent10(uint256 _weiToWithdraw)", type_label=expression_statement];
599 [label="107_ uint256 public _maxTotalSupply;\n599-new_variable-108-108", method="", type_label=new_variable];
604 [label="108_ mapping(address => uint) balances_re_ent21;\n604-new_variable-109-109", method="", type_label=new_variable];
610 [label="109_ function withdraw_balances_re_ent21 () public {\n       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent21[msg.sender] = 0;\n      }\n610-function_definition-110-114", method="withdraw_balances_re_ent21()", type_label=function_definition];
614 [label="110_ (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])(\"\");\n614-new_variable-111-111", method="withdraw_balances_re_ent21()", type_label=new_variable];
638 [label="111_ if\n638-if-112-113", method="withdraw_balances_re_ent21()", type_label=if];
3372 [label="111_ end_if", method="withdraw_balances_re_ent21()", type_label=end_if];
640 [label="112_ balances_re_ent21[msg.sender] = 0;\n640-expression_statement-113-113", method="withdraw_balances_re_ent21()", type_label=expression_statement];
648 [label="114_ string private _name = \"Lollypop\";\n648-new_variable-115-115", method="", type_label=new_variable];
655 [label="115_ mapping(address => uint) userBalance_re_ent12;\n655-new_variable-116-116", method="", type_label=new_variable];
661 [label="116_ function withdrawBalance_re_ent12() public{\n        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent12[msg.sender] = 0;\n    }\n661-function_definition-117-122", method="withdrawBalance_re_ent12()", type_label=function_definition];
665 [label="117_ if\n665-if-118-120", method="withdrawBalance_re_ent12()", type_label=if];
3399 [label="117_ end_if", method="withdrawBalance_re_ent12()", type_label=end_if];
683 [label="120_ userBalance_re_ent12[msg.sender] = 0;\n683-expression_statement-121-121", method="withdrawBalance_re_ent12()", type_label=expression_statement];
691 [label="122_ string private _symbol = \"Lolly\";\n691-new_variable-123-123", method="", type_label=new_variable];
698 [label="123_ mapping(address => uint) redeemableEther_re_ent11;\n698-new_variable-124-124", method="", type_label=new_variable];
704 [label="124_ function claimReward_re_ent11() public {        \n        require(redeemableEther_re_ent11[msg.sender] > 0);\n        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n        msg.sender.transfer(transferValue_re_ent11);    \n        redeemableEther_re_ent11[msg.sender] = 0;\n    }\n704-function_definition-125-130", method="claimReward_re_ent11()", type_label=function_definition];
708 [label="125_ require(redeemableEther_re_ent11[msg.sender] > 0);\n708-expression_statement-126-126", method="claimReward_re_ent11()", type_label=expression_statement];
719 [label="126_ uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];\n719-new_variable-127-127", method="claimReward_re_ent11()", type_label=new_variable];
729 [label="127_ msg.sender.transfer(transferValue_re_ent11);\n729-expression_statement-128-128", method="claimReward_re_ent11()", type_label=expression_statement];
738 [label="128_ redeemableEther_re_ent11[msg.sender] = 0;\n738-expression_statement-129-129", method="claimReward_re_ent11()", type_label=expression_statement];
746 [label="130_ uint8 private _decimals= 18;\n746-new_variable-131-131", method="", type_label=new_variable];
752 [label="131_ mapping(address => uint) balances_re_ent1;\n752-new_variable-132-132", method="", type_label=new_variable];
758 [label="132_ function withdraw_balances_re_ent1 () public {\n       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent1[msg.sender] = 0;\n      }\n758-function_definition-133-137", method="withdraw_balances_re_ent1()", type_label=function_definition];
762 [label="133_ (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])(\"\");\n762-new_variable-134-134", method="withdraw_balances_re_ent1()", type_label=new_variable];
786 [label="134_ if\n786-if-135-136", method="withdraw_balances_re_ent1()", type_label=if];
3520 [label="134_ end_if", method="withdraw_balances_re_ent1()", type_label=end_if];
788 [label="135_ balances_re_ent1[msg.sender] = 0;\n788-expression_statement-136-136", method="withdraw_balances_re_ent1()", type_label=expression_statement];
796 [label="137_ uint256 public maxAgeOfToken = 365 days;\n796-new_variable-138-138", method="", type_label=new_variable];
803 [label="138_ bool not_called_re_ent41 = true;\n803-new_variable-139-139", method="", type_label=new_variable];
809 [label="139_ function bug_re_ent41() public{\n        require(not_called_re_ent41);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent41 = false;\n    }\n809-function_definition-140-146", method="bug_re_ent41()", type_label=function_definition];
813 [label="140_ require(not_called_re_ent41);\n813-expression_statement-141-141", method="bug_re_ent41()", type_label=expression_statement];
818 [label="141_ if\n818-if-142-144", method="bug_re_ent41()", type_label=if];
3552 [label="141_ end_if", method="bug_re_ent41()", type_label=end_if];
833 [label="144_ not_called_re_ent41 = false;\n833-expression_statement-145-145", method="bug_re_ent41()", type_label=expression_statement];
838 [label="146_ uint256  public minAgeOfToken = 1 days;\n838-new_variable-147-147", method="", type_label=new_variable];
845 [label="147_ uint256 counter_re_ent42 =0;\n845-new_variable-148-148", method="", type_label=new_variable];
850 [label="148_ function callme_re_ent42() public{\n        require(counter_re_ent42<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent42 += 1;\n    }\n850-function_definition-149-155", method="callme_re_ent42()", type_label=function_definition];
854 [label="149_ require(counter_re_ent42<=5);\n854-expression_statement-150-150", method="callme_re_ent42()", type_label=expression_statement];
861 [label="150_ if\n861-if-151-153", method="callme_re_ent42()", type_label=if];
3595 [label="150_ end_if", method="callme_re_ent42()", type_label=end_if];
876 [label="153_ counter_re_ent42 += 1;\n876-expression_statement-154-154", method="callme_re_ent42()", type_label=expression_statement];
880 [label="155_ uint256 public perDayBonus = 100;\n880-new_variable-156-156", method="", type_label=new_variable];
886 [label="156_ struct  transferMapping{\n        uint256 amount;\n        uint256 time;\n    }\n886-expression_statement-157-160", method="transferMapping()", type_label=expression_statement];
898 [label="161_ _maxTotalSupply = 1000000000 * 10 ** 18;\n898-expression_statement-162-162", method="", type_label=expression_statement];
906 [label="162_ _totalSupply =  2000000 * 10 ** 18;\n906-expression_statement-163-163", method="", type_label=expression_statement];
914 [label="163_ _balances[msg.sender].amount = _totalSupply;\n914-expression_statement-164-164", method="", type_label=expression_statement];
924 [label="164_ _balances[msg.sender].time = now;\n924-expression_statement-165-165", method="", type_label=expression_statement];
934 [label="166_ address payable lastPlayer_re_ent37;\n934-new_variable-167-167", method="", type_label=new_variable];
938 [label="167_ uint jackpot_re_ent37;\n938-new_variable-168-168", method="", type_label=new_variable];
942 [label="168_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n942-function_definition-169-174", method="buyTicket_re_ent37()", type_label=function_definition];
946 [label="169_ if\n946-if-170-171", method="buyTicket_re_ent37()", type_label=if];
3680 [label="169_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
957 [label="171_ lastPlayer_re_ent37 = msg.sender;\n957-expression_statement-172-172", method="buyTicket_re_ent37()", type_label=expression_statement];
963 [label="172_ jackpot_re_ent37    = address(this).balance;\n963-expression_statement-173-173", method="buyTicket_re_ent37()", type_label=expression_statement];
971 [label="174_ function calculateBonus(uint256 timeElasped , uint256 amount) public view  returns(uint256){\n        uint256 totalDays = timeElasped.div(minAgeOfToken);\n        if(totalDays > maxAgeOfToken){\n            totalDays = maxAgeOfToken;\n        }\n        uint256 totalBonus = (totalDays *  amount).div(perDayBonus);\n        return totalBonus;\n    }\n971-function_definition-175-182", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=function_definition];
988 [label="175_ uint256 totalDays = timeElasped.div(minAgeOfToken);\n988-new_variable-176-176", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=new_variable];
999 [label="176_ if_totalDays > maxAgeOfToken\n999-if-177-179", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=if];
3733 [label="176_ end_if", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=end_if];
1004 [label="177_ totalDays = maxAgeOfToken;\n1004-expression_statement-178-178", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=expression_statement];
1008 [label="179_ uint256 totalBonus = (totalDays *  amount).div(perDayBonus);\n1008-new_variable-180-180", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=new_variable];
1022 [label="180_ return totalBonus;\n1022-return-181-181", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=return];
1024 [label="182_ mapping(address => uint) balances_re_ent3;\n1024-new_variable-183-183", method="", type_label=new_variable];
1030 [label="183_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n1030-function_definition-184-189", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
1038 [label="184_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n1038-expression_statement-185-185", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1049 [label="185_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n1049-new_variable-186-186", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
1069 [label="186_ require(success);\n1069-expression_statement-187-187", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1074 [label="187_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n1074-expression_statement-188-188", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1082 [label="189_ function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        uint256 senderTimeElasped = now - (_balances[sender].time);\n        uint256 recipientTimeElasped = now - (_balances[recipient].time);\n        if(senderTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply)){\n            uint256 bonus = calculateBonus(senderTimeElasped , balanceOf(sender));\n            mint(sender , bonus);\n        }\n        if(recipientTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply) && sender!= recipient){\n             uint256 bonus = calculateBonus(recipientTimeElasped , balanceOf(recipient));\n             mint(recipient , bonus);\n        }\n        _balances[sender].amount = _balances[sender].amount.sub(amount);\n        _balances[recipient].amount = _balances[recipient].amount.add(amount);\n        _balances[sender].time = now;\n        _balances[recipient].time = now;\n        emit Transfer(sender, recipient, amount);\n    }\n1082-function_definition-190-208", method="_transfer(address sender,address recipient,uint256 amount)", type_label=function_definition];
1098 [label="190_ require(sender != address(0), \"ERC20: transfer from the zero address\");\n1098-expression_statement-191-191", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1110 [label="191_ require(recipient != address(0), \"ERC20: transfer to the zero address\");\n1110-expression_statement-192-192", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1122 [label="192_ uint256 senderTimeElasped = now - (_balances[sender].time);\n1122-new_variable-193-193", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
1135 [label="193_ uint256 recipientTimeElasped = now - (_balances[recipient].time);\n1135-new_variable-194-194", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
1148 [label="194_ if_senderTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply)\n1148-if-195-198", method="_transfer(address sender,address recipient,uint256 amount)", type_label=if];
3882 [label="194_ end_if", method="_transfer(address sender,address recipient,uint256 amount)", type_label=end_if];
1158 [label="195_ uint256 bonus = calculateBonus(senderTimeElasped , balanceOf(sender));\n1158-new_variable-196-196", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
1172 [label="196_ mint(sender , bonus);\n1172-expression_statement-197-197", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1179 [label="198_ if_recipientTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply) && sender!= recipient\n1179-if-199-202", method="_transfer(address sender,address recipient,uint256 amount)", type_label=if];
3913 [label="198_ end_if", method="_transfer(address sender,address recipient,uint256 amount)", type_label=end_if];
1193 [label="199_ uint256 bonus = calculateBonus(recipientTimeElasped , balanceOf(recipient));\n1193-new_variable-200-200", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
1207 [label="200_ mint(recipient , bonus);\n1207-expression_statement-201-201", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1214 [label="202_ _balances[sender].amount = _balances[sender].amount.sub(amount);\n1214-expression_statement-203-203", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1231 [label="203_ _balances[recipient].amount = _balances[recipient].amount.add(amount);\n1231-expression_statement-204-204", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1248 [label="204_ _balances[sender].time = now;\n1248-expression_statement-205-205", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1256 [label="205_ _balances[recipient].time = now;\n1256-expression_statement-206-206", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1272 [label="208_ address payable lastPlayer_re_ent9;\n1272-new_variable-209-209", method="", type_label=new_variable];
1276 [label="209_ uint jackpot_re_ent9;\n1276-new_variable-210-210", method="", type_label=new_variable];
1280 [label="210_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n1280-function_definition-211-217", method="buyTicket_re_ent9()", type_label=function_definition];
1284 [label="211_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n1284-new_variable-212-212", method="buyTicket_re_ent9()", type_label=new_variable];
1302 [label="212_ if\n1302-if-213-214", method="buyTicket_re_ent9()", type_label=if];
4036 [label="212_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
1307 [label="214_ lastPlayer_re_ent9 = msg.sender;\n1307-expression_statement-215-215", method="buyTicket_re_ent9()", type_label=expression_statement];
1313 [label="215_ jackpot_re_ent9    = address(this).balance;\n1313-expression_statement-216-216", method="buyTicket_re_ent9()", type_label=expression_statement];
1321 [label="217_ function name() public view returns (string memory) {\n        return _name;\n    }\n1321-function_definition-218-220", method="name()", type_label=function_definition];
1330 [label="218_ return _name;\n1330-return-219-219", method="name()", type_label=return];
1332 [label="220_ mapping(address => uint) redeemableEther_re_ent25;\n1332-new_variable-221-221", method="", type_label=new_variable];
1338 [label="221_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n1338-function_definition-222-227", method="claimReward_re_ent25()", type_label=function_definition];
1342 [label="222_ require(redeemableEther_re_ent25[msg.sender] > 0);\n1342-expression_statement-223-223", method="claimReward_re_ent25()", type_label=expression_statement];
1353 [label="223_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n1353-new_variable-224-224", method="claimReward_re_ent25()", type_label=new_variable];
1363 [label="224_ msg.sender.transfer(transferValue_re_ent25);\n1363-expression_statement-225-225", method="claimReward_re_ent25()", type_label=expression_statement];
1372 [label="225_ redeemableEther_re_ent25[msg.sender] = 0;\n1372-expression_statement-226-226", method="claimReward_re_ent25()", type_label=expression_statement];
1380 [label="227_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n1380-function_definition-228-230", method="symbol()", type_label=function_definition];
1389 [label="228_ return _symbol;\n1389-return-229-229", method="symbol()", type_label=return];
1391 [label="230_ mapping(address => uint) userBalance_re_ent19;\n1391-new_variable-231-231", method="", type_label=new_variable];
1397 [label="231_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n1397-function_definition-232-237", method="withdrawBalance_re_ent19()", type_label=function_definition];
1401 [label="232_ if\n1401-if-233-235", method="withdrawBalance_re_ent19()", type_label=if];
4135 [label="232_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
1419 [label="235_ userBalance_re_ent19[msg.sender] = 0;\n1419-expression_statement-236-236", method="withdrawBalance_re_ent19()", type_label=expression_statement];
1427 [label="237_ function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n1427-function_definition-238-240", method="decimals()", type_label=function_definition];
1436 [label="238_ return _decimals;\n1436-return-239-239", method="decimals()", type_label=return];
1438 [label="240_ mapping(address => uint) userBalance_re_ent26;\n1438-new_variable-241-241", method="", type_label=new_variable];
1444 [label="241_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n1444-function_definition-242-248", method="withdrawBalance_re_ent26()", type_label=function_definition];
1448 [label="242_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n1448-new_variable-243-243", method="withdrawBalance_re_ent26()", type_label=new_variable];
1472 [label="243_ if\n1472-if-244-246", method="withdrawBalance_re_ent26()", type_label=if];
4206 [label="243_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
1478 [label="246_ userBalance_re_ent26[msg.sender] = 0;\n1478-expression_statement-247-247", method="withdrawBalance_re_ent26()", type_label=expression_statement];
1486 [label="248_ modifier onlyLollypopAndOwner {\n        require(msg.sender == address(this) || msg.sender == owner);\n        _;\n    }\n1486-expression_statement-249-252", method="", type_label=expression_statement];
1489 [label="249_ require(msg.sender == address(this) || msg.sender == owner);\n1489-expression_statement-250-250", method="", type_label=expression_statement];
1506 [label="250_ _;\n1506-expression_statement-251-251", method="", type_label=expression_statement];
1508 [label="252_ mapping(address => uint) balances_re_ent31;\n1508-new_variable-253-253", method="", type_label=new_variable];
1514 [label="253_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n1514-function_definition-254-258", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
1522 [label="254_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n1522-expression_statement-255-255", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1533 [label="255_ require(msg.sender.send(_weiToWithdraw));\n1533-expression_statement-256-256", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1545 [label="256_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n1545-expression_statement-257-257", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
1567 [label="259_ bool not_called_re_ent13 = true;\n1567-new_variable-260-260", method="", type_label=new_variable];
1573 [label="260_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n1573-function_definition-261-268", method="bug_re_ent13()", type_label=function_definition];
1577 [label="261_ require(not_called_re_ent13);\n1577-expression_statement-262-262", method="bug_re_ent13()", type_label=expression_statement];
1582 [label="262_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n1582-new_variable-263-263", method="bug_re_ent13()", type_label=new_variable];
1603 [label="263_ if\n1603-if-264-266", method="bug_re_ent13()", type_label=if];
4337 [label="263_ end_if", method="bug_re_ent13()", type_label=end_if];
1609 [label="266_ not_called_re_ent13 = false;\n1609-expression_statement-267-267", method="bug_re_ent13()", type_label=expression_statement];
1628 [label="269_ function mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account].amount = _balances[account].amount.add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n1628-function_definition-270-275", method="mint(address account,uint256 amount)", type_label=function_definition];
1640 [label="270_ require(account != address(0), \"ERC20: mint to the zero address\");\n1640-expression_statement-271-271", method="mint(address account,uint256 amount)", type_label=expression_statement];
1652 [label="271_ _totalSupply = _totalSupply.add(amount);\n1652-expression_statement-272-272", method="mint(address account,uint256 amount)", type_label=expression_statement];
1661 [label="272_ _balances[account].amount = _balances[account].amount.add(amount);\n1661-expression_statement-273-273", method="mint(address account,uint256 amount)", type_label=expression_statement];
1688 [label="275_ bool not_called_re_ent20 = true;\n1688-new_variable-276-276", method="", type_label=new_variable];
1694 [label="276_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n1694-function_definition-277-283", method="bug_re_ent20()", type_label=function_definition];
1698 [label="277_ require(not_called_re_ent20);\n1698-expression_statement-278-278", method="bug_re_ent20()", type_label=expression_statement];
1703 [label="278_ if\n1703-if-279-281", method="bug_re_ent20()", type_label=if];
4437 [label="278_ end_if", method="bug_re_ent20()", type_label=end_if];
1718 [label="281_ not_called_re_ent20 = false;\n1718-expression_statement-282-282", method="bug_re_ent20()", type_label=expression_statement];
1723 [label="283_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n1723-function_definition-284-286", method="totalSupply()", type_label=function_definition];
1732 [label="284_ return _totalSupply;\n1732-return-285-285", method="totalSupply()", type_label=return];
1734 [label="286_ mapping(address => uint) redeemableEther_re_ent32;\n1734-new_variable-287-287", method="", type_label=new_variable];
1740 [label="287_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n1740-function_definition-288-293", method="claimReward_re_ent32()", type_label=function_definition];
1744 [label="288_ require(redeemableEther_re_ent32[msg.sender] > 0);\n1744-expression_statement-289-289", method="claimReward_re_ent32()", type_label=expression_statement];
1755 [label="289_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n1755-new_variable-290-290", method="claimReward_re_ent32()", type_label=new_variable];
1765 [label="290_ msg.sender.transfer(transferValue_re_ent32);\n1765-expression_statement-291-291", method="claimReward_re_ent32()", type_label=expression_statement];
1774 [label="291_ redeemableEther_re_ent32[msg.sender] = 0;\n1774-expression_statement-292-292", method="claimReward_re_ent32()", type_label=expression_statement];
1782 [label="293_ function balanceOf(address account) public view returns (uint256) {\n        return _balances[account].amount;\n    }\n1782-function_definition-294-296", method="balanceOf(address account)", type_label=function_definition];
1795 [label="294_ return _balances[account].amount;\n1795-return-295-295", method="balanceOf(address account)", type_label=return];
1801 [label="296_ mapping(address => uint) balances_re_ent38;\n1801-new_variable-297-297", method="", type_label=new_variable];
1807 [label="297_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n1807-function_definition-298-302", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
1815 [label="298_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n1815-expression_statement-299-299", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1826 [label="299_ require(msg.sender.send(_weiToWithdraw));\n1826-expression_statement-300-300", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1838 [label="300_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n1838-expression_statement-301-301", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
1846 [label="302_ function timeOf(address account) public view returns (uint256) {\n        return _balances[account].time;\n    }\n1846-function_definition-303-305", method="timeOf(address account)", type_label=function_definition];
1859 [label="303_ return _balances[account].time;\n1859-return-304-304", method="timeOf(address account)", type_label=return];
1865 [label="305_ mapping(address => uint) redeemableEther_re_ent4;\n1865-new_variable-306-306", method="", type_label=new_variable];
1871 [label="306_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n1871-function_definition-307-312", method="claimReward_re_ent4()", type_label=function_definition];
1875 [label="307_ require(redeemableEther_re_ent4[msg.sender] > 0);\n1875-expression_statement-308-308", method="claimReward_re_ent4()", type_label=expression_statement];
1886 [label="308_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n1886-new_variable-309-309", method="claimReward_re_ent4()", type_label=new_variable];
1896 [label="309_ msg.sender.transfer(transferValue_re_ent4);\n1896-expression_statement-310-310", method="claimReward_re_ent4()", type_label=expression_statement];
1905 [label="310_ redeemableEther_re_ent4[msg.sender] = 0;\n1905-expression_statement-311-311", method="claimReward_re_ent4()", type_label=expression_statement];
1913 [label="312_ function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n1913-function_definition-313-316", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
1929 [label="313_ _transfer(msg.sender, recipient, amount);\n1929-expression_statement-314-314", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1940 [label="314_ return true;\n1940-return-315-315", method="transfer(address recipient,uint256 amount)", type_label=return];
1943 [label="316_ uint256 counter_re_ent7 =0;\n1943-new_variable-317-317", method="", type_label=new_variable];
1948 [label="317_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n1948-function_definition-318-324", method="callme_re_ent7()", type_label=function_definition];
1952 [label="318_ require(counter_re_ent7<=5);\n1952-expression_statement-319-319", method="callme_re_ent7()", type_label=expression_statement];
1959 [label="319_ if\n1959-if-320-322", method="callme_re_ent7()", type_label=if];
4693 [label="319_ end_if", method="callme_re_ent7()", type_label=end_if];
1974 [label="322_ counter_re_ent7 += 1;\n1974-expression_statement-323-323", method="callme_re_ent7()", type_label=expression_statement];
1978 [label="324_ function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n    require(receivers.length == amounts.length);\n    for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }\n  }\n1978-function_definition-325-330", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=function_definition];
1992 [label="325_ require(receivers.length == amounts.length);\n1992-expression_statement-326-326", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
2003 [label="326_ for(i < receivers.length;;i++)\n2003-for-327-329", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=for];
4737 [label="326_ end_loop", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=end_loop];
2016 [label="326_ i++\n2016-expression_statement-327-327", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
2019 [label="327_ transfer(receivers[i], amounts[i]);\n2019-expression_statement-328-328", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
2030 [label="330_ address payable lastPlayer_re_ent23;\n2030-new_variable-331-331", method="", type_label=new_variable];
2034 [label="331_ uint jackpot_re_ent23;\n2034-new_variable-332-332", method="", type_label=new_variable];
2038 [label="332_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n2038-function_definition-333-338", method="buyTicket_re_ent23()", type_label=function_definition];
2042 [label="333_ if\n2042-if-334-335", method="buyTicket_re_ent23()", type_label=if];
4776 [label="333_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
2053 [label="335_ lastPlayer_re_ent23 = msg.sender;\n2053-expression_statement-336-336", method="buyTicket_re_ent23()", type_label=expression_statement];
2059 [label="336_ jackpot_re_ent23    = address(this).balance;\n2059-expression_statement-337-337", method="buyTicket_re_ent23()", type_label=expression_statement];
2067 [label="338_ function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n2067-function_definition-339-341", method="allowance(address owner,address spender)", type_label=function_definition];
2084 [label="339_ return _allowances[owner][spender];\n2084-return-340-340", method="allowance(address owner,address spender)", type_label=return];
2090 [label="341_ uint256 counter_re_ent14 =0;\n2090-new_variable-342-342", method="", type_label=new_variable];
2095 [label="342_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n2095-function_definition-343-349", method="callme_re_ent14()", type_label=function_definition];
2099 [label="343_ require(counter_re_ent14<=5);\n2099-expression_statement-344-344", method="callme_re_ent14()", type_label=expression_statement];
2106 [label="344_ if\n2106-if-345-347", method="callme_re_ent14()", type_label=if];
4840 [label="344_ end_if", method="callme_re_ent14()", type_label=end_if];
2121 [label="347_ counter_re_ent14 += 1;\n2121-expression_statement-348-348", method="callme_re_ent14()", type_label=expression_statement];
2125 [label="349_ function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n2125-function_definition-350-353", method="approve(address spender,uint256 value)", type_label=function_definition];
2141 [label="350_ _approve(msg.sender, spender, value);\n2141-expression_statement-351-351", method="approve(address spender,uint256 value)", type_label=expression_statement];
2152 [label="351_ return true;\n2152-return-352-352", method="approve(address spender,uint256 value)", type_label=return];
2155 [label="353_ address payable lastPlayer_re_ent30;\n2155-new_variable-354-354", method="", type_label=new_variable];
2159 [label="354_ uint jackpot_re_ent30;\n2159-new_variable-355-355", method="", type_label=new_variable];
2163 [label="355_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n2163-function_definition-356-361", method="buyTicket_re_ent30()", type_label=function_definition];
2167 [label="356_ if\n2167-if-357-358", method="buyTicket_re_ent30()", type_label=if];
4901 [label="356_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
2178 [label="358_ lastPlayer_re_ent30 = msg.sender;\n2178-expression_statement-359-359", method="buyTicket_re_ent30()", type_label=expression_statement];
2184 [label="359_ jackpot_re_ent30    = address(this).balance;\n2184-expression_statement-360-360", method="buyTicket_re_ent30()", type_label=expression_statement];
2192 [label="361_ function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n2192-function_definition-362-366", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
2212 [label="362_ _transfer(sender, recipient, amount);\n2212-expression_statement-363-363", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
2221 [label="363_ _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n2221-expression_statement-364-364", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
2243 [label="364_ return true;\n2243-return-365-365", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=return];
2246 [label="366_ mapping(address => uint) balances_re_ent8;\n2246-new_variable-367-367", method="", type_label=new_variable];
2252 [label="367_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n2252-function_definition-368-372", method="withdraw_balances_re_ent8()", type_label=function_definition];
2256 [label="368_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n2256-new_variable-369-369", method="withdraw_balances_re_ent8()", type_label=new_variable];
2280 [label="369_ if\n2280-if-370-371", method="withdraw_balances_re_ent8()", type_label=if];
5014 [label="369_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
2282 [label="370_ balances_re_ent8[msg.sender] = 0;\n2282-expression_statement-371-371", method="withdraw_balances_re_ent8()", type_label=expression_statement];
2290 [label="372_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n2290-function_definition-373-376", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
2306 [label="373_ _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n2306-expression_statement-374-374", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
2328 [label="374_ return true;\n2328-return-375-375", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
2331 [label="376_ mapping(address => uint) redeemableEther_re_ent39;\n2331-new_variable-377-377", method="", type_label=new_variable];
2337 [label="377_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n2337-function_definition-378-383", method="claimReward_re_ent39()", type_label=function_definition];
2341 [label="378_ require(redeemableEther_re_ent39[msg.sender] > 0);\n2341-expression_statement-379-379", method="claimReward_re_ent39()", type_label=expression_statement];
2352 [label="379_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n2352-new_variable-380-380", method="claimReward_re_ent39()", type_label=new_variable];
2362 [label="380_ msg.sender.transfer(transferValue_re_ent39);\n2362-expression_statement-381-381", method="claimReward_re_ent39()", type_label=expression_statement];
2371 [label="381_ redeemableEther_re_ent39[msg.sender] = 0;\n2371-expression_statement-382-382", method="claimReward_re_ent39()", type_label=expression_statement];
2379 [label="383_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n2379-function_definition-384-387", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
2395 [label="384_ _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n2395-expression_statement-385-385", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
2417 [label="385_ return true;\n2417-return-386-386", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
2420 [label="387_ mapping(address => uint) balances_re_ent36;\n2420-new_variable-388-388", method="", type_label=new_variable];
2426 [label="388_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n2426-function_definition-389-392", method="withdraw_balances_re_ent36()", type_label=function_definition];
2430 [label="389_ if\n2430-if-390-391", method="withdraw_balances_re_ent36()", type_label=if];
5164 [label="389_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
2443 [label="390_ balances_re_ent36[msg.sender] = 0;\n2443-expression_statement-391-391", method="withdraw_balances_re_ent36()", type_label=expression_statement];
2451 [label="392_ function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account].amount = _balances[account].amount.sub(value);\n        emit Transfer(account, address(0), value);\n    }\n2451-function_definition-393-398", method="_burn(address account,uint256 value)", type_label=function_definition];
2463 [label="393_ require(account != address(0), \"ERC20: burn from the zero address\");\n2463-expression_statement-394-394", method="_burn(address account,uint256 value)", type_label=expression_statement];
2475 [label="394_ _totalSupply = _totalSupply.sub(value);\n2475-expression_statement-395-395", method="_burn(address account,uint256 value)", type_label=expression_statement];
2484 [label="395_ _balances[account].amount = _balances[account].amount.sub(value);\n2484-expression_statement-396-396", method="_burn(address account,uint256 value)", type_label=expression_statement];
2511 [label="398_ uint256 counter_re_ent35 =0;\n2511-new_variable-399-399", method="", type_label=new_variable];
2516 [label="399_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n2516-function_definition-400-406", method="callme_re_ent35()", type_label=function_definition];
2520 [label="400_ require(counter_re_ent35<=5);\n2520-expression_statement-401-401", method="callme_re_ent35()", type_label=expression_statement];
2527 [label="401_ if\n2527-if-402-404", method="callme_re_ent35()", type_label=if];
5261 [label="401_ end_if", method="callme_re_ent35()", type_label=end_if];
2542 [label="404_ counter_re_ent35 += 1;\n2542-expression_statement-405-405", method="callme_re_ent35()", type_label=expression_statement];
2546 [label="406_ function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n2546-function_definition-407-412", method="_approve(address owner,address spender,uint256 value)", type_label=function_definition];
2562 [label="407_ require(owner != address(0), \"ERC20: approve from the zero address\");\n2562-expression_statement-408-408", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
2574 [label="408_ require(spender != address(0), \"ERC20: approve to the zero address\");\n2574-expression_statement-409-409", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
2586 [label="409_ _allowances[owner][spender] = value;\n2586-expression_statement-410-410", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
2602 [label="412_ mapping(address => uint) userBalance_re_ent40;\n2602-new_variable-413-413", method="", type_label=new_variable];
2608 [label="413_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n2608-function_definition-414-420", method="withdrawBalance_re_ent40()", type_label=function_definition];
2612 [label="414_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n2612-new_variable-415-415", method="withdrawBalance_re_ent40()", type_label=new_variable];
2636 [label="415_ if\n2636-if-416-418", method="withdrawBalance_re_ent40()", type_label=if];
5370 [label="415_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
2642 [label="418_ userBalance_re_ent40[msg.sender] = 0;\n2642-expression_statement-419-419", method="withdrawBalance_re_ent40()", type_label=expression_statement];
2650 [label="420_ function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n2650-function_definition-421-424", method="_burnFrom(address account,uint256 amount)", type_label=function_definition];
2662 [label="421_ _burn(account, amount);\n2662-expression_statement-422-422", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
2669 [label="422_ _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n2669-expression_statement-423-423", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
2691 [label="424_ mapping(address => uint) userBalance_re_ent33;\n2691-new_variable-425-425", method="", type_label=new_variable];
2697 [label="425_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n2697-function_definition-426-432", method="withdrawBalance_re_ent33()", type_label=function_definition];
2701 [label="426_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n2701-new_variable-427-427", method="withdrawBalance_re_ent33()", type_label=new_variable];
2725 [label="427_ if\n2725-if-428-430", method="withdrawBalance_re_ent33()", type_label=if];
5459 [label="427_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
2731 [label="430_ userBalance_re_ent33[msg.sender] = 0;\n2731-expression_statement-431-431", method="withdrawBalance_re_ent33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
19 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
23 -> 36  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
23 -> 2757  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2757 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
36 -> 2757  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
44 -> 49  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
55 -> 59  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
59 -> 64  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
64 -> 2798  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
102 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
110 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 2848  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
125 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
142 -> 151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
153 -> 163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
192 -> 212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
212 -> 217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
228 -> 245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
245 -> 253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
253 -> 263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
263 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
265 -> 282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
282 -> 292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
292 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
302 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
319 -> 324  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
319 -> 3053  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3053 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
324 -> 3053  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
324 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
326 -> 334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
334 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
346 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
348 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
375 -> 383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
383 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
385 -> 402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
402 -> 412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
412 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
432 -> 436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
443 -> 3177  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
462 -> 470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
485 -> 3219  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
505 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
530 -> 3264  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
549 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
560 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
599 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
610 -> 614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
614 -> 638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 640  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
638 -> 3372  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3372 -> 648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 3372  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
648 -> 655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
661 -> 665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 3399  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
691 -> 698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
704 -> 708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
708 -> 719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
719 -> 729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
762 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 788  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
786 -> 3520  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3520 -> 796  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 3520  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
796 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
813 -> 818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
818 -> 3552  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
838 -> 845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 3595  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
880 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
898 -> 906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
906 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
934 -> 938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
942 -> 946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
946 -> 3680  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
957 -> 963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
971 -> 988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
988 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 1004  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
999 -> 3733  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3733 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 3733  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1008 -> 1022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1022 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1030 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 1069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1069 -> 1074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1082 -> 1098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1098 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1110 -> 1122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1122 -> 1135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1135 -> 1148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1148 -> 1158  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1148 -> 3882  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3882 -> 1179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1158 -> 1172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1172 -> 3882  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1179 -> 1193  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1179 -> 3913  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3913 -> 1214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1193 -> 1207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1207 -> 3913  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1214 -> 1231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1231 -> 1248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1248 -> 1256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1272 -> 1276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1280 -> 1284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1284 -> 1302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1302 -> 4036  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1307 -> 1313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1321 -> 1330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1330 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1338 -> 1342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1342 -> 1353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1353 -> 1363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1363 -> 1372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1380 -> 1389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1389 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1397 -> 1401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1401 -> 4135  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1427 -> 1436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1436 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1444 -> 1448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1448 -> 1472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1472 -> 4206  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1486 -> 1508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1489 -> 1506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1514 -> 1522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1522 -> 1533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1533 -> 1545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1573 -> 1577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1577 -> 1582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1582 -> 1603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1603 -> 4337  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1628 -> 1640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1640 -> 1652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1652 -> 1661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1694 -> 1698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1698 -> 1703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1703 -> 4437  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1723 -> 1732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1732 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1740 -> 1744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1744 -> 1755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1755 -> 1765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1765 -> 1774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1782 -> 1795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1795 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1807 -> 1815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1815 -> 1826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1826 -> 1838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1846 -> 1859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1859 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1871 -> 1875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1875 -> 1886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1886 -> 1896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1896 -> 1905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1913 -> 1929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1929 -> 1940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1940 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1948 -> 1952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1952 -> 1959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1959 -> 4693  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1978 -> 1992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1992 -> 2003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2003 -> 2019  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2003 -> 4737  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4737 -> 2030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2016 -> 2003  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2019 -> 2016  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2030 -> 2034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2038 -> 2042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2042 -> 4776  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2053 -> 2059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2067 -> 2084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2084 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2095 -> 2099  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2099 -> 2106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2106 -> 4840  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2125 -> 2141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2141 -> 2152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2152 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2155 -> 2159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2163 -> 2167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2167 -> 4901  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2178 -> 2184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2192 -> 2212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2212 -> 2221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2221 -> 2243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2243 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2252 -> 2256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2256 -> 2280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2280 -> 2282  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2280 -> 5014  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5014 -> 2290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2282 -> 5014  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2290 -> 2306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2306 -> 2328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2328 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2337 -> 2341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2341 -> 2352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2352 -> 2362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2362 -> 2371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2379 -> 2395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2395 -> 2417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2417 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2426 -> 2430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2430 -> 2443  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2430 -> 5164  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5164 -> 2451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2443 -> 5164  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2451 -> 2463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2463 -> 2475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2475 -> 2484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2516 -> 2520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2520 -> 2527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2527 -> 5261  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2546 -> 2562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2562 -> 2574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2574 -> 2586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2608 -> 2612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2612 -> 2636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2636 -> 5370  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2650 -> 2662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2662 -> 2669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2697 -> 2701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2701 -> 2725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2725 -> 5459  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
