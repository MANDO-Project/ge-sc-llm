digraph  {
13 [label="2_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n13-function_definition-3-3", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
33 [label="3_ uint256 counter_re_ent7 =0;\n33-new_variable-4-4", method="", type_label=new_variable];
38 [label="4_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n38-function_definition-5-11", method="callme_re_ent7()", type_label=function_definition];
42 [label="5_ require(counter_re_ent7<=5);\n42-expression_statement-6-6", method="callme_re_ent7()", type_label=expression_statement];
49 [label="6_ if\n49-if-7-9", method="callme_re_ent7()", type_label=if];
1736 [label="6_ end_if", method="callme_re_ent7()", type_label=end_if];
64 [label="9_ counter_re_ent7 += 1;\n64-expression_statement-10-10", method="callme_re_ent7()", type_label=expression_statement];
71 [label="13_ function allowance(address owner, address spender) external view returns (uint256);\n71-function_definition-14-14", method="allowance(address owner,address spender)", type_label=function_definition];
87 [label="14_ address payable lastPlayer_re_ent23;\n87-new_variable-15-15", method="", type_label=new_variable];
91 [label="15_ uint jackpot_re_ent23;\n91-new_variable-16-16", method="", type_label=new_variable];
95 [label="16_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n95-function_definition-17-22", method="buyTicket_re_ent23()", type_label=function_definition];
99 [label="17_ if\n99-if-18-19", method="buyTicket_re_ent23()", type_label=if];
1786 [label="17_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
110 [label="19_ lastPlayer_re_ent23 = msg.sender;\n110-expression_statement-20-20", method="buyTicket_re_ent23()", type_label=expression_statement];
116 [label="20_ jackpot_re_ent23    = address(this).balance;\n116-expression_statement-21-21", method="buyTicket_re_ent23()", type_label=expression_statement];
124 [label="22_ function balanceOf(address account) external view returns (uint256);\n124-function_definition-23-23", method="balanceOf(address account)", type_label=function_definition];
136 [label="23_ uint256 counter_re_ent14 =0;\n136-new_variable-24-24", method="", type_label=new_variable];
141 [label="24_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n141-function_definition-25-31", method="callme_re_ent14()", type_label=function_definition];
145 [label="25_ require(counter_re_ent14<=5);\n145-expression_statement-26-26", method="callme_re_ent14()", type_label=expression_statement];
152 [label="26_ if\n152-if-27-29", method="callme_re_ent14()", type_label=if];
1839 [label="26_ end_if", method="callme_re_ent14()", type_label=end_if];
167 [label="29_ counter_re_ent14 += 1;\n167-expression_statement-30-30", method="callme_re_ent14()", type_label=expression_statement];
183 [label="34_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n183-function_definition-35-39", method="add(uint256 a,uint256 b)", type_label=function_definition];
200 [label="35_ uint256 c = a + b;\n200-new_variable-36-36", method="add(uint256 a,uint256 b)", type_label=new_variable];
208 [label="36_ require(c >= a, \"SafeMath: addition overflow\");\n208-expression_statement-37-37", method="add(uint256 a,uint256 b)", type_label=expression_statement];
218 [label="37_ return c;\n218-return-38-38", method="add(uint256 a,uint256 b)", type_label=return];
220 [label="39_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n220-function_definition-40-44", method="sub(uint256 a,uint256 b)", type_label=function_definition];
237 [label="40_ require(b <= a, \"SafeMath: subtraction overflow\");\n237-expression_statement-41-41", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
247 [label="41_ uint256 c = a - b;\n247-new_variable-42-42", method="sub(uint256 a,uint256 b)", type_label=new_variable];
255 [label="42_ return c;\n255-return-43-43", method="sub(uint256 a,uint256 b)", type_label=return];
257 [label="44_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n257-function_definition-45-52", method="mul(uint256 a,uint256 b)", type_label=function_definition];
274 [label="45_ if_a == 0\n274-if-46-48", method="mul(uint256 a,uint256 b)", type_label=if];
1961 [label="45_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
279 [label="46_ return 0;\n279-return-47-47", method="mul(uint256 a,uint256 b)", type_label=return];
281 [label="48_ uint256 c = a * b;\n281-new_variable-49-49", method="mul(uint256 a,uint256 b)", type_label=new_variable];
289 [label="49_ require(c / a == b, \"SafeMath: multiplication overflow\");\n289-expression_statement-50-50", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
301 [label="50_ return c;\n301-return-51-51", method="mul(uint256 a,uint256 b)", type_label=return];
303 [label="52_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n303-function_definition-53-57", method="div(uint256 a,uint256 b)", type_label=function_definition];
320 [label="53_ require(b > 0, \"SafeMath: division by zero\");\n320-expression_statement-54-54", method="div(uint256 a,uint256 b)", type_label=expression_statement];
330 [label="54_ uint256 c = a / b;\n330-new_variable-55-55", method="div(uint256 a,uint256 b)", type_label=new_variable];
338 [label="55_ return c;\n338-return-56-56", method="div(uint256 a,uint256 b)", type_label=return];
340 [label="57_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n340-function_definition-58-61", method="mod(uint256 a,uint256 b)", type_label=function_definition];
357 [label="58_ require(b != 0, \"SafeMath: modulo by zero\");\n357-expression_statement-59-59", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
367 [label="59_ return a % b;\n367-return-60-60", method="mod(uint256 a,uint256 b)", type_label=return];
379 [label="64_ RaffleToken constant public raffleContract = RaffleToken(0x0C8cDC16973E88FAb31DD0FCB844DdF0e1056dE2);\n379-new_variable-65-65", method="", type_label=new_variable];
389 [label="65_ mapping(address => uint) userBalance_re_ent19;\n389-new_variable-66-66", method="", type_label=new_variable];
395 [label="66_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n395-function_definition-67-72", method="withdrawBalance_re_ent19()", type_label=function_definition];
399 [label="67_ if\n399-if-68-70", method="withdrawBalance_re_ent19()", type_label=if];
2086 [label="67_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
417 [label="70_ userBalance_re_ent19[msg.sender] = 0;\n417-expression_statement-71-71", method="withdrawBalance_re_ent19()", type_label=expression_statement];
425 [label="72_ bool public paused;\n425-new_variable-73-73", method="", type_label=new_variable];
430 [label="73_ mapping(address => uint) userBalance_re_ent26;\n430-new_variable-74-74", method="", type_label=new_variable];
436 [label="74_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n436-function_definition-75-81", method="withdrawBalance_re_ent26()", type_label=function_definition];
440 [label="75_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n440-new_variable-76-76", method="withdrawBalance_re_ent26()", type_label=new_variable];
464 [label="76_ if\n464-if-77-79", method="withdrawBalance_re_ent26()", type_label=if];
2151 [label="76_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
470 [label="79_ userBalance_re_ent26[msg.sender] = 0;\n470-expression_statement-80-80", method="withdrawBalance_re_ent26()", type_label=expression_statement];
478 [label="81_ address payable public owner;\n478-new_variable-82-82", method="", type_label=new_variable];
483 [label="82_ bool not_called_re_ent20 = true;\n483-new_variable-83-83", method="", type_label=new_variable];
489 [label="83_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n489-function_definition-84-90", method="bug_re_ent20()", type_label=function_definition];
493 [label="84_ require(not_called_re_ent20);\n493-expression_statement-85-85", method="bug_re_ent20()", type_label=expression_statement];
498 [label="85_ if\n498-if-86-88", method="bug_re_ent20()", type_label=if];
2185 [label="85_ end_if", method="bug_re_ent20()", type_label=end_if];
513 [label="88_ not_called_re_ent20 = false;\n513-expression_statement-89-89", method="bug_re_ent20()", type_label=expression_statement];
518 [label="90_ uint256 public nextListingId;\n518-new_variable-91-91", method="", type_label=new_variable];
523 [label="91_ mapping(address => uint) redeemableEther_re_ent32;\n523-new_variable-92-92", method="", type_label=new_variable];
529 [label="92_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n529-function_definition-93-98", method="claimReward_re_ent32()", type_label=function_definition];
533 [label="93_ require(redeemableEther_re_ent32[msg.sender] > 0);\n533-expression_statement-94-94", method="claimReward_re_ent32()", type_label=expression_statement];
544 [label="94_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n544-new_variable-95-95", method="claimReward_re_ent32()", type_label=new_variable];
554 [label="95_ msg.sender.transfer(transferValue_re_ent32);\n554-expression_statement-96-96", method="claimReward_re_ent32()", type_label=expression_statement];
563 [label="96_ redeemableEther_re_ent32[msg.sender] = 0;\n563-expression_statement-97-97", method="claimReward_re_ent32()", type_label=expression_statement];
571 [label="98_ mapping (uint256 => Listing) public listingsById;\n571-new_variable-99-99", method="", type_label=new_variable];
579 [label="99_ mapping(address => uint) balances_re_ent38;\n579-new_variable-100-100", method="", type_label=new_variable];
585 [label="100_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n585-function_definition-101-105", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
593 [label="101_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n593-expression_statement-102-102", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
604 [label="102_ require(msg.sender.send(_weiToWithdraw));\n604-expression_statement-103-103", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
616 [label="103_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n616-expression_statement-104-104", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
624 [label="105_ mapping (uint256 => Purchase) public purchasesById;\n624-new_variable-106-106", method="", type_label=new_variable];
632 [label="106_ mapping(address => uint) redeemableEther_re_ent4;\n632-new_variable-107-107", method="", type_label=new_variable];
638 [label="107_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n638-function_definition-108-113", method="claimReward_re_ent4()", type_label=function_definition];
642 [label="108_ require(redeemableEther_re_ent4[msg.sender] > 0);\n642-expression_statement-109-109", method="claimReward_re_ent4()", type_label=expression_statement];
653 [label="109_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n653-new_variable-110-110", method="claimReward_re_ent4()", type_label=new_variable];
663 [label="110_ msg.sender.transfer(transferValue_re_ent4);\n663-expression_statement-111-111", method="claimReward_re_ent4()", type_label=expression_statement];
672 [label="111_ redeemableEther_re_ent4[msg.sender] = 0;\n672-expression_statement-112-112", method="claimReward_re_ent4()", type_label=expression_statement];
680 [label="113_ uint256 public nextPurchaseId;\n680-new_variable-114-114", method="", type_label=new_variable];
685 [label="114_ struct Listing {\n        uint256 pricePerToken;\n        uint256 initialAmount;\n        uint256 amountLeft;\n        address payable seller;\n        bool active;\n    }\n685-expression_statement-115-121", method="Listing()", type_label=expression_statement];
707 [label="121_ struct Purchase {\n        uint256 totalAmount;\n        uint256 totalAmountPayed;\n        uint256 timestamp;\n    }\n707-expression_statement-122-126", method="Purchase()", type_label=expression_statement];
721 [label="126_ bool not_called_re_ent27 = true;\n721-new_variable-127-127", method="", type_label=new_variable];
727 [label="127_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n727-function_definition-128-134", method="bug_re_ent27()", type_label=function_definition];
731 [label="128_ require(not_called_re_ent27);\n731-expression_statement-129-129", method="bug_re_ent27()", type_label=expression_statement];
736 [label="129_ if\n736-if-130-132", method="bug_re_ent27()", type_label=if];
2423 [label="129_ end_if", method="bug_re_ent27()", type_label=end_if];
751 [label="132_ not_called_re_ent27 = false;\n751-expression_statement-133-133", method="bug_re_ent27()", type_label=expression_statement];
774 [label="135_ mapping(address => uint) balances_re_ent31;\n774-new_variable-136-136", method="", type_label=new_variable];
780 [label="136_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n780-function_definition-137-141", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
788 [label="137_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n788-expression_statement-138-138", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
799 [label="138_ require(msg.sender.send(_weiToWithdraw));\n799-expression_statement-139-139", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
811 [label="139_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n811-expression_statement-140-140", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
825 [label="142_ bool not_called_re_ent13 = true;\n825-new_variable-143-143", method="", type_label=new_variable];
831 [label="143_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n831-function_definition-144-151", method="bug_re_ent13()", type_label=function_definition];
835 [label="144_ require(not_called_re_ent13);\n835-expression_statement-145-145", method="bug_re_ent13()", type_label=expression_statement];
840 [label="145_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n840-new_variable-146-146", method="bug_re_ent13()", type_label=new_variable];
861 [label="146_ if\n861-if-147-149", method="bug_re_ent13()", type_label=if];
2548 [label="146_ end_if", method="bug_re_ent13()", type_label=end_if];
867 [label="149_ not_called_re_ent13 = false;\n867-expression_statement-150-150", method="bug_re_ent13()", type_label=expression_statement];
890 [label="152_ modifier onlyContractOwner {\n        require(msg.sender == owner, \"Function called by non-owner.\");\n        _;\n    }\n890-expression_statement-153-156", method="", type_label=expression_statement];
893 [label="153_ require(msg.sender == owner, \"Function called by non-owner.\");\n893-expression_statement-154-154", method="", type_label=expression_statement];
905 [label="154_ _;\n905-expression_statement-155-155", method="", type_label=expression_statement];
907 [label="156_ modifier onlyUnpaused {\n        require(paused == false, \"Exchange is paused.\");\n        _;\n    }\n907-expression_statement-157-160", method="", type_label=expression_statement];
910 [label="157_ require(paused == false, \"Exchange is paused.\");\n910-expression_statement-158-158", method="", type_label=expression_statement];
921 [label="158_ _;\n921-expression_statement-159-159", method="", type_label=expression_statement];
925 [label="161_ owner = msg.sender;\n925-expression_statement-162-162", method="", type_label=expression_statement];
931 [label="162_ nextListingId = 916;\n931-expression_statement-163-163", method="", type_label=expression_statement];
935 [label="163_ nextPurchaseId = 344;\n935-expression_statement-164-164", method="", type_label=expression_statement];
939 [label="165_ address payable lastPlayer_re_ent30;\n939-new_variable-166-166", method="", type_label=new_variable];
943 [label="166_ uint jackpot_re_ent30;\n943-new_variable-167-167", method="", type_label=new_variable];
947 [label="167_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n947-function_definition-168-173", method="buyTicket_re_ent30()", type_label=function_definition];
951 [label="168_ if\n951-if-169-170", method="buyTicket_re_ent30()", type_label=if];
2638 [label="168_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
962 [label="170_ lastPlayer_re_ent30 = msg.sender;\n962-expression_statement-171-171", method="buyTicket_re_ent30()", type_label=expression_statement];
968 [label="171_ jackpot_re_ent30    = address(this).balance;\n968-expression_statement-172-172", method="buyTicket_re_ent30()", type_label=expression_statement];
976 [label="173_ function buyRaffle(uint256[] calldata amounts, uint256[] calldata listingIds) payable external onlyUnpaused {\n        require(amounts.length == listingIds.length, \"You have to provide amounts for every single listing!\");\n        uint256 totalAmount;\n        uint256 totalAmountPayed;\n        for (uint256 i = 0; i < listingIds.length; i++) {\n            uint256 id = listingIds[i];\n            uint256 amount = amounts[i];\n            Listing storage listing = listingsById[id];\n            require(listing.active, \"Listing is not active anymore!\");\n            listing.amountLeft = listing.amountLeft.sub(amount);\n            require(listing.amountLeft >= 0, \"Amount left needs to be higher than 0.\");\n            if(listing.amountLeft == 0) { listing.active = false; }\n            uint256 amountToPay = listing.pricePerToken * amount;\n            listing.seller.transfer(amountToPay);\n            totalAmountPayed = totalAmountPayed.add(amountToPay);\n            totalAmount = totalAmount.add(amount);\n            require(raffleContract.transferFrom(listing.seller, msg.sender, amount), 'Token transfer failed!');\n        }\n        require(totalAmountPayed <= msg.value, 'Overpayed!');\n        uint256 id = nextPurchaseId++;\n        Purchase storage purchase = purchasesById[id];\n        purchase.totalAmount = totalAmount;\n        purchase.totalAmountPayed = totalAmountPayed;\n        purchase.timestamp = now;\n        emit Purchased(id, totalAmount, totalAmountPayed, now);\n    }\n976-function_definition-174-199", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=function_definition];
990 [label="173_ onlyUnpaused\n990-expression_statement-174-174", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
993 [label="174_ require(amounts.length == listingIds.length, \"You have to provide amounts for every single listing!\");\n993-expression_statement-175-175", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1007 [label="175_ uint256 totalAmount;\n1007-new_variable-176-176", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1012 [label="176_ uint256 totalAmountPayed;\n1012-new_variable-177-177", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1017 [label="177_ for(i < listingIds.length;;i++)\n1017-for-178-191", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=for];
2704 [label="177_ end_loop", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=end_loop];
1030 [label="177_ i++\n1030-expression_statement-178-178", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1033 [label="178_ uint256 id = listingIds[i];\n1033-new_variable-179-179", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1041 [label="179_ uint256 amount = amounts[i];\n1041-new_variable-180-180", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1049 [label="180_ Listing storage listing = listingsById[id];\n1049-new_variable-181-181", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1058 [label="181_ require(listing.active, \"Listing is not active anymore!\");\n1058-expression_statement-182-182", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1068 [label="182_ listing.amountLeft = listing.amountLeft.sub(amount);\n1068-expression_statement-183-183", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1081 [label="183_ require(listing.amountLeft >= 0, \"Amount left needs to be higher than 0.\");\n1081-expression_statement-184-184", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1093 [label="184_ if_listing.amountLeft == 0\n1093-if-185-185", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=if];
2780 [label="184_ end_if", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=end_if];
1100 [label="184_ listing.active = false;\n1100-expression_statement-185-185", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1107 [label="185_ uint256 amountToPay = listing.pricePerToken * amount;\n1107-new_variable-186-186", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1117 [label="186_ listing.seller.transfer(amountToPay);\n1117-expression_statement-187-187", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1126 [label="187_ totalAmountPayed = totalAmountPayed.add(amountToPay);\n1126-expression_statement-188-188", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1135 [label="188_ totalAmount = totalAmount.add(amount);\n1135-expression_statement-189-189", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1144 [label="189_ require(raffleContract.transferFrom(listing.seller, msg.sender, amount), 'Token transfer failed!');\n1144-expression_statement-190-190", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1165 [label="191_ require(totalAmountPayed <= msg.value, 'Overpayed!');\n1165-expression_statement-192-192", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1177 [label="192_ uint256 id = nextPurchaseId++;\n1177-new_variable-193-193", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1182 [label="192_ nextPurchaseId++\n1182-expression_statement-193-193", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1184 [label="193_ Purchase storage purchase = purchasesById[id];\n1184-new_variable-194-194", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1193 [label="194_ purchase.totalAmount = totalAmount;\n1193-expression_statement-195-195", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1199 [label="195_ purchase.totalAmountPayed = totalAmountPayed;\n1199-expression_statement-196-196", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1205 [label="196_ purchase.timestamp = now;\n1205-expression_statement-197-197", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1221 [label="199_ mapping(address => uint) balances_re_ent8;\n1221-new_variable-200-200", method="", type_label=new_variable];
1227 [label="200_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n1227-function_definition-201-205", method="withdraw_balances_re_ent8()", type_label=function_definition];
1231 [label="201_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n1231-new_variable-202-202", method="withdraw_balances_re_ent8()", type_label=new_variable];
1255 [label="202_ if\n1255-if-203-204", method="withdraw_balances_re_ent8()", type_label=if];
2942 [label="202_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
1257 [label="203_ balances_re_ent8[msg.sender] = 0;\n1257-expression_statement-204-204", method="withdraw_balances_re_ent8()", type_label=expression_statement];
1265 [label="205_ function addListing(uint256 initialAmount, uint256 pricePerToken) external onlyUnpaused {\n        require(raffleContract.balanceOf(msg.sender) >= initialAmount, \"Amount to sell is higher than balance!\");\n        require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, \"Allowance is to small (increase allowance)!\");\n        uint256 id = nextListingId++;\n        Listing storage listing = listingsById[id];\n        listing.initialAmount = initialAmount;\n        listing.amountLeft = initialAmount;\n        listing.pricePerToken = pricePerToken;\n        listing.seller = msg.sender;\n        listing.active = true;\n        emit Listed(id, listing.pricePerToken, listing.initialAmount, listing.seller);\n    }\n1265-function_definition-206-217", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=function_definition];
1276 [label="205_ onlyUnpaused\n1276-expression_statement-206-206", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1279 [label="206_ require(raffleContract.balanceOf(msg.sender) >= initialAmount, \"Amount to sell is higher than balance!\");\n1279-expression_statement-207-207", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1296 [label="207_ require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, \"Allowance is to small (increase allowance)!\");\n1296-expression_statement-208-208", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1317 [label="208_ uint256 id = nextListingId++;\n1317-new_variable-209-209", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=new_variable];
1322 [label="208_ nextListingId++\n1322-expression_statement-209-209", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1324 [label="209_ Listing storage listing = listingsById[id];\n1324-new_variable-210-210", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=new_variable];
1333 [label="210_ listing.initialAmount = initialAmount;\n1333-expression_statement-211-211", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1339 [label="211_ listing.amountLeft = initialAmount;\n1339-expression_statement-212-212", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1345 [label="212_ listing.pricePerToken = pricePerToken;\n1345-expression_statement-213-213", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1351 [label="213_ listing.seller = msg.sender;\n1351-expression_statement-214-214", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1359 [label="214_ listing.active = true;\n1359-expression_statement-215-215", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1382 [label="217_ mapping(address => uint) redeemableEther_re_ent39;\n1382-new_variable-218-218", method="", type_label=new_variable];
1388 [label="218_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n1388-function_definition-219-224", method="claimReward_re_ent39()", type_label=function_definition];
1392 [label="219_ require(redeemableEther_re_ent39[msg.sender] > 0);\n1392-expression_statement-220-220", method="claimReward_re_ent39()", type_label=expression_statement];
1403 [label="220_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n1403-new_variable-221-221", method="claimReward_re_ent39()", type_label=new_variable];
1413 [label="221_ msg.sender.transfer(transferValue_re_ent39);\n1413-expression_statement-222-222", method="claimReward_re_ent39()", type_label=expression_statement];
1422 [label="222_ redeemableEther_re_ent39[msg.sender] = 0;\n1422-expression_statement-223-223", method="claimReward_re_ent39()", type_label=expression_statement];
1430 [label="224_ function cancelListing(uint256 id) external {\n        Listing storage listing = listingsById[id];\n        require(listing.active, \"This listing was turned inactive already!\");\n        require(listing.seller == msg.sender || owner == msg.sender, \"Only the listing owner or the contract owner can cancel the listing!\");\n        listing.active = false;\n        emit Canceled(id);\n    }\n1430-function_definition-225-231", method="cancelListing(uint256 id)", type_label=function_definition];
1438 [label="225_ Listing storage listing = listingsById[id];\n1438-new_variable-226-226", method="cancelListing(uint256 id)", type_label=new_variable];
1447 [label="226_ require(listing.active, \"This listing was turned inactive already!\");\n1447-expression_statement-227-227", method="cancelListing(uint256 id)", type_label=expression_statement];
1457 [label="227_ require(listing.seller == msg.sender || owner == msg.sender, \"Only the listing owner or the contract owner can cancel the listing!\");\n1457-expression_statement-228-228", method="cancelListing(uint256 id)", type_label=expression_statement];
1477 [label="228_ listing.active = false;\n1477-expression_statement-229-229", method="cancelListing(uint256 id)", type_label=expression_statement];
1488 [label="231_ mapping(address => uint) balances_re_ent36;\n1488-new_variable-232-232", method="", type_label=new_variable];
1494 [label="232_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n1494-function_definition-233-236", method="withdraw_balances_re_ent36()", type_label=function_definition];
1498 [label="233_ if\n1498-if-234-235", method="withdraw_balances_re_ent36()", type_label=if];
3185 [label="233_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
1511 [label="234_ balances_re_ent36[msg.sender] = 0;\n1511-expression_statement-235-235", method="withdraw_balances_re_ent36()", type_label=expression_statement];
1519 [label="236_ function setPaused(bool value) external onlyContractOwner {\n        paused = value;\n    }\n1519-function_definition-237-239", method="setPaused(bool value)", type_label=function_definition];
1526 [label="236_ onlyContractOwner\n1526-expression_statement-237-237", method="setPaused(bool value)", type_label=expression_statement];
1529 [label="237_ paused = value;\n1529-expression_statement-238-238", method="setPaused(bool value)", type_label=expression_statement];
1533 [label="239_ uint256 counter_re_ent35 =0;\n1533-new_variable-240-240", method="", type_label=new_variable];
1538 [label="240_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n1538-function_definition-241-247", method="callme_re_ent35()", type_label=function_definition];
1542 [label="241_ require(counter_re_ent35<=5);\n1542-expression_statement-242-242", method="callme_re_ent35()", type_label=expression_statement];
1549 [label="242_ if\n1549-if-243-245", method="callme_re_ent35()", type_label=if];
3236 [label="242_ end_if", method="callme_re_ent35()", type_label=end_if];
1564 [label="245_ counter_re_ent35 += 1;\n1564-expression_statement-246-246", method="callme_re_ent35()", type_label=expression_statement];
1568 [label="247_ function withdrawFunds(uint256 withdrawAmount) external onlyContractOwner {\n        owner.transfer(withdrawAmount);\n    }\n1568-function_definition-248-250", method="withdrawFunds(uint256 withdrawAmount)", type_label=function_definition];
1575 [label="247_ onlyContractOwner\n1575-expression_statement-248-248", method="withdrawFunds(uint256 withdrawAmount)", type_label=expression_statement];
1578 [label="248_ owner.transfer(withdrawAmount);\n1578-expression_statement-249-249", method="withdrawFunds(uint256 withdrawAmount)", type_label=expression_statement];
1585 [label="250_ mapping(address => uint) userBalance_re_ent40;\n1585-new_variable-251-251", method="", type_label=new_variable];
1591 [label="251_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n1591-function_definition-252-258", method="withdrawBalance_re_ent40()", type_label=function_definition];
1595 [label="252_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n1595-new_variable-253-253", method="withdrawBalance_re_ent40()", type_label=new_variable];
1619 [label="253_ if\n1619-if-254-256", method="withdrawBalance_re_ent40()", type_label=if];
3306 [label="253_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
1625 [label="256_ userBalance_re_ent40[msg.sender] = 0;\n1625-expression_statement-257-257", method="withdrawBalance_re_ent40()", type_label=expression_statement];
1633 [label="258_ function kill() external onlyContractOwner {\n        selfdestruct(owner);\n    }\n1633-function_definition-259-261", method="kill()", type_label=function_definition];
1636 [label="258_ onlyContractOwner\n1636-expression_statement-259-259", method="kill()", type_label=expression_statement];
1639 [label="259_ selfdestruct(owner);\n1639-expression_statement-260-260", method="kill()", type_label=expression_statement];
1644 [label="261_ mapping(address => uint) userBalance_re_ent33;\n1644-new_variable-262-262", method="", type_label=new_variable];
1650 [label="262_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n1650-function_definition-263-269", method="withdrawBalance_re_ent33()", type_label=function_definition];
1654 [label="263_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n1654-new_variable-264-264", method="withdrawBalance_re_ent33()", type_label=new_variable];
1678 [label="264_ if\n1678-if-265-267", method="withdrawBalance_re_ent33()", type_label=if];
3365 [label="264_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
1684 [label="267_ userBalance_re_ent33[msg.sender] = 0;\n1684-expression_statement-268-268", method="withdrawBalance_re_ent33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
38 -> 42  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
42 -> 49  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
49 -> 1736  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
87 -> 91  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 1786  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
110 -> 116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
145 -> 152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
152 -> 1839  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
183 -> 200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
200 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
218 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
220 -> 237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
237 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
257 -> 274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
274 -> 279  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
274 -> 1961  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1961 -> 281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
279 -> 1961  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
279 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
281 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
301 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
303 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
338 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
340 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
367 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
379 -> 389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
399 -> 2086  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
425 -> 430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
440 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 2151  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
478 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 2185  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
518 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
533 -> 544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
554 -> 563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
571 -> 579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
624 -> 632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
642 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 2423  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
780 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
831 -> 835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
835 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 2548  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
890 -> 907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
893 -> 905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
925 -> 931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
931 -> 935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
939 -> 943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
947 -> 951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
951 -> 2638  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
962 -> 968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
976 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 1007  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1007 -> 1012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1012 -> 1017  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 1033  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1017 -> 2704  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2704 -> 1165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1030 -> 1017  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1033 -> 1041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1041 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 1058  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1058 -> 1068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1081 -> 1093  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1093 -> 1100  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1093 -> 2780  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2780 -> 1107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1100 -> 2780  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1107 -> 1117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1117 -> 1126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1126 -> 1135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1135 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 1030  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1165 -> 1177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1177 -> 1184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1184 -> 1193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1193 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1199 -> 1205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1227 -> 1231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1231 -> 1255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1255 -> 1257  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1255 -> 2942  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2942 -> 1265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1257 -> 2942  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1265 -> 1279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1279 -> 1296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1296 -> 1317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1317 -> 1324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1324 -> 1333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1333 -> 1339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1339 -> 1345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1345 -> 1351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1351 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1388 -> 1392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1392 -> 1403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1403 -> 1413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1413 -> 1422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1430 -> 1438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1438 -> 1447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1447 -> 1457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1457 -> 1477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1494 -> 1498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1498 -> 1511  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1498 -> 3185  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3185 -> 1519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1511 -> 3185  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1519 -> 1529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1538 -> 1542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1542 -> 1549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1549 -> 3236  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1568 -> 1578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1591 -> 1595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1595 -> 1619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1619 -> 3306  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1633 -> 1639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1650 -> 1654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1654 -> 1678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1678 -> 3365  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
