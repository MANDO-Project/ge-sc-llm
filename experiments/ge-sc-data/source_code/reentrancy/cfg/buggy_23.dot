digraph  {
13 [label="2_ function transfer(address to, uint256 value) external returns (bool);\n13-function_definition-3-3", method="transfer(address to,uint256 value)", type_label=function_definition];
28 [label="3_ function approve(address spender, uint256 value) external returns (bool);\n28-function_definition-4-4", method="approve(address spender,uint256 value)", type_label=function_definition];
43 [label="4_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n43-function_definition-5-5", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
62 [label="5_ function totalSupply() external view returns (uint256);\n62-function_definition-6-6", method="totalSupply()", type_label=function_definition];
70 [label="6_ function balanceOf(address who) external view returns (uint256);\n70-function_definition-7-7", method="balanceOf(address who)", type_label=function_definition];
82 [label="7_ function allowance(address owner, address spender) external view returns (uint256);\n82-function_definition-8-8", method="allowance(address owner,address spender)", type_label=function_definition];
133 [label="13_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n133-function_definition-14-21", method="mul(uint256 a,uint256 b)", type_label=function_definition];
150 [label="14_ if_a == 0\n150-if-15-17", method="mul(uint256 a,uint256 b)", type_label=if];
2266 [label="14_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
155 [label="15_ return 0;\n155-return-16-16", method="mul(uint256 a,uint256 b)", type_label=return];
157 [label="17_ uint256 c = a * b;\n157-new_variable-18-18", method="mul(uint256 a,uint256 b)", type_label=new_variable];
165 [label="18_ require(c / a == b);\n165-expression_statement-19-19", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
174 [label="19_ return c;\n174-return-20-20", method="mul(uint256 a,uint256 b)", type_label=return];
176 [label="21_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n176-function_definition-22-26", method="div(uint256 a,uint256 b)", type_label=function_definition];
193 [label="22_ require(b > 0);\n193-expression_statement-23-23", method="div(uint256 a,uint256 b)", type_label=expression_statement];
200 [label="23_ uint256 c = a / b;\n200-new_variable-24-24", method="div(uint256 a,uint256 b)", type_label=new_variable];
208 [label="24_ return c;\n208-return-25-25", method="div(uint256 a,uint256 b)", type_label=return];
210 [label="26_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n210-function_definition-27-31", method="sub(uint256 a,uint256 b)", type_label=function_definition];
227 [label="27_ require(b <= a);\n227-expression_statement-28-28", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
234 [label="28_ uint256 c = a - b;\n234-new_variable-29-29", method="sub(uint256 a,uint256 b)", type_label=new_variable];
242 [label="29_ return c;\n242-return-30-30", method="sub(uint256 a,uint256 b)", type_label=return];
244 [label="31_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n244-function_definition-32-36", method="add(uint256 a,uint256 b)", type_label=function_definition];
261 [label="32_ uint256 c = a + b;\n261-new_variable-33-33", method="add(uint256 a,uint256 b)", type_label=new_variable];
269 [label="33_ require(c >= a);\n269-expression_statement-34-34", method="add(uint256 a,uint256 b)", type_label=expression_statement];
276 [label="34_ return c;\n276-return-35-35", method="add(uint256 a,uint256 b)", type_label=return];
278 [label="36_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n278-function_definition-37-40", method="mod(uint256 a,uint256 b)", type_label=function_definition];
295 [label="37_ require(b != 0);\n295-expression_statement-38-38", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
302 [label="38_ return a % b;\n302-return-39-39", method="mod(uint256 a,uint256 b)", type_label=return];
321 [label="44_ uint256 counter_re_ent42 =0;\n321-new_variable-45-45", method="", type_label=new_variable];
326 [label="45_ function callme_re_ent42() public{\n        require(counter_re_ent42<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent42 += 1;\n    }\n326-function_definition-46-52", method="callme_re_ent42()", type_label=function_definition];
330 [label="46_ require(counter_re_ent42<=5);\n330-expression_statement-47-47", method="callme_re_ent42()", type_label=expression_statement];
337 [label="47_ if\n337-if-48-50", method="callme_re_ent42()", type_label=if];
2453 [label="47_ end_if", method="callme_re_ent42()", type_label=end_if];
352 [label="50_ counter_re_ent42 += 1;\n352-expression_statement-51-51", method="callme_re_ent42()", type_label=expression_statement];
356 [label="52_ mapping (address => uint256) private _balances;\n356-new_variable-53-53", method="", type_label=new_variable];
363 [label="53_ address payable lastPlayer_re_ent2;\n363-new_variable-54-54", method="", type_label=new_variable];
367 [label="54_ uint jackpot_re_ent2;\n367-new_variable-55-55", method="", type_label=new_variable];
371 [label="55_ function buyTicket_re_ent2() public{\n	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))\n        revert();\n      lastPlayer_re_ent2 = msg.sender;\n      jackpot_re_ent2    = address(this).balance;\n    }\n371-function_definition-56-61", method="buyTicket_re_ent2()", type_label=function_definition];
375 [label="56_ if\n375-if-57-58", method="buyTicket_re_ent2()", type_label=if];
2491 [label="56_ end_if", method="buyTicket_re_ent2()", type_label=end_if];
386 [label="58_ lastPlayer_re_ent2 = msg.sender;\n386-expression_statement-59-59", method="buyTicket_re_ent2()", type_label=expression_statement];
392 [label="59_ jackpot_re_ent2    = address(this).balance;\n392-expression_statement-60-60", method="buyTicket_re_ent2()", type_label=expression_statement];
400 [label="61_ mapping (address => mapping (address => uint256)) private _allowed;\n400-new_variable-62-62", method="", type_label=new_variable];
409 [label="62_ mapping(address => uint) balances_re_ent17;\n409-new_variable-63-63", method="", type_label=new_variable];
415 [label="63_ function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    }\n415-function_definition-64-69", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=function_definition];
423 [label="64_ require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n423-expression_statement-65-65", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
434 [label="65_ (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");\n434-new_variable-66-66", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=new_variable];
454 [label="66_ require(success);\n454-expression_statement-67-67", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
459 [label="67_ balances_re_ent17[msg.sender] -= _weiToWithdraw;\n459-expression_statement-68-68", method="withdrawFunds_re_ent17(uint256 _weiToWithdraw)", type_label=expression_statement];
467 [label="69_ uint256 private _totalSupply;\n467-new_variable-70-70", method="", type_label=new_variable];
472 [label="70_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n472-function_definition-71-73", method="totalSupply()", type_label=function_definition];
481 [label="71_ return _totalSupply;\n481-return-72-72", method="totalSupply()", type_label=return];
483 [label="73_ mapping(address => uint) redeemableEther_re_ent25;\n483-new_variable-74-74", method="", type_label=new_variable];
489 [label="74_ function claimReward_re_ent25() public {        \n        require(redeemableEther_re_ent25[msg.sender] > 0);\n        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n        msg.sender.transfer(transferValue_re_ent25);    \n        redeemableEther_re_ent25[msg.sender] = 0;\n    }\n489-function_definition-75-80", method="claimReward_re_ent25()", type_label=function_definition];
493 [label="75_ require(redeemableEther_re_ent25[msg.sender] > 0);\n493-expression_statement-76-76", method="claimReward_re_ent25()", type_label=expression_statement];
504 [label="76_ uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n504-new_variable-77-77", method="claimReward_re_ent25()", type_label=new_variable];
514 [label="77_ msg.sender.transfer(transferValue_re_ent25);\n514-expression_statement-78-78", method="claimReward_re_ent25()", type_label=expression_statement];
523 [label="78_ redeemableEther_re_ent25[msg.sender] = 0;\n523-expression_statement-79-79", method="claimReward_re_ent25()", type_label=expression_statement];
531 [label="80_ function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n531-function_definition-81-83", method="balanceOf(address owner)", type_label=function_definition];
544 [label="81_ return _balances[owner];\n544-return-82-82", method="balanceOf(address owner)", type_label=return];
548 [label="83_ mapping(address => uint) userBalance_re_ent19;\n548-new_variable-84-84", method="", type_label=new_variable];
554 [label="84_ function withdrawBalance_re_ent19() public{\n        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){\n            revert();\n        }\n        userBalance_re_ent19[msg.sender] = 0;\n    }\n554-function_definition-85-90", method="withdrawBalance_re_ent19()", type_label=function_definition];
558 [label="85_ if\n558-if-86-88", method="withdrawBalance_re_ent19()", type_label=if];
2674 [label="85_ end_if", method="withdrawBalance_re_ent19()", type_label=end_if];
576 [label="88_ userBalance_re_ent19[msg.sender] = 0;\n576-expression_statement-89-89", method="withdrawBalance_re_ent19()", type_label=expression_statement];
584 [label="90_ function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n584-function_definition-91-93", method="allowance(address owner,address spender)", type_label=function_definition];
601 [label="91_ return _allowed[owner][spender];\n601-return-92-92", method="allowance(address owner,address spender)", type_label=return];
607 [label="93_ mapping(address => uint) userBalance_re_ent26;\n607-new_variable-94-94", method="", type_label=new_variable];
613 [label="94_ function withdrawBalance_re_ent26() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent26[msg.sender] = 0;\n    }\n613-function_definition-95-101", method="withdrawBalance_re_ent26()", type_label=function_definition];
617 [label="95_ (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\");\n617-new_variable-96-96", method="withdrawBalance_re_ent26()", type_label=new_variable];
641 [label="96_ if\n641-if-97-99", method="withdrawBalance_re_ent26()", type_label=if];
2757 [label="96_ end_if", method="withdrawBalance_re_ent26()", type_label=end_if];
647 [label="99_ userBalance_re_ent26[msg.sender] = 0;\n647-expression_statement-100-100", method="withdrawBalance_re_ent26()", type_label=expression_statement];
655 [label="101_ function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n655-function_definition-102-105", method="transfer(address to,uint256 value)", type_label=function_definition];
671 [label="102_ _transfer(msg.sender, to, value);\n671-expression_statement-103-103", method="transfer(address to,uint256 value)", type_label=expression_statement];
682 [label="103_ return true;\n682-return-104-104", method="transfer(address to,uint256 value)", type_label=return];
685 [label="105_ bool not_called_re_ent20 = true;\n685-new_variable-106-106", method="", type_label=new_variable];
691 [label="106_ function bug_re_ent20() public{\n        require(not_called_re_ent20);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent20 = false;\n    }\n691-function_definition-107-113", method="bug_re_ent20()", type_label=function_definition];
695 [label="107_ require(not_called_re_ent20);\n695-expression_statement-108-108", method="bug_re_ent20()", type_label=expression_statement];
700 [label="108_ if\n700-if-109-111", method="bug_re_ent20()", type_label=if];
2816 [label="108_ end_if", method="bug_re_ent20()", type_label=end_if];
715 [label="111_ not_called_re_ent20 = false;\n715-expression_statement-112-112", method="bug_re_ent20()", type_label=expression_statement];
720 [label="113_ function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n720-function_definition-114-117", method="approve(address spender,uint256 value)", type_label=function_definition];
736 [label="114_ _approve(msg.sender, spender, value);\n736-expression_statement-115-115", method="approve(address spender,uint256 value)", type_label=expression_statement];
747 [label="115_ return true;\n747-return-116-116", method="approve(address spender,uint256 value)", type_label=return];
750 [label="117_ mapping(address => uint) redeemableEther_re_ent32;\n750-new_variable-118-118", method="", type_label=new_variable];
756 [label="118_ function claimReward_re_ent32() public {        \n        require(redeemableEther_re_ent32[msg.sender] > 0);\n        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n        msg.sender.transfer(transferValue_re_ent32);    \n        redeemableEther_re_ent32[msg.sender] = 0;\n    }\n756-function_definition-119-124", method="claimReward_re_ent32()", type_label=function_definition];
760 [label="119_ require(redeemableEther_re_ent32[msg.sender] > 0);\n760-expression_statement-120-120", method="claimReward_re_ent32()", type_label=expression_statement];
771 [label="120_ uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];\n771-new_variable-121-121", method="claimReward_re_ent32()", type_label=new_variable];
781 [label="121_ msg.sender.transfer(transferValue_re_ent32);\n781-expression_statement-122-122", method="claimReward_re_ent32()", type_label=expression_statement];
790 [label="122_ redeemableEther_re_ent32[msg.sender] = 0;\n790-expression_statement-123-123", method="claimReward_re_ent32()", type_label=expression_statement];
798 [label="124_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n798-function_definition-125-129", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
818 [label="125_ _transfer(from, to, value);\n818-expression_statement-126-126", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
827 [label="126_ _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n827-expression_statement-127-127", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
849 [label="127_ return true;\n849-return-128-128", method="transferFrom(address from,address to,uint256 value)", type_label=return];
852 [label="129_ mapping(address => uint) balances_re_ent38;\n852-new_variable-130-130", method="", type_label=new_variable];
858 [label="130_ function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent38[msg.sender] -= _weiToWithdraw;\n    }\n858-function_definition-131-135", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=function_definition];
866 [label="131_ require(balances_re_ent38[msg.sender] >= _weiToWithdraw);\n866-expression_statement-132-132", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
877 [label="132_ require(msg.sender.send(_weiToWithdraw));\n877-expression_statement-133-133", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
889 [label="133_ balances_re_ent38[msg.sender] -= _weiToWithdraw;\n889-expression_statement-134-134", method="withdrawFunds_re_ent38(uint256 _weiToWithdraw)", type_label=expression_statement];
897 [label="135_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n897-function_definition-136-139", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
913 [label="136_ _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n913-expression_statement-137-137", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
935 [label="137_ return true;\n935-return-138-138", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
938 [label="139_ mapping(address => uint) redeemableEther_re_ent4;\n938-new_variable-140-140", method="", type_label=new_variable];
944 [label="140_ function claimReward_re_ent4() public {        \n        require(redeemableEther_re_ent4[msg.sender] > 0);\n        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n        msg.sender.transfer(transferValue_re_ent4);    \n        redeemableEther_re_ent4[msg.sender] = 0;\n    }\n944-function_definition-141-146", method="claimReward_re_ent4()", type_label=function_definition];
948 [label="141_ require(redeemableEther_re_ent4[msg.sender] > 0);\n948-expression_statement-142-142", method="claimReward_re_ent4()", type_label=expression_statement];
959 [label="142_ uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];\n959-new_variable-143-143", method="claimReward_re_ent4()", type_label=new_variable];
969 [label="143_ msg.sender.transfer(transferValue_re_ent4);\n969-expression_statement-144-144", method="claimReward_re_ent4()", type_label=expression_statement];
978 [label="144_ redeemableEther_re_ent4[msg.sender] = 0;\n978-expression_statement-145-145", method="claimReward_re_ent4()", type_label=expression_statement];
986 [label="146_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n986-function_definition-147-150", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
1002 [label="147_ _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n1002-expression_statement-148-148", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
1024 [label="148_ return true;\n1024-return-149-149", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
1027 [label="150_ uint256 counter_re_ent7 =0;\n1027-new_variable-151-151", method="", type_label=new_variable];
1032 [label="151_ function callme_re_ent7() public{\n        require(counter_re_ent7<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent7 += 1;\n    }\n1032-function_definition-152-158", method="callme_re_ent7()", type_label=function_definition];
1036 [label="152_ require(counter_re_ent7<=5);\n1036-expression_statement-153-153", method="callme_re_ent7()", type_label=expression_statement];
1043 [label="153_ if\n1043-if-154-156", method="callme_re_ent7()", type_label=if];
3159 [label="153_ end_if", method="callme_re_ent7()", type_label=end_if];
1058 [label="156_ counter_re_ent7 += 1;\n1058-expression_statement-157-157", method="callme_re_ent7()", type_label=expression_statement];
1062 [label="158_ function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n1062-function_definition-159-164", method="_transfer(address from,address to,uint256 value)", type_label=function_definition];
1078 [label="159_ require(to != address(0));\n1078-expression_statement-160-160", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1087 [label="160_ _balances[from] = _balances[from].sub(value);\n1087-expression_statement-161-161", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1100 [label="161_ _balances[to] = _balances[to].add(value);\n1100-expression_statement-162-162", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1121 [label="164_ address payable lastPlayer_re_ent23;\n1121-new_variable-165-165", method="", type_label=new_variable];
1125 [label="165_ uint jackpot_re_ent23;\n1125-new_variable-166-166", method="", type_label=new_variable];
1129 [label="166_ function buyTicket_re_ent23() public{\n	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))\n        revert();\n      lastPlayer_re_ent23 = msg.sender;\n      jackpot_re_ent23    = address(this).balance;\n    }\n1129-function_definition-167-172", method="buyTicket_re_ent23()", type_label=function_definition];
1133 [label="167_ if\n1133-if-168-169", method="buyTicket_re_ent23()", type_label=if];
3249 [label="167_ end_if", method="buyTicket_re_ent23()", type_label=end_if];
1144 [label="169_ lastPlayer_re_ent23 = msg.sender;\n1144-expression_statement-170-170", method="buyTicket_re_ent23()", type_label=expression_statement];
1150 [label="170_ jackpot_re_ent23    = address(this).balance;\n1150-expression_statement-171-171", method="buyTicket_re_ent23()", type_label=expression_statement];
1158 [label="172_ function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n1158-function_definition-173-178", method="_mint(address account,uint256 value)", type_label=function_definition];
1170 [label="173_ require(account != address(0));\n1170-expression_statement-174-174", method="_mint(address account,uint256 value)", type_label=expression_statement];
1179 [label="174_ _totalSupply = _totalSupply.add(value);\n1179-expression_statement-175-175", method="_mint(address account,uint256 value)", type_label=expression_statement];
1188 [label="175_ _balances[account] = _balances[account].add(value);\n1188-expression_statement-176-176", method="_mint(address account,uint256 value)", type_label=expression_statement];
1211 [label="178_ uint256 counter_re_ent14 =0;\n1211-new_variable-179-179", method="", type_label=new_variable];
1216 [label="179_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n1216-function_definition-180-186", method="callme_re_ent14()", type_label=function_definition];
1220 [label="180_ require(counter_re_ent14<=5);\n1220-expression_statement-181-181", method="callme_re_ent14()", type_label=expression_statement];
1227 [label="181_ if\n1227-if-182-184", method="callme_re_ent14()", type_label=if];
3343 [label="181_ end_if", method="callme_re_ent14()", type_label=end_if];
1242 [label="184_ counter_re_ent14 += 1;\n1242-expression_statement-185-185", method="callme_re_ent14()", type_label=expression_statement];
1246 [label="186_ function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n1246-function_definition-187-192", method="_burn(address account,uint256 value)", type_label=function_definition];
1258 [label="187_ require(account != address(0));\n1258-expression_statement-188-188", method="_burn(address account,uint256 value)", type_label=expression_statement];
1267 [label="188_ _totalSupply = _totalSupply.sub(value);\n1267-expression_statement-189-189", method="_burn(address account,uint256 value)", type_label=expression_statement];
1276 [label="189_ _balances[account] = _balances[account].sub(value);\n1276-expression_statement-190-190", method="_burn(address account,uint256 value)", type_label=expression_statement];
1299 [label="192_ address payable lastPlayer_re_ent30;\n1299-new_variable-193-193", method="", type_label=new_variable];
1303 [label="193_ uint jackpot_re_ent30;\n1303-new_variable-194-194", method="", type_label=new_variable];
1307 [label="194_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n1307-function_definition-195-200", method="buyTicket_re_ent30()", type_label=function_definition];
1311 [label="195_ if\n1311-if-196-197", method="buyTicket_re_ent30()", type_label=if];
3427 [label="195_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
1322 [label="197_ lastPlayer_re_ent30 = msg.sender;\n1322-expression_statement-198-198", method="buyTicket_re_ent30()", type_label=expression_statement];
1328 [label="198_ jackpot_re_ent30    = address(this).balance;\n1328-expression_statement-199-199", method="buyTicket_re_ent30()", type_label=expression_statement];
1336 [label="200_ function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n1336-function_definition-201-206", method="_approve(address owner,address spender,uint256 value)", type_label=function_definition];
1352 [label="201_ require(spender != address(0));\n1352-expression_statement-202-202", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1361 [label="202_ require(owner != address(0));\n1361-expression_statement-203-203", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1370 [label="203_ _allowed[owner][spender] = value;\n1370-expression_statement-204-204", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1386 [label="206_ mapping(address => uint) balances_re_ent8;\n1386-new_variable-207-207", method="", type_label=new_variable];
1392 [label="207_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n1392-function_definition-208-212", method="withdraw_balances_re_ent8()", type_label=function_definition];
1396 [label="208_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n1396-new_variable-209-209", method="withdraw_balances_re_ent8()", type_label=new_variable];
1420 [label="209_ if\n1420-if-210-211", method="withdraw_balances_re_ent8()", type_label=if];
3536 [label="209_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
1422 [label="210_ balances_re_ent8[msg.sender] = 0;\n1422-expression_statement-211-211", method="withdraw_balances_re_ent8()", type_label=expression_statement];
1430 [label="212_ function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n1430-function_definition-213-216", method="_burnFrom(address account,uint256 value)", type_label=function_definition];
1442 [label="213_ _burn(account, value);\n1442-expression_statement-214-214", method="_burnFrom(address account,uint256 value)", type_label=expression_statement];
1449 [label="214_ _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n1449-expression_statement-215-215", method="_burnFrom(address account,uint256 value)", type_label=expression_statement];
1471 [label="216_ mapping(address => uint) redeemableEther_re_ent39;\n1471-new_variable-217-217", method="", type_label=new_variable];
1477 [label="217_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n1477-function_definition-218-223", method="claimReward_re_ent39()", type_label=function_definition];
1481 [label="218_ require(redeemableEther_re_ent39[msg.sender] > 0);\n1481-expression_statement-219-219", method="claimReward_re_ent39()", type_label=expression_statement];
1492 [label="219_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n1492-new_variable-220-220", method="claimReward_re_ent39()", type_label=new_variable];
1502 [label="220_ msg.sender.transfer(transferValue_re_ent39);\n1502-expression_statement-221-221", method="claimReward_re_ent39()", type_label=expression_statement];
1511 [label="221_ redeemableEther_re_ent39[msg.sender] = 0;\n1511-expression_statement-222-222", method="claimReward_re_ent39()", type_label=expression_statement];
1529 [label="226_ function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n1529-function_definition-227-229", method="burn(uint256 value)", type_label=function_definition];
1537 [label="227_ _burn(msg.sender, value);\n1537-expression_statement-228-228", method="burn(uint256 value)", type_label=expression_statement];
1546 [label="229_ mapping(address => uint) balances_re_ent36;\n1546-new_variable-230-230", method="", type_label=new_variable];
1552 [label="230_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n1552-function_definition-231-234", method="withdraw_balances_re_ent36()", type_label=function_definition];
1556 [label="231_ if\n1556-if-232-233", method="withdraw_balances_re_ent36()", type_label=if];
3672 [label="231_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
1569 [label="232_ balances_re_ent36[msg.sender] = 0;\n1569-expression_statement-233-233", method="withdraw_balances_re_ent36()", type_label=expression_statement];
1577 [label="234_ function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n1577-function_definition-235-237", method="burnFrom(address from,uint256 value)", type_label=function_definition];
1589 [label="235_ _burnFrom(from, value);\n1589-expression_statement-236-236", method="burnFrom(address from,uint256 value)", type_label=expression_statement];
1596 [label="237_ uint256 counter_re_ent35 =0;\n1596-new_variable-238-238", method="", type_label=new_variable];
1601 [label="238_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n1601-function_definition-239-245", method="callme_re_ent35()", type_label=function_definition];
1605 [label="239_ require(counter_re_ent35<=5);\n1605-expression_statement-240-240", method="callme_re_ent35()", type_label=expression_statement];
1612 [label="240_ if\n1612-if-241-243", method="callme_re_ent35()", type_label=if];
3728 [label="240_ end_if", method="callme_re_ent35()", type_label=end_if];
1627 [label="243_ counter_re_ent35 += 1;\n1627-expression_statement-244-244", method="callme_re_ent35()", type_label=expression_statement];
1641 [label="248_ address payable lastPlayer_re_ent37;\n1641-new_variable-249-249", method="", type_label=new_variable];
1645 [label="249_ uint jackpot_re_ent37;\n1645-new_variable-250-250", method="", type_label=new_variable];
1649 [label="250_ function buyTicket_re_ent37() public{\n	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))\n        revert();\n      lastPlayer_re_ent37 = msg.sender;\n      jackpot_re_ent37    = address(this).balance;\n    }\n1649-function_definition-251-256", method="buyTicket_re_ent37()", type_label=function_definition];
1653 [label="251_ if\n1653-if-252-253", method="buyTicket_re_ent37()", type_label=if];
3769 [label="251_ end_if", method="buyTicket_re_ent37()", type_label=end_if];
1664 [label="253_ lastPlayer_re_ent37 = msg.sender;\n1664-expression_statement-254-254", method="buyTicket_re_ent37()", type_label=expression_statement];
1670 [label="254_ jackpot_re_ent37    = address(this).balance;\n1670-expression_statement-255-255", method="buyTicket_re_ent37()", type_label=expression_statement];
1678 [label="256_ string private _name;\n1678-new_variable-257-257", method="", type_label=new_variable];
1683 [label="257_ mapping(address => uint) balances_re_ent3;\n1683-new_variable-258-258", method="", type_label=new_variable];
1689 [label="258_ function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n	(bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n        require(success);   \n        balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    }\n1689-function_definition-259-264", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=function_definition];
1697 [label="259_ require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n1697-expression_statement-260-260", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1708 [label="260_ (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");\n1708-new_variable-261-261", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=new_variable];
1728 [label="261_ require(success);\n1728-expression_statement-262-262", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1733 [label="262_ balances_re_ent3[msg.sender] -= _weiToWithdraw;\n1733-expression_statement-263-263", method="withdrawFunds_re_ent3(uint256 _weiToWithdraw)", type_label=expression_statement];
1741 [label="264_ string private _symbol;\n1741-new_variable-265-265", method="", type_label=new_variable];
1746 [label="265_ address payable lastPlayer_re_ent9;\n1746-new_variable-266-266", method="", type_label=new_variable];
1750 [label="266_ uint jackpot_re_ent9;\n1750-new_variable-267-267", method="", type_label=new_variable];
1754 [label="267_ function buyTicket_re_ent9() public{\n	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n	    if (!success)\n	        revert();\n      lastPlayer_re_ent9 = msg.sender;\n      jackpot_re_ent9    = address(this).balance;\n    }\n1754-function_definition-268-274", method="buyTicket_re_ent9()", type_label=function_definition];
1758 [label="268_ (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\");\n1758-new_variable-269-269", method="buyTicket_re_ent9()", type_label=new_variable];
1776 [label="269_ if\n1776-if-270-271", method="buyTicket_re_ent9()", type_label=if];
3892 [label="269_ end_if", method="buyTicket_re_ent9()", type_label=end_if];
1781 [label="271_ lastPlayer_re_ent9 = msg.sender;\n1781-expression_statement-272-272", method="buyTicket_re_ent9()", type_label=expression_statement];
1787 [label="272_ jackpot_re_ent9    = address(this).balance;\n1787-expression_statement-273-273", method="buyTicket_re_ent9()", type_label=expression_statement];
1795 [label="274_ uint8 private _decimals;\n1795-new_variable-275-275", method="", type_label=new_variable];
1814 [label="276_ _name = name;\n1814-expression_statement-277-277", method="", type_label=expression_statement];
1818 [label="277_ _symbol = symbol;\n1818-expression_statement-278-278", method="", type_label=expression_statement];
1822 [label="278_ _decimals = decimals;\n1822-expression_statement-279-279", method="", type_label=expression_statement];
1826 [label="280_ mapping(address => uint) userBalance_re_ent40;\n1826-new_variable-281-281", method="", type_label=new_variable];
1832 [label="281_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n1832-function_definition-282-288", method="withdrawBalance_re_ent40()", type_label=function_definition];
1836 [label="282_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n1836-new_variable-283-283", method="withdrawBalance_re_ent40()", type_label=new_variable];
1860 [label="283_ if\n1860-if-284-286", method="withdrawBalance_re_ent40()", type_label=if];
3976 [label="283_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
1866 [label="286_ userBalance_re_ent40[msg.sender] = 0;\n1866-expression_statement-287-287", method="withdrawBalance_re_ent40()", type_label=expression_statement];
1874 [label="288_ function name() public view returns (string memory) {\n        return _name;\n    }\n1874-function_definition-289-291", method="name()", type_label=function_definition];
1883 [label="289_ return _name;\n1883-return-290-290", method="name()", type_label=return];
1885 [label="291_ mapping(address => uint) userBalance_re_ent33;\n1885-new_variable-292-292", method="", type_label=new_variable];
1891 [label="292_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n1891-function_definition-293-299", method="withdrawBalance_re_ent33()", type_label=function_definition];
1895 [label="293_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n1895-new_variable-294-294", method="withdrawBalance_re_ent33()", type_label=new_variable];
1919 [label="294_ if\n1919-if-295-297", method="withdrawBalance_re_ent33()", type_label=if];
4035 [label="294_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
1925 [label="297_ userBalance_re_ent33[msg.sender] = 0;\n1925-expression_statement-298-298", method="withdrawBalance_re_ent33()", type_label=expression_statement];
1933 [label="299_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n1933-function_definition-300-302", method="symbol()", type_label=function_definition];
1942 [label="300_ return _symbol;\n1942-return-301-301", method="symbol()", type_label=return];
1944 [label="302_ bool not_called_re_ent27 = true;\n1944-new_variable-303-303", method="", type_label=new_variable];
1950 [label="303_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n1950-function_definition-304-310", method="bug_re_ent27()", type_label=function_definition];
1954 [label="304_ require(not_called_re_ent27);\n1954-expression_statement-305-305", method="bug_re_ent27()", type_label=expression_statement];
1959 [label="305_ if\n1959-if-306-308", method="bug_re_ent27()", type_label=if];
4075 [label="305_ end_if", method="bug_re_ent27()", type_label=end_if];
1974 [label="308_ not_called_re_ent27 = false;\n1974-expression_statement-309-309", method="bug_re_ent27()", type_label=expression_statement];
1979 [label="310_ function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n1979-function_definition-311-313", method="decimals()", type_label=function_definition];
1988 [label="311_ return _decimals;\n1988-return-312-312", method="decimals()", type_label=return];
1990 [label="313_ mapping(address => uint) balances_re_ent31;\n1990-new_variable-314-314", method="", type_label=new_variable];
1996 [label="314_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n1996-function_definition-315-319", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
2004 [label="315_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n2004-expression_statement-316-316", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
2015 [label="316_ require(msg.sender.send(_weiToWithdraw));\n2015-expression_statement-317-317", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
2027 [label="317_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n2027-expression_statement-318-318", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
2052 [label="322_ ERC20Detailed('Aggregion Token', 'AGR', 4)\n2052-expression_statement-323-323", method="", type_label=expression_statement];
2063 [label="323_ super._mint(msg.sender, 30000000000000);\n2063-expression_statement-324-324", method="", type_label=expression_statement];
2074 [label="325_ bool not_called_re_ent13 = true;\n2074-new_variable-326-326", method="", type_label=new_variable];
2080 [label="326_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n2080-function_definition-327-334", method="bug_re_ent13()", type_label=function_definition];
2084 [label="327_ require(not_called_re_ent13);\n2084-expression_statement-328-328", method="bug_re_ent13()", type_label=expression_statement];
2089 [label="328_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n2089-new_variable-329-329", method="bug_re_ent13()", type_label=new_variable];
2110 [label="329_ if\n2110-if-330-332", method="bug_re_ent13()", type_label=if];
4226 [label="329_ end_if", method="bug_re_ent13()", type_label=end_if];
2116 [label="332_ not_called_re_ent13 = false;\n2116-expression_statement-333-333", method="bug_re_ent13()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 155  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
150 -> 2266  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2266 -> 157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 2266  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
155 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
157 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
176 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
200 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
210 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
234 -> 242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
244 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
276 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
278 -> 295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
302 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
326 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
337 -> 2453  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
356 -> 363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
375 -> 2491  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
386 -> 392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
423 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
454 -> 459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
472 -> 481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
481 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
489 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
504 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
514 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
554 -> 558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
558 -> 2674  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
584 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
613 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
641 -> 2757  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
655 -> 671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
671 -> 682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
682 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
691 -> 695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
695 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
700 -> 2816  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
720 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
747 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
756 -> 760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
760 -> 771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
771 -> 781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
781 -> 790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
798 -> 818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
818 -> 827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
827 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
858 -> 866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
866 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
897 -> 913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
913 -> 935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
944 -> 948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
959 -> 969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
969 -> 978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
986 -> 1002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1002 -> 1024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1024 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1032 -> 1036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1036 -> 1043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1043 -> 3159  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1062 -> 1078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1078 -> 1087  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1087 -> 1100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1121 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 1133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1133 -> 3249  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1144 -> 1150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1158 -> 1170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1170 -> 1179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1179 -> 1188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1216 -> 1220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1220 -> 1227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1227 -> 3343  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1246 -> 1258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1258 -> 1267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1267 -> 1276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1299 -> 1303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1307 -> 1311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1311 -> 3427  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1322 -> 1328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1336 -> 1352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1352 -> 1361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1361 -> 1370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1392 -> 1396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1396 -> 1420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1420 -> 1422  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1420 -> 3536  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3536 -> 1430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1422 -> 3536  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1430 -> 1442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1442 -> 1449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1477 -> 1481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1481 -> 1492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1492 -> 1502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1502 -> 1511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1529 -> 1537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1552 -> 1556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1556 -> 1569  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1556 -> 3672  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3672 -> 1577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1569 -> 3672  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1577 -> 1589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1601 -> 1605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1605 -> 1612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1612 -> 3728  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1641 -> 1645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1649 -> 1653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1653 -> 3769  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1664 -> 1670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1678 -> 1683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1689 -> 1697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1697 -> 1708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1708 -> 1728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1728 -> 1733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1741 -> 1746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1746 -> 1750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1754 -> 1758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1758 -> 1776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1776 -> 3892  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1781 -> 1787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1814 -> 1818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1818 -> 1822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1832 -> 1836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1836 -> 1860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1860 -> 3976  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1874 -> 1883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1883 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1891 -> 1895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1895 -> 1919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1919 -> 4035  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1933 -> 1942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1942 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1950 -> 1954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1954 -> 1959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1959 -> 4075  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1979 -> 1988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1988 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1996 -> 2004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2004 -> 2015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2015 -> 2027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2080 -> 2084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2084 -> 2089  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2089 -> 2110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2110 -> 4226  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
