digraph  {
13 [label="2_ uint256 counter_re_ent14 =0;\n13-new_variable-3-3", method="", type_label=new_variable];
18 [label="3_ function callme_re_ent14() public{\n        require(counter_re_ent14<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent14 += 1;\n    }\n18-function_definition-4-10", method="callme_re_ent14()", type_label=function_definition];
22 [label="4_ require(counter_re_ent14<=5);\n22-expression_statement-5-5", method="callme_re_ent14()", type_label=expression_statement];
29 [label="5_ if\n29-if-6-8", method="callme_re_ent14()", type_label=if];
760 [label="5_ end_if", method="callme_re_ent14()", type_label=end_if];
44 [label="8_ counter_re_ent14 += 1;\n44-expression_statement-9-9", method="callme_re_ent14()", type_label=expression_statement];
48 [label="10_ mapping (address => uint256) public balanceOf;\n48-new_variable-11-11", method="", type_label=new_variable];
55 [label="11_ address payable lastPlayer_re_ent30;\n55-new_variable-12-12", method="", type_label=new_variable];
59 [label="12_ uint jackpot_re_ent30;\n59-new_variable-13-13", method="", type_label=new_variable];
63 [label="13_ function buyTicket_re_ent30() public{\n	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))\n        revert();\n      lastPlayer_re_ent30 = msg.sender;\n      jackpot_re_ent30    = address(this).balance;\n    }\n63-function_definition-14-19", method="buyTicket_re_ent30()", type_label=function_definition];
67 [label="14_ if\n67-if-15-16", method="buyTicket_re_ent30()", type_label=if];
798 [label="14_ end_if", method="buyTicket_re_ent30()", type_label=end_if];
78 [label="16_ lastPlayer_re_ent30 = msg.sender;\n78-expression_statement-17-17", method="buyTicket_re_ent30()", type_label=expression_statement];
84 [label="17_ jackpot_re_ent30    = address(this).balance;\n84-expression_statement-18-18", method="buyTicket_re_ent30()", type_label=expression_statement];
92 [label="19_ string public name = \"TAMC\";\n92-new_variable-20-20", method="", type_label=new_variable];
99 [label="20_ mapping(address => uint) balances_re_ent8;\n99-new_variable-21-21", method="", type_label=new_variable];
105 [label="21_ function withdraw_balances_re_ent8 () public {\n       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n       if (success)\n          balances_re_ent8[msg.sender] = 0;\n      }\n105-function_definition-22-26", method="withdraw_balances_re_ent8()", type_label=function_definition];
109 [label="22_ (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])(\"\");\n109-new_variable-23-23", method="withdraw_balances_re_ent8()", type_label=new_variable];
133 [label="23_ if\n133-if-24-25", method="withdraw_balances_re_ent8()", type_label=if];
864 [label="23_ end_if", method="withdraw_balances_re_ent8()", type_label=end_if];
135 [label="24_ balances_re_ent8[msg.sender] = 0;\n135-expression_statement-25-25", method="withdraw_balances_re_ent8()", type_label=expression_statement];
143 [label="26_ string public symbol = \"TAMC\";\n143-new_variable-27-27", method="", type_label=new_variable];
150 [label="27_ mapping(address => uint) redeemableEther_re_ent39;\n150-new_variable-28-28", method="", type_label=new_variable];
156 [label="28_ function claimReward_re_ent39() public {        \n        require(redeemableEther_re_ent39[msg.sender] > 0);\n        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n        msg.sender.transfer(transferValue_re_ent39);    \n        redeemableEther_re_ent39[msg.sender] = 0;\n    }\n156-function_definition-29-34", method="claimReward_re_ent39()", type_label=function_definition];
160 [label="29_ require(redeemableEther_re_ent39[msg.sender] > 0);\n160-expression_statement-30-30", method="claimReward_re_ent39()", type_label=expression_statement];
171 [label="30_ uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];\n171-new_variable-31-31", method="claimReward_re_ent39()", type_label=new_variable];
181 [label="31_ msg.sender.transfer(transferValue_re_ent39);\n181-expression_statement-32-32", method="claimReward_re_ent39()", type_label=expression_statement];
190 [label="32_ redeemableEther_re_ent39[msg.sender] = 0;\n190-expression_statement-33-33", method="claimReward_re_ent39()", type_label=expression_statement];
198 [label="34_ uint8 public decimals = 18;\n198-new_variable-35-35", method="", type_label=new_variable];
204 [label="35_ uint256 public totalSupply = 1000000000 * (uint256(10) ** decimals);\n204-new_variable-36-36", method="", type_label=new_variable];
217 [label="36_ mapping(address => uint) balances_re_ent31;\n217-new_variable-37-37", method="", type_label=new_variable];
223 [label="37_ function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public {\n        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n        require(msg.sender.send(_weiToWithdraw));   \n        balances_re_ent31[msg.sender] -= _weiToWithdraw;\n    }\n223-function_definition-38-42", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=function_definition];
231 [label="38_ require(balances_re_ent31[msg.sender] >= _weiToWithdraw);\n231-expression_statement-39-39", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
242 [label="39_ require(msg.sender.send(_weiToWithdraw));\n242-expression_statement-40-40", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
254 [label="40_ balances_re_ent31[msg.sender] -= _weiToWithdraw;\n254-expression_statement-41-41", method="withdrawFunds_re_ent31(uint256 _weiToWithdraw)", type_label=expression_statement];
278 [label="44_ balanceOf[msg.sender] = totalSupply;\n278-expression_statement-45-45", method="", type_label=expression_statement];
298 [label="47_ uint256 counter_re_ent35 =0;\n298-new_variable-48-48", method="", type_label=new_variable];
303 [label="48_ function callme_re_ent35() public{\n        require(counter_re_ent35<=5);\n	if( ! (msg.sender.send(10 ether) ) ){\n            revert();\n        }\n        counter_re_ent35 += 1;\n    }\n303-function_definition-49-55", method="callme_re_ent35()", type_label=function_definition];
307 [label="49_ require(counter_re_ent35<=5);\n307-expression_statement-50-50", method="callme_re_ent35()", type_label=expression_statement];
314 [label="50_ if\n314-if-51-53", method="callme_re_ent35()", type_label=if];
1045 [label="50_ end_if", method="callme_re_ent35()", type_label=end_if];
329 [label="53_ counter_re_ent35 += 1;\n329-expression_statement-54-54", method="callme_re_ent35()", type_label=expression_statement];
333 [label="55_ function transfer(address to, uint256 value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= value);\n        balanceOf[msg.sender] -= value;\n        balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n333-function_definition-56-62", method="transfer(address to,uint256 value)", type_label=function_definition];
350 [label="56_ require(balanceOf[msg.sender] >= value);\n350-expression_statement-57-57", method="transfer(address to,uint256 value)", type_label=expression_statement];
361 [label="57_ balanceOf[msg.sender] -= value;\n361-expression_statement-58-58", method="transfer(address to,uint256 value)", type_label=expression_statement];
369 [label="58_ balanceOf[to] += value;\n369-expression_statement-59-59", method="transfer(address to,uint256 value)", type_label=expression_statement];
385 [label="60_ return true;\n385-return-61-61", method="transfer(address to,uint256 value)", type_label=return];
388 [label="62_ mapping(address => uint) userBalance_re_ent40;\n388-new_variable-63-63", method="", type_label=new_variable];
394 [label="63_ function withdrawBalance_re_ent40() public{\n        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent40[msg.sender] = 0;\n    }\n394-function_definition-64-70", method="withdrawBalance_re_ent40()", type_label=function_definition];
398 [label="64_ (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])(\"\");\n398-new_variable-65-65", method="withdrawBalance_re_ent40()", type_label=new_variable];
422 [label="65_ if\n422-if-66-68", method="withdrawBalance_re_ent40()", type_label=if];
1153 [label="65_ end_if", method="withdrawBalance_re_ent40()", type_label=end_if];
428 [label="68_ userBalance_re_ent40[msg.sender] = 0;\n428-expression_statement-69-69", method="withdrawBalance_re_ent40()", type_label=expression_statement];
436 [label="70_ bool not_called_re_ent13 = true;\n436-new_variable-71-71", method="", type_label=new_variable];
442 [label="71_ function bug_re_ent13() public{\n        require(not_called_re_ent13);\n        (bool success,)=msg.sender.call.value(1 ether)(\"\");\n        if( ! success ){\n            revert();\n        }\n        not_called_re_ent13 = false;\n    }\n442-function_definition-72-79", method="bug_re_ent13()", type_label=function_definition];
446 [label="72_ require(not_called_re_ent13);\n446-expression_statement-73-73", method="bug_re_ent13()", type_label=expression_statement];
451 [label="73_ (bool success,)=msg.sender.call.value(1 ether)(\"\");\n451-new_variable-74-74", method="bug_re_ent13()", type_label=new_variable];
472 [label="74_ if\n472-if-75-77", method="bug_re_ent13()", type_label=if];
1203 [label="74_ end_if", method="bug_re_ent13()", type_label=end_if];
478 [label="77_ not_called_re_ent13 = false;\n478-expression_statement-78-78", method="bug_re_ent13()", type_label=expression_statement];
497 [label="80_ mapping(address => uint) balances_re_ent36;\n497-new_variable-81-81", method="", type_label=new_variable];
503 [label="81_ function withdraw_balances_re_ent36 () public {\n       if (msg.sender.send(balances_re_ent36[msg.sender ]))\n          balances_re_ent36[msg.sender] = 0;\n      }\n503-function_definition-82-85", method="withdraw_balances_re_ent36()", type_label=function_definition];
507 [label="82_ if\n507-if-83-84", method="withdraw_balances_re_ent36()", type_label=if];
1238 [label="82_ end_if", method="withdraw_balances_re_ent36()", type_label=end_if];
520 [label="83_ balances_re_ent36[msg.sender] = 0;\n520-expression_statement-84-84", method="withdraw_balances_re_ent36()", type_label=expression_statement];
528 [label="85_ mapping(address => mapping(address => uint256)) public allowance;\n528-new_variable-86-86", method="", type_label=new_variable];
537 [label="86_ function approve(address spender, uint256 value)\n        public\n        returns (bool success)\n    {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n537-function_definition-87-94", method="approve(address spender,uint256 value)", type_label=function_definition];
554 [label="90_ allowance[msg.sender][spender] = value;\n554-expression_statement-91-91", method="approve(address spender,uint256 value)", type_label=expression_statement];
574 [label="92_ return true;\n574-return-93-93", method="approve(address spender,uint256 value)", type_label=return];
577 [label="94_ mapping(address => uint) userBalance_re_ent33;\n577-new_variable-95-95", method="", type_label=new_variable];
583 [label="95_ function withdrawBalance_re_ent33() public{\n        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n        if( ! success ){\n            revert();\n        }\n        userBalance_re_ent33[msg.sender] = 0;\n    }\n583-function_definition-96-102", method="withdrawBalance_re_ent33()", type_label=function_definition];
587 [label="96_ (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])(\"\");\n587-new_variable-97-97", method="withdrawBalance_re_ent33()", type_label=new_variable];
611 [label="97_ if\n611-if-98-100", method="withdrawBalance_re_ent33()", type_label=if];
1342 [label="97_ end_if", method="withdrawBalance_re_ent33()", type_label=end_if];
617 [label="100_ userBalance_re_ent33[msg.sender] = 0;\n617-expression_statement-101-101", method="withdrawBalance_re_ent33()", type_label=expression_statement];
625 [label="102_ function transferFrom(address from, address to, uint256 value)\n        public\n        returns (bool success)\n    {\n        require(value <= balanceOf[from]);\n        require(value <= allowance[from][msg.sender]);\n        balanceOf[from] -= value;\n        balanceOf[to] += value;\n        allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n625-function_definition-103-114", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
646 [label="106_ require(value <= balanceOf[from]);\n646-expression_statement-107-107", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
655 [label="107_ require(value <= allowance[from][msg.sender]);\n655-expression_statement-108-108", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
668 [label="108_ balanceOf[from] -= value;\n668-expression_statement-109-109", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
674 [label="109_ balanceOf[to] += value;\n674-expression_statement-110-110", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
680 [label="110_ allowance[from][msg.sender] -= value;\n680-expression_statement-111-111", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
698 [label="112_ return true;\n698-return-113-113", method="transferFrom(address from,address to,uint256 value)", type_label=return];
701 [label="114_ bool not_called_re_ent27 = true;\n701-new_variable-115-115", method="", type_label=new_variable];
707 [label="115_ function bug_re_ent27() public{\n        require(not_called_re_ent27);\n        if( ! (msg.sender.send(1 ether) ) ){\n            revert();\n        }\n        not_called_re_ent27 = false;\n    }\n707-function_definition-116-122", method="bug_re_ent27()", type_label=function_definition];
711 [label="116_ require(not_called_re_ent27);\n711-expression_statement-117-117", method="bug_re_ent27()", type_label=expression_statement];
716 [label="117_ if\n716-if-118-120", method="bug_re_ent27()", type_label=if];
1447 [label="117_ end_if", method="bug_re_ent27()", type_label=end_if];
731 [label="120_ not_called_re_ent27 = false;\n731-expression_statement-121-121", method="bug_re_ent27()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
18 -> 22  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
22 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 760  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
48 -> 55  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
55 -> 59  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
63 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 798  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
78 -> 84  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
92 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
105 -> 109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
133 -> 135  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
133 -> 864  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
864 -> 143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
135 -> 864  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
143 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
156 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
171 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
198 -> 204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
204 -> 217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
307 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 1045  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
333 -> 350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
394 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
422 -> 1153  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
442 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
472 -> 1203  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
503 -> 507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
507 -> 520  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
507 -> 1238  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1238 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
520 -> 1238  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
537 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
574 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
583 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
587 -> 611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 1342  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
625 -> 646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
646 -> 655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
655 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
668 -> 674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
674 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
698 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
707 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
711 -> 716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
716 -> 1447  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
