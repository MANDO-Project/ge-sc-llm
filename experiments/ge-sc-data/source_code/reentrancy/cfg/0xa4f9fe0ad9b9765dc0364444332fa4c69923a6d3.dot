digraph  {
12 [label="2_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n12-function_definition-3-6", method="sub(uint256 a,uint256 b)", type_label=function_definition];
29 [label="3_ assert(b <= a);\n29-expression_statement-4-4", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
36 [label="4_ return a - b;\n36-return-5-5", method="sub(uint256 a,uint256 b)", type_label=return];
40 [label="6_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n40-function_definition-7-11", method="add(uint256 a,uint256 b)", type_label=function_definition];
57 [label="7_ uint256 c = a + b;\n57-new_variable-8-8", method="add(uint256 a,uint256 b)", type_label=new_variable];
65 [label="8_ assert(c >= a);\n65-expression_statement-9-9", method="add(uint256 a,uint256 b)", type_label=expression_statement];
72 [label="9_ return c;\n72-return-10-10", method="add(uint256 a,uint256 b)", type_label=return];
77 [label="13_ function balanceOf(address _owner) public constant returns (uint256 value);\n77-function_definition-14-14", method="balanceOf(address _owner)", type_label=function_definition];
84 [label="13_ constant\n84-expression_statement-14-14", method="balanceOf(address _owner)", type_label=expression_statement];
91 [label="14_ function transfer(address _to, uint256 _value) public returns (bool success);\n91-function_definition-15-15", method="transfer(address _to,uint256 _value)", type_label=function_definition];
107 [label="15_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n107-function_definition-16-16", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
127 [label="16_ function approve(address _spender, uint256 _value) public returns (bool success);\n127-function_definition-17-17", method="approve(address _spender,uint256 _value)", type_label=function_definition];
143 [label="17_ function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n143-function_definition-18-18", method="allowance(address _owner,address _spender)", type_label=function_definition];
154 [label="17_ constant\n154-expression_statement-18-18", method="allowance(address _owner,address _spender)", type_label=expression_statement];
164 [label="20_ address public admin;\n164-new_variable-21-21", method="", type_label=new_variable];
169 [label="21_ mapping(address => uint256) public level;\n169-new_variable-22-22", method="", type_label=new_variable];
176 [label="22_ bool public lockSupply;\n176-new_variable-23-23", method="", type_label=new_variable];
183 [label="24_ admin = 0x6585b849371A40005F9dCda57668C832a5be1777;\n183-expression_statement-25-25", method="", type_label=expression_statement];
187 [label="25_ level[admin] = 2;\n187-expression_statement-26-26", method="", type_label=expression_statement];
197 [label="28_ modifier onlyAdmin(uint8 _level) {  \n        require(msg.sender == admin || level[msg.sender] >= _level);\n        _;\n    }\n197-expression_statement-29-32", method="", type_label=expression_statement];
204 [label="29_ require(msg.sender == admin || level[msg.sender] >= _level);\n204-expression_statement-30-30", method="", type_label=expression_statement];
221 [label="30_ _;\n221-expression_statement-31-31", method="", type_label=expression_statement];
223 [label="32_ modifier supplyLock() {  \n        require(lockSupply == false);\n        _;\n    }\n223-expression_statement-33-36", method="", type_label=expression_statement];
226 [label="33_ require(lockSupply == false);\n226-expression_statement-34-34", method="", type_label=expression_statement];
234 [label="34_ _;\n234-expression_statement-35-35", method="", type_label=expression_statement];
236 [label="36_ function transferAdminship(address _newAdmin) onlyAdmin(2) public {  \n        require(_newAdmin != address(0));\n        admin = _newAdmin;\n        level[_newAdmin] = 2;\n        emit TransferAdminship(admin);\n    }\n236-function_definition-37-42", method="transferAdminship(address _newAdmin)", type_label=function_definition];
242 [label="36_ onlyAdmin(2)\n242-expression_statement-37-37", method="transferAdminship(address _newAdmin)", type_label=expression_statement];
248 [label="37_ require(_newAdmin != address(0));\n248-expression_statement-38-38", method="transferAdminship(address _newAdmin)", type_label=expression_statement];
257 [label="38_ admin = _newAdmin;\n257-expression_statement-39-39", method="transferAdminship(address _newAdmin)", type_label=expression_statement];
261 [label="39_ level[_newAdmin] = 2;\n261-expression_statement-40-40", method="transferAdminship(address _newAdmin)", type_label=expression_statement];
271 [label="42_ function setAdminLevel(address _target, uint8 _level) onlyAdmin(2) public {\n        level[_target] = _level;\n        emit AdminLevelSet(_target,_level);\n    }\n271-function_definition-43-46", method="setAdminLevel(address _target,uint8 _level)", type_label=function_definition];
281 [label="42_ onlyAdmin(2)\n281-expression_statement-43-43", method="setAdminLevel(address _target,uint8 _level)", type_label=expression_statement];
287 [label="43_ level[_target] = _level;\n287-expression_statement-44-44", method="setAdminLevel(address _target,uint8 _level)", type_label=expression_statement];
299 [label="46_ function setSupplyLock(bool _set) onlyAdmin(2) public {  \n        lockSupply = _set;\n        emit SetSupplyLock(_set);\n    }\n299-function_definition-47-50", method="setSupplyLock(bool _set)", type_label=function_definition];
305 [label="46_ onlyAdmin(2)\n305-expression_statement-47-47", method="setSupplyLock(bool _set)", type_label=expression_statement];
311 [label="47_ lockSupply = _set;\n311-expression_statement-48-48", method="setSupplyLock(bool _set)", type_label=expression_statement];
361 [label="57_ uint256 public totalSupply;\n361-new_variable-58-58", method="", type_label=new_variable];
366 [label="58_ mapping (address => uint256) balances;\n366-new_variable-59-59", method="", type_label=new_variable];
372 [label="59_ mapping (address => mapping (address => uint256)) allowed;\n372-new_variable-60-60", method="", type_label=new_variable];
380 [label="60_ function balanceOf(address _owner) public constant returns (uint256 value) {\n        return balances[_owner];\n    }\n380-function_definition-61-63", method="balanceOf(address _owner)", type_label=function_definition];
387 [label="60_ constant\n387-expression_statement-61-61", method="balanceOf(address _owner)", type_label=expression_statement];
395 [label="61_ return balances[_owner];\n395-return-62-62", method="balanceOf(address _owner)", type_label=return];
399 [label="63_ function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0));  \n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n399-function_definition-64-70", method="transfer(address _to,uint256 _value)", type_label=function_definition];
416 [label="64_ require(_to != address(0));\n416-expression_statement-65-65", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
425 [label="65_ balances[msg.sender] = balances[msg.sender].sub(_value);\n425-expression_statement-66-66", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
442 [label="66_ balances[_to] = balances[_to].add(_value);\n442-expression_statement-67-67", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
465 [label="68_ return true;\n465-return-69-69", method="transfer(address _to,uint256 _value)", type_label=return];
468 [label="70_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0));  \n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n468-function_definition-71-78", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
489 [label="71_ require(_to != address(0));\n489-expression_statement-72-72", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
498 [label="72_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n498-expression_statement-73-73", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
519 [label="73_ balances[_from] = balances[_from].sub(_value);\n519-expression_statement-74-74", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
532 [label="74_ balances[_to] = balances[_to].add(_value);\n532-expression_statement-75-75", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
553 [label="76_ return true;\n553-return-77-77", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
556 [label="78_ function approve(address _spender, uint256 _value) public returns (bool success) {\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));  \n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n556-function_definition-79-84", method="approve(address _spender,uint256 _value)", type_label=function_definition];
573 [label="79_ require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n573-expression_statement-80-80", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
592 [label="80_ allowed[msg.sender][_spender] = _value;\n592-expression_statement-81-81", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
612 [label="82_ return true;\n612-return-83-83", method="approve(address _spender,uint256 _value)", type_label=return];
615 [label="84_ function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n615-function_definition-85-87", method="allowance(address _owner,address _spender)", type_label=function_definition];
626 [label="84_ constant\n626-expression_statement-85-85", method="allowance(address _owner,address _spender)", type_label=expression_statement];
634 [label="85_ return allowed[_owner][_spender];\n634-return-86-86", method="allowance(address _owner,address _spender)", type_label=return];
640 [label="87_ function burnToken(address _target, uint256 _burnedAmount) onlyAdmin(2) supplyLock public {\n        balances[_target] = SafeMath.sub(balances[_target], _burnedAmount);\n        totalSupply = SafeMath.sub(totalSupply, _burnedAmount);\n        emit Burned(_target, _burnedAmount);\n    }\n640-function_definition-88-92", method="burnToken(address _target,uint256 _burnedAmount)", type_label=function_definition];
650 [label="87_ onlyAdmin(2)\n650-expression_statement-88-88", method="burnToken(address _target,uint256 _burnedAmount)", type_label=expression_statement];
654 [label="87_ supplyLock\n654-expression_statement-88-88", method="burnToken(address _target,uint256 _burnedAmount)", type_label=expression_statement];
658 [label="88_ balances[_target] = SafeMath.sub(balances[_target], _burnedAmount);\n658-expression_statement-89-89", method="burnToken(address _target,uint256 _burnedAmount)", type_label=expression_statement];
673 [label="89_ totalSupply = SafeMath.sub(totalSupply, _burnedAmount);\n673-expression_statement-90-90", method="burnToken(address _target,uint256 _burnedAmount)", type_label=expression_statement];
744 [label="98_ string public name = 'Gripo';\n744-new_variable-99-99", method="", type_label=new_variable];
751 [label="99_ uint8 public decimals = 18;\n751-new_variable-100-100", method="", type_label=new_variable];
757 [label="100_ string public symbol = 'GRP';\n757-new_variable-101-101", method="", type_label=new_variable];
764 [label="101_ string public version = '1';\n764-new_variable-102-102", method="", type_label=new_variable];
771 [label="102_ address writer = 0xA6bc924715A0B63C6E0a7653d3262D26F254EcFd;\n771-new_variable-103-103", method="", type_label=new_variable];
778 [label="104_ totalSupply = 200000000 * (10**uint256(decimals));\n778-expression_statement-105-105", method="", type_label=expression_statement];
789 [label="105_ balances[writer] = totalSupply / 10000;\n789-expression_statement-106-106", method="", type_label=expression_statement];
797 [label="106_ balances[admin] = totalSupply.sub(balances[writer]);\n797-expression_statement-107-107", method="", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
36 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
40 -> 57  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
57 -> 65  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
65 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
164 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
169 -> 176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
183 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
204 -> 221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
226 -> 234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
248 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
257 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
271 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
299 -> 311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
380 -> 395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
399 -> 416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
416 -> 425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
425 -> 442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
465 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
468 -> 489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
553 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
556 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
573 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
612 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
615 -> 634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
634 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
640 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
650 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
744 -> 751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
751 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
764 -> 771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
778 -> 789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
789 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
