digraph  {
12 [label="2_ function totalSupply() public view returns (uint256);\n12-function_definition-3-3", method="totalSupply()", type_label=function_definition];
20 [label="3_ function balanceOf(address _who) public view returns (uint256);\n20-function_definition-4-4", method="balanceOf(address _who)", type_label=function_definition];
32 [label="4_ function transfer(address _to, uint256 _value) public returns (bool);\n32-function_definition-5-5", method="transfer(address _to,uint256 _value)", type_label=function_definition];
64 [label="8_ function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    if (_a == 0) {\n      return 0;\n    }\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n64-function_definition-9-16", method="mul(uint256 _a,uint256 _b)", type_label=function_definition];
82 [label="9_ if__a == 0\n82-if-10-12", method="mul(uint256 _a,uint256 _b)", type_label=if];
1228 [label="9_ end_if", method="mul(uint256 _a,uint256 _b)", type_label=end_if];
87 [label="10_ return 0;\n87-return-11-11", method="mul(uint256 _a,uint256 _b)", type_label=return];
89 [label="12_ c = _a * _b;\n89-expression_statement-13-13", method="mul(uint256 _a,uint256 _b)", type_label=expression_statement];
95 [label="13_ assert(c / _a == _b);\n95-expression_statement-14-14", method="mul(uint256 _a,uint256 _b)", type_label=expression_statement];
104 [label="14_ return c;\n104-return-15-15", method="mul(uint256 _a,uint256 _b)", type_label=return];
106 [label="16_ function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    return _a / _b;\n  }\n106-function_definition-17-19", method="div(uint256 _a,uint256 _b)", type_label=function_definition];
123 [label="17_ return _a / _b;\n123-return-18-18", method="div(uint256 _a,uint256 _b)", type_label=return];
127 [label="19_ function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n127-function_definition-20-23", method="sub(uint256 _a,uint256 _b)", type_label=function_definition];
144 [label="20_ assert(_b <= _a);\n144-expression_statement-21-21", method="sub(uint256 _a,uint256 _b)", type_label=expression_statement];
151 [label="21_ return _a - _b;\n151-return-22-22", method="sub(uint256 _a,uint256 _b)", type_label=return];
155 [label="23_ function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n155-function_definition-24-28", method="add(uint256 _a,uint256 _b)", type_label=function_definition];
173 [label="24_ c = _a + _b;\n173-expression_statement-25-25", method="add(uint256 _a,uint256 _b)", type_label=expression_statement];
179 [label="25_ assert(c >= _a);\n179-expression_statement-26-26", method="add(uint256 _a,uint256 _b)", type_label=expression_statement];
186 [label="26_ return c;\n186-return-27-27", method="add(uint256 _a,uint256 _b)", type_label=return];
199 [label="31_ mapping(address => uint256) internal balances;\n199-new_variable-32-32", method="", type_label=new_variable];
206 [label="32_ uint256 internal totalSupply_;\n206-new_variable-33-33", method="", type_label=new_variable];
211 [label="33_ function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n211-function_definition-34-36", method="totalSupply()", type_label=function_definition];
220 [label="34_ return totalSupply_;\n220-return-35-35", method="totalSupply()", type_label=return];
222 [label="36_ function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n222-function_definition-37-44", method="transfer(address _to,uint256 _value)", type_label=function_definition];
238 [label="37_ require(_value <= balances[msg.sender]);\n238-expression_statement-38-38", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
249 [label="38_ require(_to != address(0));\n249-expression_statement-39-39", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
258 [label="39_ balances[msg.sender] = balances[msg.sender].sub(_value);\n258-expression_statement-40-40", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
275 [label="40_ balances[_to] = balances[_to].add(_value);\n275-expression_statement-41-41", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
298 [label="42_ return true;\n298-return-43-43", method="transfer(address _to,uint256 _value)", type_label=return];
301 [label="44_ function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n301-function_definition-45-47", method="balanceOf(address _owner)", type_label=function_definition];
314 [label="45_ return balances[_owner];\n314-return-46-46", method="balanceOf(address _owner)", type_label=return];
324 [label="49_ function allowance(address _owner, address _spender)\n    public view returns (uint256);\n324-function_definition-50-51", method="allowance(address _owner,address _spender)", type_label=function_definition];
340 [label="51_ function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n340-function_definition-52-53", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
359 [label="53_ function approve(address _spender, uint256 _value) public returns (bool);\n359-function_definition-54-54", method="approve(address _spender,uint256 _value)", type_label=function_definition];
397 [label="61_ mapping (address => mapping (address => uint256)) internal allowed;\n397-new_variable-62-62", method="", type_label=new_variable];
406 [label="62_ function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n406-function_definition-63-79", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
426 [label="70_ require(_value <= balances[_from]);\n426-expression_statement-71-71", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
435 [label="71_ require(_value <= allowed[_from][msg.sender]);\n435-expression_statement-72-72", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
448 [label="72_ require(_to != address(0));\n448-expression_statement-73-73", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
457 [label="73_ balances[_from] = balances[_from].sub(_value);\n457-expression_statement-74-74", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
470 [label="74_ balances[_to] = balances[_to].add(_value);\n470-expression_statement-75-75", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
483 [label="75_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n483-expression_statement-76-76", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
512 [label="77_ return true;\n512-return-78-78", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
515 [label="79_ function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n515-function_definition-80-84", method="approve(address _spender,uint256 _value)", type_label=function_definition];
531 [label="80_ allowed[msg.sender][_spender] = _value;\n531-expression_statement-81-81", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
551 [label="82_ return true;\n551-return-83-83", method="approve(address _spender,uint256 _value)", type_label=return];
554 [label="84_ function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n554-function_definition-85-94", method="allowance(address _owner,address _spender)", type_label=function_definition];
571 [label="92_ return allowed[_owner][_spender];\n571-return-93-93", method="allowance(address _owner,address _spender)", type_label=return];
577 [label="94_ function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n577-function_definition-95-106", method="increaseApproval(address _spender,uint256 _addedValue)", type_label=function_definition];
593 [label="101_ allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n593-expression_statement-102-103", method="increaseApproval(address _spender,uint256 _addedValue)", type_label=expression_statement];
631 [label="104_ return true;\n631-return-105-105", method="increaseApproval(address _spender,uint256 _addedValue)", type_label=return];
634 [label="106_ function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n634-function_definition-107-122", method="decreaseApproval(address _spender,uint256 _subtractedValue)", type_label=function_definition];
650 [label="113_ uint256 oldValue = allowed[msg.sender][_spender];\n650-new_variable-114-114", method="decreaseApproval(address _spender,uint256 _subtractedValue)", type_label=new_variable];
662 [label="114_ if__subtractedValue >= oldValue\n662-if-115-119", method="decreaseApproval(address _spender,uint256 _subtractedValue)", type_label=if];
1808 [label="114_ end_if", method="decreaseApproval(address _spender,uint256 _subtractedValue)", type_label=end_if];
667 [label="115_ allowed[msg.sender][_spender] = 0;\n667-expression_statement-116-116", method="decreaseApproval(address _spender,uint256 _subtractedValue)", type_label=expression_statement];
678 [label="117_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n678-expression_statement-118-118", method="decreaseApproval(address _spender,uint256 _subtractedValue)", type_label=expression_statement];
709 [label="120_ return true;\n709-return-121-121", method="decreaseApproval(address _spender,uint256 _subtractedValue)", type_label=return];
715 [label="124_ address public owner;\n715-new_variable-125-125", method="", type_label=new_variable];
738 [label="131_ owner = msg.sender;\n738-expression_statement-132-132", method="", type_label=expression_statement];
744 [label="133_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n744-expression_statement-134-137", method="", type_label=expression_statement];
747 [label="134_ require(msg.sender == owner);\n747-expression_statement-135-135", method="", type_label=expression_statement];
756 [label="135_ _;\n756-expression_statement-136-136", method="", type_label=expression_statement];
758 [label="137_ function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n758-function_definition-138-141", method="renounceOwnership()", type_label=function_definition];
761 [label="137_ onlyOwner\n761-expression_statement-138-138", method="renounceOwnership()", type_label=expression_statement];
768 [label="139_ owner = address(0);\n768-expression_statement-140-140", method="renounceOwnership()", type_label=expression_statement];
774 [label="141_ function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n774-function_definition-142-144", method="transferOwnership(address _newOwner)", type_label=function_definition];
781 [label="141_ onlyOwner\n781-expression_statement-142-142", method="transferOwnership(address _newOwner)", type_label=expression_statement];
784 [label="142_ _transferOwnership(_newOwner);\n784-expression_statement-143-143", method="transferOwnership(address _newOwner)", type_label=expression_statement];
789 [label="144_ function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n789-function_definition-145-149", method="_transferOwnership(address _newOwner)", type_label=function_definition];
797 [label="145_ require(_newOwner != address(0));\n797-expression_statement-146-146", method="_transferOwnership(address _newOwner)", type_label=expression_statement];
812 [label="147_ owner = _newOwner;\n812-expression_statement-148-148", method="_transferOwnership(address _newOwner)", type_label=expression_statement];
826 [label="153_ bool public paused = false;\n826-new_variable-154-154", method="", type_label=new_variable];
833 [label="154_ modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n833-expression_statement-155-158", method="", type_label=expression_statement];
836 [label="155_ require(!paused);\n836-expression_statement-156-156", method="", type_label=expression_statement];
842 [label="156_ _;\n842-expression_statement-157-157", method="", type_label=expression_statement];
844 [label="158_ modifier whenPaused() {\n    require(paused);\n    _;\n  }\n844-expression_statement-159-162", method="", type_label=expression_statement];
847 [label="159_ require(paused);\n847-expression_statement-160-160", method="", type_label=expression_statement];
852 [label="160_ _;\n852-expression_statement-161-161", method="", type_label=expression_statement];
854 [label="162_ function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n854-function_definition-163-166", method="pause()", type_label=function_definition];
857 [label="162_ onlyOwner\n857-expression_statement-163-163", method="pause()", type_label=expression_statement];
859 [label="162_ whenNotPaused\n859-expression_statement-163-163", method="pause()", type_label=expression_statement];
862 [label="163_ paused = true;\n862-expression_statement-164-164", method="pause()", type_label=expression_statement];
869 [label="166_ function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n869-function_definition-167-170", method="unpause()", type_label=function_definition];
872 [label="166_ onlyOwner\n872-expression_statement-167-167", method="unpause()", type_label=expression_statement];
874 [label="166_ whenPaused\n874-expression_statement-167-167", method="unpause()", type_label=expression_statement];
877 [label="167_ paused = false;\n877-expression_statement-168-168", method="unpause()", type_label=expression_statement];
893 [label="172_ function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n893-function_definition-173-182", method="transfer(address _to,uint256 _value)", type_label=function_definition];
904 [label="177_ whenNotPaused\n904-expression_statement-178-178", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
911 [label="180_ return super.transfer(_to, _value);\n911-return-181-181", method="transfer(address _to,uint256 _value)", type_label=return];
920 [label="182_ function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n920-function_definition-183-193", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
935 [label="188_ whenNotPaused\n935-expression_statement-189-189", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
942 [label="191_ return super.transferFrom(_from, _to, _value);\n942-return-192-192", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
953 [label="193_ function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n953-function_definition-194-203", method="approve(address _spender,uint256 _value)", type_label=function_definition];
964 [label="198_ whenNotPaused\n964-expression_statement-199-199", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
971 [label="201_ return super.approve(_spender, _value);\n971-return-202-202", method="approve(address _spender,uint256 _value)", type_label=return];
980 [label="203_ function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n980-function_definition-204-213", method="increaseApproval(address _spender,uint _addedValue)", type_label=function_definition];
991 [label="208_ whenNotPaused\n991-expression_statement-209-209", method="increaseApproval(address _spender,uint _addedValue)", type_label=expression_statement];
999 [label="211_ return super.increaseApproval(_spender, _addedValue);\n999-return-212-212", method="increaseApproval(address _spender,uint _addedValue)", type_label=return];
1008 [label="213_ function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n1008-function_definition-214-223", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=function_definition];
1019 [label="218_ whenNotPaused\n1019-expression_statement-219-219", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=expression_statement];
1027 [label="221_ return super.decreaseApproval(_spender, _subtractedValue);\n1027-return-222-222", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=return];
1042 [label="225_ string public name;\n1042-new_variable-226-226", method="", type_label=new_variable];
1047 [label="226_ string public symbol;\n1047-new_variable-227-227", method="", type_label=new_variable];
1052 [label="227_ uint8 public decimals;\n1052-new_variable-228-228", method="", type_label=new_variable];
1071 [label="229_ name = _name;\n1071-expression_statement-230-230", method="", type_label=expression_statement];
1075 [label="230_ symbol = _symbol;\n1075-expression_statement-231-231", method="", type_label=expression_statement];
1079 [label="231_ decimals = _decimals;\n1079-expression_statement-232-232", method="", type_label=expression_statement];
1092 [label="236_ string public constant name = \"CirilloChain\";\n1092-new_variable-237-237", method="", type_label=new_variable];
1099 [label="237_ string public constant symbol = \"CIN\";\n1099-new_variable-238-238", method="", type_label=new_variable];
1106 [label="238_ uint8 public constant decimals = 18;\n1106-new_variable-239-239", method="", type_label=new_variable];
1112 [label="239_ uint256 public constant INITIAL_SUPPLY = 5000000000 * (10 ** uint256(decimals));\n1112-new_variable-240-240", method="", type_label=new_variable];
1127 [label="241_ totalSupply_ = INITIAL_SUPPLY;\n1127-expression_statement-242-242", method="", type_label=expression_statement];
1131 [label="242_ balances[msg.sender] = INITIAL_SUPPLY;\n1131-expression_statement-243-243", method="", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
693;
64 -> 82  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
82 -> 87  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
82 -> 1228  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1228 -> 89  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 1228  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
87 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
89 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
106 -> 123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
123 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
127 -> 144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
144 -> 151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
155 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
186 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
199 -> 206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
211 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
222 -> 238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
238 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
258 -> 275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
301 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
406 -> 426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
426 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
448 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
470 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
515 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
554 -> 571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
571 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
577 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
631 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
634 -> 650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
650 -> 662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
662 -> 667  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
662 -> 678  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1808 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
667 -> 1808  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
678 -> 1808  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
709 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
747 -> 756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
774 -> 784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
789 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
826 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
847 -> 852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
857 -> 859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
869 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
872 -> 874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
893 -> 911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
911 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
920 -> 942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
942 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
953 -> 971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
971 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
980 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1008 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1042 -> 1047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1047 -> 1052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1071 -> 1075  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1075 -> 1079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1092 -> 1099  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1099 -> 1106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1127 -> 1131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
