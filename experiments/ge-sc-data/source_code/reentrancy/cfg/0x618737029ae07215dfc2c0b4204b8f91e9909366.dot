digraph  {
13 [label="2_ address public owner;\n13-new_variable-3-3", method="", type_label=new_variable];
18 [label="3_ function Ownable() {\n    owner = msg.sender;\n  }\n18-function_definition-4-6", method="Ownable()", type_label=function_definition];
21 [label="4_ owner = msg.sender;\n21-expression_statement-5-5", method="Ownable()", type_label=expression_statement];
27 [label="6_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n27-expression_statement-7-10", method="", type_label=expression_statement];
30 [label="7_ require(msg.sender == owner);\n30-expression_statement-8-8", method="", type_label=expression_statement];
39 [label="8_ _;\n39-expression_statement-9-9", method="", type_label=expression_statement];
41 [label="10_ function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n41-function_definition-11-15", method="transferOwnership(address newOwner)", type_label=function_definition];
47 [label="10_ onlyOwner\n47-expression_statement-11-11", method="transferOwnership(address newOwner)", type_label=expression_statement];
50 [label="11_ if_newOwner != address(0)\n50-if-12-14", method="transferOwnership(address newOwner)", type_label=if];
265 [label="11_ end_if", method="transferOwnership(address newOwner)", type_label=end_if];
57 [label="12_ owner = newOwner;\n57-expression_statement-13-13", method="transferOwnership(address newOwner)", type_label=expression_statement];
67 [label="17_ mapping (address => bool) public investorWhiteList;\n67-new_variable-18-18", method="", type_label=new_variable];
74 [label="18_ mapping (address => address) public referralList;\n74-new_variable-19-19", method="", type_label=new_variable];
81 [label="19_ function InvestorWhiteList() {\n  }\n81-function_definition-20-21", method="InvestorWhiteList()", type_label=function_definition];
84 [label="21_ function addInvestorToWhiteList(address investor) external onlyOwner {\n    require(investor != 0x0 && !investorWhiteList[investor]);\n    investorWhiteList[investor] = true;\n  }\n84-function_definition-22-25", method="addInvestorToWhiteList(address investor)", type_label=function_definition];
91 [label="21_ onlyOwner\n91-expression_statement-22-22", method="addInvestorToWhiteList(address investor)", type_label=expression_statement];
94 [label="22_ require(investor != 0x0 && !investorWhiteList[investor]);\n94-expression_statement-23-23", method="addInvestorToWhiteList(address investor)", type_label=expression_statement];
106 [label="23_ investorWhiteList[investor] = true;\n106-expression_statement-24-24", method="addInvestorToWhiteList(address investor)", type_label=expression_statement];
113 [label="25_ function removeInvestorFromWhiteList(address investor) external onlyOwner {\n    require(investor != 0x0 && investorWhiteList[investor]);\n    investorWhiteList[investor] = false;\n  }\n113-function_definition-26-29", method="removeInvestorFromWhiteList(address investor)", type_label=function_definition];
120 [label="25_ onlyOwner\n120-expression_statement-26-26", method="removeInvestorFromWhiteList(address investor)", type_label=expression_statement];
123 [label="26_ require(investor != 0x0 && investorWhiteList[investor]);\n123-expression_statement-27-27", method="removeInvestorFromWhiteList(address investor)", type_label=expression_statement];
134 [label="27_ investorWhiteList[investor] = false;\n134-expression_statement-28-28", method="removeInvestorFromWhiteList(address investor)", type_label=expression_statement];
141 [label="29_ function addReferralOf(address investor, address referral) external onlyOwner {\n    require(investor != 0x0 && referral != 0x0 && referralList[investor] == 0x0 && investor != referral);\n    referralList[investor] = referral;\n  }\n141-function_definition-30-33", method="addReferralOf(address investor,address referral)", type_label=function_definition];
152 [label="29_ onlyOwner\n152-expression_statement-30-30", method="addReferralOf(address investor,address referral)", type_label=expression_statement];
155 [label="30_ require(investor != 0x0 && referral != 0x0 && referralList[investor] == 0x0 && investor != referral);\n155-expression_statement-31-31", method="addReferralOf(address investor,address referral)", type_label=expression_statement];
176 [label="31_ referralList[investor] = referral;\n176-expression_statement-32-32", method="addReferralOf(address investor,address referral)", type_label=expression_statement];
182 [label="33_ function isAllowed(address investor) constant external returns (bool result) {\n    return investorWhiteList[investor];\n  }\n182-function_definition-34-36", method="isAllowed(address investor)", type_label=function_definition];
188 [label="33_ constant\n188-expression_statement-34-34", method="isAllowed(address investor)", type_label=expression_statement];
197 [label="34_ return investorWhiteList[investor];\n197-return-35-35", method="isAllowed(address investor)", type_label=return];
201 [label="36_ function getReferralOf(address investor) constant external returns (address result) {\n    return referralList[investor];\n  }\n201-function_definition-37-39", method="getReferralOf(address investor)", type_label=function_definition];
207 [label="36_ constant\n207-expression_statement-37-37", method="getReferralOf(address investor)", type_label=expression_statement];
216 [label="37_ return referralList[investor];\n216-return-38-38", method="getReferralOf(address investor)", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
61;
18 -> 21  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 39  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
41 -> 50  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
50 -> 57  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
50 -> 265  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
265 -> 61  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
57 -> 265  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
67 -> 74  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
84 -> 94  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
94 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
123 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
201 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
